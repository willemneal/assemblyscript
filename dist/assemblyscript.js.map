{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__20__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_MUTABLE_GLOBAL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","String","Array","FixedArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","abort","pow","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocArray","feature_1","Feature","target_1","Target","typeinfo_1","Typeinfo","TypeinfoFlags","__export","isPowerOf2","x","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","withRelatedRange","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","emitDiagnostic","info","infoRelated","warning","warningRelated","error","errorRelated","OperatorKind","common_1","diagnostics_1","types_1","ast_1","resolver_1","flow_1","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","operatorKindFromDecorator","decoratorKind","arg","DecoratorKind","OPERATOR","OPERATOR_BINARY","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","OPERATOR_PREFIX","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","OPERATOR_POSTFIX","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","Program","_super","_this","sources","diagnosticsOffset","explicitStartFunction","filesByName","elementsByName","elementsByDeclaration","instancesByName","typeClasses","managedClasses","nextClassId","nativeDummySignature","nativeSource","Source","SourceKind","LIBRARY","nativeFile","File","set","internalName","resolver","Resolver","__extends","writeRuntimeHeader","buffer","offset","classInstance","payloadSize","writeI32","id","makeNativeVariableDeclaration","flags","NONE","Node","createVariableDeclaration","createIdentifierExpression","makeNativeTypeDeclaration","identifier","createTypeDeclaration","createOmittedType","makeNativeFunctionDeclaration","createFunctionDeclaration","createSignature","createType","createSimpleTypeName","makeNativeNamespaceDeclaration","createNamespaceDeclaration","makeNativeFunction","signature","parent","decoratorFlags","Function","FunctionPrototype","getElementByDeclaration","declaration","has","initialize","options","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","EXPORT","GENERIC","BUILTIN","hasFeature","registerConstantInteger","i64_new","isWasm64","WASM64","WASM32","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","k","file","statements","j","statement","kind","NodeKind","initializeExports","IMPORT","initializeImports","VARIABLE","initializeVariables","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","FUNCTIONDECLARATION","initializeFunction","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeDefinition","queuedExportsStar_1","__values","queuedExportsStar_1_1","next","done","_g","__read","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","File_0_not_found","queuedImport","element","lookupForeign","Module_0_has_no_exported_member_1","localName","asImportedNamespace","queuedExports_1","queuedExports_1_1","_h","exports_1","exports_1_1","_j","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","arrayBufferInstance","requireClass","stringInstance","arrayBufferViewInstance","registerNativeTypeClass","i8ArrayPrototype","CLASS_PROTOTYPE","i16ArrayPrototype","i32ArrayPrototype","i64ArrayPrototype","u8ArrayPrototype","u8ClampedArrayPrototype","u16ArrayPrototype","u32ArrayPrototype","u64ArrayPrototype","f32ArrayPrototype","f64ArrayPrototype","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","SEALED","Class_0_is_sealed_and_cannot_be_extended","identifierNode","UNMANAGED","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","Range","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_k","alias","firstChar","parseI32","Error","arrayPrototype","fixedArrayPrototype","setPrototype","mapPrototype","abortInstance","requireFunction","allocInstance","reallocInstance","freeInstance","retainInstance","releaseInstance","collectInstance","typeinfoInstance","instanceofInstance","visitInstance","allocArrayInstance","_l","values","_m","isEntry","_o","_p","markModuleExport","resolved","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","MODULE_EXPORT","instanceMembers","_c","_d","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FUNCTION","FIELD","CLASS","members","_e","_f","type","setType","typeKind","className","classElement","is","global","Global","CONST","setConstantIntegerValue","registerConstantFloat","setConstantFloatValue","ensureGlobal","merged","tryMerge","Duplicate_identifier_0","elements","requireGlobal","foreignName","lookupExport","fileQueuedExports","checkDecorators","decorators","acceptedFlags","decorator","flag","decoratorKindToFlag","decoratorNameToKind","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","GLOBAL","implementsTypes","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Operation_not_supported","extendsType","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeProperty","initializeMethod","INDEXSIGNATUREDECLARATION","STATIC","INTERFACE_PROTOTYPE","READONLY","INLINE","LAZY","UNSAFE","ABSTRACT","FieldPrototype","addInstance","isStatic","CONSTRUCTOR","checkOperatorOverloads","classPrototype","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","ensureProperty","parentMembers","PropertyPrototype","Duplicate_property_0","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","internalPath","queued","endsWith","path","exportedName","Export_declaration_conflicts_with_exported_declaration_of_0","declarations","initializeImport","namespaceName","validDecorators","AMBIENT","EXTERNAL","INSTANCE","FILE","START","Module_cannot_have_multiple_start_functions","findDecorator","InterfacePrototype","original","Namespace","copyMembers","DECLARE","Element","program","shadowType","current","unset","originalDeclaration","actual","isBound","TypedElement","apply","RESOLVED","startFunction","Signature","isImport","lookup","includes","exports_2","exports_2_1","_b","memberName","TYPEDEFINITION","mangleInternalName","typeParameters","NAMESPACE","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","initializer","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","isImmutable","Parameter","Local","index","LOCAL","instances","boundPrototypes","body","arrowKind","toBound","bound","getResolvedInstance","instanceKey","setResolvedInstance","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","addLocal","locals","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","FunctionTarget","__s","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","parameterIndex","Field","memoryOffset","firstDeclaration","Property","getterInstance","setterInstance","AcyclicState","_isInterface","constructorPrototype","extends","basePtototype","Class","typeArguments","base","INTERFACE","currentMemoryOffset","constructorInstance","_id","_acyclic","asClass","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","baseName","baseType","typeParameterNodes","numTypeArguments","isBuiltinArray","lengthField","lookupOverload","isAssignableTo","target","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","writeField","baseOffset","writeI8","writeI16","writeF32","writeF64","getTypeArgumentsTo","extendedPrototype","getArrayValueType","abvInstance","acyclic","hasCycle","cyclesTo","other","except","classReference","Interface","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","srcMembers_1","srcMembers_1_1","isInstance","asGlobal","NativeType","ExpressionId","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeUnreachable","_BinaryenTypeAuto","FeatureFlags","_BinaryenFeatureAtomics","_BinaryenFeatureMutableGlobals","_BinaryenFeatureNontrappingFPToInt","_BinaryenFeatureSIMD128","_BinaryenFeatureBulkMemory","_BinaryenFeatureSignExt","_BinaryenFeatureExceptionHandling","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenLocalGetId","_BinaryenLocalSetId","_BinaryenGlobalGetId","_BinaryenGlobalSetId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicNotifyId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDBitselectId","_BinaryenSIMDShiftId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","HostOp","_BinaryenMemorySize","_BinaryenMemoryGrow","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDExtractOp","_BinaryenExtractLaneSVecI8x16","_BinaryenExtractLaneUVecI8x16","_BinaryenExtractLaneSVecI16x8","_BinaryenExtractLaneUVecI16x8","_BinaryenExtractLaneVecI32x4","_BinaryenExtractLaneVecI64x2","_BinaryenExtractLaneVecF32x4","_BinaryenExtractLaneVecF64x2","SIMDReplaceOp","_BinaryenReplaceLaneVecI8x16","_BinaryenReplaceLaneVecI16x8","_BinaryenReplaceLaneVecI32x4","_BinaryenReplaceLaneVecI64x2","_BinaryenReplaceLaneVecF32x4","_BinaryenReplaceLaneVecF64x2","SIMDShiftOp","_BinaryenShlVecI8x16","_BinaryenShrSVecI8x16","_BinaryenShrUVecI8x16","_BinaryenShlVecI16x8","_BinaryenShrSVecI16x8","_BinaryenShrUVecI16x8","_BinaryenShlVecI32x4","_BinaryenShrSVecI32x4","_BinaryenShrUVecI32x4","_BinaryenShlVecI64x2","_BinaryenShrSVecI64x2","_BinaryenShrUVecI64x2","MemorySegment","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","_BinaryenModuleCreate","lit","memory","allocate","_BinaryenSizeofLiteral","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","result","paramTypes","cStr","allocStringCached","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","store","_BinaryenLiteralVec128","unary","op","expr","_BinaryenUnary","binary","left","right","_BinaryenBinary","host","operands","allocPtrArray","_BinaryenHost","local_get","_BinaryenLocalGet","local_tee","_BinaryenLocalTee","global_get","_BinaryenGlobalGet","load","signed","ptr","align","_BinaryenLoad","None","_BinaryenStore","atomic_load","_BinaryenAtomicLoad","atomic_store","_BinaryenAtomicStore","atomic_rmw","_BinaryenAtomicRMW","atomic_cmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","atomic_wait","timeout","expectedType","_BinaryenAtomicWait","atomic_notify","notifyCount","_BinaryenAtomicNotify","local_set","_BinaryenLocalSet","global_set","_BinaryenGlobalSet","block","label","children","_BinaryenBlock","br","condition","_BinaryenBreak","drop","expression","_BinaryenDrop","loop","_BinaryenLoop","if","ifTrue","ifFalse","_BinaryenIf","nop","_BinaryenNop","return","_BinaryenReturn","select","_BinaryenSelect","switch","names","defaultName","numNames","strs","_BinaryenSwitch","returnType","_BinaryenCall","call_indirect","typeName","_BinaryenCallIndirect","unreachable","_BinaryenUnreachable","memory_copy","size","_BinaryenMemoryCopy","memory_fill","_BinaryenMemoryFill","simd_extract","vec","idx","_BinaryenSIMDExtract","simd_replace","_BinaryenSIMDReplace","simd_shuffle","vec1","vec2","mask","_BinaryenSIMDShuffle","simd_bitselect","cond","_BinaryenSIMDBitselect","simd_shift","shift","_BinaryenSIMDShift","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","externalName","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","shared","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","setMemory","initial","maximum","segments","segs","psvs","offs","sizs","i64_low","i64_high","cArr1","cArr2","cArr3","cArr4","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","getFeatures","_BinaryenModuleGetFeatures","setFeatures","featureFlags","_BinaryenModuleSetFeatures","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","readBuffer","readString","toText","toAsmjs","str","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getExpressionId","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getConstValueF32","getConstValueF64","getLocalGetIndex","getLocalSetIndex","_BinaryenLocalSetGetIndex","getLocalSetValue","_BinaryenLocalSetGetValue","isLocalTee","_BinaryenLocalSetIsTee","getGlobalGetName","getBinaryOp","getBinaryLeft","getBinaryRight","getUnaryOp","getUnaryValue","getLoadBytes","getLoadOffset","getLoadPtr","isLoadSigned","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","getBlockName","_BinaryenBlockGetName","getBlockChildCount","_BinaryenBlockGetNumChildren","getBlockChild","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","getIfTrue","_BinaryenIfGetIfTrue","getIfFalse","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","getSelectThen","_BinaryenSelectGetIfTrue","getSelectElse","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","getCallTarget","_BinaryenCallGetTarget","getCallOperandCount","_BinaryenCallGetNumOperands","getCallOperand","_BinaryenCallGetOperand","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","needsExplicitUnreachable","Unreachable","Return","Break","Block","numChildren","traverse","data","If","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDBitselect","_BinaryenSIMDBitselectGetLeft","_BinaryenSIMDBitselectGetRight","_BinaryenSIMDBitselectGetCond","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Select","Drop","Host","Nop","tokenizer_1","Token","nodeIsConstantValue","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","ASSERTION","CALL","ELEMENTACCESS","PARENTHESIZED","PROPERTYACCESS","SUPER","nodeIsGenericCallable","createTypeName","TypeName","isNullable","TypeNode","createTypeParameter","defaultType","elem","TypeParameterNode","createParameter","ParameterNode","parameterKind","parameters","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","createComment","node","CommentNode","commentKind","isQuoted","IdentifierExpression","symbol","createEmptyIdentifierExpression","createArrayLiteralExpression","ArrayLiteralExpression","elementExpressions","createAssertionExpression","assertionKind","toType","AssertionExpression","createBinaryExpression","operator","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportImportStatement","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","FunctionDeclaration","createIndexSignatureDeclaration","keyType","valueType","IndexSignatureDeclaration","createMethodDeclaration","MethodDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","TypeDeclaration","createVariableStatement","VariableStatement","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","TYPENAME","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","SIGNATURE","nameStr","propStr","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","BINARY","numArguments","COMMA","FLOAT","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","Statement","SOURCE","tokenizer","exportPaths","sourceKind","pos","lastIndexOf","simplePath","ENTRY","DeclarationStatement","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FOR","ArrowKind","clone","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","isTypeOmitted","program_1","module_1","TypeKind","TypeFlags","v128_zero","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","isize64","isize32","usize64","usize32","clz","computeSmallIntegerShift","targetType","computeSmallIntegerMask","classType","asNullable","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isStrictlyAssignableTo","commonDenominator","signednessIsImportant","toNativeType","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","asFunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","g","e","window","ReportMode","builtins_1","currentThisExpression","currentElementExpression","resolveType","context","reportMode","REPORT","parameterNodes","parameterNode","REST","parameterTypeNode","Type_expected","returnTypeNode","typeNode","typeArgumentNodes","possiblyPlaceholder","Type_0_is_not_generic","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","type_1","Expected_0_type_arguments_but_got_1","typeArgument","resolveTypeArguments","Cannot_find_name_0","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","resolveIdentifier","ensureResolvedLazyGlobal","resolvePropertyAccessExpression","propertyAccess","contextualType","targetExpression","resolveExpression","propertyName","indexedGet","Index_signature_is_missing_in_type_0","arrayType","resolvedType","resolveElementAccessExpression","elementAccess","determineIntegerLiteralType","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","resolveAssertionExpression","resolveUnaryPrefixExpression","resolveUnaryPostfixExpression","resolveBinaryExpression","resolveThisExpression","resolveSuperExpression","actualFunction","resolveLiteralExpression","resolveCallExpression","NONNULL","i64_sub","i64_zero","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","literalType","BuiltinSymbols","resolveFunctionInclTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","actualParent","resolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","signatureParameters","numSignatureParameters","parameterDeclaration","reportNode","resolvedTypeArguments","numTypeParameters","baseClass","nameInclTypeParamters","baseMembers","baseMembers_1","baseMembers_1_1","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","atEnd","fieldInstance","boundPrototype","propertyInstance","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","LocalFlags","FlowFlags","ANY_CATEGORICAL","ANY_CONDITIONAL","FieldFlags","scopedLocals","fieldFlags","parentFunction","continueLabel","localFlags","inlineFunction","inlineReturnLabel","createInline","fork","branch","slice","getTempLocal","temps","usedLocals","findUsedLocals","k_1","unsetLocalFlag","pop","getAutoreleaseLocal","SCOPED","setLocalFlag","RETAINED","freeTempLocal","getAndFreeTempLocal","addScopedLocal","scopedLocal","existingLocal","addScopedAlias","scopedAlias","blockLocalsBeforeInlining","unblockLocals","freeScopedLocals","scope","isLocalFlag","defaultIfInlined","isAnyLocalFlag","pushBreakLabel","stack","popBreakLabel","inherit","inheritConditional","CONDITIONALLY_RETAINED","READFROM","CONDITIONALLY_READFROM","WRITTENTO","CONDITIONALLY_WRITTENTO","inheritMutual","leftLocalFlags","numLeftLocalFlags","rightLocalFlags","numRightLocalFlags","combinedFlags","max","isNonnull","inheritNonnullIfTrue","EqzI32","EqzI64","inheritNonnullIfFalse","EqI32","EqI64","NeI32","NeI64","canOverflow","WRAPPED","canConversionOverflow","global_1","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","MIN_VALUE","fromType","last","instanceName","levels","used","Options","importMemory","sharedMemory","importTable","features","feature","ContextualFlags","RuntimeFeatures","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","runtimeFeatures","skippedAutoreleases","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","Atomics","MutableGloabls","SIMD128","BulkMemory","SignExt","compile","startFunctionInstance","startFunctionBody","currentFlow","currentBody","HEAP_BASE","RTTI_BASE","files","compileFile","compileExports","hasExplicitStart","funcRef","ensureFunctionType","compileVisitGlobals","compileVisitMembers","compileRTTI","i64_align","isSharedMemory","i64_shr_u","ensureModuleExports","members_1","members_1_1","ensureModuleExport","prefix","fullName","setter","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","ensureModuleFieldGetter","ensureModuleFieldSetter","isUnmanaged","subPrefix","loadExpr","isManaged","makeRetain","nativeType","nativeSizeType","valueExpr","makeRetainRelease","compileElement","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","element_1","exportsStar_1","exportsStar_1_1","compileFileByPath","normalizedPathWithoutExtension","pathWithIndex","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","initAutoreleaseSkipped","initializerNode","compileExpression","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","MODULE_IMPORT","mangleImportName","initializeInStart","Compiling_constant_with_non_constant_initializer_as_mutable","decoratorNodes","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","makeGlobalAssignment","compileFunction","resultType","compileFunctionBody","stmts","bodyNode","compileStatements","MAIN","indexBefore","performAutoreleases","nonNull","temp","started","unshift","thisLocalIndex","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","previousType","An_implementation_cannot_be_declared_in_ambient_contexts","flatten","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileClass","staticMembers","compileInterfaceDeclaration","addMemorySegment","alignment","ensureStaticString","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","ensureStaticArrayBuffer","elementType","byteLength","bufferInstance","buf","writeI64","ensureStaticArrayHeader","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","ensureFunctionTableEntry","TRAMPOLINE","memberStatements","compileStatement","contextualFlags","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","terminated","repeatLabel","alwaysTrue","compileExpressionRetainType","incrExpr","bodyStatement","usesContinue","breakBlock","repeatBlock","ifTrueStmts","ifTrueFlow","ifFalseFlow","ifFalseStmts","valueExpression","contextualFlags_1","ANY_RETAINED","numCases","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","newArgs","compileAbort","numDeclarations","initializers","isInlined","_const_declarations_must_be_initialized","compileInlineConstant","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","convertExpression","ensureSmallIntegerWrap","explicit","Object_is_possibly_null","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","PREFIX","Expression_is_never_null","tempIndex","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","AllTrueVecI8x16","EqVecI8x16","AnyTrueVecI8x16","NeVecI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","moveAutorelease","rightStmts","makeRelease","retainLeftInThen","makeAssignment","compileUnaryOverload","thisExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","indexExpression","tee","makeLocalAssignment","makeFieldAssignment","makeAutorelease","nativeReturnType","thisExpr_1","thisExpr","elementExpr","tempLocalTarget","tempLocalElement","makeSkippedRelease","nativeFieldType","nativeThisType","tempThis","tempValue","flow_2","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","compileCallDirect","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","inferredTypes","argumentNodes","argumentExprs","templateName","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","argumentExpressions","thisArg","inlineCanAlias","compileCallInlinePrechecked","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","compileCallInline","canAlias","immediatelyDropped","makeCallInlinePrechecked","baseInstance","paramExpr","paramType","argumentLocal","initType","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","argc","Optional_parameter_must_have_an_initializer","ensureArgcVar","setargc","oldExpr","newExpr","temp1","temp2","undoAutorelease","fromInnerFlow","toOuterFlow","clearFlags","lengthBefore","skipAutorelease","TODO_Cannot_inline_inferred_calls_and_specific_internals_yet","numOperands","isCallImport","allOptionalsAreConstant","expr_1","makeCallIndirect","numExpressions","exprs","contextualSignature","numPresentParameters","thisTypeNode","maybeCompileEnclosingSource","flow_3","actualFunction_1","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","actualType","implicitlyNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","isConst","tempDataStart","allValuesAreConstant","nativeElementType","bufferAddress","arraySegment","arrayAddress","alignLog2","nativeArrayType","dataStart","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","compileInstantiate","baseCtor","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","IfThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","makeInstanceOfClass","idTemp","idExpr","conditions","Auto","compiler_1","compiler","isAsm","directize","isInteger","evaluateConstantType","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","checkTypeAbsent","checkArgsRequired","SWALLOW","isConstant","sizeof","checkTypeRequired","alignof","ctz","checkArgsOptional","typeArgumentsRange","Type_0_has_no_property_1","popcnt","checkTypeOptional","ClzI64","CtzI64","PopcntI64","rotl","RotlI32","RotlI64","rotr","RotrI32","RotrI64","abs","tempLocal1","tempLocalIndex2","tempLocalIndex1","wasm64","AbsF32","AbsF64","MaxF32","MaxF64","tempLocal0","min","MinF32","MinF64","floor","CeilF32","FloorF32","CeilF64","FloorF64","copysign","CopysignF32","CopysignF64","nearest","NearestF32","NearestF64","reinterpret","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","sqrt","SqrtF32","SqrtF64","trunc","TruncF32","TruncF64","outType","immOffset","evaluateImmediateOffset","immAlign","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","inType","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","Add","Sub","And","Or","Xor","Xchg","memory_size","MemorySize","memory_grow","MemoryGrow","alreadyUnchecked","call_direct","arg0Type","operandExprs","nativeParamTypes","operandType","instantiate","User_defined_0","Expression_must_be_a_compile_time_constant","off","v128_splat","SplatVecI8x16","SplatVecI16x8","SplatVecI32x4","SplatVecI64x2","SplatVecF32x4","SplatVecF64x2","v128_extract_lane","ExtractLaneSVecI8x16","ExtractLaneUVecI8x16","ExtractLaneSVecI16x8","ExtractLaneUVecI16x8","ExtractLaneVecI32x4","ExtractLaneVecI64x2","ExtractLaneVecF32x4","ExtractLaneVecF64x2","maxIdx","v128_replace_lane","ReplaceLaneVecI8x16","ReplaceLaneVecI16x8","ReplaceLaneVecI32x4","ReplaceLaneVecI64x2","ReplaceLaneVecF32x4","ReplaceLaneVecF64x2","v128_shuffle","laneWidth","laneCount","argN","off8","idx8","v128_add","v128_sub","v128_mul","v128_div","v128_add_saturate","v128_sub_saturate","v128_min","v128_max","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","AddVecI8x16","AddVecI16x8","AddVecI32x4","AddVecI64x2","AddVecF32x4","AddVecF64x2","SubVecI8x16","SubVecI16x8","SubVecI32x4","SubVecI64x2","SubVecF32x4","SubVecF64x2","MulVecI8x16","MulVecI16x8","MulVecI32x4","MulVecF32x4","MulVecF64x2","DivVecF32x4","DivVecF64x2","AddSatSVecI8x16","AddSatUVecI8x16","AddSatSVecI16x8","AddSatUVecI16x8","SubSatSVecI8x16","SubSatUVecI8x16","SubSatSVecI16x8","SubSatUVecI16x8","MinVecF32x4","MinVecF64x2","MaxVecF32x4","MaxVecF64x2","EqVecI16x8","EqVecI32x4","EqVecF32x4","EqVecF64x2","NeVecI16x8","NeVecI32x4","NeVecF32x4","NeVecF64x2","LtSVecI8x16","LtUVecI8x16","LtSVecI16x8","LtUVecI16x8","LtSVecI32x4","LtUVecI32x4","LtVecF32x4","LtVecF64x2","LeSVecI8x16","LeUVecI8x16","LeSVecI16x8","LeUVecI16x8","LeSVecI32x4","LeUVecI32x4","LeVecF32x4","LeVecF64x2","GtSVecI8x16","GtUVecI8x16","GtSVecI16x8","GtUVecI16x8","GtSVecI32x4","GtUVecI32x4","GtVecF32x4","GtVecF64x2","GeSVecI8x16","GeUVecI8x16","GeSVecI16x8","GeUVecI16x8","GeSVecI32x4","GeUVecI32x4","GeVecF32x4","GeVecF64x2","v128_neg","v128_abs","v128_sqrt","v128_convert","v128_trunc","NegVecI8x16","NegVecI16x8","NegVecI32x4","NegVecI64x2","NegVecF32x4","NegVecF64x2","AbsVecF32x4","AbsVecF64x2","SqrtVecF32x4","SqrtVecF64x2","ConvertSVecI32x4ToVecF32x4","ConvertUVecI32x4ToVecF32x4","ConvertSVecI64x2ToVecF64x2","ConvertUVecI64x2ToVecF64x2","TruncSatSVecF32x4ToVecI32x4","TruncSatUVecF32x4ToVecI32x4","TruncSatSVecF64x2ToVecI64x2","TruncSatUVecF64x2ToVecI64x2","v128_shl","v128_shr","ShlVecI8x16","ShlVecI16x8","ShlVecI32x4","ShlVecI64x2","ShrSVecI8x16","ShrUVecI8x16","ShrSVecI16x8","ShrUVecI16x8","ShrSVecI32x4","ShrUVecI32x4","ShrSVecI64x2","ShrUVecI64x2","v128_and","v128_or","v128_xor","AndVec128","OrVec128","XorVec128","v128_not","NotVec128","v128_bitselect","v128_any_true","v128_all_true","AnyTrueVecI16x8","AnyTrueVecI32x4","AnyTrueVecI64x2","AllTrueVecI16x8","AllTrueVecI32x4","AllTrueVecI64x2","idof","visit_globals","visit_members","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_u_xor","i32_atomic_rmw16_u_xor","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_s_f32x4_sat","i32x4_trunc_u_f32x4_sat","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_s_f64x2_sat","i64x2_trunc_u_f64x2_sat","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_s_i32x4","f32x4_convert_u_i32x4","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_s_i64x2","f64x2_convert_u_i64x2","v8x16_shuffle","tryDeferASM","messageArg","filenameArg","typeToRuntimeFlags","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","memory_allocate","memory_free","memory_reset","runtime_instanceof","runtime_flags","runtime_allocate","runtime_reallocate","runtime_register","runtime_discard","runtime_makeArray","capabilities","nativeSizeSize","ftype","blocks","outer","lastId","managedClasses_1","managedClasses_1_1","visitImpl","isDeclaredInLibrary","visitFunc","visitSig","callExpr","fieldOffset","managedClasses_2","managedClasses_2_1","abvPrototype","managedClasses_3","managedClasses_3_1","isAcyclic","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","i64_to_string","ExportsWalker","includePrivate","todo","seen","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","visitNamespace","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","isInterface","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","parseParameters","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","parseFunctionExpressionCommon","bodyExpression","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","setEnd","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","_super_must_be_followed_by_an_argument_list_or_member_access","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","skipBlock","depth","Precedence","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","UnreachableError","captureStackTrace","AssertionError","defineProperties","writable","fround","EPSILON","MIN_NORMAL_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","clz32","round","y","sign","isTrueish","radix","parseInt","undefined","fromCodePoint","Number","capacity","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","HEAP","HEAP_OFFSET","oldHeap","fill","copy","copyWithin","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","__decorate","unmanaged","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoAssert","setImportMemory","setSharedMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","bitsetIs","map","bitsetSet","isSet","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","makeArray","cloned","makeSet","original_1","original_1_1","v","overrides","original_2","original_2_1","overrides_1","overrides_1_1","overrides_2","overrides_2_1","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","readI32","readI64","readI8","readI16","readF32","readF64","valueI64"],"mappings":"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IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAG1D,SAASF,EAAmBt/G,EAAWk/G,GACrC,GAAIl/G,EAAOk/G,EAAI,GAAI,OAAO,EAO1B,IALA,IAEIO,EACAC,EAHAjM,EAAK,EACLC,EAAKwL,EAAI59G,OAINmyG,EAAK,EAAIC,GAAI,CAIlB,GAHA+L,EAAMhM,GAAOC,EAAKD,GAAO,IAEzBiM,EAASR,EADTO,GAAc,EAANA,KAEMz/G,GAAQA,GAAQk/G,EAAIO,EAAM,GACtC,OAAO,EAELz/G,EAAO0/G,EACThM,EAAK+L,EAELhM,EAAKgM,EAAM,EAGf,OAAO,ikBC9WT1qH,EAAA4qH,UAAA,SAA6BrlG,GAC3B,QAD2B,IAAAA,MAAA,MACvBA,EAAU,CAEZ,IADA,IAAIslG,EAAS,IAAIxjH,MAASke,EAAShZ,QAC1B5L,EAAI,EAAG8V,EAAI8O,EAAShZ,OAAQ5L,EAAI8V,IAAK9V,EAAG6sB,UAAUq9F,EAAOlqH,GAAK4kB,EAAS5kB,IAChF,OAAOkqH,EAET,OAAO,IAAIxjH,OAGbrH,EAAA8qH,QAAA,SAA2BvlG,WACzB,QADyB,IAAAA,MAAA,MACrBA,EAAU,CACZ,IAAIslG,EAAS,IAAItjH,QACjB,IAAc,IAAAwjH,EAAA7yG,EAAAqN,GAAQylG,EAAAD,EAAA3yG,QAAA4yG,EAAA3yG,KAAA2yG,EAAAD,EAAA3yG,OAAA,CAAjB,IAAI6yG,EAACD,EAAAppH,MAAcipH,EAAOx1G,IAAI41G,qGACnC,OAAOJ,EAET,OAAO,IAAItjH,KAGbvH,EAAAqhE,QAAA,SAA6B97C,EAAkC2lG,wBAAlC,IAAA3lG,MAAA,WAAkC,IAAA2lG,MAAA,MAC7D,IAAIL,EAAS,IAAIrjH,IACjB,GAAI+d,EAAU,KACZ,IAAmB,IAAA4lG,EAAAjzG,EAAAqN,GAAQ6lG,EAAAD,EAAA/yG,QAAAgzG,EAAA/yG,KAAA+yG,EAAAD,EAAA/yG,OAAA,CAAlB,IAAAiG,EAAA9F,EAAA6yG,EAAAxpH,MAAA,GAAC6U,EAAA4H,EAAA,GAAG4sG,EAAA5sG,EAAA,GAAgBwsG,EAAOr4G,IAAIiE,EAAGw0G,qGAC3C,GAAIC,MAAW,IAAmB,IAAAG,EAAAnzG,EAAAgzG,GAASI,EAAAD,EAAAjzG,QAAAkzG,EAAAjzG,KAAAizG,EAAAD,EAAAjzG,OAAA,CAAnB,IAAA2G,EAAAxG,EAAA+yG,EAAA1pH,MAAA,GAAC6U,EAAAsI,EAAA,GAAGksG,EAAAlsG,EAAA,GAAiB8rG,EAAOr4G,IAAIiE,EAAGw0G,2GACtD,GAAIC,MACT,IAAmB,IAAAK,EAAArzG,EAAAgzG,GAASM,EAAAD,EAAAnzG,QAAAozG,EAAAnzG,KAAAmzG,EAAAD,EAAAnzG,OAAA,CAAnB,IAAA4G,EAAAzG,EAAAizG,EAAA5pH,MAAA,GAAC6U,EAAAuI,EAAA,GAAGisG,EAAAjsG,EAAA,GAAiB6rG,EAAOr4G,IAAIiE,EAAGw0G,qGAE9C,OAAOJ,kFCpBT,IAAAj9G,EAAAnN,EAAA,GAIMgrH,EAAS,GAMf,SAAgBrhE,EAAc5lC,GAK5B,IAJA,IAiBI8hD,EAjBAtW,EAAM,EACN1jD,EAAMkY,EAAKjY,OAGRyjD,EAAM,EAAI1jD,GACK,IAApBkY,EAAK7X,WAAWqjD,IAChBxrC,EAAK7X,WAAWqjD,EAAM,IAAMy7D,GAE5Bz7D,GAAO,EAUT,KAPIA,EAAM,GAAK1jD,EAAMkY,EAAKjY,UACxBiY,EAAOA,EAAK3X,UAAUmjD,EAAK1jD,GAC3BA,GAAO0jD,EACPA,EAAM,GAIDA,EAAM,EAAI1jD,GAAK,CAIpB,GAHAg6D,GAAQ,EAIN9hD,EAAK7X,WAAWqjD,IAAQy7D,GACA,IAAxBjnG,EAAK7X,WAAWqjD,EAAM,GACtB,CAGA,IADAsW,EAAQtW,EAAM,GAAK1jD,IAEjB0jD,EAAM,EAAI1jD,GACVkY,EAAK7X,WAAWqjD,EAAM,IAAMy7D,EAC5B,CACAjnG,EAAO8hD,EACH9hD,EAAK3X,UAAU,EAAGmjD,GAClBxrC,EAAK3X,UAAU,EAAGmjD,GAAOxrC,EAAK3X,UAAUmjD,EAAM,GAClD1jD,GAAO,EACP,SAKF,IADAg6D,EAAQtW,EAAM,GAAK1jD,IACkB,IAAxBkY,EAAK7X,WAAWqjD,EAAM,IACjCA,EAAM,EAAI1jD,GACc,IAAxBkY,EAAK7X,WAAWqjD,EAAM,IACtBxrC,EAAK7X,WAAWqjD,EAAM,IAAMy7D,EAC5B,CAGA,IADA,IAAIC,EAAO17D,IACF07D,GAAQ,GACf,GAAIlnG,EAAK7X,WAAW++G,IAASD,EAAW,CAClCz7D,EAAM07D,GAAQ,GACS,IAAzBlnG,EAAK7X,WAAW++G,EAAO,IACE,IAAzBlnG,EAAK7X,WAAW++G,EAAO,KAEvBlnG,EAAO8hD,EACH9hD,EAAK3X,UAAU,EAAG6+G,GAClBlnG,EAAK3X,UAAU,EAAG6+G,GAAQlnG,EAAK3X,UAAUmjD,EAAM,GACnD1jD,GAAO0jD,EAAM,EAAI07D,EACjB17D,EAAM07D,EAAO,GAEf,MAKJ,GAAIA,EAAO,GAAK17D,EAAM,IACT,GAAPA,GACgB,IAAlBxrC,EAAK7X,WAAW,IACE,IAAlB6X,EAAK7X,WAAW,IAChB,CAEAL,GADAkY,EAAOA,EAAK3X,UAAUmjD,EAAM,IACjBzjD,OACX,WAKRyjD,IAEF,OAAO1jD,EAAM,EAAIkY,EAAO,IAc1B,SAAgBmnG,EAAQ3/G,GACtB,IAAIgkD,EAAMhkD,EAAeO,OACzB,GAAIyjD,GAAO,EAAG,CACZ,GAAW,GAAPA,EAAU,MAAO,IACrB,GAAIhkD,EAAeW,WAAW,IAAM8+G,EAClC,OAAOz/G,EAGX,OAASgkD,EAAM,GACb,GAAIhkD,EAAeW,WAAWqjD,IAAQy7D,EACpC,OAAOz/G,EAAea,UAAU,EAAGmjD,GAGvC,MAAO,IA3GThwD,EAAAoqD,gBAoFApqD,EAAAsqD,YAAA,SAA4Bt+C,EAAwB4/G,GAClD,OAAI5/G,EAAeq+C,WAAW,QACrBr+C,EAEFo+C,EACLuhE,EAAQC,GAAUh+G,EAAAhL,eAAiBoJ,IAKvChM,EAAA2rH,yFC5GA,IAAME,EAAW,KACXC,EAAW,OACXC,EAAW,WAGjB/rH,EAAA8wG,OAAA,SAAuBlkG,EAAcwkC,GACnC,KAAOA,GAAS,GACdxkC,EAAGE,KAAKi/G,GACR36E,GAAS,EAEPA,GAAS,IACXxkC,EAAGE,KAAKg/G,GACR16E,GAAS,GAEPA,GACFxkC,EAAGE,KAAK++G,kCCQZ,SAAgBG,EAAQl5G,EAAoBC,GAC1C,OAAOD,EAAOC,GACPD,EAAOC,EAAS,IAAM,EACtBD,EAAOC,EAAS,IAAM,GACtBD,EAAOC,EAAS,IAAM,GAI/B,SAAgBG,EAAStR,EAAYkR,EAAoBC,GACvDD,EAAOC,GAAcnR,EACrBkR,EAAOC,EAAS,GAAKnR,IAAU,EAC/BkR,EAAOC,EAAS,GAAKnR,IAAU,GAC/BkR,EAAOC,EAAS,GAAKnR,IAAU,GAIjC,SAAgBqqH,EAAQn5G,EAAoBC,GAC1C,IAAI2rG,EAAKsN,EAAQl5G,EAAQC,GACrB4rG,EAAKqN,EAAQl5G,EAAQC,EAAS,GAClC,OAAO6C,QAAQ8oG,EAAIC,oDAzCrB3+G,EAAAksH,OAAA,SAAuBp5G,EAAoBC,GACzC,OAAOD,EAAOC,IAIhB/S,EAAAguB,QAAA,SAAwBpsB,EAAYkR,EAAoBC,GACtDD,EAAOC,GAAUnR,GAInB5B,EAAAmsH,QAAA,SAAwBr5G,EAAoBC,GAC1C,OAAOD,EAAOC,GACPD,EAAOC,EAAS,IAAM,GAI/B/S,EAAAiuB,SAAA,SAAyBrsB,EAAYkR,EAAoBC,GACvDD,EAAOC,GAAcnR,EACrBkR,EAAOC,EAAS,GAAKnR,IAAU,GAIjC5B,EAAAgsH,UAQAhsH,EAAAkT,WAQAlT,EAAAisH,UAOAjsH,EAAAm3E,SAAA,SAAyBv1E,EAAYkR,EAAoBC,GACvDG,EAASk9B,QAAQxuC,GAAQkR,EAAQC,GACjCG,EAASm9B,SAASzuC,GAAQkR,EAAQC,EAAS,IAI7C/S,EAAAosH,QAAA,SAAwBt5G,EAAoBC,GAC1C,OAAOorG,WAAW6N,EAAQl5G,EAAQC,KAIpC/S,EAAAkuB,SAAA,SAAyBtsB,EAAYkR,EAAoBC,GACvDG,EAASgrG,WAAWt8G,GAAQkR,EAAQC,IAItC/S,EAAAqsH,QAAA,SAAwBv5G,EAAoBC,GAC1C,OAAOsrG,WAAW4N,EAAQn5G,EAAQC,KAIpC/S,EAAAmuB,SAAA,SAAyBvsB,EAAYkR,EAAoBC,GACvD,IAAIu5G,EAAWlO,WAAWx8G,GAC1BsR,EAASk9B,QAAQk8E,GAAWx5G,EAAQC,GACpCG,EAASm9B,SAASi8E,GAAWx5G,EAAQC,EAAS","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__20__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","/**\r\n * Common constants.\r\n * @module common\r\n *//***/\r\n\r\n/** Indicates traits of a {@link Node} or {@link Element}. */\r\nexport enum CommonFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n\r\n  // Basic modifiers\r\n\r\n  /** Has an `import` modifier. */\r\n  IMPORT = 1 << 0,\r\n  /** Has an `export` modifier. */\r\n  EXPORT = 1 << 1,\r\n  /** Has a `declare` modifier. */\r\n  DECLARE = 1 << 2,\r\n  /** Has a `const` modifier. */\r\n  CONST = 1 << 3,\r\n  /** Has a `let` modifier. */\r\n  LET = 1 << 4,\r\n  /** Has a `static` modifier. */\r\n  STATIC = 1 << 5,\r\n  /** Has a `readonly` modifier. */\r\n  READONLY = 1 << 6,\r\n  /** Has an `abstract` modifier. */\r\n  ABSTRACT = 1 << 7,\r\n  /** Has a `public` modifier. */\r\n  PUBLIC = 1 << 8,\r\n  /** Has a `private` modifier. */\r\n  PRIVATE = 1 << 9,\r\n  /** Has a `protected` modifier. */\r\n  PROTECTED = 1 << 10,\r\n  /** Has a `get` modifier. */\r\n  GET = 1 << 11,\r\n  /** Has a `set` modifier. */\r\n  SET = 1 << 12,\r\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\r\n  DEFINITE_ASSIGNMENT = 1 << 13,\r\n\r\n  // Extended modifiers usually derived from basic modifiers\r\n\r\n  /** Is ambient, that is either declared or nested in a declared element. */\r\n  AMBIENT = 1 << 14,\r\n  /** Is generic. */\r\n  GENERIC = 1 << 15,\r\n  /** Is part of a generic context. */\r\n  GENERIC_CONTEXT = 1 << 16,\r\n  /** Is an instance member. */\r\n  INSTANCE = 1 << 17,\r\n  /** Is a constructor. */\r\n  CONSTRUCTOR = 1 << 18,\r\n  /** Is a module export. */\r\n  MODULE_EXPORT = 1 << 19,\r\n  /** Is a module import. */\r\n  MODULE_IMPORT = 1 << 20,\r\n\r\n  // Compilation states\r\n\r\n  /** Is resolved. */\r\n  RESOLVED = 1 << 21,\r\n  /** Is compiled. */\r\n  COMPILED = 1 << 22,\r\n  /** Has a constant value and is therefore inlined. */\r\n  INLINED = 1 << 23,\r\n  /** Is scoped. */\r\n  SCOPED = 1 << 24,\r\n  /** Is a trampoline. */\r\n  TRAMPOLINE = 1 << 25,\r\n  /** Is a virtual method. */\r\n  VIRTUAL = 1 << 26,\r\n  /** Is the main function. */\r\n  MAIN = 1 << 27,\r\n\r\n  // Other\r\n\r\n  /** Is quoted. */\r\n  QUOTED = 1 << 28\r\n}\r\n\r\n/** Path delimiter inserted between file system levels. */\r\nexport const PATH_DELIMITER = \"/\";\r\n/** Substitution used to indicate the parent directory. */\r\nexport const PARENT_SUBST = \"..\";\r\n/** Function name prefix used for getters. */\r\nexport const GETTER_PREFIX = \"get:\";\r\n/** Function name prefix used for setters. */\r\nexport const SETTER_PREFIX = \"set:\";\r\n/** Delimiter used between class names and instance members. */\r\nexport const INSTANCE_DELIMITER = \"#\";\r\n/** Delimiter used between class and namespace names and static members. */\r\nexport const STATIC_DELIMITER = \".\";\r\n/** Delimiter used between a function and its inner elements. */\r\nexport const INNER_DELIMITER = \"~\";\r\n/** Substitution used to indicate a library directory. */\r\nexport const LIBRARY_SUBST = \"~lib\";\r\n/** Library directory prefix. */\r\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\r\n/** Path index suffix. */\r\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\r\n\r\n/** Common compiler symbols. */\r\nexport namespace CommonSymbols {\r\n  // special\r\n  export const EMPTY = \"\";\r\n  // types\r\n  export const i8 = \"i8\";\r\n  export const i16 = \"i16\";\r\n  export const i32 = \"i32\";\r\n  export const i64 = \"i64\";\r\n  export const isize = \"isize\";\r\n  export const u8 = \"u8\";\r\n  export const u16 = \"u16\";\r\n  export const u32 = \"u32\";\r\n  export const u64 = \"u64\";\r\n  export const usize = \"usize\";\r\n  export const bool = \"bool\";\r\n  export const f32 = \"f32\";\r\n  export const f64 = \"f64\";\r\n  export const v128 = \"v128\";\r\n  export const i8x16 = \"i8x16\";\r\n  export const u8x16 = \"u8x16\";\r\n  export const i16x8 = \"i16x8\";\r\n  export const u16x8 = \"u16x8\";\r\n  export const i32x4 = \"i32x4\";\r\n  export const u32x4 = \"u32x4\";\r\n  export const i64x2 = \"i64x2\";\r\n  export const u64x2 = \"u64x2\";\r\n  export const f32x4 = \"f32x4\";\r\n  export const f64x2 = \"f64x2\";\r\n  export const void_ = \"void\";\r\n  export const number = \"number\";\r\n  export const boolean = \"boolean\";\r\n  export const string = \"string\";\r\n  export const native = \"native\";\r\n  // aliases\r\n  export const null_ = \"null\";\r\n  export const true_ = \"true\";\r\n  export const false_ = \"false\";\r\n  // objects\r\n  export const this_ = \"this\";\r\n  export const super_ = \"super\";\r\n  export const constructor = \"constructor\";\r\n  // constants\r\n  export const ASC_TARGET = \"ASC_TARGET\";\r\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\r\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\r\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\r\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\r\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\r\n  export const ASC_FEATURE_MUTABLE_GLOBAL = \"ASC_FEATURE_MUTABLE_GLOBAL\";\r\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\r\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\r\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\r\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\r\n  // classes\r\n  export const I8 = \"I8\";\r\n  export const I16 = \"I16\";\r\n  export const I32 = \"I32\";\r\n  export const I64 = \"I64\";\r\n  export const Isize = \"Isize\";\r\n  export const U8 = \"U8\";\r\n  export const U16 = \"U16\";\r\n  export const U32 = \"U32\";\r\n  export const U64 = \"U64\";\r\n  export const Usize = \"Usize\";\r\n  export const Bool = \"Bool\";\r\n  export const F32 = \"F32\";\r\n  export const F64 = \"F64\";\r\n  export const V128 = \"V128\";\r\n  export const String = \"String\";\r\n  export const Array = \"Array\";\r\n  export const FixedArray = \"FixedArray\";\r\n  export const Set = \"Set\";\r\n  export const Map = \"Map\";\r\n  export const ArrayBufferView = \"ArrayBufferView\";\r\n  export const ArrayBuffer = \"ArrayBuffer\";\r\n  export const Math = \"Math\";\r\n  export const Mathf = \"Mathf\";\r\n  export const Int8Array = \"Int8Array\";\r\n  export const Int16Array = \"Int16Array\";\r\n  export const Int32Array = \"Int32Array\";\r\n  export const Int64Array = \"Int64Array\";\r\n  export const Uint8Array = \"Uint8Array\";\r\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\r\n  export const Uint16Array = \"Uint16Array\";\r\n  export const Uint32Array = \"Uint32Array\";\r\n  export const Uint64Array = \"Uint64Array\";\r\n  export const Float32Array = \"Float32Array\";\r\n  export const Float64Array = \"Float64Array\";\r\n  // runtime\r\n  export const abort = \"abort\";\r\n  export const pow = \"pow\";\r\n  export const mod = \"mod\";\r\n  export const alloc = \"__alloc\";\r\n  export const realloc = \"__realloc\";\r\n  export const free = \"__free\";\r\n  export const retain = \"__retain\";\r\n  export const release = \"__release\";\r\n  export const collect = \"__collect\";\r\n  export const typeinfo = \"__typeinfo\";\r\n  export const instanceof_ = \"__instanceof\";\r\n  export const visit = \"__visit\";\r\n  export const allocArray = \"__allocArray\";\r\n}\r\n\r\n// shared\r\nexport { Feature } from \"../std/assembly/shared/feature\";\r\nexport { Target } from \"../std/assembly/shared/target\";\r\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\r\n","/**\r\n * Various compiler utilities.\r\n * @module util\r\n * @preferred\r\n *//***/\r\n\r\nexport * from \"./bitset\";\r\nexport * from \"./charcode\";\r\nexport * from \"./collections\";\r\nexport * from \"./path\";\r\nexport * from \"./text\";\r\nexport * from \"./binary\";\r\n\r\n/** Tests if `x` is a power of two. */\r\nexport function isPowerOf2(x: i32): bool {\r\n  return x != 0 && (x & (x - 1)) == 0;\r\n}\r\n","/**\r\n * Shared diagnostic handling inherited by the parser and the compiler.\r\n * @module diagnostics\r\n * @preferred\r\n *//***/\r\n\r\nimport {\r\n  Range\r\n} from \"./ast\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\nimport {\r\n  isLineBreak, CharCode\r\n} from \"./util\";\r\n\r\nexport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\n/** Indicates the category of a {@link DiagnosticMessage}. */\r\nexport enum DiagnosticCategory {\r\n  /** Informatory message. */\r\n  INFO,\r\n  /** Warning message. */\r\n  WARNING,\r\n  /** Error message. */\r\n  ERROR\r\n}\r\n\r\n/** Returns the string representation of the specified diagnostic category. */\r\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return \"INFO\";\r\n    case DiagnosticCategory.WARNING: return \"WARNING\";\r\n    case DiagnosticCategory.ERROR: return \"ERROR\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** ANSI escape sequence for blue foreground. */\r\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\r\n/** ANSI escape sequence for yellow foreground. */\r\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for red foreground. */\r\nexport const COLOR_RED: string = \"\\u001b[91m\";\r\n/** ANSI escape sequence to reset the foreground color. */\r\nexport const COLOR_RESET: string = \"\\u001b[0m\";\r\n\r\n/** Returns the ANSI escape sequence for the specified category. */\r\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\r\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\r\n    case DiagnosticCategory.ERROR: return COLOR_RED;\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** Represents a diagnostic message. */\r\nexport class DiagnosticMessage {\r\n\r\n  /** Message code. */\r\n  code: i32;\r\n  /** Message category. */\r\n  category: DiagnosticCategory;\r\n  /** Message text. */\r\n  message: string;\r\n  /** Respective source range, if any. */\r\n  range: Range | null = null;\r\n  /** Related range, if any. */\r\n  relatedRange: Range | null = null;\r\n\r\n  /** Constructs a new diagnostic message. */\r\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\r\n    this.code = code;\r\n    this.category = category;\r\n    this.message = message;\r\n  }\r\n\r\n  /** Creates a new diagnostic message of the specified category. */\r\n  static create(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): DiagnosticMessage {\r\n    var message = diagnosticCodeToString(code);\r\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\r\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\r\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\r\n    return new DiagnosticMessage(code, category, message);\r\n  }\r\n\r\n  /** Creates a new informatory diagnostic message. */\r\n  static createInfo(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new warning diagnostic message. */\r\n  static createWarning(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new error diagnostic message. */\r\n  static createError(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\r\n  }\r\n\r\n  /** Adds a source range to this message. */\r\n  withRange(range: Range): this {\r\n    this.range = range;\r\n    return this;\r\n  }\r\n\r\n  /** Adds a related source range to this message. */\r\n  withRelatedRange(range: Range): this {\r\n    this.relatedRange = range;\r\n    return this;\r\n  }\r\n\r\n  /** Converts this message to a string. */\r\n  toString(): string {\r\n    if (this.range) {\r\n      return (\r\n        diagnosticCategoryToString(this.category) +\r\n        \" \" +\r\n        this.code.toString(10) +\r\n        \": \\\"\" +\r\n        this.message +\r\n        \"\\\" in \" +\r\n        this.range.source.normalizedPath +\r\n        \":\" +\r\n        this.range.line.toString(10) +\r\n        \":\" +\r\n        this.range.column.toString(10)\r\n      );\r\n    }\r\n    return (\r\n      diagnosticCategoryToString(this.category) +\r\n      \" \" +\r\n      this.code.toString(10) +\r\n      \": \" +\r\n      this.message\r\n    );\r\n  }\r\n}\r\n\r\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\r\nexport function formatDiagnosticMessage(\r\n  message: DiagnosticMessage,\r\n  useColors: bool = false,\r\n  showContext: bool = false\r\n): string {\r\n\r\n  // general information\r\n  var sb: string[] = [];\r\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\r\n  sb.push(diagnosticCategoryToString(message.category));\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\r\n  sb.push(message.code.toString(10));\r\n  sb.push(\": \");\r\n  sb.push(message.message);\r\n\r\n  // include range information if available\r\n  if (message.range) {\r\n\r\n    // include context information if requested\r\n    let range = message.range;\r\n    if (showContext) {\r\n      sb.push(\"\\n\");\r\n      sb.push(formatDiagnosticContext(range, useColors));\r\n    }\r\n    sb.push(\"\\n\");\r\n    sb.push(\" in \");\r\n    sb.push(range.source.normalizedPath);\r\n    sb.push(\"(\");\r\n    sb.push(range.line.toString(10));\r\n    sb.push(\",\");\r\n    sb.push(range.column.toString(10));\r\n    sb.push(\")\");\r\n\r\n    let relatedRange = message.relatedRange;\r\n    if (relatedRange) {\r\n      if (showContext) {\r\n        sb.push(\"\\n\");\r\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\r\n      }\r\n      sb.push(\"\\n\");\r\n      sb.push(\" in \");\r\n      sb.push(range.source.normalizedPath);\r\n      sb.push(\"(\");\r\n      sb.push(range.line.toString(10));\r\n      sb.push(\",\");\r\n      sb.push(range.column.toString(10));\r\n      sb.push(\")\");\r\n    }\r\n  }\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\r\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\r\n  var text = range.source.text;\r\n  var len = text.length;\r\n  var start = range.start;\r\n  var end = range.end;\r\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\r\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\r\n  var sb: string[] = [\r\n    \"\\n \",\r\n    text.substring(start, end),\r\n    \"\\n \"\r\n  ];\r\n  while (start < range.start) {\r\n    sb.push(\" \");\r\n    start++;\r\n  }\r\n  if (useColors) sb.push(COLOR_RED);\r\n  if (range.start == range.end) {\r\n    sb.push(\"^\");\r\n  } else {\r\n    while (start++ < range.end) {\r\n      if (isLineBreak(text.charCodeAt(start))) {\r\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\r\n        break;\r\n      }\r\n      sb.push(\"~\");\r\n    }\r\n  }\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Base class of all diagnostic emitters. */\r\nexport abstract class DiagnosticEmitter {\r\n\r\n  /** Diagnostic messages emitted so far. */\r\n  diagnostics: DiagnosticMessage[];\r\n\r\n  /** Initializes this diagnostic emitter. */\r\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\r\n  }\r\n\r\n  /** Emits a diagnostic message of the specified category. */\r\n  emitDiagnostic(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    range: Range,\r\n    relatedRange: Range | null,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\r\n    if (relatedRange) message.relatedRange = relatedRange;\r\n    this.diagnostics.push(message);\r\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\r\n    // console.log(<string>new Error(\"stack\").stack);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message. */\r\n  info(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message with a related range. */\r\n  infoRelated(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    relatedRange: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message. */\r\n  warning(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message with a related range. */\r\n  warningRelated(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    relatedRange: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message. */\r\n  error(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message with a related range. */\r\n  errorRelated(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    relatedRange: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\r\n  }\r\n}\r\n","/**\r\n * AssemblyScript's intermediate representation describing a program's elements.\r\n * @module program\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX,\r\n  INNER_DELIMITER,\r\n  LIBRARY_SUBST,\r\n  INDEX_SUFFIX,\r\n  CommonSymbols,\r\n  Feature,\r\n  Target\r\n} from \"./common\";\r\n\r\nimport {\r\n  Options\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature\r\n} from \"./types\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  Range,\r\n  DecoratorNode,\r\n  DecoratorKind,\r\n  SignatureNode,\r\n  TypeParameterNode,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  ArrowKind,\r\n\r\n  Expression,\r\n  IdentifierExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  ClassDeclaration,\r\n  DeclarationStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportMember,\r\n  ExportStatement,\r\n  FieldDeclaration,\r\n  FunctionDeclaration,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  MethodDeclaration,\r\n  NamespaceDeclaration,\r\n  TypeDeclaration,\r\n  VariableDeclaration,\r\n  VariableLikeDeclarationStatement,\r\n  VariableStatement,\r\n\r\n  decoratorNameToKind,\r\n  findDecorator\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Module,\r\n  FunctionRef\r\n} from \"./module\";\r\n\r\nimport {\r\n  CharCode,\r\n  writeI8,\r\n  writeI16,\r\n  writeI32,\r\n  writeF32,\r\n  writeF64\r\n} from \"./util\";\r\n\r\nimport {\r\n  Resolver\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  Flow\r\n} from \"./flow\";\r\n\r\nimport {\r\n  BuiltinSymbols\r\n} from \"./builtins\";\r\n\r\n/** Represents a yet unresolved `import`. */\r\nclass QueuedImport {\r\n  constructor(\r\n    /** File being imported into. */\r\n    public localFile: File,\r\n    /** Identifier within the local file. */\r\n    public localIdentifier: IdentifierExpression,\r\n    /** Identifier within the other file. Is an `import *` if not set. */\r\n    public foreignIdentifier: IdentifierExpression | null,\r\n    /** Path to the other file. */\r\n    public foreignPath: string,\r\n    /** Alternative path to the other file. */\r\n    public foreignPathAlt: string\r\n  ) {}\r\n}\r\n\r\n/** Represents a yet unresolved `export`. */\r\nclass QueuedExport {\r\n  constructor(\r\n    /** Identifier within the local file. */\r\n    public localIdentifier: IdentifierExpression,\r\n    /** Identifier within the other file. */\r\n    public foreignIdentifier: IdentifierExpression,\r\n    /** Path to the other file if a re-export. */\r\n    public foreignPath: string | null,\r\n    /** Alternative path to the other file if a re-export. */\r\n    public foreignPathAlt: string | null\r\n  ) {}\r\n}\r\n\r\n/** Represents a yet unresolved `export *`. */\r\nclass QueuedExportStar {\r\n  // stored in a map with localFile as the key\r\n  constructor(\r\n    /** Path to the other file. */\r\n    public foreignPath: string,\r\n    /** Alternative path to the other file. */\r\n    public foreignPathAlt: string,\r\n    /** Reference to the path literal for reporting. */\r\n    public pathLiteral: StringLiteralExpression\r\n  ) {}\r\n}\r\n\r\n/** Represents the kind of an operator overload. */\r\nexport enum OperatorKind {\r\n  INVALID,\r\n\r\n  // indexed access\r\n  INDEXED_GET,            // a[]\r\n  INDEXED_SET,            // a[]=b\r\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\r\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\r\n\r\n  // binary\r\n  ADD,                    // a + b\r\n  SUB,                    // a - b\r\n  MUL,                    // a * b\r\n  DIV,                    // a / b\r\n  REM,                    // a % b\r\n  POW,                    // a ** b\r\n  BITWISE_AND,            // a & b\r\n  BITWISE_OR,             // a | b\r\n  BITWISE_XOR,            // a ^ b\r\n  BITWISE_SHL,            // a << b\r\n  BITWISE_SHR,            // a >> b\r\n  BITWISE_SHR_U,          // a >>> b\r\n  EQ,                     // a == b\r\n  NE,                     // a != b\r\n  GT,                     // a > b\r\n  GE,                     // a >= b\r\n  LT,                     // a < b\r\n  LE,                     // a <= b\r\n\r\n  // unary prefix\r\n  PLUS,                   // +a\r\n  MINUS,                  // -a\r\n  NOT,                    // !a\r\n  BITWISE_NOT,            // ~a\r\n  PREFIX_INC,             // ++a\r\n  PREFIX_DEC,             // --a\r\n\r\n  // unary postfix\r\n  POSTFIX_INC,            // a++\r\n  POSTFIX_DEC             // a--\r\n\r\n  // not overridable:\r\n  // IDENTITY             // a === b\r\n  // LOGICAL_AND          // a && b\r\n  // LOGICAL_OR           // a || b\r\n}\r\n\r\n/** Returns the operator kind represented by the specified decorator and string argument. */\r\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\r\n  assert(arg.length);\r\n  switch (decoratorKind) {\r\n    case DecoratorKind.OPERATOR:\r\n    case DecoratorKind.OPERATOR_BINARY: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.OPENBRACKET: {\r\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\r\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\r\n          break;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\r\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\r\n          break;\r\n        }\r\n        case CharCode.PLUS: {\r\n          if (arg == \"+\") return OperatorKind.ADD;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"-\") return OperatorKind.SUB;\r\n          break;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          if (arg == \"*\") return OperatorKind.MUL;\r\n          if (arg == \"**\") return OperatorKind.POW;\r\n          break;\r\n        }\r\n        case CharCode.SLASH: {\r\n          if (arg == \"/\") return OperatorKind.DIV;\r\n          break;\r\n        }\r\n        case CharCode.PERCENT: {\r\n          if (arg == \"%\") return OperatorKind.REM;\r\n          break;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\r\n          break;\r\n        }\r\n        case CharCode.BAR: {\r\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\r\n          break;\r\n        }\r\n        case CharCode.CARET: {\r\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\r\n          break;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          if (arg == \"==\") return OperatorKind.EQ;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          if (arg == \"!=\") return OperatorKind.NE;\r\n          break;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          if (arg == \">\") return OperatorKind.GT;\r\n          if (arg == \">=\") return OperatorKind.GE;\r\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\r\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\r\n          break;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          if (arg == \"<\") return OperatorKind.LT;\r\n          if (arg == \"<=\") return OperatorKind.LE;\r\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case DecoratorKind.OPERATOR_PREFIX: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.PLUS: {\r\n          if (arg == \"+\") return OperatorKind.PLUS;\r\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"-\") return OperatorKind.MINUS;\r\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          if (arg == \"!\") return OperatorKind.NOT;\r\n          break;\r\n        }\r\n        case CharCode.TILDE: {\r\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case DecoratorKind.OPERATOR_POSTFIX: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.PLUS: {\r\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return OperatorKind.INVALID;\r\n}\r\n\r\n/** Represents an AssemblyScript program. */\r\nexport class Program extends DiagnosticEmitter {\r\n\r\n  /** Resolver instance. */\r\n  resolver: Resolver;\r\n  /** Array of sources. */\r\n  sources: Source[] = [];\r\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\r\n  diagnosticsOffset: i32 = 0;\r\n  /** Compiler options. */\r\n  options: Options;\r\n  /** Special native code source. */\r\n  nativeSource: Source;\r\n  /** Special native code file. */\r\n  nativeFile: File;\r\n  /** Explicitly annotated start function. */\r\n  explicitStartFunction: FunctionPrototype | null = null;\r\n\r\n  // lookup maps\r\n\r\n  /** Files by unique internal name. */\r\n  filesByName: Map<string,File> = new Map();\r\n  /** Elements by unique internal name in element space. */\r\n  elementsByName: Map<string,Element> = new Map();\r\n  /** Elements by declaration. */\r\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\r\n  /** Element instances by unique internal name. */\r\n  instancesByName: Map<string,Element> = new Map();\r\n  /** Classes backing basic types like `i32`. */\r\n  typeClasses: Map<TypeKind,Class> = new Map();\r\n  /** Managed classes contained in the program, by id. */\r\n  managedClasses: Map<i32,Class> = new Map();\r\n\r\n  // standard references\r\n\r\n  /** ArrayBufferView reference. */\r\n  arrayBufferViewInstance: Class;\r\n  /** ArrayBuffer instance reference. */\r\n  arrayBufferInstance: Class;\r\n  /** Array prototype reference. */\r\n  arrayPrototype: ClassPrototype;\r\n  /** Set prototype reference. */\r\n  setPrototype: ClassPrototype;\r\n  /** Map prototype reference. */\r\n  mapPrototype: ClassPrototype;\r\n  /** Fixed array prototype reference. */\r\n  fixedArrayPrototype: ClassPrototype;\r\n  /** Int8Array prototype. */\r\n  i8ArrayPrototype: ClassPrototype;\r\n  /** Int16Array prototype. */\r\n  i16ArrayPrototype: ClassPrototype;\r\n  /** Int32Array prototype. */\r\n  i32ArrayPrototype: ClassPrototype;\r\n  /** Int64Array prototype. */\r\n  i64ArrayPrototype: ClassPrototype;\r\n  /** Uint8Array prototype. */\r\n  u8ArrayPrototype: ClassPrototype;\r\n  /** Uint8ClampedArray prototype. */\r\n  u8ClampedArrayPrototype: ClassPrototype;\r\n  /** Uint16Array prototype. */\r\n  u16ArrayPrototype: ClassPrototype;\r\n  /** Uint32Array prototype. */\r\n  u32ArrayPrototype: ClassPrototype;\r\n  /** Uint64Array prototype. */\r\n  u64ArrayPrototype: ClassPrototype;\r\n  /** Float32Array prototype. */\r\n  f32ArrayPrototype: ClassPrototype;\r\n  /** Float64Array prototype. */\r\n  f64ArrayPrototype: ClassPrototype;\r\n  /** String instance reference. */\r\n  stringInstance: Class;\r\n  /** Abort function reference, if present. */\r\n  abortInstance: Function;\r\n\r\n  // runtime references\r\n\r\n  /** RT `__alloc(size: usize, id: u32): usize` */\r\n  allocInstance: Function;\r\n  /** RT `__realloc(ref: usize, newSize: usize): usize` */\r\n  reallocInstance: Function;\r\n  /** RT `__free(ref: usize): void` */\r\n  freeInstance: Function;\r\n  /** RT `__retain(ref: usize): usize` */\r\n  retainInstance: Function;\r\n  /** RT `__release(ref: usize): void` */\r\n  releaseInstance: Function;\r\n  /** RT `__collect(): void` */\r\n  collectInstance: Function;\r\n  /** RT `__visit(ref: usize, cookie: u32): void` */\r\n  visitInstance: Function;\r\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\r\n  typeinfoInstance: Function;\r\n  /** RT `__instanceof(ref: usize, superId: u32): bool` */\r\n  instanceofInstance: Function;\r\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\r\n  allocArrayInstance: Function;\r\n\r\n  /** Next class id. */\r\n  nextClassId: u32 = 0;\r\n\r\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\r\n  constructor(\r\n    /** Shared array of diagnostic messages (emitted so far). */\r\n    diagnostics: DiagnosticMessage[] | null = null\r\n  ) {\r\n    super(diagnostics);\r\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY);\r\n    this.nativeSource = nativeSource;\r\n    var nativeFile = new File(this, nativeSource);\r\n    this.nativeFile = nativeFile;\r\n    this.filesByName.set(nativeFile.internalName, nativeFile);\r\n    this.resolver = new Resolver(this);\r\n  }\r\n\r\n  /** Writes a common runtime header to the specified buffer. */\r\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, classInstance: Class, payloadSize: u32): void {\r\n    // BLOCK {\r\n    //   mmInfo: usize // WASM64 TODO\r\n    //   gcInfo: u32\r\n    //   rtId: u32\r\n    //   rtSize: u32\r\n    // }\r\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\r\n    writeI32(payloadSize, buffer, offset);\r\n    writeI32(1, buffer, offset + 4); // RC=1\r\n    writeI32(classInstance.id, buffer, offset + 8);\r\n    writeI32(payloadSize, buffer, offset + 12);\r\n  }\r\n\r\n  /** Gets the size of a runtime header. */\r\n  get runtimeHeaderSize(): i32 {\r\n    return 16;\r\n  }\r\n\r\n  /** Creates a native variable declaration. */\r\n  makeNativeVariableDeclaration(\r\n    /** The simple name of the variable */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `CONST`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): VariableDeclaration {\r\n    var range = this.nativeSource.range;\r\n    return Node.createVariableDeclaration(\r\n      Node.createIdentifierExpression(name, range),\r\n      null, null, null, flags, range\r\n    );\r\n  }\r\n\r\n  /** Creates a native type declaration. */\r\n  makeNativeTypeDeclaration(\r\n    /** The simple name of the type. */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): TypeDeclaration {\r\n    var range = this.nativeSource.range;\r\n    var identifier = Node.createIdentifierExpression(name, range);\r\n    return Node.createTypeDeclaration(\r\n      identifier,\r\n      null,\r\n      Node.createOmittedType(range),\r\n      null, flags, range\r\n    );\r\n  }\r\n\r\n  // a dummy signature for programmatically generated native functions\r\n  private nativeDummySignature: SignatureNode | null = null;\r\n\r\n  /** Creates a native function declaration. */\r\n  makeNativeFunctionDeclaration(\r\n    /** The simple name of the function. */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): FunctionDeclaration {\r\n    var range = this.nativeSource.range;\r\n    return Node.createFunctionDeclaration(\r\n      Node.createIdentifierExpression(name, range),\r\n      null,\r\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createSignature([],\r\n        Node.createType( // ^ AST signature doesn't really matter, is overridden anyway\r\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\r\n          null, false, range\r\n        ),\r\n        null, false, range)\r\n      ),\r\n      null, null, flags, ArrowKind.NONE, range\r\n    );\r\n  }\r\n\r\n  /** Creates a native namespace declaration. */\r\n  makeNativeNamespaceDeclaration(\r\n    /** The simple name of the namespace. */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): NamespaceDeclaration {\r\n    var range = this.nativeSource.range;\r\n    return Node.createNamespaceDeclaration(\r\n      Node.createIdentifierExpression(name, range),\r\n      [], null, flags, range\r\n    );\r\n  }\r\n\r\n  /** Creates a native function. */\r\n  makeNativeFunction(\r\n    /** The simple name of the function. */\r\n    name: string,\r\n    /** Concrete function signature. */\r\n    signature: Signature,\r\n    /** Parent element, usually a file, class or namespace. */\r\n    parent: Element = this.nativeFile,\r\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\r\n    flags: CommonFlags = CommonFlags.NONE,\r\n    /** Decorator flags representing built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ): Function {\r\n    return new Function(\r\n      name,\r\n      new FunctionPrototype(\r\n        name,\r\n        parent,\r\n        this.makeNativeFunctionDeclaration(name, flags),\r\n        decoratorFlags\r\n      ),\r\n      signature\r\n    );\r\n  }\r\n\r\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\r\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement {\r\n    var elementsByDeclaration = this.elementsByDeclaration;\r\n    assert(elementsByDeclaration.has(declaration));\r\n    return elementsByDeclaration.get(declaration)!;\r\n  }\r\n\r\n  /** Initializes the program and its elements prior to compilation. */\r\n  initialize(options: Options): void {\r\n    this.options = options;\r\n\r\n    // register native types\r\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\r\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\r\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\r\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\r\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\r\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\r\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\r\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\r\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\r\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\r\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\r\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\r\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\r\n    this.registerNativeType(CommonSymbols.void_, Type.void);\r\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\r\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\r\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\r\n      CommonSymbols.native,\r\n      this.nativeFile,\r\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\r\n      DecoratorFlags.BUILTIN\r\n    ));\r\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\r\n\r\n    // register compiler hints\r\n    this.registerConstantInteger(CommonSymbols.ASC_TARGET, Type.i32,\r\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\r\n    this.registerConstantInteger(CommonSymbols.ASC_NO_ASSERT, Type.bool,\r\n      i64_new(options.noAssert ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_MEMORY_BASE, Type.i32,\r\n      i64_new(options.memoryBase, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\r\n      i64_new(options.optimizeLevelHint, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_SHRINK_LEVEL, Type.i32,\r\n      i64_new(options.shrinkLevelHint, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_MUTABLE_GLOBAL, Type.bool,\r\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\r\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\r\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIMD, Type.bool,\r\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\r\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_THREADS, Type.bool,\r\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\r\n\r\n    // remember deferred elements\r\n    var queuedImports = new Array<QueuedImport>();\r\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\r\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\r\n    var queuedExtends = new Array<ClassPrototype>();\r\n    var queuedImplements = new Array<ClassPrototype>();\r\n\r\n    // initialize relevant declaration-like statements of the entire program\r\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\r\n      let source = this.sources[i];\r\n      let file = new File(this, source);\r\n      this.filesByName.set(file.internalName, file);\r\n      let statements = source.statements;\r\n      for (let j = 0, l = statements.length; j < l; ++j) {\r\n        let statement = statements[j];\r\n        switch (statement.kind) {\r\n          case NodeKind.EXPORT: {\r\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\r\n            break;\r\n          }\r\n          case NodeKind.IMPORT: {\r\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\r\n            break;\r\n          }\r\n          case NodeKind.VARIABLE: {\r\n            this.initializeVariables(<VariableStatement>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.CLASSDECLARATION: {\r\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.ENUMDECLARATION: {\r\n            this.initializeEnum(<EnumDeclaration>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.FUNCTIONDECLARATION: {\r\n            this.initializeFunction(<FunctionDeclaration>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.INTERFACEDECLARATION: {\r\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.NAMESPACEDECLARATION: {\r\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.TYPEDECLARATION: {\r\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports * should be linkable now that all files have been processed\r\n    for (let [file, exportsStar] of queuedExportsStar) {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\r\n        let exportStar = exportsStar[i];\r\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\r\n        if (!foreignFile) {\r\n          this.error(\r\n            DiagnosticCode.File_0_not_found,\r\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\r\n          );\r\n          continue;\r\n        }\r\n        file.ensureExportStar(foreignFile);\r\n      }\r\n    }\r\n\r\n    // queued imports should be resolvable now through traversing exports and queued exports\r\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\r\n      let queuedImport = queuedImports[i];\r\n      let foreignIdentifier = queuedImport.foreignIdentifier;\r\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\r\n        let element = this.lookupForeign(\r\n          foreignIdentifier.text,\r\n          queuedImport.foreignPath,\r\n          queuedImport.foreignPathAlt,\r\n          queuedExports\r\n        );\r\n        if (element) {\r\n          queuedImport.localFile.add(\r\n            queuedImport.localIdentifier.text,\r\n            element,\r\n            true // isImport\r\n          );\r\n        } else {\r\n          // FIXME: file not found is not reported if this happens?\r\n          this.error(\r\n            DiagnosticCode.Module_0_has_no_exported_member_1,\r\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\r\n          );\r\n        }\r\n      } else { // i.e. import * as bar from \"./bar\"\r\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\r\n        if (foreignFile) {\r\n          let localFile = queuedImport.localFile;\r\n          let localName = queuedImport.localIdentifier.text;\r\n          localFile.add(\r\n            localName,\r\n            foreignFile.asImportedNamespace(\r\n              localName,\r\n              localFile\r\n            ),\r\n            true // isImport\r\n          );\r\n        } else {\r\n          assert(false); // already reported by the parser not finding the file\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports should be resolvable now that imports are finalized\r\n    for (let [file, exports] of queuedExports) {\r\n      for (let [exportName, queuedExport] of exports) {\r\n        let localName = queuedExport.localIdentifier.text;\r\n        let foreignPath = queuedExport.foreignPath;\r\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\r\n          let element = this.lookupForeign(\r\n            localName,\r\n            foreignPath,\r\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\r\n            queuedExports\r\n          );\r\n          if (element) {\r\n            file.ensureExport(exportName, element);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              queuedExport.localIdentifier.range,\r\n              foreignPath, localName\r\n            );\r\n          }\r\n        } else { // i.e. export { foo [as bar] }\r\n          let element = file.lookupInSelf(localName);\r\n          if (element) {\r\n            file.ensureExport(exportName, element);\r\n          } else {\r\n            let globalElement = this.lookupGlobal(localName);\r\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\r\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Module_0_has_no_exported_member_1,\r\n                queuedExport.foreignIdentifier.range,\r\n                file.internalName, queuedExport.foreignIdentifier.text\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\r\n    assert(this.nextClassId == 0);\r\n    this.arrayBufferInstance = this.requireClass(CommonSymbols.ArrayBuffer);\r\n    assert(this.arrayBufferInstance.id == 0);\r\n    this.stringInstance = this.requireClass(CommonSymbols.String);\r\n    assert(this.stringInstance.id == 1);\r\n    this.arrayBufferViewInstance = this.requireClass(CommonSymbols.ArrayBufferView);\r\n    assert(this.arrayBufferViewInstance.id == 2);\r\n\r\n    // register classes backing basic types\r\n    this.registerNativeTypeClass(TypeKind.I8, CommonSymbols.I8);\r\n    this.registerNativeTypeClass(TypeKind.I16, CommonSymbols.I16);\r\n    this.registerNativeTypeClass(TypeKind.I32, CommonSymbols.I32);\r\n    this.registerNativeTypeClass(TypeKind.I64, CommonSymbols.I64);\r\n    this.registerNativeTypeClass(TypeKind.ISIZE, CommonSymbols.Isize);\r\n    this.registerNativeTypeClass(TypeKind.U8, CommonSymbols.U8);\r\n    this.registerNativeTypeClass(TypeKind.U16, CommonSymbols.U16);\r\n    this.registerNativeTypeClass(TypeKind.U32, CommonSymbols.U32);\r\n    this.registerNativeTypeClass(TypeKind.U64, CommonSymbols.U64);\r\n    this.registerNativeTypeClass(TypeKind.USIZE, CommonSymbols.Usize);\r\n    this.registerNativeTypeClass(TypeKind.BOOL, CommonSymbols.Bool);\r\n    this.registerNativeTypeClass(TypeKind.F32, CommonSymbols.F32);\r\n    this.registerNativeTypeClass(TypeKind.F64, CommonSymbols.F64);\r\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeTypeClass(TypeKind.V128, CommonSymbols.V128);\r\n\r\n    // register views but don't instantiate them yet\r\n    this.i8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int8Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.i16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int16Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.i32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int32Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.i64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int64Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.u8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.u8ClampedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\r\n    this.u16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint16Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.u32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint32Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.u64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint64Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.f32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float32Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.f64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float64Array, ElementKind.CLASS_PROTOTYPE);\r\n\r\n    // resolve base prototypes of derived classes\r\n    var resolver = this.resolver;\r\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\r\n      let thisPrototype = queuedExtends[i];\r\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\r\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\r\n      if (!baseElement) continue;\r\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let basePrototype = <ClassPrototype>baseElement;\r\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\r\n          this.error(\r\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\r\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\r\n          );\r\n        }\r\n        if (\r\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\r\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\r\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\r\n          );\r\n        }\r\n        thisPrototype.basePrototype = basePrototype;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          extendsNode.range\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up global aliases\r\n    {\r\n      let globalAliases = options.globalAliases;\r\n      if (globalAliases) {\r\n        for (let [alias, name] of globalAliases) {\r\n          if (!name.length) continue; // explicitly disabled\r\n          let firstChar = name.charCodeAt(0);\r\n          if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\r\n            this.registerConstantInteger(alias, Type.i32, i64_new(parseI32(name, 10)));\r\n          } else {\r\n            let elementsByName = this.elementsByName;\r\n            let element = elementsByName.get(name);\r\n            if (element) {\r\n              if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\r\n              elementsByName.set(alias, element);\r\n            }\r\n            else throw new Error(\"no such global element: \" + name);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // register stdlib components\r\n    this.arrayPrototype = <ClassPrototype>this.require(CommonSymbols.Array, ElementKind.CLASS_PROTOTYPE);\r\n    this.fixedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.FixedArray, ElementKind.CLASS_PROTOTYPE);\r\n    this.setPrototype = <ClassPrototype>this.require(CommonSymbols.Set, ElementKind.CLASS_PROTOTYPE);\r\n    this.mapPrototype = <ClassPrototype>this.require(CommonSymbols.Map, ElementKind.CLASS_PROTOTYPE);\r\n    this.abortInstance = this.requireFunction(CommonSymbols.abort);\r\n    this.allocInstance = this.requireFunction(CommonSymbols.alloc);\r\n    this.reallocInstance = this.requireFunction(CommonSymbols.realloc);\r\n    this.freeInstance = this.requireFunction(CommonSymbols.free);\r\n    this.retainInstance = this.requireFunction(CommonSymbols.retain);\r\n    this.releaseInstance = this.requireFunction(CommonSymbols.release);\r\n    this.collectInstance = this.requireFunction(CommonSymbols.collect);\r\n    this.typeinfoInstance = this.requireFunction(CommonSymbols.typeinfo);\r\n    this.instanceofInstance = this.requireFunction(CommonSymbols.instanceof_);\r\n    this.visitInstance = this.requireFunction(CommonSymbols.visit);\r\n    this.allocArrayInstance = this.requireFunction(CommonSymbols.allocArray);\r\n\r\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\r\n    for (let file of this.filesByName.values()) {\r\n      let exports = file.exports;\r\n      if (!(file.source.isEntry && exports)) continue;\r\n      for (let element of exports.values()) this.markModuleExport(element);\r\n    }\r\n  }\r\n\r\n  /** Requires that a global library element of the specified kind is present and returns it. */\r\n  private require(name: string, kind: ElementKind): Element {\r\n    var element = this.lookupGlobal(name);\r\n    if (!element) throw new Error(\"missing \" + name);\r\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\r\n    return element;\r\n  }\r\n\r\n  /** Requires that a non-generic global class is present and returns it. */\r\n  private requireClass(name: string): Class {\r\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\r\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\r\n    if (!resolved) throw new Error(\"invalid \" + name);\r\n    return resolved;\r\n  }\r\n\r\n  /** Requires that a non-generic global function is present and returns it. */\r\n  private requireFunction(name: string): Function {\r\n    var prototype = this.require(name, ElementKind.FUNCTION_PROTOTYPE);\r\n    var resolved = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n    if (!resolved) throw new Error(\"invalid \" + name);\r\n    return resolved;\r\n  }\r\n\r\n  /** Marks an element and its children as a module export. */\r\n  private markModuleExport(element: Element): void {\r\n    element.set(CommonFlags.MODULE_EXPORT);\r\n    switch (element.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\r\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\r\n        if (getterPrototype) this.markModuleExport(getterPrototype);\r\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\r\n        if (setterPrototype) this.markModuleExport(setterPrototype);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY:\r\n      case ElementKind.FUNCTION:\r\n      case ElementKind.FIELD:\r\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\r\n    }\r\n    {\r\n      let members = element.members;\r\n      if (members) for (let member of members.values()) this.markModuleExport(member);\r\n    }\r\n  }\r\n\r\n  /** Registers a native type with the program. */\r\n  private registerNativeType(name: string, type: Type): void {\r\n    var element = new TypeDefinition(\r\n      name,\r\n      this.nativeFile,\r\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\r\n      DecoratorFlags.BUILTIN\r\n    );\r\n    element.setType(type);\r\n    this.nativeFile.add(name, element);\r\n  }\r\n\r\n  /** Registers the backing class of a native type. */\r\n  private registerNativeTypeClass(typeKind: TypeKind, className: string): void {\r\n    assert(!this.typeClasses.has(typeKind));\r\n    var element = this.lookupGlobal(className);\r\n    if (element) {\r\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n      let classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\r\n      if (classElement) this.typeClasses.set(typeKind, classElement);\r\n    }\r\n  }\r\n\r\n  /** Registers a constant integer value within the global scope. */\r\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\r\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\r\n    var global = new Global(\r\n      name,\r\n      this.nativeFile,\r\n      DecoratorFlags.NONE,\r\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\r\n    );\r\n    global.setConstantIntegerValue(value, type);\r\n    this.nativeFile.add(name, global);\r\n  }\r\n\r\n  /** Registers a constant float value within the global scope. */\r\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\r\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\r\n    var global = new Global(\r\n      name,\r\n      this.nativeFile,\r\n      DecoratorFlags.NONE,\r\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\r\n    );\r\n    global.setConstantFloatValue(value, type);\r\n    this.nativeFile.add(name, global);\r\n  }\r\n\r\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\r\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\r\n    var elementsByName = this.elementsByName;\r\n    if (elementsByName.has(name)) {\r\n      let actual = elementsByName.get(name)!;\r\n      // NOTE: this is effectively only performed when merging native types with\r\n      // their respective namespaces in std/builtins, but can also trigger when a\r\n      // user has multiple global elements of the same name in different files,\r\n      // which might result in unexpected shared symbols accross files. considering\r\n      // this a wonky feature for now that we might want to revisit later.\r\n      if (actual !== element) {\r\n        let merged = tryMerge(elementsByName.get(name)!, element);\r\n        if (!merged) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            element.identifierNode.range, name\r\n          );\r\n          return element;\r\n        }\r\n        element = merged;\r\n      }\r\n    }\r\n    elementsByName.set(name, element);\r\n    return element;\r\n  }\r\n\r\n  /** Looks up the element of the specified name in the global scope. */\r\n  lookupGlobal(name: string): Element | null {\r\n    var elements = this.elementsByName;\r\n    if (elements.has(name)) return elements.get(name);\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\r\n  requireGlobal(name: string): Element {\r\n    var elements = this.elementsByName;\r\n    if (elements.has(name)) return elements.get(name)!;\r\n    throw new Error(\"missing global\");\r\n  }\r\n\r\n  /** Tries to locate a foreign file given its normalized path. */\r\n  private lookupForeignFile(\r\n    /** Normalized path to the other file. */\r\n    foreignPath: string,\r\n    /** Alternative normalized path to the other file. */\r\n    foreignPathAlt: string\r\n  ): File | null {\r\n    var filesByName = this.filesByName;\r\n    return filesByName.has(foreignPath)\r\n         ? filesByName.get(foreignPath)!\r\n         : filesByName.has(foreignPathAlt)\r\n         ? filesByName.get(foreignPathAlt)!\r\n         : null;\r\n  }\r\n\r\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\r\n  private lookupForeign(\r\n    /** Identifier within the other file. */\r\n    foreignName: string,\r\n    /** Normalized path to the other file. */\r\n    foreignPath: string,\r\n    /** Alternative normalized path to the other file. */\r\n    foreignPathAlt: string,\r\n    /** So far queued exports. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): DeclaredElement | null {\r\n    do {\r\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\r\n      if (!foreignFile) return null; // no such file\r\n\r\n      // search already resolved exports\r\n      let element = foreignFile.lookupExport(foreignName);\r\n      if (element) return element;\r\n\r\n      // otherwise traverse queued exports\r\n      if (queuedExports.has(foreignFile)) {\r\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\r\n        if (fileQueuedExports.has(foreignName)) {\r\n          let queuedExport = fileQueuedExports.get(foreignName)!;\r\n          if (queuedExport.foreignPath) { // imported from another file\r\n            foreignName = queuedExport.localIdentifier.text;\r\n            foreignPath = queuedExport.foreignPath;\r\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\r\n            continue;\r\n          } else { // local element of this file\r\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\r\n            if (element) return element;\r\n          }\r\n        }\r\n      }\r\n      break;\r\n    } while (true);\r\n    return null;\r\n  }\r\n\r\n  /** Validates that only supported decorators are present. */\r\n  private checkDecorators(\r\n    /** Decorators present on an element. */\r\n    decorators: DecoratorNode[] | null,\r\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\r\n    acceptedFlags: DecoratorFlags\r\n  ): DecoratorFlags {\r\n    var flags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        let kind = decoratorNameToKind(decorator.name);\r\n        let flag = decoratorKindToFlag(kind);\r\n        if (flag) {\r\n          if (flag == DecoratorFlags.BUILTIN) {\r\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\r\n              this.error(\r\n                DiagnosticCode.Decorator_0_is_not_valid_here,\r\n                decorator.range, decorator.name.range.toString()\r\n              );\r\n            } else {\r\n              flags |= flag;\r\n            }\r\n          } else if (!(acceptedFlags & flag)) {\r\n            this.error(\r\n              DiagnosticCode.Decorator_0_is_not_valid_here,\r\n              decorator.range, decorator.name.range.toString()\r\n            );\r\n          } else if (flags & flag) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_decorator,\r\n              decorator.range, decorator.name.range.toString()\r\n            );\r\n          } else {\r\n            flags |= flag;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return flags;\r\n  }\r\n\r\n  /** Initializes a class declaration. */\r\n  private initializeClass(\r\n    /** The declaration to initialize. */\r\n    declaration: ClassDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** So far queued `extends` clauses. */\r\n    queuedExtends: ClassPrototype[],\r\n    /** So far queued `implements` clauses. */\r\n    queuedImplements: ClassPrototype[]\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new ClassPrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.GLOBAL |\r\n        DecoratorFlags.SEALED |\r\n        DecoratorFlags.UNMANAGED\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return;\r\n\r\n    var implementsTypes = declaration.implementsTypes;\r\n    if (implementsTypes) {\r\n      let numImplementsTypes = implementsTypes.length;\r\n      // cannot implement interfaces when unmanaged\r\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        if (numImplementsTypes) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\r\n            Range.join(\r\n              declaration.name.range,\r\n              implementsTypes[numImplementsTypes - 1].range\r\n            )\r\n          );\r\n        }\r\n      } else if (numImplementsTypes) {\r\n        // remember classes that implement interfaces\r\n        for (let i = 0; i < numImplementsTypes; ++i) {\r\n          this.warning( // TODO: not yet supported\r\n            DiagnosticCode.Operation_not_supported,\r\n            implementsTypes[i].range\r\n          );\r\n        }\r\n        queuedImplements.push(element);\r\n      }\r\n    }\r\n    // remember classes that extend another class\r\n    if (declaration.extendsType) queuedExtends.push(element);\r\n\r\n    // initialize members\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\r\n        default: assert(false); // class member expected\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Initializes a field of a class or interface. */\r\n  private initializeField(\r\n    /** The declaration to initialize. */\r\n    declaration: FieldDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var decorators = declaration.decorators;\r\n    var element: DeclaredElement;\r\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\r\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\r\n      element = new Global(\r\n        name,\r\n        parent,\r\n        this.checkDecorators(decorators,\r\n          (declaration.is(CommonFlags.READONLY)\r\n            ? DecoratorFlags.INLINE\r\n            : DecoratorFlags.NONE\r\n          ) | DecoratorFlags.LAZY | DecoratorFlags.UNSAFE\r\n        ),\r\n        declaration\r\n      );\r\n      if (!parent.add(name, element)) return;\r\n    } else { // actual instance field\r\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\r\n      element = new FieldPrototype(\r\n        name,\r\n        parent,\r\n        declaration,\r\n        this.checkDecorators(decorators, DecoratorFlags.UNSAFE)\r\n      );\r\n      if (!parent.addInstance(name, element)) return;\r\n    }\r\n  }\r\n\r\n  /** Initializes a method of a class or interface. */\r\n  private initializeMethod(\r\n    /** The declaration to initialize. */\r\n    declaration: MethodDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var isStatic = declaration.is(CommonFlags.STATIC);\r\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\r\n    if (!declaration.is(CommonFlags.GENERIC)) {\r\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\r\n                    |  DecoratorFlags.OPERATOR_PREFIX\r\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\r\n    }\r\n    var element = new FunctionPrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, acceptedFlags)\r\n    );\r\n    if (isStatic) { // global function\r\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\r\n      if (!parent.add(name, element)) return;\r\n    } else { // actual instance method\r\n      if (!parent.addInstance(name, element)) return;\r\n    }\r\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\r\n  }\r\n\r\n  /** Checks that operator overloads are generally valid, if present. */\r\n  private checkOperatorOverloads(\r\n    /** Decorators to check. */\r\n    decorators: DecoratorNode[] | null,\r\n    /** Decorated method. */\r\n    prototype: FunctionPrototype,\r\n    /** Parent class. */\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        switch (decorator.decoratorKind) {\r\n          case DecoratorKind.OPERATOR:\r\n          case DecoratorKind.OPERATOR_BINARY:\r\n          case DecoratorKind.OPERATOR_PREFIX:\r\n          case DecoratorKind.OPERATOR_POSTFIX: {\r\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\r\n            if (numArgs == 1) {\r\n              let firstArg = (<Expression[]>decorator.arguments)[0];\r\n              if (\r\n                firstArg.kind == NodeKind.LITERAL &&\r\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\r\n              ) {\r\n                let kind = operatorKindFromDecorator(\r\n                  decorator.decoratorKind,\r\n                  (<StringLiteralExpression>firstArg).value\r\n                );\r\n                if (kind == OperatorKind.INVALID) {\r\n                  this.error(\r\n                    DiagnosticCode.Operation_not_supported,\r\n                    firstArg.range\r\n                  );\r\n                } else {\r\n                  let overloads = classPrototype.overloadPrototypes;\r\n                  if (overloads.has(kind)) {\r\n                    this.error(\r\n                      DiagnosticCode.Duplicate_function_implementation,\r\n                      firstArg.range\r\n                    );\r\n                  } else {\r\n                    prototype.operatorKind = kind;\r\n                    overloads.set(kind, prototype);\r\n                  }\r\n                }\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.String_literal_expected,\r\n                  firstArg.range\r\n                );\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                decorator.range, \"1\", numArgs.toString(10)\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\r\n  private ensureProperty(\r\n    /** The declaration of the getter or setter introducing the property. */\r\n    declaration: MethodDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): PropertyPrototype | null {\r\n    var name = declaration.name.text;\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      let parentMembers = parent.members;\r\n      if (parentMembers && parentMembers.has(name)) {\r\n        let element = <Element>parentMembers.get(name)!;\r\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\r\n      } else {\r\n        let element = new PropertyPrototype(name, parent, declaration);\r\n        if (!parent.add(name, element)) return null;\r\n        return element;\r\n      }\r\n    } else {\r\n      let parentMembers = parent.instanceMembers;\r\n      if (parentMembers && parentMembers.has(name)) {\r\n        let element = <Element>parentMembers.get(name);\r\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\r\n      } else {\r\n        let element = new PropertyPrototype(name, parent, declaration);\r\n        if (!parent.addInstance(name, element)) return null;\r\n        return element;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Duplicate_property_0,\r\n      declaration.name.range, name\r\n    );\r\n    return null;\r\n  }\r\n\r\n  /** Initializes a property of a class. */\r\n  private initializeProperty(\r\n    /** The declaration of the getter or setter. */\r\n    declaration: MethodDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): void {\r\n    var property = this.ensureProperty(declaration, parent);\r\n    if (!property) return;\r\n    var name = declaration.name.text;\r\n    var isGetter = declaration.is(CommonFlags.GET);\r\n    if (isGetter) {\r\n      if (property.getterPrototype) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_property_0,\r\n          declaration.name.range, name\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      if (property.setterPrototype) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_property_0,\r\n          declaration.name.range, name\r\n        );\r\n        return;\r\n      }\r\n    }\r\n    var element = new FunctionPrototype(\r\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\r\n      property,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\r\n      )\r\n    );\r\n    if (isGetter) {\r\n      property.getterPrototype = element;\r\n    } else {\r\n      property.setterPrototype = element;\r\n    }\r\n  }\r\n\r\n  /** Initializes an enum. */\r\n  private initializeEnum(\r\n    /** The declaration to initialize. */\r\n    declaration: EnumDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new Enum(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.GLOBAL |\r\n        DecoratorFlags.INLINE |\r\n        DecoratorFlags.LAZY\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return;\r\n    var values = declaration.values;\r\n    for (let i = 0, k = values.length; i < k; ++i) {\r\n      this.initializeEnumValue(values[i], element);\r\n    }\r\n  }\r\n\r\n  /** Initializes an enum value. */\r\n  private initializeEnumValue(\r\n    /** The declaration to initialize. */\r\n    declaration: EnumValueDeclaration,\r\n    /** Parent enum. */\r\n    parent: Enum\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new EnumValue(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.NONE\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return;\r\n  }\r\n\r\n  /** Initializes an `export` statement. */\r\n  private initializeExports(\r\n    /** The statement to initialize. */\r\n    statement: ExportStatement,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>,\r\n    /** So far queued `export *`s. */\r\n    queuedExportsStar: Map<File,QueuedExportStar[]>\r\n  ): void {\r\n    var members = statement.members;\r\n    if (members) { // export { foo, bar } [from \"./baz\"]\r\n      for (let i = 0, k = members.length; i < k; ++i) {\r\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\r\n      }\r\n    } else { // export * from \"./baz\"\r\n      let queued: QueuedExportStar[];\r\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\r\n      else queuedExportsStar.set(parent, queued = []);\r\n      let foreignPath = assert(statement.internalPath); // must be set for export *\r\n      queued.push(new QueuedExportStar(\r\n        foreignPath,\r\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\r\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\r\n          : foreignPath + INDEX_SUFFIX,\r\n        assert(statement.path)\r\n      ));\r\n    }\r\n  }\r\n\r\n  /** Initializes a single `export` member. Does not handle `export *`. */\r\n  private initializeExport(\r\n    /** The member to initialize. */\r\n    member: ExportMember,\r\n    /** Local file. */\r\n    localFile: File,\r\n    /** Path to the other file, if present. */\r\n    foreignPath: string | null,\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): void {\r\n    var localName = member.localName.text;\r\n    var foreignName = member.exportedName.text;\r\n\r\n    // check for duplicates\r\n    var element = localFile.lookupExport(foreignName);\r\n    if (element) {\r\n      this.error(\r\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n        member.exportedName.range, foreignName\r\n      );\r\n      return;\r\n    }\r\n    // local element, i.e. export { foo [as bar] }\r\n    if (foreignPath === null) {\r\n\r\n      // resolve right away if the local element already exists\r\n      if (element = localFile.lookupInSelf(localName)) {\r\n        localFile.ensureExport(foreignName, element);\r\n\r\n      // otherwise queue it\r\n      } else {\r\n        let queued: Map<string,QueuedExport>;\r\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\r\n        else queuedExports.set(localFile, queued = new Map());\r\n        queued.set(foreignName, new QueuedExport(\r\n          member.localName,\r\n          member.exportedName,\r\n          null, null\r\n        ));\r\n      }\r\n\r\n    // foreign element, i.e. export { foo } from \"./bar\"\r\n    } else {\r\n      let queued: Map<string,QueuedExport>;\r\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\r\n      else queuedExports.set(localFile, queued = new Map());\r\n      queued.set(foreignName, new QueuedExport(\r\n        member.localName,\r\n        member.exportedName,\r\n        foreignPath,\r\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\r\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\r\n          : foreignPath + INDEX_SUFFIX\r\n      ));\r\n    }\r\n  }\r\n\r\n  /** Initializes an `import` statement. */\r\n  private initializeImports(\r\n    /** The statement to initialize. */\r\n    statement: ImportStatement,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** So far queued `import`s. */\r\n    queuedImports: QueuedImport[],\r\n    /** SO far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\r\n      for (let i = 0, k = declarations.length; i < k; ++i) {\r\n        this.initializeImport(\r\n          declarations[i],\r\n          parent,\r\n          statement.internalPath,\r\n          queuedImports,\r\n          queuedExports\r\n        );\r\n      }\r\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\r\n      queuedImports.push(new QueuedImport(\r\n        parent,\r\n        statement.namespaceName,\r\n        null, // indicates import *\r\n        statement.internalPath,\r\n        statement.internalPath + INDEX_SUFFIX\r\n      ));\r\n    } else {\r\n      // import \"./foo\"\r\n    }\r\n  }\r\n\r\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\r\n  private initializeImport( // { foo [as bar] }\r\n    /** The declaration to initialize. */\r\n    declaration: ImportDeclaration,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** Path to the other file. */\r\n    foreignPath: string,\r\n    /** So far queued `import`s. */\r\n    queuedImports: QueuedImport[],\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): void {\r\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\r\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\r\n      : foreignPath + INDEX_SUFFIX;\r\n\r\n    // resolve right away if the element exists\r\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\r\n    if (element) {\r\n      parent.add(declaration.name.text, element, true);\r\n      return;\r\n    }\r\n\r\n    // otherwise queue it\r\n    queuedImports.push(new QueuedImport(\r\n      parent,\r\n      declaration.name,\r\n      declaration.foreignName,\r\n      foreignPath,\r\n      foreignPathAlt\r\n    ));\r\n  }\r\n\r\n  /** Initializes a function. Does not handle methods. */\r\n  private initializeFunction(\r\n    /** The declaration to initialize. */\r\n    declaration: FunctionDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\r\n    if (declaration.is(CommonFlags.AMBIENT)) {\r\n      validDecorators |= DecoratorFlags.EXTERNAL;\r\n    } else {\r\n      validDecorators |= DecoratorFlags.INLINE;\r\n    }\r\n    if (!declaration.is(CommonFlags.INSTANCE)) {\r\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\r\n        validDecorators |= DecoratorFlags.GLOBAL;\r\n      }\r\n    }\r\n    if (!declaration.is(CommonFlags.GENERIC)) {\r\n      if (parent.kind == ElementKind.FILE && (<File>parent).source.isEntry) {\r\n        validDecorators |= DecoratorFlags.START;\r\n      }\r\n    }\r\n    var element = new FunctionPrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, validDecorators)\r\n    );\r\n    if (!parent.add(name, element)) return;\r\n    if (element.hasDecorator(DecoratorFlags.START)) {\r\n      if (this.explicitStartFunction) {\r\n        this.error(\r\n          DiagnosticCode.Module_cannot_have_multiple_start_functions,\r\n          assert(findDecorator(DecoratorKind.START, declaration.decorators)).range\r\n        );\r\n      } else this.explicitStartFunction = element;\r\n    }\r\n  }\r\n\r\n  /** Initializes an interface. */\r\n  private initializeInterface(\r\n    /** The declaration to initialize. */\r\n    declaration: InterfaceDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new InterfacePrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.GLOBAL\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return;\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\r\n          }\r\n          break;\r\n        }\r\n        default: assert(false); // interface member expected\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Initializes a namespace. */\r\n  private initializeNamespace(\r\n    /** The declaration to initialize. */\r\n    declaration: NamespaceDeclaration,\r\n    /** Parent element, usually a file or another namespace. */\r\n    parent: Element,\r\n    /** So far queued `extends` clauses. */\r\n    queuedExtends: ClassPrototype[],\r\n    /** So far queued `implements` clauses. */\r\n    queuedImplements: ClassPrototype[]\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var original = new Namespace(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\r\n    );\r\n    if (!parent.add(name, original)) return;\r\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\r\n    var members = declaration.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      switch (member.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          this.initializeEnum(<EnumDeclaration>member, original);\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          this.initializeFunction(<FunctionDeclaration>member, original);\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          this.initializeInterface(<InterfaceDeclaration>member, original);\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\r\n          break;\r\n        }\r\n        case NodeKind.TYPEDECLARATION: {\r\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          this.initializeVariables(<VariableStatement>member, original);\r\n          break;\r\n        }\r\n        default: assert(false); // namespace member expected\r\n      }\r\n    }\r\n    if (original != element) copyMembers(original, element); // retain original parent\r\n  }\r\n\r\n  /** Initializes a `type` definition. */\r\n  private initializeTypeDefinition(\r\n    /** The declaration to initialize. */\r\n    declaration: TypeDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new TypeDefinition(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\r\n    );\r\n    parent.add(name, element); // reports\r\n  }\r\n\r\n  /** Initializes a variable statement. */\r\n  private initializeVariables(\r\n    /** The statement to initialize. */\r\n    statement: VariableStatement,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    for (let i = 0, k = declarations.length; i < k; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\r\n      if (declaration.is(CommonFlags.DECLARE)) {\r\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\r\n      }\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        acceptedFlags |= DecoratorFlags.INLINE;\r\n      }\r\n      let element = new Global(\r\n        name,\r\n        parent,\r\n        this.checkDecorators(declaration.decorators, acceptedFlags),\r\n        declaration\r\n      );\r\n      if (!parent.add(name, element)) continue; // reports\r\n    }\r\n  }\r\n\r\n  /** Determines the element type of a built-in array. */\r\n  // determineBuiltinArrayType(target: Class): Type | null {\r\n  //   switch (target.internalName) {\r\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\r\n  //     case BuiltinSymbols.Uint8ClampedArray:\r\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\r\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\r\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\r\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\r\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\r\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\r\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\r\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\r\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\r\n  //   }\r\n  //   var current: Class | null = target;\r\n  //   var arrayPrototype = this.arrayPrototype;\r\n  //   do {\r\n  //     if (current.prototype == arrayPrototype) { // Array<T>\r\n  //       let typeArguments = assert(current.typeArguments);\r\n  //       assert(typeArguments.length == 1);\r\n  //       return typeArguments[0];\r\n  //     }\r\n  //   } while (current = current.base);\r\n  //   return null;\r\n  // }\r\n}\r\n\r\n/** Indicates the specific kind of an {@link Element}. */\r\nexport enum ElementKind {\r\n  /** A {@link Global}. */\r\n  GLOBAL,\r\n  /** A {@link Local}. */\r\n  LOCAL,\r\n  /** An {@link Enum}. */\r\n  ENUM,\r\n  /** An {@link EnumValue}. */\r\n  ENUMVALUE,\r\n  /** A {@link FunctionPrototype}. */\r\n  FUNCTION_PROTOTYPE,\r\n  /** A {@link Function}. */\r\n  FUNCTION,\r\n  /** A {@link FunctionTarget}. */\r\n  FUNCTION_TARGET,\r\n  /** A {@link ClassPrototype}. */\r\n  CLASS_PROTOTYPE,\r\n  /** A {@link Class}. */\r\n  CLASS,\r\n  /** An {@link InterfacePrototype}. */\r\n  INTERFACE_PROTOTYPE,\r\n  /** An {@link Interface}. */\r\n  INTERFACE,\r\n  /** A {@link FieldPrototype}. */\r\n  FIELD_PROTOTYPE,\r\n  /** A {@link Field}. */\r\n  FIELD,\r\n  /** A {@link PropertyPrototype}.  */\r\n  PROPERTY_PROTOTYPE,\r\n  /** A {@link Property}. */\r\n  PROPERTY,\r\n  /** A {@link Namespace}. */\r\n  NAMESPACE,\r\n  /** A {@link File}. */\r\n  FILE,\r\n  /** A {@link TypeDefinition}.  */\r\n  TYPEDEFINITION,\r\n}\r\n\r\n/** Indicates built-in decorators that are present. */\r\nexport enum DecoratorFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n  /** Is a program global. */\r\n  GLOBAL = 1 << 0,\r\n  /** Is a binary operator overload. */\r\n  OPERATOR_BINARY = 1 << 1,\r\n  /** Is a unary prefix operator overload. */\r\n  OPERATOR_PREFIX = 1 << 2,\r\n  /** Is a unary postfix operator overload. */\r\n  OPERATOR_POSTFIX = 1 << 3,\r\n  /** Is an unmanaged class. */\r\n  UNMANAGED = 1 << 4,\r\n  /** Is a sealed class. */\r\n  SEALED = 1 << 5,\r\n  /** Is always inlined. */\r\n  INLINE = 1 << 6,\r\n  /** Is using a different external name. */\r\n  EXTERNAL = 1 << 7,\r\n  /** Is a builtin. */\r\n  BUILTIN = 1 << 8,\r\n  /** Is compiled lazily. */\r\n  LAZY = 1 << 9,\r\n  /** Is the explicit start function. */\r\n  START = 1 << 10,\r\n  /** Is considered unsafe code. */\r\n  UNSAFE = 1 << 11\r\n}\r\n\r\n/** Translates a decorator kind to the respective decorator flag. */\r\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\r\n  switch (kind) {\r\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\r\n    case DecoratorKind.OPERATOR:\r\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\r\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\r\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\r\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\r\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\r\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\r\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\r\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\r\n    case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\r\n    case DecoratorKind.START: return DecoratorFlags.START;\r\n    case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\r\n    default: return DecoratorFlags.NONE;\r\n  }\r\n}\r\n\r\n/** Base class of all program elements. */\r\nexport abstract class Element {\r\n\r\n  /** Parent element. */\r\n  parent: Element;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n  /** Decorator flags indicating annotated traits. */\r\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\r\n  /** Member elements. */\r\n  members: Map<string,DeclaredElement> | null = null;\r\n  /** Shadowing type in type space, if any. */\r\n  shadowType: TypeDefinition | null = null;\r\n\r\n  /** Constructs a new program element. */\r\n  protected constructor(\r\n    /** Specific element kind. */\r\n    public kind: ElementKind,\r\n    /** Simple name. */\r\n    public name: string,\r\n    /** Internal name referring to this element. */\r\n    public internalName: string,\r\n    /** Containing {@link Program}. */\r\n    public program: Program,\r\n    /** Parent element. */\r\n    parent: Element | null\r\n  ) {\r\n    this.program = program;\r\n    this.name = name;\r\n    this.internalName = internalName;\r\n    if (parent) {\r\n      this.parent = parent;\r\n    } else {\r\n      assert(this.kind == ElementKind.FILE);\r\n      this.parent = this; // special case to keep this.parent non-nullable\r\n    }\r\n  }\r\n\r\n  /** Gets the enclosing file. */\r\n  get file(): File {\r\n    var current: Element = this;\r\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\r\n    while (true);\r\n  }\r\n\r\n  /** Tests if this element has a specific flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this element has any of the specified flags. */\r\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n  /** Unsets the specific flag or flags. */\r\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\r\n  /** Tests if this element has a specific decorator flag or flags. */\r\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\r\n\r\n  /** Looks up the element with the specified name within this element. */\r\n  lookupInSelf(name: string): DeclaredElement | null {\r\n    var members = this.members;\r\n    if (members && members.has(name)) return members.get(name)!;\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the element with the specified name relative to this element, like in JS. */\r\n  abstract lookup(name: string): Element | null;\r\n\r\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\r\n  add(name: string, element: DeclaredElement): bool {\r\n    var originalDeclaration = element.declaration;\r\n    var members = this.members;\r\n    if (!members) this.members = members = new Map();\r\n    else if (members.has(name)) {\r\n      let actual = members.get(name)!;\r\n      if (actual.parent !== this) {\r\n        // override non-own element\r\n      } else {\r\n        let merged = tryMerge(actual, element);\r\n        if (merged) {\r\n          element = merged; // use merged element\r\n        } else {\r\n          this.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            element.identifierNode.range, element.identifierNode.text\r\n          );\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    members.set(name, element);\r\n    var program = this.program;\r\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\r\n      // prefer unbound prototypes in global lookup maps\r\n      program.elementsByName.set(element.internalName, element);\r\n      program.elementsByDeclaration.set(originalDeclaration, element);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** Returns a string representation of this element. */\r\n  toString(): string {\r\n    return ElementKind[this.kind] + \":\" + this.internalName;\r\n  }\r\n}\r\n\r\n/** Base class of elements with an associated declaration statement. */\r\nexport abstract class DeclaredElement extends Element {\r\n\r\n  /** Constructs a new declared program element. */\r\n  protected constructor(\r\n    /** Specific element kind. */\r\n    kind: ElementKind,\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Internal name referring to this element. */\r\n    internalName: string,\r\n    /** Containing {@link Program}. */\r\n    program: Program,\r\n    /** Parent element. */\r\n    parent: Element | null,\r\n    /** Declaration reference. */\r\n    public declaration: DeclarationStatement\r\n  ) {\r\n    super(kind, name, internalName, program, parent);\r\n    // It is necessary to have access to identifiers of all members and exports\r\n    // for reporting purposes and this is the lowest common denominator. Comes\r\n    // at the expense of not having more specific type information in derived\r\n    // classes, though. Instead, derived classes implement getters for other\r\n    // important AST nodes directly through manual casting, allowing the resolver\r\n    // etc. to not worry about actual declarations.\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags; // inherit\r\n  }\r\n\r\n  /** Tests if this element is a library element. */\r\n  get isDeclaredInLibrary(): bool {\r\n    return this.declaration.range.source.isLibrary;\r\n  }\r\n\r\n  /** Gets the associated identifier node. */\r\n  get identifierNode(): IdentifierExpression {\r\n    return this.declaration.name;\r\n  }\r\n\r\n  /** Gets the assiciated decorator nodes. */\r\n  get decoratorNodes(): DecoratorNode[] | null {\r\n    return this.declaration.decorators;\r\n  }\r\n}\r\n\r\n/** Base class of elements that can be resolved to a concrete type. */\r\nexport abstract class TypedElement extends DeclaredElement {\r\n\r\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\r\n  type: Type = Type.void;\r\n\r\n  /** Sets the resolved type of this element. */\r\n  setType(type: Type): void {\r\n    assert(!this.is(CommonFlags.RESOLVED));\r\n    this.type = type;\r\n    this.set(CommonFlags.RESOLVED);\r\n  }\r\n}\r\n\r\n/** A file representing the implicit top-level namespace of a source. */\r\nexport class File extends Element {\r\n\r\n  /** File exports. */\r\n  exports: Map<string,DeclaredElement> | null = null;\r\n  /** File re-exports. */\r\n  exportsStar: File[] | null = null;\r\n  /** Top-level start function of this file. */\r\n  startFunction: Function;\r\n\r\n  /** Constructs a new file. */\r\n  constructor(\r\n    /** Program this file belongs to. */\r\n    program: Program,\r\n    /** Source of this file. */\r\n    public source: Source\r\n  ) {\r\n    super(\r\n      ElementKind.FILE,\r\n      source.normalizedPath,\r\n      source.internalPath,\r\n      program,\r\n      null // special case for files\r\n    );\r\n    this.source = source;\r\n    assert(!program.filesByName.has(this.internalName));\r\n    program.filesByName.set(this.internalName, this);\r\n    var startFunction = this.program.makeNativeFunction(\r\n      \"start:\" + this.internalName,\r\n      new Signature(null, Type.void),\r\n      this\r\n    );\r\n    startFunction.internalName = startFunction.name;\r\n    this.startFunction = startFunction;\r\n  }\r\n\r\n  /* @override */\r\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\r\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\r\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\r\n    }\r\n    if (!super.add(name, element)) return false;\r\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\r\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\r\n      this.ensureExport(\r\n        element.name,\r\n        element\r\n      );\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /* @override */\r\n  lookupInSelf(name: string): DeclaredElement | null {\r\n    var element = super.lookupInSelf(name);\r\n    if (element) return element;\r\n    var exportsStar = this.exportsStar;\r\n    if (exportsStar) {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\r\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    var element = this.lookupInSelf(name);\r\n    if (element) return element;\r\n    return this.program.lookupGlobal(name);\r\n  }\r\n\r\n  /** Ensures that an element is an export of this file. */\r\n  ensureExport(name: string, element: DeclaredElement): void {\r\n    var exports = this.exports;\r\n    if (!exports) this.exports = exports = new Map();\r\n    exports.set(name, element);\r\n    if (this.source.isLibrary) this.program.ensureGlobal(name, element);\r\n  }\r\n\r\n  /** Ensures that another file is a re-export of this file. */\r\n  ensureExportStar(file: File): void {\r\n    var exportsStar = this.exportsStar;\r\n    if (!exportsStar) this.exportsStar = exportsStar = [];\r\n    else if (exportsStar.includes(file)) return;\r\n    exportsStar.push(file);\r\n  }\r\n\r\n  /** Looks up the export of the specified name. */\r\n  lookupExport(name: string): DeclaredElement | null {\r\n    var exports = this.exports;\r\n    if (exports && exports.has(name)) return exports.get(name)!;\r\n    var exportsStar = this.exportsStar;\r\n    if (exportsStar) {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\r\n        let element = exportsStar[i].lookupExport(name);\r\n        if (element) return element;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Creates an imported namespace from this file. */\r\n  asImportedNamespace(name: string, parent: Element): Namespace {\r\n    var ns = new Namespace(\r\n      name,\r\n      parent,\r\n      this.program.makeNativeNamespaceDeclaration(name)\r\n    );\r\n    var exports = this.exports;\r\n    if (exports) {\r\n      for (let [memberName, member] of exports) {\r\n        ns.add(memberName, member);\r\n      }\r\n    }\r\n    return ns;\r\n  }\r\n}\r\n\r\n/** A type definition. */\r\nexport class TypeDefinition extends TypedElement {\r\n\r\n  /** Constructs a new type definition. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: TypeDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.TYPEDEFINITION,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type parameter nodes. */\r\n  get typeParameterNodes(): TypeParameterNode[] | null {\r\n    return (<TypeDeclaration>this.declaration).typeParameters;\r\n  }\r\n\r\n  /** Gets the associated type node. */\r\n  get typeNode(): CommonTypeNode {\r\n    return (<TypeDeclaration>this.declaration).type;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A namespace that differs from a file in being user-declared with a name. */\r\nexport class Namespace extends DeclaredElement {\r\n\r\n  /** Constructs a new namespace. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or another namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: NamespaceDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.NAMESPACE,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.lookupInSelf(name)\r\n        || this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** An enum. */\r\nexport class Enum extends TypedElement {\r\n\r\n  /** Constructs a new enum. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: EnumDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.ENUM,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n    this.setType(Type.i32);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.lookupInSelf(name)\r\n        || this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** Indicates the kind of an inlined constant value. */\r\nexport const enum ConstantValueKind {\r\n  /** No constant value. */\r\n  NONE,\r\n  /** Constant integer value. */\r\n  INTEGER,\r\n  /** Constant float value. */\r\n  FLOAT\r\n}\r\n\r\n/** Base class of all variable-like program elements. */\r\nexport abstract class VariableLikeElement extends TypedElement {\r\n\r\n  /** Constant value kind. */\r\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\r\n  /** Constant integer value, if applicable. */\r\n  constantIntegerValue: I64;\r\n  /** Constant float value, if applicable. */\r\n  constantFloatValue: f64;\r\n\r\n  /** Constructs a new variable-like element. */\r\n  protected constructor(\r\n    /** Specific element kind. */\r\n    kind: ElementKind,\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file, namespace or class. */\r\n    parent: Element,\r\n    /** Declaration reference. Creates a native declaration if omitted. */\r\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\r\n  ) {\r\n    super(\r\n      kind,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.flags = declaration.flags;\r\n  }\r\n\r\n  /** Gets the associated type node.s */\r\n  get typeNode(): CommonTypeNode | null {\r\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\r\n  }\r\n\r\n  /** Gets the associated initializer node. */\r\n  get initializerNode(): Expression | null {\r\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\r\n  }\r\n\r\n  /** Applies a constant integer value to this element. */\r\n  setConstantIntegerValue(value: I64, type: Type): void {\r\n    assert(type.is(TypeFlags.INTEGER));\r\n    this.type = type;\r\n    this.constantValueKind = ConstantValueKind.INTEGER;\r\n    this.constantIntegerValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\r\n  }\r\n\r\n  /** Applies a constant float value to this element. */\r\n  setConstantFloatValue(value: f64, type: Type): void {\r\n    assert(type.is(TypeFlags.FLOAT));\r\n    this.type = type;\r\n    this.constantValueKind = ConstantValueKind.FLOAT;\r\n    this.constantFloatValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\r\n  }\r\n\r\n  /** @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** An enum value. */\r\nexport class EnumValue extends VariableLikeElement {\r\n\r\n  /** Constructs a new enum value. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent enum. */\r\n    parent: Enum,\r\n    /** Declaration reference. */\r\n    declaration: EnumValueDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.ENUMVALUE,\r\n      name,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n    this.setType(Type.i32);\r\n  }\r\n\r\n  /** Whether this enum value is immutable. */\r\n  isImmutable: bool = false;\r\n\r\n  /** Gets the associated value node. */\r\n  get valueNode(): Expression | null {\r\n    return (<EnumValueDeclaration>this.declaration).value;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A global variable. */\r\nexport class Global extends VariableLikeElement {\r\n\r\n  /** Constructs a new global variable. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file, namespace or static class. */\r\n    parent: Element,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags,\r\n    /** Declaration reference. Creates a native declaration if omitted. */\r\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\r\n  ) {\r\n    super(\r\n      ElementKind.GLOBAL,\r\n      name,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n}\r\n\r\n/** A function parameter. */\r\nexport class Parameter {\r\n  /** Constructs a new function parameter. */\r\n  constructor(\r\n    /** Parameter name. */\r\n    public name: string,\r\n    /** Parameter type. */\r\n    public type: Type,\r\n    /** Parameter initializer, if present. */\r\n    public initializer: Expression | null = null\r\n  ) {}\r\n}\r\n\r\n/** A local variable. */\r\nexport class Local extends VariableLikeElement {\r\n\r\n  /** Constructs a new local variable. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\r\n    public index: i32,\r\n    /** Resolved type. */\r\n    type: Type,\r\n    /** Parent function. */\r\n    parent: Function,\r\n    /** Declaration reference. */\r\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\r\n  ) {\r\n    super(\r\n      ElementKind.LOCAL,\r\n      name,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.index = index;\r\n    assert(type != Type.void);\r\n    this.setType(type);\r\n  }\r\n}\r\n\r\n/** A yet unresolved function prototype. */\r\nexport class FunctionPrototype extends DeclaredElement {\r\n\r\n  /** Operator kind, if an overload. */\r\n  operatorKind: OperatorKind = OperatorKind.INVALID;\r\n  /** Already resolved instances. */\r\n  instances: Map<string,Function> | null = null;\r\n\r\n  /** Clones of this prototype that are bounds to specific classes. */\r\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\r\n\r\n  /** Constructs a new function prototype. */\r\n  constructor(\r\n    /** Simple name */\r\n    name: string,\r\n    /** Parent element, usually a file, namespace or class (if a method). */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: FunctionDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.FUNCTION_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type parameter nodes. */\r\n  get typeParameterNodes(): TypeParameterNode[] | null {\r\n    return (<FunctionDeclaration>this.declaration).typeParameters;\r\n  }\r\n\r\n  /** Gets the associated signature node. */\r\n  get signatureNode(): SignatureNode {\r\n    return (<FunctionDeclaration>this.declaration).signature;\r\n  }\r\n\r\n  /** Gets the associated body node. */\r\n  get bodyNode(): Statement | null {\r\n    return (<FunctionDeclaration>this.declaration).body;\r\n  }\r\n\r\n  /** Gets the arrow function kind. */\r\n  get arrowKind(): ArrowKind {\r\n    return (<FunctionDeclaration>this.declaration).arrowKind;\r\n  }\r\n\r\n  /** Tests if this prototype is bound to a class. */\r\n  get isBound(): bool {\r\n    var parent = this.parent;\r\n    return parent.kind == ElementKind.CLASS\r\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\r\n  }\r\n\r\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\r\n  toBound(classInstance: Class): FunctionPrototype {\r\n    assert(this.is(CommonFlags.INSTANCE));\r\n    assert(!this.isBound);\r\n    var boundPrototypes = this.boundPrototypes;\r\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\r\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\r\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\r\n    var bound = new FunctionPrototype(\r\n      this.name,\r\n      classInstance, // !\r\n      <MethodDeclaration>declaration,\r\n      this.decoratorFlags\r\n    );\r\n    bound.flags = this.flags;\r\n    bound.operatorKind = this.operatorKind;\r\n    // NOTE: this.instances holds instances per bound class / unbound\r\n    boundPrototypes.set(classInstance, bound);\r\n    return bound;\r\n  }\r\n\r\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\r\n  getResolvedInstance(instanceKey: string): Function | null {\r\n    var instances = this.instances;\r\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\r\n    return null;\r\n  }\r\n\r\n  /** Sets the resolved instance for the specified instance key. */\r\n  setResolvedInstance(instanceKey: string, instance: Function): void {\r\n    var instances = this.instances;\r\n    if (!instances) this.instances = instances = new Map();\r\n    else assert(!instances.has(instanceKey));\r\n    instances.set(instanceKey, instance);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved function. */\r\nexport class Function extends TypedElement {\r\n\r\n  /** Function prototype. */\r\n  prototype: FunctionPrototype;\r\n  /** Function signature. */\r\n  signature: Signature;\r\n  /** Map of locals by name. */\r\n  localsByName: Map<string,Local> = new Map();\r\n  /** Array of locals by index. */\r\n  localsByIndex: Local[] = [];\r\n  /** List of additional non-parameter locals. */\r\n  additionalLocals: Type[] = [];\r\n  /** Contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Default control flow. */\r\n  flow: Flow;\r\n  /** Remembered debug locations. */\r\n  debugLocations: Range[] = [];\r\n  /** Function reference, if compiled. */\r\n  ref: FunctionRef = 0;\r\n  /** Function table index, if any. */\r\n  functionTableIndex: i32 = -1;\r\n  /** Trampoline function for calling with omitted arguments. */\r\n  trampoline: Function | null = null;\r\n\r\n  /** Counting id of inline operations involving this function. */\r\n  nextInlineId: i32 = 0;\r\n  /** Counting id of anonymous inner functions. */\r\n  nextAnonymousId: i32 = 0;\r\n  /** Counting id of autorelease variables. */\r\n  nextAutoreleaseId: i32 = 0;\r\n\r\n  /** Constructs a new concrete function. */\r\n  constructor(\r\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\r\n    nameInclTypeParameters: string,\r\n    /** Respective function prototype. */\r\n    prototype: FunctionPrototype,\r\n    /** Concrete signature. */\r\n    signature: Signature, // pre-resolved\r\n    /** Contextual type arguments inherited from its parent class, if any. */\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ) {\r\n    super(\r\n      ElementKind.FUNCTION,\r\n      nameInclTypeParameters,\r\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\r\n      prototype.program,\r\n      prototype.parent,\r\n      prototype.declaration\r\n    );\r\n    this.prototype = prototype;\r\n    this.signature = signature;\r\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.contextualTypeArguments = contextualTypeArguments;\r\n    this.type = Type.u32.asFunction(signature);\r\n    if (!prototype.is(CommonFlags.AMBIENT)) {\r\n      let localIndex = 0;\r\n      if (this.is(CommonFlags.INSTANCE)) {\r\n        let local = new Local(\r\n          CommonSymbols.this_,\r\n          localIndex++,\r\n          assert(signature.thisType),\r\n          this\r\n        );\r\n        this.localsByName.set(CommonSymbols.this_, local);\r\n        this.localsByIndex[local.index] = local;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n        let parameterType = parameterTypes[i];\r\n        let parameterName = signature.getParameterName(i);\r\n        let local = new Local(\r\n          parameterName,\r\n          localIndex++,\r\n          parameterType,\r\n          this\r\n        );\r\n        this.localsByName.set(parameterName, local);\r\n        this.localsByIndex[local.index] = local;\r\n      }\r\n    }\r\n    this.flow = Flow.create(this);\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n\r\n  /** Adds a local of the specified type, with an optional name. */\r\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\r\n    // if it has a name, check previously as this method will throw otherwise\r\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\r\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\r\n    var localName = name !== null\r\n      ? name\r\n      : \"var$\" + localIndex.toString();\r\n    var local = new Local(\r\n      localName,\r\n      localIndex,\r\n      type,\r\n      this,\r\n      declaration || this.program.makeNativeVariableDeclaration(localName)\r\n    );\r\n    if (name) {\r\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\r\n      this.localsByName.set(name, local);\r\n    }\r\n    this.localsByIndex[local.index] = local;\r\n    this.additionalLocals.push(type);\r\n    return local;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    var locals = this.localsByName;\r\n    if (locals.has(name)) return locals.get(name);\r\n    return this.parent.lookup(name);\r\n  }\r\n\r\n  // used by flows to keep track of temporary locals\r\n  tempI32s: Local[] | null = null;\r\n  tempI64s: Local[] | null = null;\r\n  tempF32s: Local[] | null = null;\r\n  tempF64s: Local[] | null = null;\r\n  tempV128s: Local[] | null = null;\r\n\r\n  // used by flows to keep track of break labels\r\n  nextBreakId: i32 = 0;\r\n  breakStack: i32[] | null = null;\r\n  breakLabel: string | null = null;\r\n\r\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\r\n  finalize(module: Module, ref: FunctionRef): void {\r\n    this.ref = ref;\r\n    assert(!this.breakStack || !this.breakStack.length); // internal error\r\n    this.breakStack = null;\r\n    this.breakLabel = null;\r\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\r\n    if (this.program.options.sourceMap) {\r\n      let debugLocations = this.debugLocations;\r\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\r\n        let debugLocation = debugLocations[i];\r\n        module.setDebugLocation(\r\n          ref,\r\n          debugLocation.debugInfoRef,\r\n          debugLocation.source.debugInfoIndex,\r\n          debugLocation.line,\r\n          debugLocation.column\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/** A resolved function target, that is a function called indirectly by an index and signature. */\r\nexport class FunctionTarget extends Element {\r\n\r\n  /** Underlying signature. */\r\n  signature: Signature;\r\n  /** Function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new function target. */\r\n  constructor(\r\n    /** Concrete signature. */\r\n    signature: Signature,\r\n    /** Program reference. */\r\n    program: Program,\r\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\r\n  ) {\r\n    super(\r\n      ElementKind.FUNCTION_TARGET,\r\n      __s = \"sig:\" + signature.toSignatureString(),\r\n      __s,\r\n      program,\r\n      program.nativeFile\r\n    );\r\n    this.signature = signature;\r\n    this.flags = CommonFlags.RESOLVED;\r\n    this.type = Type.u32.asFunction(signature);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return null;\r\n  }\r\n}\r\n\r\n/** A yet unresolved instance field prototype. */\r\nexport class FieldPrototype extends DeclaredElement {\r\n\r\n  /** Constructs a new field prototype. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent class. */\r\n    parent: ClassPrototype,\r\n    /** Declaration reference. */\r\n    declaration: FieldDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.FIELD_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type node. */\r\n  get typeNode(): CommonTypeNode | null {\r\n    return (<FieldDeclaration>this.declaration).type;\r\n  }\r\n\r\n  /** Gets the associated initializer node. */\r\n  get initializerNode(): Expression | null {\r\n    return (<FieldDeclaration>this.declaration).initializer;\r\n  }\r\n\r\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\r\n  get parameterIndex(): i32 {\r\n    return (<FieldDeclaration>this.declaration).parameterIndex;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved instance field. */\r\nexport class Field extends VariableLikeElement {\r\n\r\n  /** Field prototype reference. */\r\n  prototype: FieldPrototype;\r\n  /** Field memory offset, if an instance field. */\r\n  memoryOffset: i32 = -1;\r\n\r\n  /** Constructs a new field. */\r\n  constructor(\r\n    /** Respective field prototype. */\r\n    prototype: FieldPrototype,\r\n    /** Parent class. */\r\n    parent: Class,\r\n    /** Concrete type. */\r\n    type: Type\r\n  ) {\r\n    super(\r\n      ElementKind.FIELD,\r\n      prototype.name,\r\n      parent,\r\n      <VariableLikeDeclarationStatement>prototype.declaration\r\n    );\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    assert(type != Type.void);\r\n    this.setType(type);\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n}\r\n\r\n/** A property comprised of a getter and a setter function. */\r\nexport class PropertyPrototype extends DeclaredElement {\r\n\r\n  /** Getter prototype. */\r\n  getterPrototype: FunctionPrototype | null = null;\r\n  /** Setter prototype. */\r\n  setterPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent class. */\r\n    parent: ClassPrototype,\r\n    /** Declaration of the getter or setter introducing the property. */\r\n    firstDeclaration: FunctionDeclaration\r\n  ) {\r\n    super(\r\n      ElementKind.PROPERTY_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\r\n      parent.program,\r\n      parent,\r\n      firstDeclaration\r\n    );\r\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved property. */\r\nexport class Property extends VariableLikeElement {\r\n\r\n  /** Prototype reference. */\r\n  prototype: PropertyPrototype;\r\n  /** Getter instance. */\r\n  getterInstance: Function | null = null;\r\n  /** Setter instance. */\r\n  setterInstance: Function | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    /** Respective property prototype. */\r\n    prototype: PropertyPrototype,\r\n    /** Parent element, usually a static class prototype or class instance. */\r\n    parent: Element\r\n  ) {\r\n    super(\r\n      ElementKind.PROPERTY,\r\n      prototype.name,\r\n      parent,\r\n      prototype.program.makeNativeVariableDeclaration(\r\n        prototype.name,\r\n        prototype.is(CommonFlags.INSTANCE)\r\n          ? CommonFlags.INSTANCE\r\n          : CommonFlags.NONE\r\n      )\r\n    );\r\n    this.prototype = prototype;\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A yet unresolved class prototype. */\r\nexport class ClassPrototype extends DeclaredElement {\r\n\r\n  /** Instance member prototypes. */\r\n  instanceMembers: Map<string,Element> | null = null;\r\n  /** Base class prototype, if applicable. */\r\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\r\n  /** Constructor prototype. */\r\n  constructorPrototype: FunctionPrototype | null = null;\r\n  /** Operator overload prototypes. */\r\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\r\n  /** Already resolved instances. */\r\n  instances: Map<string,Class> | null = null;\r\n\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: ClassDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\r\n    _isInterface: bool = false // FIXME\r\n  ) {\r\n    super(\r\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type parameter nodes. */\r\n  get typeParameterNodes(): TypeParameterNode[] | null {\r\n    return (<ClassDeclaration>this.declaration).typeParameters;\r\n  }\r\n  /** Gets the associated extends node. */\r\n  get extendsNode(): TypeNode | null {\r\n    return (<ClassDeclaration>this.declaration).extendsType;\r\n  }\r\n  /** Gets the associated implements nodes. */\r\n  get implementsNodes(): TypeNode[] | null {\r\n    return (<ClassDeclaration>this.declaration).implementsTypes;\r\n  }\r\n\r\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\r\n  get isBuiltinArray(): bool {\r\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\r\n    return arrayBufferViewInstance !== null\r\n        && this.extends(arrayBufferViewInstance.prototype);\r\n  }\r\n\r\n  /** Tests if this prototype extends the specified. */\r\n  extends(basePtototype: ClassPrototype | null): bool {\r\n    var current: ClassPrototype | null = this;\r\n    do if (current === basePtototype) return true;\r\n    while (current = current.basePrototype);\r\n    return false;\r\n  }\r\n\r\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\r\n  addInstance(name: string, element: DeclaredElement): bool {\r\n    var originalDeclaration = element.declaration;\r\n    var instanceMembers = this.instanceMembers;\r\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\r\n    else if (instanceMembers.has(name)) {\r\n      let merged = tryMerge(instanceMembers.get(name)!, element);\r\n      if (!merged) {\r\n        this.program.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          element.identifierNode.range, element.identifierNode.text\r\n        );\r\n        return false;\r\n      }\r\n      element = merged;\r\n    }\r\n    instanceMembers.set(name, element);\r\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\r\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\r\n    }\r\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\r\n    return true;\r\n  }\r\n\r\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\r\n  getResolvedInstance(instanceKey: string): Class | null {\r\n    var instances = this.instances;\r\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\r\n    return null;\r\n  }\r\n\r\n  /** Sets the resolved instance for the specified instance key. */\r\n  setResolvedInstance(instanceKey: string, instance: Class): void {\r\n    var instances = this.instances;\r\n    if (!instances) this.instances = instances = new Map();\r\n    else assert(!instances.has(instanceKey));\r\n    instances.set(instanceKey, instance);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\nconst enum AcyclicState {\r\n  UNKNOWN,\r\n  ACYCLIC,\r\n  NOT_ACYCLIC\r\n}\r\n\r\n/** A resolved class. */\r\nexport class Class extends TypedElement {\r\n\r\n  /** Class prototype. */\r\n  prototype: ClassPrototype;\r\n  /** Resolved type arguments. */\r\n  typeArguments: Type[] | null;\r\n  /** Base class, if applicable. */\r\n  base: Class | null;\r\n  /** Contextual type arguments for fields and methods. */\r\n  contextualTypeArguments: Map<string,Type> | null = null;\r\n  /** Current member memory offset. */\r\n  currentMemoryOffset: u32 = 0;\r\n  /** Constructor instance. */\r\n  constructorInstance: Function | null = null;\r\n  /** Operator overloads. */\r\n  overloads: Map<OperatorKind,Function> | null = null;\r\n  /** Unique class id. */\r\n  private _id: u32 = 0;\r\n  /** Remembers acyclic state. */\r\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\r\n\r\n  /** Gets the unique runtime id of this class. */\r\n  get id(): u32 {\r\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\r\n  }\r\n\r\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\r\n  get isBuiltinArray(): bool {\r\n    return this.prototype.isBuiltinArray;\r\n  }\r\n\r\n  /** Tests if this class is array-like. */\r\n  get isArrayLike(): bool {\r\n    if (this.isBuiltinArray) return true;\r\n    var lengthField = this.lookupInSelf(\"length\");\r\n    return lengthField !== null && (\r\n      lengthField.kind == ElementKind.FIELD ||\r\n      (\r\n        lengthField.kind == ElementKind.PROPERTY &&\r\n        (<Property>lengthField).getterInstance !== null // TODO: resolve & check type?\r\n      )\r\n    ) && (\r\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\r\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\r\n    );\r\n  }\r\n\r\n  /** Constructs a new class. */\r\n  constructor(\r\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\r\n    nameInclTypeParameters: string,\r\n    /** The respective class prototype. */\r\n    prototype: ClassPrototype,\r\n    /** Concrete type arguments, if any. */\r\n    typeArguments: Type[] | null = null,\r\n    /** Base class, if derived. */\r\n    base: Class | null = null,\r\n    _isInterface: bool = false // FIXME\r\n  ) {\r\n    super(\r\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\r\n      nameInclTypeParameters,\r\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\r\n      prototype.program,\r\n      prototype.parent,\r\n      prototype.declaration\r\n    );\r\n    var program = this.program;\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.typeArguments = typeArguments;\r\n    this.setType(program.options.usizeType.asClass(this));\r\n    this.base = base;\r\n\r\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n      let id = program.nextClassId++;\r\n      this._id = id;\r\n      program.managedClasses.set(id, this);\r\n    }\r\n\r\n    // inherit static members and contextual type arguments from base class\r\n    if (base) {\r\n      let inheritedTypeArguments = base.contextualTypeArguments;\r\n      if (inheritedTypeArguments) {\r\n        let contextualTypeArguments = this.contextualTypeArguments;\r\n        for (let [baseName, baseType] of inheritedTypeArguments) {\r\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\r\n          contextualTypeArguments.set(baseName, baseType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // apply pre-checked instance-specific contextual type arguments\r\n    var typeParameters = prototype.typeParameterNodes;\r\n    if (typeArguments) {\r\n      let numTypeArguments = typeArguments.length;\r\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n      if (numTypeArguments) {\r\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n        for (let i = 0; i < numTypeArguments; ++i) {\r\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n        }\r\n      }\r\n    } else if (typeParameters && typeParameters.length) {\r\n      throw new Error(\"type argument count mismatch\");\r\n    }\r\n    registerConcreteElement(program, this);\r\n  }\r\n\r\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\r\n  isAssignableTo(target: Class): bool {\r\n    var current: Class | null = this;\r\n    do if (current == target) return true;\r\n    while (current = current.base);\r\n    return false;\r\n  }\r\n\r\n  /** Looks up the operator overload of the specified kind. */\r\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\r\n    if (unchecked) {\r\n      switch (kind) {\r\n        case OperatorKind.INDEXED_GET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        case OperatorKind.INDEXED_SET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    var instance: Class | null = this;\r\n    do {\r\n      let overloads = instance.overloads;\r\n      if (overloads) {\r\n        let overload = overloads.get(kind);\r\n        if (overload) return overload;\r\n      }\r\n    } while (instance = instance.base);\r\n    return null;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n\r\n  /** Calculates the memory offset of the specified field. */\r\n  offsetof(fieldName: string): u32 {\r\n    var members = assert(this.members);\r\n    assert(members.has(fieldName));\r\n    var field = <Element>members.get(fieldName);\r\n    assert(field.kind == ElementKind.FIELD);\r\n    return (<Field>field).memoryOffset;\r\n  }\r\n\r\n  /** Writes a field value to a buffer and returns the number of bytes written. */\r\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\r\n    var field = this.lookupInSelf(name);\r\n    if (field && field.kind == ElementKind.FIELD) {\r\n      let offset = baseOffset + (<Field>field).memoryOffset;\r\n      switch ((<Field>field).type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8: {\r\n          writeI8(i32(value), buffer, offset);\r\n          return 1;\r\n        }\r\n        case TypeKind.I16:\r\n        case TypeKind.U16: {\r\n          writeI16(i32(value), buffer, offset);\r\n          return 2;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          writeI32(i32(value), buffer, offset);\r\n          return 4;\r\n        }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          assert(!this.program.options.isWasm64); // TODO\r\n          writeI32(i32(value), buffer, offset);\r\n          return 4;\r\n        }\r\n        case TypeKind.F32: {\r\n          writeF32(f32(value), buffer, offset);\r\n          return 4;\r\n        }\r\n        case TypeKind.F64: {\r\n          writeF64(f64(value), buffer, offset);\r\n          return 8;\r\n        }\r\n      }\r\n    }\r\n    assert(false);\r\n    return 0;\r\n  }\r\n\r\n  /** Tests if this class extends the specified prototype. */\r\n  extends(prototype: ClassPrototype): bool {\r\n    return this.prototype.extends(prototype);\r\n  }\r\n\r\n  /** Gets the concrete type arguments to the specified extendend prototype. */\r\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\r\n    var current: Class | null = this;\r\n    do if (current.prototype === extendedPrototype) return current.typeArguments;\r\n    while (current = current.base);\r\n    return null;\r\n  }\r\n\r\n  /** Gets the value type of an array. Must be an array. */\r\n  getArrayValueType(): Type {\r\n    var current: Class = this;\r\n    var program = this.program;\r\n    var abvInstance = program.arrayBufferViewInstance;\r\n    while (current.base !== abvInstance) {\r\n      current = assert(current.base);\r\n    }\r\n    switch (current.prototype) {\r\n      case program.i8ArrayPrototype: return Type.i8;\r\n      case program.i16ArrayPrototype: return Type.i16;\r\n      case program.i32ArrayPrototype: return Type.i32;\r\n      case program.i64ArrayPrototype: return Type.i64;\r\n      case program.u8ArrayPrototype:\r\n      case program.u8ClampedArrayPrototype: return Type.u8;\r\n      case program.u16ArrayPrototype: return Type.u16;\r\n      case program.u32ArrayPrototype: return Type.u32;\r\n      case program.u64ArrayPrototype: return Type.u64;\r\n      case program.f32ArrayPrototype: return Type.f32;\r\n      case program.f64ArrayPrototype: return Type.f64;\r\n      case program.arrayPrototype: return assert(this.getTypeArgumentsTo(program.arrayPrototype))[0];\r\n      default: assert(false);\r\n    }\r\n    return Type.void;\r\n  }\r\n\r\n  /** Tests if this class is inherently acyclic. */\r\n  get isAcyclic(): bool {\r\n    var acyclic = this._acyclic;\r\n    if (acyclic == AcyclicState.UNKNOWN) {\r\n      let hasCycle = this.cyclesTo(this);\r\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\r\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\r\n    }\r\n    return acyclic == AcyclicState.ACYCLIC;\r\n  }\r\n\r\n  /** Tests if this class potentially forms a reference cycle to another one. */\r\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\r\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\r\n    //\r\n    // - scalars\r\n    // - references to classes that are both acyclic and final (here: Java); and\r\n    // - arrays (in our case: also sets, maps) of either of the above\r\n    //\r\n    // Our implementation, however, treats all objects that do not reference themselves directly\r\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\r\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\r\n\r\n    if (except.has(this)) return false;\r\n    except.add(this); // don't recurse indefinitely\r\n\r\n    // Find out if any field references 'other' directly or indirectly\r\n    var current: Class | null;\r\n    var members = this.members;\r\n    if (members) {\r\n      for (let member of members.values()) {\r\n        if (\r\n          member.kind == ElementKind.FIELD &&\r\n          (current = (<Field>member).type.classReference) !== null &&\r\n          (\r\n            current === other ||\r\n            current.cyclesTo(other, except)\r\n          )\r\n        ) return true;\r\n      }\r\n    }\r\n\r\n    // Do the same for non-field data\r\n    var basePrototype: ClassPrototype | null;\r\n\r\n    // Array<T->other?>\r\n    if ((basePrototype = this.program.arrayPrototype) && this.prototype.extends(basePrototype)) {\r\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\r\n      assert(typeArguments.length == 1);\r\n      if (\r\n        (current = typeArguments[0].classReference) !== null &&\r\n        (\r\n          current === other ||\r\n          current.cyclesTo(other, except)\r\n        )\r\n      ) return true;\r\n\r\n    // Set<K->other?>\r\n    } else if ((basePrototype = this.program.setPrototype) && this.prototype.extends(basePrototype)) {\r\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\r\n      assert(typeArguments.length == 1);\r\n      if (\r\n        (current = typeArguments[0].classReference) !== null &&\r\n        (\r\n          current === other ||\r\n          current.cyclesTo(other, except)\r\n        )\r\n      ) return true;\r\n\r\n    // Map<K->other?,V->other?>\r\n    } else if ((basePrototype = this.program.mapPrototype) && this.prototype.extends(basePrototype)) {\r\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\r\n      assert(typeArguments.length == 2);\r\n      if (\r\n        (current = typeArguments[0].classReference) !== null &&\r\n        (\r\n          current === other ||\r\n          current.cyclesTo(other, except)\r\n        )\r\n      ) return true;\r\n      if (\r\n        (current = typeArguments[1].classReference) !== null &&\r\n        (\r\n          current === other ||\r\n          current.cyclesTo(other, except)\r\n        )\r\n      ) return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\n/** A yet unresolved interface. */\r\nexport class InterfacePrototype extends ClassPrototype { // FIXME\r\n\r\n  /** Constructs a new interface prototype. */\r\n  constructor(\r\n    name: string,\r\n    parent: Element,\r\n    declaration: InterfaceDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      decoratorFlags,\r\n      true\r\n    );\r\n  }\r\n}\r\n\r\n/** A resolved interface. */\r\nexport class Interface extends Class { // FIXME\r\n\r\n  /** Constructs a new interface. */\r\n  constructor(\r\n    nameInclTypeParameters: string,\r\n    prototype: InterfacePrototype,\r\n    typeArguments: Type[] = [],\r\n    base: Interface | null = null\r\n  ) {\r\n    super(\r\n      nameInclTypeParameters,\r\n      prototype,\r\n      typeArguments,\r\n      base,\r\n      true\r\n    );\r\n  }\r\n}\r\n\r\n/** Registers a concrete element with a program. */\r\nfunction registerConcreteElement(program: Program, element: Element): void {\r\n  assert(!program.instancesByName.has(element.internalName));\r\n  program.instancesByName.set(element.internalName, element);\r\n}\r\n\r\n/** Attempts to merge two elements. Returns the merged element on success. */\r\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\r\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\r\n  // suggesting to just merge what seems to be possible for now and revisit later.\r\n  assert(older.program === newer.program);\r\n  assert(!newer.members);\r\n  var merged: DeclaredElement | null = null;\r\n  switch (older.kind) {\r\n    case ElementKind.FUNCTION_PROTOTYPE: {\r\n      switch (newer.kind) {\r\n        case ElementKind.NAMESPACE: {\r\n          copyMembers(newer, older);\r\n          merged = <DeclaredElement>older;\r\n          break;\r\n        }\r\n        case ElementKind.TYPEDEFINITION: {\r\n          if (!older.shadowType) {\r\n            older.shadowType = <TypeDefinition>newer;\r\n            copyMembers(newer, older);\r\n            merged = <DeclaredElement>older;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.CLASS_PROTOTYPE:\r\n    case ElementKind.ENUM: {\r\n      if (newer.kind == ElementKind.NAMESPACE) {\r\n        copyMembers(newer, older);\r\n        merged = <DeclaredElement>older;\r\n        break;\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.NAMESPACE: {\r\n      switch (newer.kind) {\r\n        case ElementKind.ENUM:\r\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\r\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\r\n          copyMembers(older, newer);\r\n          merged = <DeclaredElement>newer;\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          copyMembers(newer, older);\r\n          merged = <DeclaredElement>older;\r\n          break;\r\n        }\r\n        case ElementKind.TYPEDEFINITION: {\r\n          if (!older.shadowType) {\r\n            older.shadowType = <TypeDefinition>newer;\r\n            copyMembers(newer, older);\r\n            merged = <DeclaredElement>older;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.GLOBAL: {\r\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\r\n        if (!older.shadowType) {\r\n          older.shadowType = <TypeDefinition>newer;\r\n          copyMembers(newer, older);\r\n          merged = <DeclaredElement>older;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.TYPEDEFINITION: {\r\n      switch (newer.kind) {\r\n        case ElementKind.GLOBAL:\r\n        case ElementKind.FUNCTION_PROTOTYPE:\r\n        case ElementKind.NAMESPACE: {\r\n          if (!newer.shadowType) {\r\n            newer.shadowType = <TypeDefinition>older;\r\n            copyMembers(older, newer);\r\n            merged = <DeclaredElement>newer;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  if (merged) {\r\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\r\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\r\n    if (olderIsExport != newerIsExport) {\r\n      older.program.error(\r\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\r\n        merged.identifierNode.range, merged.identifierNode.text\r\n      );\r\n    }\r\n  }\r\n  return merged;\r\n}\r\n\r\n/** Copies the members of `src` to `dest`. */\r\nfunction copyMembers(src: Element, dest: Element): void {\r\n  var srcMembers = src.members;\r\n  if (srcMembers) {\r\n    let destMembers = dest.members;\r\n    if (!destMembers) dest.members = destMembers = new Map();\r\n    for (let [memberName, member] of srcMembers) {\r\n      destMembers.set(memberName, member);\r\n    }\r\n  }\r\n}\r\n\r\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\r\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\r\n  switch (parent.kind) {\r\n    case ElementKind.FILE: {\r\n      if (asGlobal) return name;\r\n      return parent.internalName + PATH_DELIMITER + name;\r\n    }\r\n    case ElementKind.FUNCTION: {\r\n      if (asGlobal) return name;\r\n      assert(!isInstance);\r\n      return parent.internalName + INNER_DELIMITER + name;\r\n    }\r\n    default: {\r\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\r\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\r\n    }\r\n  }\r\n}\r\n","/**\r\n * A thin wrapper around Binaryen's C-API.\r\n * @module module\r\n *//***/\r\n\r\nimport { Target } from \"./common\";\r\n\r\nexport type ModuleRef = usize;\r\nexport type FunctionTypeRef = usize;\r\nexport type FunctionRef = usize;\r\nexport type ExpressionRef = usize;\r\nexport type GlobalRef = usize;\r\nexport type ImportRef = usize;\r\nexport type ExportRef = usize;\r\nexport type RelooperRef = usize;\r\nexport type RelooperBlockRef = usize;\r\nexport type Index = u32;\r\n\r\nexport enum NativeType {\r\n  None = _BinaryenTypeNone(),\r\n  I32  = _BinaryenTypeInt32(),\r\n  I64  = _BinaryenTypeInt64(),\r\n  F32  = _BinaryenTypeFloat32(),\r\n  F64  = _BinaryenTypeFloat64(),\r\n  V128 = _BinaryenTypeVec128(),\r\n  Unreachable = _BinaryenTypeUnreachable(),\r\n  Auto = _BinaryenTypeAuto()\r\n}\r\n\r\nexport enum FeatureFlags {\r\n  Atomics = _BinaryenFeatureAtomics(),\r\n  MutableGloabls = _BinaryenFeatureMutableGlobals(),\r\n  NontrappingFPToInt = _BinaryenFeatureNontrappingFPToInt(),\r\n  SIMD128 = _BinaryenFeatureSIMD128(),\r\n  BulkMemory = _BinaryenFeatureBulkMemory(),\r\n  SignExt = _BinaryenFeatureSignExt(),\r\n  ExceptionHandling = _BinaryenFeatureExceptionHandling()\r\n}\r\n\r\nexport enum ExpressionId {\r\n  Invalid = _BinaryenInvalidId(),\r\n  Block = _BinaryenBlockId(),\r\n  If = _BinaryenIfId(),\r\n  Loop = _BinaryenLoopId(),\r\n  Break = _BinaryenBreakId(),\r\n  Switch = _BinaryenSwitchId(),\r\n  Call = _BinaryenCallId(),\r\n  CallIndirect = _BinaryenCallIndirectId(),\r\n  LocalGet = _BinaryenLocalGetId(),\r\n  LocalSet = _BinaryenLocalSetId(),\r\n  GlobalGet = _BinaryenGlobalGetId(),\r\n  GlobalSet = _BinaryenGlobalSetId(),\r\n  Load = _BinaryenLoadId(),\r\n  Store = _BinaryenStoreId(),\r\n  Const = _BinaryenConstId(),\r\n  Unary = _BinaryenUnaryId(),\r\n  Binary = _BinaryenBinaryId(),\r\n  Select = _BinaryenSelectId(),\r\n  Drop = _BinaryenDropId(),\r\n  Return = _BinaryenReturnId(),\r\n  Host = _BinaryenHostId(),\r\n  Nop = _BinaryenNopId(),\r\n  Unreachable = _BinaryenUnreachableId(),\r\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\r\n  AtomicRMW = _BinaryenAtomicRMWId(),\r\n  AtomicWait = _BinaryenAtomicWaitId(),\r\n  AtomicNotify = _BinaryenAtomicNotifyId(),\r\n  SIMDExtract = _BinaryenSIMDExtractId(),\r\n  SIMDReplace = _BinaryenSIMDReplaceId(),\r\n  SIMDShuffle = _BinaryenSIMDShuffleId(),\r\n  SIMDBitselect = _BinaryenSIMDBitselectId(),\r\n  SIMDShift = _BinaryenSIMDShiftId(),\r\n  MemoryInit = _BinaryenMemoryInitId(),\r\n  DataDrop = _BinaryenDataDropId(),\r\n  MemoryCopy = _BinaryenMemoryCopyId(),\r\n  MemoryFill = _BinaryenMemoryFillId()\r\n}\r\n\r\nexport enum UnaryOp {\r\n  ClzI32 = _BinaryenClzInt32(),\r\n  CtzI32 = _BinaryenCtzInt32(),\r\n  PopcntI32 = _BinaryenPopcntInt32(),\r\n  NegF32 = _BinaryenNegFloat32(),\r\n  AbsF32 = _BinaryenAbsFloat32(),\r\n  CeilF32 = _BinaryenCeilFloat32(),\r\n  FloorF32 = _BinaryenFloorFloat32(),\r\n  TruncF32 = _BinaryenTruncFloat32(),\r\n  NearestF32 = _BinaryenNearestFloat32(),\r\n  SqrtF32 = _BinaryenSqrtFloat32(),\r\n  EqzI32 = _BinaryenEqZInt32(),\r\n  ClzI64 = _BinaryenClzInt64(),\r\n  CtzI64 = _BinaryenCtzInt64(),\r\n  PopcntI64 = _BinaryenPopcntInt64(),\r\n  NegF64 = _BinaryenNegFloat64(),\r\n  AbsF64 = _BinaryenAbsFloat64(),\r\n  CeilF64 = _BinaryenCeilFloat64(),\r\n  FloorF64 = _BinaryenFloorFloat64(),\r\n  TruncF64 = _BinaryenTruncFloat64(),\r\n  NearestF64 = _BinaryenNearestFloat64(),\r\n  SqrtF64 = _BinaryenSqrtFloat64(),\r\n  EqzI64 = _BinaryenEqZInt64(),\r\n  ExtendI32 = _BinaryenExtendSInt32(),\r\n  ExtendU32 = _BinaryenExtendUInt32(),\r\n  WrapI64 = _BinaryenWrapInt64(),\r\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\r\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\r\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\r\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\r\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\r\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\r\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\r\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\r\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\r\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\r\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\r\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\r\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\r\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\r\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\r\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\r\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\r\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\r\n  PromoteF32 = _BinaryenPromoteFloat32(),\r\n  DemoteF64 = _BinaryenDemoteFloat64(),\r\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\r\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\r\n\r\n  // see: https://github.com/WebAssembly/sign-extension-ops\r\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\r\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\r\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\r\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\r\n  ExtendI32ToI64 = _BinaryenExtendS32Int64(),\r\n\r\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\r\n  // TruncF32ToI32Sat\r\n  // TruncF32ToU32Sat\r\n  // TruncF64ToI32Sat\r\n  // TruncF64ToU32Sat\r\n  // TruncF32ToI64Sat\r\n  // TruncF32ToU64Sat\r\n  // TruncF64ToI64Sat\r\n  // TruncF64ToU64Sat\r\n\r\n  // see: https://github.com/WebAssembly/simd\r\n  SplatVecI8x16 = _BinaryenSplatVecI8x16(),\r\n  SplatVecI16x8 = _BinaryenSplatVecI16x8(),\r\n  SplatVecI32x4 = _BinaryenSplatVecI32x4(),\r\n  SplatVecI64x2 = _BinaryenSplatVecI64x2(),\r\n  SplatVecF32x4 = _BinaryenSplatVecF32x4(),\r\n  SplatVecF64x2 = _BinaryenSplatVecF64x2(),\r\n  NotVec128 = _BinaryenNotVec128(),\r\n  NegVecI8x16 = _BinaryenNegVecI8x16(),\r\n  AnyTrueVecI8x16 = _BinaryenAnyTrueVecI8x16(),\r\n  AllTrueVecI8x16 = _BinaryenAllTrueVecI8x16(),\r\n  NegVecI16x8 = _BinaryenNegVecI16x8(),\r\n  AnyTrueVecI16x8 = _BinaryenAnyTrueVecI16x8(),\r\n  AllTrueVecI16x8 = _BinaryenAllTrueVecI16x8(),\r\n  NegVecI32x4 = _BinaryenNegVecI32x4(),\r\n  AnyTrueVecI32x4 = _BinaryenAnyTrueVecI32x4(),\r\n  AllTrueVecI32x4 = _BinaryenAllTrueVecI32x4(),\r\n  NegVecI64x2 = _BinaryenNegVecI64x2(),\r\n  AnyTrueVecI64x2 = _BinaryenAnyTrueVecI64x2(),\r\n  AllTrueVecI64x2 = _BinaryenAllTrueVecI64x2(),\r\n  AbsVecF32x4 = _BinaryenAbsVecF32x4(),\r\n  NegVecF32x4 = _BinaryenNegVecF32x4(),\r\n  SqrtVecF32x4 = _BinaryenSqrtVecF32x4(),\r\n  AbsVecF64x2 = _BinaryenAbsVecF64x2(),\r\n  NegVecF64x2 = _BinaryenNegVecF64x2(),\r\n  SqrtVecF64x2 = _BinaryenSqrtVecF64x2(),\r\n  TruncSatSVecF32x4ToVecI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\r\n  TruncSatUVecF32x4ToVecI32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\r\n  TruncSatSVecF64x2ToVecI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\r\n  TruncSatUVecF64x2ToVecI64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\r\n  ConvertSVecI32x4ToVecF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\r\n  ConvertUVecI32x4ToVecF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\r\n  ConvertSVecI64x2ToVecF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\r\n  ConvertUVecI64x2ToVecF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2()\r\n}\r\n\r\nexport enum BinaryOp {\r\n  AddI32 = _BinaryenAddInt32(),\r\n  SubI32 = _BinaryenSubInt32(),\r\n  MulI32 = _BinaryenMulInt32(),\r\n  DivI32 = _BinaryenDivSInt32(),\r\n  DivU32 = _BinaryenDivUInt32(),\r\n  RemI32 = _BinaryenRemSInt32(),\r\n  RemU32 = _BinaryenRemUInt32(),\r\n  AndI32 = _BinaryenAndInt32(),\r\n  OrI32 = _BinaryenOrInt32(),\r\n  XorI32 = _BinaryenXorInt32(),\r\n  ShlI32 = _BinaryenShlInt32(),\r\n  ShrU32 = _BinaryenShrUInt32(),\r\n  ShrI32 = _BinaryenShrSInt32(),\r\n  RotlI32 = _BinaryenRotLInt32(),\r\n  RotrI32 = _BinaryenRotRInt32(),\r\n  EqI32 = _BinaryenEqInt32(),\r\n  NeI32 = _BinaryenNeInt32(),\r\n  LtI32 = _BinaryenLtSInt32(),\r\n  LtU32 = _BinaryenLtUInt32(),\r\n  LeI32 = _BinaryenLeSInt32(),\r\n  LeU32 = _BinaryenLeUInt32(),\r\n  GtI32 = _BinaryenGtSInt32(),\r\n  GtU32 = _BinaryenGtUInt32(),\r\n  GeI32 = _BinaryenGeSInt32(),\r\n  GeU32 = _BinaryenGeUInt32(),\r\n  AddI64 = _BinaryenAddInt64(),\r\n  SubI64 = _BinaryenSubInt64(),\r\n  MulI64 = _BinaryenMulInt64(),\r\n  DivI64 = _BinaryenDivSInt64(),\r\n  DivU64 = _BinaryenDivUInt64(),\r\n  RemI64 = _BinaryenRemSInt64(),\r\n  RemU64 = _BinaryenRemUInt64(),\r\n  AndI64 = _BinaryenAndInt64(),\r\n  OrI64 = _BinaryenOrInt64(),\r\n  XorI64 = _BinaryenXorInt64(),\r\n  ShlI64 = _BinaryenShlInt64(),\r\n  ShrU64 = _BinaryenShrUInt64(),\r\n  ShrI64 = _BinaryenShrSInt64(),\r\n  RotlI64 = _BinaryenRotLInt64(),\r\n  RotrI64 = _BinaryenRotRInt64(),\r\n  EqI64 = _BinaryenEqInt64(),\r\n  NeI64 = _BinaryenNeInt64(),\r\n  LtI64 = _BinaryenLtSInt64(),\r\n  LtU64 = _BinaryenLtUInt64(),\r\n  LeI64 = _BinaryenLeSInt64(),\r\n  LeU64 = _BinaryenLeUInt64(),\r\n  GtI64 = _BinaryenGtSInt64(),\r\n  GtU64 = _BinaryenGtUInt64(),\r\n  GeI64 = _BinaryenGeSInt64(),\r\n  GeU64 = _BinaryenGeUInt64(),\r\n  AddF32 = _BinaryenAddFloat32(),\r\n  SubF32 = _BinaryenSubFloat32(),\r\n  MulF32 = _BinaryenMulFloat32(),\r\n  DivF32 = _BinaryenDivFloat32(),\r\n  CopysignF32 = _BinaryenCopySignFloat32(),\r\n  MinF32 = _BinaryenMinFloat32(),\r\n  MaxF32 = _BinaryenMaxFloat32(),\r\n  EqF32 = _BinaryenEqFloat32(),\r\n  NeF32 = _BinaryenNeFloat32(),\r\n  LtF32 = _BinaryenLtFloat32(),\r\n  LeF32 = _BinaryenLeFloat32(),\r\n  GtF32 = _BinaryenGtFloat32(),\r\n  GeF32 = _BinaryenGeFloat32(),\r\n  AddF64 = _BinaryenAddFloat64(),\r\n  SubF64 = _BinaryenSubFloat64(),\r\n  MulF64 = _BinaryenMulFloat64(),\r\n  DivF64 = _BinaryenDivFloat64(),\r\n  CopysignF64 = _BinaryenCopySignFloat64(),\r\n  MinF64 = _BinaryenMinFloat64(),\r\n  MaxF64 = _BinaryenMaxFloat64(),\r\n  EqF64 = _BinaryenEqFloat64(),\r\n  NeF64 = _BinaryenNeFloat64(),\r\n  LtF64 = _BinaryenLtFloat64(),\r\n  LeF64 = _BinaryenLeFloat64(),\r\n  GtF64 = _BinaryenGtFloat64(),\r\n  GeF64 = _BinaryenGeFloat64(),\r\n\r\n  // see: https://github.com/WebAssembly/simd\r\n  EqVecI8x16 = _BinaryenEqVecI8x16(),\r\n  NeVecI8x16 = _BinaryenNeVecI8x16(),\r\n  LtSVecI8x16 = _BinaryenLtSVecI8x16(),\r\n  LtUVecI8x16 = _BinaryenLtUVecI8x16(),\r\n  LeSVecI8x16 = _BinaryenLeSVecI8x16(),\r\n  LeUVecI8x16 = _BinaryenLeUVecI8x16(),\r\n  GtSVecI8x16 = _BinaryenGtSVecI8x16(),\r\n  GtUVecI8x16 = _BinaryenGtUVecI8x16(),\r\n  GeSVecI8x16 = _BinaryenGeSVecI8x16(),\r\n  GeUVecI8x16 = _BinaryenGeUVecI8x16(),\r\n  EqVecI16x8 = _BinaryenEqVecI16x8(),\r\n  NeVecI16x8 = _BinaryenNeVecI16x8(),\r\n  LtSVecI16x8 = _BinaryenLtSVecI16x8(),\r\n  LtUVecI16x8 = _BinaryenLtUVecI16x8(),\r\n  LeSVecI16x8 = _BinaryenLeSVecI16x8(),\r\n  LeUVecI16x8 = _BinaryenLeUVecI16x8(),\r\n  GtSVecI16x8 = _BinaryenGtSVecI16x8(),\r\n  GtUVecI16x8 = _BinaryenGtUVecI16x8(),\r\n  GeSVecI16x8 = _BinaryenGeSVecI16x8(),\r\n  GeUVecI16x8 = _BinaryenGeUVecI16x8(),\r\n  EqVecI32x4 = _BinaryenEqVecI32x4(),\r\n  NeVecI32x4 = _BinaryenNeVecI32x4(),\r\n  LtSVecI32x4 = _BinaryenLtSVecI32x4(),\r\n  LtUVecI32x4 = _BinaryenLtUVecI32x4(),\r\n  LeSVecI32x4 = _BinaryenLeSVecI32x4(),\r\n  LeUVecI32x4 = _BinaryenLeUVecI32x4(),\r\n  GtSVecI32x4 = _BinaryenGtSVecI32x4(),\r\n  GtUVecI32x4 = _BinaryenGtUVecI32x4(),\r\n  GeSVecI32x4 = _BinaryenGeSVecI32x4(),\r\n  GeUVecI32x4 = _BinaryenGeUVecI32x4(),\r\n  EqVecF32x4 = _BinaryenEqVecF32x4(),\r\n  NeVecF32x4 = _BinaryenNeVecF32x4(),\r\n  LtVecF32x4 = _BinaryenLtVecF32x4(),\r\n  LeVecF32x4 = _BinaryenLeVecF32x4(),\r\n  GtVecF32x4 = _BinaryenGtVecF32x4(),\r\n  GeVecF32x4 = _BinaryenGeVecF32x4(),\r\n  EqVecF64x2 = _BinaryenEqVecF64x2(),\r\n  NeVecF64x2 = _BinaryenNeVecF64x2(),\r\n  LtVecF64x2 = _BinaryenLtVecF64x2(),\r\n  LeVecF64x2 = _BinaryenLeVecF64x2(),\r\n  GtVecF64x2 = _BinaryenGtVecF64x2(),\r\n  GeVecF64x2 = _BinaryenGeVecF64x2(),\r\n  AndVec128 = _BinaryenAndVec128(),\r\n  OrVec128 = _BinaryenOrVec128(),\r\n  XorVec128 = _BinaryenXorVec128(),\r\n  AddVecI8x16 = _BinaryenAddVecI8x16(),\r\n  AddSatSVecI8x16 = _BinaryenAddSatSVecI8x16(),\r\n  AddSatUVecI8x16 = _BinaryenAddSatUVecI8x16(),\r\n  SubVecI8x16 = _BinaryenSubVecI8x16(),\r\n  SubSatSVecI8x16 = _BinaryenSubSatSVecI8x16(),\r\n  SubSatUVecI8x16 = _BinaryenSubSatUVecI8x16(),\r\n  MulVecI8x16 = _BinaryenMulVecI8x16(),\r\n  AddVecI16x8 = _BinaryenAddVecI16x8(),\r\n  AddSatSVecI16x8 = _BinaryenAddSatSVecI16x8(),\r\n  AddSatUVecI16x8 = _BinaryenAddSatUVecI16x8(),\r\n  SubVecI16x8 = _BinaryenSubVecI16x8(),\r\n  SubSatSVecI16x8 = _BinaryenSubSatSVecI16x8(),\r\n  SubSatUVecI16x8 = _BinaryenSubSatUVecI16x8(),\r\n  MulVecI16x8 = _BinaryenMulVecI16x8(),\r\n  AddVecI32x4 = _BinaryenAddVecI32x4(),\r\n  SubVecI32x4 = _BinaryenSubVecI32x4(),\r\n  MulVecI32x4 = _BinaryenMulVecI32x4(),\r\n  AddVecI64x2 = _BinaryenAddVecI64x2(),\r\n  SubVecI64x2 = _BinaryenSubVecI64x2(),\r\n  AddVecF32x4 = _BinaryenAddVecF32x4(),\r\n  SubVecF32x4 = _BinaryenSubVecF32x4(),\r\n  MulVecF32x4 = _BinaryenMulVecF32x4(),\r\n  DivVecF32x4 = _BinaryenDivVecF32x4(),\r\n  MinVecF32x4 = _BinaryenMinVecF32x4(),\r\n  MaxVecF32x4 = _BinaryenMaxVecF32x4(),\r\n  AddVecF64x2 = _BinaryenAddVecF64x2(),\r\n  SubVecF64x2 = _BinaryenSubVecF64x2(),\r\n  MulVecF64x2 = _BinaryenMulVecF64x2(),\r\n  DivVecF64x2 = _BinaryenDivVecF64x2(),\r\n  MinVecF64x2 = _BinaryenMinVecF64x2(),\r\n  MaxVecF64x2 = _BinaryenMaxVecF64x2()\r\n}\r\n\r\nexport enum HostOp {\r\n  MemorySize = _BinaryenMemorySize(),\r\n  MemoryGrow = _BinaryenMemoryGrow(),\r\n}\r\n\r\nexport enum AtomicRMWOp {\r\n  Add = _BinaryenAtomicRMWAdd(),\r\n  Sub = _BinaryenAtomicRMWSub(),\r\n  And = _BinaryenAtomicRMWAnd(),\r\n  Or = _BinaryenAtomicRMWOr(),\r\n  Xor = _BinaryenAtomicRMWXor(),\r\n  Xchg = _BinaryenAtomicRMWXchg()\r\n}\r\n\r\nexport enum SIMDExtractOp {\r\n  ExtractLaneSVecI8x16 = _BinaryenExtractLaneSVecI8x16(),\r\n  ExtractLaneUVecI8x16 = _BinaryenExtractLaneUVecI8x16(),\r\n  ExtractLaneSVecI16x8 = _BinaryenExtractLaneSVecI16x8(),\r\n  ExtractLaneUVecI16x8 = _BinaryenExtractLaneUVecI16x8(),\r\n  ExtractLaneVecI32x4 = _BinaryenExtractLaneVecI32x4(),\r\n  ExtractLaneVecI64x2 = _BinaryenExtractLaneVecI64x2(),\r\n  ExtractLaneVecF32x4 = _BinaryenExtractLaneVecF32x4(),\r\n  ExtractLaneVecF64x2 = _BinaryenExtractLaneVecF64x2(),\r\n}\r\n\r\nexport enum SIMDReplaceOp {\r\n  ReplaceLaneVecI8x16 = _BinaryenReplaceLaneVecI8x16(),\r\n  ReplaceLaneVecI16x8 = _BinaryenReplaceLaneVecI16x8(),\r\n  ReplaceLaneVecI32x4 = _BinaryenReplaceLaneVecI32x4(),\r\n  ReplaceLaneVecI64x2 = _BinaryenReplaceLaneVecI64x2(),\r\n  ReplaceLaneVecF32x4 = _BinaryenReplaceLaneVecF32x4(),\r\n  ReplaceLaneVecF64x2 = _BinaryenReplaceLaneVecF64x2()\r\n}\r\n\r\nexport enum SIMDShiftOp {\r\n  ShlVecI8x16 = _BinaryenShlVecI8x16(),\r\n  ShrSVecI8x16 = _BinaryenShrSVecI8x16(),\r\n  ShrUVecI8x16 = _BinaryenShrUVecI8x16(),\r\n  ShlVecI16x8 = _BinaryenShlVecI16x8(),\r\n  ShrSVecI16x8 = _BinaryenShrSVecI16x8(),\r\n  ShrUVecI16x8 = _BinaryenShrUVecI16x8(),\r\n  ShlVecI32x4 = _BinaryenShlVecI32x4(),\r\n  ShrSVecI32x4 = _BinaryenShrSVecI32x4(),\r\n  ShrUVecI32x4 = _BinaryenShrUVecI32x4(),\r\n  ShlVecI64x2 = _BinaryenShlVecI64x2(),\r\n  ShrSVecI64x2 = _BinaryenShrSVecI64x2(),\r\n  ShrUVecI64x2 = _BinaryenShrUVecI64x2()\r\n}\r\n\r\nexport class MemorySegment {\r\n\r\n  buffer: Uint8Array;\r\n  offset: I64;\r\n\r\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\r\n    var segment = new MemorySegment();\r\n    segment.buffer = buffer;\r\n    segment.offset = offset;\r\n    return segment;\r\n  }\r\n}\r\n\r\nexport class Module {\r\n\r\n  ref: ModuleRef;\r\n\r\n  private lit: usize;\r\n\r\n  static create(): Module {\r\n    var module = new Module();\r\n    module.ref = _BinaryenModuleCreate();\r\n    module.lit = memory.allocate(_BinaryenSizeofLiteral());\r\n    return module;\r\n  }\r\n\r\n  static createFrom(buffer: Uint8Array): Module {\r\n    var cArr = allocU8Array(buffer);\r\n    try {\r\n      let module = new Module();\r\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\r\n      module.lit = memory.allocate(_BinaryenSizeofLiteral());\r\n      return module;\r\n    } finally {\r\n      memory.free(changetype<usize>(cArr));\r\n    }\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  // types\r\n\r\n  addFunctionType(\r\n    name: string,\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  getFunctionTypeBySignature(\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionTypeRef {\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeFunctionType(name: string): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveFunctionType(this.ref, cStr);\r\n  }\r\n\r\n  // constants\r\n\r\n  i32(value: i32): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralInt32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  f32(value: f32): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralFloat32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  f64(value: f64): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralFloat64(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  v128(bytes: Uint8Array): ExpressionRef {\r\n    assert(bytes.length == 16);\r\n    var out = this.lit;\r\n    for (let i = 0; i < 16; ++i) store<u8>(out + i, bytes[i]);\r\n    _BinaryenLiteralVec128(out, out);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  // expressions\r\n\r\n  unary(\r\n    op: UnaryOp,\r\n    expr: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenUnary(this.ref, op, expr);\r\n  }\r\n\r\n  binary(\r\n    op: BinaryOp,\r\n    left: ExpressionRef,\r\n    right: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenBinary(this.ref, op, left, right);\r\n  }\r\n\r\n  host(\r\n    op: HostOp,\r\n    name: string | null = null,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  local_get(\r\n    index: i32,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenLocalGet(this.ref, index, type);\r\n  }\r\n\r\n  local_tee(\r\n    index: i32,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenLocalTee(this.ref, index, value);\r\n  }\r\n\r\n  global_get(\r\n    name: string,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenGlobalGet(this.ref, cStr, type);\r\n  }\r\n\r\n  load(\r\n    bytes: Index,\r\n    signed: bool,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0,\r\n    align: Index = bytes // naturally aligned by default\r\n  ): ExpressionRef {\r\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\r\n  }\r\n\r\n  store(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0,\r\n    align: Index = bytes // naturally aligned by default\r\n  ): ExpressionRef {\r\n    if (type < NativeType.None || type > NativeType.V128) throw new Error(\"here: \" + type);\r\n    return _BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\r\n  }\r\n\r\n  atomic_load(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\r\n  }\r\n\r\n  atomic_store(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  atomic_rmw(\r\n    op: AtomicRMWOp,\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  atomic_cmpxchg(\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    replacement: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\r\n  }\r\n\r\n  atomic_wait(\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    timeout: ExpressionRef,\r\n    expectedType: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\r\n  }\r\n\r\n  atomic_notify(\r\n    ptr: ExpressionRef,\r\n    notifyCount: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicNotify(this.ref, ptr, notifyCount);\r\n  }\r\n\r\n  // statements\r\n\r\n  local_set(\r\n    index: Index,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenLocalSet(this.ref, index, value);\r\n  }\r\n\r\n  global_set(\r\n    name: string,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenGlobalSet(this.ref, cStr, value);\r\n  }\r\n\r\n  block(\r\n    label: string | null,\r\n    children: ExpressionRef[],\r\n    type: NativeType = NativeType.None\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    var cArr = allocPtrArray(children);\r\n    try {\r\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  br(\r\n    label: string | null,\r\n    condition: ExpressionRef = 0,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    return _BinaryenBreak(this.ref, cStr, condition, value);\r\n  }\r\n\r\n  drop(\r\n    expression: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenDrop(this.ref, expression);\r\n  }\r\n\r\n  loop(\r\n    label: string | null,\r\n    body: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    return _BinaryenLoop(this.ref, cStr, body);\r\n  }\r\n\r\n  if(\r\n    condition: ExpressionRef,\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  nop(): ExpressionRef {\r\n    return _BinaryenNop(this.ref);\r\n  }\r\n\r\n  return(\r\n    expression: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenReturn(this.ref, expression);\r\n  }\r\n\r\n  select(\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef,\r\n    condition: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  switch(\r\n    names: string[],\r\n    defaultName: string | null,\r\n    condition: ExpressionRef,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numNames = names.length;\r\n    var strs = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      strs[i] = this.allocStringCached(names[i]);\r\n    }\r\n    var cArr = allocI32Array(strs);\r\n    var cStr = this.allocStringCached(defaultName);\r\n    try {\r\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  call(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(target);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  call_indirect(\r\n    index: ExpressionRef,\r\n    operands: ExpressionRef[] | null,\r\n    typeName: string\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(typeName);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  unreachable(): ExpressionRef {\r\n    return _BinaryenUnreachable(this.ref);\r\n  }\r\n\r\n  // bulk memory\r\n\r\n  memory_copy(\r\n    dest: ExpressionRef,\r\n    source: ExpressionRef,\r\n    size: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenMemoryCopy(this.ref, dest, source, size);\r\n  }\r\n\r\n  memory_fill(\r\n    dest: ExpressionRef,\r\n    value: ExpressionRef,\r\n    size: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenMemoryFill(this.ref, dest, value, size);\r\n  }\r\n\r\n  // simd\r\n\r\n  simd_extract(\r\n    op: SIMDExtractOp,\r\n    vec: ExpressionRef,\r\n    idx: u8\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDExtract(this.ref, op, vec, idx);\r\n  }\r\n\r\n  simd_replace(\r\n    op: SIMDReplaceOp,\r\n    vec: ExpressionRef,\r\n    idx: u8,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDReplace(this.ref, op, vec, idx, value);\r\n  }\r\n\r\n  simd_shuffle(\r\n    vec1: ExpressionRef,\r\n    vec2: ExpressionRef,\r\n    mask: Uint8Array\r\n  ): ExpressionRef {\r\n    assert(mask.length == 16);\r\n    var cArr = allocU8Array(mask);\r\n    try {\r\n      return _BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  simd_bitselect(\r\n    vec1: ExpressionRef,\r\n    vec2: ExpressionRef,\r\n    cond: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDBitselect(this.ref, vec1, vec2, cond);\r\n  }\r\n\r\n  simd_shift(\r\n    op: SIMDShiftOp,\r\n    vec: ExpressionRef,\r\n    shift: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDShift(this.ref, op, vec, shift);\r\n  }\r\n\r\n  // meta\r\n\r\n  addGlobal(\r\n    name: string,\r\n    type: NativeType,\r\n    mutable: bool,\r\n    initializer: ExpressionRef\r\n  ): GlobalRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\r\n  }\r\n\r\n  removeGlobal(\r\n    name: string\r\n  ): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveGlobal(this.ref, cStr);\r\n  }\r\n\r\n  addFunction(\r\n    name: string,\r\n    type: FunctionTypeRef,\r\n    varTypes: NativeType[] | null,\r\n    body: ExpressionRef\r\n  ): FunctionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocI32Array(varTypes);\r\n    try {\r\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeFunction(name: string): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveFunction(this.ref, cStr);\r\n  }\r\n\r\n  private hasTemporaryFunction: bool = false;\r\n\r\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\r\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\r\n    var tempName = this.allocStringCached(\"\");\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\r\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeTemporaryFunction(): void {\r\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\r\n    var tempName = this.allocStringCached(\"\");\r\n    _BinaryenRemoveFunction(this.ref, tempName);\r\n    _BinaryenRemoveFunctionType(this.ref, tempName);\r\n  }\r\n\r\n  addFunctionExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addTableExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addMemoryExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addGlobalExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  removeExport(externalName: string): void {\r\n    var cStr = this.allocStringCached(externalName);\r\n    _BinaryenRemoveExport(this.ref, cStr);\r\n  }\r\n\r\n  addFunctionImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    functionType: FunctionTypeRef\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\r\n  }\r\n\r\n  addTableImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\r\n  }\r\n\r\n  addMemoryImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    shared: bool = false,\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\r\n  }\r\n\r\n  addGlobalImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    globalType: NativeType\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\r\n  }\r\n\r\n  /** Unlimited memory constant. */\r\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\r\n\r\n  setMemory(\r\n    initial: Index,\r\n    maximum: Index,\r\n    segments: MemorySegment[],\r\n    target: Target,\r\n    exportName: string | null = null,\r\n    shared: bool = false\r\n  ): void {\r\n    var cStr = this.allocStringCached(exportName);\r\n    var k = segments.length;\r\n    var segs = new Array<usize>(k);\r\n    var psvs = new Array<i8>(k);\r\n    var offs = new Array<ExpressionRef>(k);\r\n    var sizs = new Array<Index>(k);\r\n    for (let i = 0; i < k; ++i) {\r\n      let buffer = segments[i].buffer;\r\n      let offset = segments[i].offset;\r\n      segs[i] = allocU8Array(buffer);\r\n      psvs[i] = 0; // no passive segments currently\r\n      offs[i] = target == Target.WASM64\r\n        ? this.i64(i64_low(offset), i64_high(offset))\r\n        : this.i32(i64_low(offset));\r\n      sizs[i] = buffer.length;\r\n    }\r\n    var cArr1 = allocI32Array(segs);\r\n    var cArr2 = allocU8Array(psvs);\r\n    var cArr3 = allocI32Array(offs);\r\n    var cArr4 = allocI32Array(sizs);\r\n    try {\r\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\r\n    } finally {\r\n      memory.free(cArr4);\r\n      memory.free(cArr3);\r\n      memory.free(cArr2);\r\n      memory.free(cArr1);\r\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\r\n    }\r\n  }\r\n\r\n  setFunctionTable(\r\n    initial: Index,\r\n    maximum: Index,\r\n    funcs: string[]\r\n  ): void {\r\n    var numNames = funcs.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = this.allocStringCached(funcs[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  setStart(func: FunctionRef): void {\r\n    _BinaryenSetStart(this.ref, func);\r\n  }\r\n\r\n  getOptimizeLevel(): i32 {\r\n    return _BinaryenGetOptimizeLevel();\r\n  }\r\n\r\n  setOptimizeLevel(level: i32 = 2): void {\r\n    _BinaryenSetOptimizeLevel(level);\r\n  }\r\n\r\n  getShrinkLevel(): i32 {\r\n    return _BinaryenGetShrinkLevel();\r\n  }\r\n\r\n  setShrinkLevel(level: i32 = 1): void {\r\n    _BinaryenSetShrinkLevel(level);\r\n  }\r\n\r\n  setDebugInfo(on: bool = false): void {\r\n    _BinaryenSetDebugInfo(on);\r\n  }\r\n\r\n  getFeatures(): BinaryenFeatureFlags {\r\n    return _BinaryenModuleGetFeatures(this.ref);\r\n  }\r\n\r\n  setFeatures(featureFlags: BinaryenFeatureFlags): void {\r\n    _BinaryenModuleSetFeatures(this.ref, featureFlags);\r\n  }\r\n\r\n  optimize(func: FunctionRef = 0): void {\r\n    if (func) {\r\n      _BinaryenFunctionOptimize(func, this.ref);\r\n    } else {\r\n      _BinaryenModuleOptimize(this.ref);\r\n    }\r\n  }\r\n\r\n  runPasses(passes: string[], func: FunctionRef = 0): void {\r\n    var numNames = passes.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = allocString(passes[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      if (func) {\r\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\r\n      } else {\r\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\r\n      }\r\n    } finally {\r\n      memory.free(cArr);\r\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\r\n    }\r\n  }\r\n\r\n  private cachedPrecomputeNames: usize = 0;\r\n\r\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\r\n    // remember the previous optimize levels and set to max instead, to be sure\r\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\r\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\r\n    var previousDebugInfo = _BinaryenGetDebugInfo();\r\n    _BinaryenSetOptimizeLevel(4);\r\n    _BinaryenSetShrinkLevel(0);\r\n    _BinaryenSetDebugInfo(false);\r\n\r\n    // wrap the expression in a temp. function and run the precompute pass on it\r\n    var type = _BinaryenExpressionGetType(expr);\r\n    var func = this.addTemporaryFunction(type, null, expr);\r\n    var names = this.cachedPrecomputeNames;\r\n    if (!names) {\r\n      this.cachedPrecomputeNames = names = allocI32Array([ this.allocStringCached(\"precompute\") ]);\r\n    }\r\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\r\n    expr = _BinaryenFunctionGetBody(func);\r\n    this.removeTemporaryFunction();\r\n\r\n    // reset optimize levels to previous\r\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\r\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\r\n    _BinaryenSetDebugInfo(previousDebugInfo);\r\n    return expr;\r\n  }\r\n\r\n  validate(): bool {\r\n    return _BinaryenModuleValidate(this.ref) == 1;\r\n  }\r\n\r\n  interpret(): void {\r\n    _BinaryenModuleInterpret(this.ref);\r\n  }\r\n\r\n  toBinary(sourceMapUrl: string | null): BinaryModule {\r\n    var out = this.lit; // safe to reuse as long as..\r\n    assert(_BinaryenSizeofLiteral() >= 12);\r\n    var cStr = allocString(sourceMapUrl);\r\n    var binaryPtr: usize = 0;\r\n    var sourceMapPtr: usize = 0;\r\n    try {\r\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\r\n      binaryPtr = readInt(out);\r\n      let binaryBytes = readInt(out + 4);\r\n      sourceMapPtr = readInt(out + 4 * 2);\r\n      let ret = new BinaryModule();\r\n      ret.output = readBuffer(binaryPtr, binaryBytes);\r\n      ret.sourceMap = readString(sourceMapPtr);\r\n      return ret;\r\n    } finally {\r\n      if (cStr) memory.free(cStr);\r\n      if (binaryPtr) memory.free(binaryPtr);\r\n      if (sourceMapPtr) memory.free(sourceMapPtr);\r\n    }\r\n  }\r\n\r\n  toText(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  toAsmjs(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  private cachedStrings: Map<string,usize> = new Map();\r\n\r\n  private allocStringCached(str: string | null): usize {\r\n    if (str == null) return 0;\r\n    var cachedStrings = this.cachedStrings;\r\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\r\n    var ptr = allocString(str);\r\n    cachedStrings.set(str, ptr);\r\n    return ptr;\r\n  }\r\n\r\n  dispose(): void {\r\n    assert(this.ref);\r\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\r\n    this.cachedStrings = new Map();\r\n    memory.free(this.lit);\r\n    memory.free(this.cachedPrecomputeNames);\r\n    this.cachedPrecomputeNames = 0;\r\n    _BinaryenModuleDispose(this.ref);\r\n    this.ref = 0;\r\n  }\r\n\r\n  createRelooper(): Relooper {\r\n    return Relooper.create(this);\r\n  }\r\n\r\n  cloneExpression(\r\n    expr: ExpressionRef,\r\n    noSideEffects: bool = false,\r\n    maxDepth: i32 = i32.MAX_VALUE\r\n  ): ExpressionRef { // currently supports side effect free expressions only\r\n    if (maxDepth < 0) return 0;\r\n    maxDepth -= 1;\r\n\r\n    var nested1: ExpressionRef,\r\n        nested2: ExpressionRef;\r\n\r\n        switch (_BinaryenExpressionGetId(expr)) {\r\n      case ExpressionId.Const: {\r\n        switch (_BinaryenExpressionGetType(expr)) {\r\n          case NativeType.I32: {\r\n            return this.i32(_BinaryenConstGetValueI32(expr));\r\n          }\r\n          case NativeType.I64: {\r\n            return this.i64(\r\n              _BinaryenConstGetValueI64Low(expr),\r\n              _BinaryenConstGetValueI64High(expr)\r\n            );\r\n          }\r\n          case NativeType.F32: {\r\n            return this.f32(_BinaryenConstGetValueF32(expr));\r\n          }\r\n          case NativeType.F64: {\r\n            return this.f64(_BinaryenConstGetValueF64(expr));\r\n          }\r\n          case NativeType.V128: {\r\n            // TODO\r\n            return 0;\r\n          }\r\n          default: {\r\n            throw new Error(\"concrete type expected\");\r\n          }\r\n        }\r\n      }\r\n      case ExpressionId.LocalGet: {\r\n        return _BinaryenLocalGet(this.ref,\r\n          _BinaryenLocalGetGetIndex(expr),\r\n          _BinaryenExpressionGetType(expr)\r\n        );\r\n      }\r\n      case ExpressionId.GlobalGet: {\r\n        let globalName = _BinaryenGlobalGetGetName(expr);\r\n        if (!globalName) break;\r\n        return _BinaryenGlobalGet(this.ref, globalName, _BinaryenExpressionGetType(expr));\r\n      }\r\n      case ExpressionId.Load: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return (\r\n          _BinaryenLoadIsAtomic(expr)\r\n            ? _BinaryenAtomicLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n            : _BinaryenLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenLoadGetAlign(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n        );\r\n      }\r\n      case ExpressionId.Unary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\r\n      }\r\n      case ExpressionId.Binary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // source map generation\r\n\r\n  addDebugInfoFile(name: string): Index {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  getDebugInfoFile(index: Index): string | null {\r\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\r\n  }\r\n\r\n  setDebugLocation(\r\n    func: FunctionRef,\r\n    expr: ExpressionRef,\r\n    fileIndex: Index,\r\n    lineNumber: Index,\r\n    columnNumber: Index\r\n  ): void {\r\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\r\n  }\r\n}\r\n\r\n// expressions\r\n\r\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\r\n  return _BinaryenExpressionGetId(expr);\r\n}\r\n\r\nexport function getExpressionType(expr: ExpressionRef): NativeType {\r\n  return _BinaryenExpressionGetType(expr);\r\n}\r\n\r\nexport function getConstValueI32(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI32(expr);\r\n}\r\n\r\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64Low(expr);\r\n}\r\n\r\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64High(expr);\r\n}\r\n\r\nexport function getConstValueF32(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF32(expr);\r\n}\r\n\r\nexport function getConstValueF64(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF64(expr);\r\n}\r\n\r\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenLocalGetGetIndex(expr);\r\n}\r\n\r\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenLocalSetGetIndex(expr);\r\n}\r\n\r\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLocalSetGetValue(expr);\r\n}\r\n\r\nexport function isLocalTee(expr: ExpressionRef): bool {\r\n  return _BinaryenLocalSetIsTee(expr);\r\n}\r\n\r\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenGlobalGetGetName(expr));\r\n}\r\n\r\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\r\n  return _BinaryenBinaryGetOp(expr);\r\n}\r\n\r\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetLeft(expr);\r\n}\r\n\r\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetRight(expr);\r\n}\r\n\r\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\r\n  return _BinaryenUnaryGetOp(expr);\r\n}\r\n\r\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenUnaryGetValue(expr);\r\n}\r\n\r\nexport function getLoadBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetBytes(expr);\r\n}\r\n\r\nexport function getLoadOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetOffset(expr);\r\n}\r\n\r\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoadGetPtr(expr);\r\n}\r\n\r\nexport function isLoadSigned(expr: ExpressionRef): bool {\r\n  return _BinaryenLoadIsSigned(expr);\r\n}\r\n\r\nexport function getStoreBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetBytes(expr);\r\n}\r\n\r\nexport function getStoreOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetOffset(expr);\r\n}\r\n\r\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetPtr(expr);\r\n}\r\n\r\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetValue(expr);\r\n}\r\n\r\nexport function getBlockName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBlockGetName(expr));\r\n}\r\n\r\nexport function getBlockChildCount(expr: ExpressionRef): Index {\r\n  return _BinaryenBlockGetNumChildren(expr);\r\n}\r\n\r\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenBlockGetChild(expr, index);\r\n}\r\n\r\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetCondition(expr);\r\n}\r\n\r\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfTrue(expr);\r\n}\r\n\r\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfFalse(expr);\r\n}\r\n\r\nexport function getLoopName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenLoopGetName(expr));\r\n}\r\n\r\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoopGetBody(expr);\r\n}\r\n\r\nexport function getBreakName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBreakGetName(expr));\r\n}\r\n\r\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBreakGetCondition(expr);\r\n}\r\n\r\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfTrue(expr);\r\n}\r\n\r\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfFalse(expr);\r\n}\r\n\r\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetCondition(expr);\r\n}\r\n\r\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenDropGetValue(expr);\r\n}\r\n\r\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenReturnGetValue(expr);\r\n}\r\n\r\nexport function getCallTarget(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenCallGetTarget(expr));\r\n}\r\n\r\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\r\n  return _BinaryenCallGetNumOperands(expr);\r\n}\r\n\r\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenCallGetOperand(expr, index);\r\n}\r\n\r\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenHostGetOp(expr);\r\n}\r\n\r\nexport function getHostOperandCount(expr: ExpressionRef): Index {\r\n  return _BinaryenHostGetNumOperands(expr);\r\n}\r\n\r\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenHostGetOperand(expr, index);\r\n}\r\n\r\nexport function getHostName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenHostGetNameOperand(expr));\r\n}\r\n\r\n// functions\r\n\r\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\r\n  return _BinaryenFunctionGetBody(func);\r\n}\r\n\r\nexport function getFunctionName(func: FunctionRef): string | null {\r\n  return readString(_BinaryenFunctionGetName(func));\r\n}\r\n\r\nexport function getFunctionParamCount(func: FunctionRef): Index {\r\n  return _BinaryenFunctionGetNumParams(func);\r\n}\r\n\r\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\r\n  return _BinaryenFunctionGetParam(func, index);\r\n}\r\n\r\nexport function getFunctionResultType(func: FunctionRef): NativeType {\r\n  return _BinaryenFunctionGetResult(func);\r\n}\r\n\r\nexport class Relooper {\r\n\r\n  module: Module;\r\n  ref: RelooperRef;\r\n\r\n  static create(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = _RelooperCreate(module.ref);\r\n    return relooper;\r\n  }\r\n\r\n  private constructor() {}\r\n\r\n  addBlock(code: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlock(this.ref, code);\r\n  }\r\n\r\n  addBranch(\r\n    from: RelooperBlockRef,\r\n    to: RelooperBlockRef,\r\n    condition: ExpressionRef = 0,\r\n    code: ExpressionRef = 0\r\n  ): void {\r\n    _RelooperAddBranch(from, to, condition, code);\r\n  }\r\n\r\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\r\n  }\r\n\r\n  addBranchForSwitch(\r\n    from: RelooperBlockRef,\r\n    to: RelooperBlockRef,\r\n    indexes: i32[],\r\n    code: ExpressionRef = 0\r\n  ): void {\r\n    var cArr = allocI32Array(indexes);\r\n    try {\r\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\r\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\r\n  }\r\n}\r\n\r\n// export function hasSideEffects(expr: ExpressionRef): bool {\r\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\r\n//     case ExpressionId.GetLocal:\r\n//     case ExpressionId.GetGlobal:\r\n//     case ExpressionId.Const:\r\n//     case ExpressionId.Nop:\r\n//     case ExpressionId.Unreachable: {\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.Block: {\r\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\r\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\r\n//       }\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.If: {\r\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\r\n//     }\r\n//     case ExpressionId.Unary: {\r\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Binary: {\r\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\r\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\r\n//     }\r\n//     case ExpressionId.Drop: {\r\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Select: {\r\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\r\n//     }\r\n//   }\r\n//   return true;\r\n// }\r\n\r\n// helpers\r\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\r\n\r\nfunction allocU8Array(u8s: Uint8Array | null): usize {\r\n  if (!u8s) return 0;\r\n  var numValues = u8s.length;\r\n  var ptr = memory.allocate(numValues);\r\n  var idx = ptr;\r\n  for (let i = 0; i < numValues; ++i) {\r\n    store<u8>(idx++, u8s[i]);\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocI32Array(i32s: i32[] | null): usize {\r\n  if (!i32s) return 0;\r\n  var ptr = memory.allocate(i32s.length << 2);\r\n  var idx = ptr;\r\n  for (let i = 0, k = i32s.length; i < k; ++i) {\r\n    let val = i32s[i];\r\n    // store<i32>(idx, val) is not portable\r\n    store<u8>(idx    , ( val         & 0xff) as u8);\r\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\r\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\r\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\r\n    idx += 4;\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocPtrArray(ptrs: usize[] | null): usize {\r\n  return allocI32Array(ptrs); // TODO: WASM64 one day\r\n}\r\n\r\nfunction stringLengthUTF8(str: string): usize {\r\n  var len = 0;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      ++len;\r\n    } else if (u <= 0x7FF) {\r\n      len += 2;\r\n    } else if (u <= 0xFFFF) {\r\n      len += 3;\r\n    } else if (u <= 0x1FFFFF) {\r\n      len += 4;\r\n    } else if (u <= 0x3FFFFFF) {\r\n      len += 5;\r\n    } else {\r\n      len += 6;\r\n    }\r\n  }\r\n  return len;\r\n}\r\n\r\nfunction allocString(str: string | null): usize {\r\n  if (str == null) return 0;\r\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\r\n  // the following is based on Emscripten's stringToUTF8Array\r\n  var idx = ptr;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      store<u8>(idx++, u as u8);\r\n    } else if (u <= 0x7FF) {\r\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0xFFFF) {\r\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x1FFFFF) {\r\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x3FFFFFF) {\r\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else {\r\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    }\r\n  }\r\n  store<u8>(idx, 0);\r\n  return ptr;\r\n}\r\n\r\nfunction readInt(ptr: usize): i32 {\r\n  return (\r\n     load<u8>(ptr    )        |\r\n    (load<u8>(ptr + 1) <<  8) |\r\n    (load<u8>(ptr + 2) << 16) |\r\n    (load<u8>(ptr + 3) << 24)\r\n  );\r\n}\r\n\r\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\r\n  var ret = new Uint8Array(length);\r\n  for (let i: usize = 0; i < length; ++i) {\r\n    ret[i] = load<u8>(ptr + i);\r\n  }\r\n  return ret;\r\n}\r\n\r\nexport function readString(ptr: usize): string | null {\r\n  if (!ptr) return null;\r\n  var arr = new Array<i32>();\r\n  // the following is based on Emscripten's UTF8ArrayToString\r\n  var cp: u32;\r\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\r\n  while (cp = load<u8>(ptr++)) {\r\n    if (!(cp & 0x80)) {\r\n      arr.push(cp);\r\n      continue;\r\n    }\r\n    u1 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xE0) == 0xC0) {\r\n      arr.push(((cp & 31) << 6) | u1);\r\n      continue;\r\n    }\r\n    u2 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xF0) == 0xE0) {\r\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\r\n    } else {\r\n      u3 = load<u8>(ptr++) & 63;\r\n      if ((cp & 0xF8) == 0xF0) {\r\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\r\n      } else {\r\n        u4 = load<u8>(ptr++) & 63;\r\n        if ((cp & 0xFC) == 0xF8) {\r\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\r\n        } else {\r\n          u5 = load<u8>(ptr++) & 63;\r\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\r\n        }\r\n      }\r\n    }\r\n    arr.push(cp);\r\n    // if (cp < 0x10000) {\r\n    //   arr.push(cp);\r\n    // } else {\r\n    //   var ch = cp - 0x10000;\r\n    //   arr.push(0xD800 | (ch >> 10));\r\n    //   arr.push(0xDC00 | (ch & 0x3FF));\r\n    // }\r\n  }\r\n  // return String.fromCharCodes(arr);\r\n  return String.fromCodePoints(arr);\r\n}\r\n\r\n/** Result structure of {@link Module#toBinary}. */\r\nexport class BinaryModule {\r\n  /** WebAssembly binary. */\r\n  output: Uint8Array;\r\n  /** Source map, if generated. */\r\n  sourceMap: string | null;\r\n}\r\n\r\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\r\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\r\n  // not applicable if pushing a value to the stack\r\n  if (_BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\r\n\r\n  switch (_BinaryenExpressionGetId(expr)) {\r\n    case ExpressionId.Unreachable:\r\n    case ExpressionId.Return: return false;\r\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\r\n    case ExpressionId.Block: {\r\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\r\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\r\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/** Traverses all expression members of an expression, calling the given visitor. */\r\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\r\n  switch (getExpressionId(expr)) {\r\n    case ExpressionId.Block: {\r\n      for (let i = 0, n = _BinaryenBlockGetNumChildren(expr); i < n; ++i) {\r\n        visit(_BinaryenBlockGetChild(expr, i), data);\r\n      }\r\n      break;\r\n    }\r\n    case ExpressionId.If: {\r\n      visit(_BinaryenIfGetCondition(expr), data);\r\n      visit(_BinaryenIfGetIfTrue(expr), data);\r\n      let ifFalse = _BinaryenIfGetIfFalse(expr);\r\n      if (ifFalse) visit(ifFalse, data);\r\n      break;\r\n    }\r\n    case ExpressionId.Loop: {\r\n      visit(_BinaryenLoopGetBody(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Break: {\r\n      let condition = _BinaryenBreakGetCondition(expr);\r\n      if (condition) visit(condition, data);\r\n      break;\r\n    }\r\n    case ExpressionId.Switch: {\r\n      visit(_BinaryenSwitchGetCondition(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Call: {\r\n      for (let i = 0, n = _BinaryenCallGetNumOperands(expr); i < n; ++i) {\r\n        visit(_BinaryenCallGetOperand(expr, i), data);\r\n      }\r\n      break;\r\n    }\r\n    case ExpressionId.CallIndirect: {\r\n      for (let i = 0, n = _BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\r\n        visit(_BinaryenCallIndirectGetOperand(expr, i), data);\r\n      }\r\n      break;\r\n    }\r\n    case ExpressionId.LocalGet: {\r\n      break;\r\n    }\r\n    case ExpressionId.LocalSet: {\r\n      visit(_BinaryenLocalSetGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.GlobalGet: {\r\n      break;\r\n    }\r\n    case ExpressionId.GlobalSet: {\r\n      visit(_BinaryenGlobalSetGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Load: {\r\n      visit(_BinaryenLoadGetPtr(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Store: {\r\n      visit(_BinaryenStoreGetPtr(expr), data);\r\n      visit(_BinaryenStoreGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.AtomicRMW: {\r\n      visit(_BinaryenAtomicRMWGetPtr(expr), data);\r\n      visit(_BinaryenAtomicRMWGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.AtomicCmpxchg: {\r\n      visit(_BinaryenAtomicCmpxchgGetPtr(expr), data);\r\n      visit(_BinaryenAtomicCmpxchgGetExpected(expr), data);\r\n      visit(_BinaryenAtomicCmpxchgGetReplacement(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.AtomicWait: {\r\n      visit(_BinaryenAtomicWaitGetPtr(expr), data);\r\n      visit(_BinaryenAtomicWaitGetExpected(expr), data);\r\n      visit(_BinaryenAtomicWaitGetTimeout(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.AtomicNotify: {\r\n      visit(_BinaryenAtomicNotifyGetPtr(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDExtract: {\r\n      visit(_BinaryenSIMDExtractGetVec(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDReplace: {\r\n      visit(_BinaryenSIMDReplaceGetVec(expr), data);\r\n      visit(_BinaryenSIMDReplaceGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDShuffle: {\r\n      visit(_BinaryenSIMDShuffleGetLeft(expr), data);\r\n      visit(_BinaryenSIMDShuffleGetRight(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDBitselect: {\r\n      visit(_BinaryenSIMDBitselectGetLeft(expr), data);\r\n      visit(_BinaryenSIMDBitselectGetRight(expr), data);\r\n      visit(_BinaryenSIMDBitselectGetCond(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.SIMDShift: {\r\n      visit(_BinaryenSIMDShiftGetVec(expr), data);\r\n      visit(_BinaryenSIMDShiftGetShift(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.MemoryInit: {\r\n      visit(_BinaryenMemoryInitGetDest(expr), data);\r\n      visit(_BinaryenMemoryInitGetOffset(expr), data);\r\n      visit(_BinaryenMemoryInitGetSize(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.DataDrop: {\r\n      break;\r\n    }\r\n    case ExpressionId.MemoryCopy: {\r\n      visit(_BinaryenMemoryCopyGetDest(expr), data);\r\n      visit(_BinaryenMemoryCopyGetSource(expr), data);\r\n      visit(_BinaryenMemoryCopyGetSize(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.MemoryFill: {\r\n      visit(_BinaryenMemoryFillGetDest(expr), data);\r\n      visit(_BinaryenMemoryFillGetValue(expr), data);\r\n      visit(_BinaryenMemoryFillGetSize(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Const: {\r\n      break;\r\n    }\r\n    case ExpressionId.Unary: {\r\n      visit(_BinaryenUnaryGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Binary: {\r\n      visit(_BinaryenBinaryGetLeft(expr), data);\r\n      visit(_BinaryenBinaryGetRight(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Select: {\r\n      visit(_BinaryenSelectGetIfTrue(expr), data);\r\n      visit(_BinaryenSelectGetIfFalse(expr), data);\r\n      visit(_BinaryenSelectGetCondition(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Drop: {\r\n      visit(_BinaryenDropGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Return: {\r\n      visit(_BinaryenReturnGetValue(expr), data);\r\n      break;\r\n    }\r\n    case ExpressionId.Host: {\r\n      for (let i = 0, n = _BinaryenHostGetNumOperands(expr); i < n; ++i) {\r\n        visit(_BinaryenHostGetOperand(expr, i), data);\r\n      }\r\n      break;\r\n    }\r\n    case ExpressionId.Nop: {\r\n      break;\r\n    }\r\n    case ExpressionId.Unreachable: {\r\n      break;\r\n    }\r\n    default: assert(false);\r\n  }\r\n  return true;\r\n}\r\n","/**\r\n * Abstract syntax tree representing a source file once parsed.\r\n * @module ast\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  CommonSymbols,\r\n  PATH_DELIMITER,\r\n  LIBRARY_PREFIX\r\n} from \"./common\";\r\n\r\nimport {\r\n  Token,\r\n  Tokenizer,\r\n  Range\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  normalizePath,\r\n  resolvePath,\r\n  CharCode\r\n} from \"./util\";\r\n\r\nexport { Token, Range };\r\n\r\n/** Indicates the kind of a node. */\r\nexport enum NodeKind {\r\n\r\n  SOURCE,\r\n\r\n  // types\r\n  TYPE,\r\n  TYPENAME,\r\n  TYPEPARAMETER,\r\n  PARAMETER,\r\n  SIGNATURE,\r\n\r\n  // expressions\r\n  IDENTIFIER,\r\n  ASSERTION,\r\n  BINARY,\r\n  CALL,\r\n  CLASS,\r\n  COMMA,\r\n  ELEMENTACCESS,\r\n  FALSE,\r\n  FUNCTION,\r\n  INSTANCEOF,\r\n  LITERAL,\r\n  NEW,\r\n  NULL,\r\n  PARENTHESIZED,\r\n  PROPERTYACCESS,\r\n  TERNARY,\r\n  SUPER,\r\n  THIS,\r\n  TRUE,\r\n  CONSTRUCTOR,\r\n  UNARYPOSTFIX,\r\n  UNARYPREFIX,\r\n\r\n  // statements\r\n  BLOCK,\r\n  BREAK,\r\n  CONTINUE,\r\n  DO,\r\n  EMPTY,\r\n  EXPORT,\r\n  EXPORTIMPORT,\r\n  EXPRESSION,\r\n  FOR,\r\n  IF,\r\n  IMPORT,\r\n  RETURN,\r\n  SWITCH,\r\n  THROW,\r\n  TRY,\r\n  VARIABLE,\r\n  VOID,\r\n  WHILE,\r\n\r\n  // declaration statements\r\n  CLASSDECLARATION,\r\n  ENUMDECLARATION,\r\n  ENUMVALUEDECLARATION,\r\n  FIELDDECLARATION,\r\n  FUNCTIONDECLARATION,\r\n  IMPORTDECLARATION,\r\n  INDEXSIGNATUREDECLARATION,\r\n  INTERFACEDECLARATION,\r\n  METHODDECLARATION,\r\n  NAMESPACEDECLARATION,\r\n  TYPEDECLARATION,\r\n  VARIABLEDECLARATION,\r\n\r\n  // special\r\n  DECORATOR,\r\n  EXPORTMEMBER,\r\n  SWITCHCASE,\r\n  COMMENT\r\n}\r\n\r\n/** Checks if a node represents a constant value. */\r\nexport function nodeIsConstantValue(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.LITERAL:\r\n    case NodeKind.NULL:\r\n    case NodeKind.TRUE:\r\n    case NodeKind.FALSE: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Checks if a node might be callable. */\r\nexport function nodeIsCallable(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.IDENTIFIER:\r\n    case NodeKind.ASSERTION: // if kind=NONNULL\r\n    case NodeKind.CALL:\r\n    case NodeKind.ELEMENTACCESS:\r\n    case NodeKind.PARENTHESIZED:\r\n    case NodeKind.PROPERTYACCESS:\r\n    case NodeKind.SUPER: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Checks if a node might be callable with generic arguments. */\r\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.IDENTIFIER:\r\n    case NodeKind.PROPERTYACCESS: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Base class of all nodes. */\r\nexport abstract class Node {\r\n\r\n  /** Node kind indicator. */\r\n  kind: NodeKind;\r\n  /** Source range. */\r\n  range: Range;\r\n\r\n  // types\r\n\r\n  static createTypeName(\r\n    name: IdentifierExpression,\r\n    range: Range\r\n  ): TypeName {\r\n    var typeName = new TypeName();\r\n    typeName.range = range;\r\n    typeName.identifier = name;\r\n    typeName.next = null;\r\n    return typeName;\r\n  }\r\n\r\n  static createSimpleTypeName(\r\n    name: string,\r\n    range: Range\r\n  ): TypeName {\r\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\r\n  }\r\n\r\n  static createType(\r\n    name: TypeName,\r\n    typeArguments: CommonTypeNode[] | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): TypeNode {\r\n    var type = new TypeNode();\r\n    type.range = range;\r\n    type.name = name;\r\n    type.typeArguments = typeArguments;\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  static createOmittedType(\r\n    range: Range\r\n  ): TypeNode {\r\n    return Node.createType(\r\n      Node.createSimpleTypeName(\"\", range),\r\n      null,\r\n      false,\r\n      range\r\n    );\r\n  }\r\n\r\n  static createTypeParameter(\r\n    name: IdentifierExpression,\r\n    extendsType: TypeNode | null,\r\n    defaultType: TypeNode | null,\r\n    range: Range\r\n  ): TypeParameterNode {\r\n    var elem = new TypeParameterNode();\r\n    elem.range = range;\r\n    elem.name = name;\r\n    elem.extendsType = extendsType;\r\n    elem.defaultType = defaultType;\r\n    return elem;\r\n  }\r\n\r\n  static createParameter(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode,\r\n    initializer: Expression | null,\r\n    kind: ParameterKind,\r\n    range: Range\r\n  ): ParameterNode {\r\n    var elem = new ParameterNode();\r\n    elem.range = range;\r\n    elem.name = name;\r\n    elem.type = type;\r\n    elem.initializer = initializer;\r\n    elem.parameterKind = kind;\r\n    return elem;\r\n  }\r\n\r\n  static createSignature(\r\n    parameters: ParameterNode[],\r\n    returnType: CommonTypeNode,\r\n    explicitThisType: TypeNode | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): SignatureNode {\r\n    var sig = new SignatureNode();\r\n    sig.range = range;\r\n    sig.parameters = parameters;\r\n    sig.returnType = returnType;\r\n    sig.explicitThisType = explicitThisType;\r\n    sig.isNullable = isNullable;\r\n    return sig;\r\n  }\r\n\r\n  // special\r\n\r\n  static createDecorator(\r\n    name: Expression,\r\n    args: Expression[] | null,\r\n    range: Range\r\n  ): DecoratorNode {\r\n    var stmt = new DecoratorNode();\r\n    stmt.range = range;\r\n    stmt.name = name;\r\n    stmt.arguments = args;\r\n    stmt.decoratorKind = decoratorNameToKind(name);\r\n    return stmt;\r\n  }\r\n\r\n  static createComment(\r\n    text: string,\r\n    kind: CommentKind,\r\n    range: Range\r\n  ): CommentNode {\r\n    var node = new CommentNode();\r\n    node.range = range;\r\n    node.commentKind = kind;\r\n    node.text = text;\r\n    return node;\r\n  }\r\n\r\n  // expressions\r\n\r\n  static createIdentifierExpression(\r\n    name: string,\r\n    range: Range,\r\n    isQuoted: bool = false\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = name; // TODO: extract from range\r\n    expr.symbol = name; // TODO: Symbol.for(name)\r\n    expr.isQuoted = isQuoted;\r\n    return expr;\r\n  }\r\n\r\n  static createEmptyIdentifierExpression(\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = \"\";\r\n    return expr;\r\n  }\r\n\r\n  static createArrayLiteralExpression(\r\n    elements: (Expression | null)[],\r\n    range: Range\r\n  ): ArrayLiteralExpression {\r\n    var expr = new ArrayLiteralExpression();\r\n    expr.range = range;\r\n    expr.elementExpressions = elements;\r\n    return expr;\r\n  }\r\n\r\n  static createAssertionExpression(\r\n    assertionKind: AssertionKind,\r\n    expression: Expression,\r\n    toType: CommonTypeNode | null,\r\n    range: Range\r\n  ): AssertionExpression {\r\n    var expr = new AssertionExpression();\r\n    expr.range = range;\r\n    expr.assertionKind = assertionKind;\r\n    expr.expression = expression;\r\n    expr.toType = toType;\r\n    return expr;\r\n  }\r\n\r\n  static createBinaryExpression(\r\n    operator: Token,\r\n    left: Expression,\r\n    right: Expression,\r\n    range: Range\r\n  ): BinaryExpression {\r\n    var expr = new BinaryExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.left = left;\r\n    expr.right = right;\r\n    return expr;\r\n  }\r\n\r\n  static createCallExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): CallExpression {\r\n    var expr = new CallExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.typeArguments = typeArgs;\r\n    expr.arguments = args;\r\n    return expr;\r\n  }\r\n\r\n  static createClassExpression(\r\n    declaration: ClassDeclaration\r\n  ): ClassExpression {\r\n    var expr = new ClassExpression();\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createCommaExpression(\r\n    expressions: Expression[],\r\n    range: Range\r\n  ): CommaExpression {\r\n    var expr = new CommaExpression();\r\n    expr.range = range;\r\n    expr.expressions = expressions;\r\n    return expr;\r\n  }\r\n\r\n  static createConstructorExpression(\r\n    range: Range\r\n  ): ConstructorExpression {\r\n    var expr = new ConstructorExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createElementAccessExpression(\r\n    expression: Expression,\r\n    element: Expression,\r\n    range: Range\r\n  ): ElementAccessExpression {\r\n    var expr = new ElementAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.elementExpression = element;\r\n    return expr;\r\n  }\r\n\r\n  static createFalseExpression(\r\n    range: Range\r\n  ): FalseExpression {\r\n    var expr = new FalseExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createFloatLiteralExpression(\r\n    value: f64,\r\n    range: Range\r\n  ): FloatLiteralExpression {\r\n    var expr = new FloatLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createFunctionExpression(\r\n    declaration: FunctionDeclaration\r\n  ): FunctionExpression {\r\n    var expr = new FunctionExpression();\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createInstanceOfExpression(\r\n    expression: Expression,\r\n    isType: CommonTypeNode,\r\n    range: Range\r\n  ): InstanceOfExpression {\r\n    var expr = new InstanceOfExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.isType = isType;\r\n    return expr;\r\n  }\r\n\r\n  static createIntegerLiteralExpression(\r\n    value: I64,\r\n    range: Range\r\n  ): IntegerLiteralExpression {\r\n    var expr = new IntegerLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createNewExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): NewExpression {\r\n    var expr = new NewExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.typeArguments = typeArgs;\r\n    expr.arguments = args;\r\n    return expr;\r\n  }\r\n\r\n  static createNullExpression(\r\n    range: Range\r\n  ): NullExpression {\r\n    var expr = new NullExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createObjectLiteralExpression(\r\n    names: IdentifierExpression[],\r\n    values: Expression[],\r\n    range: Range\r\n  ): ObjectLiteralExpression {\r\n    var expr = new ObjectLiteralExpression();\r\n    expr.range = range;\r\n    expr.names = names;\r\n    expr.values = values;\r\n    return expr;\r\n  }\r\n\r\n  static createParenthesizedExpression(\r\n    expression: Expression,\r\n    range: Range\r\n  ): ParenthesizedExpression {\r\n    var expr = new ParenthesizedExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    return expr;\r\n  }\r\n\r\n  static createPropertyAccessExpression(\r\n    expression: Expression,\r\n    property: IdentifierExpression,\r\n    range: Range\r\n  ): PropertyAccessExpression {\r\n    var expr = new PropertyAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.property = property;\r\n    return expr;\r\n  }\r\n\r\n  static createRegexpLiteralExpression(\r\n    pattern: string,\r\n    flags: string,\r\n    range: Range\r\n  ): RegexpLiteralExpression {\r\n    var expr = new RegexpLiteralExpression();\r\n    expr.range = range;\r\n    expr.pattern = pattern;\r\n    expr.patternFlags = flags;\r\n    return expr;\r\n  }\r\n\r\n  static createTernaryExpression(\r\n    condition: Expression,\r\n    ifThen: Expression,\r\n    ifElse: Expression,\r\n    range: Range\r\n  ): TernaryExpression {\r\n    var expr = new TernaryExpression();\r\n    expr.range = range;\r\n    expr.condition = condition;\r\n    expr.ifThen = ifThen;\r\n    expr.ifElse = ifElse;\r\n    return expr;\r\n  }\r\n\r\n  static createStringLiteralExpression(\r\n    value: string,\r\n    range: Range\r\n  ): StringLiteralExpression {\r\n    var expr = new StringLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createSuperExpression(\r\n    range: Range\r\n  ): SuperExpression {\r\n    var expr = new SuperExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createThisExpression(\r\n    range: Range\r\n  ): ThisExpression {\r\n    var expr = new ThisExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createTrueExpression(\r\n    range: Range\r\n  ): TrueExpression {\r\n    var expr = new TrueExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPostfixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPostfixExpression {\r\n    var expr = new UnaryPostfixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPrefixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPrefixExpression {\r\n    var expr = new UnaryPrefixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand;\r\n    return expr;\r\n  }\r\n\r\n  // statements\r\n\r\n  static createBlockStatement(\r\n    statements: Statement[],\r\n    range: Range\r\n  ): BlockStatement {\r\n    var stmt = new BlockStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements;\r\n    return stmt;\r\n  }\r\n\r\n  static createBreakStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): BreakStatement {\r\n    var stmt = new BreakStatement();\r\n    stmt.range = range;\r\n    stmt.label = label;\r\n    return stmt;\r\n  }\r\n\r\n  static createClassDeclaration(\r\n    identifier: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    extendsType: TypeNode | null, // can't be a function\r\n    implementsTypes: TypeNode[] | null, // can't be functions\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ClassDeclaration {\r\n    var stmt = new ClassDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = identifier;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.extendsType = extendsType;\r\n    stmt.implementsTypes = implementsTypes;\r\n    stmt.members = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createContinueStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): ContinueStatement {\r\n    var stmt = new ContinueStatement();\r\n    stmt.range = range;\r\n    stmt.label = label;\r\n    return stmt;\r\n  }\r\n\r\n  static createDoStatement(\r\n    statement: Statement,\r\n    condition: Expression,\r\n    range: Range\r\n  ): DoStatement {\r\n    var stmt = new DoStatement();\r\n    stmt.range = range;\r\n    stmt.statement = statement;\r\n    stmt.condition = condition;\r\n    return stmt;\r\n  }\r\n\r\n  static createEmptyStatement(\r\n    range: Range\r\n  ): EmptyStatement {\r\n    var stmt = new EmptyStatement();\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumDeclaration(\r\n    name: IdentifierExpression,\r\n    members: EnumValueDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumDeclaration {\r\n    var stmt = new EnumDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.values = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumValueDeclaration(\r\n    name: IdentifierExpression,\r\n    value: Expression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumValueDeclaration {\r\n    var stmt = new EnumValueDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.value = value;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportStatement(\r\n    members: ExportMember[] | null,\r\n    path: StringLiteralExpression | null,\r\n    isDeclare: bool,\r\n    range: Range\r\n  ): ExportStatement {\r\n    var stmt = new ExportStatement();\r\n    stmt.range = range;\r\n    stmt.members = members;\r\n    stmt.path = path;\r\n    if (path) {\r\n      let normalizedPath = normalizePath(path.value);\r\n      if (path.value.startsWith(\".\")) { // relative\r\n        stmt.normalizedPath = resolvePath(\r\n          normalizedPath,\r\n          range.source.normalizedPath\r\n        );\r\n      } else { // absolute\r\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n          normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n        }\r\n        stmt.normalizedPath = normalizedPath;\r\n      }\r\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    } else {\r\n      stmt.normalizedPath = null;\r\n      stmt.internalPath = null;\r\n    }\r\n    stmt.isDeclare = isDeclare;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportImportStatement(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression,\r\n    range: Range\r\n  ): ExportImportStatement {\r\n    var stmt = new ExportImportStatement();\r\n    stmt.range = range;\r\n    stmt.name = name;\r\n    stmt.externalName = externalName;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportMember(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression | null,\r\n    range: Range\r\n  ): ExportMember {\r\n    var elem = new ExportMember();\r\n    elem.range = range;\r\n    elem.localName = name;\r\n    if (!externalName) externalName = name;\r\n    elem.exportedName = externalName;\r\n    return elem;\r\n  }\r\n\r\n  static createExpressionStatement(\r\n    expression: Expression\r\n  ): ExpressionStatement {\r\n    var stmt = new ExpressionStatement();\r\n    stmt.range = expression.range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createIfStatement(\r\n    condition: Expression,\r\n    ifTrue: Statement,\r\n    ifFalse: Statement | null,\r\n    range: Range\r\n  ): IfStatement {\r\n    var stmt = new IfStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition;\r\n    stmt.ifTrue = ifTrue;\r\n    stmt.ifFalse = ifFalse;\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatement(\r\n    decls: ImportDeclaration[] | null,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = decls;\r\n    stmt.namespaceName = null;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) { // relative in project\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    } else { // absolute in library\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n      }\r\n      stmt.normalizedPath = normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatementWithWildcard(\r\n    identifier: IdentifierExpression,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = null;\r\n    stmt.namespaceName = identifier;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) {\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    } else {\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n      }\r\n      stmt.normalizedPath = normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportDeclaration(\r\n    foreignName: IdentifierExpression,\r\n    name: IdentifierExpression | null,\r\n    range: Range\r\n  ): ImportDeclaration {\r\n    var elem = new ImportDeclaration();\r\n    elem.range = range;\r\n    elem.foreignName = foreignName;\r\n    if (!name) name = foreignName;\r\n    elem.name = name;\r\n    return elem;\r\n  }\r\n\r\n  static createInterfaceDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    extendsType: TypeNode | null, // can't be a function\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): InterfaceDeclaration {\r\n    var stmt = new InterfaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.extendsType = extendsType;\r\n    stmt.members = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createFieldDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FieldDeclaration {\r\n    var stmt = new FieldDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.type = type;\r\n    stmt.initializer = initializer;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createForStatement(\r\n    initializer: Statement | null,\r\n    condition: Expression | null,\r\n    incrementor: Expression | null,\r\n    statement: Statement,\r\n    range: Range\r\n  ): ForStatement {\r\n    var stmt = new ForStatement();\r\n    stmt.range = range;\r\n    stmt.initializer = initializer;\r\n    stmt.condition = condition;\r\n    stmt.incrementor = incrementor;\r\n    stmt.statement = statement;\r\n    return stmt;\r\n  }\r\n\r\n  static createFunctionDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    arrowKind: ArrowKind,\r\n    range: Range\r\n  ): FunctionDeclaration {\r\n    var stmt = new FunctionDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.signature = signature;\r\n    stmt.body = body;\r\n    stmt.decorators = decorators;\r\n    stmt.arrowKind = arrowKind;\r\n    return stmt;\r\n  }\r\n\r\n  static createIndexSignatureDeclaration(\r\n    keyType: TypeNode,\r\n    valueType: CommonTypeNode,\r\n    range: Range\r\n  ): IndexSignatureDeclaration {\r\n    var elem = new IndexSignatureDeclaration();\r\n    elem.range = range;\r\n    elem.keyType = keyType;\r\n    elem.valueType = valueType;\r\n    return elem;\r\n  }\r\n\r\n  static createMethodDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): MethodDeclaration {\r\n    var stmt = new MethodDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.signature = signature;\r\n    stmt.body = body;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createNamespaceDeclaration(\r\n    name: IdentifierExpression,\r\n    members: Statement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): NamespaceDeclaration {\r\n    var stmt = new NamespaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.members = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createReturnStatement(\r\n    value: Expression | null,\r\n    range: Range\r\n  ): ReturnStatement {\r\n    var stmt = new ReturnStatement();\r\n    stmt.range = range;\r\n    stmt.value = value;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchStatement(\r\n    condition: Expression,\r\n    cases: SwitchCase[],\r\n    range: Range\r\n  ): SwitchStatement {\r\n    var stmt = new SwitchStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition;\r\n    stmt.cases = cases;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchCase(\r\n    label: Expression | null,\r\n    statements: Statement[],\r\n    range: Range\r\n  ): SwitchCase {\r\n    var elem = new SwitchCase();\r\n    elem.range = range;\r\n    elem.label = label;\r\n    elem.statements = statements;\r\n    return elem;\r\n  }\r\n\r\n  static createThrowStatement(\r\n    value: Expression,\r\n    range: Range\r\n  ): ThrowStatement {\r\n    var stmt = new ThrowStatement();\r\n    stmt.range = range;\r\n    stmt.value = value;\r\n    return stmt;\r\n  }\r\n\r\n  static createTryStatement(\r\n    statements: Statement[],\r\n    catchVariable: IdentifierExpression | null,\r\n    catchStatements: Statement[] | null,\r\n    finallyStatements: Statement[] | null,\r\n    range: Range\r\n  ): TryStatement {\r\n    var stmt = new TryStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements;\r\n    stmt.catchVariable = catchVariable;\r\n    stmt.catchStatements = catchStatements;\r\n    stmt.finallyStatements = finallyStatements;\r\n    return stmt;\r\n  }\r\n\r\n  static createTypeDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    alias: CommonTypeNode,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): TypeDeclaration {\r\n    var stmt = new TypeDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.type = alias;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableStatement(\r\n    declarations: VariableDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    range: Range\r\n  ): VariableStatement {\r\n    var stmt = new VariableStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = declarations;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableDeclaration {\r\n    var elem = new VariableDeclaration();\r\n    elem.range = range;\r\n    elem.flags = flags;\r\n    elem.name = name;\r\n    elem.type = type;\r\n    elem.initializer = initializer;\r\n    elem.decorators = decorators; // inherited\r\n    return elem;\r\n  }\r\n\r\n  static createVoidStatement(\r\n    expression: Expression,\r\n    range: Range\r\n  ): VoidStatement {\r\n    var stmt = new VoidStatement();\r\n    stmt.range = range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createWhileStatement(\r\n    condition: Expression,\r\n    statement: Statement,\r\n    range: Range\r\n  ): WhileStatement {\r\n    var stmt = new WhileStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition;\r\n    stmt.statement = statement;\r\n    return stmt;\r\n  }\r\n}\r\n\r\n// types\r\n\r\nexport abstract class CommonTypeNode extends Node {\r\n  // kind varies\r\n\r\n  /** Whether nullable or not. */\r\n  isNullable: bool;\r\n}\r\n\r\n/** Represents a type name. */\r\nexport class TypeName extends Node {\r\n  kind = NodeKind.TYPENAME;\r\n\r\n  /** Identifier of this part. */\r\n  identifier: IdentifierExpression;\r\n  /** Next part of the type name or `null` if this is the last part. */\r\n  next: TypeName | null;\r\n}\r\n\r\n/** Represents a type annotation. */\r\nexport class TypeNode extends CommonTypeNode {\r\n  kind = NodeKind.TYPE;\r\n\r\n  /** Type name. */\r\n  name: TypeName;\r\n  /** Type argument references. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n}\r\n\r\n/** Represents a type parameter. */\r\nexport class TypeParameterNode extends Node {\r\n  kind = NodeKind.TYPEPARAMETER;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Extended type reference, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Default type if omitted, if any. */\r\n  defaultType: TypeNode | null; // can't be a function\r\n}\r\n\r\n/** Represents the kind of a parameter. */\r\nexport enum ParameterKind {\r\n  /** No specific flags. */\r\n  DEFAULT,\r\n  /** Is an optional parameter. */\r\n  OPTIONAL,\r\n  /** Is a rest parameter. */\r\n  REST\r\n}\r\n\r\n/** Represents a function parameter. */\r\nexport class ParameterNode extends Node {\r\n  kind = NodeKind.PARAMETER;\r\n\r\n  /** Parameter kind. */\r\n  parameterKind: ParameterKind;\r\n  /** Parameter name. */\r\n  name: IdentifierExpression;\r\n  /** Parameter type. */\r\n  type: CommonTypeNode;\r\n  /** Initializer expression, if present. */\r\n  initializer: Expression | null;\r\n  /** Implicit field declaration, if applicable. */\r\n  implicitFieldDeclaration: FieldDeclaration | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n}\r\n\r\n/** Represents a function signature. */\r\nexport class SignatureNode extends CommonTypeNode {\r\n  kind = NodeKind.SIGNATURE;\r\n\r\n  /** Accepted parameters. */\r\n  parameters: ParameterNode[];\r\n  /** Return type. */\r\n  returnType: CommonTypeNode;\r\n  /** Explicitly provided this type, if any. */\r\n  explicitThisType: TypeNode | null; // can't be a function\r\n}\r\n\r\n// special\r\n\r\n/** Built-in decorator kinds. */\r\nexport enum DecoratorKind {\r\n  CUSTOM,\r\n  GLOBAL,\r\n  OPERATOR,\r\n  OPERATOR_BINARY,\r\n  OPERATOR_PREFIX,\r\n  OPERATOR_POSTFIX,\r\n  UNMANAGED,\r\n  SEALED,\r\n  INLINE,\r\n  EXTERNAL,\r\n  BUILTIN,\r\n  LAZY,\r\n  START,\r\n  UNSAFE\r\n}\r\n\r\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\r\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\r\n  // @global, @inline, @operator, @sealed, @unmanaged\r\n  if (name.kind == NodeKind.IDENTIFIER) {\r\n    let nameStr = (<IdentifierExpression>name).text;\r\n    assert(nameStr.length);\r\n    switch (nameStr.charCodeAt(0)) {\r\n      case CharCode.b: {\r\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\r\n        break;\r\n      }\r\n      case CharCode.e: {\r\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\r\n        break;\r\n      }\r\n      case CharCode.g: {\r\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\r\n        break;\r\n      }\r\n      case CharCode.i: {\r\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\r\n        break;\r\n      }\r\n      case CharCode.l: {\r\n        if (nameStr == \"lazy\") return DecoratorKind.LAZY;\r\n        break;\r\n      }\r\n      case CharCode.o: {\r\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\r\n        break;\r\n      }\r\n      case CharCode.s: {\r\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\r\n        if (nameStr == \"start\") return DecoratorKind.START;\r\n        break;\r\n      }\r\n      case CharCode.u: {\r\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\r\n        if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\r\n        break;\r\n      }\r\n    }\r\n  } else if (\r\n    name.kind == NodeKind.PROPERTYACCESS &&\r\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\r\n  ) {\r\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\r\n    assert(nameStr.length);\r\n    let propStr = (<PropertyAccessExpression>name).property.text;\r\n    assert(propStr.length);\r\n    // @operator.binary, @operator.prefix, @operator.postfix\r\n    if (nameStr == \"operator\") {\r\n      switch (propStr.charCodeAt(0)) {\r\n        case CharCode.b: {\r\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\r\n          break;\r\n        }\r\n        case CharCode.p: {\r\n          switch (propStr) {\r\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\r\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return DecoratorKind.CUSTOM;\r\n}\r\n\r\n/** Represents a decorator. */\r\nexport class DecoratorNode extends Node {\r\n  kind = NodeKind.DECORATOR;\r\n\r\n  /** Built-in kind, if applicable. */\r\n  decoratorKind: DecoratorKind;\r\n  /** Name expression. */\r\n  name: Expression;\r\n  /** Argument expressions. */\r\n  arguments: Expression[] | null;\r\n}\r\n\r\n/** Comment kinds. */\r\nexport enum CommentKind {\r\n  /** Line comment. */\r\n  LINE,\r\n  /** Triple-slash comment. */\r\n  TRIPLE,\r\n  /** Block comment. */\r\n  BLOCK\r\n}\r\n\r\n/** Represents a comment. */\r\nexport class CommentNode extends Node {\r\n  kind = NodeKind.COMMENT;\r\n\r\n  /** Comment kind. */\r\n  commentKind: CommentKind;\r\n  /** Comment text. */\r\n  text: string;\r\n}\r\n\r\n// expressions\r\n\r\n/** Base class of all expression nodes. */\r\nexport abstract class Expression extends Node { }\r\n\r\n/** Represents an identifier expression. */\r\nexport class IdentifierExpression extends Expression {\r\n  kind = NodeKind.IDENTIFIER;\r\n\r\n  /** Textual name. */\r\n  text: string;\r\n  /** Symbol. */\r\n  symbol: string; // TODO: symbol\r\n  /** Whether quoted or not. */\r\n  isQuoted: bool;\r\n}\r\n\r\n/** Indicates the kind of a literal. */\r\nexport enum LiteralKind {\r\n  FLOAT,\r\n  INTEGER,\r\n  STRING,\r\n  REGEXP,\r\n  ARRAY,\r\n  OBJECT\r\n}\r\n\r\n/** Base class of all literal expressions. */\r\nexport abstract class LiteralExpression extends Expression {\r\n  kind = NodeKind.LITERAL;\r\n\r\n  /** Specific literal kind. */\r\n  literalKind: LiteralKind;\r\n}\r\n\r\n/** Represents an `[]` literal expression. */\r\nexport class ArrayLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.ARRAY;\r\n\r\n  /** Nested element expressions. */\r\n  elementExpressions: (Expression | null)[];\r\n}\r\n\r\n/** Indicates the kind of an assertion. */\r\nexport enum AssertionKind {\r\n  PREFIX,\r\n  AS,\r\n  NONNULL\r\n}\r\n\r\n/** Represents an assertion expression. */\r\nexport class AssertionExpression extends Expression {\r\n  kind = NodeKind.ASSERTION;\r\n\r\n  /** Specific kind of this assertion. */\r\n  assertionKind: AssertionKind;\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Target type. */\r\n  toType: CommonTypeNode | null;\r\n}\r\n\r\n/** Represents a binary expression. */\r\nexport class BinaryExpression extends Expression {\r\n  kind = NodeKind.BINARY;\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Left-hand side expression */\r\n  left: Expression;\r\n  /** Right-hand side expression. */\r\n  right: Expression;\r\n}\r\n\r\n/** Represents a call expression. */\r\nexport class CallExpression extends Expression {\r\n  kind = NodeKind.CALL;\r\n\r\n  /** Called expression. Usually an identifier or property access expression. */\r\n  expression: Expression;\r\n  /** Provided type arguments. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n  /** Provided arguments. */\r\n  arguments: Expression[];\r\n\r\n  /** Gets the type arguments range for reporting. */\r\n  get typeArgumentsRange(): Range {\r\n    var typeArguments = this.typeArguments;\r\n    var numTypeArguments: i32;\r\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\r\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\r\n    }\r\n    return this.expression.range;\r\n  }\r\n\r\n  /** Gets the arguments range for reporting. */\r\n  get argumentsRange(): Range {\r\n    var args = this.arguments;\r\n    var numArguments = args.length;\r\n    if (numArguments) {\r\n      return Range.join(args[0].range, args[numArguments - 1].range);\r\n    }\r\n    return this.expression.range;\r\n  }\r\n}\r\n\r\n/** Represents a class expression using the 'class' keyword. */\r\nexport class ClassExpression extends Expression {\r\n  kind = NodeKind.CLASS;\r\n\r\n  /** Inline class declaration. */\r\n  declaration: ClassDeclaration;\r\n}\r\n\r\n/** Represents a comma expression composed of multiple expressions. */\r\nexport class CommaExpression extends Expression {\r\n  kind = NodeKind.COMMA;\r\n\r\n  /** Sequential expressions. */\r\n  expressions: Expression[];\r\n}\r\n\r\n/** Represents a `constructor` expression. */\r\nexport class ConstructorExpression extends IdentifierExpression {\r\n  kind = NodeKind.CONSTRUCTOR;\r\n  text = \"constructor\";\r\n  symbol = CommonSymbols.constructor;\r\n}\r\n\r\n/** Represents an element access expression, e.g., array access. */\r\nexport class ElementAccessExpression extends Expression {\r\n  kind = NodeKind.ELEMENTACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Element of the expression being accessed. */\r\n  elementExpression: Expression;\r\n}\r\n\r\n/** Represents a float literal expression. */\r\nexport class FloatLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.FLOAT;\r\n\r\n  /** Float value. */\r\n  value: f64;\r\n}\r\n\r\n/** Represents a function expression using the 'function' keyword. */\r\nexport class FunctionExpression extends Expression {\r\n  kind = NodeKind.FUNCTION;\r\n\r\n  /** Inline function declaration. */\r\n  declaration: FunctionDeclaration;\r\n}\r\n\r\n/** Represents an `instanceof` expression. */\r\nexport class InstanceOfExpression extends Expression {\r\n  kind = NodeKind.INSTANCEOF;\r\n\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Type to test for. */\r\n  isType: CommonTypeNode;\r\n}\r\n\r\n/** Represents an integer literal expression. */\r\nexport class IntegerLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.INTEGER;\r\n\r\n  /** Integer value. */\r\n  value: I64;\r\n}\r\n\r\n/** Represents a `new` expression. Like a call but with its own kind. */\r\nexport class NewExpression extends CallExpression {\r\n  kind = NodeKind.NEW;\r\n}\r\n\r\n/** Represents a `null` expression. */\r\nexport class NullExpression extends IdentifierExpression {\r\n  kind = NodeKind.NULL;\r\n  text = \"null\";\r\n  symbol = CommonSymbols.null_;\r\n}\r\n\r\n/** Represents an object literal expression. */\r\nexport class ObjectLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.OBJECT;\r\n\r\n  /** Field names. */\r\n  names: IdentifierExpression[];\r\n  /** Field values. */\r\n  values: Expression[];\r\n}\r\n\r\n/** Represents a parenthesized expression. */\r\nexport class ParenthesizedExpression extends Expression {\r\n  kind = NodeKind.PARENTHESIZED;\r\n\r\n  /** Expression in parenthesis. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a property access expression. */\r\nexport class PropertyAccessExpression extends Expression {\r\n  kind = NodeKind.PROPERTYACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Property of the expression being accessed. */\r\n  property: IdentifierExpression;\r\n}\r\n\r\n/** Represents a regular expression literal expression. */\r\nexport class RegexpLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.REGEXP;\r\n\r\n  /** Regular expression pattern. */\r\n  pattern: string;\r\n  /** Regular expression flags. */\r\n  patternFlags: string;\r\n}\r\n\r\n/** Represents a ternary expression, i.e., short if notation. */\r\nexport class TernaryExpression extends Expression {\r\n  kind = NodeKind.TERNARY;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Expression executed when condition is `true`. */\r\n  ifThen: Expression;\r\n  /** Expression executed when condition is `false`. */\r\n  ifElse: Expression;\r\n}\r\n\r\n/** Represents a string literal expression. */\r\nexport class StringLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.STRING;\r\n\r\n  /** String value without quotes. */\r\n  value: string;\r\n}\r\n\r\n/** Represents a `super` expression. */\r\nexport class SuperExpression extends IdentifierExpression {\r\n  kind = NodeKind.SUPER;\r\n  text = \"super\";\r\n  symbol = CommonSymbols.super_;\r\n}\r\n\r\n/** Represents a `this` expression. */\r\nexport class ThisExpression extends IdentifierExpression {\r\n  kind = NodeKind.THIS;\r\n  text = \"this\";\r\n  symbol = CommonSymbols.this_;\r\n}\r\n\r\n/** Represents a `true` expression. */\r\nexport class TrueExpression extends IdentifierExpression {\r\n  kind = NodeKind.TRUE;\r\n  text = \"true\";\r\n  symbol = CommonSymbols.true_;\r\n}\r\n\r\n/** Represents a `false` expression. */\r\nexport class FalseExpression extends IdentifierExpression {\r\n  kind = NodeKind.FALSE;\r\n  text = \"false\";\r\n  symbol = CommonSymbols.false_;\r\n}\r\n\r\n/** Base class of all unary expressions. */\r\nexport abstract class UnaryExpression extends Expression {\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Operand expression. */\r\n  operand: Expression;\r\n}\r\n\r\n/** Represents a unary postfix expression, e.g. a postfix increment. */\r\nexport class UnaryPostfixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPOSTFIX;\r\n}\r\n\r\n/** Represents a unary prefix expression, e.g. a negation. */\r\nexport class UnaryPrefixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPREFIX;\r\n}\r\n\r\n// statements\r\n\r\n/** Base class of all statement nodes. */\r\nexport abstract class Statement extends Node { }\r\n\r\n/** Indicates the specific kind of a source. */\r\nexport enum SourceKind {\r\n  /** Default source. Usually imported from an entry file. */\r\n  DEFAULT,\r\n  /** Entry file. */\r\n  ENTRY,\r\n  /** Library file. */\r\n  LIBRARY\r\n}\r\n\r\n/** A top-level source node. */\r\nexport class Source extends Node {\r\n  kind = NodeKind.SOURCE;\r\n  parent = null;\r\n\r\n  /** Source kind. */\r\n  sourceKind: SourceKind;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Path used internally. */\r\n  internalPath: string;\r\n  /** Simple path (last part without extension). */\r\n  simplePath: string;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Full source text. */\r\n  text: string;\r\n  /** Tokenizer reference. */\r\n  tokenizer: Tokenizer | null = null;\r\n  /** Source map index. */\r\n  debugInfoIndex: i32 = -1;\r\n  /** Re-exported sources. */\r\n  exportPaths: Set<string> | null = null;\r\n\r\n  /** Constructs a new source node. */\r\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\r\n    super();\r\n    this.sourceKind = kind;\r\n    this.normalizedPath = normalizedPath;\r\n    var internalPath = mangleInternalPath(this.normalizedPath);\r\n    this.internalPath = internalPath;\r\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\r\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\r\n    this.statements = new Array();\r\n    this.range = new Range(this, 0, text.length);\r\n    this.text = text;\r\n  }\r\n\r\n  /** Tests if this source is an entry file. */\r\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\r\n  /** Tests if this source is a stdlib file. */\r\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\r\n}\r\n\r\n/** Base class of all declaration statements. */\r\nexport abstract class DeclarationStatement extends Statement {\r\n  /** Simple name being declared. */\r\n  name: IdentifierExpression;\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n}\r\n\r\n/** Represents an index signature declaration. */\r\nexport class IndexSignatureDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\r\n\r\n  /** Key type. */\r\n  keyType: TypeNode;\r\n  /** Value type. */\r\n  valueType: CommonTypeNode;\r\n}\r\n\r\n/** Base class of all variable-like declaration statements. */\r\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\r\n\r\n  /** Variable type. */\r\n  type: CommonTypeNode | null;\r\n  /** Variable initializer. */\r\n  initializer: Expression | null;\r\n}\r\n\r\n/** Represents a block statement. */\r\nexport class BlockStatement extends Statement {\r\n  kind = NodeKind.BLOCK;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `break` statement. */\r\nexport class BreakStatement extends Statement {\r\n  kind = NodeKind.BREAK;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `class` declaration. */\r\nexport class ClassDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.CLASSDECLARATION;\r\n\r\n  /** Accepted type parameters. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Base class type being extended, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Interface types being implemented, if any. */\r\n  implementsTypes: TypeNode[] | null; // can't be functions\r\n  /** Class member declarations. */\r\n  members: DeclarationStatement[];\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents a `continue` statement. */\r\nexport class ContinueStatement extends Statement {\r\n  kind = NodeKind.CONTINUE;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `do` statement. */\r\nexport class DoStatement extends Statement {\r\n  kind = NodeKind.DO;\r\n\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n  /** Condition when to repeat. */\r\n  condition: Expression;\r\n}\r\n\r\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\r\nexport class EmptyStatement extends Statement {\r\n  kind = NodeKind.EMPTY;\r\n}\r\n\r\n/** Represents an `enum` declaration. */\r\nexport class EnumDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMDECLARATION;\r\n\r\n  /** Enum value declarations. */\r\n  values: EnumValueDeclaration[];\r\n}\r\n\r\n/** Represents a value of an `enum` declaration. */\r\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.ENUMVALUEDECLARATION;\r\n  // name is inherited\r\n\r\n  /** Value expression. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents an `export import` statement of an interface. */\r\nexport class ExportImportStatement extends Node {\r\n  kind = NodeKind.EXPORTIMPORT;\r\n\r\n  /** Identifier being imported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier being exported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents a member of an `export` statement. */\r\nexport class ExportMember extends Node {\r\n  kind = NodeKind.EXPORTMEMBER;\r\n\r\n  /** Local identifier. */\r\n  localName: IdentifierExpression;\r\n  /** Exported identifier. */\r\n  exportedName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `export` statement. */\r\nexport class ExportStatement extends Statement {\r\n  kind = NodeKind.EXPORT;\r\n\r\n  /** Array of members if a set of named exports, or `null` if a file export. */\r\n  members: ExportMember[] | null;\r\n  /** Path being exported from, if applicable. */\r\n  path: StringLiteralExpression | null;\r\n  /** Normalized path, if `path` is set. */\r\n  normalizedPath: string | null;\r\n  /** Mangled internal path being referenced, if `path` is set. */\r\n  internalPath: string | null;\r\n  /** Whether this is a declared export. */\r\n  isDeclare: bool;\r\n}\r\n\r\n/** Represents an expression that is used as a statement. */\r\nexport class ExpressionStatement extends Statement {\r\n  kind = NodeKind.EXPRESSION;\r\n\r\n  /** Expression being used as a statement.*/\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a field declaration within a `class`. */\r\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.FIELDDECLARATION;\r\n\r\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\r\n  parameterIndex: i32 = -1;\r\n}\r\n\r\n/** Represents a `for` statement. */\r\nexport class ForStatement extends Statement {\r\n  kind = NodeKind.FOR;\r\n\r\n  /**\r\n   * Initializer statement, if present.\r\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\r\n   */\r\n  initializer: Statement | null;\r\n  /** Condition expression, if present. */\r\n  condition: Expression | null;\r\n  /** Incrementor expression, if present. */\r\n  incrementor: Expression | null;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Indicates the kind of an array function. */\r\nexport const enum ArrowKind {\r\n  /** Not an arrow function. */\r\n  NONE,\r\n  /** Parenthesized parameter list. */\r\n  ARROW_PARENTHESIZED,\r\n  /** Single parameter without parenthesis. */\r\n  ARROW_SINGLE\r\n}\r\n\r\n/** Represents a `function` declaration. */\r\nexport class FunctionDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.FUNCTIONDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Function signature. */\r\n  signature: SignatureNode;\r\n  /** Body statement. Usually a block. */\r\n  body: Statement | null;\r\n  /** Arrow function kind, if applicable. */\r\n  arrowKind: ArrowKind;\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n\r\n  /** Clones this function declaration. */\r\n  clone(): FunctionDeclaration {\r\n    return Node.createFunctionDeclaration(\r\n      this.name,\r\n      this.typeParameters,\r\n      this.signature,\r\n      this.body,\r\n      this.decorators,\r\n      this.flags,\r\n      this.arrowKind,\r\n      this.range\r\n    );\r\n  }\r\n}\r\n\r\n/** Represents an `if` statement. */\r\nexport class IfStatement extends Statement {\r\n  kind = NodeKind.IF;\r\n\r\n  /** Condition. */\r\n  condition: Expression;\r\n  /** Statement executed when condition is `true`. */\r\n  ifTrue: Statement;\r\n  /** Statement executed when condition is `false`. */\r\n  ifFalse: Statement | null;\r\n}\r\n\r\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\r\nexport class ImportDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.IMPORTDECLARATION;\r\n\r\n  /** Identifier being imported. */\r\n  foreignName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `import` statement. */\r\nexport class ImportStatement extends Statement {\r\n  kind = NodeKind.IMPORT;\r\n\r\n  /** Array of member declarations or `null` if an asterisk import. */\r\n  declarations: ImportDeclaration[] | null;\r\n  /** Name of the local namespace, if an asterisk import. */\r\n  namespaceName: IdentifierExpression | null;\r\n  /** Path being imported from. */\r\n  path: StringLiteralExpression;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Mangled internal path being referenced. */\r\n  internalPath: string;\r\n}\r\n\r\n/** Represents an `interfarce` declaration. */\r\nexport class InterfaceDeclaration extends ClassDeclaration {\r\n  kind = NodeKind.INTERFACEDECLARATION;\r\n}\r\n\r\n/** Represents a method declaration within a `class`. */\r\nexport class MethodDeclaration extends FunctionDeclaration {\r\n  kind = NodeKind.METHODDECLARATION;\r\n}\r\n\r\n/** Represents a `namespace` declaration. */\r\nexport class NamespaceDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.NAMESPACEDECLARATION;\r\n\r\n  /** Array of namespace members. */\r\n  members: Statement[];\r\n}\r\n\r\n/** Represents a `return` statement. */\r\nexport class ReturnStatement extends Statement {\r\n  kind = NodeKind.RETURN;\r\n\r\n  /** Value expression being returned, if present. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents a single `case` within a `switch` statement. */\r\nexport class SwitchCase extends Node {\r\n  kind = NodeKind.SWITCHCASE;\r\n\r\n  /** Label expression. `null` indicates the default case. */\r\n  label: Expression | null;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `switch` statement. */\r\nexport class SwitchStatement extends Statement {\r\n  kind = NodeKind.SWITCH;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Contained cases. */\r\n  cases: SwitchCase[];\r\n}\r\n\r\n/** Represents a `throw` statement. */\r\nexport class ThrowStatement extends Statement {\r\n  kind = NodeKind.THROW;\r\n\r\n  /** Value expression being thrown. */\r\n  value: Expression;\r\n}\r\n\r\n/** Represents a `try` statement. */\r\nexport class TryStatement extends Statement {\r\n  kind = NodeKind.TRY;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Exception variable name, if a `catch` clause is present. */\r\n  catchVariable: IdentifierExpression | null;\r\n  /** Statements being executed on catch, if a `catch` clause is present. */\r\n  catchStatements: Statement[] | null;\r\n  /** Statements being executed afterwards, if a `finally` clause is present. */\r\n  finallyStatements: Statement[] | null;\r\n}\r\n\r\n/** Represents a `type` declaration. */\r\nexport class TypeDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.TYPEDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Type being aliased. */\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents a variable declaration part of a {@link VariableStatement}. */\r\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.VARIABLEDECLARATION;\r\n}\r\n\r\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\r\nexport class VariableStatement extends Statement {\r\n  kind = NodeKind.VARIABLE;\r\n\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null;\r\n  /** Array of member declarations. */\r\n  declarations: VariableDeclaration[];\r\n}\r\n\r\n/** Represents a void statement dropping an expression's value. */\r\nexport class VoidStatement extends Statement {\r\n  kind = NodeKind.VOID;\r\n\r\n  /** Expression being dropped. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a `while` statement. */\r\nexport class WhileStatement extends Statement {\r\n  kind = NodeKind.WHILE;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Finds the first decorator matching the specified kind. */\r\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\r\n  if (decorators) {\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      if (decorator.decoratorKind == kind) return decorator;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/** Mangles an external to an internal path. */\r\nexport function mangleInternalPath(path: string): string {\r\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\r\n  return path;\r\n}\r\n\r\n/** Tests if the specified type node represents an omitted type. */\r\nexport function isTypeOmitted(type: CommonTypeNode): bool {\r\n  if (type.kind == NodeKind.TYPE) {\r\n    let name = (<TypeNode>type).name;\r\n    return !(name.next || name.identifier.text.length);\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * Mappings from AssemblyScript types to WebAssembly types.\r\n * @module types\r\n *//***/\r\n\r\nimport {\r\n  Class,\r\n  FunctionTarget,\r\n  Program,\r\n  DecoratorFlags\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionRef,\r\n  Module\r\n} from \"./module\";\r\n\r\n/** Indicates the kind of a type. */\r\nexport const enum TypeKind {\r\n\r\n  // signed integers\r\n\r\n  /** An 8-bit signed integer. */\r\n  I8,\r\n  /** A 16-bit signed integer. */\r\n  I16,\r\n  /** A 32-bit signed integer. */\r\n  I32,\r\n  /** A 64-bit signed integer. */\r\n  I64,\r\n  /** A 32-bit/64-bit signed integer, depending on the target. */\r\n  ISIZE,\r\n\r\n  // unsigned integers\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  U8,\r\n  /** A 16-bit unsigned integer. */\r\n  U16,\r\n  /** A 32-bit unsigned integer. Also the base of function types. */\r\n  U32,\r\n  /** A 64-bit unsigned integer. */\r\n  U64,\r\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\r\n  USIZE,\r\n  /** A 1-bit unsigned integer. */\r\n  BOOL, // sic\r\n\r\n  // floats\r\n\r\n  /** A 32-bit float. */\r\n  F32,\r\n  /** A 64-bit double. */\r\n  F64,\r\n\r\n  // vectors\r\n\r\n  /** A 128-bit vector. */\r\n  V128,\r\n\r\n  // other\r\n\r\n  /** No return type. */\r\n  VOID\r\n}\r\n\r\n/** Indicates capabilities of a type. */\r\nexport const enum TypeFlags {\r\n  NONE = 0,\r\n  /** Is a signed type that can represent negative values. */\r\n  SIGNED = 1 << 0,\r\n  /** Is an unsigned type that cannot represent negative values. */\r\n  UNSIGNED = 1 << 1,\r\n  /** Is an integer type. */\r\n  INTEGER = 1 << 2,\r\n  /** Is a floating point type. */\r\n  FLOAT = 1 << 3,\r\n  /** Is a pointer type. */\r\n  POINTER = 1 << 4,\r\n  /** Is smaller than 32-bits. */\r\n  SHORT = 1 << 5,\r\n  /** Is larger than 32-bits. */\r\n  LONG = 1 << 6,\r\n  /** Is a value type. */\r\n  VALUE = 1 << 7,\r\n  /** Is a reference type. */\r\n  REFERENCE = 1 << 8,\r\n  /** Is a nullable type. */\r\n  NULLABLE = 1 << 9,\r\n  /** Is a vector type. */\r\n  VECTOR = 1 << 10\r\n}\r\n\r\nconst v128_zero = new Uint8Array(16);\r\n\r\n/** Represents a resolved type. */\r\nexport class Type {\r\n\r\n  /** Type kind. */\r\n  kind: TypeKind;\r\n  /** Type flags. */\r\n  flags: TypeFlags;\r\n  /** Size in bits. */\r\n  size: u32;\r\n  /** Size in bytes. */\r\n  byteSize: i32;\r\n  /** Underlying class reference, if a class type. */\r\n  classReference: Class | null;\r\n  /** Underlying signature reference, if a function type. */\r\n  signatureReference: Signature | null;\r\n  /** Respective non-nullable type, if nullable. */\r\n  nonNullableType: Type;\r\n  /** Cached nullable type, if non-nullable. */\r\n  private cachedNullableType: Type | null = null;\r\n\r\n  /** Constructs a new resolved type. */\r\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\r\n    this.kind = kind;\r\n    this.flags = flags;\r\n    this.size = size;\r\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\r\n    this.classReference = null;\r\n    this.signatureReference = null;\r\n    this.nonNullableType = this;\r\n  }\r\n\r\n  /** Returns the closest int type representing this type. */\r\n  get intType(): Type {\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return Type.i8;\r\n      case TypeKind.I16: return Type.i16;\r\n      case TypeKind.F32:\r\n      case TypeKind.I32: return Type.i32;\r\n      case TypeKind.F64:\r\n      case TypeKind.I64: return Type.i64;\r\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\r\n      case TypeKind.U8: return Type.u8;\r\n      case TypeKind.U16: return Type.u16;\r\n      case TypeKind.U32: return Type.u32;\r\n      case TypeKind.U64: return Type.u64;\r\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\r\n      case TypeKind.BOOL:\r\n      default: return Type.i32;\r\n    }\r\n  }\r\n\r\n  /** Gets this type's logarithmic alignment in memory. */\r\n  get alignLog2(): i32 {\r\n    return 31 - clz<i32>(this.byteSize);\r\n  }\r\n\r\n  /** Tests if this is a managed type that needs GC hooks. */\r\n  get isManaged(): bool {\r\n    var classReference = this.classReference;\r\n    return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\r\n  }\r\n\r\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\r\n  get isUnmanaged(): bool {\r\n    var classReference = this.classReference;\r\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\r\n  }\r\n\r\n  /** Computes the sign-extending shift in the target type. */\r\n  computeSmallIntegerShift(targetType: Type): u32 {\r\n    return targetType.size - this.size;\r\n  }\r\n\r\n  /** Computes the truncating mask in the target type. */\r\n  computeSmallIntegerMask(targetType: Type): u32 {\r\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\r\n    return ~0 >>> (targetType.size - size);\r\n  }\r\n\r\n  /** Tests if this type has (all of) the specified flags. */\r\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\r\n  /** Tests if this type has any of the specified flags. */\r\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\r\n\r\n  /** Composes a class type from this type and a class. */\r\n  asClass(classType: Class): Type {\r\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.classReference = classType;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes a function type from this type and a function. */\r\n  asFunction(signature: Signature): Type {\r\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.signatureReference = signature;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes the respective nullable type of this type. */\r\n  asNullable(): Type {\r\n    assert(this.is(TypeFlags.REFERENCE));\r\n    if (!this.cachedNullableType) {\r\n      assert(!this.is(TypeFlags.NULLABLE));\r\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\r\n      this.cachedNullableType.nonNullableType = this;\r\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\r\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\r\n    }\r\n    return this.cachedNullableType;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\r\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\r\n    var currentClass: Class | null;\r\n    var targetClass: Class | null;\r\n    var currentFunction: Signature | null;\r\n    var targetFunction: Signature | null;\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      if (target.is(TypeFlags.REFERENCE)) {\r\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\r\n          if (currentClass = this.classReference) {\r\n            if (targetClass = target.classReference) {\r\n              return currentClass.isAssignableTo(targetClass);\r\n            }\r\n          } else if (currentFunction = this.signatureReference) {\r\n            if (targetFunction = target.signatureReference) {\r\n              return currentFunction.isAssignableTo(targetFunction);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else if (!target.is(TypeFlags.REFERENCE)) {\r\n      if (this.is(TypeFlags.INTEGER)) {\r\n        if (target.is(TypeFlags.INTEGER)) {\r\n          if (\r\n            !signednessIsRelevant ||\r\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\r\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\r\n          ) {\r\n            return this.size <= target.size;\r\n          }\r\n        } else if (target.kind == TypeKind.F32) {\r\n          return this.size <= 23; // mantissa bits\r\n        } else if (target.kind == TypeKind.F64) {\r\n          return this.size <= 52; // ^\r\n        }\r\n      } else if (this.is(TypeFlags.FLOAT)) {\r\n        if (target.is(TypeFlags.FLOAT)) {\r\n          return this.size <= target.size;\r\n        }\r\n      } else if (this.is(TypeFlags.VECTOR)) {\r\n        if (target.is(TypeFlags.VECTOR)) {\r\n          return this.size == target.size;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\r\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\r\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\r\n    else if (target.is(TypeFlags.REFERENCE)) return false;\r\n    if (this.is(TypeFlags.INTEGER)) {\r\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\r\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\r\n      );\r\n    }\r\n    return this.kind == target.kind;\r\n  }\r\n\r\n  /** Determines the common denominator type of two types, if there is any. */\r\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\r\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\r\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\r\n    return null;\r\n  }\r\n\r\n  /** Converts this type to a string. */\r\n  toString(): string {\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      let classReference = this.classReference;\r\n      if (classReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? classReference.internalName + \" | null\"\r\n          : classReference.internalName;\r\n      }\r\n      let signatureReference = this.signatureReference;\r\n      if (signatureReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? \"(\" + signatureReference.toString() + \") | null\"\r\n          : signatureReference.toString();\r\n      }\r\n      assert(false);\r\n    }\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"i64\";\r\n      case TypeKind.ISIZE: return \"isize\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n      case TypeKind.U64: return \"u64\";\r\n      case TypeKind.USIZE: return \"usize\";\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.V128: return \"v128\";\r\n      default: assert(false);\r\n      case TypeKind.VOID: return \"void\";\r\n    }\r\n  }\r\n\r\n  // Binaryen specific\r\n\r\n  /** Converts this type to its respective native type. */\r\n  toNativeType(): NativeType {\r\n    switch (this.kind) {\r\n      default: return NativeType.I32;\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return NativeType.I64;\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\r\n      case TypeKind.F32: return NativeType.F32;\r\n      case TypeKind.F64: return NativeType.F64;\r\n      case TypeKind.V128: return NativeType.V128;\r\n      case TypeKind.VOID:  return NativeType.None;\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `0` value. */\r\n  toNativeZero(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.i32(0);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(0);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.i64(0);\r\n      case TypeKind.F32: return module.f32(0);\r\n      case TypeKind.F64: return module.f64(0);\r\n      case TypeKind.V128: return module.v128(v128_zero);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `1` value. */\r\n  toNativeOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.V128:\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.i32(1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.i64(1);\r\n      case TypeKind.F32: return module.f32(1);\r\n      case TypeKind.F64: return module.f64(1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `-1` value. */\r\n  toNativeNegOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.V128:\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.i32(-1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(-1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.i64(-1, -1);\r\n      case TypeKind.F32: return module.f32(-1);\r\n      case TypeKind.F64: return module.f64(-1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its signature string. */\r\n  toSignatureString(): string {\r\n    switch (this.kind) {\r\n      // same naming scheme as Binaryen\r\n      case TypeKind.I8:\r\n      case TypeKind.U8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U16:\r\n      case TypeKind.I32:\r\n      case TypeKind.U32:\r\n      case TypeKind.BOOL: return \"i\";\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return \"j\";\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? \"j\" : \"i\";\r\n      case TypeKind.F32: return \"f\";\r\n      case TypeKind.F64: return \"d\";\r\n      case TypeKind.V128: return \"V\";\r\n      case TypeKind.VOID: return \"v\";\r\n      default: assert(false);\r\n    }\r\n    return \"i\";\r\n  }\r\n\r\n  // Types\r\n\r\n  /** An 8-bit signed integer. */\r\n  static readonly i8: Type  = new Type(TypeKind.I8,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit signed integer. */\r\n  static readonly i16: Type = new Type(TypeKind.I16,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit signed integer. */\r\n  static readonly i32: Type = new Type(TypeKind.I32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed integer. */\r\n  static readonly i64: Type = new Type(TypeKind.I64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit signed size. WASM32 only. */\r\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed size. WASM64 only. */\r\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  static readonly u8: Type = new Type(TypeKind.U8,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit unsigned integer. */\r\n  static readonly u16: Type = new Type(TypeKind.U16,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit unsigned integer. */\r\n  static readonly u32: Type = new Type(TypeKind.U32,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned integer. */\r\n  static readonly u64: Type = new Type(TypeKind.U64,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit unsigned size. WASM32 only. */\r\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned size. WASM64 only. */\r\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 1-bit unsigned integer. */\r\n  static readonly bool: Type = new Type(TypeKind.BOOL,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   1\r\n  );\r\n\r\n  /** A 32-bit float. */\r\n  static readonly f32: Type = new Type(TypeKind.F32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit float. */\r\n  static readonly f64: Type = new Type(TypeKind.F64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 128-bit vector. */\r\n  static readonly v128: Type = new Type(TypeKind.V128,\r\n    TypeFlags.VECTOR   |\r\n    TypeFlags.VALUE, 128\r\n  );\r\n\r\n  /** No return type. */\r\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\r\n}\r\n\r\n/** Converts an array of types to an array of native types. */\r\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\r\n  var numTypes = types.length;\r\n  var ret = new Array<NativeType>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\r\n  return ret;\r\n}\r\n\r\n/** Converts an array of types to its combined string representation. */\r\nexport function typesToString(types: Type[]): string {\r\n  var numTypes = types.length;\r\n  if (!numTypes) return \"\";\r\n  var sb = new Array<string>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\r\n  return sb.join(\",\");\r\n}\r\n\r\n/** Represents a fully resolved function signature. */\r\nexport class Signature {\r\n\r\n  /** Parameter types, if any, excluding `this`. */\r\n  parameterTypes: Type[];\r\n  /** Parameter names, if known, excluding `this`. */\r\n  parameterNames: string[] | null;\r\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\r\n  requiredParameters: i32;\r\n  /** Return type. */\r\n  returnType: Type;\r\n  /** This type, if an instance signature. */\r\n  thisType: Type | null;\r\n  /** Whether the last parameter is a rest parameter. */\r\n  hasRest: bool;\r\n  /** Cached {@link FunctionTarget}. */\r\n  cachedFunctionTarget: FunctionTarget | null = null;\r\n  /** Respective function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new signature. */\r\n  constructor(\r\n    parameterTypes: Type[] | null = null,\r\n    returnType: Type | null = null,\r\n    thisType: Type | null = null\r\n  ) {\r\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\r\n    this.parameterNames = null;\r\n    this.requiredParameters = 0;\r\n    this.returnType = returnType ? returnType : Type.void;\r\n    this.thisType = thisType;\r\n    this.hasRest = false;\r\n    this.type = Type.u32.asFunction(this);\r\n  }\r\n\r\n  asFunctionTarget(program: Program): FunctionTarget {\r\n    var target = this.cachedFunctionTarget;\r\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\r\n    else assert(target.program == program);\r\n    return target;\r\n  }\r\n\r\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\r\n  getParameterName(index: i32): string {\r\n    var parameterNames = this.parameterNames;\r\n    return parameterNames && parameterNames.length > index\r\n      ? parameterNames[index]\r\n      : getDefaultParameterName(index);\r\n  }\r\n\r\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\r\n  isAssignableTo(target: Signature): bool {\r\n    // TODO: maybe cache results?\r\n\r\n    // check `this` type\r\n    var thisThisType = this.thisType;\r\n    var targetThisType = target.thisType;\r\n    if (thisThisType) {\r\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\r\n    } else if (targetThisType) {\r\n      return false;\r\n    }\r\n\r\n    // check rest parameter\r\n    if (this.hasRest != target.hasRest) return false; // TODO\r\n\r\n    // check parameter types\r\n    var thisParameterTypes = this.parameterTypes;\r\n    var targetParameterTypes = target.parameterTypes;\r\n    var numParameters = thisParameterTypes.length;\r\n    if (numParameters != targetParameterTypes.length) return false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let thisParameterType = thisParameterTypes[i];\r\n      let targetParameterType = targetParameterTypes[i];\r\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\r\n    }\r\n\r\n    // check return type\r\n    var thisReturnType = this.returnType;\r\n    var targetReturnType = target.returnType;\r\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\r\n  }\r\n\r\n  /** Converts a signature to a function type string. */\r\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\r\n    var sb = [];\r\n    sb.push(returnType.toSignatureString());\r\n    if (thisType) sb.push(thisType.toSignatureString());\r\n    if (parameterTypes) {\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\r\n    }\r\n    return \"FUNCSIG$\" + sb.join(\"\");\r\n  }\r\n\r\n  /** Converts this signature to a function type string. */\r\n  toSignatureString(): string {\r\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\r\n  }\r\n\r\n  /** Converts this signature to a string. */\r\n  toString(): string {\r\n    var sb = new Array<string>();\r\n    sb.push(\"(\");\r\n    var index = 0;\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      sb.push(\"this: \");\r\n      assert(!thisType.signatureReference);\r\n      sb.push(thisType.toString());\r\n      index = 1;\r\n    }\r\n    var parameters = this.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    if (numParameters) {\r\n      let names = this.parameterNames;\r\n      let numNames = names ? names.length : 0;\r\n      let optionalStart = this.requiredParameters;\r\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        if (index) sb.push(\", \");\r\n        if (i == restIndex) sb.push(\"...\");\r\n        if (i < numNames) sb.push((<string[]>names)[i]);\r\n        else sb.push(getDefaultParameterName(i));\r\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\r\n        else sb.push(\": \");\r\n        sb.push(parameters[i].toString());\r\n      }\r\n    }\r\n    sb.push(\") => \");\r\n    sb.push(this.returnType.toString());\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n// Cached default parameter names used where names are unknown.\r\nvar cachedDefaultParameterNames: string[] | null = null;\r\n\r\n/** Gets the cached default parameter name for the specified index. */\r\nexport function getDefaultParameterName(index: i32): string {\r\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\r\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\r\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\r\n  }\r\n  return cachedDefaultParameterNames[index - 1];\r\n}\r\n","/**\r\n * A TypeScript tokenizer modified for AssemblyScript.\r\n *\r\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\r\n * ambiguous tokens.\r\n *\r\n * @module tokenizer\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Source,\r\n  CommentKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  CharCode,\r\n  isLineBreak,\r\n  isWhiteSpace,\r\n  isIdentifierStart,\r\n  isIdentifierPart,\r\n  isDecimalDigit,\r\n  isOctalDigit,\r\n  isKeywordCharacter\r\n} from \"./util\";\r\n\r\n/** Named token types. */\r\nexport enum Token {\r\n\r\n  // keywords\r\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\r\n\r\n  ABSTRACT,\r\n  AS,\r\n  ASYNC,\r\n  AWAIT,        // ES2017\r\n  BREAK,        // ES2017\r\n  CASE,         // ES2017\r\n  CATCH,        // ES2017\r\n  CLASS,        // ES2017\r\n  CONST,        // ES2017\r\n  CONTINUE,     // ES2017\r\n  CONSTRUCTOR,\r\n  DEBUGGER,     // ES2017\r\n  DECLARE,\r\n  DEFAULT,      // ES2017\r\n  DELETE,       // ES2017\r\n  DO,           // ES2017\r\n  ELSE,         // ES2017\r\n  ENUM,         // ES2017 future\r\n  EXPORT,       // ES2017\r\n  EXTENDS,      // ES2017\r\n  FALSE,        // ES\r\n  FINALLY,      // ES2017\r\n  FOR,          // ES2017\r\n  FROM,         // AS possible identifier\r\n  FUNCTION,     // ES2017\r\n  GET,\r\n  IF,           // ES2017\r\n  IMPLEMENTS,   // ES2017 non-lexical\r\n  IMPORT,       // ES2017\r\n  IN,           // ES2017\r\n  INSTANCEOF,   // ES2017\r\n  INTERFACE,    // ES2017 non-lexical\r\n  IS,\r\n  KEYOF,\r\n  LET,          // ES2017 non-lexical\r\n  MODULE,       // AS possible identifier\r\n  NAMESPACE,    // AS possible identifier\r\n  NEW,          // ES2017\r\n  NULL,         // ES\r\n  OF,\r\n  PACKAGE,      // ES2017 non-lexical\r\n  PRIVATE,      // ES2017 non-lexical\r\n  PROTECTED,    // ES2017 non-lexical\r\n  PUBLIC,       // ES2017 non-lexical\r\n  READONLY,\r\n  RETURN,       // ES2017\r\n  SET,\r\n  STATIC,       // ES2017 non-lexical\r\n  SUPER,        // ES2017\r\n  SWITCH,       // ES2017\r\n  THIS,         // ES2017\r\n  THROW,        // ES2017\r\n  TRUE,         // ES\r\n  TRY,          // ES2017\r\n  TYPE,         // AS possible identifier\r\n  TYPEOF,       // ES2017\r\n  VAR,          // ES2017\r\n  VOID,         // ES2017\r\n  WHILE,        // ES2017\r\n  WITH,         // ES2017\r\n  YIELD,        // ES2017\r\n\r\n  // punctuation\r\n\r\n  OPENBRACE,\r\n  CLOSEBRACE,\r\n  OPENPAREN,\r\n  CLOSEPAREN,\r\n  OPENBRACKET,\r\n  CLOSEBRACKET,\r\n  DOT,\r\n  DOT_DOT_DOT,\r\n  SEMICOLON,\r\n  COMMA,\r\n  LESSTHAN,\r\n  GREATERTHAN,\r\n  LESSTHAN_EQUALS,\r\n  GREATERTHAN_EQUALS,\r\n  EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS,\r\n  EQUALS_EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS_EQUALS,\r\n  EQUALS_GREATERTHAN,\r\n  PLUS,\r\n  MINUS,\r\n  ASTERISK_ASTERISK,\r\n  ASTERISK,\r\n  SLASH,\r\n  PERCENT,\r\n  PLUS_PLUS,\r\n  MINUS_MINUS,\r\n  LESSTHAN_LESSTHAN,\r\n  GREATERTHAN_GREATERTHAN,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\r\n  AMPERSAND,\r\n  BAR,\r\n  CARET,\r\n  EXCLAMATION,\r\n  TILDE,\r\n  AMPERSAND_AMPERSAND,\r\n  BAR_BAR,\r\n  QUESTION,\r\n  COLON,\r\n  EQUALS,\r\n  PLUS_EQUALS,\r\n  MINUS_EQUALS,\r\n  ASTERISK_EQUALS,\r\n  ASTERISK_ASTERISK_EQUALS,\r\n  SLASH_EQUALS,\r\n  PERCENT_EQUALS,\r\n  LESSTHAN_LESSTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\r\n  AMPERSAND_EQUALS,\r\n  BAR_EQUALS,\r\n  CARET_EQUALS,\r\n  AT,\r\n\r\n  // literals\r\n\r\n  IDENTIFIER,\r\n  STRINGLITERAL,\r\n  INTEGERLITERAL,\r\n  FLOATLITERAL,\r\n\r\n  // meta\r\n\r\n  INVALID,\r\n  ENDOFFILE\r\n}\r\n\r\nexport enum IdentifierHandling {\r\n  DEFAULT,\r\n  PREFER,\r\n  ALWAYS\r\n}\r\n\r\nexport function tokenFromKeyword(text: string): Token {\r\n  assert(text.length);\r\n  switch (text.charCodeAt(0)) {\r\n    case CharCode.a: {\r\n      switch (text) {\r\n        case \"abstract\": return Token.ABSTRACT;\r\n        case \"as\": return Token.AS;\r\n        case \"async\": return Token.ASYNC;\r\n        case \"await\": return Token.AWAIT;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.b: {\r\n      switch (text) {\r\n        case \"break\": return Token.BREAK;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.c: {\r\n      switch (text) {\r\n        case \"case\": return Token.CASE;\r\n        case \"catch\": return Token.CATCH;\r\n        case \"class\": return Token.CLASS;\r\n        case \"continue\": return Token.CONTINUE;\r\n        case \"const\": return Token.CONST;\r\n        case \"constructor\": return Token.CONSTRUCTOR;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.d: {\r\n      switch (text) {\r\n        case \"debugger\": return Token.DEBUGGER;\r\n        case \"declare\": return Token.DECLARE;\r\n        case \"default\": return Token.DEFAULT;\r\n        case \"delete\": return Token.DELETE;\r\n        case \"do\": return Token.DO;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.e: {\r\n      switch (text) {\r\n        case \"else\": return Token.ELSE;\r\n        case \"enum\": return Token.ENUM;\r\n        case \"export\": return Token.EXPORT;\r\n        case \"extends\": return Token.EXTENDS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.f: {\r\n      switch (text) {\r\n        case \"false\": return Token.FALSE;\r\n        case \"finally\": return Token.FINALLY;\r\n        case \"for\": return Token.FOR;\r\n        case \"from\": return Token.FROM;\r\n        case \"function\": return Token.FUNCTION;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.g: {\r\n      switch (text) {\r\n        case \"get\": return Token.GET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.i: {\r\n      switch (text) {\r\n        case \"if\": return Token.IF;\r\n        case \"implements\": return Token.IMPLEMENTS;\r\n        case \"import\": return Token.IMPORT;\r\n        case \"in\": return Token.IN;\r\n        case \"instanceof\": return Token.INSTANCEOF;\r\n        case \"interface\": return Token.INTERFACE;\r\n        case \"is\": return Token.IS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.k: {\r\n      switch (text) {\r\n        case \"keyof\": return Token.KEYOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.l: {\r\n      switch (text) {\r\n        case \"let\": return Token.LET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.m: {\r\n      switch (text) {\r\n        case \"module\": return Token.MODULE;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.n: {\r\n      switch (text) {\r\n        case \"namespace\": return Token.NAMESPACE;\r\n        case \"new\": return Token.NEW;\r\n        case \"null\": return Token.NULL;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.o: {\r\n      switch (text) {\r\n        case \"of\": return Token.OF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.p: {\r\n      switch (text) {\r\n        case \"package\": return Token.PACKAGE;\r\n        case \"private\": return Token.PRIVATE;\r\n        case \"protected\": return Token.PROTECTED;\r\n        case \"public\": return Token.PUBLIC;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.r: {\r\n      switch (text) {\r\n        case \"readonly\": return Token.READONLY;\r\n        case \"return\": return Token.RETURN;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.s: {\r\n      switch (text) {\r\n        case \"set\": return Token.SET;\r\n        case \"static\": return Token.STATIC;\r\n        case \"super\": return Token.SUPER;\r\n        case \"switch\": return Token.SWITCH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.t: {\r\n      switch (text) {\r\n        case \"this\": return Token.THIS;\r\n        case \"throw\": return Token.THROW;\r\n        case \"true\": return Token.TRUE;\r\n        case \"try\": return Token.TRY;\r\n        case \"type\": return Token.TYPE;\r\n        case \"typeof\": return Token.TYPEOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.v: {\r\n      switch (text) {\r\n        case \"var\": return Token.VAR;\r\n        case \"void\": return Token.VOID;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.w: {\r\n      switch (text) {\r\n        case \"while\": return Token.WHILE;\r\n        case \"with\": return Token.WITH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.y: {\r\n      switch (text) {\r\n        case \"yield\": return Token.YIELD;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return Token.INVALID;\r\n}\r\n\r\nexport function tokenIsAlsoIdentifier(token: Token): bool {\r\n  switch (token) {\r\n    case Token.ABSTRACT:\r\n    case Token.AS:\r\n    case Token.CONSTRUCTOR:\r\n    case Token.DECLARE:\r\n    case Token.DELETE:\r\n    case Token.FROM:\r\n    case Token.FOR:\r\n    case Token.GET:\r\n    case Token.INSTANCEOF:\r\n    case Token.IS:\r\n    case Token.KEYOF:\r\n    case Token.MODULE:\r\n    case Token.NAMESPACE:\r\n    case Token.READONLY:\r\n    case Token.SET:\r\n    case Token.TYPE:\r\n    case Token.VOID: return true;\r\n    default: return false;\r\n  }\r\n}\r\n\r\nexport function operatorTokenToString(token: Token): string {\r\n  switch (token) {\r\n    case Token.DELETE: return \"delete\";\r\n    case Token.IN: return \"in\";\r\n    case Token.INSTANCEOF: return \"instanceof\";\r\n    case Token.NEW: return \"new\";\r\n    case Token.TYPEOF: return \"typeof\";\r\n    case Token.VOID: return \"void\";\r\n    case Token.YIELD: return \"yield\";\r\n    case Token.DOT_DOT_DOT: return \"...\";\r\n    case Token.COMMA: return \",\";\r\n    case Token.LESSTHAN: return \"<\";\r\n    case Token.GREATERTHAN: return \">\";\r\n    case Token.LESSTHAN_EQUALS: return \"<=\";\r\n    case Token.GREATERTHAN_EQUALS: return \">=\";\r\n    case Token.EQUALS_EQUALS: return \"==\";\r\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\r\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\r\n    case Token.PLUS: return \"+\";\r\n    case Token.MINUS: return \"-\";\r\n    case Token.ASTERISK_ASTERISK: return \"**\";\r\n    case Token.ASTERISK: return \"*\";\r\n    case Token.SLASH: return \"/\";\r\n    case Token.PERCENT: return \"%\";\r\n    case Token.PLUS_PLUS: return \"++\";\r\n    case Token.MINUS_MINUS: return \"--\";\r\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\r\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\r\n    case Token.AMPERSAND: return \"&\";\r\n    case Token.BAR: return \"|\";\r\n    case Token.CARET: return \"^\";\r\n    case Token.EXCLAMATION: return \"!\";\r\n    case Token.TILDE: return \"~\";\r\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\r\n    case Token.BAR_BAR: return \"||\";\r\n    case Token.EQUALS: return \"=\";\r\n    case Token.PLUS_EQUALS: return \"+=\";\r\n    case Token.MINUS_EQUALS: return \"-=\";\r\n    case Token.ASTERISK_EQUALS: return \"*=\";\r\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\r\n    case Token.SLASH_EQUALS: return \"/=\";\r\n    case Token.PERCENT_EQUALS: return \"%=\";\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\r\n    case Token.AMPERSAND_EQUALS: return \"&=\";\r\n    case Token.BAR_EQUALS: return \"|=\";\r\n    case Token.CARET_EQUALS: return \"^=\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\nexport class Range {\r\n\r\n  source: Source;\r\n  start: i32;\r\n  end: i32;\r\n\r\n  // TODO: set these while tokenizing\r\n  // line: i32;\r\n  // column: i32;\r\n\r\n  constructor(source: Source, start: i32, end: i32) {\r\n    this.source = source;\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n\r\n  static join(a: Range, b: Range): Range {\r\n    if (a.source != b.source) throw new Error(\"source mismatch\");\r\n    return new Range(a.source,\r\n      a.start < b.start ? a.start : b.start,\r\n      a.end > b.end ? a.end : b.end\r\n    );\r\n  }\r\n\r\n  get atStart(): Range {\r\n    return new Range(this.source, this.start, this.start);\r\n  }\r\n\r\n  get atEnd(): Range {\r\n    return new Range(this.source, this.end, this.end);\r\n  }\r\n\r\n  get line(): i32 {\r\n    var text = this.source.text;\r\n    var line = 1;\r\n    for (let pos = this.start; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\r\n    }\r\n    return line;\r\n  }\r\n\r\n  get column(): i32 {\r\n    var text = this.source.text;\r\n    var column = 0;\r\n    for (let pos = this.start - 1; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\r\n      ++column;\r\n    }\r\n    return column;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.source.text.substring(this.start, this.end);\r\n  }\r\n\r\n  debugInfoRef: usize = 0;\r\n}\r\n\r\ndeclare function parseFloat(str: string): f64;\r\n\r\n/** Handler for intercepting comments while tokenizing. */\r\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\r\n\r\n/** Tokenizes a source to individual {@link Token}s. */\r\nexport class Tokenizer extends DiagnosticEmitter {\r\n\r\n  source: Source;\r\n  end: i32 = 0;\r\n\r\n  pos: i32 = 0;\r\n  token: Token = -1;\r\n  tokenPos: i32 = 0;\r\n\r\n  nextToken: Token = -1;\r\n  nextTokenPos: i32 = 0;\r\n  nextTokenOnNewLine: bool = false;\r\n\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new tokenizer. */\r\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n\r\n    this.source = source;\r\n    this.pos = 0;\r\n    this.end = source.text.length;\r\n    this.diagnostics = diagnostics || new Array();\r\n\r\n    var end = this.end;\r\n    var text = source.text;\r\n\r\n    // skip bom\r\n    if (\r\n      this.pos < end &&\r\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\r\n    ) {\r\n      ++this.pos;\r\n    }\r\n\r\n    // skip shebang\r\n    if (\r\n      this.pos + 1 < end &&\r\n      text.charCodeAt(this.pos) == CharCode.HASH &&\r\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\r\n    ) {\r\n      this.pos += 2;\r\n      while (\r\n        this.pos < end &&\r\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\r\n      ) {\r\n        ++this.pos;\r\n      }\r\n      // 'next' now starts at lf or eof\r\n    }\r\n  }\r\n\r\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\r\n    this.nextToken = -1;\r\n    return this.token = this.unsafeNext(identifierHandling);\r\n  }\r\n\r\n  private unsafeNext(\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxTokenLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var end = this.end;\r\n    var text = this.source.text;\r\n    while (this.pos < end) {\r\n      this.tokenPos = this.pos;\r\n      let c = text.charCodeAt(this.pos);\r\n      switch (c) {\r\n        case CharCode.CARRIAGERETURN: {\r\n          if (!(\r\n            ++this.pos < end &&\r\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n          )) break;\r\n          // otherwise fall-through\r\n        }\r\n        case CharCode.LINEFEED:\r\n        case CharCode.TAB:\r\n        case CharCode.VERTICALTAB:\r\n        case CharCode.FORMFEED:\r\n        case CharCode.SPACE: {\r\n          ++this.pos;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            if (\r\n              maxTokenLength > 2 && this.pos < end &&\r\n              text.charCodeAt(this.pos) == CharCode.EQUALS\r\n            ) {\r\n              ++this.pos;\r\n              return Token.EXCLAMATION_EQUALS_EQUALS;\r\n            }\r\n            return Token.EXCLAMATION_EQUALS;\r\n          }\r\n          return Token.EXCLAMATION;\r\n        }\r\n        case CharCode.DOUBLEQUOTE:\r\n        case CharCode.SINGLEQUOTE:\r\n        case CharCode.BACKTICK: { // TODO\r\n          return Token.STRINGLITERAL; // expects a call to readString\r\n        }\r\n        case CharCode.PERCENT: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.PERCENT_EQUALS;\r\n          }\r\n          return Token.PERCENT;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.AMPERSAND) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_AMPERSAND;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_EQUALS;\r\n            }\r\n          }\r\n          return Token.AMPERSAND;\r\n        }\r\n        case CharCode.OPENPAREN: {\r\n          ++this.pos;\r\n          return Token.OPENPAREN;\r\n        }\r\n        case CharCode.CLOSEPAREN: {\r\n          ++this.pos;\r\n          return Token.CLOSEPAREN;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.ASTERISK_EQUALS;\r\n            }\r\n            if (chr == CharCode.ASTERISK) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 && this.pos < end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.ASTERISK_ASTERISK_EQUALS;\r\n              }\r\n              return Token.ASTERISK_ASTERISK;\r\n            }\r\n          }\r\n          return Token.ASTERISK;\r\n        }\r\n        case CharCode.PLUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.PLUS) {\r\n              ++this.pos;\r\n              return Token.PLUS_PLUS;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.PLUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.PLUS;\r\n        }\r\n        case CharCode.COMMA: {\r\n          ++this.pos;\r\n          return Token.COMMA;\r\n        }\r\n        case CharCode.MINUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.MINUS) {\r\n              ++this.pos;\r\n              return Token.MINUS_MINUS;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.MINUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.MINUS;\r\n        }\r\n        case CharCode.DOT: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (isDecimalDigit(chr)) {\r\n              --this.pos;\r\n              return Token.FLOATLITERAL; // expects a call to readFloat\r\n            }\r\n            if (\r\n              maxTokenLength > 2 && this.pos + 1 < end &&\r\n              chr == CharCode.DOT &&\r\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\r\n            ) {\r\n              this.pos += 2;\r\n              return Token.DOT_DOT_DOT;\r\n            }\r\n          }\r\n          return Token.DOT;\r\n        }\r\n        case CharCode.SLASH: {\r\n          let commentStartPos = this.pos;\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.SLASH) { // single-line\r\n              let commentKind = CommentKind.LINE;\r\n              if (\r\n                this.pos + 1 < end &&\r\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n              ) {\r\n                ++this.pos;\r\n                commentKind = CommentKind.TRIPLE;\r\n              }\r\n              while (++this.pos < end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\r\n                  ++this.pos;\r\n                  break;\r\n                }\r\n              }\r\n              if (this.onComment) {\r\n                this.onComment(\r\n                  commentKind,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (chr == CharCode.ASTERISK) { // multi-line\r\n              let closed = false;\r\n              while (++this.pos < end) {\r\n                c = text.charCodeAt(this.pos);\r\n                if (\r\n                  c == CharCode.ASTERISK &&\r\n                  this.pos + 1 < end &&\r\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n                ) {\r\n                  this.pos += 2;\r\n                  closed = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!closed) {\r\n                this.error(\r\n                  DiagnosticCode._0_expected,\r\n                  this.range(this.pos), \"*/\"\r\n                );\r\n              } else if (this.onComment) {\r\n                this.onComment(\r\n                  CommentKind.BLOCK,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.SLASH_EQUALS;\r\n            }\r\n          }\r\n          return Token.SLASH;\r\n        }\r\n        case CharCode._0:\r\n        case CharCode._1:\r\n        case CharCode._2:\r\n        case CharCode._3:\r\n        case CharCode._4:\r\n        case CharCode._5:\r\n        case CharCode._6:\r\n        case CharCode._7:\r\n        case CharCode._8:\r\n        case CharCode._9: {\r\n          return this.testInteger()\r\n            ? Token.INTEGERLITERAL // expects a call to readInteger\r\n            : Token.FLOATLITERAL;  // expects a call to readFloat\r\n        }\r\n        case CharCode.COLON: {\r\n          ++this.pos;\r\n          return Token.COLON;\r\n        }\r\n        case CharCode.SEMICOLON: {\r\n          ++this.pos;\r\n          return Token.SEMICOLON;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.LESSTHAN) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\r\n              }\r\n              return Token.LESSTHAN_LESSTHAN;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.LESSTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.LESSTHAN;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.EQUALS_EQUALS_EQUALS;\r\n              }\r\n              return Token.EQUALS_EQUALS;\r\n            }\r\n            if (chr == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              return Token.EQUALS_GREATERTHAN;\r\n            }\r\n          }\r\n          return Token.EQUALS;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              if (maxTokenLength > 2 && this.pos < end) {\r\n                chr = text.charCodeAt(this.pos);\r\n                if (chr == CharCode.GREATERTHAN) {\r\n                  ++this.pos;\r\n                  if (\r\n                    maxTokenLength > 3 && this.pos < end &&\r\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\r\n                  ) {\r\n                    ++this.pos;\r\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\r\n                  }\r\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\r\n                }\r\n                if (chr == CharCode.EQUALS) {\r\n                  ++this.pos;\r\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\r\n                }\r\n              }\r\n              return Token.GREATERTHAN_GREATERTHAN;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.GREATERTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.GREATERTHAN;\r\n        }\r\n        case CharCode.QUESTION: {\r\n          ++this.pos;\r\n          return Token.QUESTION;\r\n        }\r\n        case CharCode.OPENBRACKET: {\r\n          ++this.pos;\r\n          return Token.OPENBRACKET;\r\n        }\r\n        case CharCode.CLOSEBRACKET: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACKET;\r\n        }\r\n        case CharCode.CARET: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.CARET_EQUALS;\r\n          }\r\n          return Token.CARET;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          ++this.pos;\r\n          return Token.OPENBRACE;\r\n        }\r\n        case CharCode.BAR: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.BAR) {\r\n              ++this.pos;\r\n              return Token.BAR_BAR;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.BAR_EQUALS;\r\n            }\r\n          }\r\n          return Token.BAR;\r\n        }\r\n        case CharCode.CLOSEBRACE: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACE;\r\n        }\r\n        case CharCode.TILDE: {\r\n          ++this.pos;\r\n          return Token.TILDE;\r\n        }\r\n        case CharCode.AT: {\r\n          ++this.pos;\r\n          return Token.AT;\r\n        }\r\n        default: {\r\n          if (isIdentifierStart(c)) {\r\n            if (isKeywordCharacter(c)) {\r\n              let posBefore = this.pos;\r\n              while (\r\n                ++this.pos < end &&\r\n                isIdentifierPart(c = text.charCodeAt(this.pos))\r\n              ) {\r\n                if (!isKeywordCharacter(c)) {\r\n                  this.pos = posBefore;\r\n                  return Token.IDENTIFIER;\r\n                }\r\n              }\r\n              let keywordText = text.substring(posBefore, this.pos);\r\n              let keywordToken = tokenFromKeyword(keywordText);\r\n              if (\r\n                keywordToken !== Token.INVALID &&\r\n                identifierHandling !== IdentifierHandling.ALWAYS &&\r\n                !(\r\n                  identifierHandling === IdentifierHandling.PREFER &&\r\n                  tokenIsAlsoIdentifier(keywordToken)\r\n                )\r\n              ) {\r\n                return keywordToken;\r\n              }\r\n              this.pos = posBefore;\r\n            }\r\n            return Token.IDENTIFIER; // expects a call to readIdentifier\r\n          } else if (isWhiteSpace(c)) {\r\n            ++this.pos;\r\n            break;\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Invalid_character,\r\n            this.range(this.pos, this.pos + 1)\r\n          );\r\n          ++this.pos;\r\n          return Token.INVALID;\r\n        }\r\n      }\r\n    }\r\n    return Token.ENDOFFILE;\r\n  }\r\n\r\n  peek(\r\n    checkOnNewLine: bool = false,\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxCompoundLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    if (this.nextToken < 0) {\r\n      let posBefore = this.pos;\r\n      let tokenBefore = this.token;\r\n      let tokenPosBefore = this.tokenPos;\r\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n      this.nextTokenPos = this.tokenPos;\r\n      if (checkOnNewLine) {\r\n        this.nextTokenOnNewLine = false;\r\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\r\n          if (isLineBreak(text.charCodeAt(pos))) {\r\n            this.nextTokenOnNewLine = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n    }\r\n    return this.nextToken;\r\n  }\r\n\r\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\r\n    return this.skip(Token.IDENTIFIER, identifierHandling);\r\n  }\r\n\r\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\r\n    var posBefore = this.pos;\r\n    var tokenBefore = this.token;\r\n    var tokenPosBefore = this.tokenPos;\r\n    var maxCompoundLength = i32.MAX_VALUE;\r\n    switch (token) {\r\n      case Token.GREATERTHAN: { // where parsing type arguments\r\n        maxCompoundLength = 1;\r\n        break;\r\n      }\r\n    }\r\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n    if (this.token == token) {\r\n      this.nextToken = -1;\r\n      return true;\r\n    } else {\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  mark(): State {\r\n    var state: State;\r\n    if (reusableState) {\r\n      state = reusableState;\r\n      reusableState = null;\r\n    } else {\r\n      state = new State();\r\n    }\r\n    state.pos = this.pos;\r\n    state.token = this.token;\r\n    state.tokenPos = this.tokenPos;\r\n    return state;\r\n  }\r\n\r\n  discard(state: State): void {\r\n    reusableState = state;\r\n  }\r\n\r\n  reset(state: State): void {\r\n    this.pos = state.pos;\r\n    this.token = state.token;\r\n    this.tokenPos = state.tokenPos;\r\n    this.nextToken = -1;\r\n  }\r\n\r\n  range(start: i32 = -1, end: i32 = -1): Range {\r\n    if (start < 0) {\r\n      start = this.tokenPos;\r\n      end = this.pos;\r\n    } else if (end < 0) {\r\n      end = start;\r\n    }\r\n    return new Range(this.source, start, end);\r\n  }\r\n\r\n  readIdentifier(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    while (\r\n      ++this.pos < end &&\r\n      isIdentifierPart(text.charCodeAt(this.pos))\r\n    );\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readString(): string {\r\n    var text = this.source.text;\r\n    var quote = text.charCodeAt(this.pos++);\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    var result = \"\";\r\n    while (true) {\r\n      if (this.pos >= end) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, end)\r\n        );\r\n        break;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == quote) {\r\n        result += text.substring(start, this.pos++);\r\n        break;\r\n      }\r\n      if (c == CharCode.BACKSLASH) {\r\n        result += text.substring(start, this.pos);\r\n        result += this.readEscapeSequence();\r\n        start = this.pos;\r\n        continue;\r\n      }\r\n      if (isLineBreak(c)) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  readEscapeSequence(): string {\r\n    var end = this.end;\r\n    if (++this.pos >= end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(end)\r\n      );\r\n      return \"\";\r\n    }\r\n\r\n    var text = this.source.text;\r\n    var c = text.charCodeAt(this.pos++);\r\n    switch (c) {\r\n      case CharCode._0: return \"\\0\";\r\n      case CharCode.b: return \"\\b\";\r\n      case CharCode.t: return \"\\t\";\r\n      case CharCode.n: return \"\\n\";\r\n      case CharCode.v: return \"\\v\";\r\n      case CharCode.f: return \"\\f\";\r\n      case CharCode.r: return \"\\r\";\r\n      case CharCode.SINGLEQUOTE: return \"'\";\r\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\r\n      case CharCode.u: {\r\n        if (\r\n          this.pos < end &&\r\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\r\n        ) {\r\n          ++this.pos;\r\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\r\n        }\r\n        return this.readUnicodeEscape(); // \\uDDDD\r\n      }\r\n      case CharCode.CARRIAGERETURN: {\r\n        if (\r\n          this.pos < end &&\r\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        // fall through\r\n      }\r\n      case CharCode.LINEFEED:\r\n      case CharCode.LINESEPARATOR:\r\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\r\n      default: return String.fromCharCode(c);\r\n    }\r\n  }\r\n\r\n  readRegexpPattern(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    var escaped = false;\r\n    while (true) {\r\n      if (this.pos >= end) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, end)\r\n        );\r\n        break;\r\n      }\r\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\r\n        ++this.pos;\r\n        escaped = true;\r\n        continue;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (!escaped && c == CharCode.SLASH) break;\r\n      if (isLineBreak(c)) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n      escaped = false;\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readRegexpFlags(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    var flags = 0;\r\n    while (this.pos < end) {\r\n      let c: i32 = text.charCodeAt(this.pos);\r\n      if (!isIdentifierPart(c)) break;\r\n      ++this.pos;\r\n\r\n      // make sure each supported flag is unique\r\n      switch (c) {\r\n        case CharCode.g: {\r\n          flags |= flags & 1 ? -1 : 1;\r\n          break;\r\n        }\r\n        case CharCode.i: {\r\n          flags |= flags & 2 ? -1 : 2;\r\n          break;\r\n        }\r\n        case CharCode.m: {\r\n          flags |= flags & 4 ? -1 : 4;\r\n          break;\r\n        }\r\n        default: {\r\n          flags = -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (flags == -1) {\r\n      this.error(\r\n        DiagnosticCode.Invalid_regular_expression_flags,\r\n        this.range(start, this.pos)\r\n      );\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  testInteger(): bool {\r\n    var end = this.end;\r\n    var text = this.source.text;\r\n    if (this.pos + 1 < end && text.charCodeAt(this.pos) == CharCode._0) {\r\n      switch (text.charCodeAt(this.pos + 2)) {\r\n        case CharCode.x:\r\n        case CharCode.X:\r\n        case CharCode.b:\r\n        case CharCode.B:\r\n        case CharCode.o:\r\n        case CharCode.O: return true;\r\n      }\r\n    }\r\n    var pos = this.pos;\r\n    while (pos < end) {\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode.DOT || c == CharCode.e || c == CharCode.E) return false;\r\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\r\n      // does not validate separator placement (this is done in readXYInteger)\r\n      pos++;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  readInteger(): I64 {\r\n    var text = this.source.text;\r\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\r\n      switch (text.charCodeAt(this.pos + 1)) {\r\n        case CharCode.x:\r\n        case CharCode.X: {\r\n          this.pos += 2;\r\n          return this.readHexInteger();\r\n        }\r\n        case CharCode.b:\r\n        case CharCode.B: {\r\n          this.pos += 2;\r\n          return this.readBinaryInteger();\r\n        }\r\n        case CharCode.o:\r\n        case CharCode.O: {\r\n          this.pos += 2;\r\n          return this.readOctalInteger();\r\n        }\r\n      }\r\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\r\n        let start = this.pos;\r\n        ++this.pos;\r\n        let value = this.readOctalInteger();\r\n        this.error(\r\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\r\n          this.range(start, this.pos)\r\n        );\r\n        return value;\r\n      }\r\n    }\r\n    return this.readDecimalInteger();\r\n  }\r\n\r\n  readHexInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0);\r\n    var i64_4 = i64_new(4);\r\n    var sepEnd = start;\r\n    var end = this.end;\r\n    while (this.pos < end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = (value << 4) + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_shl(value, i64_4),\r\n          i64_new(c - CharCode._0)\r\n        );\r\n       } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        // value = (value << 4) + 10 + c - CharCode.A;\r\n        value = i64_add(\r\n          i64_shl(value, i64_4),\r\n          i64_new(10 + c - CharCode.A)\r\n        );\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        // value = (value << 4) + 10 + c - CharCode.a;\r\n        value = i64_add(\r\n          i64_shl(value, i64_4),\r\n          i64_new(10 + c - CharCode.a)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Hexadecimal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readDecimalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    var value = i64_new(0);\r\n    var i64_10 = i64_new(10);\r\n    var sepEnd = start;\r\n    while (this.pos < end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 10 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_10),\r\n          i64_new(c - CharCode._0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readOctalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0);\r\n    var i64_3 = i64_new(3);\r\n    var sepEnd = start;\r\n    var end = this.end;\r\n    while (this.pos < end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._7) {\r\n        // value = (value << 3) + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_shl(value, i64_3),\r\n          i64_new(c - CharCode._0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Octal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readBinaryInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0);\r\n    var i64_1 = i64_new(1);\r\n    var sepEnd = start;\r\n    var end = this.end;\r\n    while (this.pos < end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode._0) {\r\n        // value = (value << 1);\r\n        value = i64_shl(value, i64_1);\r\n      } else if (c == CharCode._1) {\r\n        // value = (value << 1) + 1;\r\n        value = i64_add(\r\n          i64_shl(value, i64_1),\r\n          i64_1\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Binary_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readFloat(): f64 {\r\n    // var text = this.source.text;\r\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n    //   switch (text.charCodeAt(this.pos + 1)) {\r\n    //     case CharCode.X:\r\n    //     case CharCode.x: {\r\n    //       this.pos += 2;\r\n    //       return this.readHexFloat();\r\n    //     }\r\n    //   }\r\n    // }\r\n    return this.readDecimalFloat();\r\n  }\r\n\r\n  readDecimalFloat(): f64 {\r\n    // TODO: numeric separators (parseFloat can't handle these)\r\n    var start = this.pos;\r\n    var end = this.end;\r\n    var text = this.source.text;\r\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n      ++this.pos;\r\n    }\r\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\r\n      ++this.pos;\r\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n        ++this.pos;\r\n      }\r\n    }\r\n    if (this.pos < end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.e || c == CharCode.E) {\r\n        if (\r\n          ++this.pos < end &&\r\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\r\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n          ++this.pos;\r\n        }\r\n      }\r\n    }\r\n    return parseFloat(text.substring(start, this.pos));\r\n  }\r\n\r\n  readHexFloat(): f64 {\r\n    throw new Error(\"not implemented\"); // TBD\r\n  }\r\n\r\n  readUnicodeEscape(): string {\r\n    var remain = 4;\r\n    var value = 0;\r\n    var end = this.end;\r\n    var text = this.source.text;\r\n    while (this.pos < end) {\r\n      let c = text.charCodeAt(this.pos++);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        value = (value << 4) + c - CharCode._0;\r\n      } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        value = (value << 4) + c + (10 - CharCode.A);\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        value = (value << 4) + c + (10 - CharCode.a);\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Hexadecimal_digit_expected,\r\n          this.range(this.pos - 1, this.pos)\r\n        );\r\n        return \"\";\r\n      }\r\n      if (--remain == 0) break;\r\n    }\r\n    if (remain) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.pos)\r\n      );\r\n      return \"\";\r\n    }\r\n    return String.fromCharCode(value);\r\n  }\r\n\r\n  private readExtendedUnicodeEscape(): string {\r\n    var start = this.pos;\r\n    var value = this.readHexInteger();\r\n    var value32 = i64_low(value);\r\n    var invalid = false;\r\n\r\n    assert(!i64_high(value));\r\n    if (value32 > 0x10FFFF) {\r\n      this.error(\r\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    var end = this.end;\r\n    var text = this.source.text;\r\n    if (this.pos >= end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(start, end)\r\n      );\r\n      invalid = true;\r\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\r\n      ++this.pos;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    if (invalid) return \"\";\r\n    return value32 < 65536\r\n      ? String.fromCharCode(value32)\r\n      : String.fromCharCode(\r\n        ((value32 - 65536) >>> 10) + 0xD800,\r\n        ((value32 - 65536) & 1023) + 0xDC00\r\n      );\r\n  }\r\n\r\n  finish(): void {\r\n  }\r\n}\r\n\r\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\r\nexport class State {\r\n  /** Current position. */\r\n  pos: i32;\r\n  /** Current token. */\r\n  token: Token;\r\n  /** Current token's position. */\r\n  tokenPos: i32;\r\n}\r\n\r\n// Reusable state object to reduce allocations\r\nvar reusableState: State | null = null;\r\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\r\n * Resolve infrastructure to obtain types and elements.\r\n * @module resolver\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticEmitter,\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Program,\r\n  ElementKind,\r\n  OperatorKind,\r\n  Element,\r\n  Class,\r\n  ClassPrototype,\r\n  Function,\r\n  FunctionPrototype,\r\n  VariableLikeElement,\r\n  Property,\r\n  PropertyPrototype,\r\n  Field,\r\n  FieldPrototype,\r\n  Global,\r\n  TypeDefinition\r\n} from \"./program\";\r\n\r\nimport {\r\n  FlowFlags,\r\n  Flow\r\n} from \"./flow\";\r\n\r\nimport {\r\n  SignatureNode,\r\n  ParameterKind,\r\n  CommonTypeNode,\r\n  NodeKind,\r\n  TypeNode,\r\n  TypeName,\r\n  TypeParameterNode,\r\n  Node,\r\n  Range,\r\n  IdentifierExpression,\r\n  CallExpression,\r\n  ElementAccessExpression,\r\n  PropertyAccessExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  ParenthesizedExpression,\r\n  AssertionExpression,\r\n  Expression,\r\n  IntegerLiteralExpression,\r\n  UnaryPrefixExpression,\r\n  UnaryPostfixExpression,\r\n  AssertionKind,\r\n  BinaryExpression,\r\n  ThisExpression,\r\n  SuperExpression,\r\n  isTypeOmitted\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  Signature,\r\n  typesToString,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  CommonSymbols\r\n} from \"./common\";\r\n\r\nimport {\r\n  makeMap,\r\n  isPowerOf2\r\n} from \"./util\";\r\n\r\nimport {\r\n  Token\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  BuiltinSymbols\r\n} from \"./builtins\";\r\n\r\n/** Indicates whether errors are reported or not. */\r\nexport enum ReportMode {\r\n  /** Report errors. */\r\n  REPORT,\r\n  /** Swallow errors. */\r\n  SWALLOW\r\n}\r\n\r\n/** Provides tools to resolve types and expressions. */\r\nexport class Resolver extends DiagnosticEmitter {\r\n\r\n  /** The program this resolver belongs to. */\r\n  program: Program;\r\n\r\n  /** Target expression of the previously resolved property or element access. */\r\n  currentThisExpression: Expression | null = null;\r\n  /** Element expression of the previously resolved element access. */\r\n  currentElementExpression : Expression | null = null;\r\n\r\n  /** Constructs the resolver for the specified program. */\r\n  constructor(\r\n    /** The program to construct a resolver for. */\r\n    program: Program\r\n  ) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n  }\r\n\r\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\r\n  resolveType(\r\n    /** The type to resolve. */\r\n    node: CommonTypeNode,\r\n    /** Relative context. */\r\n    context: Element,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n\r\n    // handle signature\r\n    if (node.kind == NodeKind.SIGNATURE) {\r\n      let explicitThisType = (<SignatureNode>node).explicitThisType;\r\n      let thisType: Type | null = null;\r\n      if (explicitThisType) {\r\n        thisType = this.resolveType(\r\n          explicitThisType,\r\n          context,\r\n          contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (!thisType) return null;\r\n      }\r\n      let parameterNodes = (<SignatureNode>node).parameters;\r\n      let numParameters = parameterNodes.length;\r\n      let parameterTypes = new Array<Type>(numParameters);\r\n      let parameterNames = new Array<string>(numParameters);\r\n      let requiredParameters = 0;\r\n      let hasRest = false;\r\n      for (let i = 0; i < numParameters; ++i) {\r\n        let parameterNode = parameterNodes[i];\r\n        switch (parameterNode.parameterKind) {\r\n          case ParameterKind.DEFAULT: {\r\n            requiredParameters = i + 1;\r\n            break;\r\n          }\r\n          case ParameterKind.REST: {\r\n            assert(i == numParameters);\r\n            hasRest = true;\r\n            break;\r\n          }\r\n        }\r\n        let parameterTypeNode = parameterNode.type;\r\n        if (isTypeOmitted(parameterTypeNode)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              parameterTypeNode.range\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        let parameterType = this.resolveType(\r\n          parameterTypeNode,\r\n          context,\r\n          contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (!parameterType) return null;\r\n        parameterTypes[i] = parameterType;\r\n        parameterNames[i] = parameterNode.name.text;\r\n      }\r\n      let returnTypeNode = (<SignatureNode>node).returnType;\r\n      if (isTypeOmitted(returnTypeNode)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnTypeNode.range\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let returnType: Type | null;\r\n      if (returnTypeNode) {\r\n        returnType = this.resolveType(\r\n          returnTypeNode,\r\n          context,\r\n          contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Type.void;\r\n      }\r\n      let signature = new Signature(parameterTypes, returnType, thisType);\r\n      signature.parameterNames = parameterNames;\r\n      signature.requiredParameters = requiredParameters;\r\n      signature.hasRest = hasRest;\r\n      return node.isNullable ? signature.type.asNullable() : signature.type;\r\n    }\r\n\r\n    // now dealing with TypeNode\r\n    assert(node.kind == NodeKind.TYPE);\r\n    var typeNode = <TypeNode>node;\r\n    var typeName = typeNode.name;\r\n    var typeArgumentNodes = typeNode.typeArguments;\r\n    var possiblyPlaceholder = !typeName.next;\r\n\r\n    // look up in contextual type arguments if possibly a placeholder\r\n    if (possiblyPlaceholder) {\r\n      if (contextualTypeArguments && contextualTypeArguments.has(typeName.identifier.text)) {\r\n        let type = contextualTypeArguments.get(typeName.identifier.text)!;\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              node.range, type.toString()\r\n            );\r\n          }\r\n        }\r\n        if (node.isNullable) {\r\n          if (!type.is(TypeFlags.REFERENCE)) {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n                node.range, type.toString()\r\n              );\r\n            }\r\n          }\r\n          return type.asNullable();\r\n        }\r\n        return type;\r\n      }\r\n    }\r\n\r\n    // look up in context\r\n    var element = this.resolveTypeName(typeName, context, reportMode);\r\n    if (!element) return null;\r\n\r\n    // use shadow type if present (i.e. namespace sharing a type)\r\n    if (element.shadowType) {\r\n      element = element.shadowType;\r\n\r\n    } else {\r\n      // handle enums (become i32)\r\n      if (element.kind == ElementKind.ENUM) {\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              node.range, element.internalName\r\n            );\r\n          }\r\n        }\r\n        if (node.isNullable) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n              node.range, element.name\r\n            );\r\n          }\r\n        }\r\n        return Type.i32;\r\n      }\r\n\r\n      // handle classes\r\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let instance = this.resolveClassInclTypeArguments(\r\n          <ClassPrototype>element,\r\n          typeArgumentNodes,\r\n          context,\r\n          makeMap<string,Type>(contextualTypeArguments), // don't inherit\r\n          node\r\n        ); // reports\r\n        if (!instance) return null;\r\n        return node.isNullable ? instance.type.asNullable() : instance.type;\r\n      }\r\n    }\r\n\r\n    // handle type definitions\r\n    if (element.kind == ElementKind.TYPEDEFINITION) {\r\n\r\n      // shortcut already resolved (mostly builtins)\r\n      if (element.is(CommonFlags.RESOLVED)) {\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              node.range, element.internalName\r\n            );\r\n          }\r\n        }\r\n        let type = (<TypeDefinition>element).type;\r\n        if (node.isNullable) {\r\n          if (!type.is(TypeFlags.REFERENCE)) {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n                typeNode.name.range, typeName.identifier.text\r\n              );\r\n            }\r\n          } else {\r\n            return type.asNullable();\r\n          }\r\n        }\r\n        return type;\r\n      }\r\n\r\n      // handle special native type\r\n      if (possiblyPlaceholder && typeName.identifier.text == CommonSymbols.native) {\r\n        if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              typeNode.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        let typeArgument = this.resolveType(\r\n          typeArgumentNodes[0],\r\n          context,\r\n          contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (!typeArgument) return null;\r\n        switch (typeArgument.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: return Type.i32;\r\n          case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\r\n          case TypeKind.I64: return Type.i64;\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: return Type.u32;\r\n          case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\r\n          case TypeKind.U64: return Type.u64;\r\n          case TypeKind.F32: return Type.f32;\r\n          case TypeKind.F64: return Type.f64;\r\n          case TypeKind.V128: return Type.v128;\r\n          case TypeKind.VOID: return Type.void;\r\n          default: assert(false);\r\n        }\r\n      }\r\n\r\n      // resolve normally\r\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\r\n      let typeArguments: Type[] | null = null;\r\n      if (typeParameterNodes) {\r\n        typeArguments = this.resolveTypeArguments(\r\n          typeParameterNodes,\r\n          typeArgumentNodes,\r\n          context,\r\n          contextualTypeArguments = makeMap(contextualTypeArguments), // inherit\r\n          node,\r\n          reportMode\r\n        );\r\n        if (!typeArguments) return null;\r\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          typeNode.range, typeName.identifier.text\r\n        );\r\n        // recoverable\r\n      }\r\n      let type = this.resolveType(\r\n        (<TypeDefinition>element).typeNode,\r\n        element,\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!type) return null;\r\n      if (node.isNullable) {\r\n        if (!type.is(TypeFlags.REFERENCE)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n              typeNode.name.range, typeName.identifier.text\r\n            );\r\n          }\r\n        } else {\r\n          return type.asNullable();\r\n        }\r\n      }\r\n      return type;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        typeNode.name.range, typeName.identifier.text\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a type name to the program element it refers to. */\r\n  resolveTypeName(\r\n    /** The type name to resolve. */\r\n    typeName: TypeName,\r\n    /** Relative context. */\r\n    context: Element,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var element = context.lookup(typeName.identifier.text);\r\n    if (!element) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Cannot_find_name_0,\r\n          typeName.range, typeName.identifier.text\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var prev = typeName;\r\n    var next = typeName.next;\r\n    while (next) {\r\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            next.range, next.identifier.text, prev.identifier.text\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      prev = next;\r\n      next = next.next;\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Resolves an array of type arguments to concrete types. */\r\n  resolveTypeArguments(\r\n    /** Actual type parameter nodes. */\r\n    typeParameters: TypeParameterNode[],\r\n    /** Type arguments provided. */\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    /** Relative context. */\r\n    context: Element,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\r\n    /** Alternative report node in case of empty type arguments. */\r\n    alternativeReportNode: Node | null = null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type[] | null {\r\n    var minParameterCount = 0;\r\n    var maxParameterCount = 0;\r\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\r\n      if (!typeParameters[i].defaultType) ++minParameterCount;\r\n      ++maxParameterCount;\r\n    }\r\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\r\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        argumentCount\r\n          ? Range.join(\r\n              (<TypeNode[]>typeArgumentNodes)[0].range,\r\n              (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\r\n            )\r\n          : assert(alternativeReportNode).range,\r\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\r\n        argumentCount.toString(10)\r\n      );\r\n      return null;\r\n    }\r\n    var typeArguments = new Array<Type>(maxParameterCount);\r\n    for (let i = 0; i < maxParameterCount; ++i) {\r\n      let type = i < argumentCount\r\n        ? this.resolveType( // reports\r\n            (<TypeNode[]>typeArgumentNodes)[i],\r\n            context,\r\n            contextualTypeArguments,\r\n            reportMode\r\n          )\r\n        : this.resolveType( // reports\r\n            assert(typeParameters[i].defaultType),\r\n            context,\r\n            contextualTypeArguments,\r\n            reportMode\r\n          );\r\n      if (!type) return null;\r\n      // TODO: check extendsType\r\n      contextualTypeArguments.set(typeParameters[i].name.text, type);\r\n      typeArguments[i] = type;\r\n    }\r\n    return typeArguments;\r\n  }\r\n\r\n  /** Resolves an identifier to the program element it refers to. */\r\n  resolveIdentifier(\r\n    /** The expression to resolve. */\r\n    identifier: IdentifierExpression,\r\n    /** Optional flow to search for scoped locals. */\r\n    flow: Flow | null,\r\n    /** Optional context to search. */\r\n    context: Element | null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var name = identifier.text;\r\n    var element: Element | null;\r\n    if (flow) {\r\n      if (element = flow.lookup(name)) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return element;\r\n      }\r\n    }\r\n    if (context) {\r\n      if (element = context.lookup(name)) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return element;\r\n      }\r\n    }\r\n    if (element = this.program.lookupGlobal(name)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return element;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        identifier.range, name\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a lazily compiled global, i.e. a static class field. */\r\n  ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\r\n    if (global.is(CommonFlags.RESOLVED)) return true;\r\n    var typeNode = global.typeNode;\r\n    if (!typeNode) return false;\r\n    var type = this.resolveType( // reports\r\n      typeNode,\r\n      global.parent,\r\n      null,\r\n      reportMode\r\n    );\r\n    if (!type) return false;\r\n    global.setType(type);\r\n    return true;\r\n  }\r\n\r\n  /** Resolves a property access expression to the program element it refers to. */\r\n  resolvePropertyAccessExpression(\r\n    /** The expression to resolve. */\r\n    propertyAccess: PropertyAccessExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetExpression = propertyAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\r\n    if (!target) return null;\r\n    var propertyName = propertyAccess.property.text;\r\n\r\n    // Resolve variable-likes to their class type first\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\r\n        let classReference = type.classReference;\r\n        if (!classReference) {\r\n          let typeClasses = this.program.typeClasses;\r\n          if (!type.is(TypeFlags.REFERENCE) && typeClasses.has(type.kind)) {\r\n            classReference = typeClasses.get(type.kind)!;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n              propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static\r\n        let getterInstance = this.resolveFunction( // reports\r\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n        if (!getterInstance) return null;\r\n        let classReference = getterInstance.signature.returnType.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: { // instance\r\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\r\n        let classReference = getterInstance.signature.returnType.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: { // property access on element access?\r\n        let elementExpression = this.currentElementExpression;\r\n        if (elementExpression) {\r\n          // let arrayType = this.program.determineBuiltinArrayType(<Class>target);\r\n          // if (!arrayType) {\r\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n            if (!indexedGet) {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n                elementExpression.range, (<Class>target).internalName\r\n              );\r\n              return null;\r\n            }\r\n            let arrayType = indexedGet.signature.returnType;\r\n          // }\r\n          if (!(target = arrayType.classReference)) {\r\n            this.error(\r\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n              propertyAccess.property.range, propertyName, arrayType.toString()\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\r\n        let shadowType = target.shadowType;\r\n        if (shadowType) {\r\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\r\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\r\n            if (resolvedType) shadowType.setType(resolvedType);\r\n          }\r\n          let classReference = shadowType.type.classReference;\r\n          if (classReference) target = classReference.prototype;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Look up the member within\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE:\r\n      case ElementKind.CLASS: {\r\n        do {\r\n          let members = target.members;\r\n          if (members && members.has(propertyName)) {\r\n            this.currentThisExpression = targetExpression;\r\n            this.currentElementExpression = null;\r\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\r\n          }\r\n          // traverse inherited static members on the base prototype if target is a class prototype\r\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\r\n            if ((<ClassPrototype>target).basePrototype) {\r\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\r\n            } else {\r\n              break;\r\n            }\r\n          // traverse inherited instance members on the base class if target is a class instance\r\n          } else if (target.kind == ElementKind.CLASS) {\r\n            if ((<Class>target).base) {\r\n              target = <Class>(<Class>target).base;\r\n            } else {\r\n              break;\r\n            }\r\n          } else {\r\n            break;\r\n          }\r\n        } while (true);\r\n        break;\r\n      }\r\n      default: { // enums or other namespace-like elements\r\n        let members = target.members;\r\n        if (members && members.has(propertyName)) {\r\n          this.currentThisExpression = targetExpression;\r\n          this.currentElementExpression = null;\r\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    this.error(\r\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n      propertyAccess.property.range, propertyName, target.internalName\r\n    );\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an element access expression to the program element it refers to. */\r\n  resolveElementAccessExpression(\r\n    /** The expression to resolve. */\r\n    elementAccess: ElementAccessExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetExpression = elementAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\r\n    if (!target) return null;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type;\r\n        if (target = type.classReference) {\r\n          this.currentThisExpression = targetExpression;\r\n          this.currentElementExpression = elementAccess.elementExpression;\r\n          return target;\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        // let arrayType = this.program.determineBuiltinArrayType(<Class>target);\r\n        // if (!arrayType) {\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n          if (!indexedGet) {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n                elementAccess.range, (<Class>target).internalName\r\n              );\r\n            }\r\n            return null;\r\n          }\r\n          let arrayType = indexedGet.signature.returnType;\r\n        // }\r\n        if (targetExpression.kind == NodeKind.ELEMENTACCESS) { // nested element access\r\n          if (target = arrayType.classReference) {\r\n            this.currentThisExpression = targetExpression;\r\n            this.currentElementExpression = elementAccess.elementExpression;\r\n            return target;\r\n          }\r\n          return null;\r\n        }\r\n        this.currentThisExpression = targetExpression;\r\n        this.currentElementExpression = elementAccess.elementExpression;\r\n        return target;\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        targetExpression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Determines the final type of an integer literal given the specified contextual type. */\r\n  determineIntegerLiteralType(\r\n    /** Integer literal value. */\r\n    intValue: I64,\r\n    /** Current contextual type. */\r\n    contextualType: Type\r\n  ): Type {\r\n    if (!contextualType.is(TypeFlags.REFERENCE)) {\r\n      // compile to contextualType if matching\r\n      switch (contextualType.kind) {\r\n        case TypeKind.I8: {\r\n          if (i64_is_i8(intValue)) return Type.i8;\r\n          break;\r\n        }\r\n        case TypeKind.U8: {\r\n          if (i64_is_u8(intValue)) return Type.u8;\r\n          break;\r\n        }\r\n        case TypeKind.I16: {\r\n          if (i64_is_i16(intValue)) return Type.i16;\r\n          break;\r\n        }\r\n        case TypeKind.U16: {\r\n          if (i64_is_u16(intValue)) return Type.u16;\r\n          break;\r\n        }\r\n        case TypeKind.I32: {\r\n          if (i64_is_i32(intValue)) return Type.i32;\r\n          break;\r\n        }\r\n        case TypeKind.U32: {\r\n          if (i64_is_u32(intValue)) return Type.u32;\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: {\r\n          if (i64_is_bool(intValue)) return Type.bool;\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          if (!this.program.options.isWasm64) {\r\n            if (i64_is_i32(intValue)) return Type.isize32;\r\n            break;\r\n          }\r\n          return Type.isize64;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (!this.program.options.isWasm64) {\r\n            if (i64_is_u32(intValue)) return Type.usize32;\r\n            break;\r\n          }\r\n          return Type.usize64;\r\n        }\r\n        case TypeKind.I64: return Type.i64;\r\n        case TypeKind.U64: return Type.u64;\r\n        case TypeKind.F32: return Type.f32;\r\n        case TypeKind.F64: return Type.f64;\r\n        case TypeKind.VOID: break; // best fitting below\r\n        default: assert(false);\r\n      }\r\n    }\r\n    // otherwise compile to best fitting native type\r\n    if (i64_is_i32(intValue)) return Type.i32;\r\n    if (i64_is_u32(intValue)) return Type.u32;\r\n    return Type.i64;\r\n  }\r\n\r\n  /** Resolves any expression to the program element it refers to. */\r\n  resolveExpression(\r\n    /** The expression to resolve. */\r\n    expression: Expression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    while (expression.kind == NodeKind.PARENTHESIZED) { // simply skip\r\n      expression = (<ParenthesizedExpression>expression).expression;\r\n    }\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        return this.resolveAssertionExpression(\r\n          <AssertionExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        return this.resolveUnaryPrefixExpression(\r\n          <UnaryPrefixExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        return this.resolveUnaryPostfixExpression(\r\n          <UnaryPostfixExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.BINARY: {\r\n        return this.resolveBinaryExpression(\r\n          <BinaryExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.THIS: {\r\n        return this.resolveThisExpression(\r\n          <ThisExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.SUPER: {\r\n        return this.resolveSuperExpression(\r\n          <SuperExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.IDENTIFIER: {\r\n        return this.resolveIdentifier(\r\n          <IdentifierExpression>expression,\r\n          flow, flow.actualFunction, reportMode\r\n        );\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        return this.resolveLiteralExpression(\r\n          <LiteralExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        return this.resolvePropertyAccessExpression(\r\n          <PropertyAccessExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        return this.resolveElementAccessExpression(\r\n          <ElementAccessExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.CALL: {\r\n        return this.resolveCallExpression(\r\n          <CallExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      // TODO: everything else\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an assertion expression to the program element it refers to. */\r\n  resolveAssertionExpression(\r\n    /** The expression to resolve. */\r\n    expression: AssertionExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    if (expression.assertionKind == AssertionKind.NONNULL) {\r\n      return this.resolveExpression(\r\n        expression.expression,\r\n        flow,\r\n        contextualType,\r\n        reportMode\r\n      );\r\n    }\r\n    var type = this.resolveType(\r\n      assert(expression.toType), // must be set if not NONNULL\r\n      flow.actualFunction,\r\n      flow.contextualTypeArguments,\r\n      reportMode\r\n    );\r\n    if (!type) return null;\r\n    var element: Element | null = type.classReference;\r\n    if (!element) {\r\n      let signature = type.signatureReference;\r\n      if (!signature) return null;\r\n      element = signature.asFunctionTarget(this.program);\r\n    }\r\n    this.currentThisExpression = null;\r\n    this.currentElementExpression = null;\r\n    return element;\r\n  }\r\n\r\n  /** Resolves an unary prefix expression to the program element it refers to. */\r\n  resolveUnaryPrefixExpression(\r\n    /** The expression to resolve. */\r\n    expression: UnaryPrefixExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var operand = expression.operand;\r\n    // TODO: operator overloads\r\n    switch (expression.operator) {\r\n      case Token.MINUS: {\r\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\r\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\r\n          let type = this.determineIntegerLiteralType(\r\n            i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value),\r\n            contextualType\r\n          );\r\n          let typeClasses = this.program.typeClasses;\r\n          return typeClasses.has(type.kind) ? typeClasses.get(type.kind)! : null;\r\n        }\r\n        return this.resolveExpression(\r\n          operand,\r\n          flow,\r\n          contextualType,\r\n          reportMode\r\n        );\r\n      }\r\n      case Token.PLUS:\r\n      case Token.PLUS_PLUS:\r\n      case Token.MINUS_MINUS: {\r\n        return this.resolveExpression(\r\n          expression.operand,\r\n          flow,\r\n          contextualType,\r\n          reportMode\r\n        );\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        let typeClasses = this.program.typeClasses;\r\n        return typeClasses.has(TypeKind.BOOL) ? typeClasses.get(TypeKind.BOOL)! : null;\r\n      }\r\n      case Token.TILDE: {\r\n        let resolvedOperand = this.resolveExpression(\r\n          expression.operand,\r\n          flow,\r\n          contextualType,\r\n          reportMode\r\n        );\r\n        if (!resolvedOperand) return null;\r\n        // TODO\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an unary postfix expression to the program element it refers to. */\r\n  resolveUnaryPostfixExpression(\r\n    /** The expression to resolve. */\r\n    expression: UnaryPostfixExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    // TODO: operator overloads\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS:\r\n      case Token.MINUS_MINUS: {\r\n        return this.resolveExpression(\r\n          expression.operand,\r\n          flow,\r\n          contextualType,\r\n          reportMode\r\n        );\r\n      }\r\n      default: assert(false);\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a binary expression to the program element it refers to. */\r\n  resolveBinaryExpression(\r\n    /** The expression to resolve. */\r\n    expression: BinaryExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    // TODO\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a this expression to the program element it refers to. */\r\n  resolveThisExpression(\r\n    /** The expression to resolve. */\r\n    expression: ThisExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      let thisLocal = flow.lookupLocal(CommonSymbols.this_);\r\n      if (thisLocal) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return thisLocal;\r\n      }\r\n    }\r\n    var parent = flow.actualFunction.parent;\r\n    if (parent) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return parent;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a super expression to the program element it refers to. */\r\n  resolveSuperExpression(\r\n    /** The expression to resolve. */\r\n    expression: SuperExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      let superLocal = flow.lookupLocal(CommonSymbols.super_);\r\n      if (superLocal) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return superLocal;\r\n      }\r\n    }\r\n    var parent: Element | null = flow.actualFunction.parent;\r\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return parent;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a literal expression to the program element it refers to. */\r\n  resolveLiteralExpression(\r\n    /** The expression to resolve. */\r\n    expression: LiteralExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.INTEGER: {\r\n        this.currentThisExpression = expression;\r\n        this.currentElementExpression = null;\r\n        let literalType = this.determineIntegerLiteralType(\r\n          (<IntegerLiteralExpression>expression).value,\r\n          contextualType\r\n        );\r\n        let typeClasses = this.program.typeClasses;\r\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        this.currentThisExpression = expression;\r\n        this.currentElementExpression = null;\r\n        let literalType = contextualType == Type.f32 ? Type.f32 : Type.f64;\r\n        let typeClasses = this.program.typeClasses;\r\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\r\n      }\r\n      case LiteralKind.STRING: {\r\n        this.currentThisExpression = expression;\r\n        this.currentElementExpression = null;\r\n        return this.program.stringInstance;\r\n      }\r\n      // TODO\r\n      // case LiteralKind.ARRAY:\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a call expression to the program element it refers to. */\r\n  resolveCallExpression(\r\n    /** The expression to resolve. */\r\n    expression: CallExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetExpression = expression.expression;\r\n    var target = this.resolveExpression( // reports\r\n      targetExpression,\r\n      flow,\r\n      contextualType,\r\n      reportMode\r\n    );\r\n    if (!target) return null;\r\n    if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\r\n      // `unchecked(expr: *): *` is special\r\n      if (\r\n        (<FunctionPrototype>target).internalName == BuiltinSymbols.unchecked &&\r\n        expression.arguments.length > 0\r\n      ) {\r\n        return this.resolveExpression(expression.arguments[0], flow, contextualType, reportMode);\r\n      }\r\n      // otherwise resolve normally\r\n      let instance = this.resolveFunctionInclTypeArguments(\r\n        <FunctionPrototype>target,\r\n        expression.typeArguments,\r\n        flow.actualFunction,\r\n        makeMap(flow.contextualTypeArguments), // don't inherit\r\n        expression,\r\n        reportMode\r\n      );\r\n      if (!instance) return null;\r\n      let returnType = instance.signature.returnType;\r\n      let classType = returnType.classReference;\r\n      if (classType) {\r\n        // reuse resolvedThisExpression (might be property access)\r\n        // reuse resolvedElementExpression (might be element access)\r\n        return classType;\r\n      } else {\r\n        let signature = returnType.signatureReference;\r\n        if (signature) {\r\n          let functionTarget = signature.asFunctionTarget(this.program);\r\n          // reuse resolvedThisExpression (might be property access)\r\n          // reuse resolvedElementExpression (might be element access)\r\n          return functionTarget;\r\n        }\r\n      }\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n          targetExpression.range, target.internalName\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a function prototype using the specified concrete type arguments. */\r\n  resolveFunction(\r\n    /** The prototype of the function. */\r\n    prototype: FunctionPrototype,\r\n    /** Concrete type arguments. */\r\n    typeArguments: Type[] | null,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Function | null {\r\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\r\n      ? prototype.parent.parent\r\n      : prototype.parent;\r\n    var classInstance: Class | null = null; // if an instance method\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n\r\n    // Instance method prototypes are pre-bound to their concrete class as their parent\r\n    if (prototype.is(CommonFlags.INSTANCE)) {\r\n      assert(actualParent.kind == ElementKind.CLASS);\r\n      classInstance = <Class>actualParent;\r\n\r\n      // check if this exact concrete class and function combination is known already\r\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\r\n      if (resolvedInstance) return resolvedInstance;\r\n\r\n      // inherit class specific type arguments\r\n      let classTypeArguments = classInstance.typeArguments;\r\n      if (classTypeArguments) {\r\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\r\n        let numClassTypeArguments = classTypeParameters.length;\r\n        assert(numClassTypeArguments == classTypeParameters.length);\r\n        for (let i = 0; i < numClassTypeArguments; ++i) {\r\n          let classTypeParameterName = classTypeParameters[i].name.text;\r\n          if (!contextualTypeArguments.has(classTypeParameterName)) {\r\n            contextualTypeArguments.set(\r\n              classTypeParameterName,\r\n              classTypeArguments[i]\r\n            );\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\r\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\r\n      if (resolvedInstance) return resolvedInstance;\r\n    }\r\n\r\n    // override whatever is contextual with actual function type arguments\r\n    var signatureNode = prototype.signatureNode;\r\n    var typeParameterNodes = prototype.typeParameterNodes;\r\n    var numFunctionTypeArguments: i32;\r\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\r\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\r\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\r\n        contextualTypeArguments.set(\r\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\r\n          typeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\r\n    }\r\n\r\n    // resolve `this` type if applicable\r\n    var thisType: Type | null = null;\r\n    var explicitThisType = signatureNode.explicitThisType;\r\n    if (explicitThisType) {\r\n      thisType = this.resolveType(\r\n        explicitThisType,\r\n        prototype.parent, // relative to function\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!thisType) return null;\r\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\r\n    } else if (classInstance) {\r\n      thisType = classInstance.type;\r\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\r\n    }\r\n\r\n    // resolve parameter types\r\n    var signatureParameters = signatureNode.parameters;\r\n    var numSignatureParameters = signatureParameters.length;\r\n    var parameterTypes = new Array<Type>(numSignatureParameters);\r\n    var parameterNames = new Array<string>(numSignatureParameters);\r\n    var requiredParameters = 0;\r\n    for (let i = 0; i < numSignatureParameters; ++i) {\r\n      let parameterDeclaration = signatureParameters[i];\r\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\r\n        requiredParameters = i + 1;\r\n      }\r\n      let typeNode = parameterDeclaration.type;\r\n      if (isTypeOmitted(typeNode)) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          typeNode.range\r\n        );\r\n        return null;\r\n      }\r\n      let parameterType = this.resolveType(\r\n        typeNode,\r\n        prototype.parent, // relative to function\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterDeclaration.name.text;\r\n    }\r\n\r\n    // resolve return type\r\n    var returnType: Type;\r\n    if (prototype.is(CommonFlags.SET)) {\r\n      returnType = Type.void; // not annotated\r\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\r\n      returnType = assert(classInstance).type; // not annotated\r\n    } else {\r\n      let typeNode = signatureNode.returnType;\r\n      if (isTypeOmitted(typeNode)) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          typeNode.range\r\n        );\r\n        return null;\r\n      }\r\n      let type = this.resolveType(\r\n        typeNode,\r\n        prototype.parent, // relative to function\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!type) return null;\r\n      returnType = type;\r\n    }\r\n\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n\r\n    var nameInclTypeParameters = prototype.name;\r\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\r\n    var instance = new Function(\r\n      nameInclTypeParameters,\r\n      prototype,\r\n      signature,\r\n      contextualTypeArguments\r\n    );\r\n    prototype.setResolvedInstance(instanceKey, instance);\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\r\n  resolveFunctionInclTypeArguments(\r\n    /** The prototype of the function. */\r\n    prototype: FunctionPrototype,\r\n    /** Type arguments provided. */\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    /** Relative context. Type arguments are resolved from here. */\r\n    context: Element,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type>,\r\n    /** The node to use when reporting intermediate errors. */\r\n    reportNode: Node,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Function | null {\r\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\r\n      ? prototype.parent.parent\r\n      : prototype.parent;\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n\r\n    // Resolve type arguments if generic\r\n    if (prototype.is(CommonFlags.GENERIC)) {\r\n\r\n      // If this is an instance method, first apply the class's type arguments\r\n      if (prototype.is(CommonFlags.INSTANCE)) {\r\n        assert(actualParent.kind == ElementKind.CLASS);\r\n        let classTypeArguments = (<Class>actualParent).typeArguments;\r\n        if (classTypeArguments) {\r\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\r\n          let numClassTypeArguments = classTypeArguments.length;\r\n          assert(numClassTypeArguments == typeParameterNodes.length);\r\n          for (let i = 0; i < numClassTypeArguments; ++i) {\r\n            contextualTypeArguments.set(\r\n              typeParameterNodes[i].name.text,\r\n              classTypeArguments[i]\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\r\n        assert(prototype.typeParameterNodes),\r\n        typeArgumentNodes,\r\n        context,\r\n        contextualTypeArguments,\r\n        reportNode,\r\n        reportMode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n\r\n    // Otherwise make sure that no type arguments have been specified\r\n    } else {\r\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_generic,\r\n            reportNode.range, prototype.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Continue with concrete types\r\n    return this.resolveFunction(\r\n      prototype,\r\n      resolvedTypeArguments,\r\n      contextualTypeArguments,\r\n      reportMode\r\n    );\r\n  }\r\n\r\n  /** Resolves a class prototype using the specified concrete type arguments. */\r\n  resolveClass(\r\n    /** The prototype of the class. */\r\n    prototype: ClassPrototype,\r\n    /** Concrete type arguments. */\r\n    typeArguments: Type[] | null,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Class | null {\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n\r\n    // Check if this exact instance has already been resolved\r\n    var instance = prototype.getResolvedInstance(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    // Insert contextual type arguments for this operation. Internally, this method is always\r\n    // called with matching type parameter / argument counts.\r\n    if (typeArguments) {\r\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\r\n      let numTypeParameters = typeParameterNodes.length;\r\n      let numTypeArguments = typeArguments.length;\r\n      assert(numTypeArguments == numTypeParameters);\r\n      for (let i = 0; i < numTypeArguments; ++i) {\r\n        contextualTypeArguments.set(typeParameterNodes[i].name.text, typeArguments[i]);\r\n      }\r\n    } else {\r\n      let typeParameterNodes = prototype.typeParameterNodes;\r\n      assert(!(typeParameterNodes && typeParameterNodes.length));\r\n    }\r\n\r\n    // Resolve base class if applicable\r\n    var basePrototype = prototype.basePrototype;\r\n    var baseClass: Class | null = null;\r\n    if (basePrototype) {\r\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\r\n      baseClass = this.resolveClassInclTypeArguments(\r\n        basePrototype,\r\n        extendsNode.typeArguments,\r\n        prototype.parent, // relative to derived class\r\n        makeMap(contextualTypeArguments), // don't inherit\r\n        extendsNode,\r\n        reportMode\r\n      );\r\n      if (!baseClass) return null;\r\n    }\r\n\r\n    // Construct the instance and remember that it has been resolved already\r\n    var nameInclTypeParamters = prototype.name;\r\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\r\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\r\n    instance.contextualTypeArguments = contextualTypeArguments;\r\n    prototype.setResolvedInstance(instanceKey, instance);\r\n\r\n    // Inherit base class members and set up the initial memory offset for own fields\r\n    var memoryOffset: u32 = 0;\r\n    if (baseClass) {\r\n      let baseMembers = baseClass.members;\r\n      if (baseMembers) {\r\n        let instanceMembers = instance.members;\r\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\r\n        for (let [baseMemberName, baseMember] of baseMembers) {\r\n          instanceMembers.set(baseMemberName, baseMember);\r\n        }\r\n      }\r\n      memoryOffset = baseClass.currentMemoryOffset;\r\n    }\r\n\r\n    // Resolve instance members\r\n    var instanceMemberPrototypes = prototype.instanceMembers;\r\n    if (instanceMemberPrototypes) {\r\n      for (let member of instanceMemberPrototypes.values()) {\r\n        switch (member.kind) {\r\n\r\n          // Lay out fields in advance\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            let instanceMembers = instance.members;\r\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\r\n            else if (instanceMembers.has(member.name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                (<FieldPrototype>member).identifierNode.range,\r\n                member.name\r\n              );\r\n              break;\r\n            }\r\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\r\n            let fieldType: Type | null = null;\r\n            // TODO: handle duplicate non-private fields specifically?\r\n            if (!fieldTypeNode) {\r\n              if (baseClass) {\r\n                let baseMembers = baseClass.members;\r\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\r\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\r\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\r\n                    assert(baseField.kind == ElementKind.FIELD);\r\n                    fieldType = (<Field>baseField).type;\r\n                  }\r\n                }\r\n              }\r\n              if (!fieldType) {\r\n                if (reportMode == ReportMode.REPORT) {\r\n                  this.error(\r\n                    DiagnosticCode.Type_expected,\r\n                    (<FieldPrototype>member).identifierNode.range.atEnd\r\n                  );\r\n                }\r\n              }\r\n            } else {\r\n              fieldType = this.resolveType(\r\n                fieldTypeNode,\r\n                prototype.parent, // relative to class\r\n                instance.contextualTypeArguments,\r\n                reportMode\r\n              );\r\n            }\r\n            if (!fieldType) break; // did report above\r\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\r\n            assert(isPowerOf2(fieldType.byteSize));\r\n            let mask = fieldType.byteSize - 1;\r\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\r\n            fieldInstance.memoryOffset = memoryOffset;\r\n            memoryOffset += fieldType.byteSize;\r\n            instance.add(member.name, fieldInstance); // reports\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\r\n            instance.add(boundPrototype.name, boundPrototype); // reports\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY_PROTOTYPE: {\r\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\r\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\r\n            if (getterPrototype) {\r\n              let getterInstance = this.resolveFunction(\r\n                getterPrototype.toBound(instance),\r\n                null,\r\n                makeMap(instance.contextualTypeArguments),\r\n                reportMode\r\n              );\r\n              if (getterInstance) {\r\n                propertyInstance.getterInstance = getterInstance;\r\n                propertyInstance.setType(getterInstance.signature.returnType);\r\n              }\r\n            }\r\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\r\n            if (setterPrototype) {\r\n              let setterInstance = this.resolveFunction(\r\n                setterPrototype.toBound(instance),\r\n                null,\r\n                makeMap(instance.contextualTypeArguments),\r\n                reportMode\r\n              );\r\n              if (setterInstance) {\r\n                propertyInstance.setterInstance = setterInstance;\r\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\r\n                  assert(setterInstance.signature.parameterTypes.length == 1);\r\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\r\n                }\r\n              }\r\n            }\r\n            instance.add(propertyInstance.name, propertyInstance); // reports\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Finalize memory offset\r\n    instance.currentMemoryOffset = memoryOffset;\r\n\r\n    // Link _own_ constructor if present\r\n    {\r\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\r\n      if (ctorPrototype && ctorPrototype.parent === instance) {\r\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n        let ctorInstance = this.resolveFunction(\r\n          <FunctionPrototype>ctorPrototype,\r\n          null,\r\n          instance.contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\r\n      }\r\n    }\r\n\r\n    // Fully resolve operator overloads (don't have type parameters on their own)\r\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\r\n      assert(kind != OperatorKind.INVALID);\r\n      let operatorInstance: Function | null;\r\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\r\n        let boundPrototype = overloadPrototype.toBound(instance);\r\n        operatorInstance = this.resolveFunction(\r\n          boundPrototype,\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n      } else {\r\n        operatorInstance = this.resolveFunction(\r\n          overloadPrototype,\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n      }\r\n      if (!operatorInstance) continue;\r\n      let overloads = instance.overloads;\r\n      if (!overloads) instance.overloads = overloads = new Map();\r\n      overloads.set(kind, operatorInstance);\r\n    }\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves a class prototype by first resolving the specified type arguments. */\r\n  resolveClassInclTypeArguments(\r\n    /** The prototype of the class. */\r\n    prototype: ClassPrototype,\r\n    /** Type argument nodes provided. */\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    /** Relative context. Type arguments are resolved from here. */\r\n    context: Element,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type>,\r\n    /** The node to use when reporting intermediate errors. */\r\n    reportNode: Node,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Class | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n\r\n    // Resolve type arguments if generic\r\n    if (prototype.is(CommonFlags.GENERIC)) {\r\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\r\n        assert(prototype.typeParameterNodes), // must be present if generic\r\n        typeArgumentNodes,\r\n        context,\r\n        contextualTypeArguments,\r\n        reportNode,\r\n        reportMode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n\r\n    // Otherwise make sure that no type arguments have been specified\r\n    } else {\r\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_generic,\r\n            reportNode.range, prototype.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Continue with concrete types\r\n    return this.resolveClass(\r\n      prototype,\r\n      resolvedTypeArguments,\r\n      contextualTypeArguments,\r\n      reportMode\r\n    );\r\n  }\r\n}\r\n","/**\r\n * A control flow analyzer.\r\n * @module flow\r\n *//***/\r\n\r\nimport {\r\n  Type,\r\n  TypeFlags,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  Local,\r\n  Function,\r\n  Element,\r\n  ElementKind,\r\n  Global\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionId,\r\n  ExpressionRef,\r\n\r\n  getExpressionId,\r\n  getLocalGetIndex,\r\n  isLocalTee,\r\n  getLocalSetValue,\r\n  getGlobalGetName,\r\n  getBinaryOp,\r\n  BinaryOp,\r\n  getBinaryLeft,\r\n  getConstValueI32,\r\n  getBinaryRight,\r\n  getUnaryOp,\r\n  UnaryOp,\r\n  getExpressionType,\r\n  getConstValueI64Low,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getLoadBytes,\r\n  isLoadSigned,\r\n  getBlockName,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getCallTarget,\r\n  getLocalSetIndex,\r\n  getIfCondition,\r\n  getConstValueI64High,\r\n  getUnaryValue,\r\n  getCallOperand,\r\n  traverse\r\n} from \"./module\";\r\n\r\nimport {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node\r\n} from \"./ast\";\r\n\r\n/** Control flow flags indicating specific conditions. */\r\nexport const enum FlowFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  // categorical\r\n\r\n  /** This flow returns. */\r\n  RETURNS = 1 << 0,\r\n  /** This flow returns a wrapped value. */\r\n  RETURNS_WRAPPED = 1 << 1,\r\n  /** This flow returns a non-null value. */\r\n  RETURNS_NONNULL = 1 << 2,\r\n  /** This flow throws. */\r\n  THROWS = 1 << 3,\r\n  /** This flow breaks. */\r\n  BREAKS = 1 << 4,\r\n  /** This flow continues. */\r\n  CONTINUES = 1 << 5,\r\n  /** This flow allocates. Constructors only. */\r\n  ALLOCATES = 1 << 6,\r\n  /** This flow calls super. Constructors only. */\r\n  CALLS_SUPER = 1 << 7,\r\n\r\n  // conditional\r\n\r\n  /** This flow conditionally returns in a child flow. */\r\n  CONDITIONALLY_RETURNS = 1 << 8,\r\n  /** This flow conditionally throws in a child flow. */\r\n  CONDITIONALLY_THROWS = 1 << 9,\r\n  /** This flow conditionally breaks in a child flow. */\r\n  CONDITIONALLY_BREAKS = 1 << 10,\r\n  /** This flow conditionally continues in a child flow. */\r\n  CONDITIONALLY_CONTINUES = 1 << 11,\r\n  /** This flow conditionally allocates in a child flow. Constructors only. */\r\n  CONDITIONALLY_ALLOCATES = 1 << 12,\r\n\r\n  // special\r\n\r\n  /** This is an inlining flow. */\r\n  INLINE_CONTEXT = 1 << 13,\r\n  /** This is a flow with explicitly disabled bounds checking. */\r\n  UNCHECKED_CONTEXT = 1 << 14,\r\n\r\n  // masks\r\n\r\n  /** Any terminating flag. */\r\n  ANY_TERMINATING = FlowFlags.RETURNS\r\n                  | FlowFlags.THROWS\r\n                  | FlowFlags.BREAKS\r\n                  | FlowFlags.CONTINUES,\r\n\r\n  /** Any categorical flag. */\r\n  ANY_CATEGORICAL = FlowFlags.RETURNS\r\n                  | FlowFlags.RETURNS_WRAPPED\r\n                  | FlowFlags.RETURNS_NONNULL\r\n                  | FlowFlags.THROWS\r\n                  | FlowFlags.BREAKS\r\n                  | FlowFlags.CONTINUES\r\n                  | FlowFlags.ALLOCATES\r\n                  | FlowFlags.CALLS_SUPER,\r\n\r\n  /** Any conditional flag. */\r\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\r\n                  | FlowFlags.CONDITIONALLY_THROWS\r\n                  | FlowFlags.CONDITIONALLY_BREAKS\r\n                  | FlowFlags.CONDITIONALLY_CONTINUES\r\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\r\n}\r\n\r\n/** Flags indicating the current state of a local. */\r\nexport enum LocalFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  /** Local is properly wrapped. Relevant for small integers. */\r\n  WRAPPED = 1 << 0,\r\n  /** Local is non-null. */\r\n  NONNULL = 1 << 1,\r\n  /** Local is read from. */\r\n  READFROM = 1 << 2,\r\n  /** Local is written to. */\r\n  WRITTENTO = 1 << 3,\r\n  /** Local is retained. */\r\n  RETAINED = 1 << 4,\r\n\r\n  /** Local is conditionally read from. */\r\n  CONDITIONALLY_READFROM = 1 << 5,\r\n  /** Local is conditionally written to. */\r\n  CONDITIONALLY_WRITTENTO = 1 << 6,\r\n  /** Local must be conditionally retained. */\r\n  CONDITIONALLY_RETAINED = 1 << 7,\r\n\r\n  /** Any categorical flag. */\r\n  ANY_CATEGORICAL = WRAPPED\r\n                  | NONNULL\r\n                  | READFROM\r\n                  | WRITTENTO\r\n                  | RETAINED,\r\n\r\n  /** Any conditional flag. */\r\n  ANY_CONDITIONAL = RETAINED\r\n                  | CONDITIONALLY_READFROM\r\n                  | CONDITIONALLY_WRITTENTO\r\n                  | CONDITIONALLY_RETAINED,\r\n\r\n  /** Any retained flag. */\r\n  ANY_RETAINED = RETAINED\r\n               | CONDITIONALLY_RETAINED\r\n}\r\nexport namespace LocalFlags {\r\n  export function join(left: LocalFlags, right: LocalFlags): LocalFlags {\r\n    return ((left & LocalFlags.ANY_CATEGORICAL) & (right & LocalFlags.ANY_CATEGORICAL))\r\n         |  (left & LocalFlags.ANY_CONDITIONAL) | (right & LocalFlags.ANY_CONDITIONAL);\r\n  }\r\n}\r\n\r\n/** Flags indicating the current state of a field. */\r\nexport enum FieldFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  /** Field is initialized. Relevant in constructors. */\r\n  INITIALIZED = 1 << 0,\r\n  /** Field is conditionally initialized. Relevant in constructors. */\r\n  CONDITIONALLY_INITIALIZED = 1 << 1,\r\n\r\n  /** Any categorical flag. */\r\n  ANY_CATEGORICAL = INITIALIZED,\r\n\r\n  /** Any conditional flag. */\r\n  ANY_CONDITIONAL = CONDITIONALLY_INITIALIZED\r\n}\r\nexport namespace FieldFlags {\r\n  export function join(left: FieldFlags, right: FieldFlags): FieldFlags {\r\n    return ((left & FieldFlags.ANY_CATEGORICAL) & (right & FieldFlags.ANY_CATEGORICAL))\r\n         |  (left & FieldFlags.ANY_CONDITIONAL) | (right & FieldFlags.ANY_CONDITIONAL);\r\n  }\r\n}\r\n\r\n/** A control flow evaluator. */\r\nexport class Flow {\r\n\r\n  /** Parent flow. */\r\n  parent: Flow | null;\r\n  /** Flow flags indicating specific conditions. */\r\n  flags: FlowFlags;\r\n  /** Function this flow belongs to. */\r\n  parentFunction: Function;\r\n  /** The label we break to when encountering a continue statement. */\r\n  continueLabel: string | null;\r\n  /** The label we break to when encountering a break statement. */\r\n  breakLabel: string | null;\r\n  /** The current return type. */\r\n  returnType: Type;\r\n  /** The current contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Scoped local variables. */\r\n  scopedLocals: Map<string,Local> | null = null;\r\n  /** Local flags. */\r\n  localFlags: LocalFlags[];\r\n  /** Field flags. Relevant in constructors. */\r\n  fieldFlags: Map<string,FieldFlags> | null = null;\r\n  /** Function being inlined, when inlining. */\r\n  inlineFunction: Function | null;\r\n  /** The label we break to when encountering a return statement, when inlining. */\r\n  inlineReturnLabel: string | null;\r\n\r\n  /** Creates the parent flow of the specified function. */\r\n  static create(parentFunction: Function): Flow {\r\n    var flow = new Flow();\r\n    flow.parent = null;\r\n    flow.flags = FlowFlags.NONE;\r\n    flow.parentFunction = parentFunction;\r\n    flow.continueLabel = null;\r\n    flow.breakLabel = null;\r\n    flow.returnType = parentFunction.signature.returnType;\r\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\r\n    flow.localFlags = [];\r\n    flow.inlineFunction = null;\r\n    flow.inlineReturnLabel = null;\r\n    return flow;\r\n  }\r\n\r\n  /** Creates an inline flow within `parentFunction`. */\r\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\r\n    var flow = Flow.create(parentFunction);\r\n    flow.set(FlowFlags.INLINE_CONTEXT);\r\n    flow.inlineFunction = inlineFunction;\r\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\r\n    flow.returnType = inlineFunction.signature.returnType;\r\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\r\n    return flow;\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\r\n  get actualFunction(): Function {\r\n    return this.inlineFunction || this.parentFunction;\r\n  }\r\n\r\n  /** Tests if this flow has the specified flag or flags. */\r\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this flow has one of the specified flags. */\r\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets the specified flag or flags. */\r\n  set(flag: FlowFlags): void { this.flags |= flag; }\r\n  /** Unsets the specified flag or flags. */\r\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\r\n\r\n  /** Forks this flow to a child flow. */\r\n  fork(): Flow {\r\n    var branch = new Flow();\r\n    branch.parent = this;\r\n    branch.flags = this.flags;\r\n    branch.parentFunction = this.parentFunction;\r\n    branch.continueLabel = this.continueLabel;\r\n    branch.breakLabel = this.breakLabel;\r\n    branch.returnType = this.returnType;\r\n    branch.contextualTypeArguments = this.contextualTypeArguments;\r\n    branch.localFlags = this.localFlags.slice();\r\n    branch.inlineFunction = this.inlineFunction;\r\n    branch.inlineReturnLabel = this.inlineReturnLabel;\r\n    return branch;\r\n  }\r\n\r\n  /** Gets a free temporary local of the specified type. */\r\n  getTempLocal(type: Type, except: ExpressionRef = 0): Local {\r\n    var parentFunction = this.parentFunction;\r\n    var temps: Local[] | null;\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\r\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\r\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\r\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\r\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (except) {\r\n      if (temps && temps.length) {\r\n        let usedLocals = new Set<i32>();\r\n        traverse(except, usedLocals, findUsedLocals);\r\n        for (let i = 0, k = temps.length; i < k; ++i) {\r\n          if (!usedLocals.has(temps[i].index)) {\r\n            local = temps[i];\r\n            let k = temps.length - 1;\r\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\r\n            temps.length = k;\r\n            this.unsetLocalFlag(local.index, ~0);\r\n            return local;\r\n          }\r\n        }\r\n      }\r\n      local = parentFunction.addLocal(type);\r\n    } else {\r\n      if (temps && temps.length) {\r\n        local = temps.pop();\r\n        local.type = type;\r\n        local.flags = CommonFlags.NONE;\r\n      } else {\r\n        local = parentFunction.addLocal(type);\r\n      }\r\n    }\r\n    this.unsetLocalFlag(local.index, ~0);\r\n    return local;\r\n  }\r\n\r\n  /** Gets a local that sticks around until this flow is exited, and then released. */\r\n  getAutoreleaseLocal(type: Type, except: ExpressionRef = 0): Local {\r\n    var local = this.getTempLocal(type, except);\r\n    local.set(CommonFlags.SCOPED);\r\n    var scopedLocals = this.scopedLocals;\r\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\r\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++), local);\r\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\r\n    return local;\r\n  }\r\n\r\n  /** Frees the temporary local for reuse. */\r\n  freeTempLocal(local: Local): void {\r\n    if (local.is(CommonFlags.INLINED)) return;\r\n    assert(local.index >= 0);\r\n    var parentFunction = this.parentFunction;\r\n    var temps: Local[];\r\n    assert(local.type != null); // internal error\r\n    switch ((<Type>local.type).toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\r\n        break;\r\n      }\r\n      case NativeType.V128: {\r\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    assert(local.index >= 0);\r\n    temps.push(local);\r\n  }\r\n\r\n  /** Gets and immediately frees a temporary local of the specified type. */\r\n  getAndFreeTempLocal(type: Type, except: ExpressionRef = 0): Local {\r\n    var local = this.getTempLocal(type, except);\r\n    this.freeTempLocal(local);\r\n    return local;\r\n  }\r\n\r\n  /** Adds a new scoped local of the specified name. */\r\n  addScopedLocal(name: string, type: Type, reportNode: Node | null = null): Local {\r\n    var scopedLocal = this.getTempLocal(type);\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        if (reportNode) {\r\n          this.parentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            reportNode.range\r\n          );\r\n        }\r\n        return existingLocal;\r\n      }\r\n    }\r\n    scopedLocal.set(CommonFlags.SCOPED);\r\n    this.scopedLocals.set(name, scopedLocal);\r\n    return scopedLocal;\r\n  }\r\n\r\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\r\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        if (reportNode) {\r\n          this.parentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            reportNode.range\r\n          );\r\n        }\r\n        return existingLocal;\r\n      }\r\n    }\r\n    assert(index < this.parentFunction.localsByIndex.length);\r\n    var scopedAlias = new Local(\r\n      name,\r\n      index,\r\n      type,\r\n      this.parentFunction\r\n    );\r\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\r\n    this.scopedLocals.set(name, scopedAlias);\r\n    return scopedAlias;\r\n  }\r\n\r\n  /** Blocks any locals that might be used in an inlining operation. */\r\n  blockLocalsBeforeInlining(instance: Function): Local[] {\r\n    var signature = instance.signature;\r\n    var parameterTypes = signature.parameterTypes;\r\n    var numParameters = parameterTypes.length;\r\n    var temps = new Array<Local>(numParameters);\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      temps[i] = this.getTempLocal(parameterTypes[i]);\r\n    }\r\n    var thisType = signature.thisType;\r\n    if (thisType) temps.push(this.getTempLocal(thisType));\r\n    return temps;\r\n  }\r\n\r\n  /** Unblocks the specified locals. */\r\n  unblockLocals(temps: Local[]): void {\r\n    for (let i = 0, k = temps.length; i < k; ++i) {\r\n      this.freeTempLocal(temps[i]);\r\n    }\r\n  }\r\n\r\n  /** Frees this flow's scoped variables and returns its parent flow. */\r\n  freeScopedLocals(): void {\r\n    if (this.scopedLocals) {\r\n      for (let scopedLocal of this.scopedLocals.values()) {\r\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          this.freeTempLocal(scopedLocal);\r\n        }\r\n      }\r\n      this.scopedLocals = null;\r\n    }\r\n  }\r\n\r\n  /** Looks up the local of the specified name in the current scope. */\r\n  lookupLocal(name: string): Local | null {\r\n    var current: Flow | null = this;\r\n    var scope: Map<String,Local> | null;\r\n    do if ((scope = current.scopedLocals) && (scope.has(name))) return scope.get(name);\r\n    while (current = current.parent);\r\n    return this.parentFunction.localsByName.get(name);\r\n  }\r\n\r\n  /** Looks up the element with the specified name relative to the scope of this flow. */\r\n  lookup(name: string): Element | null {\r\n    var element = this.lookupLocal(name);\r\n    if (element) return element;\r\n    return this.actualFunction.lookup(name);\r\n  }\r\n\r\n  /** Tests if the local at the specified index has the specified flag or flags. */\r\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\r\n    if (index < 0) return defaultIfInlined;\r\n    var localFlags = this.localFlags;\r\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) == flag;\r\n  }\r\n\r\n  /** Tests if the local at the specified index has any of the specified flags. */\r\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\r\n    if (index < 0) return defaultIfInlined;\r\n    var localFlags = this.localFlags;\r\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) != 0;\r\n  }\r\n\r\n  /** Sets the specified flag or flags on the local at the specified index. */\r\n  setLocalFlag(index: i32, flag: LocalFlags): void {\r\n    if (index < 0) return;\r\n    var localFlags = this.localFlags;\r\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\r\n    this.localFlags[index] = flags | flag;\r\n  }\r\n\r\n  /** Unsets the specified flag or flags on the local at the specified index. */\r\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\r\n    if (index < 0) return;\r\n    var localFlags = this.localFlags;\r\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\r\n    this.localFlags[index] = flags & ~flag;\r\n  }\r\n\r\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\r\n  pushBreakLabel(): string {\r\n    var parentFunction = this.parentFunction;\r\n    var id = parentFunction.nextBreakId++;\r\n    var stack = parentFunction.breakStack;\r\n    if (!stack) parentFunction.breakStack = [ id ];\r\n    else stack.push(id);\r\n    return parentFunction.breakLabel = id.toString(10);\r\n  }\r\n\r\n  /** Pops the most recent break label from the stack. */\r\n  popBreakLabel(): void {\r\n    var parentFunction = this.parentFunction;\r\n    var stack = assert(parentFunction.breakStack);\r\n    var length = assert(stack.length);\r\n    stack.pop();\r\n    if (length > 1) {\r\n      parentFunction.breakLabel = stack[length - 2].toString(10);\r\n    } else {\r\n      parentFunction.breakLabel = null;\r\n      parentFunction.breakStack = null;\r\n    }\r\n  }\r\n\r\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\r\n  inherit(other: Flow): void {\r\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\r\n    this.localFlags = other.localFlags; // no need to slice because other flow is finished\r\n  }\r\n\r\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\r\n  inheritConditional(other: Flow): void {\r\n    if (other.is(FlowFlags.RETURNS)) {\r\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\r\n    }\r\n    if (other.is(FlowFlags.THROWS)) {\r\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\r\n    }\r\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\r\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\r\n    }\r\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\r\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\r\n    }\r\n    if (other.is(FlowFlags.ALLOCATES)) {\r\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\r\n    }\r\n    var localFlags = other.localFlags;\r\n    for (let i = 0, k = localFlags.length; i < k; ++i) {\r\n      let flags = localFlags[i];\r\n      if (flags & LocalFlags.RETAINED) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETAINED);\r\n      if (flags & LocalFlags.READFROM) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_READFROM);\r\n      if (flags & LocalFlags.WRITTENTO) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_WRITTENTO);\r\n    }\r\n  }\r\n\r\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\r\n  inheritMutual(left: Flow, right: Flow): void {\r\n    // categorical flags set in both arms\r\n    this.set(left.flags & right.flags & FlowFlags.ANY_CATEGORICAL);\r\n\r\n    // conditional flags set in at least one arm\r\n    this.set(left.flags & FlowFlags.ANY_CONDITIONAL);\r\n    this.set(right.flags & FlowFlags.ANY_CONDITIONAL);\r\n\r\n    // categorical local flags set in both arms / conditional local flags set in at least one arm\r\n    var leftLocalFlags = left.localFlags;\r\n    var numLeftLocalFlags = leftLocalFlags.length;\r\n    var rightLocalFlags = right.localFlags;\r\n    var numRightLocalFlags = rightLocalFlags.length;\r\n    var combinedFlags = new Array<LocalFlags>(max<i32>(numLeftLocalFlags, numRightLocalFlags));\r\n    for (let i = 0; i < numLeftLocalFlags; ++i) {\r\n      combinedFlags[i] = LocalFlags.join(\r\n        unchecked(leftLocalFlags[i]),\r\n        i < numRightLocalFlags\r\n          ? unchecked(rightLocalFlags[i])\r\n          : 0\r\n      );\r\n    }\r\n    for (let i = numLeftLocalFlags; i < numRightLocalFlags; ++i) {\r\n      combinedFlags[i] = LocalFlags.join(\r\n        0,\r\n        unchecked(rightLocalFlags[i])\r\n      );\r\n    }\r\n    this.localFlags = combinedFlags;\r\n  }\r\n\r\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\r\n  isNonnull(expr: ExpressionRef, type: Type): bool {\r\n    if (!type.is(TypeFlags.NULLABLE)) return true;\r\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\r\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\r\n    // has already been handled by the nullable type check above.\r\n    switch (getExpressionId(expr)) {\r\n      case ExpressionId.LocalSet: {\r\n        if (!isLocalTee(expr)) break;\r\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\r\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\r\n      }\r\n      case ExpressionId.LocalGet: {\r\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\r\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\r\n  inheritNonnullIfTrue(expr: ExpressionRef): void {\r\n    // A: `expr` is true-ish -> Q: how did that happen?\r\n    switch (getExpressionId(expr)) {\r\n      case ExpressionId.LocalSet: {\r\n        if (!isLocalTee(expr)) break;\r\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\r\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\r\n        this.inheritNonnullIfTrue(getLocalSetValue(expr)); // must have been true-ish as well\r\n        break;\r\n      }\r\n      case ExpressionId.LocalGet: {\r\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\r\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\r\n        break;\r\n      }\r\n      case ExpressionId.If: {\r\n        let ifFalse = getIfFalse(expr);\r\n        if (!ifFalse) break;\r\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\r\n          // Logical AND: (if (condition ifTrue 0))\r\n          // the only way this had become true is if condition and ifTrue are true\r\n          if (\r\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\r\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\r\n          ) {\r\n            this.inheritNonnullIfTrue(getIfCondition(expr));\r\n            this.inheritNonnullIfTrue(getIfTrue(expr));\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.inheritNonnullIfFalse(getUnaryValue(expr)); // !value -> value must have been false\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n          case BinaryOp.EqI32: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\r\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\r\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.EqI64: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\r\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\r\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.NeI32: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\r\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\r\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.NeI64: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\r\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\r\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Call: {\r\n        let name = getCallTarget(expr);\r\n        let program = this.parentFunction.program;\r\n        switch (name) {\r\n          case program.retainInstance.internalName: {\r\n            this.inheritNonnullIfTrue(getCallOperand(expr, 0));\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\r\n  inheritNonnullIfFalse(expr: ExpressionRef): void {\r\n    // A: `expr` is false-ish -> Q: how did that happen?\r\n    switch (getExpressionId(expr)) {\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.inheritNonnullIfTrue(getUnaryValue(expr)); // !value -> value must have been true\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.If: {\r\n        let ifTrue = getIfTrue(expr);\r\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\r\n          let ifFalse = getIfFalse(expr);\r\n          if (!ifFalse) break;\r\n          // Logical OR: (if (condition 1 ifFalse))\r\n          // the only way this had become false is if condition and ifFalse are false\r\n          if (\r\n            (getExpressionType(ifTrue) == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\r\n            (getExpressionType(ifTrue) == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\r\n          ) {\r\n            this.inheritNonnullIfFalse(getIfCondition(expr));\r\n            this.inheritNonnullIfFalse(getIfFalse(expr));\r\n          }\r\n\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n          // remember: we want to know how the _entire_ expression became FALSE (!)\r\n          case BinaryOp.EqI32: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\r\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\r\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.EqI64: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\r\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\r\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.NeI32: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\r\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true\r\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\r\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true\r\n            }\r\n            break;\r\n          }\r\n          case BinaryOp.NeI64: {\r\n            let left = getBinaryLeft(expr);\r\n            let right = getBinaryRight(expr);\r\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\r\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true for this to become false\r\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\r\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true for this to become false\r\n            }\r\n            break;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\r\n   * expression might already have overflown and returns `false` only if the operation neglects\r\n   * any possible combination of garbage bits being present.\r\n   */\r\n  canOverflow(expr: ExpressionRef, type: Type): bool {\r\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\r\n    // opportunities here, obviously.\r\n    assert(type != Type.void);\r\n\r\n    // types other than i8, u8, i16, u16 and bool do not overflow\r\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\r\n\r\n    var operand: ExpressionRef;\r\n    switch (getExpressionId(expr)) {\r\n\r\n      // overflows if the local isn't wrapped or the conversion does\r\n      case ExpressionId.LocalGet: {\r\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\r\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\r\n            || canConversionOverflow(local.type, type);\r\n      }\r\n\r\n      // overflows if the value does\r\n      case ExpressionId.LocalSet: { // tee\r\n        assert(isLocalTee(expr));\r\n        return this.canOverflow(getLocalSetValue(expr), type);\r\n      }\r\n\r\n      // overflows if the conversion does (globals are wrapped on set)\r\n      case ExpressionId.GlobalGet: {\r\n        // TODO: this is inefficient because it has to read a string\r\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr))));\r\n        assert(global.kind == ElementKind.GLOBAL);\r\n        return canConversionOverflow(assert((<Global>global).type), type);\r\n      }\r\n\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64:\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64:\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtU32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtU64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64:\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeU32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeU64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64:\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtU32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtU64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64:\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeU32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeU64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: return false;\r\n\r\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\r\n          case BinaryOp.MulI32: {\r\n            return !(\r\n              (\r\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryRight(expr), type)\r\n                  )\r\n                )\r\n              ) || (\r\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryLeft(expr), type)\r\n                  )\r\n                )\r\n              )\r\n            );\r\n          }\r\n\r\n          // result won't overflow if one side is a constant less than this type's mask or one side\r\n          // is wrapped\r\n          case BinaryOp.AndI32: {\r\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\r\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\r\n            return !(\r\n              (\r\n                (\r\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              ) || (\r\n                (\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              )\r\n            );\r\n          }\r\n\r\n          // overflows if the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShlI32: {\r\n            let shift = 32 - type.size;\r\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\r\n                || getConstValueI32(operand) < shift;\r\n          }\r\n\r\n          // overflows if the value does and the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShrI32: {\r\n            let shift = 32 - type.size;\r\n            return this.canOverflow(getBinaryLeft(expr), type) && (\r\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\r\n              getConstValueI32(operand) < shift\r\n            );\r\n          }\r\n\r\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\r\n          // wrapped, it can't overflow.\r\n          case BinaryOp.ShrU32: {\r\n            let shift = 32 - type.size;\r\n            return type.is(TypeFlags.SIGNED)\r\n              ? !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) > shift // must clear MSB\r\n                )\r\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) >= shift // can leave MSB\r\n                );\r\n          }\r\n\r\n          // overflows if any side does\r\n          case BinaryOp.DivU32:\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemU32: {\r\n            return this.canOverflow(getBinaryLeft(expr), type)\r\n                || this.canOverflow(getBinaryRight(expr), type);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: return false;\r\n\r\n          // overflow if the maximum result (32) cannot be represented in the target type\r\n          case UnaryOp.ClzI32:\r\n          case UnaryOp.CtzI32:\r\n          case UnaryOp.PopcntI32: return type.size < 7;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the value cannot be represented in the target type\r\n      case ExpressionId.Const: {\r\n        let value: i32 = 0;\r\n        switch (getExpressionType(expr)) {\r\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\r\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\r\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\r\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\r\n          default: assert(false);\r\n        }\r\n        switch (type.kind) {\r\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\r\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\r\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\r\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\r\n          case TypeKind.BOOL: return (value & ~1) != 0;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the conversion does\r\n      case ExpressionId.Load: {\r\n        let fromType: Type;\r\n        let signed = isLoadSigned(expr);\r\n        switch (getLoadBytes(expr)) {\r\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\r\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\r\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\r\n        }\r\n        return canConversionOverflow(fromType, type);\r\n      }\r\n\r\n      // overflows if the result does, which is either\r\n      // - the last expression of the block, by contract, if the block doesn't have a label\r\n      // - the last expression or the value of an inner br if the block has a label (TODO)\r\n      case ExpressionId.Block: {\r\n        if (!getBlockName(expr)) {\r\n          let size = assert(getBlockChildCount(expr));\r\n          let last = getBlockChild(expr, size - 1);\r\n          return this.canOverflow(last, type);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.If: {\r\n        return this.canOverflow(getIfTrue(expr), type)\r\n            || this.canOverflow(assert(getIfFalse(expr)), type);\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.Select: {\r\n        return this.canOverflow(getSelectThen(expr), type)\r\n            || this.canOverflow(getSelectElse(expr), type);\r\n      }\r\n\r\n      // overflows if the call does not return a wrapped value or the conversion does\r\n      case ExpressionId.Call: {\r\n        let program = this.parentFunction.program;\r\n        let instancesByName = program.instancesByName;\r\n        let instanceName = assert(getCallTarget(expr));\r\n        if (instancesByName.has(instanceName)) {\r\n          let instance = instancesByName.get(instanceName)!;\r\n          assert(instance.kind == ElementKind.FUNCTION);\r\n          let returnType = (<Function>instance).signature.returnType;\r\n          return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\r\n              || canConversionOverflow(returnType, type);\r\n        }\r\n        return false; // assume no overflow for builtins\r\n      }\r\n\r\n      // doesn't technically overflow\r\n      case ExpressionId.Unreachable: return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  toString(): string {\r\n    var levels = 0;\r\n    var parent = this.parent;\r\n    while (parent) {\r\n      parent = parent.parent;\r\n      ++levels;\r\n    }\r\n    return \"Flow(\" + this.actualFunction + \")[\" + levels.toString() + \"]\";\r\n  }\r\n}\r\n\r\n/** Tests if a conversion from one type to another can technically overflow. */\r\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\r\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\r\n      || fromType.size > toType.size\r\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\r\n}\r\n\r\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\r\nfunction findUsedLocals(expr: ExpressionRef, used: Set<i32>): void {\r\n  switch (getExpressionId(expr)) {\r\n    case ExpressionId.LocalGet: {\r\n      used.add(getLocalGetIndex(expr));\r\n      break;\r\n    }\r\n    case ExpressionId.LocalSet: {\r\n      used.add(getLocalSetIndex(expr));\r\n      // fall-through for value\r\n    }\r\n    default: traverse(expr, used, findUsedLocals);\r\n  }\r\n}\r\n","/**\r\n * The AssemblyScript compiler.\r\n * @module compiler\r\n *//***/\r\n\r\nimport {\r\n  BuiltinSymbols,\r\n  compileCall as compileBuiltinCall,\r\n  compileAbort,\r\n  compileVisitGlobals,\r\n  compileVisitMembers,\r\n  compileRTTI,\r\n} from \"./builtins\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module,\r\n  MemorySegment,\r\n  ExpressionRef,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionId,\r\n  FunctionTypeRef,\r\n  GlobalRef,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getBlockName,\r\n  needsExplicitUnreachable,\r\n  getLocalGetIndex,\r\n  FeatureFlags,\r\n  isLocalTee,\r\n  getLocalSetIndex\r\n} from \"./module\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  INSTANCE_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX,\r\n  CommonSymbols,\r\n  INDEX_SUFFIX,\r\n  Feature,\r\n  Target\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program,\r\n  ClassPrototype,\r\n  Class,\r\n  Element,\r\n  ElementKind,\r\n  Enum,\r\n  Field,\r\n  FunctionPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  Global,\r\n  Local,\r\n  EnumValue,\r\n  Property,\r\n  VariableLikeElement,\r\n  ConstantValueKind,\r\n  OperatorKind,\r\n  DecoratorFlags,\r\n  PropertyPrototype,\r\n  File,\r\n  mangleInternalName\r\n} from \"./program\";\r\n\r\nimport {\r\n  FlowFlags,\r\n  Flow,\r\n  LocalFlags\r\n} from \"./flow\";\r\n\r\nimport {\r\n  Resolver, ReportMode\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  Token,\r\n  operatorTokenToString\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  TypeNode,\r\n  Range,\r\n  DecoratorKind,\r\n  AssertionKind,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DoStatement,\r\n  EmptyStatement,\r\n  EnumDeclaration,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  FieldDeclaration,\r\n  ForStatement,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportStatement,\r\n  InstanceOfExpression,\r\n  InterfaceDeclaration,\r\n  NamespaceDeclaration,\r\n  ReturnStatement,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  VariableStatement,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  BinaryExpression,\r\n  CallExpression,\r\n  CommaExpression,\r\n  ElementAccessExpression,\r\n  FloatLiteralExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  IntegerLiteralExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  NewExpression,\r\n  ObjectLiteralExpression,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  TernaryExpression,\r\n  ArrayLiteralExpression,\r\n  StringLiteralExpression,\r\n  UnaryPostfixExpression,\r\n  UnaryPrefixExpression,\r\n\r\n  nodeIsConstantValue,\r\n  findDecorator,\r\n  isTypeOmitted\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n  typesToNativeTypes\r\n} from \"./types\";\r\n\r\nimport {\r\n  writeI8,\r\n  writeI16,\r\n  writeI32,\r\n  writeI64,\r\n  writeF32,\r\n  writeF64,\r\n  makeMap\r\n} from \"./util\";\r\n\r\n/** Compiler options. */\r\nexport class Options {\r\n\r\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\r\n  target: Target = Target.WASM32;\r\n  /** If true, replaces assertions with nops. */\r\n  noAssert: bool = false;\r\n  /** If true, imports the memory provided by the embedder. */\r\n  importMemory: bool = false;\r\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\r\n  sharedMemory: i32 = 0;\r\n  /** If true, imports the function table provided by the embedder. */\r\n  importTable: bool = false;\r\n  /** If true, generates information necessary for source maps. */\r\n  sourceMap: bool = false;\r\n  /** Static memory start offset. */\r\n  memoryBase: i32 = 0;\r\n  /** Global aliases. */\r\n  globalAliases: Map<string,string> | null = null;\r\n  /** Additional features to activate. */\r\n  features: Feature = Feature.NONE;\r\n\r\n  /** Hinted optimize level. Not applied by the compiler itself. */\r\n  optimizeLevelHint: i32 = 0;\r\n  /** Hinted shrink level. Not applied by the compiler itself. */\r\n  shrinkLevelHint: i32 = 0;\r\n\r\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\r\n  get isWasm64(): bool {\r\n    return this.target == Target.WASM64;\r\n  }\r\n\r\n  /** Gets the unsigned size type matching the target. */\r\n  get usizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\r\n  }\r\n\r\n  /** Gets the signed size type matching the target. */\r\n  get isizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\r\n  }\r\n\r\n  /** Gets the native size type matching the target. */\r\n  get nativeSizeType(): NativeType {\r\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\r\n  }\r\n\r\n  /** Tests if a specific feature is activated. */\r\n  hasFeature(feature: Feature): bool {\r\n    return (this.features & feature) != 0;\r\n  }\r\n}\r\n\r\n/** Requests or indicates compilation conditions of statements and expressions. */\r\nexport const enum ContextualFlags {\r\n  NONE = 0,\r\n\r\n  /** Implicit conversion required. */\r\n  IMPLICIT = 1 << 0,\r\n  /** Explicit conversion required. */\r\n  EXPLICIT = 1 << 1,\r\n  /** Small integer wrap required. */\r\n  WRAP = 1 << 2,\r\n\r\n  /** Value is known to be immediately dropped. */\r\n  WILL_DROP = 1 << 3,\r\n  /** Value is known to be immediately assigned to a retaining target.  */\r\n  SKIP_AUTORELEASE = 1 << 4,\r\n  /** Is the last statement in a function body. */\r\n  LAST_IN_BODY = 1 << 5,\r\n  /** Data can be compiled statically. */\r\n  STATIC_CAPABLE = 1 << 6\r\n}\r\n\r\n/** Runtime features to be activated by the compiler. */\r\nexport const enum RuntimeFeatures {\r\n  NONE = 0,\r\n  /** Requires HEAP_BASE and heap setup. */\r\n  HEAP = 1 << 0,\r\n  /** Requires RTTI_BASE and RTTI setup. */\r\n  RTTI = 1 << 1,\r\n  /** Requires the built-in globals visitor. */\r\n  visitGlobals = 1 << 2,\r\n  /** Requires the built-in members visitor. */\r\n  visitMembers = 1 << 3\r\n}\r\n\r\n/** Compiler interface. */\r\nexport class Compiler extends DiagnosticEmitter {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Resolver reference. */\r\n  resolver: Resolver;\r\n  /** Provided options. */\r\n  options: Options;\r\n  /** Module instance being compiled. */\r\n  module: Module;\r\n  /** Current control flow. */\r\n  currentFlow: Flow;\r\n  /** Current inline functions stack. */\r\n  currentInlineFunctions: Function[] = [];\r\n  /** Current enum in compilation. */\r\n  currentEnum: Enum | null = null;\r\n  /** Current type in compilation. */\r\n  currentType: Type = Type.void;\r\n  /** Start function statements. */\r\n  currentBody: ExpressionRef[];\r\n  /** Counting memory offset. */\r\n  memoryOffset: I64;\r\n  /** Memory segments being compiled. */\r\n  memorySegments: MemorySegment[] = [];\r\n  /** Map of already compiled static string segments. */\r\n  stringSegments: Map<string,MemorySegment> = new Map();\r\n  /** Function table being compiled. */\r\n  functionTable: string[] = [ \"null\" ];\r\n  /** Argument count helper global. */\r\n  argcVar: GlobalRef = 0;\r\n  /** Argument count helper setter. */\r\n  argcSet: FunctionRef = 0;\r\n  /** Requires runtime features. */\r\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\r\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\r\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\r\n\r\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\r\n  static compile(program: Program, options: Options | null = null): Module {\r\n    return new Compiler(program, options).compile();\r\n  }\r\n\r\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\r\n  constructor(program: Program, options: Options | null = null) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n    this.resolver = program.resolver;\r\n    if (!options) options = new Options();\r\n    this.options = options;\r\n    this.memoryOffset = i64_new(\r\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\r\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\r\n      max(options.memoryBase, 8)\r\n    );\r\n    this.module = Module.create();\r\n    var featureFlags: BinaryenFeatureFlags = 0;\r\n    if (this.options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\r\n    if (this.options.hasFeature(Feature.MUTABLE_GLOBAL)) featureFlags |= FeatureFlags.MutableGloabls;\r\n    // if (this.options.hasFeature(Feature.TRUNC_SAT)) featureFlags |= FeatureFlags.NontrappingFPToInt;\r\n    if (this.options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\r\n    if (this.options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\r\n    if (this.options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\r\n    // if (this.options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\r\n    this.module.setFeatures(featureFlags);\r\n  }\r\n\r\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\r\n  compile(): Module {\r\n    var options = this.options;\r\n    var module = this.module;\r\n    var program = this.program;\r\n\r\n    // initialize lookup maps, built-ins, imports, exports, etc.\r\n    program.initialize(options);\r\n\r\n    // set up the main start function\r\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature([], Type.void));\r\n    startFunctionInstance.internalName = \"start\";\r\n    var startFunctionBody = new Array<ExpressionRef>();\r\n    this.currentFlow = startFunctionInstance.flow;\r\n    this.currentBody = startFunctionBody;\r\n\r\n    // add a mutable heap and rtti base dummies\r\n    if (options.isWasm64) {\r\n      module.addGlobal(BuiltinSymbols.HEAP_BASE, NativeType.I64, true, module.i64(0));\r\n      module.addGlobal(BuiltinSymbols.RTTI_BASE, NativeType.I64, true, module.i64(0));\r\n    } else {\r\n      module.addGlobal(BuiltinSymbols.HEAP_BASE, NativeType.I32, true, module.i32(0));\r\n      module.addGlobal(BuiltinSymbols.RTTI_BASE, NativeType.I32, true, module.i32(0));\r\n    }\r\n\r\n    // compile entry file(s) while traversing reachable elements\r\n    var files = program.filesByName;\r\n    for (let file of files.values()) {\r\n      if (file.source.isEntry) {\r\n        this.compileFile(file);\r\n        this.compileExports(file);\r\n      }\r\n    }\r\n\r\n    // compile the start function if not empty or called by main\r\n    var hasExplicitStart = program.explicitStartFunction !== null;\r\n    if (startFunctionBody.length || hasExplicitStart) {\r\n      let signature = startFunctionInstance.signature;\r\n      let funcRef = module.addFunction(\r\n        startFunctionInstance.internalName,\r\n        this.ensureFunctionType(\r\n          signature.parameterTypes,\r\n          signature.returnType,\r\n          signature.thisType\r\n        ),\r\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\r\n        module.block(null, startFunctionBody)\r\n      );\r\n      startFunctionInstance.finalize(module, funcRef);\r\n      if (!hasExplicitStart) module.setStart(funcRef);\r\n    }\r\n\r\n    // compile runtime features\r\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\r\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\r\n    module.removeGlobal(BuiltinSymbols.RTTI_BASE);\r\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\r\n\r\n    // update the heap base pointer\r\n    var memoryOffset = this.memoryOffset;\r\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\r\n    this.memoryOffset = memoryOffset;\r\n    module.removeGlobal(BuiltinSymbols.HEAP_BASE);\r\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\r\n      if (options.isWasm64) {\r\n        module.addGlobal(\r\n          BuiltinSymbols.HEAP_BASE,\r\n          NativeType.I64,\r\n          false,\r\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\r\n        );\r\n      } else {\r\n        module.addGlobal(\r\n          BuiltinSymbols.HEAP_BASE,\r\n          NativeType.I32,\r\n          false,\r\n          module.i32(i64_low(memoryOffset))\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up memory\r\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\r\n    module.setMemory(\r\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\r\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\r\n        : 0,\r\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\r\n      this.memorySegments,\r\n      options.target,\r\n      \"memory\",\r\n      isSharedMemory\r\n    );\r\n\r\n    // import memory if requested (default memory is named '0' by Binaryen)\r\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\r\n\r\n    // set up function table\r\n    var functionTable = this.functionTable;\r\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\r\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.block(null, []));\r\n\r\n    // import table if requested (default table is named '0' by Binaryen)\r\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\r\n\r\n    // set up module exports\r\n    for (let file of this.program.filesByName.values()) {\r\n      if (file.source.isEntry) this.ensureModuleExports(file);\r\n    }\r\n    return module;\r\n  }\r\n\r\n  /** Applies the respective module exports for the specified file. */\r\n  private ensureModuleExports(file: File): void {\r\n    var members = file.exports;\r\n    if (members) for (let [name, member] of members) this.ensureModuleExport(name, member);\r\n    var exportsStar = file.exportsStar;\r\n    if (exportsStar)  {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.ensureModuleExports(exportsStar[i]);\r\n    }\r\n  }\r\n\r\n  /** Applies the respective module export(s) for the specified element. */\r\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\r\n    switch (element.kind) {\r\n\r\n      // traverse instances\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instances = (<FunctionPrototype>element).instances;\r\n        if (instances) {\r\n          for (let instance of instances.values()) {\r\n            let instanceName = name;\r\n            if (instance.is(CommonFlags.GENERIC)) {\r\n              let fullName = instance.internalName;\r\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\r\n            }\r\n            this.ensureModuleExport(instanceName, instance, prefix);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        let instances = (<ClassPrototype>element).instances;\r\n        if (instances) {\r\n          for (let instance of instances.values()) {\r\n            let instanceName = name;\r\n            if (instance.is(CommonFlags.GENERIC)) {\r\n              let fullName = instance.internalName;\r\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\r\n            }\r\n            this.ensureModuleExport(instanceName, instance, prefix);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        let getter = (<PropertyPrototype>element).getterPrototype;\r\n        let setter = (<PropertyPrototype>element).setterPrototype;\r\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\r\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\r\n        break;\r\n      }\r\n\r\n      // export concrete elements\r\n      case ElementKind.GLOBAL: {\r\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_export_a_mutable_global,\r\n            (<Global>element).identifierNode.range\r\n          );\r\n        } else {\r\n          this.module.addGlobalExport(element.internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.ENUMVALUE: {\r\n        if (!(<EnumValue>element).isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_export_a_mutable_global,\r\n            (<EnumValue>element).identifierNode.range\r\n          );\r\n        } else {\r\n          this.module.addGlobalExport(element.internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION: {\r\n        let instance = <Function>element;\r\n        let signature = instance.signature;\r\n        if (signature.requiredParameters < signature.parameterTypes.length) {\r\n          // utilize trampoline to fill in omitted arguments\r\n          instance = this.ensureTrampoline(instance);\r\n          this.ensureArgcSet();\r\n        }\r\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let getter = (<Property>element).getterInstance;\r\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\r\n        let setter = (<Property>element).setterInstance;\r\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        this.ensureModuleFieldGetter(prefix + GETTER_PREFIX + name, <Field>element);\r\n        if (!element.is(CommonFlags.READONLY)) {\r\n          this.ensureModuleFieldSetter(prefix + SETTER_PREFIX + name, <Field>element);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        // make the class name itself represent its runtime id\r\n        if (!(<Class>element).type.isUnmanaged) {\r\n          let module = this.module;\r\n          let internalName = (<Class>element).internalName;\r\n          module.addGlobal(internalName, NativeType.I32, false, module.i32((<Class>element).id));\r\n          module.addGlobalExport(internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // just traverse members below\r\n      case ElementKind.ENUM:\r\n      case ElementKind.NAMESPACE:\r\n      case ElementKind.FILE:\r\n      case ElementKind.TYPEDEFINITION: break;\r\n\r\n      default: assert(false); // unexpected module export\r\n    }\r\n\r\n    // traverse members\r\n    var members = element.members;\r\n    if (members) {\r\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\r\n        ? INSTANCE_DELIMITER\r\n        : STATIC_DELIMITER\r\n      );\r\n      if (\r\n        element.kind == ElementKind.NAMESPACE ||\r\n        element.kind == ElementKind.FILE\r\n      ) {\r\n        for (let member of members.values()) {\r\n          if (!member.is(CommonFlags.EXPORT)) continue;\r\n          this.ensureModuleExport(member.name, member, subPrefix);\r\n        }\r\n      } else {\r\n        for (let member of members.values()) {\r\n          if (member.is(CommonFlags.PRIVATE)) continue;\r\n          this.ensureModuleExport(member.name, member, subPrefix);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes a function to get the value of a field of an exported class. */\r\n  private ensureModuleFieldGetter(name: string, field: Field): void {\r\n    var module = this.module;\r\n    var type = field.type;\r\n    var usizeType = this.options.usizeType;\r\n    var loadExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\r\n      module.local_get(0, usizeType.toNativeType()),\r\n      type.toNativeType(), field.memoryOffset\r\n    );\r\n    // a user-defined getter would return a retained value, so:\r\n    if (type.isManaged) loadExpr = this.makeRetain(loadExpr);\r\n    module.addFunction(\r\n      name,\r\n      this.ensureFunctionType(null, type, usizeType),\r\n      null,\r\n      loadExpr\r\n    );\r\n    module.addFunctionExport(name, name);\r\n  }\r\n\r\n  /** Makes a function to set the value of a field of an exported class. */\r\n  private ensureModuleFieldSetter(name: string, field: Field): void {\r\n    var module = this.module;\r\n    var type = field.type;\r\n    var nativeType = type.toNativeType();\r\n    var usizeType = this.options.usizeType;\r\n    var nativeSizeType = usizeType.toNativeType();\r\n    var valueExpr = module.local_get(1, nativeType);\r\n    if (type.isManaged) {\r\n      valueExpr = this.makeRetainRelease(\r\n        module.load(type.byteSize, false, // oldRef\r\n          module.local_get(0, nativeSizeType),\r\n          nativeType, field.memoryOffset\r\n        ),\r\n        valueExpr // newRef\r\n      );\r\n    }\r\n    module.addFunction(\r\n      name,\r\n      this.ensureFunctionType([ type ], Type.void, usizeType),\r\n      null,\r\n      module.store(\r\n        type.byteSize,\r\n        module.local_get(0, nativeSizeType),\r\n        valueExpr,\r\n        nativeType,\r\n        field.memoryOffset\r\n      )\r\n    );\r\n    module.addFunctionExport(name, name);\r\n  }\r\n\r\n  // === Elements =================================================================================\r\n\r\n  /** Compiles any element. */\r\n  compileElement(element: Element, compileMembers: bool = true): void {\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        this.compileGlobal(<Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        this.compileEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        if (!element.is(CommonFlags.GENERIC)) {\r\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        if (!element.is(CommonFlags.GENERIC)) {\r\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\r\n        if (getterPrototype) {\r\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\r\n        }\r\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\r\n        if (setterPrototype) {\r\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE:\r\n      case ElementKind.TYPEDEFINITION:\r\n      case ElementKind.ENUMVALUE: break;\r\n      default: assert(false, ElementKind[element.kind]);\r\n    }\r\n    if (compileMembers) this.compileMembers(element);\r\n  }\r\n\r\n  /** Compiles an element's members. */\r\n  compileMembers(element: Element): void {\r\n    var members = element.members;\r\n    if (members) for (let element of members.values()) this.compileElement(element);\r\n  }\r\n\r\n  /** Compiles a file's exports. */\r\n  compileExports(file: File): void {\r\n    var exports = file.exports;\r\n    if (exports) for (let element of exports.values()) this.compileElement(element);\r\n    var exportsStar = file.exportsStar;\r\n    if (exportsStar) {\r\n      for (let exportStar of exportsStar) {\r\n        this.compileFile(exportStar);\r\n        this.compileExports(exportStar);\r\n      }\r\n    }\r\n  }\r\n\r\n  // files\r\n\r\n  /** Compiles the file matching the specified path. */\r\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\r\n    var file: File;\r\n    var filesByName = this.program.filesByName;\r\n    var pathWithIndex: string;\r\n    if (filesByName.has(normalizedPathWithoutExtension)) {\r\n      file = filesByName.get(normalizedPathWithoutExtension)!;\r\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\r\n      file = filesByName.get(pathWithIndex)!;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.File_0_not_found,\r\n        reportNode.range, normalizedPathWithoutExtension\r\n      );\r\n      return;\r\n    }\r\n    this.compileFile(file);\r\n  }\r\n\r\n  /** Compiles the specified file. */\r\n  compileFile(file: File): void {\r\n    if (file.is(CommonFlags.COMPILED)) return;\r\n    file.set(CommonFlags.COMPILED);\r\n\r\n    // compile top-level statements within the file's start function\r\n    var startFunction = file.startFunction;\r\n    var previousBody = this.currentBody;\r\n    var startFunctionBody = new Array<ExpressionRef>();\r\n    this.currentBody = startFunctionBody;\r\n\r\n    // compile top-level statements\r\n    var previousFlow = this.currentFlow;\r\n    var flow = startFunction.flow;\r\n    this.currentFlow = flow;\r\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\r\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\r\n    }\r\n    this.finishAutoreleases(flow, startFunctionBody);\r\n    this.currentFlow = previousFlow;\r\n    this.currentBody = previousBody;\r\n\r\n    // if top-level statements are present, make the per-file start function and call it in start\r\n    if (startFunctionBody.length) {\r\n      let module = this.module;\r\n      let locals = startFunction.localsByIndex;\r\n      let numLocals = locals.length;\r\n      let varTypes = new Array<NativeType>(numLocals);\r\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\r\n      module.addFunction(\r\n        startFunction.internalName,\r\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\r\n        varTypes,\r\n        startFunctionBody.length > 1\r\n          ? module.block(null, startFunctionBody)\r\n          : startFunctionBody[0]\r\n      );\r\n      previousBody.push(\r\n        module.call(startFunction.internalName, null, NativeType.None)\r\n      );\r\n    }\r\n  }\r\n\r\n  // === Globals ==================================================================================\r\n\r\n  compileGlobal(global: Global): bool {\r\n    if (global.is(CommonFlags.COMPILED)) return true;\r\n    global.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var initExpr: ExpressionRef = 0;\r\n    var initAutoreleaseSkipped: bool = false;\r\n    var typeNode = global.typeNode;\r\n    var initializerNode = global.initializerNode;\r\n\r\n    if (!global.is(CommonFlags.RESOLVED)) {\r\n\r\n      // resolve now if annotated\r\n      if (typeNode) {\r\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\r\n        if (!resolvedType) return false;\r\n        if (resolvedType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            typeNode.range\r\n          );\r\n          return false;\r\n        }\r\n        global.setType(resolvedType);\r\n\r\n      // infer from initializer if not annotated\r\n      } else if (initializerNode) { // infer type using void/NONE for literal inference\r\n        let previousFlow = this.currentFlow;\r\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\r\n          this.currentFlow = global.file.startFunction.flow;\r\n        }\r\n        initExpr = this.compileExpression(initializerNode, Type.i32, // reports\r\n          ContextualFlags.WRAP | ContextualFlags.SKIP_AUTORELEASE\r\n        );\r\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\r\n        this.currentFlow = previousFlow;\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          return false;\r\n        }\r\n        global.setType(this.currentType);\r\n\r\n      // must either be annotated or have an initializer\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          global.identifierNode.range.atEnd\r\n        );\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\r\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\r\n      if (global.internalName == BuiltinSymbols.HEAP_BASE) this.runtimeFeatures |= RuntimeFeatures.HEAP;\r\n      else if (global.internalName == BuiltinSymbols.RTTI_BASE) this.runtimeFeatures |= RuntimeFeatures.RTTI;\r\n      return true;\r\n    }\r\n\r\n    var type = global.type;\r\n    var nativeType = type.toNativeType();\r\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n\r\n    // handle imports\r\n    if (global.is(CommonFlags.AMBIENT)) {\r\n\r\n      // constant global\r\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n        global.set(CommonFlags.MODULE_IMPORT);\r\n        mangleImportName(global, global.declaration);\r\n        module.addGlobalImport(\r\n          global.internalName,\r\n          mangleImportName_moduleName,\r\n          mangleImportName_elementName,\r\n          nativeType\r\n        );\r\n        global.set(CommonFlags.COMPILED);\r\n        return true;\r\n\r\n      // importing mutable globals is not supported in the MVP\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          global.declaration.range\r\n        );\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // the MVP does not yet support initializer expressions other than constant values (and constant\r\n    // get_globals), hence such initializations must be performed in the start function for now.\r\n    var initializeInStart = false;\r\n\r\n    // evaluate initializer if present\r\n    if (initializerNode) {\r\n      if (!initExpr) {\r\n        let previousFlow = this.currentFlow;\r\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\r\n          this.currentFlow = global.file.startFunction.flow;\r\n        }\r\n        initExpr = this.compileExpression(initializerNode, type,\r\n          ContextualFlags.IMPLICIT | ContextualFlags.WRAP | ContextualFlags.SKIP_AUTORELEASE | ContextualFlags.STATIC_CAPABLE\r\n        );\r\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\r\n        this.currentFlow = previousFlow;\r\n      }\r\n\r\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n        if (isDeclaredConstant) {\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              initializerNode.range\r\n            );\r\n            initializeInStart = true;\r\n          }\r\n        } else {\r\n          initializeInStart = true;\r\n        }\r\n      }\r\n\r\n      // explicitly inline if annotated\r\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\r\n        if (!initializeInStart) { // reported above\r\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\r\n          let exprType = getExpressionType(initExpr);\r\n          switch (exprType) {\r\n            case NativeType.I32: {\r\n              global.constantValueKind = ConstantValueKind.INTEGER;\r\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\r\n              break;\r\n            }\r\n            case NativeType.I64: {\r\n              global.constantValueKind = ConstantValueKind.INTEGER;\r\n              global.constantIntegerValue = i64_new(\r\n                getConstValueI64Low(initExpr),\r\n                getConstValueI64High(initExpr)\r\n              );\r\n              break;\r\n            }\r\n            case NativeType.F32: {\r\n              global.constantValueKind = ConstantValueKind.FLOAT;\r\n              global.constantFloatValue = getConstValueF32(initExpr);\r\n              break;\r\n            }\r\n            case NativeType.F64: {\r\n              global.constantValueKind = ConstantValueKind.FLOAT;\r\n              global.constantFloatValue = getConstValueF64(initExpr);\r\n              break;\r\n            }\r\n            default: {\r\n              assert(false);\r\n              return false;\r\n            }\r\n          }\r\n          global.set(CommonFlags.INLINED); // inline the value from now on\r\n        }\r\n      }\r\n\r\n    // initialize to zero if there's no initializer\r\n    } else {\r\n      initExpr = type.toNativeZero(module);\r\n    }\r\n\r\n    var internalName = global.internalName;\r\n\r\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\r\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\r\n        this.error(\r\n          DiagnosticCode.Decorator_0_is_not_valid_here,\r\n          assert(findDecorator(DecoratorKind.INLINE, global.decoratorNodes)).range, \"inline\"\r\n        );\r\n      }\r\n      module.addGlobal(internalName, nativeType, true, type.toNativeZero(module));\r\n      if (type.isManaged && !initAutoreleaseSkipped) initExpr = this.makeRetain(initExpr);\r\n      this.currentBody.push(\r\n        module.global_set(internalName, initExpr)\r\n      );\r\n    } else if (!global.hasDecorator(DecoratorFlags.INLINE)) { // compile normally\r\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // === Enums ====================================================================================\r\n\r\n  compileEnum(element: Enum): bool {\r\n    if (element.is(CommonFlags.COMPILED)) return true;\r\n    element.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    this.currentEnum = element;\r\n    var previousValue: EnumValue | null = null;\r\n    var previousValueIsMut = false;\r\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\r\n\r\n    if (element.members) {\r\n      for (let member of element.members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\r\n        let initInStart = false;\r\n        let val = <EnumValue>member;\r\n        let valueNode = val.valueNode;\r\n        val.set(CommonFlags.COMPILED);\r\n        let previousFlow = this.currentFlow;\r\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\r\n          this.currentFlow = element.file.startFunction.flow;\r\n        }\r\n        let initExpr: ExpressionRef;\r\n        if (valueNode) {\r\n          initExpr = this.compileExpression(valueNode, Type.i32,\r\n            ContextualFlags.IMPLICIT // autorelease is not applicable in i32 context\r\n          );\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            initExpr = module.precomputeExpression(initExpr);\r\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n              if (element.is(CommonFlags.CONST)) {\r\n                this.error(\r\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\r\n                  valueNode.range\r\n                );\r\n              }\r\n              initInStart = true;\r\n            }\r\n          }\r\n        } else if (previousValue == null) {\r\n          initExpr = module.i32(0);\r\n        } else {\r\n          if (previousValueIsMut) {\r\n            this.error(\r\n              DiagnosticCode.Enum_member_must_have_initializer,\r\n              (<EnumValue>member).identifierNode.range.atEnd\r\n            );\r\n          }\r\n          initExpr = module.binary(BinaryOp.AddI32,\r\n            module.global_get(previousValue.internalName, NativeType.I32),\r\n            module.i32(1)\r\n          );\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            if (element.is(CommonFlags.CONST)) {\r\n              this.error(\r\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\r\n                member.declaration.range\r\n              );\r\n            }\r\n            initInStart = true;\r\n          }\r\n        }\r\n        this.currentFlow = previousFlow;\r\n        if (initInStart) {\r\n          module.addGlobal(val.internalName, NativeType.I32, true, module.i32(0));\r\n          this.currentBody.push(\r\n            this.makeGlobalAssignment(val, initExpr, false)\r\n          );\r\n          previousValueIsMut = true;\r\n        } else {\r\n          if (isInline) {\r\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\r\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\r\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\r\n            }\r\n          } else {\r\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\r\n          }\r\n          val.isImmutable = true;\r\n          previousValueIsMut = false;\r\n        }\r\n        previousValue = <EnumValue>val;\r\n      }\r\n    }\r\n    this.currentEnum = null;\r\n    return true;\r\n  }\r\n\r\n  // === Functions ================================================================================\r\n\r\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\r\n  compileFunctionUsingTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> = makeMap(),\r\n    alternativeReportNode: Node | null = null\r\n  ): Function | null {\r\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\r\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\r\n      prototype,\r\n      typeArguments,\r\n      prototype.parent, // relative to itself\r\n      contextualTypeArguments,\r\n      alternativeReportNode || prototype.declaration\r\n    );\r\n    if (!instance) return null;\r\n    if (!this.compileFunction(instance)) return null; // reports\r\n    return instance;\r\n  }\r\n\r\n  /** Either reuses or creates the function type matching the specified signature. */\r\n  ensureFunctionType(\r\n    parameterTypes: Type[] | null,\r\n    returnType: Type,\r\n    thisType: Type | null = null\r\n  ): FunctionTypeRef {\r\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\r\n    var paramTypes: NativeType[];\r\n    var index = 0;\r\n    if (thisType) {\r\n      paramTypes = new Array(1 + numParameters);\r\n      paramTypes[0] = thisType.toNativeType();\r\n      index = 1;\r\n    } else {\r\n      paramTypes = new Array(numParameters);\r\n    }\r\n    if (parameterTypes) {\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        paramTypes[index] = parameterTypes[i].toNativeType();\r\n      }\r\n    }\r\n    var resultType = returnType.toNativeType();\r\n    var module = this.module;\r\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\r\n    if (!typeRef) {\r\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\r\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\r\n    }\r\n    return typeRef;\r\n  }\r\n\r\n  /** Compiles the body of a function within the specified flow. */\r\n  compileFunctionBody(\r\n    /** Function to compile. */\r\n    instance: Function,\r\n    /** Target array of statements. */\r\n    stmts: ExpressionRef[] | null = null\r\n  ): ExpressionRef[] {\r\n    var module = this.module;\r\n    var bodyNode = assert(instance.prototype.bodyNode);\r\n    var returnType = instance.signature.returnType;\r\n    var flow = this.currentFlow;\r\n\r\n    // compile statements\r\n    if (bodyNode.kind == NodeKind.BLOCK) {\r\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\r\n    } else {\r\n      // must be an expression statement if not a block\r\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\r\n\r\n      // must be an arrow function\r\n      assert(instance.prototype.arrowKind);\r\n\r\n      // none of the following can be an arrow function\r\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\r\n\r\n      let expr = this.compileExpression((<ExpressionStatement>bodyNode).expression, returnType,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      if (!stmts) stmts = [ expr ];\r\n      else stmts.push(expr);\r\n      if (!flow.isAny(FlowFlags.ANY_TERMINATING)) { // TODO: detect if returning an autorelease local?\r\n        let indexBefore = stmts.length;\r\n        this.performAutoreleases(flow, stmts);\r\n        this.finishAutoreleases(flow, stmts);\r\n        let canOverflow = flow.canOverflow(expr, returnType);\r\n        let nonNull = flow.isNonnull(expr, returnType);\r\n        if (stmts.length > indexBefore) {\r\n          let temp = flow.getAndFreeTempLocal(returnType);\r\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\r\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\r\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\r\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\r\n        }\r\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\r\n        flow.set(FlowFlags.RETURNS); // now is terminating\r\n      }\r\n    }\r\n\r\n    // make the main function call `start` implicitly, but only once\r\n    if (instance.prototype == this.program.explicitStartFunction) {\r\n      module.addGlobal(BuiltinSymbols.started, NativeType.I32, true, module.i32(0));\r\n      stmts.unshift(\r\n        module.if(\r\n          module.unary(\r\n            UnaryOp.EqzI32,\r\n            module.global_get(BuiltinSymbols.started, NativeType.I32)\r\n          ),\r\n          module.block(null, [\r\n            module.call(\"start\", null, NativeType.None),\r\n            module.global_set(BuiltinSymbols.started, module.i32(1))\r\n          ])\r\n        )\r\n      );\r\n    }\r\n\r\n    // make constructors return their instance pointer\r\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\r\n      let nativeSizeType = this.options.nativeSizeType;\r\n      assert(instance.is(CommonFlags.INSTANCE));\r\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n\r\n      if (!flow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n        let thisLocalIndex = flow.is(FlowFlags.INLINE_CONTEXT)\r\n          ? assert(flow.lookupLocal(CommonSymbols.this_)).index\r\n          : 0;\r\n\r\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\r\n        if (!flow.is(FlowFlags.ALLOCATES)) {\r\n          // {\r\n          //   if (!this) this = <ALLOC>\r\n          //   this.a = X\r\n          //   this.b = Y\r\n          // }\r\n          stmts.push(\r\n            module.if(\r\n              module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n                module.local_get(thisLocalIndex, nativeSizeType)\r\n              ),\r\n              module.local_set(thisLocalIndex,\r\n                this.makeRetain(\r\n                  this.makeAllocation(<Class>classInstance)\r\n                ),\r\n              )\r\n            )\r\n          );\r\n          this.makeFieldInitialization(<Class>classInstance, stmts);\r\n        }\r\n\r\n        // implicitly return `this`. unlike for normal functions, retaining the value isn't\r\n        // necessary because the allocation (constructor call) already did (RC=1)\r\n        stmts.push(\r\n          module.local_get(thisLocalIndex, nativeSizeType)\r\n        );\r\n        flow.set(FlowFlags.RETURNS);\r\n      }\r\n\r\n      // check that super has been called if this is a derived class\r\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\r\n        this.error(\r\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\r\n          instance.prototype.declaration.range\r\n        );\r\n      }\r\n\r\n    // if this is a normal function, make sure that all branches return\r\n    } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\r\n      this.error(\r\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n        instance.prototype.signatureNode.returnType.range\r\n      );\r\n    }\r\n\r\n    return stmts;\r\n  }\r\n\r\n  /** Compiles a readily resolved function instance. */\r\n  compileFunction(instance: Function): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\r\n\r\n    var previousType = this.currentType; // remember to retain it if compiling a function lazily\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var signature = instance.signature;\r\n    var bodyNode = instance.prototype.bodyNode;\r\n\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var funcRef: FunctionRef;\r\n\r\n    // concrete function\r\n    if (bodyNode) {\r\n\r\n      // must not be ambient\r\n      if (instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          instance.identifierNode.range\r\n        );\r\n      }\r\n\r\n      // cannot have an annotated external name\r\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\r\n        let decoratorNodes = instance.decoratorNodes;\r\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          decorator.range\r\n        );\r\n      }\r\n\r\n      // compile body in this function's context\r\n      let previousFlow = this.currentFlow;\r\n      let flow = instance.flow;\r\n      this.currentFlow = flow;\r\n      let stmts = new Array<ExpressionRef>();\r\n\r\n      // retain each argument for as long as the function lives\r\n      let index = 0;\r\n      let thisType = signature.thisType;\r\n      if (thisType) {\r\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\r\n        ++index;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\r\n        let type = parameterTypes[i];\r\n        if (type.isManaged) {\r\n          stmts.push(\r\n            module.drop(\r\n              this.makeRetain(\r\n                module.local_get(index, type.toNativeType())\r\n              )\r\n            )\r\n          );\r\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\r\n        }\r\n      }\r\n\r\n      this.compileFunctionBody(instance, stmts);\r\n      if (!flow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n        this.performAutoreleases(flow, stmts);\r\n        this.finishAutoreleases(flow, stmts);\r\n      }\r\n      this.currentFlow = previousFlow;\r\n\r\n      // create the function\r\n      funcRef = module.addFunction(\r\n        instance.internalName,\r\n        typeRef,\r\n        typesToNativeTypes(instance.additionalLocals),\r\n        flatten(module, stmts, instance.signature.returnType.toNativeType())\r\n      );\r\n\r\n    // imported function\r\n    } else {\r\n      if (!instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          instance.identifierNode.range\r\n        );\r\n      }\r\n\r\n      instance.set(CommonFlags.MODULE_IMPORT);\r\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\r\n\r\n      // create the import\r\n      funcRef = module.addFunctionImport(\r\n        instance.internalName,\r\n        mangleImportName_moduleName,\r\n        mangleImportName_elementName,\r\n        typeRef\r\n      );\r\n    }\r\n\r\n    instance.finalize(module, funcRef);\r\n    this.currentType = previousType;\r\n    return true;\r\n  }\r\n\r\n  // === Classes ==================================================================================\r\n\r\n  compileClassUsingTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> = makeMap(),\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var instance = this.resolver.resolveClassInclTypeArguments(\r\n      prototype,\r\n      typeArguments,\r\n      prototype.parent, // relative to itself\r\n      contextualTypeArguments,\r\n      alternativeReportNode || prototype.declaration\r\n    );\r\n    if (!instance) return;\r\n    this.compileClass(instance);\r\n  }\r\n\r\n  compileClass(instance: Class): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    instance.set(CommonFlags.COMPILED);\r\n    var prototype = instance.prototype;\r\n    var staticMembers = (<ClassPrototype>prototype).members;\r\n    if (staticMembers) {\r\n      for (let element of staticMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.GLOBAL: {\r\n            this.compileGlobal(<Global>element);\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                (<FunctionPrototype>element).identifierNode\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY_PROTOTYPE: {\r\n            let getter = (<PropertyPrototype>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                getter.identifierNode\r\n              );\r\n            }\r\n            let setter = (<PropertyPrototype>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                setter.identifierNode\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n          }\r\n        }\r\n      }\r\n    }\r\n    var ctorInstance = instance.constructorInstance;\r\n    if (ctorInstance) this.compileFunction(ctorInstance);\r\n    var instanceMembers = instance.members;\r\n    if (instanceMembers) {\r\n      for (let element of instanceMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                makeMap<string,Type>(instance.contextualTypeArguments),\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            element.set(CommonFlags.COMPILED);\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterInstance;\r\n            if (getter) this.compileFunction(getter);\r\n            let setter = (<Property>element).setterInstance;\r\n            if (setter) this.compileFunction(setter);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  compileInterfaceDeclaration(\r\n    declaration: InterfaceDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    // TODO\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      declaration.range\r\n    );\r\n  }\r\n\r\n  // === Memory ===================================================================================\r\n\r\n  /** Adds a static memory segment with the specified data. */\r\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\r\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\r\n    var segment = MemorySegment.create(buffer, memoryOffset);\r\n    this.memorySegments.push(segment);\r\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\r\n    return segment;\r\n  }\r\n\r\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\r\n  ensureStaticString(stringValue: string): ExpressionRef {\r\n    var program = this.program;\r\n    var rtHeaderSize = program.runtimeHeaderSize;\r\n    var stringInstance = assert(program.stringInstance);\r\n    var stringSegment: MemorySegment;\r\n    var segments = this.stringSegments;\r\n    if (segments.has(stringValue)) {\r\n      stringSegment = segments.get(stringValue)!; // reuse\r\n    } else {\r\n      let length = stringValue.length;\r\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\r\n      program.writeRuntimeHeader(buffer, 0, stringInstance, length << 1);\r\n      for (let i = 0; i < length; ++i) {\r\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\r\n      }\r\n      stringSegment = this.addMemorySegment(buffer);\r\n      segments.set(stringValue, stringSegment);\r\n    }\r\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\r\n    this.currentType = stringInstance.type;\r\n    if (this.options.isWasm64) {\r\n      return this.module.i64(i64_low(ref), i64_high(ref));\r\n    } else {\r\n      assert(i64_is_u32(ref));\r\n      return this.module.i32(i64_low(ref));\r\n    }\r\n  }\r\n\r\n  ensureStaticArrayBuffer(elementType: Type, values: ExpressionRef[]): MemorySegment {\r\n    var program = this.program;\r\n    var length = values.length;\r\n    var byteSize = elementType.byteSize;\r\n    var byteLength = length * byteSize;\r\n    var bufferInstance = assert(program.arrayBufferInstance);\r\n    var runtimeHeaderSize = program.runtimeHeaderSize;\r\n\r\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\r\n    program.writeRuntimeHeader(buf, 0, bufferInstance, byteLength);\r\n    var pos = runtimeHeaderSize;\r\n    var nativeType = elementType.toNativeType();\r\n    switch (nativeType) {\r\n      case NativeType.I32: {\r\n        switch (byteSize) {\r\n          case 1: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI8(getConstValueI32(value), buf, pos);\r\n              pos += 1;\r\n            }\r\n            break;\r\n          }\r\n          case 2: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI16(getConstValueI32(value), buf, pos);\r\n              pos += 2;\r\n            }\r\n            break;\r\n          }\r\n          case 4: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI32(getConstValueI32(value), buf, pos);\r\n              pos += 4;\r\n            }\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\r\n          pos += 8;\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeF32(getConstValueF32(value), buf, pos);\r\n          pos += 4;\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeF64(getConstValueF64(value), buf, pos);\r\n          pos += 8;\r\n        }\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    assert(pos == buf.length);\r\n\r\n    return this.addMemorySegment(buf);\r\n  }\r\n\r\n  ensureStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\r\n    var program = this.program;\r\n    var runtimeHeaderSize = program.runtimeHeaderSize;\r\n    var arrayPrototype = assert(program.arrayPrototype);\r\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\r\n    var arrayInstanceSize = arrayInstance.currentMemoryOffset;\r\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\r\n    var arrayLength = i32(bufferLength / elementType.byteSize);\r\n\r\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\r\n    program.writeRuntimeHeader(buf, 0, arrayInstance, arrayInstanceSize);\r\n\r\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\r\n    assert(!program.options.isWasm64); // TODO\r\n    assert(arrayInstance.writeField(\"data\", bufferAddress32, buf, runtimeHeaderSize));\r\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\r\n    assert(arrayInstance.writeField(\"dataLength\", bufferLength, buf, runtimeHeaderSize));\r\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\r\n\r\n    return this.addMemorySegment(buf);\r\n  }\r\n\r\n  // === Table ====================================================================================\r\n\r\n  /** Ensures that a table entry exists for the specified function and returns its index. */\r\n  ensureFunctionTableEntry(func: Function): i32 {\r\n    assert(func.is(CommonFlags.COMPILED));\r\n    if (func.functionTableIndex >= 0) {\r\n      return func.functionTableIndex;\r\n    }\r\n    var functionTable = this.functionTable;\r\n    var index = functionTable.length;\r\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\r\n      // insert the trampoline if the function has optional parameters\r\n      func = this.ensureTrampoline(func);\r\n    }\r\n    functionTable.push(func.internalName);\r\n    func.functionTableIndex = index;\r\n    return index;\r\n  }\r\n\r\n  // === Statements ===============================================================================\r\n\r\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\r\n    switch (statement.kind) {\r\n      case NodeKind.CLASSDECLARATION: {\r\n        let memberStatements = (<ClassDeclaration>statement).members;\r\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\r\n          this.compileTopLevelStatement(memberStatements[i], body);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.ENUMDECLARATION: {\r\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\r\n        assert(element.kind == ElementKind.ENUM);\r\n        if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case NodeKind.NAMESPACEDECLARATION: {\r\n        let memberStatements = (<NamespaceDeclaration>statement).members;\r\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\r\n          this.compileTopLevelStatement(memberStatements[i], body);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        let declarations = (<VariableStatement>statement).declarations;\r\n        for (let i = 0, k = declarations.length; i < k; ++i) {\r\n          let element = this.program.getElementByDeclaration(declarations[i]);\r\n          assert(element.kind == ElementKind.GLOBAL);\r\n          if (\r\n            !element.is(CommonFlags.AMBIENT) && // delay imports\r\n            !element.hasDecorator(DecoratorFlags.LAZY)\r\n          ) this.compileGlobal(<Global>element);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.FIELDDECLARATION: {\r\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\r\n        if (element.kind == ElementKind.GLOBAL) { // static\r\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.EXPORT: {\r\n        if ((<ExportStatement>statement).normalizedPath != null) {\r\n          this.compileFileByPath(\r\n            <string>(<ExportStatement>statement).normalizedPath,\r\n            <StringLiteralExpression>(<ExportStatement>statement).path\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.IMPORT: {\r\n        this.compileFileByPath(\r\n          (<ImportStatement>statement).normalizedPath,\r\n          (<ImportStatement>statement).path\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTIONDECLARATION:\r\n      case NodeKind.METHODDECLARATION:\r\n      case NodeKind.INTERFACEDECLARATION:\r\n      case NodeKind.INDEXSIGNATUREDECLARATION:\r\n      case NodeKind.TYPEDECLARATION: break;\r\n      default: { // otherwise a top-level statement that is part of the start function's body\r\n        let stmt = this.compileStatement(statement);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  compileStatement(\r\n    statement: Statement,\r\n    contextualFlags: ContextualFlags = ContextualFlags.NONE\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var stmt: ExpressionRef;\r\n    switch (statement.kind) {\r\n      case NodeKind.BLOCK: {\r\n        stmt = this.compileBlockStatement(<BlockStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.BREAK: {\r\n        stmt = this.compileBreakStatement(<BreakStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.CONTINUE: {\r\n        stmt = this.compileContinueStatement(<ContinueStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.DO: {\r\n        stmt = this.compileDoStatement(<DoStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.EMPTY: {\r\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.EXPRESSION: {\r\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.FOR: {\r\n        stmt = this.compileForStatement(<ForStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.IF: {\r\n        stmt = this.compileIfStatement(<IfStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.RETURN: {\r\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.SWITCH: {\r\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.THROW: {\r\n        stmt = this.compileThrowStatement(<ThrowStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.TRY: {\r\n        stmt = this.compileTryStatement(<TryStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        stmt = this.compileVariableStatement(<VariableStatement>statement, contextualFlags);\r\n        if (!stmt) stmt = module.nop();\r\n        break;\r\n      }\r\n      case NodeKind.VOID: {\r\n        stmt = this.compileVoidStatement(<VoidStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.WHILE: {\r\n        stmt = this.compileWhileStatement(<WhileStatement>statement, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.TYPEDECLARATION: {\r\n        // TODO: integrate inner type declaration into flow\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          statement.range\r\n        );\r\n        stmt = module.unreachable();\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        stmt = module.unreachable();\r\n      }\r\n    }\r\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\r\n    return stmt;\r\n  }\r\n\r\n  compileStatements(\r\n    statements: Statement[],\r\n    isBody: bool = false,\r\n    stmts: ExpressionRef[] | null = null\r\n  ): ExpressionRef[] {\r\n    var numStatements = statements.length;\r\n    if (!stmts) {\r\n      stmts = new Array<ExpressionRef>(numStatements);\r\n      stmts.length = 0;\r\n    }\r\n    var flow = this.currentFlow;\r\n    for (let i = 0; i < numStatements; ++i) {\r\n      let stmt = this.compileStatement(statements[i],\r\n        isBody && i == numStatements - 1\r\n          ? ContextualFlags.LAST_IN_BODY\r\n          : ContextualFlags.NONE\r\n      );\r\n      switch (getExpressionId(stmt)) {\r\n        case ExpressionId.Block: {\r\n          if (!getBlockName(stmt)) {\r\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: stmts.push(stmt);\r\n        case ExpressionId.Nop:\r\n      }\r\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n        if (needsExplicitUnreachable(stmt)) stmts.push(this.module.unreachable());\r\n        break;\r\n      }\r\n    }\r\n    return stmts;\r\n  }\r\n\r\n  compileBlockStatement(\r\n    statement: BlockStatement,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var statements = statement.statements;\r\n    var outerFlow = this.currentFlow;\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n\r\n    var stmts = this.compileStatements(statements);\r\n    if (!innerFlow.isAny(FlowFlags.ANY_TERMINATING)) this.performAutoreleases(innerFlow, stmts);\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.inherit(innerFlow); // TODO: only if not terminated?\r\n    this.currentFlow = outerFlow;\r\n    return flatten(this.module, stmts, NativeType.None);\r\n  }\r\n\r\n  compileBreakStatement(\r\n    statement: BreakStatement,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    if (statement.label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.label.range\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    var flow = this.currentFlow;\r\n    var breakLabel = flow.breakLabel;\r\n    if (breakLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\r\n        statement.range\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    var stmts = new Array<ExpressionRef>();\r\n    this.performAutoreleases(flow, stmts);\r\n    var current: Flow | null = flow.parent;\r\n    while (current && current.breakLabel === breakLabel) {\r\n      this.performAutoreleases(current, stmts, /* clearFlags */ false);\r\n      current = current.parent;\r\n    }\r\n    flow.freeScopedLocals();\r\n    stmts.push(module.br(breakLabel));\r\n    flow.set(FlowFlags.BREAKS);\r\n    return flatten(module, stmts, NativeType.None);\r\n  }\r\n\r\n  compileContinueStatement(\r\n    statement: ContinueStatement,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var label = statement.label;\r\n    if (label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        label.range\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    // Check if 'continue' is allowed here\r\n    var flow = this.currentFlow;\r\n    var continueLabel = flow.continueLabel;\r\n    if (continueLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\r\n        statement.range\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    flow.set(FlowFlags.CONTINUES);\r\n    var stmts = new Array<ExpressionRef>();\r\n    this.performAutoreleases(flow, stmts);\r\n    var current: Flow | null = flow.parent;\r\n    while (current && current.continueLabel === continueLabel) {\r\n      this.performAutoreleases(current, stmts, /* clearFlags */ false);\r\n      current = current.parent;\r\n    }\r\n    flow.freeScopedLocals();\r\n    stmts.push(module.br(continueLabel));\r\n    return flatten(module, stmts, NativeType.None);\r\n  }\r\n\r\n  compileDoStatement(\r\n    statement: DoStatement,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    var outerFlow = this.currentFlow;\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n    var breakLabel = \"break|\" + label;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n\r\n    var stmts = new Array<ExpressionRef>();\r\n    if (statement.statement.kind == NodeKind.BLOCK) {\r\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\r\n    } else {\r\n      stmts.push(\r\n        this.compileStatement(statement.statement)\r\n      );\r\n    }\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32),\r\n      this.currentType\r\n    );\r\n    // TODO: check if condition is always false and if so, omit it (just a block)\r\n\r\n    // Switch back to the parent flow\r\n    var terminated = innerFlow.isAny(FlowFlags.ANY_TERMINATING);\r\n    if (!terminated) this.performAutoreleases(innerFlow, stmts);\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.popBreakLabel();\r\n    this.currentFlow = outerFlow;\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    outerFlow.inherit(innerFlow);\r\n\r\n    var block: ExpressionRef[] = [\r\n      module.loop(continueLabel,\r\n        terminated\r\n          ? flatten(module, stmts, NativeType.None) // skip trailing continue if unnecessary\r\n          : module.block(null, [\r\n              flatten(module, stmts, NativeType.None),\r\n              module.br(continueLabel, condExpr)\r\n            ], NativeType.None)\r\n      )\r\n    ];\r\n    if (terminated) block.push(module.unreachable());\r\n    return module.block(breakLabel, block);\r\n  }\r\n\r\n  compileEmptyStatement(\r\n    statement: EmptyStatement,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    return this.module.nop();\r\n  }\r\n\r\n  compileExpressionStatement(\r\n    statement: ExpressionStatement,\r\n    contextualFlags: ContextualFlags,\r\n  ): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void,\r\n      contextualFlags | ContextualFlags.EXPLICIT | ContextualFlags.WILL_DROP\r\n    );\r\n  }\r\n\r\n  compileForStatement(\r\n    statement: ForStatement,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    // A for statement initiates a new branch with its own scoped variables\r\n    // possibly declared in its initializer, and break context.\r\n    var outerFlow = this.currentFlow;\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n    var repeatLabel = \"repeat|\" + label;\r\n\r\n    // Compile in correct order\r\n    var module = this.module;\r\n    var initExpr = statement.initializer\r\n      ? this.compileStatement(<Statement>statement.initializer)\r\n      : 0;\r\n    var condExpr: ExpressionRef = 0;\r\n    var alwaysTrue = false;\r\n    if (statement.condition) {\r\n      condExpr = module.precomputeExpression(\r\n        this.makeIsTrueish(\r\n          this.compileExpressionRetainType(<Expression>statement.condition, Type.bool),\r\n          this.currentType\r\n        )\r\n      );\r\n      // check if the condition is always true\r\n      if (getExpressionId(condExpr) == ExpressionId.Const) {\r\n        assert(getExpressionType(condExpr) == NativeType.I32);\r\n        if (getConstValueI32(condExpr) != 0) alwaysTrue = true;\r\n        // TODO: could skip compilation if the condition is always false here, but beware that the\r\n        // initializer could still declare new 'var's that are used later on.\r\n      }\r\n    } else {\r\n      // omitted condition is always true\r\n      condExpr = module.i32(1);\r\n      alwaysTrue = true;\r\n    }\r\n    innerFlow.inheritNonnullIfTrue(condExpr);\r\n    var incrExpr = statement.incrementor\r\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void,\r\n          ContextualFlags.IMPLICIT | ContextualFlags.WILL_DROP\r\n        )\r\n      :  0;\r\n    var bodyStatement = statement.statement;\r\n    var stmts = new Array<ExpressionRef>();\r\n    if (bodyStatement.kind == NodeKind.BLOCK) {\r\n      this.compileStatements((<BlockStatement>bodyStatement).statements, false, stmts);\r\n    } else {\r\n      stmts.push(\r\n        this.compileStatement(bodyStatement)\r\n      );\r\n    }\r\n    if (!innerFlow.isAny(FlowFlags.ANY_TERMINATING)) this.performAutoreleases(innerFlow, stmts);\r\n\r\n    // Switch back to the parent flow\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.popBreakLabel();\r\n    this.currentFlow = outerFlow;\r\n    var usesContinue = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\r\n    else outerFlow.inheritConditional(innerFlow);\r\n\r\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\r\n    if (initExpr) breakBlock.push(initExpr);\r\n\r\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\r\n    if (usesContinue) {\r\n      stmts.unshift(\r\n        module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr))\r\n      );\r\n      repeatBlock.push(\r\n        module.block(continueLabel, stmts, NativeType.None)\r\n      );\r\n    } else { // can omit the 'continue' block\r\n      repeatBlock.push(\r\n        module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr))\r\n      );\r\n      for (let i = 0, k = stmts.length; i < k; ++i) {\r\n        repeatBlock.push(stmts[i]);\r\n      }\r\n    }\r\n    if (incrExpr) repeatBlock.push(incrExpr);\r\n    repeatBlock.push(\r\n      module.br(repeatLabel)\r\n    );\r\n\r\n    breakBlock.push(\r\n      module.loop(repeatLabel, module.block(null, repeatBlock, NativeType.None))\r\n    );\r\n\r\n    return module.block(breakLabel, breakBlock);\r\n  }\r\n\r\n  compileIfStatement(\r\n    statement: IfStatement,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var ifTrue = statement.ifTrue;\r\n    var ifFalse = statement.ifFalse;\r\n    var outerFlow = this.currentFlow;\r\n\r\n    // The condition doesn't initiate a branch yet\r\n    var condExpr = module.precomputeExpression(\r\n      this.makeIsTrueish(\r\n        this.compileExpressionRetainType(statement.condition, Type.bool),\r\n        this.currentType\r\n      )\r\n    );\r\n\r\n    // Try to eliminate unnecesssary branches if the condition is constant\r\n    if (\r\n      getExpressionId(condExpr) == ExpressionId.Const &&\r\n      getExpressionType(condExpr) == NativeType.I32\r\n    ) {\r\n      return getConstValueI32(condExpr)\r\n        ? this.compileStatement(ifTrue)\r\n        : ifFalse\r\n          ? this.compileStatement(ifFalse)\r\n          : module.nop();\r\n    }\r\n\r\n    // Each arm initiates a branch\r\n    var ifTrueStmts = new Array<ExpressionRef>();\r\n    var ifTrueFlow = outerFlow.fork();\r\n    this.currentFlow = ifTrueFlow;\r\n    ifTrueFlow.inheritNonnullIfTrue(condExpr);\r\n    if (ifTrue.kind == NodeKind.BLOCK) {\r\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, ifTrueStmts);\r\n    } else {\r\n      ifTrueStmts.push(this.compileStatement(ifTrue));\r\n    }\r\n    if (!ifTrueFlow.isAny(FlowFlags.ANY_TERMINATING)) this.performAutoreleases(ifTrueFlow, ifTrueStmts);\r\n    ifTrueFlow.freeScopedLocals();\r\n    this.currentFlow = outerFlow;\r\n\r\n    if (ifFalse) {\r\n      let ifFalseFlow = outerFlow.fork();\r\n      this.currentFlow = ifFalseFlow;\r\n      ifFalseFlow.inheritNonnullIfFalse(condExpr);\r\n      let ifFalseStmts = new Array<ExpressionRef>();\r\n      if (ifFalse.kind == NodeKind.BLOCK) {\r\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, ifFalseStmts);\r\n      } else {\r\n        ifFalseStmts.push(this.compileStatement(ifFalse));\r\n      }\r\n      if (!ifFalseFlow.isAny(FlowFlags.ANY_TERMINATING)) this.performAutoreleases(ifFalseFlow, ifFalseStmts);\r\n      ifFalseFlow.freeScopedLocals();\r\n      this.currentFlow = outerFlow;\r\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\r\n      return module.if(condExpr,\r\n        flatten(module, ifTrueStmts, NativeType.None),\r\n        flatten(module, ifFalseStmts, NativeType.None)\r\n      );\r\n    } else {\r\n      outerFlow.inheritConditional(ifTrueFlow);\r\n      if (ifTrueFlow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n        outerFlow.inheritNonnullIfFalse(condExpr);\r\n      }\r\n      return module.if(condExpr,\r\n        flatten(module, ifTrueStmts, NativeType.None)\r\n      );\r\n    }\r\n    // TODO: Detect neglected condition\r\n    // if (!foo) {\r\n    //   foo = [notNull]\r\n    // }\r\n    // foo // is possibly null\r\n  }\r\n\r\n  compileReturnStatement(\r\n    statement: ReturnStatement,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var expr: ExpressionRef = 0;\r\n    var flow = this.currentFlow;\r\n    var returnType = flow.returnType;\r\n\r\n    // Remember that this flow returns\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    var valueExpression = statement.value;\r\n    if (valueExpression) {\r\n      if (returnType == Type.void) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n          valueExpression.range, this.currentType.toString(), returnType.toString()\r\n        );\r\n        this.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      let contextualFlags = ContextualFlags.IMPLICIT;\r\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) contextualFlags |= ContextualFlags.WRAP;\r\n      expr = this.compileExpression(valueExpression, returnType, contextualFlags | ContextualFlags.SKIP_AUTORELEASE);\r\n\r\n      // when returning a local, and it is already retained, skip the final set\r\n      // of retaining it as the return value and releasing it as a variable\r\n      if (!this.skippedAutoreleases.has(expr)) {\r\n        if (returnType.isManaged) {\r\n          if (getExpressionId(expr) == ExpressionId.LocalGet) {\r\n            if (flow.isAnyLocalFlag(getLocalGetIndex(expr), LocalFlags.ANY_RETAINED)) {\r\n              flow.unsetLocalFlag(getLocalGetIndex(expr), LocalFlags.ANY_RETAINED);\r\n              this.skippedAutoreleases.add(expr);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // remember return states\r\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n      if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\r\n\r\n    } else if (returnType != Type.void) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        statement.range, \"void\", returnType.toString()\r\n      );\r\n      expr = module.unreachable();\r\n    }\r\n\r\n    var stmts = new Array<ExpressionRef>();\r\n    this.performAutoreleases(flow, stmts);\r\n    this.finishAutoreleases(flow, stmts);\r\n\r\n    // Make sure that the return value is retained for the caller\r\n    if (returnType.isManaged && !this.skippedAutoreleases.has(expr)) expr = this.makeRetain(expr);\r\n\r\n    if (returnType != Type.void && stmts.length) {\r\n      let temp = flow.getAndFreeTempLocal(returnType);\r\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\r\n      stmts.unshift(\r\n        module.local_set(temp.index, expr)\r\n      );\r\n      expr = module.local_get(temp.index, returnType.toNativeType());\r\n    }\r\n    flow.freeScopedLocals();\r\n\r\n    // If the last statement anyway, make it the block's return value\r\n    if ((contextualFlags & ContextualFlags.LAST_IN_BODY) != 0 && expr && returnType != Type.void) {\r\n      if (!stmts.length) return expr;\r\n      stmts.push(expr);\r\n      return module.block(null, stmts, returnType.toNativeType());\r\n    }\r\n\r\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\r\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\r\n      // stmts.push(module.createUnreachable());\r\n      return module.block(null, stmts);\r\n    }\r\n\r\n    // Otherwise emit a normal return\r\n    if (!stmts.length) return module.return(expr);\r\n    stmts.push(module.return(expr));\r\n    return module.block(null, stmts);\r\n  }\r\n\r\n  compileSwitchStatement(statement: SwitchStatement, contextualFlags: ContextualFlags): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    var cases = statement.cases;\r\n    var numCases = cases.length;\r\n    if (!numCases) {\r\n      return this.compileExpression(statement.condition, Type.void,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n    }\r\n\r\n    // Everything within a switch uses the same break context\r\n    var outerFlow = this.currentFlow;\r\n    var context = outerFlow.pushBreakLabel();\r\n\r\n    // introduce a local for evaluating the condition (exactly once)\r\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\r\n    var tempLocalIndex = tempLocal.index;\r\n\r\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\r\n    var breaks = new Array<ExpressionRef>(1 + numCases);\r\n    breaks[0] = module.local_set( // initializer\r\n      tempLocalIndex,\r\n      this.compileExpression(statement.condition, Type.u32,\r\n        ContextualFlags.IMPLICIT\r\n      )\r\n    );\r\n\r\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\r\n    var breakIndex = 1;\r\n    var defaultIndex = -1;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let label = case_.label;\r\n      if (label) {\r\n        breaks[breakIndex++] = module.br(\"case\" + i.toString(10) + \"|\" + context,\r\n          module.binary(BinaryOp.EqI32,\r\n            module.local_get(tempLocalIndex, NativeType.I32),\r\n            this.compileExpression(label, Type.u32,\r\n              ContextualFlags.IMPLICIT\r\n            )\r\n          )\r\n        );\r\n      } else {\r\n        defaultIndex = i;\r\n      }\r\n    }\r\n\r\n    outerFlow.freeTempLocal(tempLocal);\r\n\r\n    // otherwise br to default respectively out of the switch if there is no default case\r\n    breaks[breakIndex] = module.br((defaultIndex >= 0\r\n        ? \"case\" + defaultIndex.toString(10)\r\n        : \"break\"\r\n      ) + \"|\" + context);\r\n\r\n    // nest blocks in order\r\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\r\n    var alwaysReturns = true;\r\n    var alwaysReturnsWrapped = true;\r\n    var alwaysThrows = true;\r\n    var alwaysAllocates = true;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let statements = case_.statements;\r\n      let numStatements = statements.length;\r\n\r\n      // Each switch case initiates a new branch\r\n      let innerFlow = outerFlow.fork();\r\n      this.currentFlow = innerFlow;\r\n      let breakLabel = \"break|\" + context;\r\n      innerFlow.breakLabel = breakLabel;\r\n\r\n      let isLast = i == numCases - 1;\r\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\r\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\r\n      stmts[0] = currentBlock;\r\n      let count = 1;\r\n      let terminated = false;\r\n      for (let j = 0; j < numStatements; ++j) {\r\n        let stmt = this.compileStatement(statements[j]);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n          stmts[count++] = stmt;\r\n          if (innerFlow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n            terminated = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      stmts.length = count;\r\n      if (terminated || isLast) {\r\n        if (!innerFlow.is(FlowFlags.RETURNS)) alwaysReturns = false;\r\n        if (!innerFlow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\r\n        if (!innerFlow.is(FlowFlags.THROWS)) alwaysThrows = false;\r\n        if (!innerFlow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\r\n      }\r\n\r\n      // Switch back to the parent flow\r\n      if (!innerFlow.isAny(FlowFlags.ANY_TERMINATING)) this.performAutoreleases(innerFlow, stmts);\r\n      innerFlow.unset(\r\n        FlowFlags.BREAKS |\r\n        FlowFlags.CONDITIONALLY_BREAKS\r\n      );\r\n      innerFlow.freeScopedLocals();\r\n      this.currentFlow = outerFlow;\r\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\r\n    }\r\n    outerFlow.popBreakLabel();\r\n\r\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\r\n    if (defaultIndex >= 0) {\r\n      if (alwaysReturns) outerFlow.set(FlowFlags.RETURNS);\r\n      if (alwaysReturnsWrapped) outerFlow.set(FlowFlags.RETURNS_WRAPPED);\r\n      if (alwaysThrows) outerFlow.set(FlowFlags.THROWS);\r\n      if (alwaysAllocates) outerFlow.set(FlowFlags.ALLOCATES);\r\n    }\r\n    return currentBlock;\r\n  }\r\n\r\n  compileThrowStatement(\r\n    statement: ThrowStatement,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var flow = this.currentFlow;\r\n\r\n    // Remember that this branch throws\r\n    flow.set(FlowFlags.THROWS);\r\n\r\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    var stmts = new Array<ExpressionRef>();\r\n    this.finishAutoreleases(flow, stmts);\r\n\r\n    // TODO: requires exception-handling spec.\r\n    var value = statement.value;\r\n    var message: Expression | null = null;\r\n    if (value.kind == NodeKind.NEW) {\r\n      let newArgs = (<NewExpression>value).arguments;\r\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\r\n    }\r\n    stmts.push(compileAbort(this, message, statement));\r\n\r\n    return flatten(this.module, stmts, NativeType.None);\r\n  }\r\n\r\n  compileTryStatement(\r\n    statement: TryStatement,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    // TODO: can't yet support something like: try { return ... } finally { ... }\r\n    // worthwhile to investigate lowering returns to block results (here)?\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      statement.range\r\n    );\r\n    return this.module.unreachable();\r\n  }\r\n\r\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\r\n  compileVariableStatement(statement: VariableStatement, contextualFlags: ContextualFlags): ExpressionRef {\r\n    var module = this.module;\r\n    var declarations = statement.declarations;\r\n    var numDeclarations = declarations.length;\r\n    var flow = this.currentFlow;\r\n    var initializers = new Array<ExpressionRef>();\r\n    var resolver = this.resolver;\r\n    for (let i = 0; i < numDeclarations; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let type: Type | null = null;\r\n      let initExpr: ExpressionRef = 0;\r\n      let initAutoreleaseSkipped = false;\r\n      if (declaration.type) {\r\n        type = resolver.resolveType( // reports\r\n          declaration.type,\r\n          flow.actualFunction,\r\n          flow.contextualTypeArguments\r\n        );\r\n        if (!type) continue;\r\n        if (declaration.initializer) {\r\n          initExpr = this.compileExpression(declaration.initializer, type, // reports\r\n            ContextualFlags.IMPLICIT | ContextualFlags.SKIP_AUTORELEASE\r\n          );\r\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\r\n        }\r\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\r\n        initExpr = this.compileExpressionRetainType(declaration.initializer, Type.void,\r\n          ContextualFlags.SKIP_AUTORELEASE\r\n        ); // reports\r\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            declaration.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          continue;\r\n        }\r\n        type = this.currentType;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          declaration.name.range.atEnd\r\n        );\r\n        continue;\r\n      }\r\n      let isInlined = false;\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        if (initExpr) {\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\r\n            let local = new Local(name, -1, type, flow.parentFunction);\r\n            switch (getExpressionType(initExpr)) {\r\n              case NativeType.I32: {\r\n                local.setConstantIntegerValue(\r\n                  i64_new(\r\n                    getConstValueI32(initExpr),\r\n                    0\r\n                  ),\r\n                  type\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                local.setConstantIntegerValue(\r\n                  i64_new(\r\n                    getConstValueI64Low(initExpr),\r\n                    getConstValueI64High(initExpr)\r\n                  ),\r\n                  type\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\r\n                break;\r\n              }\r\n              default: {\r\n                assert(false);\r\n                return module.unreachable();\r\n              }\r\n            }\r\n            // Create a virtual local that doesn't actually exist in WebAssembly\r\n            let scopedLocals = flow.scopedLocals;\r\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\r\n            else if (scopedLocals.has(name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                declaration.name.range, name\r\n              );\r\n              return this.module.unreachable();\r\n            }\r\n            scopedLocals.set(name, local);\r\n            isInlined = true;\r\n          } else {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              declaration.range\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            declaration.range\r\n          );\r\n        }\r\n      }\r\n      if (!isInlined) {\r\n        let local: Local;\r\n        if (\r\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\r\n          flow.is(FlowFlags.INLINE_CONTEXT)\r\n        ) { // here: not top-level\r\n          local = flow.addScopedLocal(name, type, declaration.name); // reports if duplicate\r\n        } else {\r\n          if (flow.lookupLocal(name)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, name\r\n            );\r\n            continue;\r\n          }\r\n          local = flow.parentFunction.addLocal(type, name, declaration);\r\n        }\r\n        let isManaged = type.isManaged;\r\n        if (initExpr) {\r\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\r\n          if (isManaged) {\r\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\r\n            initializers.push(\r\n              module.local_set(local.index,\r\n                initAutoreleaseSkipped\r\n                  ? initExpr\r\n                  : this.makeRetain(initExpr)\r\n              )\r\n            );\r\n          } else {\r\n            initializers.push(\r\n              module.local_set(local.index, initExpr)\r\n            );\r\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\r\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\r\n            }\r\n          }\r\n        } else {\r\n          if (isManaged) {\r\n            // This is necessary because the first use (and assign) of the local could be taking place\r\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\r\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\r\n            // initialized but becomes released later on, whatever was stored before would be released.\r\n            // TODO: Detect this condition inside of a loop instead?\r\n            initializers.push(\r\n              module.local_set(local.index,\r\n                type.toNativeZero(module)\r\n              )\r\n            );\r\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\r\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return initializers.length == 0\r\n      ? 0\r\n      : flatten(module, initializers, NativeType.None);\r\n  }\r\n\r\n  compileVoidStatement(statement: VoidStatement, contextualFlags: ContextualFlags): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void,\r\n      ContextualFlags.EXPLICIT | ContextualFlags.WILL_DROP\r\n    );\r\n  }\r\n\r\n  compileWhileStatement(statement: WhileStatement, contextualFlags: ContextualFlags): ExpressionRef {\r\n    var module = this.module;\r\n    var outerFlow = this.currentFlow;\r\n\r\n    // The condition does not yet initialize a branch\r\n    var condExpr = module.precomputeExpression(\r\n      this.makeIsTrueish(\r\n        this.compileExpressionRetainType(statement.condition, Type.bool),\r\n        this.currentType\r\n      )\r\n    );\r\n\r\n    // Try to eliminate unnecesssary loops if the condition is constant\r\n    if (\r\n      getExpressionId(condExpr) == ExpressionId.Const &&\r\n      getExpressionType(condExpr) == NativeType.I32\r\n    ) {\r\n      if (!getConstValueI32(condExpr)) return module.nop();\r\n    }\r\n\r\n    // Statements initiate a new branch with its own break context\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n    var breakLabel = \"break|\" + label;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n\r\n    innerFlow.inheritNonnullIfTrue(condExpr);\r\n    var stmts = new Array<ExpressionRef>();\r\n    if (statement.statement.kind == NodeKind.BLOCK) {\r\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\r\n    } else {\r\n      stmts.push(this.compileStatement(statement.statement));\r\n    }\r\n    var alwaysTrue = false; // TODO\r\n    var terminated = innerFlow.isAny(FlowFlags.ANY_TERMINATING);\r\n    if (!terminated) {\r\n      this.performAutoreleases(innerFlow, stmts);\r\n      stmts.push(module.br(continueLabel));\r\n    }\r\n    innerFlow.freeScopedLocals();\r\n\r\n    // Switch back to the parent flow\r\n    outerFlow.popBreakLabel();\r\n    this.currentFlow = outerFlow;\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\r\n    else outerFlow.inheritConditional(innerFlow);\r\n\r\n    return module.block(breakLabel, [\r\n      module.loop(continueLabel,\r\n        module.if(condExpr,\r\n          flatten(module, stmts, NativeType.None)\r\n        )\r\n      )\r\n    ]);\r\n  }\r\n\r\n  // === Expressions ==============================================================================\r\n\r\n  /**\r\n   * Compiles the value of an inlined constant element.\r\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\r\n   *  is precomputed according to context.\r\n   */\r\n  compileInlineConstant(\r\n    element: VariableLikeElement,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    assert(element.is(CommonFlags.INLINED));\r\n    var type = element.type;\r\n    switch (\r\n      !(contextualFlags & (ContextualFlags.IMPLICIT | ContextualFlags.EXPLICIT)) &&\r\n      type.is(TypeFlags.INTEGER) &&\r\n      contextualType.is(TypeFlags.INTEGER) &&\r\n      type.size < contextualType.size\r\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\r\n        : (this.currentType = type).kind\r\n    ) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16: {\r\n        let shift = type.computeSmallIntegerShift(Type.i32);\r\n        return this.module.i32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) << shift >> shift\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\r\n        return this.module.i32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) & mask\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return this.module.i32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue)\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: {\r\n        if (!element.program.options.isWasm64) {\r\n          return this.module.i32(\r\n            element.constantValueKind == ConstantValueKind.INTEGER\r\n              ? i64_low(element.constantIntegerValue)\r\n              : 0\r\n          );\r\n        }\r\n        // fall-through\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return element.constantValueKind == ConstantValueKind.INTEGER\r\n          ? this.module.i64(\r\n              i64_low(element.constantIntegerValue),\r\n              i64_high(element.constantIntegerValue)\r\n            )\r\n          : this.module.i64(0);\r\n      }\r\n      case TypeKind.F64: {\r\n        // monkey-patch for converting built-in floats to f32 implicitly\r\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\r\n          return this.module.f64((<VariableLikeElement>element).constantFloatValue);\r\n        }\r\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\r\n        this.currentType = Type.f32;\r\n      }\r\n      case TypeKind.F32: {\r\n        return this.module.f32((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return this.module.unreachable();\r\n      }\r\n    }\r\n  }\r\n\r\n  compileExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags = ContextualFlags.NONE\r\n  ): ExpressionRef {\r\n    this.currentType = contextualType;\r\n    var expr: ExpressionRef;\r\n    if (contextualType == Type.void) contextualFlags |= ContextualFlags.WILL_DROP;\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.BINARY: {\r\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.CALL: {\r\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.COMMA: {\r\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.THIS:\r\n      case NodeKind.SUPER:\r\n      case NodeKind.TRUE: {\r\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.INSTANCEOF: {\r\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.NEW: {\r\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.PARENTHESIZED: {\r\n        expr = this.compileExpression((<ParenthesizedExpression>expression).expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, contextualFlags);\r\n        break;\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        expr = this.module.unreachable();\r\n      }\r\n    }\r\n    // ensure conversion and wrapping in case the respective function doesn't on its own\r\n    var currentType = this.currentType;\r\n    var wrap = (contextualFlags & ContextualFlags.WRAP) != 0;\r\n    if (currentType != contextualType) {\r\n      if (contextualFlags & ContextualFlags.EXPLICIT) {\r\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\r\n        wrap = false;\r\n        this.currentType = contextualType;\r\n      } else if (contextualFlags & ContextualFlags.IMPLICIT) {\r\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\r\n        wrap = false;\r\n        this.currentType = contextualType;\r\n      }\r\n    }\r\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\r\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\r\n    // must go through this function, with the respective per-kind functions not being used directly.\r\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n    return expr;\r\n  }\r\n\r\n  /** Compiles an expression while retaining the type, that is not void, it ultimately compiles to. */\r\n  compileExpressionRetainType(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags = ContextualFlags.NONE\r\n  ): ExpressionRef {\r\n    return this.compileExpression(expression,\r\n      contextualType == Type.void\r\n        ? Type.i32 // default to i32\r\n        : contextualType,\r\n      (contextualFlags & ~(ContextualFlags.IMPLICIT | ContextualFlags.EXPLICIT))\r\n    );\r\n  }\r\n\r\n  /** Compiles and precomputes an expression, possibly yielding a costant value. */\r\n  precomputeExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags = ContextualFlags.NONE\r\n  ): ExpressionRef {\r\n    return this.module.precomputeExpression(\r\n      this.compileExpression(expression, contextualType, contextualFlags)\r\n    );\r\n  }\r\n\r\n  convertExpression(\r\n    expr: ExpressionRef,\r\n    /** Original type. */\r\n    fromType: Type,\r\n    /** New type. */\r\n    toType: Type,\r\n    /** Whether the conversion is explicit.*/\r\n    explicit: bool,\r\n    /** Whether the result should be wrapped, if a small integer. */\r\n    wrap: bool,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // void to any\r\n    if (fromType.kind == TypeKind.VOID) {\r\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n\r\n    // any to void\r\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\r\n\r\n    if (this.currentFlow.isNonnull(expr, fromType)) fromType = fromType.nonNullableType;\r\n\r\n    if (!fromType.isAssignableTo(toType)) {\r\n      if (!explicit) {\r\n        if (fromType.nonNullableType == toType) {\r\n          this.error(\r\n            DiagnosticCode.Object_is_possibly_null,\r\n            reportNode.range\r\n          ); // recoverable\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\r\n            reportNode.range, fromType.toString(), toType.toString()\r\n          ); // recoverable\r\n        }\r\n      }\r\n    }\r\n\r\n    if (fromType.is(TypeFlags.FLOAT)) {\r\n\r\n      // float to float\r\n      if (toType.is(TypeFlags.FLOAT)) {\r\n        if (fromType.kind == TypeKind.F32) {\r\n\r\n          // f32 to f64\r\n          if (toType.kind == TypeKind.F64) {\r\n            expr = module.unary(UnaryOp.PromoteF32, expr);\r\n          }\r\n\r\n          // otherwise f32 to f32\r\n\r\n        // f64 to f32\r\n        } else if (toType.kind == TypeKind.F32) {\r\n          expr = module.unary(UnaryOp.DemoteF64, expr);\r\n        }\r\n\r\n        // otherwise f64 to f64\r\n\r\n      // float to int\r\n      } else if (toType.is(TypeFlags.INTEGER)) {\r\n\r\n        // f32 to int\r\n        if (fromType.kind == TypeKind.F32) {\r\n          if (toType == Type.bool) {\r\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\r\n            wrap = false;\r\n          } else if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\r\n            } else {\r\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\r\n            } else {\r\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\r\n            }\r\n          }\r\n\r\n        // f64 to int\r\n        } else {\r\n          if (toType == Type.bool) {\r\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\r\n            wrap = false;\r\n          } else if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\r\n            } else {\r\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\r\n            } else {\r\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\r\n            }\r\n          }\r\n        }\r\n\r\n      // float to void\r\n      } else {\r\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\r\n        expr = module.drop(expr);\r\n      }\r\n\r\n    // int to float\r\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\r\n\r\n      // int to f32\r\n      if (toType.kind == TypeKind.F32) {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.unary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF32\r\n              : UnaryOp.ConvertU64ToF32,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.unary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF32\r\n              : UnaryOp.ConvertU32ToF32,\r\n            expr\r\n          );\r\n        }\r\n\r\n      // int to f64\r\n      } else {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.unary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF64\r\n              : UnaryOp.ConvertU64ToF64,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.unary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF64\r\n              : UnaryOp.ConvertU32ToF64,\r\n            expr\r\n          );\r\n        }\r\n      }\r\n\r\n    // int to int\r\n    } else {\r\n      // i64 to ...\r\n      if (fromType.is(TypeFlags.LONG)) {\r\n\r\n        // i64 to i32 or smaller\r\n        if (toType == Type.bool) {\r\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\r\n          wrap = false;\r\n        } else if (!toType.is(TypeFlags.LONG)) {\r\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\r\n        }\r\n\r\n      // i32 or smaller to i64\r\n      } else if (toType.is(TypeFlags.LONG)) {\r\n        expr = module.unary(\r\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\r\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\r\n        );\r\n        wrap = false;\r\n\r\n      // i32 to i32\r\n      } else {\r\n        // small i32 to ...\r\n        if (fromType.is(TypeFlags.SHORT)) {\r\n          // small i32 to larger i32\r\n          if (fromType.size < toType.size) {\r\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\r\n            wrap = false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.currentType = toType;\r\n    return wrap\r\n      ? this.ensureSmallIntegerWrap(expr, toType)\r\n      : expr;\r\n  }\r\n\r\n  compileAssertionExpression(\r\n    expression: AssertionExpression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    switch (expression.assertionKind) {\r\n      case AssertionKind.PREFIX:\r\n      case AssertionKind.AS: {\r\n        let flow = this.currentFlow;\r\n        let toType = this.resolver.resolveType( // reports\r\n          assert(expression.toType),\r\n          flow.actualFunction,\r\n          flow.contextualTypeArguments\r\n        );\r\n        if (!toType) return this.module.unreachable();\r\n        return this.compileExpression(expression.expression, toType,\r\n          contextualFlags | ContextualFlags.EXPLICIT\r\n        );\r\n      }\r\n      case AssertionKind.NONNULL: {\r\n        assert(!expression.toType);\r\n        let expr = this.compileExpressionRetainType(expression.expression, contextualType);\r\n        let type = this.currentType;\r\n        if (this.currentFlow.isNonnull(expr, type)) {\r\n          this.info(\r\n            DiagnosticCode.Expression_is_never_null,\r\n            expression.expression.range\r\n          );\r\n        } else if (!this.options.noAssert) {\r\n          let module = this.module;\r\n          let flow = this.currentFlow;\r\n          let tempIndex = flow.getAndFreeTempLocal(type).index;\r\n          if (!flow.canOverflow(expr, type)) flow.setLocalFlag(tempIndex, LocalFlags.WRAPPED);\r\n          flow.setLocalFlag(tempIndex, LocalFlags.NONNULL);\r\n          expr = module.if(\r\n            module.local_tee(tempIndex, expr),\r\n            module.local_get(tempIndex, type.toNativeType()),\r\n            module.unreachable()\r\n          );\r\n        }\r\n        this.currentType = this.currentType.nonNullableType;\r\n        return expr;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    return this.module.unreachable();\r\n  }\r\n\r\n  private f32ModInstance: Function | null = null;\r\n  private f64ModInstance: Function | null = null;\r\n  private f32PowInstance: Function | null = null;\r\n  private f64PowInstance: Function | null = null;\r\n\r\n  compileBinaryExpression(\r\n    expression: BinaryExpression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var left = expression.left;\r\n    var right = expression.right;\r\n\r\n    var leftExpr: ExpressionRef;\r\n    var leftType: Type;\r\n    var rightExpr: ExpressionRef;\r\n    var rightType: Type;\r\n    var commonType: Type | null;\r\n\r\n    var expr: ExpressionRef;\r\n    var compound = false;\r\n\r\n    var operator = expression.operator;\r\n    switch (operator) {\r\n      case Token.LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeI64\r\n                : BinaryOp.LeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeU64\r\n                : BinaryOp.LeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeI64\r\n                : BinaryOp.GeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeU64\r\n                : BinaryOp.GeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n\r\n      case Token.EQUALS_EQUALS_EQUALS:\r\n      case Token.EQUALS_EQUALS: {\r\n\r\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\r\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\r\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\r\n\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '==' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.EqI64\r\n                : BinaryOp.EqI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.V128: {\r\n            expr = module.unary(UnaryOp.AllTrueVecI8x16,\r\n              module.binary(BinaryOp.EqVecI8x16, leftExpr, rightExpr)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION_EQUALS_EQUALS:\r\n      case Token.EXCLAMATION_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '!=' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            leftType, leftType = commonType,\r\n            false, true, // !\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(rightExpr,\r\n            rightType, rightType = commonType,\r\n            false, true, // !\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.unreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.NeI64\r\n                : BinaryOp.NeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.V128: {\r\n            expr = module.unary(UnaryOp.AnyTrueVecI8x16,\r\n              module.binary(BinaryOp.NeVecI8x16, leftExpr, rightExpr)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EQUALS: {\r\n        return this.compileAssignment(left, right, contextualType);\r\n      }\r\n      case Token.PLUS_EQUALS: compound = true;\r\n      case Token.PLUS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"+\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // addition might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_EQUALS: compound = true;\r\n      case Token.MINUS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"-\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // subtraction might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"*\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.MulI64\r\n                : BinaryOp.MulI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK_ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.POW);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        let instance: Function | null;\r\n\r\n        // Mathf.pow if lhs is f32 (result is f32)\r\n        if (this.currentType.kind == TypeKind.F32) {\r\n          rightExpr = this.compileExpression(right, Type.f32, ContextualFlags.IMPLICIT);\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f32PowInstance)) {\r\n            let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf\"\r\n              );\r\n              expr = module.unreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf.pow\"\r\n              );\r\n              expr = module.unreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n          }\r\n\r\n        // Math.pow otherwise (result is f64)\r\n        // TODO: should the result be converted back?\r\n        } else {\r\n          leftExpr = this.convertExpression(leftExpr,\r\n            this.currentType, Type.f64,\r\n            false, false,\r\n            left\r\n          );\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpression(right, Type.f64, ContextualFlags.IMPLICIT);\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f64PowInstance)) {\r\n            let namespace = this.program.lookupGlobal(CommonSymbols.Math);\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math\"\r\n              );\r\n              expr = module.unreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math.pow\"\r\n              );\r\n              expr = module.unreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n          }\r\n        }\r\n        if (!(instance && this.compileFunction(instance))) {\r\n          expr = module.unreachable();\r\n        } else {\r\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\r\n        }\r\n        break;\r\n      }\r\n      case Token.SLASH_EQUALS: compound = true;\r\n      case Token.SLASH: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, true, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, true, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"/\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\r\n          case TypeKind.I16: // ^\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivI64\r\n                : BinaryOp.DivI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivU64\r\n                : BinaryOp.DivU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PERCENT_EQUALS: compound = true;\r\n      case Token.PERCENT: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.REM);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, true, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, true, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"%\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemI64\r\n                : BinaryOp.RemI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemU64\r\n                : BinaryOp.RemU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let instance = this.f32ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf\"\r\n                );\r\n                expr = module.unreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf.mod\"\r\n                );\r\n                expr = module.unreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.unreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let instance = this.f64ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.lookupGlobal(CommonSymbols.Math);\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math\"\r\n                );\r\n                expr = module.unreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math.mod\"\r\n                );\r\n                expr = module.unreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.unreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\r\n      case Token.LESSTHAN_LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShlI64\r\n                : BinaryOp.ShlI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrI64\r\n                : BinaryOp.ShrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\r\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n          }\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.AMPERSAND_EQUALS: compound = true;\r\n      case Token.AMPERSAND: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overloadd\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"&\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AndI64\r\n                : BinaryOp.AndI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_EQUALS: compound = true;\r\n      case Token.BAR: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"|\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.OrI64\r\n                : BinaryOp.OrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.CARET_EQUALS: compound = true;\r\n      case Token.CARET: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(leftExpr,\r\n              leftType, leftType = commonType,\r\n              false, false,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(rightExpr,\r\n              rightType, rightType = commonType,\r\n              false, false,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"^\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      // logical (no overloading)\r\n\r\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\r\n        let flow = this.currentFlow;\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, contextualFlags);\r\n        leftType = this.currentType;\r\n\r\n        let rightFlow = flow.fork();\r\n        this.currentFlow = rightFlow;\r\n        rightFlow.inheritNonnullIfTrue(leftExpr);\r\n        rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT | (contextualFlags & ~ContextualFlags.WILL_DROP));\r\n        rightType = leftType;\r\n\r\n        // simplify if only interested in true or false\r\n        if (contextualType == Type.bool || contextualType == Type.void) {\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n          this.currentType = Type.bool;\r\n          expr = module.if(\r\n            this.makeIsTrueish(leftExpr, leftType),\r\n            this.makeIsTrueish(rightExpr, rightType),\r\n            module.i32(0)\r\n          );\r\n\r\n        // references must properly retain and release, with the same outcome independent of the branch taken\r\n        } else if (leftType.isManaged) {\r\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\r\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\r\n          let temp = flow.getTempLocal(leftType);\r\n          leftExpr = module.local_tee(temp.index, leftExpr);\r\n\r\n          // instead of retaining left and releasing it again in right when right\r\n          // is taken, we can also just retain left if right is not taken\r\n          let retainLeftInElse = false;\r\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\r\n            if (!leftAutoreleaseSkipped) {\r\n              retainLeftInElse = true;\r\n            } else {\r\n              rightExpr = this.makeRetain(rightExpr);\r\n              rightAutoreleaseSkipped = true;\r\n            }\r\n          } else if (!(contextualFlags & ContextualFlags.SKIP_AUTORELEASE)) { // otherwise keep right alive a little longer\r\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\r\n          }\r\n\r\n          let rightStmts = new Array<ExpressionRef>();\r\n          if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\r\n            rightStmts.unshift(\r\n              this.makeRelease(\r\n                module.local_get(temp.index, leftType.toNativeType())\r\n              )\r\n            );\r\n          }\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n\r\n          expr = module.if(\r\n            this.makeIsTrueish(leftExpr, leftType),\r\n            rightExpr,\r\n            retainLeftInElse\r\n              ? this.makeRetain(\r\n                  module.local_get(temp.index, leftType.toNativeType())\r\n                )\r\n              : module.local_get(temp.index, leftType.toNativeType())\r\n          );\r\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\r\n          if (temp) flow.freeTempLocal(temp);\r\n\r\n        // basic values can use more aggressive optimizations\r\n        } else {\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n\r\n          // simplify if cloning left without side effects is possible\r\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\r\n            expr = module.if(\r\n              this.makeIsTrueish(leftExpr, this.currentType),\r\n              rightExpr,\r\n              expr\r\n            );\r\n\r\n          // if not possible, tee left to a temp\r\n          } else {\r\n            let tempLocal = flow.getTempLocal(leftType);\r\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\r\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\r\n            expr = module.if(\r\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\r\n              rightExpr,\r\n              module.local_get(tempLocal.index, leftType.toNativeType())\r\n            );\r\n          }\r\n        }\r\n        this.currentType = leftType;\r\n        break;\r\n      }\r\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\r\n        let flow = this.currentFlow;\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, contextualFlags);\r\n        leftType = this.currentType;\r\n\r\n        let rightFlow = flow.fork();\r\n        this.currentFlow = rightFlow;\r\n        rightFlow.inheritNonnullIfFalse(leftExpr);\r\n        rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT | contextualFlags);\r\n        rightType = leftType;\r\n\r\n        // simplify if only interested in true or false\r\n        if (contextualType == Type.bool || contextualType == Type.void) {\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n          this.currentType = Type.bool;\r\n          expr = module.if(\r\n            this.makeIsTrueish(leftExpr, leftType),\r\n            module.i32(1),\r\n            this.makeIsTrueish(rightExpr, rightType)\r\n          );\r\n\r\n        // references must properly retain and release, with the same outcome independent of the branch taken\r\n        } else if (leftType.isManaged) {\r\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\r\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\r\n          let temp = flow.getTempLocal(leftType);\r\n          leftExpr = module.local_tee(temp.index, leftExpr);\r\n\r\n          // instead of retaining left and releasing it again in right when right\r\n          // is taken, we can also just retain left if right is not taken\r\n          let retainLeftInThen = false;\r\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\r\n            if (!leftAutoreleaseSkipped) {\r\n              retainLeftInThen = true;\r\n            } else {\r\n              rightExpr = this.makeRetain(rightExpr);\r\n              rightAutoreleaseSkipped = true;\r\n            }\r\n          } else if (!(contextualFlags & ContextualFlags.SKIP_AUTORELEASE)) { // otherwise keep right alive a little longer\r\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\r\n          }\r\n\r\n          let rightStmts = new Array<ExpressionRef>();\r\n          if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\r\n            // TODO: usually, false'ish means left is null, but this might not hold\r\n            // once implicit conversion with strings is performed and left is \"\", so:\r\n            rightStmts.unshift(\r\n              this.makeRelease(\r\n                module.local_get(temp.index, leftType.toNativeType())\r\n              )\r\n            );\r\n          }\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n\r\n          expr = module.if(\r\n            this.makeIsTrueish(leftExpr, leftType),\r\n            retainLeftInThen\r\n              ? this.makeRetain(\r\n                  module.local_get(temp.index, leftType.toNativeType())\r\n                )\r\n              : module.local_get(temp.index, leftType.toNativeType()),\r\n            rightExpr\r\n          );\r\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\r\n          if (temp) flow.freeTempLocal(temp);\r\n\r\n        // basic values can use more aggressive optimizations\r\n        } else {\r\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\r\n          rightFlow.freeScopedLocals();\r\n          this.currentFlow = flow;\r\n\r\n          // simplify if cloning left without side effects is possible\r\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\r\n            expr = module.if(\r\n              this.makeIsTrueish(leftExpr, leftType),\r\n              expr,\r\n              rightExpr\r\n            );\r\n\r\n          // if not possible, tee left to a temp. local\r\n          } else {\r\n            let tempLocal = flow.getAndFreeTempLocal(leftType);\r\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\r\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\r\n            expr = module.if(\r\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\r\n              module.local_get(tempLocal.index, leftType.toNativeType()),\r\n              rightExpr\r\n            );\r\n          }\r\n        }\r\n        this.currentType = leftType;\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        expr = this.module.unreachable();\r\n      }\r\n    }\r\n    if (!compound) return expr;\r\n    var resolver = this.resolver;\r\n    var target = this.resolver.resolveExpression(left, this.currentFlow);\r\n    if (!target) return module.unreachable();\r\n    return this.makeAssignment(\r\n      target,\r\n      expr, // TODO: delay release above if possible?\r\n      left,\r\n      resolver.currentThisExpression,\r\n      resolver.currentElementExpression,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  compileUnaryOverload(\r\n    operatorInstance: Function,\r\n    value: Expression,\r\n    valueExpr: ExpressionRef,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\r\n    // is a bad idea currently. so this assumes that the type matches.\r\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\r\n  }\r\n\r\n  compileBinaryOverload(\r\n    operatorInstance: Function,\r\n    left: Expression,\r\n    leftExpr: ExpressionRef,\r\n    right: Expression,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var rightType: Type;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      rightType = operatorInstance.signature.parameterTypes[0];\r\n    } else {\r\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\r\n      // local states, like having retained locals that actually do not even exist, possibly\r\n      // releasing something random in that local before and evil things like that. Hence this\r\n      // assumes that LHS type matches, which in turn means that static overloads must be\r\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\r\n      // things like multiple static overloads for different combinations of LHS/RHS types.\r\n      // We might want that at some point of course, but requires to complete the resolver so\r\n      // it can actually resolve every kind of expression without ever having to recompile.\r\n      rightType = operatorInstance.signature.parameterTypes[1];\r\n    }\r\n    var rightExpr = this.compileExpression(right, rightType, ContextualFlags.IMPLICIT);\r\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\r\n  }\r\n\r\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\r\n    var program = this.program;\r\n    var resolver = program.resolver;\r\n    var flow = this.currentFlow;\r\n    var target = resolver.resolveExpression(expression, flow); // reports\r\n    if (!target) return this.module.unreachable();\r\n    var thisExpression = resolver.currentThisExpression;\r\n    var elementExpression = resolver.currentElementExpression;\r\n\r\n    // to compile just the value, we need to know the target's type\r\n    var targetType: Type;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        // not yet compiled if a static field compiled as a global\r\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\r\n        // fall-through\r\n      }\r\n      case ElementKind.FIELD: {\r\n        targetType = (<VariableLikeElement>target).type;\r\n        break;\r\n      }\r\n      case ElementKind.LOCAL: {\r\n        targetType = (<VariableLikeElement>target).type;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\r\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\r\n        if (!setterPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Property>target).internalName\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\r\n        if (!setterInstance) return this.module.unreachable();\r\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n        targetType = setterInstance.signature.parameterTypes[0];\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let setterInstance = (<Property>target).setterInstance;\r\n        if (!setterInstance) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Property>target).internalName\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n        targetType = setterInstance.signature.parameterTypes[0];\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        if (elementExpression) { // indexed access\r\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          // if (isUnchecked) {\r\n          //   let arrayType = this.program.determineBuiltinArrayType(<Class>target);\r\n          //   if (arrayType) {\r\n          //     return compileBuiltinArraySet(\r\n          //       this,\r\n          //       <Class>target,\r\n          //       assert(this.resolver.currentThisExpression),\r\n          //       elementExpression,\r\n          //       valueExpression,\r\n          //       contextualType\r\n          //     );\r\n          //   }\r\n          // }\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n            if (!indexedGet) {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            }\r\n            return this.module.unreachable();\r\n          }\r\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\r\n          targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return this.module.unreachable();\r\n      }\r\n    }\r\n\r\n    // compile the value and do the assignment\r\n    assert(targetType != Type.void);\r\n    return this.makeAssignment(\r\n      target,\r\n      this.compileExpression(valueExpression, targetType, ContextualFlags.IMPLICIT | ContextualFlags.SKIP_AUTORELEASE),\r\n      expression,\r\n      thisExpression,\r\n      elementExpression,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  /** Makes an assignment expression or block, assigning a value to a target. */\r\n  makeAssignment(\r\n    /** Target element, e.g. a Local. */\r\n    target: Element,\r\n    /** Value expression that has been compiled in a previous step already. */\r\n    valueExpr: ExpressionRef,\r\n    /** Expression reference. Has already been compiled to `valueExpr`. */\r\n    valueExpression: Expression,\r\n    /** `this` expression reference if a field or property set. */\r\n    thisExpression: Expression | null,\r\n    /** Index expression reference if an indexed set. */\r\n    indexExpression: Expression | null,\r\n    /** Whether to tee the value. */\r\n    tee: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\r\n    // everything else must insert the skipped autorelease now. See (*)\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        if (target.is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range, target.internalName\r\n          );\r\n          this.currentType = tee ? (<Local>target).type : Type.void;\r\n          return module.unreachable();\r\n        }\r\n        return this.makeLocalAssignment(<Local>target, valueExpr, tee);\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) return module.unreachable();\r\n        if (target.is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range,\r\n            target.internalName\r\n          );\r\n          this.currentType = tee ? (<Global>target).type : Type.void;\r\n          return module.unreachable();\r\n        }\r\n        return this.makeGlobalAssignment(<Global>target, valueExpr, tee);\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let initializerNode = (<Field>target).initializerNode;\r\n        if (\r\n          (<Field>target).is(CommonFlags.READONLY) &&\r\n          !(\r\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\r\n            initializerNode\r\n          )\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range, (<Field>target).internalName\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        return this.makeFieldAssignment(<Field>target,\r\n          valueExpr,\r\n          this.compileExpressionRetainType(\r\n            assert(thisExpression),\r\n            // FIXME: explicit type (currently fails due to missing null checking)\r\n            this.options.usizeType\r\n          ),\r\n          tee\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\r\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\r\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\r\n        if (!setterPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range, target.internalName\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\r\n        if (!setterInstance) return module.unreachable();\r\n        // call just the setter if the return value isn't of interest\r\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\r\n        // otherwise call the setter first, then the getter\r\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\r\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\r\n        if (!getterInstance) return module.unreachable();\r\n        let returnType = getterInstance.signature.returnType;\r\n        let nativeReturnType = returnType.toNativeType();\r\n        return module.block(null, [\r\n          this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\r\n          this.makeCallDirect(getterInstance, null, valueExpression) // sets currentType\r\n        ], nativeReturnType);\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\r\n        let setterInstance = (<Property>target).setterInstance;\r\n        if (!setterInstance) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            valueExpression.range, target.internalName\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        // call just the setter if the return value isn't of interest\r\n        if (!tee) {\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            assert(thisExpression),\r\n            this.options.usizeType\r\n          );\r\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\r\n        }\r\n        // otherwise call the setter first, then the getter\r\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\r\n        let returnType = getterInstance.signature.returnType;\r\n        let nativeReturnType = returnType.toNativeType();\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          assert(thisExpression),\r\n          this.options.usizeType\r\n        );\r\n        let tempLocal = flow.getAndFreeTempLocal(returnType);\r\n        let tempLocalIndex = tempLocal.index;\r\n        return module.block(null, [\r\n          this.makeCallDirect(setterInstance, [ // set and remember the target\r\n            module.local_tee(tempLocalIndex, thisExpr),\r\n            valueExpr\r\n          ], valueExpression),\r\n          this.makeCallDirect(getterInstance, [ // get from remembered target\r\n            module.local_get(tempLocalIndex, nativeReturnType)\r\n          ], valueExpression)\r\n        ], nativeReturnType);\r\n      }\r\n      case ElementKind.CLASS: {\r\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\r\n        if (indexExpression) {\r\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              valueExpression.range, target.internalName\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n              valueExpression.range, target.internalName\r\n            );\r\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\r\n            return module.unreachable();\r\n          }\r\n          let targetType = (<Class>target).type;\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            assert(thisExpression),\r\n            this.options.usizeType\r\n          );\r\n          let elementExpr = this.compileExpression(indexExpression, Type.i32, ContextualFlags.IMPLICIT);\r\n          if (tee) {\r\n            let tempLocalTarget = flow.getTempLocal(targetType);\r\n            let tempLocalElement = flow.getAndFreeTempLocal(this.currentType);\r\n            let returnType = indexedGet.signature.returnType;\r\n            flow.freeTempLocal(tempLocalTarget);\r\n            return module.block(null, [\r\n              this.makeCallDirect(indexedSet, [\r\n                module.local_tee(tempLocalTarget.index, thisExpr),\r\n                module.local_tee(tempLocalElement.index, elementExpr),\r\n                valueExpr\r\n              ], valueExpression),\r\n              this.makeCallDirect(indexedGet, [\r\n                module.local_get(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\r\n                module.local_get(tempLocalElement.index, tempLocalElement.type.toNativeType())\r\n              ], valueExpression)\r\n            ], returnType.toNativeType());\r\n          } else {\r\n            return this.makeCallDirect(indexedSet, [\r\n              thisExpr,\r\n              elementExpr,\r\n              valueExpr\r\n            ], valueExpression);\r\n          }\r\n        }\r\n        // fall-through\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      valueExpression.range\r\n    );\r\n    return module.unreachable();\r\n  }\r\n\r\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\r\n  private makeLocalAssignment(\r\n    /** The local to assign to. */\r\n    local: Local,\r\n    /** The value to assign. */\r\n    valueExpr: ExpressionRef,\r\n    /** Whether to tee the value. */\r\n    tee: bool\r\n  ): ExpressionRef {\r\n    var type = local.type;\r\n    assert(type != Type.void);\r\n    var flow = this.currentFlow;\r\n    var localIndex = local.index;\r\n\r\n    if (type.is(TypeFlags.NULLABLE)) {\r\n      if (flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\r\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\r\n    }\r\n    flow.setLocalFlag(localIndex, LocalFlags.WRITTENTO);\r\n\r\n    if (type.isManaged) {\r\n      let module = this.module;\r\n      let nativeType = type.toNativeType();\r\n\r\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\r\n        if (this.skippedAutoreleases.has(valueExpr)) {\r\n          valueExpr = this.makeSkippedRelease(\r\n            module.local_get(localIndex, nativeType), // oldRef\r\n            valueExpr // newRef\r\n          );\r\n          if (tee) { // TEE(local = __skippedRelease(local, value))\r\n            this.currentType = type;\r\n            return module.local_tee(localIndex, valueExpr);\r\n          } else { // local = __skippedRelease(local, value)\r\n            this.currentType = Type.void;\r\n            return module.local_set(localIndex, valueExpr);\r\n          }\r\n        } else {\r\n          valueExpr = this.makeRetainRelease(\r\n            module.local_get(localIndex, nativeType), // oldRef\r\n            valueExpr // newRef\r\n          );\r\n          if (tee) { // TEE(local = __retainRelease(local, value))\r\n            this.currentType = type;\r\n            return module.local_tee(localIndex, valueExpr);\r\n          } else { // local = __retainRelease(local, value)\r\n            this.currentType = Type.void;\r\n            return module.local_set(localIndex, valueExpr);\r\n          }\r\n        }\r\n      } else {\r\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\r\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\r\n        if (!this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeRetain(valueExpr);\r\n        if (tee) { // TEE(local = __retain(value, local))\r\n          this.currentType = type;\r\n          return module.local_tee(localIndex, valueExpr);\r\n        } else { // local = __retain(value, local)\r\n          this.currentType = Type.void;\r\n          return module.local_set(localIndex, valueExpr);\r\n        }\r\n      }\r\n    } else {\r\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\r\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\r\n      }\r\n      if (tee) { // TEE(local = value)\r\n        this.currentType = type;\r\n        return this.module.local_tee(localIndex, valueExpr);\r\n      } else { // local = value\r\n        this.currentType = Type.void;\r\n        return this.module.local_set(localIndex, valueExpr);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\r\n  private makeGlobalAssignment(\r\n    /** The global to assign to. */\r\n    global: Global,\r\n    /** The value to assign. */\r\n    valueExpr: ExpressionRef,\r\n    /** Whether to tee the value. */\r\n    tee: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var type = global.type;\r\n    assert(type != Type.void);\r\n    var nativeType = type.toNativeType();\r\n\r\n    if (type.isManaged) {\r\n      if (this.skippedAutoreleases.has(valueExpr)) {\r\n        if (tee) { // (global = __skippedRelease(global, value)), global\r\n          this.currentType = type;\r\n          return module.block(null, [\r\n            module.global_set(global.internalName,\r\n              this.makeSkippedRelease(\r\n                module.global_get(global.internalName, nativeType), // oldRef\r\n                valueExpr // newRef\r\n              )\r\n            ),\r\n            module.global_get(global.internalName, nativeType)\r\n          ], nativeType);\r\n        } else { // global = __skippedRelease(global, value)\r\n          this.currentType = Type.void;\r\n          return module.global_set(global.internalName,\r\n            this.makeSkippedRelease(\r\n              module.global_get(global.internalName, nativeType), // oldRef\r\n              valueExpr // newRef\r\n            )\r\n          );\r\n        }\r\n      } else {\r\n        if (tee) { // (global = __retainRelease(global, value)), global\r\n          this.currentType = type;\r\n          return module.block(null, [\r\n            module.global_set(global.internalName,\r\n              this.makeRetainRelease(\r\n                module.global_get(global.internalName, nativeType), // oldRef\r\n                valueExpr // newRef\r\n              )\r\n            ),\r\n            module.global_get(global.internalName, nativeType)\r\n          ], nativeType);\r\n        } else { // global = __retainRelease(global, value)\r\n          this.currentType = Type.void;\r\n          return module.global_set(global.internalName,\r\n            this.makeRetainRelease(\r\n              module.global_get(global.internalName, nativeType), // oldRef\r\n              valueExpr // newRef\r\n            )\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\r\n      if (tee) { // (global = value), global\r\n        this.currentType = type;\r\n        return module.block(null, [\r\n          module.global_set(global.internalName, valueExpr),\r\n          module.global_get(global.internalName, nativeType)\r\n        ], nativeType);\r\n      } else { // global = value\r\n        this.currentType = Type.void;\r\n        return module.global_set(global.internalName,\r\n          valueExpr\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\r\n  makeFieldAssignment(\r\n    /** The field to assign to. */\r\n    field: Field,\r\n    /** The value to assign. */\r\n    valueExpr: ExpressionRef,\r\n    /** The value of `this`. */\r\n    thisExpr: ExpressionRef,\r\n    /** Whether to tee the value. */\r\n    tee: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var fieldType = field.type;\r\n    var nativeFieldType = fieldType.toNativeType();\r\n    assert(field.parent.kind == ElementKind.CLASS);\r\n    var thisType = (<Class>field.parent).type;\r\n    var nativeThisType = thisType.toNativeType();\r\n\r\n    if (fieldType.isManaged && thisType.isManaged) {\r\n      let tempThis = flow.getTempLocal(thisType);\r\n      if (this.skippedAutoreleases.has(valueExpr)) {\r\n        if (tee) { // ((t1 = this).field = __skippedRelease(t1.field, t2 = value)), t2\r\n          let tempValue = flow.getAndFreeTempLocal(fieldType);\r\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\r\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\r\n          flow.freeTempLocal(tempThis);\r\n          this.currentType = fieldType;\r\n          return module.block(null, [\r\n            module.store(fieldType.byteSize,\r\n              module.local_tee(tempThis.index, thisExpr),\r\n              this.makeSkippedRelease(\r\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\r\n                  module.local_get(tempThis.index, nativeThisType),\r\n                  nativeFieldType, field.memoryOffset\r\n                ),\r\n                module.local_tee(tempValue.index, valueExpr), // newRef\r\n              ),\r\n              nativeFieldType, field.memoryOffset\r\n            ),\r\n            module.local_get(tempValue.index, nativeFieldType)\r\n          ], nativeFieldType);\r\n        } else { // (t1 = this).field = __skippedRelease(t1.field, value)\r\n          flow.freeTempLocal(tempThis);\r\n          this.currentType = Type.void;\r\n          return module.store(fieldType.byteSize,\r\n            module.local_tee(tempThis.index, thisExpr),\r\n            this.makeSkippedRelease(\r\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\r\n                module.local_get(tempThis.index, nativeThisType),\r\n                nativeFieldType, field.memoryOffset\r\n              ),\r\n              valueExpr, // newRef\r\n            ),\r\n            nativeFieldType, field.memoryOffset\r\n          );\r\n        }\r\n      } else {\r\n        if (tee) { // ((t1 = this).field = __retainRelease(t1.field, t2 = value)), t2\r\n          let tempValue = flow.getAndFreeTempLocal(fieldType);\r\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\r\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\r\n          flow.freeTempLocal(tempThis);\r\n          this.currentType = fieldType;\r\n          return module.block(null, [\r\n            module.store(fieldType.byteSize,\r\n              module.local_tee(tempThis.index, thisExpr),\r\n              this.makeRetainRelease(\r\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\r\n                  module.local_get(tempThis.index, nativeThisType),\r\n                  nativeFieldType, field.memoryOffset\r\n                ),\r\n                module.local_tee(tempValue.index, valueExpr) // newRef\r\n              ),\r\n              nativeFieldType, field.memoryOffset\r\n            ),\r\n            module.local_get(tempValue.index, nativeFieldType)\r\n          ], nativeFieldType);\r\n        } else { // (t1 = this).field = __retainRelease(t1.field, value)\r\n          flow.freeTempLocal(tempThis);\r\n          this.currentType = Type.void;\r\n          return module.store(fieldType.byteSize,\r\n            module.local_tee(tempThis.index, thisExpr),\r\n            this.makeRetainRelease(\r\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\r\n                module.local_get(tempThis.index, nativeThisType),\r\n                nativeFieldType, field.memoryOffset\r\n              ),\r\n              valueExpr // newRef\r\n            ),\r\n            nativeFieldType, field.memoryOffset\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      if (tee) { // (this.field = (t1 = value)), t1\r\n        let tempValue = flow.getAndFreeTempLocal(fieldType);\r\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\r\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\r\n        this.currentType = fieldType;\r\n        return module.block(null, [\r\n          module.store(fieldType.byteSize,\r\n            thisExpr,\r\n            module.local_tee(tempValue.index, valueExpr),\r\n            nativeFieldType, field.memoryOffset\r\n          ),\r\n          module.local_get(tempValue.index, nativeFieldType)\r\n        ], nativeFieldType);\r\n      } else { // this.field = value\r\n        this.currentType = Type.void;\r\n        return module.store(fieldType.byteSize,\r\n          thisExpr,\r\n          valueExpr,\r\n          nativeFieldType, field.memoryOffset\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Compiles a call expression according to the specified context. */\r\n  compileCallExpression(\r\n    /** Call expression to compile. */\r\n    expression: CallExpression,\r\n    /** Contextual type indicating the return type the caller expects, if any. */\r\n    contextualType: Type,\r\n    /** Contextual flags indicating contextual conditions. */\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // handle call to super\r\n    if (expression.expression.kind == NodeKind.SUPER) {\r\n      let flow = this.currentFlow;\r\n      let actualFunction = flow.actualFunction;\r\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n        this.error(\r\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\r\n          expression.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n\r\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      let baseClassInstance = assert((<Class>classInstance).base);\r\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\r\n      let nativeSizeType = this.options.nativeSizeType;\r\n\r\n      // {\r\n      //   this = super(this || <ALLOC>, ...args)\r\n      //   this.a = X\r\n      //   this.b = Y\r\n      // }\r\n      let stmts: ExpressionRef[] = [\r\n        module.local_set(thisLocal.index,\r\n          this.compileCallDirect(\r\n            this.ensureConstructor(baseClassInstance, expression),\r\n            expression.arguments,\r\n            expression,\r\n            module.if(\r\n              module.local_get(thisLocal.index, nativeSizeType),\r\n              module.local_get(thisLocal.index, nativeSizeType),\r\n              this.makeRetain(\r\n                this.makeAllocation(<Class>classInstance)\r\n              )\r\n            )\r\n          )\r\n        )\r\n      ];\r\n      this.makeFieldInitialization(<Class>classInstance, stmts);\r\n\r\n      // check that super had been called before accessing allocating `this`\r\n      if (flow.isAny(\r\n        FlowFlags.ALLOCATES |\r\n        FlowFlags.CONDITIONALLY_ALLOCATES\r\n      )) {\r\n        this.error(\r\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\r\n          expression.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\r\n      this.currentType = Type.void;\r\n      return module.block(null, stmts);\r\n    }\r\n\r\n    // otherwise resolve normally\r\n    var target = this.resolver.resolveExpression(expression.expression, flow); // reports\r\n    if (!target) return module.unreachable();\r\n\r\n    var signature: Signature | null;\r\n    var indexArg: ExpressionRef;\r\n    switch (target.kind) {\r\n\r\n      // direct call: concrete function\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let prototype = <FunctionPrototype>target;\r\n        let typeArguments = expression.typeArguments;\r\n\r\n        // builtins handle present respectively omitted type arguments on their own\r\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\r\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\r\n        }\r\n\r\n        let instance: Function | null = null;\r\n\r\n        // resolve generic call if type arguments have been provided\r\n        if (typeArguments) {\r\n          if (!prototype.is(CommonFlags.GENERIC)) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              expression.expression.range, prototype.internalName\r\n            );\r\n            return module.unreachable();\r\n          }\r\n          instance = this.resolver.resolveFunctionInclTypeArguments(\r\n            prototype,\r\n            typeArguments,\r\n            flow.actualFunction.parent, // relative to caller\r\n            makeMap<string,Type>(flow.contextualTypeArguments),\r\n            expression\r\n          );\r\n\r\n        // infer generic call if type arguments have been omitted\r\n        } else if (prototype.is(CommonFlags.GENERIC)) {\r\n          let inferredTypes = new Map<string,Type | null>();\r\n          let typeParameterNodes = assert(prototype.typeParameterNodes);\r\n          let numTypeParameters = typeParameterNodes.length;\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            inferredTypes.set(typeParameterNodes[i].name.text, null);\r\n          }\r\n          // let numInferred = 0;\r\n          let parameterNodes = prototype.signatureNode.parameters;\r\n          let numParameters = parameterNodes.length;\r\n          let argumentNodes = expression.arguments;\r\n          let numArguments = argumentNodes.length;\r\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\r\n          for (let i = 0; i < numParameters; ++i) {\r\n            let typeNode = parameterNodes[i].type;\r\n            let templateName = typeNode.kind == NodeKind.TYPE && !(<TypeNode>typeNode).name.next\r\n              ? (<TypeNode>typeNode).name.identifier.text\r\n              : null;\r\n            let argumentExpression = i < numArguments\r\n              ? argumentNodes[i]\r\n              : parameterNodes[i].initializer;\r\n            if (!argumentExpression) { // missing initializer -> too few arguments\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                expression.range, numParameters.toString(10), numArguments.toString(10)\r\n              );\r\n              return module.unreachable();\r\n            }\r\n            if (templateName !== null && inferredTypes.has(templateName)) {\r\n              let inferredType = inferredTypes.get(templateName);\r\n              if (inferredType) {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType);\r\n                let commonType: Type | null;\r\n                if (!(commonType = Type.commonDenominator(inferredType, this.currentType, true))) {\r\n                  if (!(commonType = Type.commonDenominator(inferredType, this.currentType, false))) {\r\n                    this.error(\r\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n                      parameterNodes[i].type.range, this.currentType.toString(), inferredType.toString()\r\n                    );\r\n                    return module.unreachable();\r\n                  }\r\n                }\r\n                inferredType = commonType;\r\n              } else {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32);\r\n                inferredType = this.currentType;\r\n                // ++numInferred;\r\n              }\r\n              inferredTypes.set(templateName, inferredType);\r\n            } else {\r\n              let concreteType = this.resolver.resolveType(\r\n                parameterNodes[i].type,\r\n                flow.actualFunction,\r\n                flow.contextualTypeArguments\r\n              );\r\n              if (!concreteType) return module.unreachable();\r\n              argumentExprs[i] = this.compileExpression(argumentExpression, concreteType, ContextualFlags.IMPLICIT);\r\n            }\r\n          }\r\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            let inferredType = assert(inferredTypes.get(typeParameterNodes[i].name.text)); // TODO\r\n            resolvedTypeArguments[i] = inferredType;\r\n          }\r\n          instance = this.resolver.resolveFunction(\r\n            prototype,\r\n            resolvedTypeArguments,\r\n            makeMap<string,Type>(flow.contextualTypeArguments)\r\n          );\r\n          if (!instance) return this.module.unreachable();\r\n          return this.makeCallDirect(instance, argumentExprs, expression, contextualType == Type.void);\r\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\r\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\r\n          // so inlining can be performed in `makeCallDirect` instead?\r\n\r\n        // otherwise resolve the non-generic call as usual\r\n        } else {\r\n          instance = this.resolver.resolveFunction(prototype, null);\r\n        }\r\n        if (!instance) return this.module.unreachable();\r\n\r\n        // compile 'this' expression if an instance method\r\n        let thisExpr: ExpressionRef = 0;\r\n        if (instance.is(CommonFlags.INSTANCE)) {\r\n          thisExpr = this.compileExpressionRetainType(\r\n            assert(this.resolver.currentThisExpression),\r\n            this.options.usizeType\r\n          );\r\n        }\r\n\r\n        return this.compileCallDirect(\r\n          instance,\r\n          expression.arguments,\r\n          expression,\r\n          thisExpr,\r\n          false,\r\n          contextualFlags\r\n        );\r\n      }\r\n\r\n      // indirect call: index argument with signature (non-generic, can't be inlined)\r\n      case ElementKind.LOCAL: {\r\n        if (signature = (<Local>target).type.signatureReference) {\r\n          if ((<Local>target).is(CommonFlags.INLINED)) {\r\n            indexArg = module.i32(i64_low((<Local>target).constantIntegerValue));\r\n          } else {\r\n            indexArg = module.local_get((<Local>target).index, NativeType.I32);\r\n          }\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Local>target).type.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (signature = (<Global>target).type.signatureReference) {\r\n          indexArg = module.global_get((<Global>target).internalName, (<Global>target).type.toNativeType());\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Global>target).type.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let type = (<Field>target).type;\r\n        if (signature = type.signatureReference) {\r\n          let thisExpression = assert(this.resolver.currentThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType\r\n          );\r\n          indexArg = module.load(\r\n            4,\r\n            false,\r\n            thisExpr,\r\n            NativeType.I32,\r\n            (<Field>target).memoryOffset\r\n          );\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, type.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      case ElementKind.FUNCTION_TARGET: {\r\n        signature = (<FunctionTarget>target).signature;\r\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type, ContextualFlags.IMPLICIT);\r\n        break;\r\n      }\r\n\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\r\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\r\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\r\n        if (!getterInstance) return module.unreachable();\r\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\r\n        signature = this.currentType.signatureReference;\r\n        if (!signature) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, this.currentType.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let getterInstance = assert((<Property>target).getterInstance);\r\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\r\n          this.compileExpressionRetainType(\r\n            assert(this.resolver.currentThisExpression),\r\n            this.options.usizeType\r\n          )\r\n        );\r\n        signature = this.currentType.signatureReference;\r\n        if (!signature) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, this.currentType.toString()\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        break;\r\n      }\r\n\r\n      // not supported\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n    }\r\n    return this.compileCallIndirect(\r\n      signature,\r\n      indexArg,\r\n      expression.arguments,\r\n      expression,\r\n      0,\r\n      contextualType == Type.void\r\n    );\r\n  }\r\n\r\n  private compileCallExpressionBuiltin(\r\n    prototype: FunctionPrototype,\r\n    expression: CallExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var typeArguments: Type[] | null = null;\r\n\r\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\r\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\r\n    var typeParameterNodes = prototype.typeParameterNodes;\r\n    var typeArgumentNodes = expression.typeArguments;\r\n    if (expression.typeArguments) {\r\n      if (!prototype.is(CommonFlags.GENERIC)) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          expression.range, prototype.internalName\r\n        );\r\n      }\r\n      typeArguments = this.resolver.resolveTypeArguments(\r\n        assert(typeParameterNodes),\r\n        typeArgumentNodes,\r\n        this.currentFlow.actualFunction.parent,\r\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\r\n        expression\r\n      );\r\n    }\r\n\r\n    // now compile the builtin, which usually returns a block of code that replaces the call.\r\n    var expr = compileBuiltinCall(\r\n      this,\r\n      prototype,\r\n      typeArguments,\r\n      expression.arguments,\r\n      contextualType,\r\n      expression\r\n    );\r\n    if (!expr) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      return this.module.unreachable();\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /**\r\n   * Checks that a call with the given number as arguments can be performed according to the\r\n   * specified signature.\r\n   */\r\n  checkCallSignature(\r\n    signature: Signature,\r\n    numArguments: i32,\r\n    hasThis: bool,\r\n    reportNode: Node\r\n  ): bool {\r\n\r\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\r\n    var thisType = signature.thisType;\r\n    if (hasThis != (thisType != null)) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\r\n    var hasRest = signature.hasRest;\r\n    if (hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    var minimum = signature.requiredParameters;\r\n    var maximum = signature.parameterTypes.length;\r\n\r\n    // must at least be called with required arguments\r\n    if (numArguments < minimum) {\r\n      this.error(\r\n        minimum < maximum\r\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\r\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, minimum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // must not be called with more than the maximum arguments\r\n    if (numArguments > maximum && !hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, maximum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /** Compiles a direct call to a concrete function. */\r\n  compileCallDirect(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0,\r\n    inlineCanAlias: bool = false,\r\n    contextualFlags: ContextualFlags = ContextualFlags.NONE\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      this.currentType = signature.returnType;\r\n      return this.module.unreachable();\r\n    }\r\n\r\n    // Inline if explicitly requested\r\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\r\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\r\n      if (this.currentInlineFunctions.includes(instance)) {\r\n        this.warning(\r\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\r\n          reportNode.range, instance.internalName\r\n        );\r\n      } else {\r\n        this.currentInlineFunctions.push(instance);\r\n        let expr = this.compileCallInlinePrechecked(instance, argumentExpressions, thisArg, inlineCanAlias, (contextualFlags & ContextualFlags.WILL_DROP) != 0);\r\n        this.currentInlineFunctions.pop();\r\n        return expr;\r\n      }\r\n    }\r\n\r\n    // Otherwise compile to just a call\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    if (signature.returnType.isManaged) {\r\n      if (contextualFlags & ContextualFlags.WILL_DROP) {\r\n        // Skip autorelease and simply release\r\n        return this.makeCallDirect(instance, operands, reportNode, true);\r\n      } else if (contextualFlags & ContextualFlags.SKIP_AUTORELEASE) {\r\n        // Skip autorelease and remember\r\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\r\n        this.skippedAutoreleases.add(expr);\r\n        return expr;\r\n      } else {\r\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\r\n      }\r\n    }\r\n    return this.makeCallDirect(instance, operands, reportNode,\r\n      (contextualFlags & ContextualFlags.WILL_DROP) != 0\r\n    );\r\n  }\r\n\r\n  compileCallInline(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    thisArg: ExpressionRef,\r\n    reportNode: Node,\r\n    canAlias: bool = false\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      this.currentType = instance.signature.returnType;\r\n      return this.module.unreachable();\r\n    }\r\n    return this.compileCallInlinePrechecked(instance, argumentExpressions, thisArg, canAlias);\r\n  }\r\n\r\n  private compileCallInlinePrechecked(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    thisArg: ExpressionRef = 0,\r\n    canAlias: bool = false,\r\n    immediatelyDropped: bool = false\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n    var parameterTypes = signature.parameterTypes;\r\n    assert(numArguments <= parameterTypes.length);\r\n    var args = new Array<ExpressionRef>(numArguments);\r\n    var flow = this.currentFlow;\r\n\r\n    // compile arguments possibly using their own temp locals\r\n    var temps = flow.blockLocalsBeforeInlining(instance);\r\n    for (let i = 0; i < numArguments; ++i) {\r\n      args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n    }\r\n    flow.unblockLocals(temps);\r\n\r\n    return this.makeCallInlinePrechecked(instance, args, thisArg, canAlias, immediatelyDropped);\r\n  }\r\n\r\n  makeCallInlinePrechecked(\r\n    instance: Function,\r\n    args: ExpressionRef[],\r\n    thisArg: ExpressionRef = 0,\r\n    canAlias: bool = false,\r\n    immediatelyDropped: bool = false\r\n  ): ExpressionRef {\r\n\r\n    // CAUTION: Imagine a call like `theCall(a, b)`. Unless canAlias, inlining needs a temporary local for\r\n    // each argument, looking something like `BLOCK { t1 = a, t2 = b, inlinedTheCall }`. Now, if argument b,\r\n    // which is compiled beforehand, itself required a temporary local, it is likely that it did pick `t1`\r\n    // for this, making it something like `BLOCK { t1 = a, t2 = (t1 = c, t1), inlinedTheCall }`, which is\r\n    // overwriting t1. Hence, whenever makeCallInline is used, this condition must be taken into account.\r\n    // Flows provide the helpers Flow#blockLocalsBeforeInlining and Flow#unblockLocals for this.\r\n\r\n    var module = this.module;\r\n\r\n    // Create a new inline flow and use it to compile the function as a block\r\n    var previousFlow = this.currentFlow;\r\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\r\n    var body = [];\r\n\r\n    // Convert provided call arguments to temporary locals\r\n    if (thisArg) {\r\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      let thisType = assert(instance.signature.thisType);\r\n      if (canAlias && getExpressionId(thisArg) == ExpressionId.LocalGet) {\r\n        flow.addScopedAlias(CommonSymbols.this_, thisType, getLocalGetIndex(thisArg));\r\n        let baseInstance = (<Class>classInstance).base;\r\n        if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, getLocalGetIndex(thisArg));\r\n      } else {\r\n        let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType);\r\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\r\n        body.push(\r\n          module.local_set(thisLocal.index, thisArg)\r\n        );\r\n        let baseInstance = (<Class>classInstance).base;\r\n        if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\r\n      }\r\n    } else {\r\n      assert(!instance.signature.thisType);\r\n    }\r\n    var numArguments = args.length;\r\n    var signature = instance.signature;\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i) {\r\n      let paramExpr = args[i];\r\n      let paramType = parameterTypes[i];\r\n      if (canAlias && getExpressionId(paramExpr) == ExpressionId.LocalGet) {\r\n        flow.addScopedAlias(signature.getParameterName(i), paramType, getLocalGetIndex(paramExpr));\r\n      } else {\r\n        let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType);\r\n        // Normal function wouldn't know about wrap/nonnull states, but inlining does:\r\n        if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\r\n        if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\r\n        if (paramType.isManaged) {\r\n          flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\r\n          body.push(\r\n            module.local_set(argumentLocal.index,\r\n              this.makeRetain(paramExpr)\r\n            )\r\n          );\r\n        } else {\r\n          body.push(\r\n            module.local_set(argumentLocal.index, paramExpr)\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    // Compile optional parameter initializers in the scope of the inlined flow\r\n    this.currentFlow = flow;\r\n    var numParameters = signature.parameterTypes.length;\r\n    for (let i = numArguments; i < numParameters; ++i) {\r\n      let initType = parameterTypes[i];\r\n      let initExpr = this.compileExpression(\r\n        assert(instance.prototype.signatureNode.parameters[i].initializer),\r\n        initType,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      if (canAlias && getExpressionId(initExpr) == ExpressionId.LocalGet) {\r\n        flow.addScopedAlias(signature.getParameterName(i), initType, getLocalGetIndex(initExpr));\r\n      } else {\r\n        let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\r\n        if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\r\n        if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\r\n        if (initType.isManaged) {\r\n          flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\r\n          body.push(\r\n            module.local_set(argumentLocal.index,\r\n              this.makeRetain(initExpr)\r\n            )\r\n          );\r\n        } else {\r\n          body.push(\r\n            module.local_set(argumentLocal.index, initExpr)\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    // Compile the called function's body in the scope of the inlined flow\r\n    this.compileFunctionBody(instance, body);\r\n\r\n    // Free any new scoped locals and reset to the original flow\r\n    if (!flow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n      this.performAutoreleases(flow, body);\r\n      this.finishAutoreleases(flow, body);\r\n    }\r\n    flow.freeScopedLocals();\r\n    var returnType = flow.returnType;\r\n    this.currentFlow = previousFlow;\r\n\r\n    // Create an outer block that we can break to when returning a value out of order\r\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\r\n    this.currentType = returnType;\r\n    if (returnType.isManaged) {\r\n      if (immediatelyDropped) {\r\n        expr = this.makeRelease(expr);\r\n        this.currentType = Type.void;\r\n      } else {\r\n        expr = this.makeAutorelease(expr);\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Gets the trampoline for the specified function. */\r\n  ensureTrampoline(original: Function): Function {\r\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\r\n    // being zeroed. It takes one additional argument denoting the number of actual operands\r\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\r\n    // default values using the optional parameter initializers of the original function. Doing so\r\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\r\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\r\n    // context otherwise.\r\n    var trampoline = original.trampoline;\r\n    if (trampoline) return trampoline;\r\n\r\n    var originalSignature = original.signature;\r\n    var originalName = original.internalName;\r\n    var originalParameterTypes = originalSignature.parameterTypes;\r\n    var originalParameterDeclarations = original.prototype.signatureNode.parameters;\r\n    var commonReturnType = originalSignature.returnType;\r\n    var commonThisType = originalSignature.thisType;\r\n    var isInstance = original.is(CommonFlags.INSTANCE);\r\n\r\n    // arguments excl. `this`, operands incl. `this`\r\n    var minArguments = originalSignature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = originalParameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (isInstance) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n    }\r\n    var numOptional = assert(maxOperands - minOperands);\r\n\r\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\r\n    var operandIndex = 0;\r\n\r\n    // forward `this` if applicable\r\n    var module = this.module;\r\n    if (isInstance) {\r\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\r\n      operandIndex = 1;\r\n    }\r\n\r\n    // forward required arguments\r\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\r\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\r\n    }\r\n    assert(operandIndex == minOperands);\r\n\r\n    // create the trampoline element\r\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\r\n    trampolineSignature.requiredParameters = maxArguments;\r\n    trampolineSignature.parameterNames = originalSignature.parameterNames;\r\n    trampoline = new Function(\r\n      original.name + \"|trampoline\",\r\n      original.prototype,\r\n      trampolineSignature,\r\n      original.contextualTypeArguments\r\n    );\r\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\r\n    original.trampoline = trampoline;\r\n\r\n    // compile initializers of omitted arguments in scope of the trampoline function\r\n    // this is necessary because initializers might need additional locals and a proper this context\r\n    var previousFlow = this.currentFlow;\r\n    this.currentFlow = trampoline.flow;\r\n\r\n    // create a br_table switching over the number of optional parameters provided\r\n    var numNames = numOptional + 1; // incl. outer block\r\n    var names = new Array<string>(numNames);\r\n    var ofN = \"of\" + numOptional.toString(10);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      let label = i.toString(10) + ofN;\r\n      names[i] = label;\r\n    }\r\n    var body = module.block(names[0], [\r\n      module.block(\"outOfRange\", [\r\n        module.switch(names, \"outOfRange\",\r\n          // condition is number of provided optional arguments, so subtract required arguments\r\n          minArguments\r\n            ? module.binary(\r\n                BinaryOp.SubI32,\r\n                module.global_get(BuiltinSymbols.argc, NativeType.I32),\r\n                module.i32(minArguments)\r\n              )\r\n            : module.global_get(BuiltinSymbols.argc, NativeType.I32)\r\n        )\r\n      ]),\r\n      module.unreachable()\r\n    ]);\r\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\r\n      let type = originalParameterTypes[minArguments + i];\r\n      let declaration = originalParameterDeclarations[minArguments + i];\r\n      let initializer = declaration.initializer;\r\n      let initExpr: ExpressionRef;\r\n      if (initializer) {\r\n        initExpr = module.local_set(operandIndex,\r\n          this.compileExpression(\r\n            initializer,\r\n            type,\r\n            ContextualFlags.IMPLICIT\r\n          )\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\r\n          declaration.range\r\n        );\r\n        initExpr = module.unreachable();\r\n      }\r\n      body = module.block(names[i + 1], [\r\n        body,\r\n        initExpr,\r\n      ]);\r\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\r\n    }\r\n    this.currentFlow = previousFlow;\r\n    assert(operandIndex == maxOperands);\r\n\r\n    var funcRef = module.addFunction(\r\n      trampoline.internalName,\r\n      this.ensureFunctionType(\r\n        trampolineSignature.parameterTypes,\r\n        trampolineSignature.returnType,\r\n        trampolineSignature.thisType\r\n      ),\r\n      typesToNativeTypes(trampoline.additionalLocals),\r\n      module.block(null, [\r\n        body,\r\n        module.call(\r\n          originalName,\r\n          forwardedOperands,\r\n          commonReturnType.toNativeType()\r\n        )\r\n      ], commonReturnType.toNativeType())\r\n    );\r\n    trampoline.finalize(module, funcRef);\r\n    return trampoline;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper global is present and returns its name. */\r\n  private ensureArgcVar(): string {\r\n    if (!this.argcVar) {\r\n      let module = this.module;\r\n      this.argcVar = module.addGlobal(\r\n        BuiltinSymbols.argc,\r\n        NativeType.I32,\r\n        true,\r\n        module.i32(0)\r\n      );\r\n    }\r\n    return BuiltinSymbols.argc;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper setter is present and returns its name. */\r\n  private ensureArgcSet(): string {\r\n    if (!this.argcSet) {\r\n      let module = this.module;\r\n      this.argcSet = module.addFunction(BuiltinSymbols.setargc,\r\n        this.ensureFunctionType([ Type.u32 ], Type.void),\r\n        null,\r\n        module.global_set(this.ensureArgcVar(),\r\n          module.local_get(0, NativeType.I32)\r\n        )\r\n      );\r\n      module.addFunctionExport(BuiltinSymbols.setargc, \"__setargc\");\r\n    }\r\n    return BuiltinSymbols.setargc;\r\n  }\r\n\r\n  // <reference-counting>\r\n\r\n  /** Makes retain call, retaining the expression's value. */\r\n  makeRetain(expr: ExpressionRef): ExpressionRef {\r\n    var retainInstance = this.program.retainInstance;\r\n    this.compileFunction(retainInstance);\r\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\r\n  }\r\n\r\n  /** Makes a retainRelease call, retaining the new expression's value and releasing the old expression's value, in this order. */\r\n  makeRetainRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\r\n    // if ((t1=newExpr) != (t2=oldExpr)) {\r\n    //   __retain(t1);\r\n    //   __release(t2);\r\n    // }, t1\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var usizeType = this.options.usizeType;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    var temp1 = flow.getTempLocal(usizeType, oldExpr);\r\n    var temp2 = flow.getAndFreeTempLocal(usizeType);\r\n    flow.freeTempLocal(temp1);\r\n    return module.block(null, [\r\n      module.if(\r\n        module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\r\n          module.local_tee(temp1.index, newExpr),\r\n          module.local_tee(temp2.index, oldExpr)\r\n        ),\r\n        module.block(null, [\r\n          module.drop(\r\n            this.makeRetain(module.local_get(temp1.index, nativeSizeType))\r\n          ),\r\n          this.makeRelease(module.local_get(temp2.index, nativeSizeType))\r\n        ])\r\n      ),\r\n      module.local_get(temp1.index, nativeSizeType)\r\n    ], nativeSizeType);\r\n  }\r\n\r\n  /** Makes a skippedRelease call, ignoring the new expression's value and releasing the old expression's value, in this order. */\r\n  makeSkippedRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\r\n    // TODO: this helper can be eliminated altogether if the current logic holds\r\n    // (t1=newExpr), __release(oldExpr), t1\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var usizeType = this.options.usizeType;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    var temp = flow.getAndFreeTempLocal(usizeType, oldExpr);\r\n    return module.block(null, [\r\n      module.local_set(temp.index, newExpr),\r\n      this.makeRelease(oldExpr),\r\n      module.local_get(temp.index, nativeSizeType)\r\n    ], nativeSizeType);\r\n  }\r\n\r\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\r\n  makeRelease(expr: ExpressionRef): ExpressionRef {\r\n    var releaseInstance = this.program.releaseInstance;\r\n    this.compileFunction(releaseInstance);\r\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\r\n  }\r\n\r\n  /** Makes an automatic release call at the end of the current flow. */\r\n  makeAutorelease(expr: ExpressionRef, flow: Flow = this.currentFlow): ExpressionRef {\r\n    return this.module.local_tee(flow.getAutoreleaseLocal(this.options.usizeType).index, expr);\r\n  }\r\n\r\n  /** Attempts to undo a final autorelease, returning the index of the previously retaining variable or -1 if not possible. */\r\n  undoAutorelease(expr: ExpressionRef, flow: Flow): i32 {\r\n    // NOTE: Can't remove the local.tee completely because it's already compiled\r\n    // and a child of something else. Preventing the final release however should\r\n    // make it optimize away.\r\n    switch (getExpressionId(expr)) {\r\n      case ExpressionId.LocalSet: { // local.tee(__retain(expr))\r\n        if (isLocalTee(expr)) {\r\n          let index = getLocalSetIndex(expr);\r\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\r\n            // Assumes that the expression actually belongs to the flow and that\r\n            // top-level autoreleases are never undone. While that's true, it's\r\n            // not necessary to check presence in scopedLocals.\r\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\r\n            return index;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Block: { // { ..., local.tee(__retain(expr)) }\r\n        if (getBlockName(expr) === null) { // must not be a break target\r\n          let count = getBlockChildCount(expr);\r\n          if (count) {\r\n            return this.undoAutorelease(getBlockChild(expr, count - 1), flow);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  /**\r\n   * Attemps to move a final autorelease from one flow to a parent.\r\n   * It is crucial that from flow hasn't processed autoreleases yet because otherwise the final\r\n   * retain would have been written already.\r\n   */\r\n  moveAutorelease(expr: ExpressionRef, fromInnerFlow: Flow, toOuterFlow: Flow): ExpressionRef {\r\n    // NOTE: While this avoids an unnecessary set of retain and release, it cannot\r\n    // eliminate the now unnecessary temporary local.tee because it is already part of\r\n    // another expression in the tree. But optimizing should collapse locals again.\r\n    var index = this.undoAutorelease(expr, fromInnerFlow);\r\n    return ~index\r\n      ? this.makeAutorelease(expr, toOuterFlow) // undone, can skip the retain\r\n      : this.makeAutorelease(this.makeRetain(expr), toOuterFlow);\r\n  }\r\n\r\n  /** Performs any queued autoreleases in the specified flow. */\r\n  performAutoreleases(flow: Flow, stmts: ExpressionRef[], clearFlags: bool = true): void {\r\n    var scopedLocals = flow.scopedLocals;\r\n    if (scopedLocals) {\r\n      let module = this.module;\r\n      for (let local of scopedLocals.values()) {\r\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          let localIndex = local.index;\r\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\r\n            if (clearFlags) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\r\n            stmts.push(\r\n              this.makeRelease(\r\n                module.local_get(localIndex, local.type.toNativeType())\r\n              )\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Performs any queued autoreleases in the specified flow and returns the value. */\r\n  performAutoreleasesWithValue(\r\n    flow: Flow,\r\n    valueExpr: ExpressionRef,\r\n    valueType: Type,\r\n    stmts: ExpressionRef[] | null = null,\r\n    clearFlags: bool = true\r\n  ): ExpressionRef {\r\n    if (!stmts) stmts = new Array<ExpressionRef>();\r\n    stmts.push(\r\n      this.module.nop()\r\n    );\r\n    var lengthBefore = stmts.length;\r\n    this.performAutoreleases(flow, stmts, clearFlags);\r\n    if (stmts.length > lengthBefore) {\r\n      let nativeType = valueType.toNativeType();\r\n      let temp = flow.getAndFreeTempLocal(valueType);\r\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\r\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\r\n      let module = this.module;\r\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\r\n      stmts.push(\r\n        module.local_get(temp.index, nativeType) // append get\r\n      );\r\n      return module.block(null, stmts, nativeType);\r\n    } else if (stmts.length > 1) {\r\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\r\n      return this.module.block(null, stmts, valueType.toNativeType());\r\n    }\r\n    return valueExpr;\r\n  }\r\n\r\n  /** Finishes any queued top-level autoreleases in the actual function of the specified flow. */\r\n  finishAutoreleases(flow: Flow, stmts: ExpressionRef[]): void {\r\n    var module = this.module;\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      // traverse to the top-most flow containing the inlined function's\r\n      // locals as scoped locals and release these instead.\r\n      let parent: Flow | null;\r\n      while (parent = flow.parent) flow = parent;\r\n      this.performAutoreleases(flow, stmts, false);\r\n    } else {\r\n      for (let local of flow.parentFunction.localsByIndex) {\r\n        let localIndex = local.index;\r\n        if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\r\n          flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\r\n          stmts.push(\r\n            this.makeRelease(\r\n              module.local_get(localIndex, local.type.toNativeType())\r\n            )\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // </reference-counting>\r\n\r\n  /** Creates a direct call to the specified function. */\r\n  makeCallDirect(\r\n    instance: Function,\r\n    operands: ExpressionRef[] | null,\r\n    reportNode: Node,\r\n    immediatelyDropped: bool = false,\r\n    /** Skip the usual autorelease and manage this at the callsite instead. */\r\n    skipAutorelease: bool = false\r\n  ): ExpressionRef {\r\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\r\n      this.warning(\r\n        DiagnosticCode.TODO_Cannot_inline_inferred_calls_and_specific_internals_yet,\r\n        reportNode.range, instance.internalName\r\n      );\r\n    }\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = instance.signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = instance.signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (instance.is(CommonFlags.INSTANCE)) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    var module = this.module;\r\n    if (!this.compileFunction(instance)) return module.unreachable();\r\n    var returnType = instance.signature.returnType;\r\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\r\n\r\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = instance.signature.parameterTypes;\r\n      let parameterNodes = instance.prototype.signatureNode.parameters;\r\n      assert(parameterNodes.length == parameterTypes.length);\r\n      let allOptionalsAreConstant = true;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        let initializer = parameterNodes[i].initializer;\r\n        if (initializer) {\r\n          let resolved: Element | null;\r\n          if (\r\n            nodeIsConstantValue(initializer.kind) ||\r\n            (\r\n              (resolved = this.resolver.resolveExpression(initializer, instance.flow, parameterTypes[i])) &&\r\n              (\r\n                resolved.kind == ElementKind.GLOBAL\r\n                // resolved.kind == ElementKind.FUNCTION_TARGET\r\n              )\r\n            )\r\n          ) { // inline into the call\r\n            let previousFlow = this.currentFlow;\r\n            this.currentFlow = instance.flow;\r\n            operands.push(this.compileExpression(\r\n              <Expression>parameterNodes[i].initializer,\r\n              parameterTypes[i],\r\n              ContextualFlags.IMPLICIT\r\n            ));\r\n            this.currentFlow = previousFlow;\r\n            continue;\r\n          }\r\n        }\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n        allOptionalsAreConstant = false;\r\n      }\r\n      if (!allOptionalsAreConstant) {\r\n        if (!isCallImport) {\r\n          let original = instance;\r\n          instance = this.ensureTrampoline(instance);\r\n          if (!this.compileFunction(instance)) return module.unreachable();\r\n          instance.flow.flags = original.flow.flags;\r\n          let nativeReturnType = returnType.toNativeType();\r\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\r\n          this.currentType = returnType;\r\n          if (returnType.isManaged) {\r\n            if (immediatelyDropped) {\r\n              expr = this.makeRelease(expr);\r\n              this.currentType = Type.void;\r\n            } else if (!skipAutorelease) {\r\n              expr = this.makeAutorelease(expr);\r\n            } else {\r\n              this.skippedAutoreleases.add(expr);\r\n            }\r\n          }\r\n          return module.block(null, [\r\n            module.global_set(this.ensureArgcVar(), module.i32(numArguments)),\r\n            expr\r\n          ], this.currentType.toNativeType());\r\n        }\r\n      }\r\n    }\r\n\r\n    // If the return value is of a reference type it has not yet been released but is in flight\r\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\r\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\r\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\r\n    this.currentType = returnType;\r\n    if (returnType.isManaged) {\r\n      if (immediatelyDropped) {\r\n        expr = this.makeRelease(expr);\r\n        this.currentType = Type.void;\r\n      } else if (!skipAutorelease) {\r\n        expr = this.makeAutorelease(expr);\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Compiles an indirect call using an index argument and a signature. */\r\n  compileCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0,\r\n    immediatelyDropped: bool = false\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.unreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\r\n  }\r\n\r\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\r\n  makeCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    operands: ExpressionRef[] | null = null,\r\n    immediatelyDropped: bool = false\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (signature.thisType) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n\r\n    // fill up omitted arguments with zeroes\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n      }\r\n    }\r\n\r\n    var returnType = signature.returnType;\r\n    var expr = module.call_indirect(indexArg, operands, signature.toSignatureString());\r\n    this.currentType = returnType;\r\n    if (returnType.isManaged) {\r\n      if (immediatelyDropped) {\r\n        expr = this.makeRelease(expr);\r\n        this.currentType = Type.void;\r\n      } else {\r\n        expr = this.makeAutorelease(expr);\r\n      }\r\n    }\r\n    return module.block(null, [\r\n      module.global_set(this.ensureArgcVar(), // might be calling a trampoline\r\n        module.i32(numArguments)\r\n      ),\r\n      expr\r\n    ], this.currentType.toNativeType()); // not necessarily wrapped\r\n  }\r\n\r\n  compileCommaExpression(\r\n    expression: CommaExpression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var expressions = expression.expressions;\r\n    var numExpressions = expressions.length;\r\n    var exprs = new Array<ExpressionRef>(numExpressions--);\r\n    for (let i = 0; i < numExpressions; ++i) {\r\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\r\n        ContextualFlags.IMPLICIT | ContextualFlags.WILL_DROP\r\n      );\r\n    }\r\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, contextualFlags);\r\n    return this.module.block(null, exprs, this.currentType.toNativeType());\r\n  }\r\n\r\n  compileElementAccessExpression(\r\n    expression: ElementAccessExpression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var target = this.resolver.resolveElementAccessExpression(\r\n      expression,\r\n      this.currentFlow,\r\n      contextualType\r\n    ); // reports\r\n    if (!target) return this.module.unreachable();\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS: {\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT));\r\n        if (!indexedGet) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n            expression.expression.range, (<Class>target).internalName\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n        let thisArg = this.compileExpression(expression.expression, (<Class>target).type,\r\n          ContextualFlags.IMPLICIT\r\n        );\r\n        return this.compileCallDirect(indexedGet, [\r\n          expression.elementExpression\r\n        ], expression, thisArg, false, contextualFlags & (ContextualFlags.WILL_DROP | ContextualFlags.SKIP_AUTORELEASE));\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.unreachable();\r\n  }\r\n\r\n  compileFunctionExpression(\r\n    expression: FunctionExpression,\r\n    contextualSignature: Signature | null,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\r\n    assert(!declaration.typeParameters); // function expression cannot be generic\r\n    var flow = this.currentFlow;\r\n    var actualFunction = flow.actualFunction;\r\n    var prototype = new FunctionPrototype(\r\n      declaration.name.text.length\r\n        ? declaration.name.text\r\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\r\n      actualFunction,\r\n      declaration,\r\n      DecoratorFlags.NONE\r\n    );\r\n    var instance: Function | null;\r\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\r\n\r\n    // compile according to context. this differs from a normal function in that omitted parameter\r\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\r\n    if (contextualSignature) {\r\n      let signatureNode = prototype.signatureNode;\r\n      let parameterNodes = signatureNode.parameters;\r\n      let numPresentParameters = parameterNodes.length;\r\n\r\n      // must not require more than the maximum number of parameters\r\n      let parameterTypes = contextualSignature.parameterTypes;\r\n      let numParameters = parameterTypes.length;\r\n      if (numPresentParameters > numParameters) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          expression.range, numParameters.toString(), numPresentParameters.toString()\r\n        );\r\n        return this.module.unreachable();\r\n      }\r\n\r\n      // check non-omitted parameter types\r\n      let parameterNames = new Array<string>(numPresentParameters);\r\n      for (let i = 0; i < numPresentParameters; ++i) {\r\n        let parameterNode = parameterNodes[i];\r\n        parameterNames[i] = parameterNode.name.text; // use actual name\r\n        if (!isTypeOmitted(parameterNode.type)) {\r\n          let resolvedType = this.resolver.resolveType(\r\n            parameterNode.type,\r\n            actualFunction.parent,\r\n            contextualTypeArguments\r\n          );\r\n          if (!resolvedType) return this.module.unreachable();\r\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\r\n            );\r\n            return this.module.unreachable();\r\n          }\r\n        }\r\n        // any unused parameters are inherited but ignored\r\n      }\r\n\r\n      // check non-omitted return type\r\n      let returnType = contextualSignature.returnType;\r\n      if (!isTypeOmitted(signatureNode.returnType)) {\r\n        let resolvedType = this.resolver.resolveType(\r\n          signatureNode.returnType,\r\n          actualFunction.parent,\r\n          contextualTypeArguments\r\n        );\r\n        if (!resolvedType) return this.module.unreachable();\r\n        if (\r\n          returnType == Type.void\r\n            ? resolvedType != Type.void\r\n            : !resolvedType.isStrictlyAssignableTo(returnType)\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n      }\r\n\r\n      // check explicit this type\r\n      let thisType = contextualSignature.thisType;\r\n      let thisTypeNode = signatureNode.explicitThisType;\r\n      if (thisTypeNode) {\r\n        if (!thisType) {\r\n          this.error(\r\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n            thisTypeNode.range\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n        let resolvedType = this.resolver.resolveType(\r\n          thisTypeNode,\r\n          actualFunction.parent,\r\n          contextualTypeArguments\r\n        );\r\n        if (!resolvedType) return this.module.unreachable();\r\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\r\n          );\r\n          return this.module.unreachable();\r\n        }\r\n      }\r\n\r\n      let signature = new Signature(parameterTypes, returnType, thisType);\r\n      signature.requiredParameters = numParameters; // !\r\n      signature.parameterNames = parameterNames;\r\n      instance = new Function(\r\n        prototype.name,\r\n        prototype,\r\n        signature,\r\n        contextualTypeArguments\r\n      );\r\n      if (!this.compileFunction(instance)) return this.module.unreachable();\r\n      this.currentType = contextualSignature.type;\r\n\r\n    // otherwise compile like a normal function\r\n    } else {\r\n      instance = this.compileFunctionUsingTypeArguments(\r\n        prototype,\r\n        [],\r\n        contextualTypeArguments\r\n      );\r\n      if (!instance) return this.module.unreachable();\r\n      this.currentType = instance.signature.type;\r\n    }\r\n\r\n    var index = this.ensureFunctionTableEntry(instance); // reports\r\n    return index < 0\r\n      ? this.module.unreachable()\r\n      : this.module.i32(index);\r\n  }\r\n\r\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\r\n  private maybeCompileEnclosingSource(expression: Expression): void {\r\n    var internalPath = expression.range.source.internalPath;\r\n    var filesByName = this.program.filesByName;\r\n    assert(filesByName.has(internalPath));\r\n    var enclosingFile = filesByName.get(internalPath)!;\r\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\r\n      this.compileFileByPath(internalPath, expression);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Compiles an identifier in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compileIdentifierExpression(\r\n    expression: IdentifierExpression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var actualFunction = flow.actualFunction;\r\n\r\n    // check special keywords first\r\n    switch (expression.kind) {\r\n      case NodeKind.NULL: {\r\n        let options = this.options;\r\n        if (!contextualType.classReference) {\r\n          this.currentType = options.usizeType;\r\n        }\r\n        return options.isWasm64\r\n          ? module.i64(0)\r\n          : module.i32(0);\r\n      }\r\n      case NodeKind.TRUE: {\r\n        this.currentType = Type.bool;\r\n        return module.i32(1);\r\n      }\r\n      case NodeKind.FALSE: {\r\n        this.currentType = Type.bool;\r\n        return module.i32(0);\r\n      }\r\n      case NodeKind.THIS: {\r\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\r\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\r\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n          let nativeSizeType = this.options.nativeSizeType;\r\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n            if (!flow.is(FlowFlags.ALLOCATES)) {\r\n              flow.set(FlowFlags.ALLOCATES);\r\n              // {\r\n              //   if (!this) this = <ALLOC>\r\n              //   this.a = X\r\n              //   this.b = Y\r\n              //   return this\r\n              // }\r\n              let stmts: ExpressionRef[] = [\r\n                module.if(\r\n                  module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n                    module.local_get(thisLocal.index, nativeSizeType)\r\n                  ),\r\n                  module.local_set(thisLocal.index,\r\n                    this.makeRetain(\r\n                      this.makeAllocation(<Class>classInstance)\r\n                    )\r\n                  )\r\n                )\r\n              ];\r\n              this.makeFieldInitialization(<Class>classInstance, stmts);\r\n              stmts.push(\r\n                module.local_get(thisLocal.index, nativeSizeType)\r\n              );\r\n              this.currentType = thisLocal.type;\r\n              return module.block(null, stmts, nativeSizeType);\r\n            }\r\n          }\r\n          // if not a constructor, `this` type can differ\r\n          let thisType = assert(actualFunction.signature.thisType);\r\n          this.currentType = thisType;\r\n          return module.local_get(thisLocal.index, thisType.toNativeType());\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.unreachable();\r\n      }\r\n      case NodeKind.SUPER: {\r\n        let flow = this.currentFlow;\r\n        let actualFunction = flow.actualFunction;\r\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\r\n            // TS1034 in the parser effectively limits this to property accesses\r\n            this.error(\r\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\r\n              expression.range\r\n            );\r\n          }\r\n        }\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\r\n          if (scopedThis) {\r\n            let scopedThisClass = assert(scopedThis.type.classReference);\r\n            let base = scopedThisClass.base;\r\n            if (base) {\r\n              this.currentType = base.type;\r\n              return module.local_get(scopedThis.index, base.type.toNativeType());\r\n            }\r\n          }\r\n        }\r\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\r\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n          let baseClassInstance = (<Class>classInstance).base;\r\n          if (baseClassInstance) {\r\n            let superType = baseClassInstance.type;\r\n            this.currentType = superType;\r\n            return module.local_get(0, superType.toNativeType());\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.unreachable();\r\n      }\r\n    }\r\n\r\n    this.maybeCompileEnclosingSource(expression);\r\n\r\n    // otherwise resolve\r\n    var target = this.resolver.resolveIdentifier( // reports\r\n      expression,\r\n      flow,\r\n      this.currentEnum || actualFunction\r\n    );\r\n    if (!target) return module.unreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        let type = (<Local>target).type;\r\n        assert(type != Type.void);\r\n        if ((<Local>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Local>target, contextualType, contextualFlags);\r\n        }\r\n        let localIndex = (<Local>target).index;\r\n        assert(localIndex >= 0);\r\n        if (type.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\r\n          type = type.nonNullableType;\r\n        }\r\n        this.currentType = type;\r\n        return this.module.local_get(localIndex, type.toNativeType());\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return this.module.unreachable();\r\n        }\r\n        let type = (<Global>target).type;\r\n        assert(type != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, contextualFlags);\r\n        }\r\n        this.currentType = type;\r\n        return this.module.global_get((<Global>target).internalName, type.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\r\n        if (!target.is(CommonFlags.COMPILED)) {\r\n          this.error(\r\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\r\n            expression.range\r\n          );\r\n          this.currentType = Type.i32;\r\n          return this.module.unreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\r\n          return this.module.i32(i64_low((<EnumValue>target).constantIntegerValue));\r\n        }\r\n        return this.module.global_get((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instance = this.resolver.resolveFunction(\r\n          <FunctionPrototype>target,\r\n          null,\r\n          makeMap<string,Type>(flow.contextualTypeArguments)\r\n        );\r\n        if (!(instance && this.compileFunction(instance))) return module.unreachable();\r\n        let index = this.ensureFunctionTableEntry(instance);\r\n        this.currentType = instance.signature.type;\r\n        return this.module.i32(index);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.unreachable();\r\n  }\r\n\r\n  compileInstanceOfExpression(\r\n    expression: InstanceOfExpression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\r\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\r\n    // possible in AS anyway. also note that the code generated below must preserve side-effects of\r\n    // the LHS expression even when the result is a constant, i.e. return a block dropping `expr`.\r\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType);\r\n    var actualType = this.currentType;\r\n    var expectedType = this.resolver.resolveType(expression.isType, this.currentFlow.actualFunction);\r\n    this.currentType = Type.bool;\r\n    if (!expectedType) return module.unreachable();\r\n\r\n    // instanceof <basic> - must be exact\r\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\r\n      return module.block(null, [\r\n        this.convertExpression(expr, actualType, Type.void, (contextualFlags & ContextualFlags.EXPLICIT) != 0, false, expression.expression),\r\n        module.i32(actualType == expectedType ? 1 : 0)\r\n      ], NativeType.I32);\r\n    }\r\n\r\n    // <basic> instanceof <reference> - always false\r\n    if (!actualType.is(TypeFlags.REFERENCE)) {\r\n      return module.block(null, [\r\n        this.convertExpression(expr, actualType, Type.void, (contextualFlags & ContextualFlags.EXPLICIT) != 0,false, expression.expression),\r\n        module.i32(0)\r\n      ], NativeType.I32);\r\n    }\r\n\r\n    // both LHS and RHS are references now\r\n    var nativeSizeType = actualType.toNativeType();\r\n\r\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\r\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\r\n\r\n      // downcast - check statically\r\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\r\n        return module.binary(\r\n          nativeSizeType == NativeType.I64\r\n            ? BinaryOp.NeI64\r\n            : BinaryOp.NeI32,\r\n          expr,\r\n          actualType.toNativeZero(module)\r\n        );\r\n      }\r\n\r\n      // upcast - check dynamically\r\n      if (expectedType.isAssignableTo(actualType)) {\r\n        let program = this.program;\r\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\r\n          let flow = this.currentFlow;\r\n          let tempLocal = flow.getAndFreeTempLocal(actualType);\r\n          let instanceofInstance = assert(program.instanceofInstance);\r\n          this.compileFunction(instanceofInstance);\r\n          return module.if(\r\n            module.unary(\r\n              nativeSizeType == NativeType.I64\r\n                ? UnaryOp.EqzI64\r\n                : UnaryOp.EqzI32,\r\n              module.local_tee(tempLocal.index, expr),\r\n            ),\r\n            module.i32(0),\r\n            this.makeCallDirect(instanceofInstance, [\r\n              module.local_get(tempLocal.index, nativeSizeType),\r\n              module.i32(expectedType.classReference!.id)\r\n            ], expression)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n        }\r\n      }\r\n\r\n    // either none or both nullable\r\n    } else {\r\n\r\n      // downcast - check statically\r\n      if (actualType.isAssignableTo(expectedType)) {\r\n        return module.block(null, [\r\n          this.convertExpression(expr, actualType, Type.void, (contextualFlags & ContextualFlags.EXPLICIT) != 0, false, expression.expression),\r\n          module.i32(1)\r\n        ], NativeType.I32);\r\n\r\n      // upcast - check dynamically\r\n      } else if (expectedType.isAssignableTo(actualType)) {\r\n        let program = this.program;\r\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\r\n          // FIXME: the temp local and the if can be removed here once flows\r\n          // perform null checking, which would error earlier when checking\r\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\r\n          let flow = this.currentFlow;\r\n          let tempLocal = flow.getAndFreeTempLocal(actualType);\r\n          let instanceofInstance = assert(program.instanceofInstance);\r\n          this.compileFunction(instanceofInstance);\r\n          return module.if(\r\n            module.unary(\r\n              nativeSizeType == NativeType.I64\r\n                ? UnaryOp.EqzI64\r\n                : UnaryOp.EqzI32,\r\n              module.local_tee(tempLocal.index, expr),\r\n            ),\r\n            module.i32(0),\r\n            this.makeCallDirect(instanceofInstance, [\r\n              module.local_get(tempLocal.index, nativeSizeType),\r\n              module.i32(expectedType.classReference!.id)\r\n            ], expression)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    // false\r\n    return module.block(null, [\r\n      this.convertExpression(expr, actualType, Type.void, (contextualFlags & ContextualFlags.EXPLICIT) != 0, false, expression.expression),\r\n      module.i32(0)\r\n    ], NativeType.I32);\r\n  }\r\n\r\n  compileLiteralExpression(\r\n    expression: LiteralExpression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags,\r\n    implicitlyNegate: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.ARRAY: {\r\n        assert(!implicitlyNegate);\r\n        let classType = contextualType.classReference;\r\n        if (classType) {\r\n          if (classType.prototype == this.program.arrayPrototype) {\r\n            return this.compileArrayLiteral(\r\n              assert(classType.typeArguments)[0],\r\n              (<ArrayLiteralExpression>expression).elementExpressions,\r\n              false, // TODO: isConst?\r\n              contextualFlags,\r\n              expression\r\n            );\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        let floatValue = (<FloatLiteralExpression>expression).value;\r\n        if (implicitlyNegate) {\r\n          floatValue = -floatValue;\r\n        }\r\n        if (contextualType == Type.f32) {\r\n          return module.f32(<f32>floatValue);\r\n        }\r\n        this.currentType = Type.f64;\r\n        return module.f64(floatValue);\r\n      }\r\n      case LiteralKind.INTEGER: {\r\n        let intValue = (<IntegerLiteralExpression>expression).value;\r\n        if (implicitlyNegate) {\r\n          intValue = i64_sub(\r\n            i64_new(0),\r\n            intValue\r\n          );\r\n        }\r\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\r\n        this.currentType = type;\r\n        switch (type.kind) {\r\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\r\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\r\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\r\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\r\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\r\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\r\n          default: return module.i32(i64_low(intValue));\r\n        }\r\n      }\r\n      case LiteralKind.STRING: {\r\n        assert(!implicitlyNegate);\r\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\r\n      }\r\n      case LiteralKind.OBJECT: {\r\n        assert(!implicitlyNegate);\r\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\r\n      }\r\n      // case LiteralKind.REGEXP:\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    this.currentType = contextualType;\r\n    return module.unreachable();\r\n  }\r\n\r\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\r\n    return this.ensureStaticString(expression.value);\r\n  }\r\n\r\n  compileArrayLiteral(\r\n    elementType: Type,\r\n    expressions: (Expression | null)[],\r\n    isConst: bool,\r\n    contextualFlags: ContextualFlags,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var program = this.program;\r\n    var arrayPrototype = assert(program.arrayPrototype);\r\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\r\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\r\n    var arrayType = arrayInstance.type;\r\n    var flow = this.currentFlow;\r\n\r\n    // block those here so compiling expressions doesn't conflict\r\n    var tempThis = flow.getTempLocal(arrayType);\r\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\r\n\r\n    // compile value expressions and find out whether all are constant\r\n    var length = expressions.length;\r\n    var values = new Array<ExpressionRef>(length);\r\n    var allValuesAreConstant = true;\r\n    var nativeElementType = elementType.toNativeType();\r\n    for (let i = 0; i < length; ++i) {\r\n      let expression = expressions[i];\r\n      let expr = expression\r\n        ? module.precomputeExpression(\r\n            this.compileExpression(<Expression>expression, elementType,\r\n              ContextualFlags.IMPLICIT\r\n            )\r\n          )\r\n        : elementType.toNativeZero(module);\r\n      if (getExpressionId(expr) == ExpressionId.Const) {\r\n        assert(getExpressionType(expr) == nativeElementType);\r\n      } else {\r\n        if (isConst) {\r\n          this.warning(\r\n            DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n            reportNode.range\r\n          );\r\n        }\r\n        allValuesAreConstant = false;\r\n      }\r\n      values[i] = expr;\r\n    }\r\n\r\n    // if the array is static, make a static arraybuffer segment\r\n    if (allValuesAreConstant) {\r\n      flow.freeTempLocal(tempThis);\r\n      flow.freeTempLocal(tempDataStart);\r\n\r\n      let runtimeHeaderSize = program.runtimeHeaderSize;\r\n      let bufferSegment = this.ensureStaticArrayBuffer(elementType, values);\r\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\r\n\r\n      // make both the buffer and array header static if assigned to a global. this can't be done\r\n      // if inside of a function because each invocation must create a new array reference then.\r\n      if (contextualFlags & ContextualFlags.STATIC_CAPABLE) {\r\n        let arraySegment = this.ensureStaticArrayHeader(elementType, bufferSegment);\r\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\r\n        this.currentType = arrayType;\r\n        return program.options.isWasm64\r\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\r\n          : this.module.i32(i64_low(arrayAddress));\r\n\r\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\r\n      } else {\r\n        // makeArray(length, alignLog2, classId, staticBuffer)\r\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\r\n          module.i32(length),\r\n          program.options.isWasm64\r\n            ? module.i64(elementType.alignLog2)\r\n            : module.i32(elementType.alignLog2),\r\n          module.i32(arrayInstance.id),\r\n          program.options.isWasm64\r\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\r\n            : module.i32(i64_low(bufferAddress))\r\n        ], reportNode);\r\n        this.currentType = arrayType;\r\n        return this.makeAutorelease(this.makeRetain(expr));\r\n      }\r\n    }\r\n\r\n    // otherwise compile an explicit instantiation with indexed sets\r\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\r\n    if (!setter) {\r\n      flow.freeTempLocal(tempThis);\r\n      flow.freeTempLocal(tempDataStart);\r\n      this.error(\r\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n        reportNode.range, arrayInstance.internalName\r\n      );\r\n      this.currentType = arrayType;\r\n      return module.unreachable();\r\n    }\r\n    var nativeArrayType = arrayType.toNativeType();\r\n\r\n    var stmts = new Array<ExpressionRef>();\r\n    // tempThis = makeArray(length, alignLog2, classId, source = 0)\r\n    stmts.push(\r\n      module.local_set(tempThis.index,\r\n        this.makeCallDirect(program.allocArrayInstance, [\r\n          module.i32(length),\r\n          program.options.isWasm64\r\n            ? module.i64(elementType.alignLog2)\r\n            : module.i32(elementType.alignLog2),\r\n          module.i32(arrayInstance.id),\r\n          program.options.isWasm64\r\n            ? module.i64(0)\r\n            : module.i32(0)\r\n        ], reportNode),\r\n      )\r\n    );\r\n    // tempData = tempThis.dataStart\r\n    var dataStart = assert(arrayInstance.lookupInSelf(\"dataStart\"));\r\n    assert(dataStart.kind == ElementKind.FIELD);\r\n    stmts.push(\r\n      module.local_set(tempDataStart.index,\r\n        module.load(arrayType.byteSize, false,\r\n          module.local_get(tempThis.index, nativeArrayType),\r\n          nativeArrayType,\r\n          (<Field>dataStart).memoryOffset\r\n        )\r\n      )\r\n    );\r\n    var isManaged = elementType.isManaged;\r\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\r\n      let valueExpr = values[i];\r\n      if (isManaged) {\r\n        // value = __retain(value)\r\n        valueExpr = this.makeRetain(valueExpr);\r\n      }\r\n      // store<T>(tempData, value, immOffset)\r\n      stmts.push(\r\n        module.store(elementType.byteSize,\r\n          module.local_get(tempDataStart.index, nativeArrayType),\r\n          valueExpr,\r\n          nativeElementType,\r\n          i << alignLog2\r\n        )\r\n      );\r\n    }\r\n    // -> tempThis\r\n    stmts.push(\r\n      module.local_get(tempThis.index, nativeArrayType)\r\n    );\r\n    flow.freeTempLocal(tempThis);\r\n    flow.freeTempLocal(tempDataStart);\r\n    this.currentType = arrayType;\r\n    return module.block(null, stmts, nativeArrayType);\r\n  }\r\n\r\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // contextual type must be a class\r\n    var classReference = contextualType.classReference;\r\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        expression.range, \"<object>\", contextualType.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n\r\n    // if present, check that the constructor is compatible with object literals\r\n    var ctor = classReference.constructorInstance;\r\n    if (ctor) {\r\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\r\n      // object literal and use them to call the ctor while not generating a store.\r\n      if (ctor.signature.requiredParameters) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      if (ctor.is(CommonFlags.PRIVATE)) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      if (ctor.is(CommonFlags.PROTECTED)) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n    }\r\n\r\n    // check and compile field values\r\n    var names = expression.names;\r\n    var numNames = names.length;\r\n    var values = expression.values;\r\n    var members = classReference.members;\r\n    var hasErrors = false;\r\n    var exprs = new Array<ExpressionRef>(numNames + 2);\r\n    var flow = this.currentFlow;\r\n    var tempLocal = flow.getAutoreleaseLocal(this.options.usizeType);\r\n    assert(numNames == values.length);\r\n    for (let i = 0, k = numNames; i < k; ++i) {\r\n      let member = members ? members.get(names[i].text) : null;\r\n      if (!member || member.kind != ElementKind.FIELD) {\r\n        this.error(\r\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n          names[i].range, names[i].text, classReference.toString()\r\n        );\r\n        hasErrors = true;\r\n        continue;\r\n      }\r\n      let type = (<Field>member).type;\r\n      exprs[i + 1] = this.module.store( // TODO: handle setters as well\r\n        type.byteSize,\r\n        this.module.local_get(tempLocal.index, this.options.nativeSizeType),\r\n        this.compileExpression(values[i], (<Field>member).type, ContextualFlags.IMPLICIT),\r\n        type.toNativeType(),\r\n        (<Field>member).memoryOffset\r\n      );\r\n    }\r\n    this.currentType = classReference.type.nonNullableType;\r\n    if (hasErrors) return module.unreachable();\r\n\r\n    // allocate a new instance first and assign 'this' to the temp. local\r\n    exprs[0] = module.local_set(\r\n      tempLocal.index,\r\n      this.makeRetain(\r\n        this.makeAllocation(classReference)\r\n      )\r\n    );\r\n\r\n    // once all field values have been set, return 'this'\r\n    exprs[exprs.length - 1] = module.local_get(tempLocal.index, this.options.nativeSizeType);\r\n\r\n    this.currentType = classReference.type;\r\n    return module.block(null, exprs, this.options.nativeSizeType);\r\n  }\r\n\r\n  compileNewExpression(\r\n    expression: NewExpression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // obtain the class being instantiated\r\n    var target = this.resolver.resolveExpression( // reports\r\n      expression.expression,\r\n      flow\r\n    );\r\n    if (!target) return module.unreachable();\r\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\r\n        expression.expression.range\r\n      );\r\n      return this.module.unreachable();\r\n    }\r\n    var classPrototype = <ClassPrototype>target;\r\n    var classInstance: Class | null = null;\r\n    var typeArguments = expression.typeArguments;\r\n    var classReference: Class | null;\r\n    if (\r\n      !typeArguments &&\r\n      (classReference = contextualType.classReference) !== null &&\r\n      classReference.is(CommonFlags.GENERIC)\r\n    ) {\r\n      classInstance = this.resolver.resolveClass(\r\n        classPrototype,\r\n        classReference.typeArguments,\r\n        makeMap<string,Type>(flow.contextualTypeArguments)\r\n      );\r\n    } else {\r\n      classInstance = this.resolver.resolveClassInclTypeArguments(\r\n        classPrototype,\r\n        typeArguments,\r\n        flow.actualFunction.parent, // relative to caller\r\n        makeMap<string,Type>(flow.contextualTypeArguments),\r\n        expression\r\n      );\r\n    }\r\n    if (!classInstance) return module.unreachable();\r\n    if (contextualType == Type.void) contextualFlags |= ContextualFlags.WILL_DROP;\r\n    return this.compileInstantiate(classInstance, expression.arguments, contextualFlags, expression);\r\n  }\r\n\r\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\r\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\r\n    var instance = classInstance.constructorInstance;\r\n    if (instance) {\r\n      // do not attempt to compile it if inlined anyway\r\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\r\n      return instance;\r\n    }\r\n\r\n    // clone base constructor if a derived class\r\n    var baseClass = classInstance.base;\r\n    if (baseClass) {\r\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\r\n      instance = new Function(\r\n        CommonSymbols.constructor,\r\n        new FunctionPrototype(\r\n          CommonSymbols.constructor,\r\n          classInstance,\r\n          // declaration is important, i.e. to access optional parameter initializers\r\n          (<FunctionDeclaration>baseCtor.declaration).clone()\r\n        ),\r\n        baseCtor.signature,\r\n        null\r\n      );\r\n\r\n    // otherwise make a default constructor\r\n    } else {\r\n      instance = new Function(\r\n        CommonSymbols.constructor,\r\n        new FunctionPrototype(\r\n          CommonSymbols.constructor,\r\n          classInstance,\r\n          this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\r\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\r\n          )\r\n        ),\r\n        new Signature(null, classInstance.type, classInstance.type),\r\n        null\r\n      );\r\n    }\r\n\r\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\r\n    instance.set(CommonFlags.COMPILED);\r\n    instance.prototype.setResolvedInstance(\"\", instance);\r\n    classInstance.constructorInstance = instance;\r\n    var previousFlow = this.currentFlow;\r\n    this.currentFlow = instance.flow;\r\n\r\n    // generate body\r\n    var signature = instance.signature;\r\n    var module = this.module;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    var stmts = new Array<ExpressionRef>();\r\n\r\n    // {\r\n    //   if (!this) this = <ALLOC>\r\n    //   IF_DERIVED: this = super(this, ...args)\r\n    //   this.a = X\r\n    //   this.b = Y\r\n    //   return this\r\n    // }\r\n    stmts.push(\r\n      module.if(\r\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n          module.local_get(0, nativeSizeType)\r\n        ),\r\n        module.local_set(0,\r\n          this.makeRetain(\r\n            this.makeAllocation(classInstance)\r\n          )\r\n        )\r\n      )\r\n    );\r\n    if (baseClass) {\r\n      let parameterTypes = signature.parameterTypes;\r\n      let numParameters = parameterTypes.length;\r\n      let operands = new Array<ExpressionRef>(1 + numParameters);\r\n      operands[0] = module.local_get(0, nativeSizeType);\r\n      for (let i = 0; i < numParameters; ++i) {\r\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\r\n      }\r\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\r\n      stmts.push(\r\n        module.local_set(0,\r\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode)\r\n        )\r\n      );\r\n    }\r\n    this.makeFieldInitialization(classInstance, stmts);\r\n    stmts.push(\r\n      module.local_get(0, nativeSizeType)\r\n    );\r\n\r\n    // make the function\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var locals = instance.localsByIndex;\r\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\r\n    var numOperands = 1 + signature.parameterTypes.length;\r\n    var numLocals = locals.length;\r\n    if (numLocals > numOperands) {\r\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\r\n    }\r\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes,\r\n      flatten(module, stmts, nativeSizeType)\r\n    );\r\n    instance.finalize(module, funcRef);\r\n    this.currentFlow = previousFlow;\r\n    return instance;\r\n  }\r\n\r\n  compileInstantiate(\r\n    /** Class to instantiate. */\r\n    classInstance: Class,\r\n    /** Constructor arguments. */\r\n    argumentExpressions: Expression[],\r\n    /** Contextual flags. */\r\n    contextualFlags: ContextualFlags,\r\n    /** Node to report on. */\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var ctor = this.ensureConstructor(classInstance, reportNode);\r\n    var expr = this.compileCallDirect( // no need for another autoreleased local\r\n      ctor,\r\n      argumentExpressions,\r\n      reportNode,\r\n      this.options.usizeType.toNativeZero(this.module),\r\n      false,\r\n      contextualFlags\r\n    );\r\n    if (getExpressionType(expr) != NativeType.None) { // possibly IMM_DROPPED\r\n      this.currentType = classInstance.type; // important because a super ctor could be called\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /**\r\n   * Compiles a property access in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compilePropertyAccessExpression(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    this.maybeCompileEnclosingSource(propertyAccess);\r\n\r\n    var target = this.resolver.resolvePropertyAccessExpression(propertyAccess, flow, contextualType); // reports\r\n    if (!target) return module.unreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: { // static field\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return module.unreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, contextualFlags);\r\n        }\r\n        this.currentType = globalType;\r\n        return module.global_get((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // enum value\r\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\r\n        if (!this.compileEnum(<Enum>theEnum)) {\r\n          this.currentType = Type.i32;\r\n          return this.module.unreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\r\n          return module.i32(i64_low((<EnumValue>target).constantIntegerValue));\r\n        }\r\n        return module.global_get((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FIELD: { // instance field\r\n        assert((<Field>target).memoryOffset >= 0);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          assert(this.resolver.currentThisExpression),\r\n          this.options.usizeType\r\n        );\r\n        this.currentType = (<Field>target).type;\r\n        return module.load(\r\n          (<Field>target).type.byteSize,\r\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n          thisExpr,\r\n          (<Field>target).type.toNativeType(),\r\n          (<Field>target).memoryOffset\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\r\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\r\n        if (getterPrototype) {\r\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\r\n          if (getter) return this.compileCallDirect(getter, [], propertyAccess, 0);\r\n        }\r\n        return module.unreachable();\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let getterInstance = assert((<Property>target).getterInstance);\r\n        return this.compileCallDirect(getterInstance, [], propertyAccess,\r\n          this.compileExpressionRetainType(\r\n            assert(this.resolver.currentThisExpression),\r\n            this.options.usizeType\r\n          )\r\n        );\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.error(\r\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\r\n          propertyAccess.range, (<FunctionPrototype>target).name\r\n        );\r\n        return module.unreachable();\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      propertyAccess.range\r\n    );\r\n    return module.unreachable();\r\n  }\r\n\r\n  compileTernaryExpression(\r\n    expression: TernaryExpression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var ifThen = expression.ifThen;\r\n    var ifElse = expression.ifElse;\r\n    var outerFlow = this.currentFlow;\r\n\r\n    var condExpr = this.module.precomputeExpression(\r\n      this.makeIsTrueish(\r\n        this.compileExpressionRetainType(expression.condition, Type.bool),\r\n        this.currentType\r\n      )\r\n    );\r\n\r\n    // Try to eliminate unnecesssary branches if the condition is constant\r\n    if (\r\n      getExpressionId(condExpr) == ExpressionId.Const &&\r\n      getExpressionType(condExpr) == NativeType.I32\r\n    ) {\r\n      return getConstValueI32(condExpr)\r\n        ? this.compileExpressionRetainType(ifThen, contextualType)\r\n        : this.compileExpressionRetainType(ifElse, contextualType);\r\n    }\r\n\r\n    var ifThenFlow = outerFlow.fork();\r\n    this.currentFlow = ifThenFlow;\r\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, contextualFlags & ContextualFlags.SKIP_AUTORELEASE);\r\n    var ifThenType = this.currentType;\r\n    var IfThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\r\n\r\n    var ifElseFlow = outerFlow.fork();\r\n    this.currentFlow = ifElseFlow;\r\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, contextualFlags & ContextualFlags.SKIP_AUTORELEASE);\r\n    var ifElseType = this.currentType;\r\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\r\n\r\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\r\n    if (!commonType) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\r\n      );\r\n      this.currentType = contextualType;\r\n      return this.module.unreachable();\r\n    }\r\n    ifThenExpr = this.convertExpression(\r\n      ifThenExpr,\r\n      ifThenType, commonType,\r\n      false, false,\r\n      ifThen\r\n    );\r\n    ifElseExpr = this.convertExpression(\r\n      ifElseExpr,\r\n      ifElseType, commonType,\r\n      false, false,\r\n      ifElse\r\n    );\r\n    this.currentType = commonType;\r\n\r\n    if (IfThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\r\n      if (!IfThenAutoreleaseSkipped) {\r\n        ifThenExpr = this.makeRetain(ifThenExpr);\r\n        IfThenAutoreleaseSkipped = true;\r\n      } else {\r\n        ifElseExpr = this.makeRetain(ifElseExpr);\r\n        ifElseAutoreleaseSkipped = true;\r\n      }\r\n    } else if (!IfThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\r\n      // if (!(contextualFlags & ContextualFlags.SKIP_AUTORELEASE)) {\r\n        ifThenExpr = this.moveAutorelease(ifThenExpr, ifThenFlow, outerFlow);\r\n        ifElseExpr = this.moveAutorelease(ifElseExpr, ifElseFlow, outerFlow);\r\n      // }\r\n    }\r\n\r\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\r\n    ifThenFlow.freeScopedLocals();\r\n\r\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\r\n    ifElseFlow.freeScopedLocals();\r\n\r\n    this.currentFlow = outerFlow;\r\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\r\n\r\n    var expr = this.module.if(condExpr, ifThenExpr, ifElseExpr);\r\n    assert(IfThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\r\n    if (IfThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\r\n    return expr;\r\n  }\r\n\r\n  compileUnaryPostfixExpression(\r\n    expression: UnaryPostfixExpression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // make a getter for the expression (also obtains the type)\r\n    var getValue = this.compileExpression( // reports\r\n      expression.operand,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ContextualFlags.NONE\r\n    );\r\n\r\n    // shortcut if compiling the getter already failed\r\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\r\n\r\n    // if the value isn't dropped, a temp. local is required to remember the original value\r\n    var tempLocal: Local | null = null;\r\n    if (contextualType != Type.void) {\r\n      tempLocal = flow.getTempLocal(this.currentType);\r\n      getValue = module.local_tee(\r\n        tempLocal.index,\r\n        getValue\r\n      );\r\n    }\r\n\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS: {\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(\r\n              BinaryOp.AddI32,\r\n              getValue,\r\n              module.i32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classReference = this.currentType.classReference;\r\n              if (classReference) {\r\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\r\n                if (overload) {\r\n                  expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\r\n                  break;\r\n                }\r\n              }\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.unreachable();\r\n            }\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            expr = module.binary(\r\n              options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              getValue,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(\r\n              BinaryOp.AddI64,\r\n              getValue,\r\n              module.i64(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(\r\n              BinaryOp.AddF32,\r\n              getValue,\r\n              module.f32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(\r\n              BinaryOp.AddF64,\r\n              getValue,\r\n              module.f64(1)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(\r\n              BinaryOp.SubI32,\r\n              getValue,\r\n              module.i32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classReference = this.currentType.classReference;\r\n              if (classReference) {\r\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\r\n                if (overload) {\r\n                  expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\r\n                  break;\r\n                }\r\n              }\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.unreachable();\r\n            }\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            expr = module.binary(\r\n              options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              getValue,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(\r\n              BinaryOp.SubI64,\r\n              getValue,\r\n              module.i64(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(\r\n              BinaryOp.SubF32,\r\n              getValue,\r\n              module.f32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(\r\n              BinaryOp.SubF64,\r\n              getValue,\r\n              module.f64(1)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.unreachable();\r\n      }\r\n    }\r\n\r\n    var resolver = this.resolver;\r\n    var target = resolver.resolveExpression(expression.operand, flow); // reports\r\n\r\n    // simplify if dropped anyway\r\n    if (!tempLocal) {\r\n      this.currentType = Type.void;\r\n      if (!target) return module.unreachable();\r\n      return this.makeAssignment(\r\n        target,\r\n        expr,\r\n        expression.operand,\r\n        resolver.currentThisExpression,\r\n        resolver.currentElementExpression,\r\n        false\r\n      );\r\n    } else if (!target) {\r\n      return module.unreachable();\r\n    }\r\n\r\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\r\n    var setValue = this.makeAssignment(\r\n      target,\r\n      expr, // includes a tee of getValue to tempLocal\r\n      expression.operand,\r\n      resolver.currentThisExpression,\r\n      resolver.currentElementExpression,\r\n      false\r\n    );\r\n\r\n    this.currentType = tempLocal.type;\r\n    flow.freeTempLocal(tempLocal);\r\n    var nativeType = tempLocal.type.toNativeType();\r\n\r\n    return module.block(null, [\r\n      setValue,\r\n      module.local_get(tempLocal.index, nativeType)\r\n    ], nativeType); // result of 'x++' / 'x--' might overflow\r\n  }\r\n\r\n  compileUnaryPrefixExpression(\r\n    expression: UnaryPrefixExpression,\r\n    contextualType: Type,\r\n    contextualFlags: ContextualFlags\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var compound = false;\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ContextualFlags.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.unreachable();\r\n        }\r\n\r\n        // nop\r\n        break;\r\n      }\r\n      case Token.MINUS: {\r\n        if (expression.operand.kind == NodeKind.LITERAL && (\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\r\n        )) {\r\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\r\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, ContextualFlags.NONE, true);\r\n          // compileExpression normally does this:\r\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n          break;\r\n        }\r\n\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ContextualFlags.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.unreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              this.currentType.toNativeZero(module),\r\n              expr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.unary(UnaryOp.NegF32, expr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.unary(UnaryOp.NegF64, expr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PLUS_PLUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ContextualFlags.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.unreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ContextualFlags.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.unreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ContextualFlags.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          // allow '!' for references even without an overload\r\n        }\r\n\r\n        expr = this.makeIsFalseish(expr, this.currentType);\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.TILDE: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType.is(TypeFlags.FLOAT)\r\n              ? Type.i64\r\n              : contextualType,\r\n          ContextualFlags.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.unreachable();\r\n        } else {\r\n          expr = this.convertExpression(expr,\r\n            this.currentType, this.currentType.intType,\r\n            false, false,\r\n            expression.operand\r\n          );\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.binary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              expr,\r\n              this.currentType.toNativeNegOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.unreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPEOF: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.unreachable();\r\n      }\r\n    }\r\n    if (!compound) return expr;\r\n    var resolver = this.resolver;\r\n    var target = resolver.resolveExpression(expression.operand, this.currentFlow);\r\n    if (!target) return module.unreachable();\r\n    return this.makeAssignment(\r\n      target,\r\n      expr,\r\n      expression.operand,\r\n      resolver.currentThisExpression,\r\n      resolver.currentElementExpression,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\r\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    switch (type.kind) {\r\n      case TypeKind.I8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\r\n            : module.binary(BinaryOp.ShrI32,\r\n                module.binary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.i32(24)\r\n                ),\r\n                module.i32(24)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.I16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\r\n            : module.binary(BinaryOp.ShrI32,\r\n                module.binary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.i32(16)\r\n                ),\r\n                module.i32(16)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.binary(BinaryOp.AndI32,\r\n            expr,\r\n            module.i32(0xff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.binary(BinaryOp.AndI32,\r\n            expr,\r\n            module.i32(0xffff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.BOOL: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          // bool is special in that it compares to 0 instead of masking with 0x1\r\n          expr = module.binary(BinaryOp.NeI32,\r\n            expr,\r\n            module.i32(0)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\r\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\r\n    var parentFunction = this.currentFlow.parentFunction;\r\n    var source = range.source;\r\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\r\n    range.debugInfoRef = expr;\r\n    parentFunction.debugLocations.push(range);\r\n  }\r\n\r\n  // === Specialized code generation ==============================================================\r\n\r\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\r\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return module.unary(UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.unary(UnaryOp.EqzI64, expr);\r\n      }\r\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\r\n      case TypeKind.ISIZE: {\r\n        return module.unary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.binary(BinaryOp.EqF32, expr, module.f32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.binary(BinaryOp.EqF64, expr, module.f64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.i32(1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\r\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.BOOL: // not a mask, just != 0\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return expr;\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\r\n      }\r\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\r\n      case TypeKind.ISIZE: {\r\n        return type.size == 64\r\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\r\n          : expr;\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.binary(BinaryOp.NeF32, expr, module.f32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.binary(BinaryOp.NeF64, expr, module.f64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.i32(0);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\r\n  makeAllocation(\r\n    classInstance: Class\r\n  ): ExpressionRef {\r\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\r\n    var program = this.program;\r\n    assert(classInstance.program == program);\r\n    var module = this.module;\r\n    var options = this.options;\r\n    this.currentType = classInstance.type;\r\n    var allocInstance = program.allocInstance;\r\n    this.compileFunction(allocInstance);\r\n    return module.call(allocInstance.internalName, [\r\n      options.isWasm64\r\n        ? module.i64(classInstance.currentMemoryOffset)\r\n        : module.i32(classInstance.currentMemoryOffset),\r\n      module.i32(\r\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\r\n          ? 0\r\n          : classInstance.id\r\n      )\r\n    ], options.nativeSizeType);\r\n  }\r\n\r\n  /** Makes the initializers for a class's fields. */\r\n  makeFieldInitialization(\r\n    classInstance: Class,\r\n    stmts: ExpressionRef[] = []\r\n  ): ExpressionRef[] {\r\n    var members = classInstance.members;\r\n    if (!members) return [];\r\n\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\r\n    var thisLocalIndex = isInline\r\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\r\n      : 0;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n\r\n    for (let member of members.values()) {\r\n      if (\r\n        member.kind != ElementKind.FIELD || // not a field\r\n        member.parent != classInstance      // inherited field\r\n      ) continue;\r\n\r\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\r\n      let fieldType = field.type;\r\n      let nativeFieldType = fieldType.toNativeType();\r\n      let initializerNode = field.prototype.initializerNode;\r\n      if (initializerNode) { // use initializer\r\n        stmts.push(\r\n          module.store(fieldType.byteSize,\r\n            module.local_get(thisLocalIndex, nativeSizeType),\r\n            this.compileExpression(initializerNode, fieldType, // reports\r\n              ContextualFlags.IMPLICIT\r\n            ),\r\n            nativeFieldType,\r\n            field.memoryOffset\r\n          )\r\n        );\r\n      } else {\r\n        let parameterIndex = field.prototype.parameterIndex;\r\n        stmts.push(\r\n          module.store(fieldType.byteSize,\r\n            module.local_get(thisLocalIndex, nativeSizeType),\r\n            parameterIndex >= 0 // initialized via parameter (here: a local)\r\n              ? module.local_get(\r\n                  isInline\r\n                    ? assert(flow.lookupLocal(field.name)).index\r\n                    : 1 + parameterIndex, // this is local 0\r\n                  nativeFieldType\r\n                )\r\n              : fieldType.toNativeZero(module),\r\n            nativeFieldType,\r\n            field.memoryOffset\r\n          )\r\n        );\r\n      }\r\n    }\r\n    return stmts;\r\n  }\r\n\r\n  makeInstanceOfClass(\r\n    expr: ExpressionRef,\r\n    classInstance: Class\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var idTemp = flow.getTempLocal(Type.i32);\r\n    var idExpr = module.load(4, false,\r\n      module.binary(BinaryOp.SubI32,\r\n        expr,\r\n        module.i32(this.program.runtimeHeaderSize)\r\n      ),\r\n      NativeType.I32\r\n    );\r\n    var label = \"instanceof_\" + classInstance.name + \"|\" + flow.pushBreakLabel();\r\n    var conditions: ExpressionRef[] = [];\r\n    conditions.push(\r\n      module.drop( // br_if returns the value too\r\n        module.br(label,\r\n          module.binary(BinaryOp.EqI32, // classId == class.id\r\n            module.local_tee(idTemp.index, idExpr),\r\n            module.i32(classInstance.id)\r\n          ),\r\n          module.i32(1) // ? true\r\n        )\r\n      )\r\n    );\r\n    // TODO: insert conditions for all possible subclasses (i.e. cat is also animal)\r\n    // TODO: simplify if there are none\r\n    conditions.push(\r\n      module.i32(0) // : false\r\n    );\r\n    flow.freeTempLocal(idTemp);\r\n    flow.popBreakLabel();\r\n    return module.block(label, conditions, NativeType.I32);\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\nfunction mangleImportName(\r\n  element: Element,\r\n  declaration: DeclarationStatement\r\n): void {\r\n  // by default, use the file name as the module name\r\n  mangleImportName_moduleName = declaration.range.source.simplePath;\r\n  // and the internal name of the element within that file as the element name\r\n  mangleImportName_elementName = mangleInternalName(\r\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\r\n  );\r\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\r\n\r\n  var program = element.program;\r\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\r\n  var args = decorator.arguments;\r\n  if (args && args.length) {\r\n    let arg = args[0];\r\n    // if one argument is given, override just the element name\r\n    // if two arguments are given, override both module and element name\r\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\r\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\r\n      if (args.length >= 2) {\r\n        arg = args[1];\r\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\r\n          mangleImportName_moduleName = mangleImportName_elementName;\r\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\r\n          if (args.length > 2) {\r\n            program.error(\r\n              DiagnosticCode.Expected_0_arguments_but_got_1,\r\n              decorator.range, \"2\", args.length.toString()\r\n            );\r\n          }\r\n        } else {\r\n          program.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            arg.range\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      program.error(\r\n        DiagnosticCode.String_literal_expected,\r\n        arg.range\r\n      );\r\n    }\r\n  } else {\r\n    program.error(\r\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n      decorator.range, \"1\", \"0\"\r\n    );\r\n  }\r\n}\r\n\r\nvar mangleImportName_moduleName: string;\r\nvar mangleImportName_elementName: string;\r\n\r\n/** Flattens a series of expressions to a nop, a single statement or a block depending on statement count. */\r\nexport function flatten(module: Module, stmts: ExpressionRef[], type: NativeType): ExpressionRef {\r\n  var length = stmts.length;\r\n  if (length == 0) return module.nop(); // usually filtered out again\r\n  if (length == 1) return stmts[0];\r\n  return module.block(null, stmts,\r\n    type == NativeType.Auto\r\n      ? getExpressionType(stmts[length - 1])\r\n      : type\r\n  );\r\n}\r\n","/**\r\n * Generated from diagnosticsMessages.json. Do not edit.\r\n * @module diagnostics\r\n *//***/\r\n\r\n/* tslint:disable:max-line-length */\r\n\r\n/** Enum of available diagnostic codes. */\r\nexport enum DiagnosticCode {\r\n  Operation_not_supported = 100,\r\n  Operation_is_unsafe = 101,\r\n  User_defined_0 = 102,\r\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\r\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\r\n  Type_0_cannot_be_changed_to_type_1 = 202,\r\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\r\n  Basic_type_0_cannot_be_nullable = 204,\r\n  Cannot_export_a_mutable_global = 205,\r\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\r\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\r\n  Unmanaged_classes_cannot_implement_interfaces = 208,\r\n  Invalid_regular_expression_flags = 209,\r\n  Implementation_0_must_match_the_signature_1 = 210,\r\n  Class_0_is_sealed_and_cannot_be_extended = 211,\r\n  Decorator_0_is_not_valid_here = 212,\r\n  Duplicate_decorator = 213,\r\n  An_allocator_must_be_present_to_use_0 = 214,\r\n  Optional_parameter_must_have_an_initializer = 215,\r\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\r\n  Function_0_cannot_be_inlined_into_itself = 217,\r\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\r\n  Optional_properties_are_not_supported = 219,\r\n  Expression_must_be_a_compile_time_constant = 220,\r\n  Module_cannot_have_multiple_start_functions = 221,\r\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\r\n  _0_must_be_a_power_of_two = 223,\r\n  TODO_Cannot_inline_inferred_calls_and_specific_internals_yet = 224,\r\n  Expression_is_never_null = 225,\r\n  Unterminated_string_literal = 1002,\r\n  Identifier_expected = 1003,\r\n  _0_expected = 1005,\r\n  A_file_cannot_have_a_reference_to_itself = 1006,\r\n  Trailing_comma_not_allowed = 1009,\r\n  Unexpected_token = 1012,\r\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\r\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\r\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\r\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\r\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\r\n  _0_modifier_cannot_be_used_here = 1042,\r\n  A_rest_parameter_cannot_be_optional = 1047,\r\n  A_rest_parameter_cannot_have_an_initializer = 1048,\r\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\r\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\r\n  A_get_accessor_cannot_have_parameters = 1054,\r\n  Enum_member_must_have_initializer = 1061,\r\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\r\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\r\n  An_accessor_cannot_have_type_parameters = 1094,\r\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\r\n  Type_parameter_list_cannot_be_empty = 1098,\r\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\r\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\r\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\r\n  Expression_expected = 1109,\r\n  Type_expected = 1110,\r\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\r\n  Duplicate_label_0 = 1114,\r\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\r\n  Digit_expected = 1124,\r\n  Hexadecimal_digit_expected = 1125,\r\n  Unexpected_end_of_text = 1126,\r\n  Invalid_character = 1127,\r\n  _case_or_default_expected = 1130,\r\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\r\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\r\n  Type_argument_expected = 1140,\r\n  String_literal_expected = 1141,\r\n  Line_break_not_permitted_here = 1142,\r\n  Declaration_expected = 1146,\r\n  _const_declarations_must_be_initialized = 1155,\r\n  Unterminated_regular_expression_literal = 1161,\r\n  Interface_declaration_cannot_have_implements_clause = 1176,\r\n  Binary_digit_expected = 1177,\r\n  Octal_digit_expected = 1178,\r\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\r\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\r\n  Unterminated_Unicode_escape_sequence = 1199,\r\n  Decorators_are_not_valid_here = 1206,\r\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\r\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\r\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\r\n  A_class_may_only_extend_another_class = 1311,\r\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\r\n  Duplicate_identifier_0 = 2300,\r\n  Cannot_find_name_0 = 2304,\r\n  Module_0_has_no_exported_member_1 = 2305,\r\n  Generic_type_0_requires_1_type_argument_s = 2314,\r\n  Type_0_is_not_generic = 2315,\r\n  Type_0_is_not_assignable_to_type_1 = 2322,\r\n  Index_signature_is_missing_in_type_0 = 2329,\r\n  _this_cannot_be_referenced_in_current_location = 2332,\r\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\r\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\r\n  Property_0_does_not_exist_on_type_1 = 2339,\r\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\r\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\r\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\r\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\r\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\r\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\r\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\r\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\r\n  _get_and_set_accessor_must_have_the_same_type = 2380,\r\n  Constructor_implementation_is_missing = 2390,\r\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\r\n  Multiple_constructor_implementations_are_not_allowed = 2392,\r\n  Duplicate_function_implementation = 2393,\r\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\r\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\r\n  Type_0_has_no_property_1 = 2460,\r\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\r\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\r\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\r\n  Object_is_possibly_null = 2531,\r\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\r\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\r\n  Index_signature_in_type_0_only_permits_reading = 2542,\r\n  Expected_0_arguments_but_got_1 = 2554,\r\n  Expected_at_least_0_arguments_but_got_1 = 2555,\r\n  Expected_0_type_arguments_but_got_1 = 2558,\r\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\r\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\r\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\r\n  Namespace_0_has_no_exported_member_1 = 2694,\r\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\r\n  Duplicate_property_0 = 2718,\r\n  File_0_not_found = 6054,\r\n  Numeric_separators_are_not_allowed_here = 6188,\r\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\r\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\r\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\r\n}\r\n\r\n/** Translates a diagnostic code to its respective string. */\r\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\r\n  switch (code) {\r\n    case 100: return \"Operation not supported.\";\r\n    case 101: return \"Operation is unsafe.\";\r\n    case 102: return \"User-defined: {0}\";\r\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\r\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\r\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\r\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\r\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\r\n    case 205: return \"Cannot export a mutable global.\";\r\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\r\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\r\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\r\n    case 209: return \"Invalid regular expression flags.\";\r\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\r\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\r\n    case 212: return \"Decorator '{0}' is not valid here.\";\r\n    case 213: return \"Duplicate decorator.\";\r\n    case 214: return \"An allocator must be present to use '{0}'.\";\r\n    case 215: return \"Optional parameter must have an initializer.\";\r\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\r\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\r\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\r\n    case 219: return \"Optional properties are not supported.\";\r\n    case 220: return \"Expression must be a compile-time constant.\";\r\n    case 221: return \"Module cannot have multiple start functions.\";\r\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\r\n    case 223: return \"'{0}' must be a power of two.\";\r\n    case 224: return \"TODO: Cannot inline inferred calls and specific internals yet.\";\r\n    case 225: return \"Expression is never 'null'.\";\r\n    case 1002: return \"Unterminated string literal.\";\r\n    case 1003: return \"Identifier expected.\";\r\n    case 1005: return \"'{0}' expected.\";\r\n    case 1006: return \"A file cannot have a reference to itself.\";\r\n    case 1009: return \"Trailing comma not allowed.\";\r\n    case 1012: return \"Unexpected token.\";\r\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\r\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\r\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\r\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\r\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\r\n    case 1042: return \"'{0}' modifier cannot be used here.\";\r\n    case 1047: return \"A rest parameter cannot be optional.\";\r\n    case 1048: return \"A rest parameter cannot have an initializer.\";\r\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\r\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\r\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\r\n    case 1061: return \"Enum member must have initializer.\";\r\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\r\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\r\n    case 1094: return \"An accessor cannot have type parameters.\";\r\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\r\n    case 1098: return \"Type parameter list cannot be empty.\";\r\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\r\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\r\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\r\n    case 1109: return \"Expression expected.\";\r\n    case 1110: return \"Type expected.\";\r\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\r\n    case 1114: return \"Duplicate label '{0}'.\";\r\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\r\n    case 1124: return \"Digit expected.\";\r\n    case 1125: return \"Hexadecimal digit expected.\";\r\n    case 1126: return \"Unexpected end of text.\";\r\n    case 1127: return \"Invalid character.\";\r\n    case 1130: return \"'case' or 'default' expected.\";\r\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\r\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\r\n    case 1140: return \"Type argument expected.\";\r\n    case 1141: return \"String literal expected.\";\r\n    case 1142: return \"Line break not permitted here.\";\r\n    case 1146: return \"Declaration expected.\";\r\n    case 1155: return \"'const' declarations must be initialized.\";\r\n    case 1161: return \"Unterminated regular expression literal.\";\r\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\r\n    case 1177: return \"Binary digit expected.\";\r\n    case 1178: return \"Octal digit expected.\";\r\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\r\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\r\n    case 1199: return \"Unterminated Unicode escape sequence.\";\r\n    case 1206: return \"Decorators are not valid here.\";\r\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\r\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\r\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\r\n    case 1311: return \"A class may only extend another class.\";\r\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\r\n    case 2300: return \"Duplicate identifier '{0}'.\";\r\n    case 2304: return \"Cannot find name '{0}'.\";\r\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\r\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\r\n    case 2315: return \"Type '{0}' is not generic.\";\r\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\r\n    case 2329: return \"Index signature is missing in type '{0}'.\";\r\n    case 2332: return \"'this' cannot be referenced in current location.\";\r\n    case 2335: return \"'super' can only be referenced in a derived class.\";\r\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\r\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\r\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\r\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\r\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\r\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\r\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\r\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\r\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\r\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\r\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\r\n    case 2390: return \"Constructor implementation is missing.\";\r\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\r\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\r\n    case 2393: return \"Duplicate function implementation.\";\r\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\r\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\r\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\r\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\r\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\r\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\r\n    case 2531: return \"Object is possibly 'null'.\";\r\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\r\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\r\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\r\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\r\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\r\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\r\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\r\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\r\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\r\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\r\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\r\n    case 2718: return \"Duplicate property '{0}'.\";\r\n    case 6054: return \"File '{0}' not found.\";\r\n    case 6188: return \"Numeric separators are not allowed here.\";\r\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\r\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\r\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\r\n    default: return \"\";\r\n  }\r\n}\r\n","/**\r\n * Built-in elements providing WebAssembly core functionality.\r\n * @module builtins\r\n *//***/\r\n\r\n import {\r\n  Compiler,\r\n  ContextualFlags,\r\n  RuntimeFeatures,\r\n  flatten\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Expression,\r\n  LiteralKind,\r\n  LiteralExpression,\r\n  StringLiteralExpression,\r\n  CallExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature\r\n} from \"./types\";\r\n\r\nimport {\r\n  BinaryOp,\r\n  UnaryOp,\r\n  HostOp,\r\n  AtomicRMWOp,\r\n  SIMDExtractOp,\r\n  SIMDReplaceOp,\r\n  SIMDShiftOp,\r\n  NativeType,\r\n  ExpressionRef,\r\n  ExpressionId,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI64High,\r\n  getConstValueI64Low,\r\n  getConstValueI32,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  Relooper,\r\n  RelooperBlockRef\r\n} from \"./module\";\r\n\r\nimport {\r\n  ElementKind,\r\n  FunctionPrototype,\r\n  Field,\r\n  Global,\r\n  DecoratorFlags,\r\n  Element\r\n} from \"./program\";\r\n\r\nimport {\r\n  FlowFlags,\r\n  LocalFlags\r\n} from \"./flow\";\r\n\r\nimport {\r\n  ReportMode\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  Feature,\r\n  TypeinfoFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  writeI8,\r\n  writeI16,\r\n  writeI32,\r\n  writeF32,\r\n  writeF64,\r\n  isPowerOf2\r\n} from \"./util\";\r\n\r\n/** Symbols of various compiler built-ins. */\r\nexport namespace BuiltinSymbols {\r\n  // std/builtins.ts\r\n  export const isInteger = \"~lib/builtins/isInteger\";\r\n  export const isFloat = \"~lib/builtins/isFloat\";\r\n  export const isBoolean = \"~lib/builtins/isBoolean\";\r\n  export const isSigned = \"~lib/builtins/isSigned\";\r\n  export const isReference = \"~lib/builtins/isReference\";\r\n  export const isString = \"~lib/builtins/isString\";\r\n  export const isArray = \"~lib/builtins/isArray\";\r\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\r\n  export const isFunction = \"~lib/builtins/isFunction\";\r\n  export const isNullable = \"~lib/builtins/isNullable\";\r\n  export const isDefined = \"~lib/builtins/isDefined\";\r\n  export const isConstant = \"~lib/builtins/isConstant\";\r\n  export const isManaged = \"~lib/builtins/isManaged\";\r\n\r\n  export const clz = \"~lib/builtins/clz\";\r\n  export const ctz = \"~lib/builtins/ctz\";\r\n  export const popcnt = \"~lib/builtins/popcnt\";\r\n  export const rotl = \"~lib/builtins/rotl\";\r\n  export const rotr = \"~lib/builtins/rotr\";\r\n  export const abs = \"~lib/builtins/abs\";\r\n  export const max = \"~lib/builtins/max\";\r\n  export const min = \"~lib/builtins/min\";\r\n  export const ceil = \"~lib/builtins/ceil\";\r\n  export const floor = \"~lib/builtins/floor\";\r\n  export const copysign = \"~lib/builtins/copysign\";\r\n  export const nearest = \"~lib/builtins/nearest\";\r\n  export const reinterpret = \"~lib/builtins/reinterpret\";\r\n  export const sqrt = \"~lib/builtins/sqrt\";\r\n  export const trunc = \"~lib/builtins/trunc\";\r\n  export const load = \"~lib/builtins/load\";\r\n  export const store = \"~lib/builtins/store\";\r\n  export const atomic_load = \"~lib/builtins/atomic.load\";\r\n  export const atomic_store = \"~lib/builtins/atomic.store\";\r\n  export const atomic_add = \"~lib/builtins/atomic.add\";\r\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\r\n  export const atomic_and = \"~lib/builtins/atomic.and\";\r\n  export const atomic_or = \"~lib/builtins/atomic.or\";\r\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\r\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\r\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\r\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\r\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\r\n\r\n  export const sizeof = \"~lib/builtins/sizeof\";\r\n  export const alignof = \"~lib/builtins/alignof\";\r\n  export const offsetof = \"~lib/builtins/offsetof\";\r\n  export const select = \"~lib/builtins/select\";\r\n  export const unreachable = \"~lib/builtins/unreachable\";\r\n  export const changetype = \"~lib/builtins/changetype\";\r\n  export const assert = \"~lib/builtins/assert\";\r\n  export const unchecked = \"~lib/builtins/unchecked\";\r\n  export const call_direct = \"~lib/builtins/call_direct\";\r\n  export const call_indirect = \"~lib/builtins/call_indirect\";\r\n  export const instantiate = \"~lib/builtins/instantiate\";\r\n  export const idof = \"~lib/builtins/idof\";\r\n\r\n  export const i8 = \"~lib/builtins/i8\";\r\n  export const i16 = \"~lib/builtins/i16\";\r\n  export const i32 = \"~lib/builtins/i32\";\r\n  export const i64 = \"~lib/builtins/i64\";\r\n  export const isize = \"~lib/builtins/isize\";\r\n  export const u8 = \"~lib/builtins/u8\";\r\n  export const u16 = \"~lib/builtins/u16\";\r\n  export const u32 = \"~lib/builtins/u32\";\r\n  export const u64 = \"~lib/builtins/u64\";\r\n  export const usize = \"~lib/builtins/usize\";\r\n  export const bool = \"~lib/builtins/bool\";\r\n  export const f32 = \"~lib/builtins/f32\";\r\n  export const f64 = \"~lib/builtins/f64\";\r\n  export const v128 = \"~lib/builtins/v128\";\r\n  export const void_ = \"~lib/builtins/void\";\r\n\r\n  export const i32_clz = \"~lib/builtins/i32.clz\";\r\n  export const i64_clz = \"~lib/builtins/i64.clz\";\r\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\r\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\r\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\r\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\r\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\r\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\r\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\r\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\r\n\r\n  export const f32_abs = \"~lib/builtins/f32.abs\";\r\n  export const f64_abs = \"~lib/builtins/f64.abs\";\r\n  export const f32_max = \"~lib/builtins/f32.max\";\r\n  export const f64_max = \"~lib/builtins/f64.max\";\r\n  export const f32_min = \"~lib/builtins/f32.min\";\r\n  export const f64_min = \"~lib/builtins/f64.min\";\r\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\r\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\r\n  export const f32_floor = \"~lib/builtins/f32.floor\";\r\n  export const f64_floor = \"~lib/builtins/f64.floor\";\r\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\r\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\r\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\r\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\r\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\r\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\r\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\r\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\r\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\r\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\r\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\r\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\r\n\r\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\r\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\r\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\r\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\r\n  export const i32_load = \"~lib/builtins/i32.load\";\r\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\r\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\r\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\r\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\r\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\r\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\r\n  export const i64_load = \"~lib/builtins/i64.load\";\r\n  export const f32_load = \"~lib/builtins/f32.load\";\r\n  export const f64_load = \"~lib/builtins/f64.load\";\r\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\r\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\r\n  export const i32_store = \"~lib/builtins/i32.store\";\r\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\r\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\r\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\r\n  export const i64_store = \"~lib/builtins/i64.store\";\r\n  export const f32_store = \"~lib/builtins/f32.store\";\r\n  export const f64_store = \"~lib/builtins/f64.store\";\r\n\r\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\r\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\r\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\r\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\r\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\r\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\r\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\r\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\r\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\r\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\r\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\r\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\r\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\r\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\r\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\r\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\r\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\r\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\r\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\r\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\r\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\r\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\r\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\r\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\r\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\r\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\r\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\r\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\r\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\r\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\r\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\r\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\r\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\r\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\r\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\r\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\r\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\r\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\r\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\r\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\r\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\r\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\r\n  export const i32_atomic_rmw8_u_xor = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\r\n  export const i32_atomic_rmw16_u_xor = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\r\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\r\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\r\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\r\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\r\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\r\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\r\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\r\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\r\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\r\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\r\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\r\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\r\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\r\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\r\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\r\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\r\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\r\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\r\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\r\n  export const i32_wait = \"~lib/builtins/i32.wait\";\r\n  export const i64_wait = \"~lib/builtins/i64.wait\";\r\n\r\n  export const v128_splat = \"~lib/builtins/v128.splat\";\r\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\r\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\r\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\r\n  export const v128_load = \"~lib/builtins/v128.load\";\r\n  export const v128_store = \"~lib/builtins/v128.store\";\r\n  export const v128_add = \"~lib/builtins/v128.add\";\r\n  export const v128_sub = \"~lib/builtins/v128.sub\";\r\n  export const v128_mul = \"~lib/builtins/v128.mul\";\r\n  export const v128_div = \"~lib/builtins/v128.div\";\r\n  export const v128_neg = \"~lib/builtins/v128.neg\";\r\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\r\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\r\n  export const v128_shl = \"~lib/builtins/v128.shl\";\r\n  export const v128_shr = \"~lib/builtins/v128.shr\";\r\n  export const v128_and = \"~lib/builtins/v128.and\";\r\n  export const v128_or = \"~lib/builtins/v128.or\";\r\n  export const v128_xor = \"~lib/builtins/v128.xor\";\r\n  export const v128_not = \"~lib/builtins/v128.not\";\r\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\r\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\r\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\r\n  export const v128_min = \"~lib/builtins/v128.min\";\r\n  export const v128_max = \"~lib/builtins/v128.max\";\r\n  export const v128_abs = \"~lib/builtins/v128.abs\";\r\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\r\n  export const v128_eq = \"~lib/builtins/v128.eq\";\r\n  export const v128_ne = \"~lib/builtins/v128.ne\";\r\n  export const v128_lt = \"~lib/builtins/v128.lt\";\r\n  export const v128_le = \"~lib/builtins/v128.le\";\r\n  export const v128_gt = \"~lib/builtins/v128.gt\";\r\n  export const v128_ge = \"~lib/builtins/v128.ge\";\r\n  export const v128_convert = \"~lib/builtins/v128.convert\";\r\n  export const v128_trunc = \"~lib/builtins/v128.trunc\";\r\n\r\n  export const i8x16 = \"~lib/builtins/i8x16\";\r\n  export const i16x8 = \"~lib/builtins/i16x8\";\r\n  export const i32x4 = \"~lib/builtins/i32x4\";\r\n  export const i64x2 = \"~lib/builtins/i64x2\";\r\n  export const f32x4 = \"~lib/builtins/f32x4\";\r\n  export const f64x2 = \"~lib/builtins/f64x2\";\r\n\r\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\r\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\r\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\r\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\r\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\r\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\r\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\r\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\r\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\r\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\r\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\r\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\r\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\r\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\r\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\r\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\r\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\r\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\r\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\r\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\r\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\r\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\r\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\r\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\r\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\r\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\r\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\r\n\r\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\r\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\r\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\r\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\r\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\r\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\r\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\r\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\r\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\r\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\r\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\r\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\r\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\r\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\r\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\r\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\r\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\r\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\r\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\r\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\r\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\r\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\r\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\r\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\r\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\r\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\r\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\r\n\r\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\r\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\r\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\r\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\r\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\r\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\r\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\r\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\r\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\r\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\r\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\r\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\r\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\r\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\r\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\r\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\r\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\r\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\r\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\r\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\r\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\r\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\r\n  export const i32x4_trunc_s_f32x4_sat = \"~lib/builtins/i32x4.trunc_s_f32x4_sat\";\r\n  export const i32x4_trunc_u_f32x4_sat = \"~lib/builtins/i32x4.trunc_u_f32x4_sat\";\r\n\r\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\r\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\r\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\r\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\r\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\r\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\r\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\r\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\r\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\r\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\r\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\r\n  export const i64x2_trunc_s_f64x2_sat = \"~lib/builtins/i64x2.trunc_s_f64x2_sat\";\r\n  export const i64x2_trunc_u_f64x2_sat = \"~lib/builtins/i64x2.trunc_u_f64x2_sat\";\r\n\r\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\r\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\r\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\r\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\r\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\r\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\r\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\r\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\r\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\r\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\r\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\r\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\r\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\r\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\r\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\r\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\r\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\r\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\r\n  export const f32x4_convert_s_i32x4 = \"~lib/builtins/f32x4.convert_s_i32x4\";\r\n  export const f32x4_convert_u_i32x4 = \"~lib/builtins/f32x4.convert_u_i32x4\";\r\n\r\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\r\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\r\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\r\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\r\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\r\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\r\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\r\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\r\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\r\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\r\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\r\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\r\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\r\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\r\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\r\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\r\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\r\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\r\n  export const f64x2_convert_s_i64x2 = \"~lib/builtins/f64x2.convert_s_i64x2\";\r\n  export const f64x2_convert_u_i64x2 = \"~lib/builtins/f64x2.convert_u_i64x2\";\r\n\r\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\r\n\r\n  // internals\r\n  export const HEAP_BASE = \"~lib/heap/HEAP_BASE\";\r\n  export const RTTI_BASE = \"~lib/rt/RTTI_BASE\";\r\n  export const visit_globals = \"~lib/rt/__visit_globals\";\r\n  export const visit_members = \"~lib/rt/__visit_members\";\r\n\r\n  // std/diagnostics.ts\r\n  export const ERROR = \"~lib/diagnostics/ERROR\";\r\n  export const WARNING = \"~lib/diagnostics/WARNING\";\r\n  export const INFO = \"~lib/diagnostics/INFO\";\r\n\r\n  // std/memory.ts\r\n  export const memory_size = \"~lib/memory/memory.size\";\r\n  export const memory_grow = \"~lib/memory/memory.grow\";\r\n  export const memory_copy = \"~lib/memory/memory.copy\";\r\n  export const memory_fill = \"~lib/memory/memory.fill\";\r\n  export const memory_allocate = \"~lib/memory/memory.allocate\";\r\n  export const memory_free = \"~lib/memory/memory.free\";\r\n  export const memory_reset = \"~lib/memory/memory.reset\";\r\n\r\n  // std/runtime.ts\r\n  export const runtime_instanceof = \"~lib/runtime/runtime.instanceof\";\r\n  export const runtime_flags = \"~lib/runtime/runtime.flags\";\r\n  export const runtime_allocate = \"~lib/util/runtime/allocate\";\r\n  export const runtime_reallocate = \"~lib/util/runtime/reallocate\";\r\n  export const runtime_register = \"~lib/util/runtime/register\";\r\n  export const runtime_discard = \"~lib/util/runtime/discard\";\r\n  export const runtime_makeArray = \"~lib/util/runtime/makeArray\";\r\n\r\n  // std/typedarray.ts\r\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\r\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\r\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\r\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\r\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\r\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\r\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\r\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\r\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\r\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\r\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\r\n\r\n  // compiler generated\r\n  export const started = \"~lib/started\";\r\n  export const argc = \"~lib/argc\";\r\n  export const setargc = \"~lib/setargc\";\r\n  export const capabilities = \"~lib/capabilities\";\r\n}\r\n\r\n/** Compiles a call to a built-in function. */\r\nexport function compileCall(\r\n  /* Compiler reference. */\r\n  compiler: Compiler,\r\n  /** Respective function prototype. */\r\n  prototype: FunctionPrototype,\r\n  /** Pre-resolved type arguments. */\r\n  typeArguments: Type[] | null,\r\n  /** Operand expressions. */\r\n  operands: Expression[],\r\n  /** Contextual type. */\r\n  contextualType: Type,\r\n  /** Respective call expression. */\r\n  reportNode: CallExpression,\r\n  /** Indicates that contextual type is ASM type. */\r\n  isAsm: bool = false\r\n): ExpressionRef {\r\n  var module = compiler.module;\r\n\r\n  // NOTE that some implementations below make use of the select expression where straight-forward.\r\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\r\n  // search: createSelect\r\n\r\n  // NOTE that consolidation of individual instructions into a single case isn't exactly scientific\r\n  // below, but rather done to make this file easier to work with. If there was a general rule it'd\r\n  // most likely be \"three or more instructions that only differ in their actual opcode\".\r\n\r\n  var directize = false;\r\n\r\n  switch (prototype.internalName) {\r\n\r\n    // === Static type evaluation =================================================================\r\n\r\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\r\n        ? module.i32(1)\r\n        : module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return type.is(TypeFlags.FLOAT)\r\n        ? module.i32(1)\r\n        : module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isBoolean: { // isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return type == Type.bool\r\n        ? module.i32(1)\r\n        : module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return type.is(TypeFlags.SIGNED)\r\n        ? module.i32(1)\r\n        : module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return type.is(TypeFlags.REFERENCE)\r\n        ? module.i32(1)\r\n        : module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      let classType = type.classReference;\r\n      if (classType) {\r\n        let stringInstance = compiler.program.stringInstance;\r\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.i32(1);\r\n      }\r\n      return module.i32(0);\r\n    }\r\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      let classReference = type.classReference;\r\n      if (!classReference) return module.i32(0);\r\n      let classPrototype = classReference.prototype;\r\n      return module.i32(classPrototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      let classReference = type.classReference;\r\n      if (!classReference) return module.i32(0);\r\n      return module.i32(classReference.isArrayLike ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return module.i32(type.signatureReference ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let element = compiler.resolver.resolveExpression(\r\n        operands[0],\r\n        compiler.currentFlow,\r\n        Type.void,\r\n        ReportMode.SWALLOW\r\n      );\r\n      return module.i32(element ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.i32);\r\n      compiler.currentType = Type.bool;\r\n      return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isManaged: { // isManaged<T>() -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.unreachable();\r\n      return module.i32(type.isManaged ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 0, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      let expr: ExpressionRef;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          expr = module.i32(byteSize);\r\n        } else {\r\n          expr = module.i64(byteSize, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          expr = module.i64(byteSize, 0);\r\n        } else {\r\n          expr = module.i32(byteSize);\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 0, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      assert(isPowerOf2(byteSize));\r\n      let alignLog2 = ctz<i32>(byteSize);\r\n      let expr: ExpressionRef;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          expr = module.i32(alignLog2);\r\n        } else {\r\n          expr = module.i64(alignLog2, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          expr = module.i64(alignLog2, 0);\r\n        } else {\r\n          expr = module.i32(alignLog2);\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let classType = typeArguments![0].classReference;\r\n      if (!classType) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let offset: i32;\r\n      if (operands.length) {\r\n        if (\r\n          operands[0].kind != NodeKind.LITERAL ||\r\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\r\n        ) {\r\n          compiler.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            operands[0].range\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\r\n        let field = classType.members ? classType.members.get(fieldName) : null;\r\n        if (!(field && field.kind == ElementKind.FIELD)) {\r\n          compiler.error(\r\n            DiagnosticCode.Type_0_has_no_property_1,\r\n            operands[0].range, classType.internalName, fieldName\r\n          );\r\n          return module.unreachable();\r\n        }\r\n        offset = (<Field>field).memoryOffset;\r\n      } else {\r\n        offset = classType.currentMemoryOffset;\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          return module.i32(offset);\r\n        } else {\r\n          return module.i64(offset);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          return module.i64(offset);\r\n        } else {\r\n          return module.i32(offset);\r\n        }\r\n      }\r\n    }\r\n\r\n    // === Math ===================================================================================\r\n\r\n    case BuiltinSymbols.clz: // any_bitcount<T?>(value: T) -> T\r\n    case BuiltinSymbols.ctz:\r\n    case BuiltinSymbols.popcnt: {\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT | ContextualFlags.WRAP)\r\n        : compiler.compileExpression(operands[0], Type.i32, ContextualFlags.WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let op: UnaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.clz: {\r\n          switch (type.kind) {\r\n            case TypeKind.BOOL:\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U16:\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.ClzI32; break; }\r\n            case TypeKind.USIZE:\r\n            case TypeKind.ISIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.ClzI64\r\n                : UnaryOp.ClzI32;\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.ClzI64; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.ctz: {\r\n          switch (type.kind) {\r\n            case TypeKind.BOOL:\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U16:\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.CtzI32; break; }\r\n            case TypeKind.USIZE:\r\n            case TypeKind.ISIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.CtzI64\r\n                : UnaryOp.CtzI32;\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.CtzI64; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.popcnt: {\r\n          switch (compiler.currentType.kind) {\r\n            case TypeKind.BOOL:\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U16:\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.PopcntI32; break; }\r\n            case TypeKind.USIZE:\r\n            case TypeKind.ISIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.PopcntI64\r\n                : UnaryOp.PopcntI32;\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.PopcntI64; break; }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      return module.unary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT | ContextualFlags.WRAP)\r\n        : compiler.compileExpression(operands[0], Type.i32, ContextualFlags.WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, ContextualFlags.IMPLICIT);\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          expr = compiler.ensureSmallIntegerWrap(\r\n            module.binary(BinaryOp.RotlI32, arg0, arg1),\r\n            type\r\n          );\r\n          // fall-through\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          expr = module.binary(BinaryOp.RotlI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE:\r\n        case TypeKind.ISIZE: {\r\n          expr = module.binary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotlI64\r\n              : BinaryOp.RotlI32,\r\n            arg0, arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          expr = module.binary(BinaryOp.RotlI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr; // possibly overflows\r\n    }\r\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT | ContextualFlags.WRAP)\r\n        : compiler.compileExpression(operands[0], Type.i32, ContextualFlags.WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, ContextualFlags.IMPLICIT);\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          expr = compiler.ensureSmallIntegerWrap(\r\n            module.binary(BinaryOp.RotrI32, arg0, arg1),\r\n            type\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          expr = module.binary(BinaryOp.RotrI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE:\r\n        case TypeKind.ISIZE: {\r\n          expr = module.binary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotrI64\r\n              : BinaryOp.RotrI32,\r\n            arg0, arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          expr = module.binary(BinaryOp.RotrI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr; // possibly overflowws\r\n    }\r\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT | ContextualFlags.WRAP)\r\n        : compiler.compileExpression(operands[0], Type.f64, ContextualFlags.WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFlow;\r\n\r\n          // possibly overflows, e.g. abs<i8>(-128) == 128\r\n          let tempLocal1 = flow.getTempLocal(Type.i32);\r\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i32).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          // (x + (x >> 31)) ^ (x >> 31)\r\n          expr = module.binary(BinaryOp.XorI32,\r\n            module.binary(BinaryOp.AddI32,\r\n              module.local_tee(\r\n                tempLocalIndex2,\r\n                module.binary(BinaryOp.ShrI32,\r\n                  module.local_tee(tempLocalIndex1, arg0),\r\n                  module.i32(31)\r\n                )\r\n              ),\r\n              module.local_get(tempLocalIndex1, NativeType.I32)\r\n            ),\r\n            module.local_get(tempLocalIndex2, NativeType.I32)\r\n          );\r\n\r\n          flow.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let options = compiler.options;\r\n          let flow = compiler.currentFlow;\r\n          let wasm64 = options.isWasm64;\r\n\r\n          let tempLocal1 = flow.getTempLocal(options.usizeType);\r\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(options.usizeType).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          expr = module.binary(wasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\r\n            module.binary(wasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\r\n              module.local_tee(\r\n                tempLocalIndex2,\r\n                module.binary(wasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\r\n                  module.local_tee(tempLocalIndex1, arg0),\r\n                  wasm64 ? module.i64(63) : module.i32(31)\r\n                )\r\n              ),\r\n              module.local_get(tempLocalIndex1, options.nativeSizeType)\r\n            ),\r\n            module.local_get(tempLocalIndex2, options.nativeSizeType)\r\n          );\r\n\r\n          flow.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let flow = compiler.currentFlow;\r\n\r\n          let tempLocal1 = flow.getTempLocal(Type.i64);\r\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i64).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          // (x + (x >> 63)) ^ (x >> 63)\r\n          expr = module.binary(BinaryOp.XorI64,\r\n            module.binary(BinaryOp.AddI64,\r\n              module.local_tee(\r\n                tempLocalIndex2,\r\n                module.binary(BinaryOp.ShrI64,\r\n                  module.local_tee(tempLocalIndex1, arg0),\r\n                  module.i64(63)\r\n                )\r\n              ),\r\n              module.local_get(tempLocalIndex1, NativeType.I64)\r\n            ),\r\n            module.local_get(tempLocalIndex2, NativeType.I64)\r\n          );\r\n\r\n          flow.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.BOOL: {\r\n          expr = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          expr = module.unary(UnaryOp.AbsF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          expr = module.unary(UnaryOp.AbsF64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT | ContextualFlags.WRAP)\r\n        : compiler.compileExpression(operands[0], Type.f64, ContextualFlags.WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, ContextualFlags.IMPLICIT | ContextualFlags.WRAP);\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: { op = BinaryOp.GtI32; break; }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\r\n        case TypeKind.I64: { op = BinaryOp.GtI64; break; }\r\n        case TypeKind.U64: { op = BinaryOp.GtU64; break; }\r\n        case TypeKind.ISIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.GtI64\r\n            : BinaryOp.GtI32;\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.GtU64\r\n            : BinaryOp.GtU32;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          return module.binary(BinaryOp.MaxF32, arg0, arg1);\r\n        }\r\n        case TypeKind.F64: {\r\n          return module.binary(BinaryOp.MaxF64, arg0, arg1);\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let flow = compiler.currentFlow;\r\n      let nativeType = type.toNativeType();\r\n      let tempLocal0 = flow.getTempLocal(type);\r\n      flow.setLocalFlag(tempLocal0.index, LocalFlags.WRAPPED);\r\n      let tempLocal1 = flow.getAndFreeTempLocal(type);\r\n      flow.setLocalFlag(tempLocal1.index, LocalFlags.WRAPPED);\r\n      flow.freeTempLocal(tempLocal0);\r\n      return module.select(\r\n        module.local_tee(tempLocal0.index, arg0),\r\n        module.local_tee(tempLocal1.index, arg1),\r\n        module.binary(op,\r\n          module.local_get(tempLocal0.index, nativeType),\r\n          module.local_get(tempLocal1.index, nativeType)\r\n        )\r\n      );\r\n    }\r\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT | ContextualFlags.WRAP)\r\n        : compiler.compileExpression(operands[0], Type.f64, ContextualFlags.WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, ContextualFlags.IMPLICIT | ContextualFlags.WRAP);\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: { op = BinaryOp.LtI32; break; }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\r\n        case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\r\n        case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\r\n        case TypeKind.ISIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.LtI64\r\n            : BinaryOp.LtI32;\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.LtU64\r\n            : BinaryOp.LtU32;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          return module.binary(BinaryOp.MinF32, arg0, arg1);\r\n        }\r\n        case TypeKind.F64: {\r\n          return module.binary(BinaryOp.MinF64, arg0, arg1);\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let flow = compiler.currentFlow;\r\n      let nativeType = type.toNativeType();\r\n      let tempLocal0 = flow.getTempLocal(type);\r\n      flow.setLocalFlag(tempLocal0.index, LocalFlags.WRAPPED);\r\n      let tempLocal1 = flow.getAndFreeTempLocal(type);\r\n      flow.setLocalFlag(tempLocal1.index, LocalFlags.WRAPPED);\r\n      flow.freeTempLocal(tempLocal0);\r\n      return module.select(\r\n        module.local_tee(tempLocal0.index, arg0),\r\n        module.local_tee(tempLocal1.index, arg1),\r\n        module.binary(op,\r\n          module.local_get(tempLocal0.index, nativeType),\r\n          module.local_get(tempLocal1.index, nativeType)\r\n        )\r\n      );\r\n    }\r\n    case BuiltinSymbols.ceil: // any_rounding<T?>(value: T) -> T\r\n    case BuiltinSymbols.floor: {\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, ContextualFlags.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let op: UnaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.BOOL: return arg0; // considered rounded\r\n        case TypeKind.F32: {\r\n          op = prototype.internalName == BuiltinSymbols.ceil\r\n            ? UnaryOp.CeilF32\r\n            : UnaryOp.FloorF32;\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          op = prototype.internalName == BuiltinSymbols.ceil\r\n            ? UnaryOp.CeilF64\r\n            : UnaryOp.FloorF64;\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      return module.unary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, ContextualFlags.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, ContextualFlags.IMPLICIT);\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        // TODO: does an integer version make sense?\r\n        case TypeKind.F32: { op = BinaryOp.CopysignF32; break; }\r\n        case TypeKind.F64: { op = BinaryOp.CopysignF64; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      return module.binary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, ContextualFlags.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.BOOL: {\r\n          expr = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          expr = module.unary(UnaryOp.NearestF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          expr = module.unary(UnaryOp.NearestF64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.currentType = type;\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          let arg0 = compiler.compileExpression(operands[0], Type.f32, ContextualFlags.IMPLICIT);\r\n          expr = module.unary(UnaryOp.ReinterpretF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          let arg0 = compiler.compileExpression(operands[0], Type.f64, ContextualFlags.IMPLICIT);\r\n          expr = module.unary(UnaryOp.ReinterpretF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          let arg0 = compiler.compileExpression(operands[0],\r\n            compiler.options.isWasm64\r\n              ? Type.f64\r\n              : Type.f32,\r\n            ContextualFlags.IMPLICIT\r\n          );\r\n          expr = module.unary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ReinterpretF64\r\n              : UnaryOp.ReinterpretF32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          let arg0 = compiler.compileExpression(operands[0], Type.i32, ContextualFlags.IMPLICIT);\r\n          expr = module.unary(UnaryOp.ReinterpretI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          let arg0 = compiler.compileExpression(operands[0], Type.i64, ContextualFlags.IMPLICIT);\r\n          expr = module.unary(UnaryOp.ReinterpretI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = type;\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, ContextualFlags.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.currentType = type;\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) { // TODO: integer versions (that return f64 or convert)?\r\n        case TypeKind.F32: {\r\n          expr = module.unary(UnaryOp.SqrtF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          expr = module.unary(UnaryOp.SqrtF64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT)\r\n        : compiler.compileExpression(operands[0], Type.f64, ContextualFlags.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.BOOL: {\r\n          expr = arg0;\r\n          break;\r\n        }\r\n        // TODO: truncate to contextual type directly (if not void etc.)?\r\n        case TypeKind.F32: {\r\n          expr = module.unary(UnaryOp.TruncF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          expr = module.unary(UnaryOp.TruncF64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.unreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n\r\n    // === Memory access ==========================================================================\r\n\r\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      let outType = (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > type.size\r\n      ) ? contextualType : type;\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      let numOperands = operands.length;\r\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = outType;\r\n        return module.unreachable();\r\n      }\r\n      let immAlign: i32;\r\n      let naturalAlign = type.byteSize;\r\n      if (numOperands == 3) {\r\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\r\n        if (immAlign < 0) {\r\n          compiler.currentType = outType;\r\n          return module.unreachable();\r\n        }\r\n        if (immAlign > naturalAlign) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\r\n          );\r\n          compiler.currentType = outType;\r\n          return module.unreachable();\r\n        }\r\n        if (!isPowerOf2(immAlign)) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_power_of_two,\r\n            operands[2].range, \"Alignment\"\r\n          );\r\n          compiler.currentType = outType;\r\n          return module.unreachable();\r\n        }\r\n      } else {\r\n        immAlign = naturalAlign;\r\n      }\r\n      compiler.currentType = outType;\r\n      return module.load(\r\n        type.byteSize,\r\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n        arg0,\r\n        outType.toNativeType(),\r\n        immOffset,\r\n        immAlign\r\n      );\r\n    }\r\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(operands[1],\r\n            contextualType,\r\n            ContextualFlags.IMPLICIT\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? ContextualFlags.NONE // no need to convert to small int (but now might result in a float)\r\n              : ContextualFlags.IMPLICIT\r\n          );\r\n      let inType = compiler.currentType;\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size          // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(arg1,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[1]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      let immAlign: i32;\r\n      let naturalAlign = type.byteSize;\r\n      if (operands.length == 4) {\r\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\r\n        if (immAlign < 0) {\r\n          compiler.currentType = Type.void;\r\n          return module.unreachable();\r\n        }\r\n        if (immAlign > naturalAlign) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\r\n          );\r\n          compiler.currentType = Type.void;\r\n          return module.unreachable();\r\n        }\r\n        if (!isPowerOf2(immAlign)) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_power_of_two,\r\n            operands[3].range, \"Alignment\"\r\n          );\r\n          compiler.currentType = Type.void;\r\n          return module.unreachable();\r\n        }\r\n      } else {\r\n        immAlign = naturalAlign;\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\r\n    }\r\n\r\n    // === Atomics ================================================================================\r\n\r\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      let outType = (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > type.size\r\n      ) ? contextualType : type;\r\n      if (!type.is(TypeFlags.INTEGER)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = outType;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = outType;\r\n        return module.unreachable();\r\n      }\r\n      compiler.currentType = outType;\r\n      return module.atomic_load(\r\n        type.byteSize,\r\n        arg0,\r\n        outType.toNativeType(),\r\n        immOffset\r\n      );\r\n    }\r\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(\r\n            operands[1],\r\n            contextualType,\r\n            ContextualFlags.IMPLICIT\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? ContextualFlags.NONE // no need to convert to small int (but now might result in a float)\r\n              : ContextualFlags.IMPLICIT\r\n          );\r\n      let inType = compiler.currentType;\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size          // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(arg1,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[1]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\r\n    }\r\n    case BuiltinSymbols.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\r\n    case BuiltinSymbols.atomic_sub:\r\n    case BuiltinSymbols.atomic_and:\r\n    case BuiltinSymbols.atomic_or:\r\n    case BuiltinSymbols.atomic_xor:\r\n    case BuiltinSymbols.atomic_xchg: {\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(operands[1],\r\n            contextualType,\r\n            ContextualFlags.IMPLICIT\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? ContextualFlags.NONE // no need to convert to small int (but now might result in a float)\r\n              : ContextualFlags.IMPLICIT\r\n          );\r\n      let inType = compiler.currentType;\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size       // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(arg1,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[1]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = inType;\r\n        return module.unreachable();\r\n      }\r\n      let op: AtomicRMWOp;\r\n      switch (prototype.internalName) {\r\n        default: assert(false);\r\n        case BuiltinSymbols.atomic_add:  { op = AtomicRMWOp.Add;  break; }\r\n        case BuiltinSymbols.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\r\n        case BuiltinSymbols.atomic_and:  { op = AtomicRMWOp.And;  break; }\r\n        case BuiltinSymbols.atomic_or:   { op = AtomicRMWOp.Or;   break; }\r\n        case BuiltinSymbols.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\r\n        case BuiltinSymbols.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\r\n      }\r\n      compiler.currentType = inType;\r\n      return module.atomic_rmw(\r\n        op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType()\r\n      );\r\n    }\r\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize): T\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(operands[1],\r\n            contextualType,\r\n            ContextualFlags.IMPLICIT\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? ContextualFlags.NONE // no need to convert to small int (but now might result in a float)\r\n              : ContextualFlags.IMPLICIT\r\n          );\r\n      let inType = compiler.currentType;\r\n      let arg2 = compiler.compileExpression(operands[2],\r\n        inType,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size       // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(arg1,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[1]\r\n        );\r\n        arg2 = compiler.convertExpression(arg2,\r\n          inType, type,\r\n          false, false, // still clears garbage bits when not wrapping\r\n          operands[2]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = inType;\r\n        return module.unreachable();\r\n      }\r\n      compiler.currentType = inType;\r\n      return module.atomic_cmpxchg(\r\n        type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType()\r\n      );\r\n    }\r\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64): i32;\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 32) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      let arg1 = compiler.compileExpression(operands[1], type,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      let arg2 = compiler.compileExpression(operands[2],\r\n        Type.i64,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      compiler.currentType = Type.i32;\r\n      return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\r\n    }\r\n    case BuiltinSymbols.atomic_notify: { // notify(ptr: usize, count: i32): i32;\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = compiler.compileExpression(operands[0],\r\n        compiler.options.usizeType,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      let arg1 = compiler.compileExpression(operands[1],\r\n        Type.i32,\r\n        ContextualFlags.IMPLICIT\r\n      );\r\n      compiler.currentType = Type.i32;\r\n      return module.atomic_notify(arg0, arg1);\r\n    }\r\n\r\n    // === Control flow ===========================================================================\r\n\r\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT)\r\n        : compiler.compileExpressionRetainType(operands[0], Type.i32);\r\n      let type = compiler.currentType;\r\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, ContextualFlags.IMPLICIT);\r\n      let arg2 = compiler.makeIsTrueish(\r\n        compiler.compileExpressionRetainType(operands[2], Type.bool),\r\n        compiler.currentType // ^\r\n      );\r\n      compiler.currentType = type;\r\n      return module.select(arg0, arg1, arg2);\r\n    }\r\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.typeArgumentsRange, prototype.internalName\r\n        );\r\n      }\r\n      checkArgsRequired(operands, 0, reportNode, compiler);\r\n      return module.unreachable();\r\n    }\r\n\r\n    // === Memory =================================================================================\r\n\r\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 0, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      return module.host(HostOp.MemorySize);\r\n    }\r\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      return module.host(HostOp.MemoryGrow, null, [\r\n        compiler.compileExpression(operands[0], Type.i32, ContextualFlags.IMPLICIT)\r\n      ]);\r\n    }\r\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\r\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\r\n        compiler.currentType = Type.void;\r\n        if (!instance) return module.unreachable();\r\n        return compiler.compileCallDirect(instance, operands, reportNode);\r\n      }\r\n      let usizeType = compiler.options.usizeType;\r\n      let arg0 = compiler.compileExpression(operands[0], usizeType, ContextualFlags.IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], usizeType, ContextualFlags.IMPLICIT);\r\n      let arg2 = compiler.compileExpression(operands[2], usizeType, ContextualFlags.IMPLICIT);\r\n      compiler.currentType = Type.void;\r\n      return module.memory_copy(arg0, arg1, arg2);\r\n    }\r\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\r\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\r\n        compiler.currentType = Type.void;\r\n        if (!instance) return module.unreachable();\r\n        return compiler.compileCallDirect(instance, operands, reportNode);\r\n      }\r\n      let usizeType = compiler.options.usizeType;\r\n      let arg0 = compiler.compileExpression(operands[0], usizeType, ContextualFlags.IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.u8, ContextualFlags.IMPLICIT);\r\n      let arg2 = compiler.compileExpression(operands[2], usizeType, ContextualFlags.IMPLICIT);\r\n      compiler.currentType = Type.void;\r\n      return module.memory_fill(arg0, arg1, arg2);\r\n    }\r\n\r\n    // === Helpers ================================================================================\r\n\r\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let toType = typeArguments![0];\r\n      let arg0 = compiler.compileExpressionRetainType(operands[0], toType);\r\n      let fromType = compiler.currentType;\r\n      compiler.currentType = toType;\r\n      if (fromType.size != toType.size) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      return arg0;\r\n    }\r\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\r\n      ) {\r\n        if (typeArguments) {\r\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\r\n          compiler.currentType = typeArguments[0].nonNullableType;\r\n        }\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT | ContextualFlags.WRAP)\r\n        : compiler.compileExpressionRetainType(operands[0], Type.bool, ContextualFlags.WRAP);\r\n      let type = compiler.currentType;\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      // return ifTrueish if assertions are disabled\r\n      if (compiler.options.noAssert) {\r\n        if (contextualType == Type.void) { // simplify if dropped anyway\r\n          compiler.currentType = Type.void;\r\n          return module.nop();\r\n        }\r\n        return arg0;\r\n      }\r\n\r\n      // otherwise call abort if the assertion is false-ish\r\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\r\n      compiler.currentType = type.nonNullableType;\r\n      let expr: ExpressionRef;\r\n      if (contextualType == Type.void) { // simplify if dropped anyway\r\n        compiler.currentType = Type.void;\r\n        switch (type.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.if(\r\n              module.unary(UnaryOp.EqzI32, arg0),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.if(\r\n              module.unary(UnaryOp.EqzI64, arg0),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            expr = module.if(\r\n              module.unary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\r\n          case TypeKind.F32: {\r\n            expr = module.if(\r\n              module.binary(BinaryOp.EqF32,\r\n                arg0,\r\n                module.f32(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.if(\r\n              module.binary(BinaryOp.EqF64,\r\n                arg0,\r\n                module.f64(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.typeArgumentsRange\r\n            );\r\n            expr = abort;\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        compiler.currentType = type.nonNullableType;\r\n        switch (compiler.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            let flow = compiler.currentFlow;\r\n            let tempLocal = flow.getAndFreeTempLocal(type);\r\n            flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED); // arg0 is wrapped\r\n            expr = module.if(\r\n              module.local_tee(tempLocal.index, arg0),\r\n              module.local_get(tempLocal.index, NativeType.I32),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.i64);\r\n            expr = module.if(\r\n              module.unary(UnaryOp.EqzI64,\r\n                module.local_tee(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.local_get(tempLocal.index, NativeType.I64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(compiler.options.usizeType);\r\n            expr = module.if(\r\n              module.unary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                module.local_tee(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.local_get(tempLocal.index, compiler.options.nativeSizeType)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f32);\r\n            expr = module.if(\r\n              module.binary(BinaryOp.EqF32,\r\n                module.local_tee(tempLocal.index, arg0),\r\n                module.f32(0)\r\n              ),\r\n              abort,\r\n              module.local_get(tempLocal.index, NativeType.F32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f64);\r\n            expr = module.if(\r\n              module.binary(BinaryOp.EqF64,\r\n                module.local_tee(tempLocal.index, arg0),\r\n                module.f64(0)\r\n              ),\r\n              abort,\r\n              module.local_get(tempLocal.index, NativeType.F64)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.typeArgumentsRange\r\n            );\r\n            expr = abort;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.unchecked: { // unchecked(expr: *) -> *\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let flow = compiler.currentFlow;\r\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\r\n      // eliminate unnecessary tees by preferring contextualType(=void):\r\n      let expr = compiler.compileExpression(operands[0], contextualType);\r\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.call_direct: directize = true;\r\n    case BuiltinSymbols.call_indirect: { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 1, i32.MAX_VALUE, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let returnType = typeArguments ? typeArguments[0] : contextualType;\r\n      let arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32);\r\n      let arg0Type = compiler.currentType;\r\n      if (!(\r\n        arg0Type == Type.u32 ||                                      // either plain index\r\n        arg0Type.kind == TypeKind.U32 && arg0Type.signatureReference // or function reference\r\n      )) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          operands[0].range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let numOperands = operands.length - 1;\r\n      let operandExprs = new Array<ExpressionRef>(numOperands);\r\n      let nativeReturnType = returnType.toNativeType();\r\n      let parameterTypes = new Array<Type>(numOperands);\r\n      let nativeParamTypes = new Array<NativeType>(numOperands);\r\n      for (let i = 0; i < numOperands; ++i) {\r\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32);\r\n        let operandType = compiler.currentType;\r\n        parameterTypes[i] = operandType;\r\n        nativeParamTypes[i] = operandType.toNativeType();\r\n      }\r\n      let typeName = Signature.makeSignatureString(parameterTypes, returnType);\r\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\r\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\r\n      compiler.currentType = returnType;\r\n      if (directize) {\r\n        // if the index expression is precomputable to a constant value, emit a direct call\r\n        if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\r\n          assert(getExpressionType(arg0) == NativeType.I32);\r\n          let index = getConstValueI32(arg0);\r\n          let functionTable = compiler.functionTable;\r\n          if (index >= 0 && index < functionTable.length) {\r\n            return module.call(functionTable[index], operandExprs, nativeReturnType);\r\n          }\r\n        }\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          operands[0].range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\r\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\r\n      return module.call_indirect(arg0, operandExprs, typeName);\r\n    }\r\n    case BuiltinSymbols.instantiate: { // instantiate<T!>(...args: *[]) -> T\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\r\n      ) return module.unreachable();\r\n      let classInstance = typeArguments![0].classReference;\r\n      if (!classInstance) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      compiler.currentType = classInstance.type;\r\n      return compiler.compileInstantiate(classInstance, operands, ContextualFlags.NONE, reportNode);\r\n    }\r\n\r\n    // === User-defined diagnostics ===============================================================\r\n\r\n    case BuiltinSymbols.ERROR: {\r\n      checkTypeAbsent(typeArguments, reportNode, prototype);\r\n      compiler.error(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.unreachable();\r\n    }\r\n    case BuiltinSymbols.WARNING: {\r\n      checkTypeAbsent(typeArguments, reportNode, prototype);\r\n      compiler.warning(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.nop();\r\n    }\r\n    case BuiltinSymbols.INFO: {\r\n      checkTypeAbsent(typeArguments, reportNode, prototype);\r\n      compiler.info(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.nop();\r\n    }\r\n\r\n    // === Portable type conversions ==============================================================\r\n\r\n    case BuiltinSymbols.i8: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i8;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i8, ContextualFlags.EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.i16: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i16;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i16, ContextualFlags.EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.i32: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i32;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i32, ContextualFlags.EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.i64: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i64;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i64, ContextualFlags.EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.isize: {\r\n      let isizeType = compiler.options.isizeType;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = isizeType;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], isizeType, ContextualFlags.EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.u8: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u8;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u8, ContextualFlags.EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.u16: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u16;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u16, ContextualFlags.EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.u32: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u32;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u32, ContextualFlags.EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.u64: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u64;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u64, ContextualFlags.EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.usize: {\r\n      let usizeType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = usizeType;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], usizeType, ContextualFlags.EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.bool: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.bool;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.bool, ContextualFlags.EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.f32: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.f32;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f32, ContextualFlags.EXPLICIT);\r\n    }\r\n    case BuiltinSymbols.f64: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.f64;\r\n        return module.unreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f64, ContextualFlags.EXPLICIT);\r\n    }\r\n\r\n    // === SIMD ===================================================================================\r\n\r\n    case BuiltinSymbols.v128: // alias for now\r\n    case BuiltinSymbols.i8x16: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 16, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 16; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.i8, ContextualFlags.IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I32);\r\n          writeI8(getConstValueI32(expr), bytes, i);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.i16x8: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 8, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 8; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.i16, ContextualFlags.IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I32);\r\n          writeI16(getConstValueI32(expr), bytes, i << 1);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.i32x4: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 4, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 4; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.i32, ContextualFlags.IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I32);\r\n          writeI32(getConstValueI32(expr), bytes, i << 2);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.i64x2: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 2; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.i64, ContextualFlags.IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I64);\r\n          let off = i << 3;\r\n          writeI32(getConstValueI64Low(expr), bytes, off);\r\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.f32x4: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 4, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 4; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.f32, ContextualFlags.IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.F32);\r\n          writeF32(getConstValueF32(expr), bytes, i << 2);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.f64x2: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 2; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = compiler.precomputeExpression(value, Type.f64, ContextualFlags.IMPLICIT);\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.unreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.F64);\r\n          writeF64(getConstValueF64(expr), bytes, i << 3);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.v128(bytes);\r\n    }\r\n    case BuiltinSymbols.v128_splat: { // splat<T!>(x: T) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: UnaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8:  { op = UnaryOp.SplatVecI8x16; break; }\r\n        case TypeKind.I16:\r\n        case TypeKind.U16: { op = UnaryOp.SplatVecI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = UnaryOp.SplatVecI32x4; break; }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: { op = UnaryOp.SplatVecI64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? UnaryOp.SplatVecI64x2\r\n            : UnaryOp.SplatVecI32x4;\r\n          break;\r\n        }\r\n        case TypeKind.F32: { op = UnaryOp.SplatVecF32x4; break; }\r\n        case TypeKind.F64: { op = UnaryOp.SplatVecF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], type, ContextualFlags.IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      return module.unary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.unreachable();\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = type;\r\n        return module.unreachable();\r\n      }\r\n      let op: SIMDExtractOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:  { op = SIMDExtractOp.ExtractLaneSVecI8x16; break; }\r\n        case TypeKind.U8:  { op = SIMDExtractOp.ExtractLaneUVecI8x16; break; }\r\n        case TypeKind.I16: { op = SIMDExtractOp.ExtractLaneSVecI16x8; break; }\r\n        case TypeKind.U16: { op = SIMDExtractOp.ExtractLaneUVecI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = SIMDExtractOp.ExtractLaneVecI32x4; break; }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: { op = SIMDExtractOp.ExtractLaneVecI64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? SIMDExtractOp.ExtractLaneVecI64x2\r\n            : SIMDExtractOp.ExtractLaneVecI32x4;\r\n          break;\r\n        }\r\n        case TypeKind.F32: { op = SIMDExtractOp.ExtractLaneVecF32x4; break; }\r\n        case TypeKind.F64: { op = SIMDExtractOp.ExtractLaneVecF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          compiler.currentType = type;\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\r\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, ContextualFlags.IMPLICIT);\r\n      compiler.currentType = type;\r\n      if (getExpressionId(arg1) != ExpressionId.Const) {\r\n        compiler.error(\r\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n          operands[1].range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      assert(getExpressionType(arg1) == NativeType.I32);\r\n      let maxIdx = (16 / type.byteSize) - 1;\r\n      let idx = getConstValueI32(arg1);\r\n      if (idx < 0 || idx > maxIdx) {\r\n        compiler.error(\r\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      return module.simd_extract(op, arg0, idx);\r\n    }\r\n    case BuiltinSymbols.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: SIMDReplaceOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8:  { op = SIMDReplaceOp.ReplaceLaneVecI8x16; break; }\r\n        case TypeKind.I16:\r\n        case TypeKind.U16: { op = SIMDReplaceOp.ReplaceLaneVecI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = SIMDReplaceOp.ReplaceLaneVecI32x4; break; }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: { op = SIMDReplaceOp.ReplaceLaneVecI64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? SIMDReplaceOp.ReplaceLaneVecI64x2\r\n            : SIMDReplaceOp.ReplaceLaneVecI32x4;\r\n          break;\r\n        }\r\n        case TypeKind.F32: { op = SIMDReplaceOp.ReplaceLaneVecF32x4; break; }\r\n        case TypeKind.F64: { op = SIMDReplaceOp.ReplaceLaneVecF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\r\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, ContextualFlags.IMPLICIT);\r\n      if (getExpressionId(arg1) != ExpressionId.Const) {\r\n        compiler.error(\r\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n          operands[1].range\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      assert(getExpressionType(arg1) == NativeType.I32);\r\n      let maxIdx = (16 / type.byteSize) - 1;\r\n      let idx = getConstValueI32(arg1);\r\n      if (idx < 0 || idx > maxIdx) {\r\n        compiler.error(\r\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let arg2 = compiler.compileExpression(operands[2], type, ContextualFlags.IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      return module.simd_replace(op, arg0, idx, arg2);\r\n    }\r\n    case BuiltinSymbols.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let laneWidth = type.byteSize;\r\n      let laneCount = 16 / laneWidth;\r\n      assert(isInteger(laneCount) && isPowerOf2(laneCount));\r\n      if (\r\n        checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.F32:\r\n        case TypeKind.F64: break;\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.unreachable();\r\n        }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ContextualFlags.IMPLICIT);\r\n      let mask = new Uint8Array(16);\r\n      let maxIdx = (laneCount << 1) - 1;\r\n      for (let i = 0; i < laneCount; ++i) {\r\n        let operand = operands[2 + i];\r\n        let argN = compiler.precomputeExpression(operand, Type.u8, ContextualFlags.IMPLICIT);\r\n        if (getExpressionId(argN) != ExpressionId.Const) {\r\n          compiler.error(\r\n            DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n            operand.range\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.unreachable();\r\n        }\r\n        assert(getExpressionType(argN) == NativeType.I32);\r\n        let idx = getConstValueI32(argN);\r\n        if (idx < 0 || idx > maxIdx) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n            operand.range, \"Lane index\", \"0\", maxIdx.toString()\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.unreachable();\r\n        }\r\n        switch (laneWidth) {\r\n          case 1: {\r\n            writeI8(idx, mask, i);\r\n            break;\r\n          }\r\n          case 2: {\r\n            let off8 = i << 1;\r\n            let idx8 = idx << 1;\r\n            writeI8(idx8    , mask, off8);\r\n            writeI8(idx8 + 1, mask, off8 + 1);\r\n            break;\r\n          }\r\n          case 4: {\r\n            let off8 = i << 2;\r\n            let idx8 = idx << 2;\r\n            writeI8(idx8    , mask, off8);\r\n            writeI8(idx8 + 1, mask, off8 + 1);\r\n            writeI8(idx8 + 2, mask, off8 + 2);\r\n            writeI8(idx8 + 3, mask, off8 + 3);\r\n            break;\r\n          }\r\n          case 8: {\r\n            let off8 = i << 3;\r\n            let idx8 = idx << 3;\r\n            writeI8(idx8    , mask, off8);\r\n            writeI8(idx8 + 1, mask, off8 + 1);\r\n            writeI8(idx8 + 2, mask, off8 + 2);\r\n            writeI8(idx8 + 3, mask, off8 + 3);\r\n            writeI8(idx8 + 4, mask, off8 + 4);\r\n            writeI8(idx8 + 5, mask, off8 + 5);\r\n            writeI8(idx8 + 6, mask, off8 + 6);\r\n            writeI8(idx8 + 7, mask, off8 + 7);\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.simd_shuffle(arg0, arg1, mask);\r\n    }\r\n    case BuiltinSymbols.v128_add: // any_binary<T!>(a: v128, b: v128) -> v128\r\n    case BuiltinSymbols.v128_sub:\r\n    case BuiltinSymbols.v128_mul:\r\n    case BuiltinSymbols.v128_div:\r\n    case BuiltinSymbols.v128_add_saturate:\r\n    case BuiltinSymbols.v128_sub_saturate:\r\n    case BuiltinSymbols.v128_min:\r\n    case BuiltinSymbols.v128_max:\r\n    case BuiltinSymbols.v128_eq:\r\n    case BuiltinSymbols.v128_ne:\r\n    case BuiltinSymbols.v128_lt:\r\n    case BuiltinSymbols.v128_le:\r\n    case BuiltinSymbols.v128_gt:\r\n    case BuiltinSymbols.v128_ge: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: BinaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.v128_add: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.AddVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.AddVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.AddVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = BinaryOp.AddVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? BinaryOp.AddVecI64x2\r\n                : BinaryOp.AddVecI32x4;\r\n              break;\r\n            }\r\n            case TypeKind.F32: { op = BinaryOp.AddVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.AddVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_sub: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.SubVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.SubVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.SubVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = BinaryOp.SubVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? BinaryOp.SubVecI64x2\r\n                : BinaryOp.SubVecI32x4;\r\n              break;\r\n            }\r\n            case TypeKind.F32: { op = BinaryOp.SubVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.SubVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_mul: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.MulVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.MulVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.MulVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.MulVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.MulVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) op = BinaryOp.MulVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_div: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = BinaryOp.DivVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.DivVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_add_saturate: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.AddSatSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.AddSatUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.AddSatSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.AddSatUVecI16x8; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_sub_saturate: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.SubSatSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.SubSatUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.SubSatSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.SubSatUVecI16x8; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_min: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = BinaryOp.MinVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.MinVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_max: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = BinaryOp.MaxVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.MaxVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_eq: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.EqVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.EqVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.EqVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.EqVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.EqVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) op = BinaryOp.EqVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_ne: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.NeVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.NeVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.NeVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.NeVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.NeVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) op = BinaryOp.NeVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_lt: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.LtSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.LtUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.LtSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.LtUVecI16x8; break; }\r\n            case TypeKind.I32: { op = BinaryOp.LtSVecI32x4; break; }\r\n            case TypeKind.U32: { op = BinaryOp.LtUVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.LtVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.LtVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                op = type.kind == TypeKind.ISIZE\r\n                  ? BinaryOp.LtSVecI32x4\r\n                  : BinaryOp.LtUVecI32x4;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_le: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.LeSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.LeUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.LeSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.LeUVecI16x8; break; }\r\n            case TypeKind.I32: { op = BinaryOp.LeSVecI32x4; break; }\r\n            case TypeKind.U32: { op = BinaryOp.LeUVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.LeVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.LeVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                op = type.kind == TypeKind.ISIZE\r\n                  ? BinaryOp.LeSVecI32x4\r\n                  : BinaryOp.LeUVecI32x4;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_gt: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.GtSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.GtUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.GtSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.GtUVecI16x8; break; }\r\n            case TypeKind.I32: { op = BinaryOp.GtSVecI32x4; break; }\r\n            case TypeKind.U32: { op = BinaryOp.GtUVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.GtVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.GtVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                op = type.kind == TypeKind.ISIZE\r\n                  ? BinaryOp.GtSVecI32x4\r\n                  : BinaryOp.GtUVecI32x4;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_ge: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.GeSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.GeUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.GeSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.GeUVecI16x8; break; }\r\n            case TypeKind.I32: { op = BinaryOp.GeSVecI32x4; break; }\r\n            case TypeKind.U32: { op = BinaryOp.GeUVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.GeVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.GeVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                op = type.kind == TypeKind.ISIZE\r\n                  ? BinaryOp.GeSVecI32x4\r\n                  : BinaryOp.GeUVecI32x4;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ContextualFlags.IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      return module.binary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_neg: // any_unary<T!>(a: v128) -> v128\r\n    case BuiltinSymbols.v128_abs:\r\n    case BuiltinSymbols.v128_sqrt:\r\n    case BuiltinSymbols.v128_convert:\r\n    case BuiltinSymbols.v128_trunc: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: UnaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.v128_neg: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = UnaryOp.NegVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = UnaryOp.NegVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.NegVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.NegVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.NegVecI64x2\r\n                : UnaryOp.NegVecI32x4;\r\n              break;\r\n            }\r\n            case TypeKind.F32: { op = UnaryOp.NegVecF32x4; break; }\r\n            case TypeKind.F64: { op = UnaryOp.NegVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_abs: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = UnaryOp.AbsVecF32x4; break; }\r\n            case TypeKind.F64: { op = UnaryOp.AbsVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_sqrt: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = UnaryOp.SqrtVecF32x4; break; }\r\n            case TypeKind.F64: { op = UnaryOp.SqrtVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_convert: {\r\n          switch (type.kind) {\r\n            case TypeKind.I32: { op = UnaryOp.ConvertSVecI32x4ToVecF32x4; break; }\r\n            case TypeKind.U32: { op = UnaryOp.ConvertUVecI32x4ToVecF32x4; break; }\r\n            case TypeKind.I64: { op = UnaryOp.ConvertSVecI64x2ToVecF64x2; break; }\r\n            case TypeKind.U64: { op = UnaryOp.ConvertUVecI64x2ToVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_trunc: {\r\n          switch (type.kind) {\r\n            case TypeKind.I32: { op = UnaryOp.TruncSatSVecF32x4ToVecI32x4; break; }\r\n            case TypeKind.U32: { op = UnaryOp.TruncSatUVecF32x4ToVecI32x4; break; }\r\n            case TypeKind.I64: { op = UnaryOp.TruncSatSVecF64x2ToVecI64x2; break; }\r\n            case TypeKind.U64: { op = UnaryOp.TruncSatUVecF64x2ToVecI64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      return module.unary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_shl: // any_shift<T!>(a: v128, b: i32) -> v128\r\n    case BuiltinSymbols.v128_shr: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: SIMDShiftOp = -1;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.v128_shl: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = SIMDShiftOp.ShlVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = SIMDShiftOp.ShlVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = SIMDShiftOp.ShlVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = SIMDShiftOp.ShlVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? SIMDShiftOp.ShlVecI64x2\r\n                : SIMDShiftOp.ShlVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_shr: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = SIMDShiftOp.ShrSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = SIMDShiftOp.ShrUVecI8x16; break; }\r\n            case TypeKind.I16: { op = SIMDShiftOp.ShrSVecI16x8; break; }\r\n            case TypeKind.U16: { op = SIMDShiftOp.ShrUVecI16x8; break; }\r\n            case TypeKind.I32: { op = SIMDShiftOp.ShrSVecI32x4; break; }\r\n            case TypeKind.U32: { op = SIMDShiftOp.ShrUVecI32x4; break; }\r\n            case TypeKind.I64: { op = SIMDShiftOp.ShrSVecI64x2; break; }\r\n            case TypeKind.U64: { op = SIMDShiftOp.ShrUVecI64x2; break; }\r\n            case TypeKind.ISIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? SIMDShiftOp.ShrSVecI64x2\r\n                : SIMDShiftOp.ShrSVecI32x4;\r\n              break;\r\n            }\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? SIMDShiftOp.ShrUVecI64x2\r\n                : SIMDShiftOp.ShrUVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, ContextualFlags.IMPLICIT);\r\n      compiler.currentType = Type.v128;\r\n      return module.simd_shift(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_and: // any_bitwise_binary(a: v128, b: v128) -> v128\r\n    case BuiltinSymbols.v128_or:\r\n    case BuiltinSymbols.v128_xor: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let op: BinaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        default: assert(false);\r\n        case BuiltinSymbols.v128_and: { op = BinaryOp.AndVec128; break; }\r\n        case BuiltinSymbols.v128_or:  { op = BinaryOp.OrVec128; break; }\r\n        case BuiltinSymbols.v128_xor: { op = BinaryOp.XorVec128; break; }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ContextualFlags.IMPLICIT);\r\n      return module.binary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_not: { // any_bitwise_unary(a: v128) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\r\n      return module.unary(UnaryOp.NotVec128, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ContextualFlags.IMPLICIT);\r\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, ContextualFlags.IMPLICIT);\r\n      return module.simd_bitselect(arg0, arg1, arg2);\r\n    }\r\n    case BuiltinSymbols.v128_any_true: // any_test<T!>(a: v128) -> bool\r\n    case BuiltinSymbols.v128_all_true: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.bool;\r\n        return module.unreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      let op: UnaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        default: assert(false);\r\n        case BuiltinSymbols.v128_any_true: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = UnaryOp.AnyTrueVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = UnaryOp.AnyTrueVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.AnyTrueVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.AnyTrueVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.AnyTrueVecI64x2\r\n                : UnaryOp.AnyTrueVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_all_true: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = UnaryOp.AllTrueVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = UnaryOp.AllTrueVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.AllTrueVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.AllTrueVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.AllTrueVecI64x2\r\n                : UnaryOp.AllTrueVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.bool;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\r\n      compiler.currentType = Type.bool;\r\n      return module.unary(op, arg0);\r\n    }\r\n\r\n    // === Internal runtime =======================================================================\r\n\r\n    case BuiltinSymbols.idof: {\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.u32;\r\n      if (!type) return module.unreachable();\r\n      let classReference = type.classReference;\r\n      if (!classReference || classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.unreachable();\r\n      }\r\n      return module.i32(classReference.id);\r\n    }\r\n    case BuiltinSymbols.visit_globals: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler) // cookie\r\n      ) {\r\n        compiler.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.u32, ContextualFlags.IMPLICIT);\r\n      compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\r\n      compiler.currentType = Type.void;\r\n      return module.call(BuiltinSymbols.visit_globals, [ arg0 ], NativeType.None);\r\n    }\r\n    case BuiltinSymbols.visit_members: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler) // ref, cookie\r\n      ) {\r\n        compiler.currentType = Type.void;\r\n        return module.unreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, ContextualFlags.IMPLICIT);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.u32, ContextualFlags.IMPLICIT);\r\n      compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\r\n      compiler.currentType = Type.void;\r\n      return module.call(BuiltinSymbols.visit_members, [ arg0, arg1 ], NativeType.None);\r\n    }\r\n  }\r\n\r\n  // try to defer inline asm to a concrete built-in\r\n  {\r\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\r\n    if (expr) {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.typeArgumentsRange, prototype.internalName\r\n        );\r\n      }\r\n      return expr;\r\n    }\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Cannot_find_name_0,\r\n    reportNode.expression.range, prototype.internalName\r\n  );\r\n  return module.unreachable();\r\n}\r\n\r\n/** Tries to defer an inline-assembler-like call to a built-in function. */\r\nfunction tryDeferASM(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  operands: Expression[],\r\n  reportNode: CallExpression\r\n): ExpressionRef {\r\n  /* tslint:disable:max-line-length */\r\n  switch (prototype.internalName) {\r\n\r\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\r\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\r\n    //   and, or, xor, shl, shr_u, shr_s\r\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\r\n\r\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\r\n  }\r\n  if (compiler.options.hasFeature(Feature.THREADS)) {\r\n    switch (prototype.internalName) {\r\n\r\n      case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\r\n    }\r\n  }\r\n  if (compiler.options.hasFeature(Feature.SIMD)) {\r\n    switch (prototype.internalName) {\r\n\r\n      case BuiltinSymbols.v128_load: return deferASM(BuiltinSymbols.load, compiler, Type.v128, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.v128_store: return deferASM(BuiltinSymbols.store, compiler, Type.v128, operands, Type.void, reportNode);\r\n\r\n      case BuiltinSymbols.i8x16_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\r\n      case BuiltinSymbols.i8x16_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\r\n      case BuiltinSymbols.i8x16_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i8x16_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i8x16_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.i16x8_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\r\n      case BuiltinSymbols.i16x8_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\r\n      case BuiltinSymbols.i16x8_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i16x8_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i16x8_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.i32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32x4_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_trunc_s_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_trunc_u_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u32, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.i64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64x2_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64x2_trunc_s_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_trunc_u_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u64, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.f32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\r\n      case BuiltinSymbols.f32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_convert_s_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_convert_u_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.f64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\r\n      case BuiltinSymbols.f64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_convert_s_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_convert_u_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.v8x16_shuffle: return deferASM(BuiltinSymbols.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\r\n    }\r\n  }\r\n  /* tslint:enable:max-line-length */\r\n  return 0;\r\n}\r\n\r\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\r\nfunction deferASM(\r\n  name: string,\r\n  compiler: Compiler,\r\n  typeArgument: Type,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: CallExpression\r\n): ExpressionRef {\r\n  assert(compiler.program.elementsByName.has(name));\r\n  var prototype = compiler.program.elementsByName.get(name)!;\r\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n  return compileCall(\r\n    compiler,\r\n    <FunctionPrototype>prototype,\r\n    [ typeArgument ],\r\n    operands,\r\n    contextualType,\r\n    reportNode,\r\n    /* isAsm */ true\r\n  );\r\n}\r\n\r\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\r\nexport function compileAbort(\r\n  compiler: Compiler,\r\n  message: Expression | null,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n\r\n  var stringInstance = compiler.program.stringInstance;\r\n  if (!stringInstance) return module.unreachable();\r\n\r\n  var abortInstance = program.abortInstance;\r\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.unreachable();\r\n\r\n  var messageArg = message != null\r\n    ? compiler.compileExpression(message, stringInstance.type, ContextualFlags.IMPLICIT)\r\n    : stringInstance.type.toNativeZero(module);\r\n\r\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\r\n\r\n  compiler.currentType = Type.void;\r\n  return module.block(null, [\r\n    module.call(\r\n      abortInstance.internalName, [\r\n        messageArg,\r\n        filenameArg,\r\n        module.i32(reportNode.range.line),\r\n        module.i32(reportNode.range.column)\r\n      ],\r\n      NativeType.None\r\n    ),\r\n    module.unreachable()\r\n  ]);\r\n}\r\n\r\n/** Compiles the `visit_globals` function. */\r\nexport function compileVisitGlobals(compiler: Compiler): void {\r\n  var module = compiler.module;\r\n  var exprs = new Array<ExpressionRef>();\r\n  var typeRef = compiler.ensureFunctionType([ Type.u32 ], Type.void); // cookie\r\n  var nativeSizeType = compiler.options.nativeSizeType;\r\n  var visitInstance = assert(compiler.program.visitInstance);\r\n\r\n  compiler.compileFunction(visitInstance);\r\n\r\n  for (let element of compiler.program.elementsByName.values()) {\r\n    if (element.kind != ElementKind.GLOBAL) continue;\r\n    let global = <Global>element;\r\n    let classReference = global.type.classReference;\r\n    if (\r\n      global.is(CommonFlags.COMPILED) &&\r\n      classReference !== null &&\r\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\r\n    ) {\r\n      if (global.is(CommonFlags.INLINED)) {\r\n        let value = global.constantIntegerValue;\r\n        if (i64_low(value) || i64_high(value)) {\r\n          exprs.push(\r\n            module.call(visitInstance.internalName, [\r\n              compiler.options.isWasm64\r\n                ? module.i64(i64_low(value), i64_high(value))\r\n                : module.i32(i64_low(value))\r\n            ], NativeType.None)\r\n          );\r\n        }\r\n      } else {\r\n        exprs.push(\r\n          module.if(\r\n            module.local_tee(1,\r\n              module.global_get(global.internalName, nativeSizeType)\r\n            ),\r\n            module.call(visitInstance.internalName, [\r\n              module.local_get(1, nativeSizeType), // tempRef != null\r\n              module.local_get(0, NativeType.I32) // cookie\r\n            ], NativeType.None)\r\n          )\r\n        );\r\n      }\r\n    }\r\n  }\r\n  module.addFunction(BuiltinSymbols.visit_globals, typeRef, [ nativeSizeType ],\r\n    exprs.length\r\n      ? module.block(null, exprs)\r\n      : module.nop()\r\n  );\r\n}\r\n\r\n/** Compiles the `visit_members` function. */\r\nexport function compileVisitMembers(compiler: Compiler): void {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n  var usizeType = program.options.usizeType;\r\n  var nativeSizeType = usizeType.toNativeType();\r\n  var nativeSizeSize = usizeType.byteSize;\r\n  var ftype = compiler.ensureFunctionType([ usizeType, Type.i32 ], Type.void); // ref, cookie\r\n  var managedClasses = program.managedClasses;\r\n  var visitInstance = assert(program.visitInstance);\r\n  var blocks = new Array<RelooperBlockRef>();\r\n  var relooper = Relooper.create(module);\r\n\r\n  var outer = relooper.addBlockWithSwitch(\r\n    module.nop(),\r\n    module.load(nativeSizeSize, false,\r\n      nativeSizeType == NativeType.I64\r\n        ? module.binary(BinaryOp.SubI64,\r\n            module.local_get(0, nativeSizeType),\r\n            module.i64(8)\r\n          )\r\n        : module.binary(BinaryOp.SubI32,\r\n            module.local_get(0, nativeSizeType),\r\n            module.i32(8) // rtId is at -8\r\n          ),\r\n      NativeType.I32,\r\n      0\r\n    )\r\n  );\r\n\r\n  var lastId = 0;\r\n  for (let [id, instance] of managedClasses) {\r\n    assert(instance.type.isManaged);\r\n    assert(id == lastId++);\r\n\r\n    let visitImpl: Element | null;\r\n\r\n    // if a library element, check if it implements a custom traversal function\r\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\"))) {\r\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\r\n      let block: RelooperBlockRef;\r\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\r\n        block = relooper.addBlock(\r\n          module.unreachable()\r\n        );\r\n      } else {\r\n        let visitSig = visitFunc.signature;\r\n        assert(\r\n          visitSig.parameterTypes.length == 1 &&\r\n          visitSig.parameterTypes[0] == Type.u32 &&\r\n          visitSig.returnType == Type.void &&\r\n          visitSig.thisType == instance.type\r\n        );\r\n        let callExpr = module.call(visitFunc.internalName, [\r\n          module.local_get(0, nativeSizeType), // ref\r\n          module.local_get(1, NativeType.I32)  // cookie\r\n        ], NativeType.None);\r\n        block = relooper.addBlock(\r\n          instance.base\r\n            ? callExpr // branch will be added later\r\n            : module.block(null, [\r\n                callExpr,\r\n                module.return()\r\n              ])\r\n        );\r\n      }\r\n      relooper.addBranchForSwitch(outer, block, [ id ]);\r\n      blocks.push(block);\r\n\r\n    // otherwise generate one\r\n    } else {\r\n      // traverse references assigned to own fields\r\n      let code = new Array<ExpressionRef>();\r\n      let members = instance.members;\r\n      if (members) {\r\n        for (let member of members.values()) {\r\n          if (member.kind == ElementKind.FIELD) {\r\n            if ((<Field>member).parent === instance) {\r\n              let fieldType = (<Field>member).type;\r\n              if (fieldType.isManaged) {\r\n                let fieldOffset = (<Field>member).memoryOffset;\r\n                assert(fieldOffset >= 0);\r\n                code.push(\r\n                  // if ($2 = value) FIELDCLASS~traverse($2)\r\n                  module.if(\r\n                    module.local_tee(2,\r\n                      module.load(nativeSizeSize, false,\r\n                        module.local_get(0, nativeSizeType),\r\n                        nativeSizeType, fieldOffset\r\n                      )\r\n                    ),\r\n                    module.call(visitInstance.internalName, [\r\n                      module.local_get(2, nativeSizeType), // ref\r\n                      module.local_get(1, NativeType.I32)  // cookie\r\n                    ], NativeType.None)\r\n                  )\r\n                );\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (!instance.base) code.push(module.return());\r\n      let block = relooper.addBlock(\r\n        flatten(module, code, NativeType.None)\r\n      );\r\n      relooper.addBranchForSwitch(outer, block, [ id ]);\r\n      blocks.push(block);\r\n    }\r\n  }\r\n  for (let [id, instance] of managedClasses) {\r\n    let base = instance.base;\r\n    if (base) {\r\n      relooper.addBranch(blocks[id], blocks[base.id]);\r\n    }\r\n  }\r\n  blocks.push(\r\n    relooper.addBlock(\r\n      module.unreachable()\r\n    )\r\n  );\r\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\r\n  compiler.compileFunction(visitInstance);\r\n  module.addFunction(BuiltinSymbols.visit_members, ftype, [ nativeSizeType ], relooper.renderAndDispose(outer, 2));\r\n}\r\n\r\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\r\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\r\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\r\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\r\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\r\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\r\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\r\n}\r\n\r\n/** Compiles runtime type information for use by stdlib. */\r\nexport function compileRTTI(compiler: Compiler): void {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n  var managedClasses = program.managedClasses;\r\n  var count = managedClasses.size;\r\n  var size = 4 + 8 * count;\r\n  var data = new Uint8Array(size);\r\n  writeI32(count, data, 0);\r\n  var off = 4;\r\n  var abvInstance = program.arrayBufferViewInstance;\r\n  var abvPrototype = abvInstance.prototype;\r\n  var arrayPrototype = program.arrayPrototype;\r\n  var setPrototype = program.setPrototype;\r\n  var mapPrototype = program.mapPrototype;\r\n  var lastId = 0;\r\n  for (let [id, instance] of managedClasses) {\r\n    assert(id == lastId++);\r\n    let flags: TypeinfoFlags = 0;\r\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\r\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\r\n      let valueType = instance.getArrayValueType();\r\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\r\n      if (instance.extends(arrayPrototype)) flags |= TypeinfoFlags.ARRAY;\r\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\r\n    } else if (instance.extends(setPrototype)) {\r\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\r\n      assert(typeArguments.length == 1);\r\n      flags |= TypeinfoFlags.SET;\r\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\r\n    } else if (instance.extends(mapPrototype)) {\r\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\r\n      assert(typeArguments.length == 2);\r\n      flags |= TypeinfoFlags.MAP;\r\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\r\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\r\n    }\r\n    writeI32(flags, data, off); off += 4;\r\n    let base = instance.base;\r\n    writeI32(base ? base.id : 0, data, off); off += 4;\r\n  }\r\n  assert(off == size);\r\n  var usizeType = program.options.usizeType;\r\n  var segment = compiler.addMemorySegment(data);\r\n  if (usizeType.size == 8) {\r\n    let offset = segment.offset;\r\n    module.addGlobal(BuiltinSymbols.RTTI_BASE, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\r\n  } else {\r\n    module.addGlobal(BuiltinSymbols.RTTI_BASE, NativeType.I32, false, module.i32(i64_low(segment.offset)));\r\n  }\r\n}\r\n\r\n// Helpers\r\n\r\n/** Evaluates the constant type of a type argument *or* expression. */\r\nfunction evaluateConstantType(\r\n  compiler: Compiler,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  reportNode: CallExpression\r\n): Type | null {\r\n  if (operands.length == 0) { // requires type argument\r\n    if (!typeArguments || typeArguments.length != 1) {\r\n      compiler.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n      );\r\n      return null;\r\n    }\r\n    return typeArguments[0];\r\n  }\r\n  if (operands.length == 1) { // optional type argument\r\n    if (typeArguments) {\r\n      if (typeArguments.length == 1) {\r\n        compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT);\r\n      } else {\r\n        if (typeArguments.length) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return null;\r\n        }\r\n        compiler.compileExpressionRetainType(operands[0], Type.i32);\r\n      }\r\n    } else {\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32);\r\n    }\r\n    return compiler.currentType;\r\n  }\r\n  if (typeArguments && typeArguments.length > 1) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\r\n    );\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Expected_0_arguments_but_got_1,\r\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\r\n  );\r\n  return null;\r\n}\r\n\r\n/** Evaluates a compile-time constant immediate offset argument.*/\r\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\r\n  var expr: ExpressionRef;\r\n  var value: i32;\r\n  if (compiler.options.isWasm64) {\r\n    expr = compiler.precomputeExpression(expression, Type.usize64, ContextualFlags.IMPLICIT);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I64 ||\r\n      getConstValueI64High(expr) != 0 ||\r\n      (value = getConstValueI64Low(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  } else {\r\n    expr = compiler.precomputeExpression(expression, Type.usize32, ContextualFlags.IMPLICIT);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I32 ||\r\n      (value = getConstValueI32(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\n/** Checks a call with a single required type argument. Returns `1` on error. */\r\nfunction checkTypeRequired(\r\n  typeArguments: Type[] | null,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler,\r\n  setCurrentTypeOnError: bool = false\r\n): i32 {\r\n  if (typeArguments) {\r\n    let numTypeArguments = typeArguments.length;\r\n    if (numTypeArguments == 1) return 0;\r\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\r\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\r\n    );\r\n  } else {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.range, \"1\", \"0\"\r\n    );\r\n  }\r\n  return 1;\r\n}\r\n\r\n/** Checks a call with a single optional type argument. Returns `1` on error. */\r\nfunction checkTypeOptional(\r\n  typeArguments: Type[] | null,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler,\r\n  setCurrentTypeOnError: bool = false\r\n): i32 {\r\n  if (typeArguments) {\r\n    let numTypeArguments = typeArguments.length;\r\n    if (numTypeArguments == 1) return 0;\r\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\r\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** Checks a call that is not generic. Returns `1` on error. */\r\nfunction checkTypeAbsent(\r\n  typeArguments: Type[] | null,\r\n  reportNode: CallExpression,\r\n  prototype: FunctionPrototype\r\n): i32 {\r\n  if (typeArguments) {\r\n    prototype.program.error(\r\n      DiagnosticCode.Type_0_is_not_generic,\r\n      reportNode.typeArgumentsRange, prototype.internalName\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\r\nfunction checkArgsRequired(\r\n  operands: Expression[],\r\n  expected: i32,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler\r\n): i32 {\r\n  if (operands.length != expected) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_arguments_but_got_1,\r\n      reportNode.range, expected.toString(), operands.length.toString()\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\r\nfunction checkArgsOptional(\r\n  operands: Expression[],\r\n  expectedMinimum: i32,\r\n  expectedMaximum: i32,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler\r\n): i32 {\r\n  var numOperands = operands.length;\r\n  if (numOperands < expectedMinimum) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\r\n    );\r\n    return 1;\r\n  } else if (numOperands > expectedMaximum) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_arguments_but_got_1,\r\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n","/**\r\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\r\n * @module decompiler\r\n *//***/\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  ExpressionId,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  HostOp,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  Index,\r\n  getFunctionName,\r\n  getFunctionBody,\r\n  getFunctionParamCount,\r\n  getFunctionParamType,\r\n  getFunctionResultType,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getBlockName,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getIfCondition,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getLoopName,\r\n  getLoopBody,\r\n  getBreakName,\r\n  getBreakCondition,\r\n  getLocalGetIndex,\r\n  getLocalSetIndex,\r\n  getLocalSetValue,\r\n  getLoadOffset,\r\n  getLoadPtr,\r\n  getStoreOffset,\r\n  getStorePtr,\r\n  getStoreValue,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getUnaryOp,\r\n  getUnaryValue,\r\n  getBinaryOp,\r\n  getBinaryLeft,\r\n  getBinaryRight,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getSelectCondition,\r\n  getDropValue,\r\n  getReturnValue,\r\n  getHostOp,\r\n  getHostOperand\r\n} from \"./module\";\r\n\r\n// TODO :-)\r\n\r\nexport class Decompiler {\r\n\r\n  static decompile(module: Module): string {\r\n    var decompiler = new Decompiler();\r\n    decompiler.decompile(module);\r\n    return decompiler.finish();\r\n  }\r\n\r\n  text: string[] = [];\r\n  functionId: i32 = 0;\r\n\r\n  constructor() { }\r\n\r\n  /** Decompiles a module to an AST that can then be serialized. */\r\n  decompile(module: Module): void {\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  decompileFunction(func: FunctionRef): void {\r\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\r\n    var body = getFunctionBody(func);\r\n    this.push(\"function \");\r\n    this.push(name);\r\n    this.push(\"(\");\r\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\r\n      if (i > 0) this.push(\", \");\r\n      this.push(\"$\");\r\n      this.push(i.toString(10));\r\n      this.push(\": \");\r\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\r\n    }\r\n    this.push(\"): \");\r\n    this.push(nativeTypeToType(getFunctionResultType(func)));\r\n    this.push(\" \");\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"{\\n\");\r\n    }\r\n    this.decompileExpression(body);\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"\\n}\\n\");\r\n    }\r\n    ++this.functionId;\r\n  }\r\n\r\n  decompileExpression(expr: ExpressionRef): void {\r\n    var id = getExpressionId(expr);\r\n    var type = getExpressionType(expr);\r\n\r\n    var nested: ExpressionRef;\r\n    var string: string | null;\r\n    var i: Index, k: Index;\r\n\r\n    switch (id) {\r\n      case ExpressionId.Block: { // TODO: magic\r\n        if ((string = getBlockName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"{\\n\");\r\n        k = getBlockChildCount(expr);\r\n        for (i = 0; i < k; ++i) {\r\n          this.decompileExpression(getBlockChild(expr, i));\r\n        }\r\n        this.push(\"}\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.If: {\r\n        if (type == NativeType.None) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\") \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          if (nested = getIfFalse(expr)) {\r\n            this.push(\" else \");\r\n            this.decompileExpression(nested);\r\n          }\r\n        } else {\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\" ? \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          this.push(\" : \");\r\n          this.decompileExpression(getIfFalse(expr));\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Loop: {\r\n        if ((string = getLoopName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"do \");\r\n        this.decompileExpression(getLoopBody(expr));\r\n        this.push(\"while (0);\\n\");\r\n      }\r\n      case ExpressionId.Break: {\r\n        if (nested = getBreakCondition(expr)) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(nested);\r\n          this.push(\") \");\r\n        }\r\n        if ((string = getBreakName(expr)) != null) {\r\n          this.push(\"break \");\r\n          this.push(string);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"break;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Switch:\r\n      case ExpressionId.Call:\r\n      case ExpressionId.CallIndirect: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.LocalGet: {\r\n        this.push(\"$\");\r\n        this.push(getLocalGetIndex(expr).toString(10));\r\n        return;\r\n      }\r\n      case ExpressionId.LocalSet: {\r\n        this.push(\"$\");\r\n        this.push(getLocalSetIndex(expr).toString(10));\r\n        this.push(\" = \");\r\n        this.decompileExpression(getLocalSetValue(expr));\r\n        return;\r\n      }\r\n      case ExpressionId.GlobalGet:\r\n      case ExpressionId.GlobalSet: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.Load: {\r\n        this.push(\"load<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getLoadOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getLoadPtr(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Store: {\r\n        this.push(\"store<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getStoreOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getStorePtr(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getStoreValue(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Const: {\r\n        switch (type) {\r\n          case NativeType.I32: {\r\n            this.push(getConstValueI32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.I64: {\r\n            this.push(\r\n              i64_to_string(\r\n                i64_new(\r\n                  getConstValueI64Low(expr),\r\n                  getConstValueI64High(expr)\r\n                )\r\n              )\r\n            );\r\n            return;\r\n          }\r\n          case NativeType.F32: {\r\n            this.push(getConstValueF32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.F64: {\r\n            this.push(getConstValueF64(expr).toString(10));\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.ClzI32: {\r\n            this.push(\"clz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI32: {\r\n            this.push(\"ctz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI32: {\r\n            this.push(\"popcnt<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NegF32:\r\n          case UnaryOp.NegF64: {\r\n            this.push(\"-\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF32: {\r\n            this.push(\"abs<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF32: {\r\n            this.push(\"ceil<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF32: {\r\n            this.push(\"floor<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32: {\r\n            this.push(\"trunc<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF32: {\r\n            this.push(\"nearest<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF32: {\r\n            this.push(\"sqrt<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.push(\"!\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ClzI64: {\r\n            this.push(\"clz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI64: {\r\n            this.push(\"ctz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI64: {\r\n            this.push(\"popcnt<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF64: {\r\n            this.push(\"abs<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF64: {\r\n            this.push(\"ceil<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF64: {\r\n            this.push(\"floor<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64: {\r\n            this.push(\"trunc<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF64: {\r\n            this.push(\"nearest<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF64: {\r\n            this.push(\"sqrt<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendI32: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendU32: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.WrapI64: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF32: {\r\n            this.push(\"reinterpret<f32,i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF64: {\r\n            this.push(\"reinterpret<f64,i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF32: {\r\n            this.push(\"<f32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF64: {\r\n            this.push(\"<f64><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF32: {\r\n            this.push(\"<f32><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF64: {\r\n            this.push(\"<f64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.PromoteF32: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.DemoteF64: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI32: {\r\n            this.push(\"reinterpret<i32,f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI64: {\r\n            this.push(\"reinterpret<i64,f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: { // TODO: precedence\r\n        switch (getBinaryOp(expr)) {\r\n          case BinaryOp.AddI32:\r\n          case BinaryOp.AddI64:\r\n          case BinaryOp.AddF32:\r\n          case BinaryOp.AddF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" + \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.SubI32:\r\n          case BinaryOp.SubI64:\r\n          case BinaryOp.SubF32:\r\n          case BinaryOp.SubF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" - \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.MulI32:\r\n          case BinaryOp.MulI64:\r\n          case BinaryOp.MulF32:\r\n          case BinaryOp.MulF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" * \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivI32:\r\n          case BinaryOp.DivI64:\r\n          case BinaryOp.DivF32:\r\n          case BinaryOp.DivF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.AndI32:\r\n          case BinaryOp.AndI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" & \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.OrI32:\r\n          case BinaryOp.OrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" | \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.XorI32:\r\n          case BinaryOp.XorI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" ^ \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShlI32:\r\n          case BinaryOp.ShlI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" << \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrU32:\r\n          case BinaryOp.ShrU64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >>> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrI32:\r\n          case BinaryOp.ShrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI32: {\r\n            this.push(\"rotl<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI32: {\r\n            this.push(\"rotr<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" == \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" != \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI64: {\r\n            this.push(\"rotl<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI64: {\r\n            this.push(\"rotr<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.LtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF32: {\r\n            this.push(\"copysign<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF32: {\r\n            this.push(\"min<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF32: {\r\n            this.push(\"max<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF64: {\r\n            this.push(\"copysign<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF64: {\r\n            this.push(\"min<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF64: {\r\n            this.push(\"max<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Select: {\r\n        this.push(\"select<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.decompileExpression(getSelectThen(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectElse(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectCondition(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Drop: {\r\n        this.decompileExpression(getDropValue(expr));\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Return: {\r\n        if (nested = getReturnValue(expr)) {\r\n          this.push(\"return \");\r\n          this.decompileExpression(nested);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"return;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Host: {\r\n        switch (getHostOp(expr)) {\r\n          case HostOp.MemorySize: {\r\n            this.push(\"memory.size()\");\r\n            return;\r\n          }\r\n          case HostOp.MemoryGrow: {\r\n            this.push(\"memory.grow(\");\r\n            this.decompileExpression(getHostOperand(expr, 0));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Nop: {\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Unreachable: {\r\n        this.push(\"unreachable()\");\r\n        return;\r\n      }\r\n      case ExpressionId.AtomicCmpxchg:\r\n      case ExpressionId.AtomicRMW:\r\n      case ExpressionId.AtomicWait:\r\n      case ExpressionId.AtomicNotify:\r\n    }\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  private push(text: string): void {\r\n    // mostly here so we can add debugging if necessary\r\n    this.text.push(text);\r\n  }\r\n\r\n  finish(): string {\r\n    var ret = this.text.join(\"\");\r\n    this.text = [];\r\n    return ret;\r\n  }\r\n}\r\n\r\nfunction nativeTypeToType(type: NativeType): string {\r\n  switch (type) {\r\n    case NativeType.None: return \"void\";\r\n    case NativeType.I32: return \"i32\";\r\n    case NativeType.I64: return \"i64\";\r\n    case NativeType.F32: return \"f32\";\r\n    case NativeType.F64: return \"f64\";\r\n    case NativeType.V128: return \"v128\";\r\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\r\n    case NativeType.Auto: throw new Error(\"auto type\");\r\n    default: throw new Error(\"unexpected type\");\r\n  }\r\n}\r\n","/**\r\n * Definition builders for WebIDL and TypeScript.\r\n * @module definitions\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program,\r\n  Element,\r\n  ElementKind,\r\n  Global,\r\n  Enum,\r\n  EnumValue,\r\n  Field,\r\n  Function,\r\n  FunctionPrototype,\r\n  Class,\r\n  ClassPrototype,\r\n  Namespace,\r\n  ConstantValueKind,\r\n  Interface,\r\n  Property,\r\n  PropertyPrototype\r\n} from \"./program\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  indent\r\n} from \"./util\";\r\n\r\n/** Walker base class. */\r\nabstract class ExportsWalker {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Whether to include private members */\r\n  includePrivate: bool;\r\n  /** Elements still to do. */\r\n  todo: Element[] = [];\r\n  /** Already seen elements. */\r\n  seen: Set<Element> = new Set();\r\n\r\n  /** Constructs a new Element walker. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    this.program = program;\r\n    this.includePrivate;\r\n  }\r\n\r\n  /** Walks all elements and calls the respective handlers. */\r\n  walk(): void {\r\n    for (let file of this.program.filesByName.values()) {\r\n      let members = file.members;\r\n      if (!members) continue;\r\n      for (let member of members.values()) {\r\n        // FIXME: doesn't honor the actual externally visible name\r\n        this.visitElement(member);\r\n      }\r\n    }\r\n    var todo = this.todo;\r\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\r\n  }\r\n\r\n  /** Visits an element.*/\r\n  visitElement(element: Element): void {\r\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.visitFunctionInstances(<FunctionPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        this.visitClassInstances(<ClassPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        this.visitPropertyInstances(<PropertyPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prop = <Property>element;\r\n        let getter = prop.getterInstance;\r\n        if (getter) this.visitFunction(getter);\r\n        let setter = prop.setterInstance;\r\n        if (setter) this.visitFunction(setter);\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE: {\r\n        if (hasCompiledMember(element)) this.visitNamespace(element);\r\n        break;\r\n      }\r\n      case ElementKind.TYPEDEFINITION: break;\r\n      default: assert(false);\r\n    }\r\n  }\r\n\r\n  private visitFunctionInstances(element: FunctionPrototype): void {\r\n    var instances = element.instances;\r\n    if (instances) {\r\n      for (let instance of instances.values()) {\r\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  private visitClassInstances(element: ClassPrototype): void {\r\n    var instances = element.instances;\r\n    if (instances) {\r\n      for (let instance of instances.values()) {\r\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  private visitPropertyInstances(element: PropertyPrototype): void {\r\n    // var instances = element.instances;\r\n    // if (instances) {\r\n    //   for (let instance of instances.values()) {\r\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\r\n    //   }\r\n    // }\r\n    assert(false);\r\n  }\r\n\r\n  abstract visitGlobal(element: Global): void;\r\n  abstract visitEnum(element: Enum): void;\r\n  abstract visitFunction(element: Function): void;\r\n  abstract visitClass(element: Class): void;\r\n  abstract visitInterface(element: Interface): void;\r\n  abstract visitField(element: Field): void;\r\n  abstract visitNamespace(element: Element): void;\r\n}\r\n\r\n/** A WebIDL definitions builder. */\r\nexport class IDLBuilder extends ExportsWalker {\r\n\r\n  /** Builds WebIDL definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new IDLBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) sb.push(\"const \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\" \");\r\n    sb.push(element.name);\r\n    if (isConst) {\r\n      switch (element.constantValueKind) {\r\n        case ConstantValueKind.INTEGER: {\r\n          sb.push(\" = \");\r\n          sb.push(i64_to_string(element.constantIntegerValue));\r\n          break;\r\n        }\r\n        case ConstantValueKind.FLOAT: {\r\n          sb.push(\" = \");\r\n          sb.push(element.constantFloatValue.toString());\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.name);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\r\n          indent(sb, this.indentLevel);\r\n          if (isConst) sb.push(\"const \");\r\n          else sb.push(\"readonly \");\r\n          sb.push(\"unsigned long \");\r\n          sb.push(name);\r\n          if (isConst) {\r\n            sb.push(\" = \");\r\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\r\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\r\n          }\r\n          sb.push(\";\\n\");\r\n        }\r\n      }\r\n      for (let member of members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\" \");\r\n    sb.push(element.name);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n      sb.push(\" \");\r\n      sb.push(signature.getParameterName(i));\r\n    }\r\n    sb.push(\");\\n\");\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      indent(sb, this.indentLevel);\r\n      sb.push(\"interface \");\r\n      sb.push(element.name);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.name);\r\n    sb.push(\" {\\n\");\r\n    // TODO\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    // TODO\r\n  }\r\n\r\n  visitNamespace(element: Namespace): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.name);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"byte\";\r\n      case TypeKind.I16: return \"short\";\r\n      case TypeKind.I32: return \"long\";\r\n      case TypeKind.I64: return \"long long\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\r\n      case TypeKind.U8: return \"octet\";\r\n      case TypeKind.U16: return \"unsigned short\";\r\n      case TypeKind.U32: return \"unsigned long\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"unsigned long long\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"boolean\";\r\n      case TypeKind.F32: return \"unrestricted float\";\r\n      case TypeKind.F64: return \"unrestricted double\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"interface ASModule {\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n/** A TypeScript definitions builder. */\r\nexport class TSDBuilder extends ExportsWalker {\r\n\r\n  /** Builds TypeScript definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new TSDBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.STATIC)) {\r\n      if (isConst) sb.push(\"static readonly \");\r\n      else sb.push(\"static \");\r\n    } else {\r\n      if (isConst) sb.push(\"const \");\r\n      else sb.push(\"var \");\r\n    }\r\n    sb.push(element.name);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"enum \");\r\n    sb.push(element.name);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      let numMembers = members.size;\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          indent(sb, this.indentLevel);\r\n          sb.push(name);\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            sb.push(\" = \");\r\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\r\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\r\n          }\r\n          sb.push(\",\\n\");\r\n          --numMembers;\r\n        }\r\n      }\r\n      if (numMembers) this.visitNamespace(element);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.GET)) {\r\n      sb.push(element.identifierNode.text); // 'get:funcName' internally\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n      sb.push(\";\\n\");\r\n      return;\r\n    } else {\r\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\r\n      sb.push(element.name);\r\n    }\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(signature.getParameterName(i));\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n    }\r\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\r\n      sb.push(\")\");\r\n    } else {\r\n      sb.push(\"): \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n    }\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    var sb = this.sb;\r\n    var isInterface = element.kind == ElementKind.INTERFACE;\r\n    indent(sb, this.indentLevel++);\r\n    if (isInterface) {\r\n      sb.push(\"interface \");\r\n    } else {\r\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\r\n      sb.push(\"class \");\r\n    }\r\n    sb.push(element.name);\r\n    var base = element.base;\r\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\r\n      sb.push(\" extends \");\r\n      sb.push(base.name); // TODO: fqn\r\n    }\r\n    sb.push(\" {\\n\");\r\n    var members = element.parent.members; // static\r\n    if (members) {\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n    }\r\n    var ctor = element.constructorInstance;\r\n    if (ctor) this.visitFunction(ctor);\r\n    members = element.members; // instance\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    if (element.is(CommonFlags.PRIVATE)) return;\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\r\n    sb.push(element.name);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitNamespace(element: Element): void {\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      let sb = this.sb;\r\n      indent(sb, this.indentLevel++);\r\n      sb.push(\"namespace \");\r\n      sb.push(element.name);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"I64\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"U64\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.V128: return \"v128\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"declare module ASModule {\\n\");\r\n    sb.push(\"  type i8 = number;\\n\");\r\n    sb.push(\"  type i16 = number;\\n\");\r\n    sb.push(\"  type i32 = number;\\n\");\r\n    sb.push(\"  type u8 = number;\\n\");\r\n    sb.push(\"  type u16 = number;\\n\");\r\n    sb.push(\"  type u32 = number;\\n\");\r\n    sb.push(\"  type f32 = number;\\n\");\r\n    sb.push(\"  type f64 = number;\\n\");\r\n    sb.push(\"  type bool = any;\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    sb.push(\"export default ASModule;\\n\");\r\n    return this.sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n/** Tests if a namespace-like element has at least one compiled member. */\r\nfunction hasCompiledMember(element: Element): bool {\r\n  var members = element.members;\r\n  if (members) {\r\n    for (let member of members.values()) {\r\n      switch (member.kind) {\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          let instances = (<FunctionPrototype>member).instances;\r\n          if (instances) {\r\n            for (let instance of instances.values()) {\r\n              if (instance.is(CommonFlags.COMPILED)) return true;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          let instances = (<ClassPrototype>member).instances;\r\n          if (instances) {\r\n            for (let instance of instances.values()) {\r\n              if (instance.is(CommonFlags.COMPILED)) return true;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * A TypeScript parser for the AssemblyScript subset.\r\n * @module parser\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  LIBRARY_PREFIX,\r\n  PATH_DELIMITER\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program\r\n} from \"./program\";\r\n\r\nimport {\r\n  Tokenizer,\r\n  Token,\r\n  Range,\r\n  CommentHandler,\r\n  IdentifierHandling\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  normalizePath\r\n} from \"./util\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  SignatureNode,\r\n  ArrowKind,\r\n\r\n  Expression,\r\n  AssertionKind,\r\n  CallExpression,\r\n  ClassExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DecoratorNode,\r\n  DoStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportImportStatement,\r\n  ExportMember,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  ForStatement,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  IndexSignatureDeclaration,\r\n  NamespaceDeclaration,\r\n  ParameterNode,\r\n  ParameterKind,\r\n  ReturnStatement,\r\n  SwitchCase,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  TypeDeclaration,\r\n  TypeParameterNode,\r\n  VariableStatement,\r\n  VariableDeclaration,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  mangleInternalPath,\r\n  nodeIsCallable,\r\n  nodeIsGenericCallable\r\n} from \"./ast\";\r\n\r\n/** Parser interface. */\r\nexport class Parser extends DiagnosticEmitter {\r\n\r\n  /** Program being created. */\r\n  program: Program;\r\n  /** Source file names to be requested next. */\r\n  backlog: string[] = new Array();\r\n  /** Source file names already seen, that is processed or backlogged. */\r\n  seenlog: Set<string> = new Set();\r\n  /** Source file names already completely processed. */\r\n  donelog: Set<string> = new Set();\r\n  /** Optional handler to intercept comments while tokenizing. */\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new parser. */\r\n  constructor() {\r\n    super();\r\n    this.program = new Program(this.diagnostics);\r\n  }\r\n\r\n  /** Parses a file and adds its definitions to the program. */\r\n  parseFile(\r\n    text: string,\r\n    path: string,\r\n    isEntry: bool\r\n  ): void {\r\n    var normalizedPath = normalizePath(path);\r\n    var internalPath = mangleInternalPath(normalizedPath);\r\n\r\n    // check if already processed\r\n    if (this.donelog.has(internalPath)) return;\r\n    this.donelog.add(internalPath); // do not parse again\r\n    this.seenlog.add(internalPath); // do not request again\r\n\r\n    // create the source element\r\n    var source = new Source(\r\n      normalizedPath,\r\n      text,\r\n      isEntry\r\n        ? SourceKind.ENTRY\r\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\r\n          ? SourceKind.LIBRARY\r\n          : SourceKind.DEFAULT\r\n    );\r\n    var program = this.program;\r\n    program.sources.push(source);\r\n\r\n    // tokenize and parse\r\n    var tn = new Tokenizer(source, program.diagnostics);\r\n    tn.onComment = this.onComment;\r\n    source.tokenizer = tn;\r\n    var statements = source.statements;\r\n    while (!tn.skip(Token.ENDOFFILE)) {\r\n      let statement = this.parseTopLevelStatement(tn, null);\r\n      if (statement) statements.push(statement);\r\n    }\r\n    tn.finish();\r\n  }\r\n\r\n  /** Parses a top-level statement. */\r\n  parseTopLevelStatement(\r\n    tn: Tokenizer,\r\n    namespace: NamespaceDeclaration | null = null\r\n  ): Statement | null {\r\n    var flags = CommonFlags.NONE;\r\n    var startPos: i32 = -1;\r\n\r\n    // check decorators\r\n    var decorators: DecoratorNode[] | null = null;\r\n    while (tn.skip(Token.AT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) {\r\n        this.skipStatement(tn);\r\n        continue;\r\n      }\r\n      if (!decorators) decorators = [decorator];\r\n      else decorators.push(decorator);\r\n    }\r\n\r\n    // check modifiers\r\n    var exportStart: i32 = 0;\r\n    var exportEnd: i32 = 0;\r\n    if (tn.skip(Token.EXPORT)) {\r\n      if (tn.skip(Token.DEFAULT)) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          tn.range()\r\n        );\r\n      }\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      flags |= CommonFlags.EXPORT;\r\n      exportStart = tn.tokenPos;\r\n      exportEnd = tn.pos;\r\n    }\r\n\r\n    var declareStart: i32 = 0;\r\n    var declareEnd: i32 = 0;\r\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\r\n    if (tn.skip(Token.DECLARE)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      if (contextIsAmbient) {\r\n        this.error(\r\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\r\n    } else if (contextIsAmbient) {\r\n      flags |= CommonFlags.AMBIENT;\r\n    }\r\n\r\n    // parse the statement\r\n    var statement: Statement | null = null;\r\n\r\n    // handle declarations\r\n    var first = tn.peek();\r\n    if (startPos < 0) startPos = tn.nextTokenPos;\r\n    switch (first) {\r\n      case Token.CONST: {\r\n        tn.next();\r\n        flags |= CommonFlags.CONST;\r\n        if (tn.skip(Token.ENUM)) {\r\n          statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        } else {\r\n          statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        }\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.LET: flags |= CommonFlags.LET;\r\n      case Token.VAR: {\r\n        tn.next();\r\n        statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ENUM: {\r\n        tn.next();\r\n        statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.FUNCTION: {\r\n        tn.next();\r\n        statement = this.parseFunction(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ABSTRACT: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (!tn.skip(Token.CLASS)) {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n          break;\r\n        } else {\r\n          tn.discard(state);\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        // fall through\r\n      }\r\n      case Token.CLASS:\r\n      case Token.INTERFACE: {\r\n        tn.next();\r\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.NAMESPACE: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      case Token.IMPORT: {\r\n        tn.next();\r\n        flags |= CommonFlags.IMPORT;\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExportImport(tn, startPos);\r\n        } else {\r\n          statement = this.parseImport(tn);\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n\r\n        // handle plain exports\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\r\n\r\n        // handle non-declaration statements\r\n        } else {\r\n          if (exportEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(exportStart, exportEnd), \"export\"\r\n            ); // recoverable\r\n          }\r\n          if (declareEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(declareStart, declareEnd), \"declare\"\r\n            ); // recoverable\r\n          }\r\n          if (!namespace) {\r\n            statement = this.parseStatement(tn, true);\r\n          } // TODO: else?\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // check for decorators that weren't consumed\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          decorators[i].range\r\n        );\r\n      }\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  /** Obtains the next file to parse. */\r\n  nextFile(): string | null {\r\n    var backlog = this.backlog;\r\n    return backlog.length ? backlog.shift() : null;\r\n  }\r\n\r\n  /** Finishes parsing and returns the program. */\r\n  finish(): Program {\r\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\r\n    this.backlog = [];\r\n    this.seenlog.clear();\r\n    this.donelog.clear();\r\n    return this.program;\r\n  }\r\n\r\n  /** Parses a type. */\r\n  parseType(\r\n    tn: Tokenizer,\r\n    acceptParenthesized: bool = true,\r\n    suppressErrors: bool = false\r\n  ): CommonTypeNode | null {\r\n\r\n    // NOTE: this parses our limited subset\r\n    var token = tn.next();\r\n    var startPos = tn.tokenPos;\r\n\r\n    var type: CommonTypeNode;\r\n\r\n    // '(' ...\r\n    if (token == Token.OPENPAREN) {\r\n\r\n      // '(' FunctionSignature ')' '|' 'null'?\r\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\r\n      // FunctionSignature?\r\n      let signature = this.tryParseSignature(tn);\r\n      if (signature) {\r\n        if (isNullableSignature) {\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \")\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.BAR)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"|\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.NULL)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          signature.isNullable = true;\r\n        }\r\n        return signature;\r\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n      // Type (',' Type)* ')'\r\n      if (acceptParenthesized) {\r\n        let innerType = this.parseType(tn, false, suppressErrors);\r\n        if (!innerType) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"}\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        type = innerType;\r\n        type.range.start = startPos;\r\n        type.range.end = tn.pos;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // 'void'\r\n    } else if (token == Token.VOID) {\r\n      type = Node.createType(\r\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'this'\r\n    } else if (token == Token.THIS) {\r\n      type = Node.createType(\r\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'true'\r\n    } else if (token == Token.TRUE || token == Token.FALSE) {\r\n      type = Node.createType(\r\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // StringLiteral\r\n    } else if (token == Token.STRINGLITERAL) {\r\n      tn.readString();\r\n      type = Node.createType(\r\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // Identifier\r\n    } else if (token == Token.IDENTIFIER) {\r\n      let first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\r\n      let current = first;\r\n      let parameters: TypeNode[] | null = null;\r\n      let nullable = false;\r\n\r\n      // Identifier ('.' Identifier)+\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\r\n          current.next = next;\r\n          current = next;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range(tn.pos)\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n\r\n      // Name<T>\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        do {\r\n          let parameter = this.parseType(tn, true, suppressErrors);\r\n          if (!parameter) return null;\r\n          if (!parameters) parameters = [<TypeNode>parameter];\r\n          else parameters.push(<TypeNode>parameter);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \">\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      // ... | null\r\n      while (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(first, parameters || [], nullable, tn.range(startPos, tn.pos));\r\n    } else {\r\n      if (!suppressErrors) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    // ... [][]\r\n    while (tn.skip(Token.OPENBRACKET)) {\r\n      let bracketStart = tn.tokenPos;\r\n      if (!tn.skip(Token.CLOSEBRACKET)) {\r\n        if (!suppressErrors) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"]\"\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let bracketRange = tn.range(bracketStart, tn.pos);\r\n\r\n      // ...[] | null\r\n      let nullable = false;\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(\r\n        Node.createSimpleTypeName(\"Array\", bracketRange),\r\n        [ type ],\r\n        nullable,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      if (nullable) break;\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  // Indicates whether tryParseSignature determined that it is handling a Signature\r\n  private tryParseSignatureIsSignature: bool = false;\r\n\r\n  /** Parses a function signature, as used in type declarations. */\r\n  tryParseSignature(\r\n    tn: Tokenizer\r\n  ): SignatureNode | null {\r\n\r\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\r\n\r\n    var state = tn.mark();\r\n    var startPos = tn.tokenPos;\r\n    var parameters: ParameterNode[] | null = null;\r\n    var thisType: TypeNode | null = null;\r\n    var isSignature: bool = false;\r\n\r\n    if (tn.skip(Token.CLOSEPAREN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      parameters = [];\r\n\r\n    } else {\r\n      isSignature = false; // not yet known\r\n      do {\r\n        let kind = ParameterKind.DEFAULT;\r\n        if (tn.skip(Token.DOT_DOT_DOT)) {\r\n          isSignature = true;\r\n          tn.discard(state);\r\n          kind = ParameterKind.REST;\r\n        }\r\n        if (tn.skip(Token.THIS)) {\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let t = this.parseType(tn, false);\r\n            if (!t) return null;\r\n            if (t.kind != NodeKind.TYPE) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                t.range\r\n              );\r\n              this.tryParseSignatureIsSignature = true;\r\n              return null;\r\n            }\r\n            thisType = <TypeNode>t;\r\n          } else {\r\n            tn.reset(state);\r\n            this.tryParseSignatureIsSignature = false;\r\n            return null;\r\n          }\r\n        } else if (tn.skipIdentifier()) {\r\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\r\n          if (tn.skip(Token.QUESTION)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            if (kind == ParameterKind.REST) {\r\n              this.error(\r\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n                tn.range()\r\n              ); // recoverable\r\n            } else {\r\n              kind = ParameterKind.OPTIONAL;\r\n            }\r\n          }\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let type = this.parseType(tn); // not suppressing errors because known\r\n            if (!type) {\r\n              this.tryParseSignatureIsSignature = isSignature;\r\n              return null;\r\n            }\r\n            let param = new ParameterNode();\r\n            param.parameterKind = kind;\r\n            param.name = name;\r\n            param.type = type;\r\n            if (!parameters) parameters = [ param ];\r\n            else parameters.push(param);\r\n          } else {\r\n            if (isSignature) {\r\n              this.error(\r\n                DiagnosticCode.Type_expected,\r\n                tn.range()\r\n              ); // recoverable\r\n            }\r\n          }\r\n        } else {\r\n          if (isSignature) {\r\n            this.error(\r\n              DiagnosticCode.Identifier_expected,\r\n              tn.range()\r\n            );\r\n          } else {\r\n            tn.reset(state);\r\n          }\r\n          this.tryParseSignatureIsSignature = isSignature;\r\n          return null;\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        if (isSignature) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null;\r\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) {\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    } else {\r\n      if (isSignature) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=>\"\r\n        );\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n      this.tryParseSignatureIsSignature = isSignature;\r\n      return null;\r\n    }\r\n    this.tryParseSignatureIsSignature = true;\r\n    return Node.createSignature(\r\n      parameters || [],\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n  }\r\n\r\n  // statements\r\n\r\n  parseDecorator(\r\n    tn: Tokenizer\r\n  ): DecoratorNode | null {\r\n\r\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let name = tn.readIdentifier();\r\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skipIdentifier()) {\r\n          name = tn.readIdentifier();\r\n          expression = Node.createPropertyAccessExpression(\r\n            expression,\r\n            Node.createIdentifierExpression(name, tn.range()),\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let args: Expression[] | null;\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        args = this.parseArguments(tn);\r\n        if (args) {\r\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\r\n        }\r\n      } else {\r\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVariable(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): VariableStatement | null {\r\n\r\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\r\n\r\n    var members = new Array<VariableDeclaration>();\r\n    do {\r\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\r\n      if (!member) return null;\r\n      members.push(<VariableDeclaration>member);\r\n    } while (tn.skip(Token.COMMA));\r\n\r\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseVariableDeclaration(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags,\r\n    parentDecorators: DecoratorNode[] | null\r\n  ): VariableDeclaration | null {\r\n\r\n    // before: Identifier (':' Type)? ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var flags = parentFlags;\r\n    if (tn.skip(Token.EXCLAMATION)) {\r\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\r\n    }\r\n\r\n    var type: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      type = this.parseType(tn);\r\n    }\r\n\r\n    var initializer: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!initializer) return null;\r\n    } else {\r\n      if (flags & CommonFlags.CONST) {\r\n        if (!(flags & CommonFlags.AMBIENT)) {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            identifier.range\r\n          ); // recoverable\r\n        }\r\n      } else if (!type) { // neither type nor initializer\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range(tn.pos)\r\n        ); // recoverable\r\n      }\r\n    }\r\n    var range = Range.join(identifier.range, tn.range());\r\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\r\n      this.error(\r\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\r\n        range);\r\n    }\r\n    return Node.createVariableDeclaration(\r\n      identifier,\r\n      type,\r\n      initializer,\r\n      parentDecorators,\r\n      flags,\r\n      range\r\n    );\r\n  }\r\n\r\n  parseEnum(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): EnumDeclaration | null {\r\n\r\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\r\n\r\n    if (tn.next() != Token.IDENTIFIER) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (tn.next() != Token.OPENBRACE) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n    var members = new Array<EnumValueDeclaration>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\r\n      if (!member) return null;\r\n      members.push(<EnumValueDeclaration>member);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEBRACE)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    var ret = Node.createEnumDeclaration(\r\n      identifier,\r\n      members,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseEnumValue(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags\r\n  ): EnumValueDeclaration | null {\r\n\r\n    // before: Identifier ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var value: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!value) return null;\r\n    }\r\n    return Node.createEnumValueDeclaration(\r\n      identifier,\r\n      value,\r\n      parentFlags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseReturn(\r\n    tn: Tokenizer\r\n  ): ReturnStatement | null {\r\n\r\n    // at 'return': Expression | (';' | '}' | ...'\\n')\r\n\r\n    var expr: Expression | null = null;\r\n    if (\r\n      tn.peek(true) != Token.SEMICOLON &&\r\n      tn.nextToken != Token.CLOSEBRACE &&\r\n      !tn.nextTokenOnNewLine\r\n    ) {\r\n      if (!(expr = this.parseExpression(tn))) return null;\r\n    }\r\n\r\n    var ret = Node.createReturnStatement(expr, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTypeParameters(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode[] | null {\r\n\r\n    // at '<': TypeParameter (',' TypeParameter)* '>'\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    var seenOptional = false;\r\n    while (!tn.skip(Token.GREATERTHAN)) {\r\n      let typeParameter = this.parseTypeParameter(tn);\r\n      if (!typeParameter) return null;\r\n      if (typeParameter.defaultType !== null) {\r\n        seenOptional = true;\r\n      } else if (seenOptional) {\r\n        this.error(\r\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\r\n          typeParameter.range\r\n        );\r\n        typeParameter.defaultType = null;\r\n      }\r\n      if (!typeParameters) typeParameters = [ typeParameter ];\r\n      else typeParameters.push(typeParameter);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.GREATERTHAN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    if (!(typeParameters && typeParameters.length)) {\r\n      this.error(\r\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\r\n        tn.range()\r\n      ); // recoverable\r\n    }\r\n    return typeParameters;\r\n  }\r\n\r\n  parseTypeParameter(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode | null {\r\n\r\n    // before: Identifier ('extends' Type)? ('=' Type)?\r\n\r\n    if (tn.next() == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(\r\n        tn.readIdentifier(),\r\n        tn.range()\r\n      );\r\n      let extendsType: TypeNode | null = null;\r\n      if (tn.skip(Token.EXTENDS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        extendsType = <TypeNode>t;\r\n      }\r\n      let defaultType: TypeNode | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        defaultType = <TypeNode>t;\r\n      }\r\n      return Node.createTypeParameter(\r\n        identifier,\r\n        extendsType,\r\n        defaultType,\r\n        Range.join(identifier.range, tn.range())\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private parseParametersThis: TypeNode | null = null;\r\n\r\n  parseParameters(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode[] | null {\r\n\r\n    // at '(': (Parameter (',' Parameter)*)? ')'\r\n\r\n    var parameters = new Array<ParameterNode>();\r\n    var seenRest: ParameterNode | null = null;\r\n    var seenOptional = false;\r\n    var reportedRest = false;\r\n    var thisType: CommonTypeNode | null = null;\r\n\r\n    // check if there is a leading `this` parameter\r\n    this.parseParametersThis = null;\r\n    if (tn.skip(Token.THIS)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        thisType = this.parseType(tn); // reports\r\n        if (!thisType) return null;\r\n        if (thisType.kind == NodeKind.TYPE) {\r\n          this.parseParametersThis = <TypeNode>thisType;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            thisType.range\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n        return null;\r\n      }\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          return parameters;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let param = this.parseParameter(tn, isConstructor); // reports\r\n      if (!param) return null;\r\n      if (seenRest && !reportedRest) {\r\n        this.error(\r\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\r\n          seenRest.name.range\r\n        );\r\n        reportedRest = true;\r\n      }\r\n      switch (param.parameterKind) {\r\n        default: {\r\n          if (seenOptional) {\r\n            this.error(\r\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\r\n              param.name.range\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ParameterKind.OPTIONAL: {\r\n          seenOptional = true;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          seenRest = param;\r\n          break;\r\n        }\r\n      }\r\n      parameters.push(param);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return parameters;\r\n  }\r\n\r\n  parseParameter(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode | null {\r\n\r\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\r\n\r\n    var isRest = false;\r\n    var isOptional = false;\r\n    var startRange: Range | null = null;\r\n    var accessFlags: CommonFlags = CommonFlags.NONE;\r\n    if (isConstructor) {\r\n      if (tn.skip(Token.PUBLIC)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PUBLIC;\r\n      } else if (tn.skip(Token.PROTECTED)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PROTECTED;\r\n      } else if (tn.skip(Token.PRIVATE)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PRIVATE;\r\n      }\r\n      if (tn.peek() == Token.READONLY) {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek() != Token.COLON) { // modifier\r\n          tn.discard(state);\r\n          if (!startRange) startRange = tn.range();\r\n          accessFlags |= CommonFlags.READONLY;\r\n        } else { // identifier\r\n          tn.reset(state);\r\n        }\r\n      }\r\n    }\r\n    if (tn.skip(Token.DOT_DOT_DOT)) {\r\n      if (accessFlags) {\r\n        this.error(\r\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\r\n          tn.range()\r\n        );\r\n      } else {\r\n        startRange = tn.range();\r\n      }\r\n      isRest = true;\r\n    }\r\n    if (tn.skipIdentifier()) {\r\n      if (!isRest) startRange = tn.range();\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let type: CommonTypeNode | null = null;\r\n      if (isOptional = tn.skip(Token.QUESTION)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n            identifier.range\r\n          );\r\n        }\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        type = Node.createOmittedType(tn.range(tn.pos));\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\r\n            identifier.range\r\n          );\r\n        }\r\n        if (isOptional) {\r\n          this.error(\r\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\r\n            identifier.range\r\n          );\r\n        } else {\r\n          isOptional = true;\r\n        }\r\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!initializer) return null;\r\n      }\r\n      let param = Node.createParameter(\r\n        identifier,\r\n        type,\r\n        initializer,\r\n        isRest\r\n          ? ParameterKind.REST\r\n          : isOptional\r\n            ? ParameterKind.OPTIONAL\r\n            : ParameterKind.DEFAULT,\r\n        Range.join(<Range>startRange, tn.range())\r\n      );\r\n      param.flags |= accessFlags;\r\n      return param;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseFunction(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): FunctionDeclaration | null {\r\n\r\n    // at 'function':\r\n    //  Identifier\r\n    //  ('<' TypeParameters)?\r\n    //  '(' Parameters (':' Type)?\r\n    //  '{' Statement* '}'\r\n    //  ';'?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range(tn.pos)\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var signatureStart: i32 = -1;\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      signatureStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"(\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    if (signatureStart < 0) {\r\n      signatureStart = tn.tokenPos;\r\n    }\r\n\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n    var thisType = this.parseParametersThis;\r\n\r\n    var isSetter = (flags & CommonFlags.SET) != 0;\r\n    if (isSetter) {\r\n      if (parameters.length != 1) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n      if (parameters.length && parameters[0].initializer) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (flags & CommonFlags.GET) {\r\n      if (parameters.length) {\r\n        this.error(\r\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn, true, isSetter);\r\n      if (!returnType) return null;\r\n    }\r\n\r\n    if (!returnType) {\r\n      returnType = Node.createOmittedType(\r\n        tn.range(tn.pos)\r\n      );\r\n      if (!isSetter) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          returnType.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      body = this.parseBlockStatement(tn, false);\r\n      if (!body) return null;\r\n    } else if (!(flags & CommonFlags.AMBIENT)) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        tn.range(tn.pos)\r\n      );\r\n    }\r\n\r\n    var ret = Node.createFunctionDeclaration(\r\n      name,\r\n      typeParameters,\r\n      signature,\r\n      body,\r\n      decorators,\r\n      flags,\r\n      ArrowKind.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n    var arrowKind = ArrowKind.NONE;\r\n\r\n    // either at 'function':\r\n    //  Identifier?\r\n    //  '(' Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    if (tn.token == Token.FUNCTION) {\r\n      if (tn.skipIdentifier()) {\r\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      } else { // empty name\r\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n      }\r\n      if (!tn.skip(Token.OPENPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"(\"\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // or at '(' of arrow function:\r\n    //  Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    } else {\r\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\r\n      assert(tn.token == Token.OPENPAREN);\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\r\n    }\r\n\r\n    // TODO: type parameters? doesn't seem worth it.\r\n\r\n    var signatureStart = tn.pos;\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\r\n  }\r\n\r\n  private parseFunctionExpressionCommon(\r\n    tn: Tokenizer,\r\n    name: IdentifierExpression,\r\n    parameters: ParameterNode[],\r\n    arrowKind: ArrowKind,\r\n    startPos: i32 = -1,\r\n    signatureStart: i32 = -1\r\n  ): FunctionExpression | null {\r\n    if (startPos < 0) startPos = name.range.start;\r\n    if (signatureStart < 0) signatureStart = startPos;\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Node.createOmittedType(tn.range(tn.pos));\r\n    }\r\n\r\n    if (arrowKind) {\r\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"=>\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null, // TODO?\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (arrowKind) {\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        body = this.parseBlockStatement(tn, false);\r\n      } else {\r\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\r\n      }\r\n    } else {\r\n      if (!tn.skip(Token.OPENBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"{\"\r\n        );\r\n        return null;\r\n      }\r\n      body = this.parseBlockStatement(tn, false);\r\n    }\r\n    if (!body) return null;\r\n\r\n    var declaration = Node.createFunctionDeclaration(\r\n      name,\r\n      null,\r\n      signature,\r\n      body,\r\n      null,\r\n      CommonFlags.NONE,\r\n      arrowKind,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    return Node.createFunctionExpression(declaration);\r\n  }\r\n\r\n  parseClassOrInterface(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): ClassDeclaration | null {\r\n\r\n    // at ('class' | 'interface'):\r\n    //   Identifier\r\n    //   ('<' TypeParameters)?\r\n    //   ('extends' Type)?\r\n    //   ('implements' Type (',' Type)*)?\r\n    //   '{' ClassMember* '}'\r\n\r\n    var isInterface = tn.token == Token.INTERFACE;\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var identifier = Node.createIdentifierExpression(\r\n      tn.readIdentifier(),\r\n      tn.range()\r\n    );\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    var extendsType: TypeNode | null = null;\r\n    if (tn.skip(Token.EXTENDS)) {\r\n      let t = this.parseType(tn);\r\n      if (!t) return null;\r\n      if (t.kind != NodeKind.TYPE) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          t.range\r\n        );\r\n        return null;\r\n      }\r\n      extendsType = <TypeNode>t;\r\n    }\r\n\r\n    var implementsTypes: TypeNode[] | null = null;\r\n    if (tn.skip(Token.IMPLEMENTS)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      do {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        if (!isInterface) {\r\n          if (!implementsTypes) implementsTypes = [<TypeNode>type];\r\n          else implementsTypes.push(<TypeNode>type);\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration: ClassDeclaration;\r\n    if (isInterface) {\r\n      assert(!implementsTypes);\r\n      declaration = Node.createInterfaceDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    } else {\r\n      declaration = Node.createClassDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        implementsTypes,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (member) members.push(<DeclarationStatement>member);\r\n        else {\r\n          this.skipStatement(tn);\r\n          if (tn.skip(Token.ENDOFFILE)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    return declaration;\r\n  }\r\n\r\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\r\n\r\n    // at 'class': Identifier? '{' ... '}'\r\n\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n\r\n    if (tn.skipIdentifier()) {\r\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    } else {\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration = Node.createClassDeclaration(\r\n      name,\r\n      [],\r\n      null,\r\n      null,\r\n      members,\r\n      null,\r\n      CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (member) members.push(<DeclarationStatement>member);\r\n        else {\r\n          this.skipStatement(tn);\r\n          if (tn.skip(Token.ENDOFFILE)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    return Node.createClassExpression(declaration);\r\n  }\r\n\r\n  parseClassMember(\r\n    tn: Tokenizer,\r\n    parent: ClassDeclaration\r\n  ): DeclarationStatement | null {\r\n\r\n    // before:\r\n    //   ('public' | 'private' | 'protected')?\r\n    //   ('static' | 'abstract')?\r\n    //   'readonly'?\r\n    //   ('get' | 'set')?\r\n    //   Identifier ...\r\n\r\n    var startPos = tn.pos;\r\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\r\n\r\n    var decorators: DecoratorNode[] | null = null;\r\n    if (tn.skip(Token.AT)) {\r\n      do {\r\n        let decorator = this.parseDecorator(tn);\r\n        if (!decorator) break;\r\n        if (!decorators) decorators = [<DecoratorNode>decorator];\r\n        else decorators.push(<DecoratorNode>decorator);\r\n      } while (tn.skip(Token.AT));\r\n      if (decorators && isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\r\n        );\r\n      }\r\n    }\r\n\r\n    // inherit ambient status\r\n    var flags = parent.flags & CommonFlags.AMBIENT;\r\n\r\n    // implemented methods are virtual\r\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\r\n\r\n    var accessStart = 0;\r\n    var accessEnd = 0;\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"public\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PUBLIC;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"private\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PRIVATE;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"protected\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PROTECTED;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    }\r\n\r\n    var staticStart = 0;\r\n    var staticEnd = 0;\r\n    var abstractStart = 0;\r\n    var abstractEnd = 0;\r\n    if (tn.skip(Token.STATIC)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"static\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.STATIC;\r\n      staticStart = tn.tokenPos;\r\n      staticEnd = tn.pos;\r\n    } else {\r\n      flags |= CommonFlags.INSTANCE;\r\n      if (tn.skip(Token.ABSTRACT)) {\r\n        if (isInterface) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(), \"abstract\"\r\n          );\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        abstractStart = tn.tokenPos;\r\n        abstractEnd = tn.pos;\r\n      }\r\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\r\n    }\r\n\r\n    var readonlyStart: i32 = 0;\r\n    var readonlyEnd: i32 = 0;\r\n    if (tn.skip(Token.READONLY)) {\r\n      flags |= CommonFlags.READONLY;\r\n      readonlyStart = tn.tokenPos;\r\n      readonlyEnd = tn.pos;\r\n    }\r\n\r\n    // check if accessor: ('get' | 'set') ^\\n Identifier\r\n    var state = tn.mark();\r\n    var isConstructor = false;\r\n    var isGetter = false;\r\n    var getStart: i32 = 0;\r\n    var getEnd: i32 = 0;\r\n    var isSetter = false;\r\n    var setStart: i32 = 0;\r\n    var setEnd: i32 = 0;\r\n    if (!isInterface) {\r\n      if (tn.skip(Token.GET)) {\r\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n          flags |= CommonFlags.GET;\r\n          isGetter = true;\r\n          setStart = tn.tokenPos;\r\n          setEnd = tn.pos;\r\n          if (flags & CommonFlags.READONLY) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n            ); // recoverable\r\n          }\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n      } else if (tn.skip(Token.SET)) {\r\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n          flags |= CommonFlags.SET;\r\n          isSetter = true;\r\n          setStart = tn.tokenPos;\r\n          setEnd = tn.pos;\r\n          if (flags & CommonFlags.READONLY) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n            ); // recoverable\r\n          }\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\r\n        flags |= CommonFlags.CONSTRUCTOR;\r\n        isConstructor = true;\r\n        if (flags & CommonFlags.STATIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(staticStart, staticEnd), \"static\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(abstractStart, abstractEnd), \"abstract\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      }\r\n    }\r\n\r\n    var name: IdentifierExpression;\r\n    if (isConstructor) {\r\n      name = Node.createConstructorExpression(tn.range());\r\n    } else {\r\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\r\n        // TODO: also handle symbols, which might have some of these modifiers\r\n        if (flags & CommonFlags.PUBLIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"public\"\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.PROTECTED) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"protected\"\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.PRIVATE) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"protected\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.STATIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(staticStart, staticEnd), \"static\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(abstractStart, abstractEnd), \"abstract\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\r\n        if (!retIndex) return null;\r\n        tn.skip(Token.SEMICOLON);\r\n        return retIndex;\r\n      }\r\n      if (!tn.skipIdentifier()) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      let typeParametersStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      if (isConstructor) {\r\n        this.error(\r\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else if (isGetter || isSetter) {\r\n        this.error(\r\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else {\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n    }\r\n\r\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let signatureStart = tn.tokenPos;\r\n      let parameters = this.parseParameters(tn, isConstructor);\r\n      if (!parameters) return null;\r\n      let thisType = this.parseParametersThis;\r\n      if (isConstructor) {\r\n        for (let i = 0, k = parameters.length; i < k; ++i) {\r\n          let parameter = parameters[i];\r\n          if (parameter.isAny(\r\n            CommonFlags.PUBLIC |\r\n            CommonFlags.PROTECTED |\r\n            CommonFlags.PRIVATE |\r\n            CommonFlags.READONLY\r\n          )) {\r\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\r\n              parameter.name,\r\n              parameter.type,\r\n              null, // initialized via parameter\r\n              null,\r\n              parameter.flags | CommonFlags.INSTANCE,\r\n              parameter.range\r\n            );\r\n            implicitFieldDeclaration.parameterIndex = i;\r\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\r\n            parent.members.push(implicitFieldDeclaration);\r\n          }\r\n        }\r\n      } else if (isGetter) {\r\n        if (parameters.length) {\r\n          this.error(\r\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n            name.range\r\n          );\r\n        }\r\n      } else if (isSetter) {\r\n        if (parameters.length != 1) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n            name.range\r\n          );\r\n        }\r\n        if (parameters.length && parameters[0].initializer) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n            name.range\r\n          );\r\n        }\r\n      }\r\n\r\n      let returnType: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        if (name.kind == NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\r\n            tn.range()\r\n          );\r\n        } else if (isSetter) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\r\n            tn.range()\r\n          );\r\n        }\r\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Node.createOmittedType(tn.range(tn.pos));\r\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnType.range\r\n          ); // recoverable\r\n        }\r\n      }\r\n\r\n      let signature = Node.createSignature(\r\n        parameters,\r\n        returnType,\r\n        thisType,\r\n        false,\r\n        tn.range(signatureStart, tn.pos)\r\n      );\r\n\r\n      let body: Statement | null = null;\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        if (flags & CommonFlags.AMBIENT) {\r\n          this.error(\r\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n            tn.range()\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\r\n            tn.range(), name.text\r\n          ); // recoverable\r\n        }\r\n        body = this.parseBlockStatement(tn, false);\r\n        if (!body) return null;\r\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      let retMethod = Node.createMethodDeclaration(\r\n        name,\r\n        typeParameters,\r\n        signature,\r\n        body,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retMethod;\r\n\r\n    } else if (isConstructor) {\r\n      this.error(\r\n        DiagnosticCode.Constructor_implementation_is_missing,\r\n        name.range\r\n      );\r\n\r\n    } else if (isGetter || isSetter) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        name.range\r\n      );\r\n\r\n    // field: (':' Type)? ('=' Expression)? ';'?\r\n    } else {\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.GET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(getStart, getEnd), \"get\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.SET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(setStart, setEnd), \"set\"\r\n        ); // recoverable\r\n      }\r\n\r\n      let type: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.QUESTION)) {\r\n        this.error(\r\n          DiagnosticCode.Optional_properties_are_not_supported,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      if (tn.skip(Token.EXCLAMATION)) {\r\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        initializer = this.parseExpression(tn);\r\n        if (!initializer) return null;\r\n      }\r\n      let range = tn.range(startPos, tn.pos);\r\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\r\n        this.error(\r\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\r\n          range\r\n        );\r\n      }\r\n      let retField = Node.createFieldDeclaration(\r\n        name,\r\n        type,\r\n        initializer,\r\n        decorators,\r\n        flags,\r\n        range\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retField;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[] | null): IndexSignatureDeclaration | null {\r\n\r\n    // at: '[': 'key' ':' Type ']' ':' Type\r\n\r\n    if (decorators && decorators.length) {\r\n      this.error(\r\n        DiagnosticCode.Decorators_are_not_valid_here,\r\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\r\n      ); // recoverable\r\n    }\r\n\r\n    var start = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let id = tn.readIdentifier();\r\n      if (id == \"key\") {\r\n        if (tn.skip(Token.COLON)) {\r\n          let keyType = this.parseType(tn);\r\n          if (!keyType) return null;\r\n          if (keyType.kind != NodeKind.TYPE) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              tn.range()\r\n            );\r\n            return null;\r\n          }\r\n          if (tn.skip(Token.CLOSEBRACKET)) {\r\n            if (tn.skip(Token.COLON)) {\r\n              let valueType = this.parseType(tn);\r\n              if (!valueType) return null;\r\n              return Node.createIndexSignatureDeclaration(<TypeNode>keyType, valueType, tn.range(start, tn.pos));\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \":\"\r\n              );\r\n            }\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \":\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"key\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseNamespace(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): NamespaceDeclaration | null {\r\n\r\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        let members = new Array<Statement>();\r\n        let ns = Node.createNamespaceDeclaration(\r\n          identifier,\r\n          members,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseTopLevelStatement(tn, ns);\r\n          if (member) members.push(member);\r\n          else {\r\n            this.skipStatement(tn);\r\n            if (tn.skip(Token.ENDOFFILE)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"}\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ns;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"{\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExport(\r\n    tn: Tokenizer,\r\n    startPos: i32,\r\n    isDeclare: bool\r\n  ): ExportStatement | null {\r\n\r\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\r\n\r\n    var path: StringLiteralExpression | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let members = new Array<ExportMember>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        let member = this.parseExportMember(tn);\r\n        if (!member) return null;\r\n        members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\r\n      let internalPath = ret.internalPath;\r\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\r\n        this.backlog.push(internalPath);\r\n        this.seenlog.add(internalPath);\r\n      }\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\r\n          let internalPath = assert(ret.internalPath);\r\n          let source = tn.source;\r\n          if (!source.exportPaths) source.exportPaths = new Set();\r\n          source.exportPaths.add(internalPath);\r\n          if (!this.seenlog.has(internalPath)) {\r\n            this.backlog.push(internalPath);\r\n            this.seenlog.add(internalPath);\r\n          }\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"from\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportMember(\r\n    tn: Tokenizer\r\n  ): ExportMember | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createExportMember(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImport(\r\n    tn: Tokenizer\r\n  ): ImportStatement | null {\r\n\r\n    // at 'import':\r\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\r\n    //  'from' StringLiteral ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var members: ImportDeclaration[] | null = null;\r\n    var namespaceName: IdentifierExpression | null = null;\r\n    var skipFrom = false;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      members = new Array();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        let member = this.parseImportDeclaration(tn);\r\n        if (!member) return null;\r\n        members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"as\"\r\n        );\r\n        return null;\r\n      }\r\n    } else {\r\n      skipFrom = true;\r\n    }\r\n\r\n    if (skipFrom || tn.skip(Token.FROM)) {\r\n      if (tn.skip(Token.STRINGLITERAL)) {\r\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        let ret: ImportStatement;\r\n        if (namespaceName) {\r\n          assert(!members);\r\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\r\n        } else {\r\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\r\n        }\r\n        let internalPath = ret.internalPath;\r\n        if (!this.seenlog.has(internalPath)) {\r\n          this.backlog.push(internalPath);\r\n          this.seenlog.add(internalPath);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.String_literal_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"from\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImportDeclaration(\r\n    tn: Tokenizer\r\n  ): ImportDeclaration | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createImportDeclaration(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportImport(\r\n    tn: Tokenizer,\r\n    startPos: i32\r\n  ): ExportImportStatement | null {\r\n\r\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (tn.skipIdentifier()) {\r\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool = false\r\n  ): Statement | null {\r\n\r\n    // at previous token\r\n\r\n    var state = tn.mark();\r\n    var token = tn.next();\r\n    var statement: Statement | null = null;\r\n    switch (token) {\r\n      case Token.BREAK: {\r\n        statement = this.parseBreak(tn);\r\n        break;\r\n      }\r\n      case Token.CONST: {\r\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.CONTINUE: {\r\n        statement = this.parseContinue(tn);\r\n        break;\r\n      }\r\n      case Token.DO: {\r\n        statement = this.parseDoStatement(tn);\r\n        break;\r\n      }\r\n      case Token.FOR: {\r\n        statement = this.parseForStatement(tn);\r\n        break;\r\n      }\r\n      case Token.IF: {\r\n        statement = this.parseIfStatement(tn);\r\n        break;\r\n      }\r\n      case Token.LET: {\r\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VAR: {\r\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.OPENBRACE: {\r\n        statement = this.parseBlockStatement(tn, topLevel);\r\n        break;\r\n      }\r\n      case Token.RETURN: {\r\n        if (topLevel) {\r\n          this.error(\r\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        statement = this.parseReturn(tn);\r\n        break;\r\n      }\r\n      case Token.SEMICOLON: {\r\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\r\n      }\r\n      case Token.SWITCH: {\r\n        statement = this.parseSwitchStatement(tn);\r\n        break;\r\n      }\r\n      case Token.THROW: {\r\n        statement = this.parseThrowStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TRY: {\r\n        statement = this.parseTryStatement(tn);\r\n        break;\r\n      }\r\n      case Token.VOID: {\r\n        statement = this.parseVoidStatement(tn);\r\n        break;\r\n      }\r\n      case Token.WHILE: {\r\n        statement = this.parseWhileStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        tn.reset(state);\r\n        statement = this.parseExpressionStatement(tn);\r\n        break;\r\n      }\r\n    }\r\n    if (!statement) { // has been reported\r\n      tn.reset(state);\r\n      this.skipStatement(tn);\r\n    } else {\r\n      tn.discard(state);\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  parseBlockStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool\r\n  ): BlockStatement | null {\r\n\r\n    // at '{': Statement* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements = new Array<Statement>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let state = tn.mark();\r\n      let statement = this.parseStatement(tn, topLevel);\r\n      if (!statement) {\r\n        if (tn.token == Token.ENDOFFILE) return null;\r\n        tn.reset(state);\r\n        this.skipStatement(tn);\r\n      } else {\r\n        tn.discard(state);\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseBreak(\r\n    tn: Tokenizer\r\n  ): BreakStatement | null {\r\n\r\n    // at 'break': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createBreakStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseContinue(\r\n    tn: Tokenizer\r\n  ): ContinueStatement | null {\r\n\r\n    // at 'continue': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createContinueStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseDoStatement(\r\n    tn: Tokenizer\r\n  ): DoStatement | null {\r\n\r\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statement = this.parseStatement(tn);\r\n    if (!statement) return null;\r\n\r\n    if (tn.skip(Token.WHILE)) {\r\n\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        let condition = this.parseExpression(tn);\r\n        if (!condition) return null;\r\n\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"(\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"while\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExpressionStatement(\r\n    tn: Tokenizer\r\n  ): ExpressionStatement | null {\r\n\r\n    // at previous token\r\n\r\n    var expr = this.parseExpression(tn);\r\n    if (!expr) return null;\r\n\r\n    var ret = Node.createExpressionStatement(expr);\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseForStatement(\r\n    tn: Tokenizer\r\n  ): ForStatement | null {\r\n\r\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\r\n\r\n    var startPos = tn.tokenPos;\r\n\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let initializer: Statement | null = null;\r\n\r\n      if (tn.skip(Token.CONST)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.LET)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.VAR)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n\r\n      } else if (!tn.skip(Token.SEMICOLON)) {\r\n        initializer = this.parseExpressionStatement(tn);\r\n        if (!initializer) return null;\r\n      }\r\n\r\n      if (tn.token == Token.SEMICOLON) {\r\n        let condition: ExpressionStatement | null = null;\r\n        if (!tn.skip(Token.SEMICOLON)) {\r\n          condition = this.parseExpressionStatement(tn);\r\n          if (!condition) return null;\r\n        }\r\n\r\n        if (tn.token == Token.SEMICOLON) {\r\n          let incrementor: Expression | null = null;\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            incrementor = this.parseExpression(tn);\r\n            if (!incrementor) return null;\r\n\r\n            if (!tn.skip(Token.CLOSEPAREN)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \")\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n\r\n          let statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n\r\n          return Node.createForStatement(\r\n            initializer,\r\n            condition\r\n              ? condition.expression\r\n              : null,\r\n            incrementor,\r\n            statement,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \";\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \";\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIfStatement(\r\n    tn: Tokenizer\r\n  ): IfStatement | null {\r\n\r\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let elseStatement: Statement | null = null;\r\n        if (tn.skip(Token.ELSE)) {\r\n          elseStatement = this.parseStatement(tn);\r\n          if (!elseStatement) return null;\r\n        }\r\n        return Node.createIfStatement(\r\n          condition,\r\n          statement,\r\n          elseStatement,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchStatement(\r\n    tn: Tokenizer\r\n  ): SwitchStatement | null {\r\n\r\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        if (tn.skip(Token.OPENBRACE)) {\r\n          let cases = new Array<SwitchCase>();\r\n          while (!tn.skip(Token.CLOSEBRACE)) {\r\n            let case_ = this.parseSwitchCase(tn);\r\n            if (!case_) return null;\r\n            cases.push(<SwitchCase>case_);\r\n          }\r\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchCase(\r\n    tn: Tokenizer\r\n  ): SwitchCase | null {\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements: Statement[],\r\n        statement: Statement | null;\r\n\r\n    // 'case' Expression ':' Statement*\r\n\r\n    if (tn.skip(Token.CASE)) {\r\n      let label = this.parseExpression(tn);\r\n      if (!label) return null;\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n\r\n    // 'default' ':' Statement*\r\n\r\n    } else if (tn.skip(Token.DEFAULT)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._case_or_default_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseThrowStatement(\r\n    tn: Tokenizer\r\n  ): ThrowStatement | null {\r\n\r\n    // at 'throw': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn);\r\n    if (!expression) return null;\r\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTryStatement(\r\n    tn: Tokenizer\r\n  ): TryStatement | null {\r\n\r\n    // at 'try':\r\n    //   '{' Statement* '}'\r\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\r\n    //   ('finally' '{' Statement* '}'? ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var stmt: Statement | null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let statements = new Array<Statement>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        stmt = this.parseStatement(tn);\r\n        if (!stmt) return null;\r\n        statements.push(<Statement>stmt);\r\n      }\r\n      let catchVariable: IdentifierExpression | null = null;\r\n      let catchStatements: Statement[] | null = null;\r\n      let finallyStatements: Statement[] | null = null;\r\n      if (tn.skip(Token.CATCH)) {\r\n        if (!tn.skip(Token.OPENPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"(\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skipIdentifier()) {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        catchStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          catchStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (tn.skip(Token.FINALLY)) {\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        finallyStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          finallyStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (!(catchStatements || finallyStatements)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"catch\"\r\n        );\r\n        return null;\r\n      }\r\n      let ret = Node.createTryStatement(\r\n        statements,\r\n        catchVariable,\r\n        catchStatements,\r\n        finallyStatements,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseTypeDeclaration(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): TypeDeclaration | null {\r\n\r\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let typeParameters: TypeParameterNode[] | null = null;\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        typeParameters = this.parseTypeParameters(tn);\r\n        if (!typeParameters) return null;\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        let ret = Node.createTypeDeclaration(\r\n          name,\r\n          typeParameters,\r\n          type,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVoidStatement(\r\n    tn: Tokenizer\r\n  ): VoidStatement | null {\r\n\r\n    // at 'void': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\r\n    if (!expression) return null;\r\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseWhileStatement(\r\n    tn: Tokenizer\r\n  ): WhileStatement | null {\r\n\r\n    // at 'while': '(' Expression ')' Statement ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let expression = this.parseExpression(tn);\r\n      if (!expression) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // expressions\r\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\r\n\r\n  parseExpressionStart(\r\n    tn: Tokenizer\r\n  ): Expression | null {\r\n\r\n    var token = tn.next(IdentifierHandling.PREFER);\r\n    var startPos = tn.tokenPos;\r\n    var precedence = determinePrecedenceStart(token);\r\n    if (precedence != Precedence.NONE) {\r\n      let operand: Expression | null;\r\n\r\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\r\n\r\n      // NewExpression\r\n      if (token == Token.NEW) {\r\n        operand = this.parseExpression(tn, Precedence.CALL);\r\n        if (!operand) return null;\r\n        if (operand.kind == NodeKind.CALL) {\r\n          return Node.createNewExpression(\r\n            (<CallExpression>operand).expression,\r\n            (<CallExpression>operand).typeArguments,\r\n            (<CallExpression>operand).arguments,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      } else {\r\n        operand = this.parseExpression(tn, precedence);\r\n        if (!operand) return null;\r\n      }\r\n\r\n      // UnaryPrefixExpression\r\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\r\n        if (\r\n          operand.kind != NodeKind.IDENTIFIER &&\r\n          operand.kind != NodeKind.ELEMENTACCESS &&\r\n          operand.kind != NodeKind.PROPERTYACCESS\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n            operand.range\r\n          );\r\n        }\r\n      }\r\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    var expr: Expression | null = null;\r\n    switch (token) {\r\n\r\n      case Token.NULL: return Node.createNullExpression(tn.range());\r\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\r\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\r\n\r\n      // ParenthesizedExpression\r\n      // FunctionExpression\r\n      case Token.OPENPAREN: {\r\n\r\n        // determine whether this is a function expression\r\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [],\r\n            ArrowKind.ARROW_PARENTHESIZED\r\n          );\r\n        }\r\n        let state = tn.mark();\r\n        let again = true;\r\n        do {\r\n          switch (tn.next(IdentifierHandling.PREFER)) {\r\n\r\n            // function expression\r\n            case Token.DOT_DOT_DOT: {\r\n              tn.reset(state);\r\n              return this.parseFunctionExpression(tn);\r\n            }\r\n            // can be both\r\n            case Token.IDENTIFIER: {\r\n              tn.readIdentifier();\r\n              switch (tn.next()) {\r\n\r\n                // if we got here, check for arrow\r\n                case Token.CLOSEPAREN: {\r\n                  if (\r\n                    !tn.skip(Token.COLON) &&\r\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\r\n                  ) {\r\n                    again = false;\r\n                    break;\r\n                  }\r\n                  // fall-through\r\n                }\r\n                // function expression\r\n                case Token.COLON: {    // type annotation\r\n                  tn.reset(state);\r\n                  return this.parseFunctionExpression(tn);\r\n                }\r\n                // optional parameter or parenthesized\r\n                case Token.QUESTION: {\r\n                  if (\r\n                    tn.skip(Token.COLON) ||   // optional parameter with type\r\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\r\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\r\n                  ) {\r\n                    tn.reset(state);\r\n                    return this.parseFunctionExpression(tn);\r\n                  }\r\n                  again = false; // parenthesized\r\n                  break;\r\n                  }\r\n                case Token.COMMA: {\r\n                  break; // continue\r\n                }\r\n                // parenthesized expression\r\n                // case Token.EQUALS:  // missing type annotation for simplicity\r\n                default: {\r\n                  again = false;\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            // parenthesized expression\r\n            default: {\r\n              again = false;\r\n              break;\r\n            }\r\n          }\r\n        } while (again);\r\n        tn.reset(state);\r\n\r\n        // parse parenthesized\r\n        expr = this.parseExpression(tn);\r\n        if (!expr) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\r\n      }\r\n      // ArrayLiteralExpression\r\n      case Token.OPENBRACKET: {\r\n        let elementExpressions = new Array<Expression | null>();\r\n        while (!tn.skip(Token.CLOSEBRACKET)) {\r\n          if (tn.peek() == Token.COMMA) {\r\n            expr = null; // omitted\r\n          } else {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n          }\r\n          elementExpressions.push(expr);\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACKET)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"]\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\r\n      }\r\n      // ObjectLiteralExpression\r\n      case Token.OPENBRACE: {\r\n        let startPos = tn.tokenPos;\r\n        let names = new Array<IdentifierExpression>();\r\n        let values = new Array<Expression>();\r\n        let name: IdentifierExpression;\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          if (!tn.skipIdentifier()) {\r\n            if (!tn.skip(Token.STRINGLITERAL)) {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                tn.range(),\r\n              );\r\n              return null;\r\n            }\r\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\r\n            name.isQuoted = true;\r\n          } else {\r\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          }\r\n          names.push(name);\r\n          if (tn.skip(Token.COLON)) {\r\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!value) return null;\r\n            values.push(value);\r\n          } else if (!name.isQuoted) {\r\n            values.push(name);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACE)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"}\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\r\n      }\r\n      // AssertionExpression (unary prefix)\r\n      case Token.LESSTHAN: {\r\n        let toType = this.parseType(tn);\r\n        if (!toType) return null;\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n        expr = this.parseExpression(tn, Precedence.CALL);\r\n        if (!expr) return null;\r\n        return Node.createAssertionExpression(\r\n          AssertionKind.PREFIX,\r\n          expr,\r\n          toType,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.IDENTIFIER: {\r\n        let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\r\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [\r\n              Node.createParameter(\r\n                identifier,\r\n                Node.createOmittedType(identifier.range.atEnd),\r\n                null,\r\n                ParameterKind.DEFAULT,\r\n                identifier.range\r\n              )\r\n            ],\r\n            ArrowKind.ARROW_SINGLE,\r\n            startPos\r\n          );\r\n        }\r\n        return identifier;\r\n      }\r\n      case Token.THIS: {\r\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.CONSTRUCTOR: {\r\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.SUPER: {\r\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\r\n          this.error(\r\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\r\n            tn.range()\r\n          );\r\n        }\r\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.STRINGLITERAL: {\r\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.INTEGERLITERAL: {\r\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.FLOATLITERAL: {\r\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\r\n      }\r\n      // RegexpLiteralExpression\r\n      // note that this also continues on invalid ones so the surrounding AST remains intact\r\n      case Token.SLASH: {\r\n        let regexpPattern = tn.readRegexpPattern(); // also reports\r\n        if (!tn.skip(Token.SLASH)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"/\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createRegexpLiteralExpression(\r\n          regexpPattern,\r\n          tn.readRegexpFlags(), // also reports\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.FUNCTION: {\r\n        return this.parseFunctionExpression(tn);\r\n      }\r\n      case Token.CLASS: {\r\n        return this.parseClassExpression(tn);\r\n      }\r\n      default: {\r\n        if (token == Token.ENDOFFILE) {\r\n          this.error(\r\n            DiagnosticCode.Unexpected_end_of_text,\r\n            tn.range(startPos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Expression_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  tryParseTypeArgumentsBeforeArguments(\r\n    tn: Tokenizer\r\n  ): CommonTypeNode[] | null {\r\n\r\n    // at '<': Type (',' Type)* '>' '('\r\n\r\n    var state = tn.mark();\r\n    if (!tn.skip(Token.LESSTHAN)) return null;\r\n    var typeArguments: CommonTypeNode[] | null = null;\r\n    do {\r\n      if (tn.peek() === Token.GREATERTHAN) {\r\n        break;\r\n      }\r\n      let type = this.parseType(tn, true, true);\r\n      if (!type) {\r\n        tn.reset(state);\r\n        return null;\r\n      }\r\n      if (!typeArguments) typeArguments = [ type ];\r\n      else typeArguments.push(type);\r\n    } while (tn.skip(Token.COMMA));\r\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\r\n      return typeArguments;\r\n    }\r\n    tn.reset(state);\r\n    return null;\r\n  }\r\n\r\n  parseArguments(\r\n    tn: Tokenizer\r\n  ): Expression[] | null {\r\n\r\n    // at '(': (Expression (',' Expression)*)? ')'\r\n\r\n    var args = new Array<Expression>();\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!expr) return null;\r\n      args.push(expr);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return args;\r\n  }\r\n\r\n  parseExpression(\r\n    tn: Tokenizer,\r\n    precedence: Precedence = Precedence.COMMA\r\n  ): Expression | null {\r\n    assert(precedence != Precedence.NONE);\r\n\r\n    var expr = this.parseExpressionStart(tn);\r\n    if (!expr) return null;\r\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\r\n\r\n    var startPos = expr.range.start;\r\n    var token: Token;\r\n    var next: Expression | null = null;\r\n    var nextPrecedence: Precedence;\r\n    while (\r\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\r\n    ) { // precedence climbing\r\n      tn.next();\r\n      switch (token) {\r\n        // AssertionExpression\r\n        case Token.AS: {\r\n          let toType = this.parseType(tn); // reports\r\n          if (!toType) return null;\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.AS,\r\n            expr,\r\n            toType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        case Token.EXCLAMATION: {\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.NONNULL,\r\n            expr,\r\n            null,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // InstanceOfExpression\r\n        case Token.INSTANCEOF: {\r\n          let isType = this.parseType(tn); // reports\r\n          if (!isType) return null;\r\n          expr = Node.createInstanceOfExpression(\r\n            expr,\r\n            isType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // ElementAccessExpression\r\n        case Token.OPENBRACKET: {\r\n          next = this.parseExpression(tn); // reports\r\n          if (!next) return null;\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n          expr = Node.createElementAccessExpression(\r\n            expr,\r\n            next,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // UnaryPostfixExpression\r\n        case Token.PLUS_PLUS:\r\n        case Token.MINUS_MINUS: {\r\n          if (\r\n            expr.kind != NodeKind.IDENTIFIER &&\r\n            expr.kind != NodeKind.ELEMENTACCESS &&\r\n            expr.kind != NodeKind.PROPERTYACCESS\r\n          ) {\r\n            this.error(\r\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n              expr.range\r\n            );\r\n          }\r\n          expr = Node.createUnaryPostfixExpression(\r\n            token,\r\n            expr,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // TernaryExpression\r\n        case Token.QUESTION: {\r\n          let ifThen = this.parseExpression(tn);\r\n          if (!ifThen) return null;\r\n          if (!tn.skip(Token.COLON)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\r\n            ? Precedence.COMMA + 1\r\n            : Precedence.COMMA\r\n          );\r\n          if (!ifElse) return null;\r\n          expr = Node.createTernaryExpression(\r\n            expr,\r\n            ifThen,\r\n            ifElse,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // CommaExpression\r\n        case Token.COMMA: {\r\n          let commaExprs: Expression[] = [ expr ];\r\n          do {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n            commaExprs.push(expr);\r\n          } while (tn.skip(Token.COMMA));\r\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\r\n          break;\r\n        }\r\n        default: {\r\n\r\n          // PropertyAccessExpression\r\n          if (token == Token.DOT) {\r\n            if (tn.skipIdentifier()) {\r\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n            } else {\r\n              next = this.parseExpression(tn,\r\n                isRightAssociative(token)\r\n                  ? nextPrecedence\r\n                  : nextPrecedence + 1\r\n              );\r\n              if (!next) return null;\r\n            }\r\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\r\n              expr = Node.createPropertyAccessExpression(\r\n                expr,\r\n                <IdentifierExpression>next,\r\n                tn.range(startPos, tn.pos)\r\n              );\r\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\r\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\r\n              if (!expr) return null;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                next.range\r\n              );\r\n              return null;\r\n            }\r\n\r\n          // BinaryExpression\r\n          } else {\r\n            next = this.parseExpression(tn,\r\n              isRightAssociative(token)\r\n                ? nextPrecedence\r\n                : nextPrecedence + 1\r\n            );\r\n            if (!next) return null;\r\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  private joinPropertyCall(\r\n    tn: Tokenizer,\r\n    startPos: i32,\r\n    expr: Expression,\r\n    call: CallExpression\r\n  ): Expression | null {\r\n    var callee = call.expression;\r\n    switch (callee.kind) {\r\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\r\n        call.expression = Node.createPropertyAccessExpression(\r\n          expr,\r\n          <IdentifierExpression>callee,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.CALL: { // join call target und wrap the original call around it\r\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\r\n        if (!inner) return null;\r\n        call.expression = inner;\r\n        call.range = tn.range(startPos, tn.pos);\r\n        break;\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          call.range\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n    return call;\r\n  }\r\n\r\n  private maybeParseCallExpression(\r\n    tn: Tokenizer,\r\n    expr: Expression\r\n  ): Expression {\r\n    if (nodeIsCallable(expr.kind)) {\r\n      let typeArguments: CommonTypeNode[] | null = null;\r\n      while (\r\n        tn.skip(Token.OPENPAREN)\r\n        ||\r\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\r\n      ) {\r\n        let args = this.parseArguments(tn);\r\n        if (!args) break;\r\n        expr = Node.createCallExpression( // is again callable\r\n          expr,\r\n          typeArguments,\r\n          args,\r\n          tn.range(expr.range.start, tn.pos)\r\n        );\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipStatement(tn: Tokenizer): void {\r\n    tn.peek(true);\r\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\r\n    do {\r\n      let nextToken = tn.peek(true);\r\n      if (\r\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\r\n        nextToken == Token.SEMICOLON      // end of the statement for sure\r\n      ) {\r\n        tn.next();\r\n        break;\r\n      }\r\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\r\n      switch (tn.next()) {\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n        case Token.OPENBRACE: {\r\n          this.skipBlock(tn);\r\n          break;\r\n        }\r\n      }\r\n    } while (true);\r\n  }\r\n\r\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipBlock(tn: Tokenizer): void {\r\n    // at '{': ... '}'\r\n    var depth = 1;\r\n    var again = true;\r\n    do {\r\n      switch (tn.next()) {\r\n        case Token.ENDOFFILE: {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          again = false;\r\n          break;\r\n        }\r\n        case Token.OPENBRACE: {\r\n          ++depth;\r\n          break;\r\n        }\r\n        case Token.CLOSEBRACE: {\r\n          --depth;\r\n          if (!depth) again = false;\r\n          break;\r\n        }\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (again);\r\n  }\r\n}\r\n\r\n/** Operator precedence from least to largest. */\r\nexport const enum Precedence {\r\n  NONE,\r\n  COMMA,\r\n  SPREAD,\r\n  YIELD,\r\n  ASSIGNMENT,\r\n  CONDITIONAL,\r\n  LOGICAL_OR,\r\n  LOGICAL_AND,\r\n  BITWISE_OR,\r\n  BITWISE_XOR,\r\n  BITWISE_AND,\r\n  EQUALITY,\r\n  RELATIONAL,\r\n  SHIFT,\r\n  ADDITIVE,\r\n  MULTIPLICATIVE,\r\n  EXPONENTIATED,\r\n  UNARY_PREFIX,\r\n  UNARY_POSTFIX,\r\n  CALL,\r\n  MEMBERACCESS,\r\n  GROUPING\r\n}\r\n\r\n/** Determines the precedence of a starting token. */\r\nfunction determinePrecedenceStart(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\r\n    case Token.YIELD: return Precedence.YIELD;\r\n    case Token.EXCLAMATION:\r\n    case Token.TILDE:\r\n    case Token.PLUS:\r\n    case Token.MINUS:\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS:\r\n    case Token.TYPEOF:\r\n    case Token.VOID:\r\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\r\n    case Token.NEW: return Precedence.MEMBERACCESS;\r\n  }\r\n  return Precedence.NONE;\r\n}\r\n\r\n/** Determines the precende of a non-starting token. */\r\nfunction determinePrecedence(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.COMMA: return Precedence.COMMA;\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\r\n    case Token.QUESTION: return Precedence.CONDITIONAL;\r\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\r\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\r\n    case Token.BAR: return Precedence.BITWISE_OR;\r\n    case Token.CARET: return Precedence.BITWISE_XOR;\r\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\r\n    case Token.EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS:\r\n    case Token.EQUALS_EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\r\n    case Token.AS:\r\n    case Token.IN:\r\n    case Token.INSTANCEOF:\r\n    case Token.LESSTHAN:\r\n    case Token.GREATERTHAN:\r\n    case Token.LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\r\n    case Token.LESSTHAN_LESSTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\r\n    case Token.PLUS:\r\n    case Token.MINUS: return Precedence.ADDITIVE;\r\n    case Token.ASTERISK:\r\n    case Token.SLASH:\r\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\r\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\r\n    case Token.DOT:\r\n    case Token.NEW:\r\n    case Token.OPENBRACKET:\r\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\r\n  }\r\n  return Precedence.NONE;\r\n}\r\n\r\n/** Determines whether a non-starting token is right associative. */\r\nfunction isRightAssociative(kind: Token): bool {\r\n  switch (kind) {\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS:\r\n    case Token.QUESTION:\r\n    case Token.ASTERISK_ASTERISK: return true;\r\n    default: return false;\r\n  }\r\n}\r\n","/**\r\n * JavaScript glue code.\r\n * @module glue/js\r\n * @preferred\r\n *//***/\r\n\r\n/// <reference path=\"./node.d.ts\" />\r\n\r\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\r\nimport \"../../../std/portable/index\";\r\nimport \"./float\";\r\nimport \"./i64\";\r\n\r\nimport { Module } from \"../../module\";\r\n\r\nModule.prototype.toText = function(this: Module) {\r\n  return binaryen.wrapModule(this.ref).emitStackIR();\r\n};\r\n\r\nModule.prototype.toAsmjs = function(this: Module) {\r\n  return binaryen.wrapModule(this.ref).emitAsmjs();\r\n};\r\n","// Copy Binaryen exports to global scope\r\n\r\nconst binaryen = global.Binaryen || require(\"binaryen\");\r\nglobal.binaryen = binaryen;\r\n\r\nfor (var key in binaryen) {\r\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\r\n}\r\n\r\n// Utilize Binaryen's heap\r\n\r\nglobal.__memory_allocate = binaryen._malloc;\r\nglobal.__memory_free = binaryen._free;\r\nglobal.__memory_copy = binaryen._memmove;\r\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\r\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__20__;","/** @module std/portable *//***/\r\n\r\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\r\n\r\nglobalScope.ASC_TARGET = 2; // Target.JS\r\nglobalScope.ASC_NO_ASSERT = false;\r\nglobalScope.ASC_MEMORY_BASE = 0;\r\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\r\nglobalScope.ASC_SHRINK_LEVEL = 0;\r\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\r\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\r\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\r\nglobalScope.ASC_FEATURE_SIMD = false;\r\nglobalScope.ASC_FEATURE_THREADS = false;\r\n\r\nvar F64 = new Float64Array(1);\r\nvar U64 = new Uint32Array(F64.buffer);\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\r\n, {\r\n  \"MIN_VALUE\": { value: -128, writable: false },\r\n  \"MAX_VALUE\": { value:  127, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\r\n, {\r\n  \"MIN_VALUE\": { value: -32768, writable: false },\r\n  \"MAX_VALUE\": { value:  32767, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\r\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\r\n, {\r\n  \"MIN_VALUE\": { value:   0, writable: false },\r\n  \"MAX_VALUE\": { value: 255, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\r\n, {\r\n  \"MIN_VALUE\": { value:     0, writable: false },\r\n  \"MAX_VALUE\": { value: 65535, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\r\n, {\r\n  \"MIN_VALUE\": { value:          0, writable: false },\r\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\r\n, {\r\n  \"MIN_VALUE\": { value: false, writable: false },\r\n  \"MAX_VALUE\": { value: true,  writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\r\n, {\r\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\r\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\r\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\r\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\r\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\r\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f64\"] = function f64(value) { return +value; }\r\n, {\r\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\r\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\r\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\r\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\r\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\r\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\r\n});\r\n\r\nglobalScope[\"clz\"] = Math.clz32;\r\n\r\nglobalScope[\"ctz\"] = function ctz(value) {\r\n  var c = Math.clz32(value & -value);\r\n  return value ? 31 - c : c;\r\n};\r\n\r\nglobalScope[\"popcnt\"] = function popcnt(value) {\r\n  value -= value >>> 1 & 0x55555555;\r\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\r\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\r\n};\r\n\r\nglobalScope[\"rotl\"] = function rotl(value, shift) {\r\n  shift &= 31;\r\n  return (value << shift) | (value >>> (32 - shift));\r\n};\r\n\r\nglobalScope[\"rotr\"] = function rotr(value, shift) {\r\n  shift &= 31;\r\n  return (value >>> shift) | (value << (32 - shift));\r\n};\r\n\r\nglobalScope[\"abs\"] = Math.abs;\r\n\r\nglobalScope[\"max\"] = Math.max;\r\n\r\nglobalScope[\"min\"] = Math.min;\r\n\r\nglobalScope[\"ceil\"] = Math.ceil;\r\n\r\nglobalScope[\"floor\"] = Math.floor;\r\n\r\n// Adopt code from https://github.com/rfk/wasm-polyfill\r\nglobalScope[\"nearest\"] = function nearest(value) {\r\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\r\n    return 2.0 * Math.round(value * 0.5);\r\n  }\r\n  return Math.round(value);\r\n};\r\n\r\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\r\n  return condition ? ifTrue : ifFalse;\r\n};\r\n\r\nglobalScope[\"sqrt\"] = Math.sqrt;\r\n\r\nglobalScope[\"trunc\"] = Math.trunc;\r\n\r\nglobalScope[\"copysign\"] = function copysign(x, y) {\r\n  return Math.abs(x) * Math.sign(y);\r\n};\r\n\r\nglobalScope[\"bswap\"] = function bswap(value) {\r\n  var a = value >> 8 & 0x00FF00FF;\r\n  var b = (value & 0x00FF00FF) << 8;\r\n  value = a | b;\r\n  a = value >> 16 & 0x0000FFFF;\r\n  b = (value & 0x0000FFFF) << 16;\r\n  return a | b;\r\n};\r\n\r\nglobalScope[\"bswap16\"] = function bswap16(value) {\r\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\r\n};\r\n\r\nfunction UnreachableError() {\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, UnreachableError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nUnreachableError.prototype = Object.create(Error.prototype);\r\nUnreachableError.prototype.name = \"UnreachableError\";\r\nUnreachableError.prototype.message = \"unreachable\";\r\n\r\nglobalScope[\"unreachable\"] = function unreachable() {\r\n  throw new UnreachableError();\r\n};\r\n\r\nfunction AssertionError(message) {\r\n  this.message = message || \"assertion failed\";\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, AssertionError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nAssertionError.prototype = Object.create(Error.prototype);\r\nAssertionError.prototype.name = \"AssertionError\";\r\n\r\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\r\n  if (isTrueish) return isTrueish;\r\n  throw new AssertionError(message);\r\n};\r\n\r\nglobalScope[\"changetype\"] = function changetype(value) {\r\n  return value;\r\n};\r\n\r\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\r\n  return parseInt(str, undefined) | 0;\r\n};\r\n\r\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\r\n  return String.fromCharCode.apply(String, arr);\r\n};\r\n\r\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\r\n  return String.fromCodePoint.apply(String, arr);\r\n};\r\n\r\nglobalScope[\"isInteger\"] = Number.isInteger;\r\n\r\nglobalScope[\"isFloat\"] = function isFloat(arg) {\r\n  return typeof arg === \"number\";\r\n};\r\n\r\nglobalScope[\"isNullable\"] = function isNullable(arg) {\r\n  return true;\r\n}\r\n\r\nglobalScope[\"isReference\"] = function isReference(arg) {\r\n  return typeof arg === \"object\" || typeof arg === \"string\";\r\n};\r\n\r\nglobalScope[\"isFunction\"] = function isFunction(arg) {\r\n  return typeof arg === \"function\";\r\n}\r\n\r\nglobalScope[\"isString\"] = function isString(arg) {\r\n  return typeof arg === \"string\" || arg instanceof String;\r\n};\r\n\r\nglobalScope[\"isArray\"] = Array.isArray;\r\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\r\n  return expr\r\n    && typeof expr === 'object'\r\n    && typeof expr.length === 'number'\r\n    && expr.length >= 0\r\n    && Math.trunc(expr.length) === expr.length;\r\n};\r\n\r\nArray.create = function(capacity) {\r\n  var arr = new Array(capacity);\r\n  arr.length = 0;\r\n  return arr;\r\n};\r\n\r\nglobalScope[\"isDefined\"] = function isDefined(expr) {\r\n  return typeof expr !== \"undefined\";\r\n}\r\n\r\nglobalScope[\"isConstant\"] = function isConstant(expr) {\r\n  return false;\r\n};\r\n\r\nglobalScope[\"unchecked\"] = function unchecked(expr) {\r\n  return expr;\r\n};\r\n\r\nglobalScope[\"fmod\"] = function fmod(x, y) {\r\n  return x % y;\r\n};\r\n\r\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\r\n  return Math.fround(x % y);\r\n};\r\n\r\nglobalScope[\"JSMath\"] = Math;\r\n\r\nObject.defineProperties(globalScope[\"JSMath\"], {\r\n  sincos_sin: { value: 0.0, writable: true },\r\n  sincos_cos: { value: 0.0, writable: true },\r\n  signbit: {\r\n    value: function signbit(x) {\r\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\r\n    }\r\n  },\r\n  sincos: {\r\n    value: function sincos(x) {\r\n      this.sincos_sin = Math.sin(x);\r\n      this.sincos_cos = Math.cos(x);\r\n    }\r\n  }\r\n});\r\n\r\nglobalScope[\"memory\"] = (() => {\r\n  var HEAP = new Uint8Array(0);\r\n  var HEAP_OFFSET = 0;\r\n  return {\r\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\r\n      if (!(size >>>= 0)) return 0;\r\n      if (HEAP_OFFSET + size > HEAP.length) {\r\n        var oldHeap = HEAP;\r\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\r\n        HEAP.set(oldHeap);\r\n      }\r\n      var ptr = HEAP_OFFSET;\r\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\r\n      return ptr;\r\n    },\r\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\r\n      HEAP.fill(value, dest, dest + size);\r\n    },\r\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\r\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\r\n      HEAP.copyWithin(dest, src, src + size);\r\n    },\r\n    reset: globalScope[\"__memory_reset\"] || function reset() {\r\n      HEAP = new Uint8Array(0);\r\n      HEAP_OFFSET = 0;\r\n    }\r\n  };\r\n})();\r\n\r\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\r\n  HEAP[(ptr | 0) + (offset | 0)] = value;\r\n};\r\n\r\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\r\n  return HEAP[(ptr | 0) + (offset | 0)];\r\n};\r\n\r\nglobalScope[\"unmanaged\"] = function() {};\r\n","const F64 = new Float64Array(1);\r\nconst F32 = new Float32Array(F64.buffer);\r\nconst I32 = new Int32Array(F64.buffer);\r\n\r\nglobal.f32_as_i32 = function(value) {\r\n  F32[0] = value;\r\n  return I32[0];\r\n};\r\n\r\nglobal.i32_as_f32 = function(value) {\r\n  I32[0] = value;\r\n  return F32[0];\r\n};\r\n\r\nglobal.f64_as_i64 = function(value) {\r\n  F64[0] = value;\r\n  return i64_new(I32[0], I32[1]);\r\n};\r\n\r\nglobal.i64_as_f64 = function(value) {\r\n  I32[0] = i64_low(value);\r\n  I32[1] = i64_high(value);\r\n  return F64[0];\r\n};\r\n","const Long = global.Long || require(\"long\");\r\n\r\nglobal.i64_zero = Long.ZERO;\r\n\r\nglobal.i64_one = Long.ONE;\r\n\r\nglobal.i64_new = function(lo, hi) {\r\n  return Long.fromBits(lo, hi);\r\n};\r\n\r\nglobal.i64_low = function(value) {\r\n  return value.low;\r\n};\r\n\r\nglobal.i64_high = function(value) {\r\n  return value.high;\r\n};\r\n\r\nglobal.i64_add = function(left, right) {\r\n  return left.add(right);\r\n};\r\n\r\nglobal.i64_sub = function(left, right) {\r\n  return left.sub(right);\r\n};\r\n\r\nglobal.i64_mul = function(left, right) {\r\n  return left.mul(right);\r\n};\r\n\r\nglobal.i64_div = function(left, right) {\r\n  return left.div(right);\r\n};\r\n\r\nglobal.i64_div_u = function(left, right) {\r\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_rem = function(left, right) {\r\n  return left.mod(right);\r\n};\r\n\r\nglobal.i64_rem_u = function(left, right) {\r\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_and = function(left, right) {\r\n  return left.and(right);\r\n};\r\n\r\nglobal.i64_or = function(left, right) {\r\n  return left.or(right);\r\n};\r\n\r\nglobal.i64_xor = function(left, right) {\r\n  return left.xor(right);\r\n};\r\n\r\nglobal.i64_shl = function(left, right) {\r\n  return left.shl(right);\r\n};\r\n\r\nglobal.i64_shr = function(left, right) {\r\n  return left.shr(right);\r\n};\r\n\r\nglobal.i64_shr_u = function(left, right) {\r\n  return left.shru(right);\r\n};\r\n\r\nglobal.i64_not = function(value) {\r\n  return value.not();\r\n};\r\n\r\nglobal.i64_eq = function(left, right) {\r\n  return left.eq(right);\r\n};\r\n\r\nglobal.i64_ne = function(left, right) {\r\n  return left.ne(right);\r\n};\r\n\r\nglobal.i64_align = function(value, alignment) {\r\n  assert(alignment && (alignment & (alignment - 1)) == 0);\r\n  var mask = Long.fromInt(alignment - 1);\r\n  return value.add(mask).and(mask.not());\r\n};\r\n\r\nglobal.i64_is_i8 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i16 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i32 = function(value) {\r\n  return (value.high === 0 && value.low >= 0)\r\n      || (value.high === -1 && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_u8 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u16 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u32 = function(value) {\r\n  return value.high === 0;\r\n};\r\n\r\nglobal.i64_is_bool = function(value) {\r\n  return value.high === 0 && (value.low === 0 || value.low === 1);\r\n};\r\n\r\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\r\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f32 = function(value) {\r\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\r\n};\r\n\r\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\r\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f64 = function(value) {\r\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\r\n};\r\n\r\nglobal.i64_to_f32 = function(value) {\r\n  return global.Math.fround(value.toNumber());\r\n};\r\n\r\nglobal.i64_to_f64 = function(value) {\r\n  return value.toNumber();\r\n};\r\n\r\nglobal.i64_to_string = function(value, unsigned) {\r\n  return (unsigned ? value.toUnsigned() : value).toString(10);\r\n};\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","// This file is shared with the compiler and must remain portable\r\n\r\n/** Indicates specific features to activate. */\r\nexport const enum Feature {\r\n  /** No additional features. */\r\n  NONE = 0,\r\n  /** Sign extension operations. */\r\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\r\n  /** Mutable global imports and exports. */\r\n  MUTABLE_GLOBAL = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\r\n  /** Bulk memory operations. */\r\n  BULK_MEMORY = 1 << 2, // see: https://github.com/WebAssembly/bulk-memory-operations\r\n  /** SIMD types and operations. */\r\n  SIMD = 1 << 3, // see: https://github.com/WebAssembly/simd\r\n  /** Threading and atomic operations. */\r\n  THREADS = 1 << 4 // see: https://github.com/WebAssembly/threads\r\n}\r\n","// This file is shared with the compiler and must remain portable\r\n\r\n/** Compilation target. */\r\nexport enum Target {\r\n  /** WebAssembly with 32-bit pointers. */\r\n  WASM32,\r\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\r\n  WASM64,\r\n  /** Portable. */\r\n  JS\r\n}\r\n","// This file is shared with the compiler and must remain portable\r\n\r\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\r\n//    3                   2                   1\r\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\r\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ RTTI_BASE\r\n// │                             count                             │\r\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\r\n// │                      Typeinfo#flags [id=0]                    │ id < count\r\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\r\n// │                      Typeinfo#base  [id=0]                    │\r\n// ├───────────────────────────────────────────────────────────────┤\r\n// │                              ...                              │\r\n\r\n/** Runtime type information data structure. */\r\n@unmanaged\r\nexport class Typeinfo {\r\n  /** Flags describing the shape of this class type. */\r\n  flags: TypeinfoFlags;\r\n  /** Base class id or `0` if none. */\r\n  base: u32;\r\n}\r\n\r\n/** Runtime type information flags. */\r\nexport const enum TypeinfoFlags {\r\n  /** No specific flags. */\r\n  NONE = 0,\r\n  /** Type is an `ArrayBufferView`. */\r\n  ARRAYBUFFERVIEW = 1 << 0,\r\n  /** Type is an `Array`. */\r\n  ARRAY = 1 << 1,\r\n  /** Type is a `Set`. */\r\n  SET = 1 << 2,\r\n  /** Type is a `Map`. */\r\n  MAP = 1 << 3,\r\n  /** Type is inherently acyclic. */\r\n  ACYCLIC = 1 << 4,\r\n  /** Value alignment of 1 byte. */\r\n  VALUE_ALIGN_0 = 1 << 5,\r\n  /** Value alignment of 2 bytes. */\r\n  VALUE_ALIGN_1 = 1 << 6,\r\n  /** Value alignment of 4 bytes. */\r\n  VALUE_ALIGN_2 = 1 << 7,\r\n  /** Value alignment of 8 bytes. */\r\n  VALUE_ALIGN_3 = 1 << 8,\r\n  /** Value alignment of 16 bytes. */\r\n  VALUE_ALIGN_4 = 1 << 9,\r\n  /** Value is a signed type. */\r\n  VALUE_SIGNED = 1 << 10,\r\n  /** Value is a float type. */\r\n  VALUE_FLOAT = 1 << 11,\r\n  /** Value type is nullable. */\r\n  VALUE_NULLABLE = 1 << 12,\r\n  /** Value type is managed. */\r\n  VALUE_MANAGED = 1 << 13,\r\n  /** Key alignment of 1 byte. */\r\n  KEY_ALIGN_0 = 1 << 14,\r\n  /** Key alignment of 2 bytes. */\r\n  KEY_ALIGN_1 = 1 << 15,\r\n  /** Key alignment of 4 bytes. */\r\n  KEY_ALIGN_2 = 1 << 16,\r\n  /** Key alignment of 8 bytes. */\r\n  KEY_ALIGN_3 = 1 << 17,\r\n  /** Key alignment of 16 bytes. */\r\n  KEY_ALIGN_4 = 1 << 18,\r\n  /** Value is a signed type. */\r\n  KEY_SIGNED = 1 << 19,\r\n  /** Value is a float type. */\r\n  KEY_FLOAT = 1 << 20,\r\n  /** Key type is nullable. */\r\n  KEY_NULLABLE = 1 << 21,\r\n  /** Key type is managed. */\r\n  KEY_MANAGED = 1 << 22\r\n}\r\n","/**\r\n * Low-level C-like compiler API.\r\n * @module index\r\n *//***/\r\n\r\nimport { Target, Feature } from \"./common\";\r\nimport { Compiler, Options } from \"./compiler\";\r\nimport { Decompiler } from \"./decompiler\";\r\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\r\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\r\nimport { Module } from \"./module\";\r\nimport { Parser } from \"./parser\";\r\nimport { Program } from \"./program\";\r\n\r\n/** Parses a source file. If `parser` has been omitted a new one is created. */\r\nexport function parseFile(text: string, path: string, isEntry: bool = false,\r\n  parser: Parser | null = null\r\n): Parser {\r\n  if (!parser) parser = new Parser();\r\n  parser.parseFile(text, path, isEntry);\r\n  return parser;\r\n}\r\n\r\n/** Obtains the next required file's path. Returns `null` once complete. */\r\nexport function nextFile(parser: Parser): string | null {\r\n  return parser.nextFile();\r\n}\r\n\r\n/** Obtains the next diagnostic message. Returns `null` once complete. */\r\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\r\n  var program = parser.program;\r\n  return program.diagnosticsOffset < program.diagnostics.length\r\n    ? program.diagnostics[program.diagnosticsOffset++]\r\n    : null;\r\n}\r\n\r\n/** Formats a diagnostic message to a string. */\r\nexport { formatDiagnosticMessage as formatDiagnostic };\r\n\r\n/** Tests whether a diagnostic is informatory. */\r\nexport function isInfo(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.INFO;\r\n}\r\n\r\n/** Tests whether a diagnostic is a warning. */\r\nexport function isWarning(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.WARNING;\r\n}\r\n\r\n/** Tests whether a diagnostic is an error. */\r\nexport function isError(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.ERROR;\r\n}\r\n\r\n/** Creates a new set of compiler options. */\r\nexport function createOptions(): Options {\r\n  return new Options();\r\n}\r\n\r\n/** Sets the `target` option. */\r\nexport function setTarget(options: Options, target: Target): void {\r\n  options.target = target;\r\n}\r\n\r\n/** Sets the `noAssert` option. */\r\nexport function setNoAssert(options: Options, noAssert: bool): void {\r\n  options.noAssert = noAssert;\r\n}\r\n\r\n/** Sets the `importMemory` option. */\r\nexport function setImportMemory(options: Options, importMemory: bool): void {\r\n  options.importMemory = importMemory;\r\n}\r\n\r\n/** Sets the `sharedMemory` option. */\r\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\r\n  options.sharedMemory = sharedMemory;\r\n}\r\n\r\n/** Sets the `importTable` option. */\r\nexport function setImportTable(options: Options, importTable: bool): void {\r\n  options.importTable = importTable;\r\n}\r\n\r\n/** Sets the `sourceMap` option. */\r\nexport function setSourceMap(options: Options, sourceMap: bool): void {\r\n  options.sourceMap = sourceMap;\r\n}\r\n\r\n/** Sets the `memoryBase` option. */\r\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\r\n  options.memoryBase = memoryBase;\r\n}\r\n\r\n/** Sets a 'globalAliases' value. */\r\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\r\n  var globalAliases = options.globalAliases;\r\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\r\n  globalAliases.set(name, alias);\r\n}\r\n\r\n/** Sign extension operations. */\r\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\r\n/** Mutable global imports and exports. */\r\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\r\n/** Bulk memory operations. */\r\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\r\n/** SIMD types and operations. */\r\nexport const FEATURE_SIMD = Feature.SIMD;\r\n/** Threading and atomic operations. */\r\nexport const FEATURE_THREADS = Feature.THREADS;\r\n\r\n/** Enables a specific feature. */\r\nexport function enableFeature(options: Options, feature: Feature): void {\r\n  options.features |= feature;\r\n}\r\n\r\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\r\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\r\n  options.optimizeLevelHint = optimizeLevel;\r\n  options.shrinkLevelHint = shrinkLevel;\r\n}\r\n\r\n/** Finishes parsing. */\r\nexport function finishParsing(parser: Parser): Program {\r\n  return parser.finish();\r\n}\r\n\r\n/** Compiles the sources computed by the parser to a module. */\r\nexport function compileProgram(program: Program, options: Options | null = null): Module {\r\n  return new Compiler(program, options).compile();\r\n}\r\n\r\n/** Decompiles a module to its (low level) source. */\r\nexport function decompileModule(module: Module): string {\r\n  var decompiler = new Decompiler();\r\n  decompiler.decompile(module);\r\n  return decompiler.finish();\r\n}\r\n\r\n/** Builds WebIDL definitions for the specified program. */\r\nexport function buildIDL(program: Program): string {\r\n  return IDLBuilder.build(program);\r\n}\r\n\r\n/** Builds TypeScript definitions for the specified program. */\r\nexport function buildTSD(program: Program): string {\r\n  return TSDBuilder.build(program);\r\n}\r\n\r\n/** Prefix indicating a library file. */\r\nexport { LIBRARY_PREFIX } from \"./common\";\r\n\r\n// Full API\r\nexport * from \"./ast\";\r\n// export * from \"./binary\";\r\nexport * from \"./common\";\r\nexport * from \"./compiler\";\r\nexport * from \"./decompiler\";\r\nexport * from \"./definitions\";\r\nexport * from \"./diagnosticMessages.generated\";\r\nexport * from \"./diagnostics\";\r\nexport * from \"./flow\";\r\nexport * from \"./module\";\r\nexport * from \"./parser\";\r\nexport * from \"./program\";\r\nexport * from \"./resolver\";\r\nexport * from \"./tokenizer\";\r\nexport * from \"./types\";\r\nexport * from \"./util\";\r\n","/** @module util *//***/\r\n\r\n/** Tests if the bit at the specified index is set within a 64-bit map. */\r\nexport function bitsetIs(map: I64, index: i32): bool {\r\n  assert(index >= 0 && index < 64);\r\n  return i64_ne(\r\n    i64_and(\r\n      map,\r\n      i64_shl(\r\n        i64_one,\r\n        i64_new(index)\r\n      )\r\n    ),\r\n    i64_zero\r\n  );\r\n}\r\n\r\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\r\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\r\n  assert(index >= 0 && index < 64);\r\n  return isSet\r\n    ? i64_or(\r\n        map,\r\n        i64_shl(\r\n          i64_one,\r\n          i64_new(index)\r\n        )\r\n      )\r\n    : i64_and(\r\n        map,\r\n        i64_not(\r\n          i64_shl(\r\n            i64_one,\r\n            i64_new(index)\r\n          )\r\n        )\r\n      );\r\n}\r\n","/** @module util *//***/\r\n\r\n/** An enum of named character codes. */\r\nexport const enum CharCode {\r\n\r\n  NULL = 0,\r\n  LINEFEED = 0x0A,\r\n  CARRIAGERETURN = 0x0D,\r\n  LINESEPARATOR = 0x2028,\r\n  PARAGRAPHSEPARATOR = 0x2029,\r\n  NEXTLINE = 0x0085,\r\n\r\n  SPACE = 0x20,\r\n  NONBREAKINGSPACE = 0xA0,\r\n  ENQUAD = 0x2000,\r\n  EMQUAD = 0x2001,\r\n  ENSPACE = 0x2002,\r\n  EMSPACE = 0x2003,\r\n  THREEPEREMSPACE = 0x2004,\r\n  FOURPEREMSPACE = 0x2005,\r\n  SIXPEREMSPACE = 0x2006,\r\n  FIGURESPACE = 0x2007,\r\n  PUNCTUATIONSPACE = 0x2008,\r\n  THINSPACE = 0x2009,\r\n  HAIRSPACE = 0x200A,\r\n  ZEROWIDTHSPACE = 0x200B,\r\n  NARROWNOBREAKSPACE = 0x202F,\r\n  IDEOGRAPHICSPACE = 0x3000,\r\n  MATHEMATICALSPACE = 0x205F,\r\n  OGHAM = 0x1680,\r\n\r\n  _ = 0x5F,\r\n\r\n  _0 = 0x30,\r\n  _1 = 0x31,\r\n  _2 = 0x32,\r\n  _3 = 0x33,\r\n  _4 = 0x34,\r\n  _5 = 0x35,\r\n  _6 = 0x36,\r\n  _7 = 0x37,\r\n  _8 = 0x38,\r\n  _9 = 0x39,\r\n\r\n  a = 0x61,\r\n  b = 0x62,\r\n  c = 0x63,\r\n  d = 0x64,\r\n  e = 0x65,\r\n  f = 0x66,\r\n  g = 0x67,\r\n  h = 0x68,\r\n  i = 0x69,\r\n  j = 0x6A,\r\n  k = 0x6B,\r\n  l = 0x6C,\r\n  m = 0x6D,\r\n  n = 0x6E,\r\n  o = 0x6F,\r\n  p = 0x70,\r\n  q = 0x71,\r\n  r = 0x72,\r\n  s = 0x73,\r\n  t = 0x74,\r\n  u = 0x75,\r\n  v = 0x76,\r\n  w = 0x77,\r\n  x = 0x78,\r\n  y = 0x79,\r\n  z = 0x7A,\r\n\r\n  A = 0x41,\r\n  B = 0x42,\r\n  C = 0x43,\r\n  D = 0x44,\r\n  E = 0x45,\r\n  F = 0x46,\r\n  G = 0x47,\r\n  H = 0x48,\r\n  I = 0x49,\r\n  J = 0x4A,\r\n  K = 0x4B,\r\n  L = 0x4C,\r\n  M = 0x4D,\r\n  N = 0x4E,\r\n  O = 0x4F,\r\n  P = 0x50,\r\n  Q = 0x51,\r\n  R = 0x52,\r\n  S = 0x53,\r\n  T = 0x54,\r\n  U = 0x55,\r\n  V = 0x56,\r\n  W = 0x57,\r\n  X = 0x58,\r\n  Y = 0x59,\r\n  Z = 0x5a,\r\n\r\n  AMPERSAND = 0x26,\r\n  ASTERISK = 0x2A,\r\n  AT = 0x40,\r\n  BACKSLASH = 0x5C,\r\n  BACKTICK = 0x60,\r\n  BAR = 0x7C,\r\n  CARET = 0x5E,\r\n  CLOSEBRACE = 0x7D,\r\n  CLOSEBRACKET = 0x5D,\r\n  CLOSEPAREN = 0x29,\r\n  COLON = 0x3A,\r\n  COMMA = 0x2C,\r\n  DOLLAR = 0x24,\r\n  DOT = 0x2E,\r\n  DOUBLEQUOTE = 0x22,\r\n  EQUALS = 0x3D,\r\n  EXCLAMATION = 0x21,\r\n  GREATERTHAN = 0x3E,\r\n  HASH = 0x23,\r\n  LESSTHAN = 0x3C,\r\n  MINUS = 0x2D,\r\n  OPENBRACE = 0x7B,\r\n  OPENBRACKET = 0x5B,\r\n  OPENPAREN = 0x28,\r\n  PERCENT = 0x25,\r\n  PLUS = 0x2B,\r\n  QUESTION = 0x3F,\r\n  SEMICOLON = 0x3B,\r\n  SINGLEQUOTE = 0x27,\r\n  SLASH = 0x2F,\r\n  TILDE = 0x7E,\r\n\r\n  BACKSPACE = 0x08,\r\n  FORMFEED = 0x0C,\r\n  BYTEORDERMARK = 0xFEFF,\r\n  TAB = 0x09,\r\n  VERTICALTAB = 0x0B\r\n}\r\n\r\n/** Tests if the specified character code is some sort of line break. */\r\nexport function isLineBreak(c: CharCode): bool {\r\n  switch (c) {\r\n    case CharCode.LINEFEED:\r\n    case CharCode.CARRIAGERETURN:\r\n    case CharCode.LINESEPARATOR:\r\n    case CharCode.PARAGRAPHSEPARATOR: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is some sort of white space. */\r\nexport function isWhiteSpace(c: i32): bool {\r\n  switch (c) {\r\n    case CharCode.SPACE:\r\n    case CharCode.TAB:\r\n    case CharCode.VERTICALTAB:\r\n    case CharCode.FORMFEED:\r\n    case CharCode.NONBREAKINGSPACE:\r\n    case CharCode.NEXTLINE:\r\n    case CharCode.OGHAM:\r\n    case CharCode.NARROWNOBREAKSPACE:\r\n    case CharCode.MATHEMATICALSPACE:\r\n    case CharCode.IDEOGRAPHICSPACE:\r\n    case CharCode.BYTEORDERMARK: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is a valid decimal digit. */\r\nexport function isDecimalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._9;\r\n}\r\n\r\n/** Tests if the specified character code is a valid octal digit. */\r\nexport function isOctalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._7;\r\n}\r\n\r\n/** Tests if the specified character code is a valid start of an identifier. */\r\nexport function isIdentifierStart(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode.A && c <= CharCode.Z\r\n      || c == CharCode._\r\n      || c == CharCode.DOLLAR\r\n      || c > 0x7f && isUnicodeIdentifierStart(c);\r\n}\r\n\r\n/** Tests if the specified character code is a valid keyword character. */\r\nexport function isKeywordCharacter(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z;\r\n}\r\n\r\n/** Tests if the specified character code is a valid part of an identifier. */\r\nexport function isIdentifierPart(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode._0 && c <= CharCode._9\r\n      || c == CharCode._\r\n      || c == CharCode.DOLLAR\r\n      || c > 0x7f && isUnicodeIdentifierPart(c);\r\n}\r\n\r\n// storing as u16 to save memory\r\nconst unicodeIdentifierStart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\r\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\r\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\r\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\r\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\r\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\r\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\r\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\r\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\r\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\r\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\r\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\r\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\r\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\r\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\r\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\r\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\r\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\r\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\r\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\r\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\r\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\r\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\r\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\r\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\r\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\r\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\r\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\r\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\r\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\r\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\r\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\r\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\r\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\r\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\r\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\r\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\r\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\r\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\r\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\r\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\r\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\r\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\r\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\r\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\r\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\r\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\r\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\r\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\r\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\r\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\r\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\r\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\r\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\r\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\r\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\nconst unicodeIdentifierPart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\r\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\r\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\r\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\r\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\r\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\r\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\r\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\r\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\r\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\r\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\r\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\r\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\r\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\r\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\r\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\r\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\r\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\r\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\r\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\r\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\r\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\r\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\r\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\r\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\r\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\r\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\r\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\r\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\r\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\r\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\r\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\r\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\r\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\r\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\r\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\r\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\r\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\r\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\r\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\r\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\r\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\r\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\r\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\r\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\r\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\r\n  8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\r\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\r\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\r\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\r\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\r\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\r\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\r\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\r\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\r\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\r\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\r\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\r\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\r\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\r\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\r\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\r\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\r\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\r\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\n\r\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\r\n  if (code < map[0]) return false;\r\n\r\n  var lo = 0;\r\n  var hi = map.length;\r\n  var mid: i32;\r\n  var midVal: u16;\r\n\r\n  while (lo + 1 < hi) {\r\n    mid = lo + ((hi - lo) >> 1);\r\n    mid -= (mid & 1);\r\n    midVal = map[mid];\r\n    if (midVal <= code && code <= map[mid + 1]) {\r\n      return true;\r\n    }\r\n    if (code < midVal) {\r\n      hi = mid;\r\n    } else {\r\n      lo = mid + 2;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isUnicodeIdentifierStart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\r\n}\r\n\r\nfunction isUnicodeIdentifierPart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\r\n}\r\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\r\n  if (original) {\r\n    let cloned = new Array<V>(original.length);\r\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\r\n    return cloned;\r\n  }\r\n  return new Array<V>();\r\n}\r\n\r\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\r\n  if (original) {\r\n    let cloned = new Set<V>();\r\n    for (let v of original) cloned.add(v);\r\n    return cloned;\r\n  }\r\n  return new Set<V>();\r\n}\r\n\r\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\r\n  var cloned = new Map<K,V>();\r\n  if (original) {\r\n    for (let [k, v] of original) cloned.set(k, v);\r\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\r\n  } else if (overrides) {\r\n    for (let [k, v] of overrides) cloned.set(k, v);\r\n  }\r\n  return cloned;\r\n}\r\n","/** @module util *//***/\r\n\r\nimport {\r\n  CharCode\r\n} from \"./charcode\";\r\n\r\nimport {\r\n  PATH_DELIMITER\r\n} from \"../common\";\r\n\r\nconst separator = CharCode.SLASH;\r\n\r\n/**\r\n * Normalizes the specified path, removing interior placeholders.\r\n * Expects a posix-compatible relative path (not Windows compatible).\r\n */\r\nexport function normalizePath(path: string): string {\r\n  var pos = 0;\r\n  var len = path.length;\r\n\r\n  // trim leading './'\r\n  while (pos + 1 < len &&\r\n    path.charCodeAt(pos) == CharCode.DOT &&\r\n    path.charCodeAt(pos + 1) == separator\r\n  ) {\r\n    pos += 2;\r\n  }\r\n\r\n  if (pos > 0 || len < path.length) {\r\n    path = path.substring(pos, len);\r\n    len -= pos;\r\n    pos = 0;\r\n  }\r\n\r\n  var atEnd: bool;\r\n  while (pos + 1 < len) {\r\n    atEnd = false;\r\n\r\n    // we are only interested in '/.' sequences ...\r\n    if (\r\n      path.charCodeAt(pos) == separator &&\r\n      path.charCodeAt(pos + 1) == CharCode.DOT\r\n    ) {\r\n      // '/.' ( '/' | $ )\r\n      atEnd = pos + 2 == len;\r\n      if (atEnd ||\r\n        pos + 2 < len &&\r\n        path.charCodeAt(pos + 2) == separator\r\n      ) {\r\n        path = atEnd\r\n          ? path.substring(0, pos)\r\n          : path.substring(0, pos) + path.substring(pos + 2);\r\n        len -= 2;\r\n        continue;\r\n      }\r\n\r\n      // '/.' ( './' | '.' $ )\r\n      atEnd = pos + 3 == len;\r\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\r\n        pos + 3 < len &&\r\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\r\n        path.charCodeAt(pos + 3) == separator\r\n      ) {\r\n        // find preceeding '/'\r\n        let ipos = pos;\r\n        while (--ipos >= 0) {\r\n          if (path.charCodeAt(ipos) == separator) {\r\n            if (pos - ipos != 3 ||\r\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\r\n              path.charCodeAt(ipos + 2) != CharCode.DOT\r\n            ) { // exclude '..' itself\r\n              path = atEnd\r\n                ? path.substring(0, ipos)\r\n                : path.substring(0, ipos) + path.substring(pos + 3);\r\n              len -= pos + 3 - ipos;\r\n              pos = ipos - 1; // incremented again at end of loop\r\n            }\r\n            break;\r\n          }\r\n        }\r\n\r\n        // if there's no preceeding '/', trim start if non-empty\r\n        if (ipos < 0 && pos > 0) {\r\n          if (pos != 2 ||\r\n            path.charCodeAt(0) != CharCode.DOT ||\r\n            path.charCodeAt(1) != CharCode.DOT\r\n          ) { // exclude '..' itself\r\n            path = path.substring(pos + 4);\r\n            len = path.length;\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    pos++;\r\n  }\r\n  return len > 0 ? path : \".\";\r\n}\r\n\r\n/** Resolves the specified path relative to the specified origin. */\r\nexport function resolvePath(normalizedPath: string, origin: string): string {\r\n  if (normalizedPath.startsWith(\"std/\")) {\r\n    return normalizedPath;\r\n  }\r\n  return normalizePath(\r\n    dirname(origin) + PATH_DELIMITER + normalizedPath\r\n  );\r\n}\r\n\r\n/** Obtains the directory portion of a normalized path. */\r\nexport function dirname(normalizedPath: string): string {\r\n  var pos = normalizedPath.length;\r\n  if (pos <= 1) {\r\n    if (pos == 0) return \".\";\r\n    if (normalizedPath.charCodeAt(0) == separator) {\r\n      return normalizedPath;\r\n    }\r\n  }\r\n  while (--pos > 0) {\r\n    if (normalizedPath.charCodeAt(pos) == separator) {\r\n      return normalizedPath.substring(0, pos);\r\n    }\r\n  }\r\n  return \".\";\r\n}\r\n","/** @module util *//***/\r\n\r\nconst indentX1 = \"  \";\r\nconst indentX2 = \"    \";\r\nconst indentX4 = \"        \";\r\n\r\n/** Creates an indentation matching the number of specified levels. */\r\nexport function indent(sb: string[], level: i32): void {\r\n  while (level >= 4) {\r\n    sb.push(indentX4);\r\n    level -= 4;\r\n  }\r\n  if (level >= 2) {\r\n    sb.push(indentX2);\r\n    level -= 2;\r\n  }\r\n  if (level) {\r\n    sb.push(indentX1);\r\n  }\r\n}\r\n","/** @module util *//***/\r\n\r\n/** Reads an 8-bit integer from the specified buffer. */\r\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset];\r\n}\r\n\r\n/** Writes an 8-bit integer to the specified buffer. */\r\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset] = value;\r\n}\r\n\r\n/** Reads a 16-bit integer from the specified buffer. */\r\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8;\r\n}\r\n\r\n/** Writes a 16-bit integer to the specified buffer. */\r\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n}\r\n\r\n/** Reads a 32-bit integer from the specified buffer. */\r\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8\r\n       | buffer[offset + 2] << 16\r\n       | buffer[offset + 3] << 24;\r\n}\r\n\r\n/** Writes a 32-bit integer to the specified buffer. */\r\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n  buffer[offset + 2] = value >>> 16;\r\n  buffer[offset + 3] = value >>> 24;\r\n}\r\n\r\n/** Reads a 64-bit integer from the specified buffer. */\r\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\r\n  var lo = readI32(buffer, offset);\r\n  var hi = readI32(buffer, offset + 4);\r\n  return i64_new(lo, hi);\r\n}\r\n\r\n/** Writes a 64-bit integer to the specified buffer. */\r\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(i64_low(value), buffer, offset);\r\n  writeI32(i64_high(value), buffer, offset + 4);\r\n}\r\n\r\n/** Reads a 32-bit float from the specified buffer. */\r\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\r\n  return i32_as_f32(readI32(buffer, offset));\r\n}\r\n\r\n/** Writes a 32-bit float to the specified buffer. */\r\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(f32_as_i32(value), buffer, offset);\r\n}\r\n\r\n/** Reads a 64-bit float from the specified buffer. */\r\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\r\n  return i64_as_f64(readI64(buffer, offset));\r\n}\r\n\r\n/** Writes a 64-bit float to the specified buffer. */\r\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\r\n  var valueI64 = f64_as_i64(value);\r\n  writeI32(i64_low(valueI64), buffer, offset);\r\n  writeI32(i64_high(valueI64), buffer, offset + 4);\r\n}\r\n"],"sourceRoot":""}