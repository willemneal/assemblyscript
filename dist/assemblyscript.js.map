{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__20__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_MUTABLE_GLOBAL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","String","Array","FixedArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","abort","pow","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocArray","feature_1","Feature","target_1","Target","typeinfo_1","Typeinfo","TypeinfoFlags","__export","isPowerOf2","x","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","withRelatedRange","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","emitDiagnostic","info","infoRelated","warning","warningRelated","error","errorRelated","OperatorKind","common_1","diagnostics_1","types_1","ast_1","resolver_1","flow_1","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","operatorKindFromDecorator","decoratorKind","arg","DecoratorKind","OPERATOR","OPERATOR_BINARY","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","OPERATOR_PREFIX","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","OPERATOR_POSTFIX","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","Program","_super","_this","sources","diagnosticsOffset","explicitStartFunction","filesByName","elementsByName","elementsByDeclaration","instancesByName","typeClasses","managedClasses","nextClassId","nativeDummySignature","nativeSource","Source","SourceKind","LIBRARY","nativeFile","File","set","internalName","resolver","Resolver","__extends","writeRuntimeHeader","buffer","offset","classInstance","payloadSize","writeI32","id","makeNativeVariableDeclaration","flags","NONE","Node","createVariableDeclaration","createIdentifierExpression","makeNativeTypeDeclaration","identifier","createTypeDeclaration","createOmittedType","makeNativeFunctionDeclaration","createFunctionDeclaration","createSignature","createType","createSimpleTypeName","makeNativeNamespaceDeclaration","createNamespaceDeclaration","makeNativeFunction","signature","parent","decoratorFlags","Function","FunctionPrototype","getElementByDeclaration","declaration","has","initialize","options","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","EXPORT","GENERIC","BUILTIN","hasFeature","registerConstantInteger","i64_new","isWasm64","WASM64","WASM32","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","k","file","statements","j","statement","kind","NodeKind","initializeExports","EXPORTDEFAULT","initializeExportDefault","IMPORT","initializeImports","VARIABLE","initializeVariables","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","FUNCTIONDECLARATION","initializeFunction","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeDefinition","queuedExportsStar_1","__values","queuedExportsStar_1_1","next","done","_g","__read","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","File_0_not_found","queuedImport","element","lookupForeign","Module_0_has_no_exported_member_1","localName","asImportedNamespace","queuedExports_1","queuedExports_1_1","_h","exports_1","exports_1_1","_j","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","arrayBufferInstance","requireClass","stringInstance","arrayBufferViewInstance","registerNativeTypeClass","i8ArrayPrototype","CLASS_PROTOTYPE","i16ArrayPrototype","i32ArrayPrototype","i64ArrayPrototype","u8ArrayPrototype","u8ClampedArrayPrototype","u16ArrayPrototype","u32ArrayPrototype","u64ArrayPrototype","f32ArrayPrototype","f64ArrayPrototype","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","SEALED","Class_0_is_sealed_and_cannot_be_extended","identifierNode","UNMANAGED","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","Range","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_k","alias","firstChar","parseI32","Error","arrayPrototype","fixedArrayPrototype","setPrototype","mapPrototype","abortInstance","requireFunction","allocInstance","reallocInstance","freeInstance","retainInstance","releaseInstance","collectInstance","typeinfoInstance","instanceofInstance","visitInstance","allocArrayInstance","_l","values","_m","isEntry","_o","_p","markModuleExport","resolved","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","MODULE_EXPORT","instanceMembers","_c","_d","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FUNCTION","FIELD","CLASS","members","_e","_f","type","setType","typeKind","className","classElement","is","global","Global","CONST","setConstantIntegerValue","registerConstantFloat","setConstantFloatValue","ensureGlobal","merged","tryMerge","Duplicate_identifier_0","elements","requireGlobal","foreignName","lookupExport","fileQueuedExports","checkDecorators","decorators","acceptedFlags","decorator","flag","decoratorKindToFlag","decoratorNameToKind","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","GLOBAL","implementsTypes","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Operation_not_supported","extendsType","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeProperty","initializeMethod","INDEXSIGNATUREDECLARATION","STATIC","INTERFACE_PROTOTYPE","READONLY","INLINE","LAZY","UNSAFE","ABSTRACT","FieldPrototype","addInstance","isStatic","CONSTRUCTOR","checkOperatorOverloads","classPrototype","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","ensureProperty","parentMembers","PropertyPrototype","Duplicate_property_0","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","internalPath","queued","endsWith","path","exportedName","Export_declaration_conflicts_with_exported_declaration_of_0","declarations","initializeImport","namespaceName","validDecorators","AMBIENT","EXTERNAL","INSTANCE","FILE","START","Module_cannot_have_multiple_start_functions","findDecorator","InterfacePrototype","original","Namespace","copyMembers","DECLARE","Element","program","shadowType","current","unset","originalDeclaration","actual","isBound","TypedElement","apply","RESOLVED","startFunction","Signature","isImport","lookup","includes","exports_2","exports_2_1","_b","memberName","TYPEDEFINITION","mangleInternalName","typeParameters","NAMESPACE","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","initializer","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","isImmutable","Parameter","Local","index","LOCAL","instances","boundPrototypes","body","arrowKind","toBound","bound","getResolvedInstance","instanceKey","setResolvedInstance","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","addLocal","locals","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","FunctionTarget","__s","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","parameterIndex","Field","memoryOffset","firstDeclaration","Property","getterInstance","setterInstance","AcyclicState","_isInterface","constructorPrototype","extends","basePtototype","Class","typeArguments","base","INTERFACE","currentMemoryOffset","constructorInstance","_id","_acyclic","rttiFlags","asClass","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","baseName","baseType","typeParameterNodes","numTypeArguments","isBuiltinArray","lengthField","lookupOverload","isAssignableTo","target","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","writeField","baseOffset","writeI8","writeI16","writeF32","writeF64","getTypeArgumentsTo","extendedPrototype","getArrayValueType","abvInstance","acyclic","hasCycle","cyclesTo","other","except","classReference","Interface","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","srcMembers_1","srcMembers_1_1","isInstance","asGlobal","NativeType","ExpressionId","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeUnreachable","_BinaryenTypeAuto","FeatureFlags","_BinaryenFeatureAtomics","_BinaryenFeatureMutableGlobals","_BinaryenFeatureNontrappingFPToInt","_BinaryenFeatureSIMD128","_BinaryenFeatureBulkMemory","_BinaryenFeatureSignExt","_BinaryenFeatureExceptionHandling","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenLocalGetId","_BinaryenLocalSetId","_BinaryenGlobalGetId","_BinaryenGlobalSetId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicNotifyId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDBitselectId","_BinaryenSIMDShiftId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","HostOp","_BinaryenMemorySize","_BinaryenMemoryGrow","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDExtractOp","_BinaryenExtractLaneSVecI8x16","_BinaryenExtractLaneUVecI8x16","_BinaryenExtractLaneSVecI16x8","_BinaryenExtractLaneUVecI16x8","_BinaryenExtractLaneVecI32x4","_BinaryenExtractLaneVecI64x2","_BinaryenExtractLaneVecF32x4","_BinaryenExtractLaneVecF64x2","SIMDReplaceOp","_BinaryenReplaceLaneVecI8x16","_BinaryenReplaceLaneVecI16x8","_BinaryenReplaceLaneVecI32x4","_BinaryenReplaceLaneVecI64x2","_BinaryenReplaceLaneVecF32x4","_BinaryenReplaceLaneVecF64x2","SIMDShiftOp","_BinaryenShlVecI8x16","_BinaryenShrSVecI8x16","_BinaryenShrUVecI8x16","_BinaryenShlVecI16x8","_BinaryenShrSVecI16x8","_BinaryenShrUVecI16x8","_BinaryenShlVecI32x4","_BinaryenShrSVecI32x4","_BinaryenShrUVecI32x4","_BinaryenShlVecI64x2","_BinaryenShrSVecI64x2","_BinaryenShrUVecI64x2","MemorySegment","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","_BinaryenModuleCreate","lit","memory","allocate","_BinaryenSizeofLiteral","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","result","paramTypes","cStr","allocStringCached","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","store","_BinaryenLiteralVec128","unary","op","expr","_BinaryenUnary","binary","left","right","_BinaryenBinary","host","operands","allocPtrArray","_BinaryenHost","local_get","_BinaryenLocalGet","local_tee","_BinaryenLocalTee","global_get","_BinaryenGlobalGet","load","signed","ptr","align","_BinaryenLoad","None","_BinaryenStore","atomic_load","_BinaryenAtomicLoad","atomic_store","_BinaryenAtomicStore","atomic_rmw","_BinaryenAtomicRMW","atomic_cmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","atomic_wait","timeout","expectedType","_BinaryenAtomicWait","atomic_notify","notifyCount","_BinaryenAtomicNotify","local_set","_BinaryenLocalSet","global_set","_BinaryenGlobalSet","block","label","children","_BinaryenBlock","br","condition","_BinaryenBreak","drop","expression","_BinaryenDrop","loop","_BinaryenLoop","if","ifTrue","ifFalse","_BinaryenIf","nop","_BinaryenNop","return","_BinaryenReturn","select","_BinaryenSelect","switch","names","defaultName","numNames","strs","_BinaryenSwitch","returnType","_BinaryenCall","call_indirect","typeName","_BinaryenCallIndirect","unreachable","_BinaryenUnreachable","memory_copy","size","_BinaryenMemoryCopy","memory_fill","_BinaryenMemoryFill","simd_extract","vec","idx","_BinaryenSIMDExtract","simd_replace","_BinaryenSIMDReplace","simd_shuffle","vec1","vec2","mask","_BinaryenSIMDShuffle","simd_bitselect","cond","_BinaryenSIMDBitselect","simd_shift","shift","_BinaryenSIMDShift","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","externalName","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","shared","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","setMemory","initial","maximum","segments","segs","psvs","offs","sizs","i64_low","i64_high","cArr1","cArr2","cArr3","cArr4","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","getFeatures","_BinaryenModuleGetFeatures","setFeatures","featureFlags","_BinaryenModuleSetFeatures","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","readBuffer","readString","toText","toAsmjs","str","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getExpressionId","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getConstValueF32","getConstValueF64","getLocalGetIndex","getLocalSetIndex","_BinaryenLocalSetGetIndex","getLocalSetValue","_BinaryenLocalSetGetValue","isLocalTee","_BinaryenLocalSetIsTee","getGlobalGetName","getBinaryOp","getBinaryLeft","getBinaryRight","getUnaryOp","getUnaryValue","getLoadBytes","getLoadOffset","getLoadPtr","isLoadSigned","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","getBlockName","_BinaryenBlockGetName","getBlockChildCount","_BinaryenBlockGetNumChildren","getBlockChild","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","getIfTrue","_BinaryenIfGetIfTrue","getIfFalse","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","getSelectThen","_BinaryenSelectGetIfTrue","getSelectElse","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","getCallTarget","_BinaryenCallGetTarget","getCallOperandCount","_BinaryenCallGetNumOperands","getCallOperand","_BinaryenCallGetOperand","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","needsExplicitUnreachable","Unreachable","Return","Break","Block","numChildren","traverse","data","If","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDBitselect","_BinaryenSIMDBitselectGetLeft","_BinaryenSIMDBitselectGetRight","_BinaryenSIMDBitselectGetCond","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Select","Drop","Host","Nop","tokenizer_1","Token","nodeIsConstantValue","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","ASSERTION","CALL","ELEMENTACCESS","PARENTHESIZED","PROPERTYACCESS","SUPER","nodeIsGenericCallable","createTypeName","TypeName","isNullable","TypeNode","createTypeParameter","defaultType","elem","TypeParameterNode","createParameter","ParameterNode","parameterKind","parameters","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","createComment","node","CommentNode","commentKind","isQuoted","IdentifierExpression","symbol","createEmptyIdentifierExpression","createArrayLiteralExpression","ArrayLiteralExpression","elementExpressions","createAssertionExpression","assertionKind","toType","AssertionExpression","createBinaryExpression","operator","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportDefaultStatement","ExportDefaultStatement","createExportImportStatement","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","FunctionDeclaration","createIndexSignatureDeclaration","keyType","valueType","IndexSignatureDeclaration","createMethodDeclaration","MethodDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","TypeDeclaration","createVariableStatement","VariableStatement","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","TYPENAME","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","SIGNATURE","nameStr","propStr","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","BINARY","numArguments","COMMA","FLOAT","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","Statement","SOURCE","tokenizer","exportPaths","sourceKind","pos","lastIndexOf","simplePath","ENTRY","DeclarationStatement","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FOR","ArrowKind","clone","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","isTypeOmitted","program_1","module_1","TypeKind","TypeFlags","v128_zero","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","isize64","isize32","usize64","usize32","clz","computeSmallIntegerShift","targetType","computeSmallIntegerMask","classType","asNullable","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isStrictlyAssignableTo","commonDenominator","signednessIsImportant","toNativeType","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","asFunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","g","e","window","ReportMode","builtins_1","currentThisExpression","currentElementExpression","resolveType","context","reportMode","REPORT","parameterNodes","parameterNode","REST","parameterTypeNode","Type_expected","returnTypeNode","typeNode","typeArgumentNodes","possiblyPlaceholder","Type_0_is_not_generic","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","type_1","Expected_0_type_arguments_but_got_1","typeArgument","resolveTypeArguments","Cannot_find_name_0","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","resolveIdentifier","ensureResolvedLazyGlobal","resolvePropertyAccessExpression","propertyAccess","contextualType","targetExpression","resolveExpression","propertyName","indexedGet","Index_signature_is_missing_in_type_0","arrayType","resolvedType","resolveElementAccessExpression","elementAccess","determineIntegerLiteralType","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","resolveAssertionExpression","resolveUnaryPrefixExpression","resolveUnaryPostfixExpression","resolveBinaryExpression","resolveThisExpression","resolveSuperExpression","actualFunction","resolveLiteralExpression","resolveCallExpression","NONNULL","i64_sub","i64_zero","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","literalType","BuiltinSymbols","resolveFunctionInclTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","actualParent","resolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","signatureParameters","numSignatureParameters","parameterDeclaration","reportNode","resolvedTypeArguments","numTypeParameters","baseClass","nameInclTypeParamters","baseMembers","baseMembers_1","baseMembers_1_1","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","atEnd","fieldInstance","boundPrototype","propertyInstance","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","LocalFlags","FlowFlags","ANY_CATEGORICAL","ANY_CONDITIONAL","FieldFlags","scopedLocals","fieldFlags","parentFunction","continueLabel","localFlags","inlineFunction","inlineReturnLabel","createInline","fork","branch","slice","getTempLocal","temps","k_1","unsetLocalFlag","pop","getAutoreleaseLocal","SCOPED","setLocalFlag","RETAINED","freeTempLocal","getAndFreeTempLocal","getScopedLocal","addScopedLocal","scopedLocal","addScopedAlias","existingLocal","scopedAlias","freeScopedLocals","scope","isLocalFlag","defaultIfInlined","isAnyLocalFlag","pushBreakLabel","stack","popBreakLabel","inherit","inheritConditional","CONDITIONALLY_RETAINED","READFROM","CONDITIONALLY_READFROM","WRITTENTO","CONDITIONALLY_WRITTENTO","inheritMutual","leftLocalFlags","numLeftLocalFlags","rightLocalFlags","numRightLocalFlags","combinedFlags","max","isNonnull","inheritNonnullIfTrue","EqzI32","EqzI64","inheritNonnullIfFalse","EqI32","EqI64","NeI32","NeI64","canOverflow","WRAPPED","canConversionOverflow","global_1","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","MIN_VALUE","fromType","last","instanceName","levels","findUsedLocalsVisit","used","findUsedLocals","Options","importMemory","sharedMemory","importTable","features","feature","ContextualFlags","RuntimeFeatures","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","runtimeFeatures","skippedAutoreleases","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","Atomics","MutableGloabls","SIMD128","BulkMemory","SignExt","compile","startFunctionInstance","startFunctionBody","currentFlow","currentBody","heap_base","rtti_base","files","compileFile","compileExports","hasExplicitStart","funcRef","ensureFunctionType","compileVisitGlobals","compileVisitMembers","compileRTTI","i64_align","isSharedMemory","i64_shr_u","ensureModuleExports","members_1","members_1_1","ensureModuleExport","prefix","fullName","setter","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","ensureModuleFieldGetter","ensureModuleFieldSetter","isUnmanaged","subPrefix","loadExpr","isManaged","makeRetain","nativeType","nativeSizeType","valueExpr","makeRetainRelease","compileElement","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","element_1","exportsStar_1","exportsStar_1_1","compileFileByPath","normalizedPathWithoutExtension","pathWithIndex","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","initAutoreleaseSkipped","initializerNode","compileExpression","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","initializeInStart","Mutable_value_cannot_be_inlined","decoratorNodes","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","makeGlobalAssignment","compileFunction","resultType","compileFunctionBody","stmts","bodyNode","compileStatements","MAIN","indexBefore","performAutoreleases","nonNull","temp","started","unshift","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","previousType","An_implementation_cannot_be_declared_in_ambient_contexts","flatten","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileClass","staticMembers","compileInterfaceDeclaration","addMemorySegment","alignment","ensureStaticString","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","ensureStaticArrayBuffer","elementType","byteLength","bufferInstance","buf","writeI64","ensureStaticArrayHeader","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","ensureFunctionTableEntry","TRAMPOLINE","memberStatements","compileStatement","contextualFlags","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","terminated","repeatLabel","alwaysTrue","compileExpressionRetainType","incrExpr","bodyStatement","usesContinue","breakBlock","repeatBlock","ifTrueStmts","ifTrueFlow","ifFalseFlow","ifFalseStmts","valueExpression","contextualFlags_1","ANY_RETAINED","numCases","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","newArgs","compileAbort","numDeclarations","initializers","isConst","_const_declarations_must_be_initialized","CONSTANT","compileInlineConstant","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","convertExpression","ensureSmallIntegerWrap","explicit","Object_is_possibly_null","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","PREFIX","Expression_is_never_null","tempIndex","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","AllTrueVecI8x16","EqVecI8x16","AnyTrueVecI8x16","NeVecI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","moveAutorelease","rightStmts","makeRelease","retainLeftInThen","makeAssignment","compileUnaryOverload","thisExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","indexExpression","tee","makeLocalAssignment","makeFieldAssignment","makeAutorelease","nativeReturnType","thisExpr_1","thisExpr","elementExpr","tempLocalTarget","tempLocalElement","makeSkippedRelease","nativeFieldType","nativeThisType","tempThis","tempValue","flow_2","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","theCall","compileCallDirect","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","inferredTypes","argumentNodes","argumentExprs","templateName","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","argumentExpressions","thisArg","parameterTypes_1","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","usedLocals","paramExpr","paramType","argumentLocal","baseInstance","initType","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","argc","Optional_parameter_must_have_an_initializer","ensureArgcVar","setargc","oldExpr","newExpr","temp1","temp2","undoAutorelease","fromInnerFlow","toOuterFlow","clearFlags","lengthBefore","skipAutorelease","TODO_Cannot_inline_inferred_calls_and_specific_internals_yet","numOperands","isCallImport","allOptionalsAreConstant","expr_1","makeCallIndirect","numExpressions","exprs","contextualSignature","numPresentParameters","thisTypeNode","maybeCompileEnclosingSource","flow_3","actualFunction_1","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","actualType","implicitlyNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","tempDataStart","nativeElementType","bufferAddress","arraySegment","arrayAddress","alignLog2","nativeArrayType","dataStart","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","compileInstantiate","baseCtor","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","IfThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","thisLocalIndex","makeInstanceOfClass","idTemp","idExpr","conditions","Auto","compiler_1","compiler","isAsm","directize","isInteger","evaluateConstantType","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","checkTypeAbsent","checkArgsRequired","SWALLOW","isConstant","sizeof","checkTypeRequired","alignof","ctz","checkArgsOptional","typeArgumentsRange","Type_0_has_no_property_1","popcnt","checkTypeOptional","ClzI64","CtzI64","PopcntI64","rotl","RotlI32","RotlI64","rotr","RotrI32","RotrI64","abs","tempLocal1","tempLocalIndex2","tempLocalIndex1","wasm64","AbsF32","AbsF64","MaxF32","MaxF64","tempLocal0","min","MinF32","MinF64","floor","CeilF32","FloorF32","CeilF64","FloorF64","copysign","CopysignF32","CopysignF64","nearest","NearestF32","NearestF64","reinterpret","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","sqrt","SqrtF32","SqrtF64","trunc","TruncF32","TruncF64","outType","immOffset","evaluateImmediateOffset","immAlign","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","inType","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","Add","Sub","And","Or","Xor","Xchg","memory_size","MemorySize","memory_grow","MemoryGrow","alreadyUnchecked","call_direct","arg0Type","operandExprs","nativeParamTypes","operandType","instantiate","User_defined_0","Expression_must_be_a_compile_time_constant","off","v128_splat","SplatVecI8x16","SplatVecI16x8","SplatVecI32x4","SplatVecI64x2","SplatVecF32x4","SplatVecF64x2","v128_extract_lane","ExtractLaneSVecI8x16","ExtractLaneUVecI8x16","ExtractLaneSVecI16x8","ExtractLaneUVecI16x8","ExtractLaneVecI32x4","ExtractLaneVecI64x2","ExtractLaneVecF32x4","ExtractLaneVecF64x2","maxIdx","v128_replace_lane","ReplaceLaneVecI8x16","ReplaceLaneVecI16x8","ReplaceLaneVecI32x4","ReplaceLaneVecI64x2","ReplaceLaneVecF32x4","ReplaceLaneVecF64x2","v128_shuffle","laneWidth","laneCount","argN","off8","idx8","v128_add","v128_sub","v128_mul","v128_div","v128_add_saturate","v128_sub_saturate","v128_min","v128_max","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","AddVecI8x16","AddVecI16x8","AddVecI32x4","AddVecI64x2","AddVecF32x4","AddVecF64x2","SubVecI8x16","SubVecI16x8","SubVecI32x4","SubVecI64x2","SubVecF32x4","SubVecF64x2","MulVecI8x16","MulVecI16x8","MulVecI32x4","MulVecF32x4","MulVecF64x2","DivVecF32x4","DivVecF64x2","AddSatSVecI8x16","AddSatUVecI8x16","AddSatSVecI16x8","AddSatUVecI16x8","SubSatSVecI8x16","SubSatUVecI8x16","SubSatSVecI16x8","SubSatUVecI16x8","MinVecF32x4","MinVecF64x2","MaxVecF32x4","MaxVecF64x2","EqVecI16x8","EqVecI32x4","EqVecF32x4","EqVecF64x2","NeVecI16x8","NeVecI32x4","NeVecF32x4","NeVecF64x2","LtSVecI8x16","LtUVecI8x16","LtSVecI16x8","LtUVecI16x8","LtSVecI32x4","LtUVecI32x4","LtVecF32x4","LtVecF64x2","LeSVecI8x16","LeUVecI8x16","LeSVecI16x8","LeUVecI16x8","LeSVecI32x4","LeUVecI32x4","LeVecF32x4","LeVecF64x2","GtSVecI8x16","GtUVecI8x16","GtSVecI16x8","GtUVecI16x8","GtSVecI32x4","GtUVecI32x4","GtVecF32x4","GtVecF64x2","GeSVecI8x16","GeUVecI8x16","GeSVecI16x8","GeUVecI16x8","GeSVecI32x4","GeUVecI32x4","GeVecF32x4","GeVecF64x2","v128_neg","v128_abs","v128_sqrt","v128_convert","v128_trunc","NegVecI8x16","NegVecI16x8","NegVecI32x4","NegVecI64x2","NegVecF32x4","NegVecF64x2","AbsVecF32x4","AbsVecF64x2","SqrtVecF32x4","SqrtVecF64x2","ConvertSVecI32x4ToVecF32x4","ConvertUVecI32x4ToVecF32x4","ConvertSVecI64x2ToVecF64x2","ConvertUVecI64x2ToVecF64x2","TruncSatSVecF32x4ToVecI32x4","TruncSatUVecF32x4ToVecI32x4","TruncSatSVecF64x2ToVecI64x2","TruncSatUVecF64x2ToVecI64x2","v128_shl","v128_shr","ShlVecI8x16","ShlVecI16x8","ShlVecI32x4","ShlVecI64x2","ShrSVecI8x16","ShrUVecI8x16","ShrSVecI16x8","ShrUVecI16x8","ShrSVecI32x4","ShrUVecI32x4","ShrSVecI64x2","ShrUVecI64x2","v128_and","v128_or","v128_xor","AndVec128","OrVec128","XorVec128","v128_not","NotVec128","v128_bitselect","v128_any_true","v128_all_true","AnyTrueVecI16x8","AnyTrueVecI32x4","AnyTrueVecI64x2","AllTrueVecI16x8","AllTrueVecI32x4","AllTrueVecI64x2","idof","visit_globals","visit_members","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_u_xor","i32_atomic_rmw16_u_xor","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_s_f32x4_sat","i32x4_trunc_u_f32x4_sat","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_s_f64x2_sat","i64x2_trunc_u_f64x2_sat","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_s_i32x4","f32x4_convert_u_i32x4","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_s_i64x2","f64x2_convert_u_i64x2","v8x16_shuffle","tryDeferASM","messageArg","filenameArg","typeToRuntimeFlags","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","memory_allocate","memory_free","memory_reset","runtime_instanceof","runtime_flags","runtime_allocate","runtime_reallocate","runtime_register","runtime_discard","runtime_makeArray","capabilities","nativeSizeSize","ftype","blocks","outer","lastId","managedClasses_1","managedClasses_1_1","visitImpl","isDeclaredInLibrary","visitFunc","visitSig","callExpr","fieldOffset","managedClasses_2","managedClasses_2_1","abvPrototype","managedClasses_3","managedClasses_3_1","isAcyclic","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","i64_to_string","ExportsWalker","includePrivate","seen","walk","visitFile","visitElement","visitAlias","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","visitNamespace","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","members_2","members_2_1","name_1","visitInterface","TSDBuilder","unknown","numMembers","members_3","members_3_1","name_2","isInterface","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","parseParameters","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","parseFunctionExpressionCommon","bodyExpression","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","setEnd","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","_super_must_be_followed_by_an_argument_list_or_member_access","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","skipBlock","depth","Precedence","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","UnreachableError","captureStackTrace","AssertionError","defineProperties","writable","fround","EPSILON","MIN_NORMAL_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","clz32","round","y","sign","isTrueish","radix","parseInt","undefined","fromCodePoint","Number","capacity","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","HEAP","HEAP_OFFSET","oldHeap","fill","copy","copyWithin","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","__decorate","unmanaged","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoAssert","setImportMemory","setSharedMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","buildRTTI","cls","bitsetIs","map","bitsetSet","isSet","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","makeArray","cloned","makeSet","original_1","original_1_1","v","overrides","original_2","original_2_1","overrides_1","overrides_1_1","overrides_2","overrides_2_1","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","readI32","readI64","readI8","readI16","readF32","readF64","valueI64"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,EAAAG,QAAA,aACA,mBAAAC,eAAAC,IACAD,OAAA,aAAAJ,GACA,iBAAAC,QACAA,QAAA,eAAAD,EAAAG,QAAA,aAEAJ,EAAA,eAAAC,EAAAD,EAAA,UARA,CASC,oBAAAO,UAAAC,KAAA,SAAAC,GACD,mBCTA,IAAAC,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAV,QAGA,IAAAC,EAAAO,EAAAE,GAAA,CACAC,EAAAD,EACAE,GAAA,EACAZ,QAAA,IAUA,OANAa,EAAAH,GAAAI,KAAAb,EAAAD,QAAAC,IAAAD,QAAAS,GAGAR,EAAAW,GAAA,EAGAX,EAAAD,QA0DA,OArDAS,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAjB,EAAAkB,EAAAC,GACAV,EAAAW,EAAApB,EAAAkB,IACAG,OAAAC,eAAAtB,EAAAkB,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAzB,GACA,oBAAA0B,eAAAC,aACAN,OAAAC,eAAAtB,EAAA0B,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAtB,EAAA,cAAiD4B,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAnC,GACA,IAAAkB,EAAAlB,KAAA8B,WACA,WAA2B,OAAA9B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAQ,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,oFC5EA,SAAYC,GAEVA,IAAA,eAKAA,IAAA,mBAEAA,IAAA,mBAEAA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,cAEAA,IAAA,oBAEAA,IAAA,wBAEAA,IAAA,yBAEAA,IAAA,qBAEAA,IAAA,uBAEAA,IAAA,4BAEAA,IAAA,gBAEAA,IAAA,gBAEAA,IAAA,gDAKAA,IAAA,yBAEAA,IAAA,yBAEAA,IAAA,yCAEAA,IAAA,4BAEAA,IAAA,kCAEAA,IAAA,sCAEAA,IAAA,uCAKAA,IAAA,6BAEAA,IAAA,6BAEAA,IAAA,2BAEAA,IAAA,0BAEAA,IAAA,kCAEAA,IAAA,4BAEAA,IAAA,uBAKAA,IAAA,2BAxEF,CAAY3C,EAAA2C,cAAA3C,EAAA2C,YAAW,KA4EV3C,EAAA4C,eAAiB,IAEjB5C,EAAA6C,aAAe,KAEf7C,EAAA8C,cAAgB,OAEhB9C,EAAA+C,cAAgB,OAEhB/C,EAAAgD,mBAAqB,IAErBhD,EAAAiD,iBAAmB,IAEnBjD,EAAAkD,gBAAkB,IAElBlD,EAAAmD,cAAgB,OAEhBnD,EAAAoD,eAAiBpD,EAAAmD,cAAgBnD,EAAA4C,eAEjC5C,EAAAqD,aAAerD,EAAA4C,eAAiB,QAG7C,SAAiBU,GAEFA,EAAAC,MAAQ,GAERD,EAAAE,GAAK,KACLF,EAAAG,IAAM,MACNH,EAAAI,IAAM,MACNJ,EAAAK,IAAM,MACNL,EAAAM,MAAQ,QACRN,EAAAO,GAAK,KACLP,EAAAQ,IAAM,MACNR,EAAAS,IAAM,MACNT,EAAAU,IAAM,MACNV,EAAAW,MAAQ,QACRX,EAAAY,KAAO,OACPZ,EAAAa,IAAM,MACNb,EAAAc,IAAM,MACNd,EAAAe,KAAO,OACPf,EAAAgB,MAAQ,QACRhB,EAAAiB,MAAQ,QACRjB,EAAAkB,MAAQ,QACRlB,EAAAmB,MAAQ,QACRnB,EAAAoB,MAAQ,QACRpB,EAAAqB,MAAQ,QACRrB,EAAAsB,MAAQ,QACRtB,EAAAuB,MAAQ,QACRvB,EAAAwB,MAAQ,QACRxB,EAAAyB,MAAQ,QACRzB,EAAA0B,MAAQ,OACR1B,EAAA2B,OAAS,SACT3B,EAAA4B,QAAU,UACV5B,EAAA6B,OAAS,SACT7B,EAAA8B,OAAS,SAET9B,EAAA+B,MAAQ,OACR/B,EAAAgC,MAAQ,OACRhC,EAAAiC,OAAS,QAETjC,EAAAkC,MAAQ,OACRlC,EAAAmC,OAAS,QACTnC,EAAAoC,YAAc,cAEdpC,EAAAqC,WAAa,aACbrC,EAAAsC,mBAAqB,qBACrBtC,EAAAuC,cAAgB,gBAChBvC,EAAAwC,gBAAkB,kBAClBxC,EAAAyC,mBAAqB,qBACrBzC,EAAA0C,iBAAmB,mBACnB1C,EAAA2C,2BAA6B,6BAC7B3C,EAAA4C,2BAA6B,6BAC7B5C,EAAA6C,wBAA0B,0BAC1B7C,EAAA8C,iBAAmB,mBACnB9C,EAAA+C,oBAAsB,sBAEtB/C,EAAAgD,GAAK,KACLhD,EAAAiD,IAAM,MACNjD,EAAAkD,IAAM,MACNlD,EAAAmD,IAAM,MACNnD,EAAAoD,MAAQ,QACRpD,EAAAqD,GAAK,KACLrD,EAAAsD,IAAM,MACNtD,EAAAuD,IAAM,MACNvD,EAAAwD,IAAM,MACNxD,EAAAyD,MAAQ,QACRzD,EAAA0D,KAAO,OACP1D,EAAA2D,IAAM,MACN3D,EAAA4D,IAAM,MACN5D,EAAA6D,KAAO,OACP7D,EAAA8D,OAAS,SACT9D,EAAA+D,MAAQ,QACR/D,EAAAgE,WAAa,aACbhE,EAAAiE,IAAM,MACNjE,EAAAkE,IAAM,MACNlE,EAAAmE,gBAAkB,kBAClBnE,EAAAoE,YAAc,cACdpE,EAAAqE,KAAO,OACPrE,EAAAsE,MAAQ,QACRtE,EAAAuE,UAAY,YACZvE,EAAAwE,WAAa,aACbxE,EAAAyE,WAAa,aACbzE,EAAA0E,WAAa,aACb1E,EAAA2E,WAAa,aACb3E,EAAA4E,kBAAoB,oBACpB5E,EAAA6E,YAAc,cACd7E,EAAA8E,YAAc,cACd9E,EAAA+E,YAAc,cACd/E,EAAAgF,aAAe,eACfhF,EAAAiF,aAAe,eAEfjF,EAAAkF,MAAQ,QACRlF,EAAAmF,IAAM,MACNnF,EAAAoF,IAAM,MACNpF,EAAAqF,MAAQ,UACRrF,EAAAsF,QAAU,YACVtF,EAAAuF,KAAO,SACPvF,EAAAwF,OAAS,WACTxF,EAAAyF,QAAU,YACVzF,EAAA0F,QAAU,YACV1F,EAAA2F,SAAW,aACX3F,EAAA4F,YAAc,eACd5F,EAAA6F,MAAQ,UACR7F,EAAA8F,WAAa,eArG5B,CAAiBpJ,EAAAsD,gBAAAtD,EAAAsD,cAAa,KAyG9B,IAAA+F,EAAA5I,EAAA,IAAST,EAAAsJ,QAAAD,EAAAC,QACT,IAAAC,EAAA9I,EAAA,IAAST,EAAAwJ,OAAAD,EAAAC,OACT,IAAAC,EAAAhJ,EAAA,IAAST,EAAA0J,SAAAD,EAAAC,SAAU1J,EAAA2J,cAAAF,EAAAE,2JC5MnBC,EAAAnJ,EAAA,KACAmJ,EAAAnJ,EAAA,KACAmJ,EAAAnJ,EAAA,KACAmJ,EAAAnJ,EAAA,KACAmJ,EAAAnJ,EAAA,KACAmJ,EAAAnJ,EAAA,KAGAT,EAAA6J,WAAA,SAA2BC,GACzB,OAAY,GAALA,GAA2B,IAAhBA,EAAKA,EAAI,mFCL7B,IAeYC,EAfZC,EAAAvJ,EAAA,IAKAwJ,EAAAxJ,EAAA,GAIAyJ,EAAAzJ,EAAA,IAgBA,SAAgB0J,EAA2BC,GACzC,OAAQA,GACN,KAAKL,EAAmBM,KAAM,MAAO,OACrC,KAAKN,EAAmBO,QAAS,MAAO,UACxC,KAAKP,EAAmBQ,MAAO,MAAO,QACtC,QAEE,OADAC,QAAO,GACA,IAeb,SAAgBC,EAA0BL,GACxC,OAAQA,GACN,KAAKL,EAAmBM,KAAM,OAAOrK,EAAA0K,WACrC,KAAKX,EAAmBO,QAAS,OAAOtK,EAAA2K,aACxC,KAAKZ,EAAmBQ,MAAO,OAAOvK,EAAA4K,UACtC,QAEE,OADAJ,QAAO,GACA,IA5CXxK,EAAA6K,eAAAX,EAAAW,eACA7K,EAAA8K,uBAAAZ,EAAAY,uBAIF,SAAYf,GAEVA,IAAA,eAEAA,IAAA,qBAEAA,IAAA,iBANF,CAAYA,EAAA/J,EAAA+J,qBAAA/J,EAAA+J,mBAAkB,KAU9B/J,EAAAmK,6BAaanK,EAAA0K,WAAqB,QAErB1K,EAAA2K,aAAuB,QAEvB3K,EAAA4K,UAAoB,QAEpB5K,EAAA+K,YAAsB,OAGnC/K,EAAAyK,4BAaA,IAAAO,EAAA,WAcE,SAAAA,EAAoBC,EAAWb,EAA8Bc,GAL7D5K,KAAA6K,MAAsB,KAEtB7K,KAAA8K,aAA6B,KAI3B9K,KAAK2K,KAAOA,EACZ3K,KAAK8J,SAAWA,EAChB9J,KAAK4K,QAAUA,EAkFnB,OA9ESF,EAAA/I,OAAP,SACEgJ,EACAb,EACAiB,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEA,IAAIL,EAAUlB,EAAAc,uBAAuBG,GAIrC,OAHY,MAARI,IAAcH,EAAUA,EAAQM,QAAQ,MAAOH,IACvC,MAARC,IAAcJ,EAAUA,EAAQM,QAAQ,MAAOF,IACvC,MAARC,IAAcL,EAAUA,EAAQM,QAAQ,MAAOD,IAC5C,IAAIP,EAAkBC,EAAMb,EAAUc,IAIxCF,EAAAS,WAAP,SACER,EACAI,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEON,EAAkB/I,OAAOgJ,EAAMlB,EAAmBM,KAAMgB,EAAMC,IAIhEN,EAAAU,cAAP,SACET,EACAI,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEON,EAAkB/I,OAAOgJ,EAAMlB,EAAmBO,QAASe,EAAMC,IAInEN,EAAAW,YAAP,SACEV,EACAI,EACAC,GAEA,YAHA,IAAAD,MAAA,WACA,IAAAC,MAAA,MAEON,EAAkB/I,OAAOgJ,EAAMlB,EAAmBQ,MAAOc,EAAMC,IAIxEN,EAAAzI,UAAAqJ,UAAA,SAAUT,GAER,OADA7K,KAAK6K,MAAQA,EACN7K,MAIT0K,EAAAzI,UAAAsJ,iBAAA,SAAiBV,GAEf,OADA7K,KAAK8K,aAAeD,EACb7K,MAIT0K,EAAAzI,UAAAuJ,SAAA,WACE,OAAIxL,KAAK6K,MAELhB,EAA2B7J,KAAK8J,UAChC,IACA9J,KAAK2K,KAAKa,SAAS,IACnB,MACAxL,KAAK4K,QACL,QACA5K,KAAK6K,MAAMY,OAAOC,eAClB,IACA1L,KAAK6K,MAAMc,KAAKH,SAAS,IACzB,IACAxL,KAAK6K,MAAMe,OAAOJ,SAAS,IAI7B3B,EAA2B7J,KAAK8J,UAChC,IACA9J,KAAK2K,KAAKa,SAAS,IACnB,KACAxL,KAAK4K,SAGXF,EAnGA,GA4JA,SAAgBmB,EAAwBhB,EAAciB,QAAA,IAAAA,OAAA,GAKpD,IAJA,IAAIC,EAAOlB,EAAMY,OAAOM,KACpBC,EAAMD,EAAKE,OACXC,EAAQrB,EAAMqB,MACdC,EAAMtB,EAAMsB,IACTD,EAAQ,IAAMvC,EAAAyC,YAAYL,EAAKM,WAAWH,EAAQ,KAAKA,IAC9D,KAAOC,EAAMH,IAAQrC,EAAAyC,YAAYL,EAAKM,WAAWF,KAAOA,IAMxD,IALA,IAAIG,EAAe,CACjB,MACAP,EAAKQ,UAAUL,EAAOC,GACtB,OAEKD,EAAQrB,EAAMqB,OACnBI,EAAGE,KAAK,KACRN,IAGF,GADIJ,GAAWQ,EAAGE,KAAK9M,EAAA4K,WACnBO,EAAMqB,OAASrB,EAAMsB,IACvBG,EAAGE,KAAK,UAER,KAAON,IAAUrB,EAAMsB,KAAK,CAC1B,GAAIxC,EAAAyC,YAAYL,EAAKM,WAAWH,IAAS,CACvCI,EAAGE,KAAKN,GAASrB,EAAMqB,MAAQ,EAAI,IAAM,KACzC,MAEFI,EAAGE,KAAK,KAIZ,OADIV,GAAWQ,EAAGE,KAAK9M,EAAA+K,aAChB6B,EAAGG,KAAK,IAzLJ/M,EAAAgL,oBAsGbhL,EAAAgN,wBAAA,SACE9B,EACAkB,EACAa,QADA,IAAAb,OAAA,QACA,IAAAa,OAAA,GAIA,IAAIL,EAAe,GAUnB,GATIR,GAAWQ,EAAGE,KAAKrC,EAA0BS,EAAQd,WACzDwC,EAAGE,KAAK3C,EAA2Be,EAAQd,WACvCgC,GAAWQ,EAAGE,KAAK9M,EAAA+K,aACvB6B,EAAGE,KAAK5B,EAAQD,KAAO,IAAO,MAAQ,OACtC2B,EAAGE,KAAK5B,EAAQD,KAAKa,SAAS,KAC9Bc,EAAGE,KAAK,MACRF,EAAGE,KAAK5B,EAAQA,SAGZA,EAAQC,MAAO,CAGjB,IAAIA,EAAQD,EAAQC,MAChB8B,IACFL,EAAGE,KAAK,MACRF,EAAGE,KAAKX,EAAwBhB,EAAOiB,KAEzCQ,EAAGE,KAAK,MACRF,EAAGE,KAAK,QACRF,EAAGE,KAAK3B,EAAMY,OAAOC,gBACrBY,EAAGE,KAAK,KACRF,EAAGE,KAAK3B,EAAMc,KAAKH,SAAS,KAC5Bc,EAAGE,KAAK,KACRF,EAAGE,KAAK3B,EAAMe,OAAOJ,SAAS,KAC9Bc,EAAGE,KAAK,KAER,IAAI1B,EAAeF,EAAQE,aACvBA,IACE6B,IACFL,EAAGE,KAAK,MACRF,EAAGE,KAAKX,EAAwBf,EAAcgB,KAEhDQ,EAAGE,KAAK,MACRF,EAAGE,KAAK,QACRF,EAAGE,KAAK3B,EAAMY,OAAOC,gBACrBY,EAAGE,KAAK,KACRF,EAAGE,KAAK3B,EAAMc,KAAKH,SAAS,KAC5Bc,EAAGE,KAAK,KACRF,EAAGE,KAAK3B,EAAMe,OAAOJ,SAAS,KAC9Bc,EAAGE,KAAK,MAGZ,OAAOF,EAAGG,KAAK,KAIjB/M,EAAAmM,0BAiCA,IAAAe,EAAA,WAME,SAAAA,EAAsBC,QAAA,IAAAA,MAAA,MACpB7M,KAAK6M,YAAcA,GAAiD,IAAI9F,MAwF5E,OApFE6F,EAAA3K,UAAA6K,eAAA,SACEnC,EACAb,EACAe,EACAC,EACAC,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEA,IAAIL,EAAUF,EAAkB/I,OAAOgJ,EAAMb,EAAUiB,EAAMC,EAAMC,GAAMK,UAAUT,GAC/EC,IAAcF,EAAQE,aAAeA,GACzC9K,KAAK6M,YAAYL,KAAK5B,IAMxBgC,EAAA3K,UAAA8K,KAAA,SACEpC,EACAE,EACAE,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAjL,KAAK8M,eAAenC,EAAMlB,EAAmBM,KAAMc,EAAO,KAAME,EAAMC,EAAMC,IAI9E2B,EAAA3K,UAAA+K,YAAA,SACErC,EACAE,EACAC,EACAC,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAjL,KAAK8M,eAAenC,EAAMlB,EAAmBM,KAAMc,EAAOC,EAAcC,EAAMC,EAAMC,IAItF2B,EAAA3K,UAAAgL,QAAA,SACEtC,EACAE,EACAE,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAjL,KAAK8M,eAAenC,EAAMlB,EAAmBO,QAASa,EAAO,KAAME,EAAMC,EAAMC,IAIjF2B,EAAA3K,UAAAiL,eAAA,SACEvC,EACAE,EACAC,EACAC,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAjL,KAAK8M,eAAenC,EAAMlB,EAAmBO,QAASa,EAAOC,EAAcC,EAAMC,EAAMC,IAIzF2B,EAAA3K,UAAAkL,MAAA,SACExC,EACAE,EACAE,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAjL,KAAK8M,eAAenC,EAAMlB,EAAmBQ,MAAOY,EAAO,KAAME,EAAMC,EAAMC,IAI/E2B,EAAA3K,UAAAmL,aAAA,SACEzC,EACAE,EACAC,EACAC,EACAC,EACAC,QAFA,IAAAF,MAAA,WACA,IAAAC,MAAA,WACA,IAAAC,MAAA,MAEAjL,KAAK8M,eAAenC,EAAMlB,EAAmBQ,MAAOY,EAAOC,EAAcC,EAAMC,EAAMC,IAEzF2B,EA/FA,GAAsBlN,EAAAkN,85BC9PtB,IA8IYS,EA9IZC,EAAAnN,EAAA,GAmBAoN,EAAApN,EAAA,GAMAqN,EAAArN,EAAA,GAOAsN,EAAAtN,EAAA,GAiDAwJ,EAAAxJ,EAAA,GASAuN,EAAAvN,EAAA,GAIAwN,EAAAxN,EAAA,IAKAyN,EAAA,WAaA,OAZE,SAESC,EAEAC,EAEAC,EAEAC,EAEAC,GARAjO,KAAA6N,YAEA7N,KAAA8N,kBAEA9N,KAAA+N,oBAEA/N,KAAAgO,cAEAhO,KAAAiO,kBAXX,GAgBAC,EAAA,WAWA,OAVE,SAESJ,EAEAC,EAEAC,EAEAC,GANAjO,KAAA8N,kBAEA9N,KAAA+N,oBAEA/N,KAAAgO,cAEAhO,KAAAiO,kBATX,GAcAE,EAAA,WAUA,OARE,SAESH,EAEAC,EAEAG,GAJApO,KAAAgO,cAEAhO,KAAAiO,iBAEAjO,KAAAoO,eARX,GA6DA,SAASC,EAA0BC,EAA8BC,GAE/D,OADArE,OAAOqE,EAAItC,QACHqC,GACN,KAAKb,EAAAe,cAAcC,SACnB,KAAKhB,EAAAe,cAAcE,gBACjB,OAAQH,EAAIlC,WAAW,IACrB,QACE,GAAW,MAAPkC,EAAa,OAAOlB,EAAasB,YACrC,GAAW,OAAPJ,EAAc,OAAOlB,EAAauB,YACtC,MAEF,SACE,GAAW,MAAPL,EAAa,OAAOlB,EAAawB,sBACrC,GAAW,OAAPN,EAAc,OAAOlB,EAAayB,sBACtC,MAEF,QACE,GAAW,KAAPP,EAAY,OAAOlB,EAAa0B,IACpC,MAEF,QACE,GAAW,KAAPR,EAAY,OAAOlB,EAAa2B,IACpC,MAEF,QACE,GAAW,KAAPT,EAAY,OAAOlB,EAAa4B,IACpC,GAAW,MAAPV,EAAa,OAAOlB,EAAa6B,IACrC,MAEF,QACE,GAAW,KAAPX,EAAY,OAAOlB,EAAa8B,IACpC,MAEF,QACE,GAAW,KAAPZ,EAAY,OAAOlB,EAAa+B,IACpC,MAEF,QACE,GAAW,KAAPb,EAAY,OAAOlB,EAAagC,YACpC,MAEF,SACE,GAAW,KAAPd,EAAY,OAAOlB,EAAaiC,WACpC,MAEF,QACE,GAAW,KAAPf,EAAY,OAAOlB,EAAakC,YACpC,MAEF,QACE,GAAW,MAAPhB,EAAa,OAAOlB,EAAamC,GACrC,MAEF,QACE,GAAW,MAAPjB,EAAa,OAAOlB,EAAaoC,GACrC,MAEF,QACE,GAAW,KAAPlB,EAAY,OAAOlB,EAAaqC,GACpC,GAAW,MAAPnB,EAAa,OAAOlB,EAAasC,GACrC,GAAW,MAAPpB,EAAa,OAAOlB,EAAauC,YACrC,GAAW,OAAPrB,EAAc,OAAOlB,EAAawC,cACtC,MAEF,QACE,GAAW,KAAPtB,EAAY,OAAOlB,EAAayC,GACpC,GAAW,MAAPvB,EAAa,OAAOlB,EAAa0C,GACrC,GAAW,MAAPxB,EAAa,OAAOlB,EAAa2C,YAIzC,MAEF,KAAKvC,EAAAe,cAAcyB,gBACjB,OAAQ1B,EAAIlC,WAAW,IACrB,QACE,GAAW,KAAPkC,EAAY,OAAOlB,EAAa6C,KACpC,GAAW,MAAP3B,EAAa,OAAOlB,EAAa8C,WACrC,MAEF,QACE,GAAW,KAAP5B,EAAY,OAAOlB,EAAa+C,MACpC,GAAW,MAAP7B,EAAa,OAAOlB,EAAagD,WACrC,MAEF,QACE,GAAW,KAAP9B,EAAY,OAAOlB,EAAaiD,IACpC,MAEF,SACE,GAAW,KAAP/B,EAAY,OAAOlB,EAAakD,YAIxC,MAEF,KAAK9C,EAAAe,cAAcgC,iBACjB,OAAQjC,EAAIlC,WAAW,IACrB,QACE,GAAW,MAAPkC,EAAa,OAAOlB,EAAaoD,YACrC,MAEF,QACE,GAAW,MAAPlC,EAAa,OAAOlB,EAAaqD,aAO7C,OAAOrD,EAAasD,SA9JtB,SAAYtD,GACVA,IAAA,qBAGAA,IAAA,6BACAA,IAAA,6BACAA,IAAA,iDACAA,IAAA,iDAGAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,aACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,4BACAA,IAAA,8BACAA,IAAA,8BACAA,IAAA,8BACAA,IAAA,kCACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YAGAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,4BACAA,IAAA,4BAGAA,IAAA,8BACAA,IAAA,8BAvCF,CAAYA,EAAA3N,EAAA2N,eAAA3N,EAAA2N,aAAY,KAkKxB,IA+gDYuD,EAwCAC,EAvjDZC,EAAA,SAAAC,GAoGE,SAAAD,EAEEjE,QAAA,IAAAA,MAAA,MAFF,IAAAmE,EAIED,EAAAvQ,KAAAR,KAAM6M,IAAY7M,KAnGpBgR,EAAAC,QAAoB,GAEpBD,EAAAE,kBAAyB,EAQzBF,EAAAG,sBAAkD,KAKlDH,EAAAI,YAAgC,IAAIlK,IAEpC8J,EAAAK,eAAsC,IAAInK,IAE1C8J,EAAAM,sBAAmE,IAAIpK,IAEvE8J,EAAAO,gBAAuC,IAAIrK,IAE3C8J,EAAAQ,YAAmC,IAAItK,IAEvC8J,EAAAS,eAAiC,IAAIvK,IAmErC8J,EAAAU,YAAmB,EAoEXV,EAAAW,qBAA6C,KA5DnD,IAAIC,EAAe,IAAInE,EAAAoE,OAAOvE,EAAAzK,cAAe,gBAAiB4K,EAAAqE,WAAWC,SACzEf,EAAKY,aAAeA,EACpB,IAAII,EAAa,IAAIC,EAAKjB,EAAMY,UAChCZ,EAAKgB,WAAaA,EAClBhB,EAAKI,YAAYc,IAAIF,EAAWG,aAAcH,GAC9ChB,EAAKoB,SAAW,IAAI1E,EAAA2E,SAASrB,KA85CjC,OA5gD6BsB,EAAAxB,EAAAC,GAkH3BD,EAAA7O,UAAAsQ,mBAAA,SAAmBC,EAAoBC,EAAaC,EAAsBC,GAOxEzI,OAAOyI,EAAe,GAAK,IAC3BhJ,EAAAiJ,SAASD,EAAaH,EAAQC,GAC9B9I,EAAAiJ,SAAS,EAAGJ,EAAQC,EAAS,GAC7B9I,EAAAiJ,SAASF,EAAcG,GAAIL,EAAQC,EAAS,GAC5C9I,EAAAiJ,SAASD,EAAaH,EAAQC,EAAS,KAIzC1R,OAAAC,eAAI8P,EAAA7O,UAAA,oBAAiB,KAArB,WACE,OAAO,oCAIT6O,EAAA7O,UAAA6Q,8BAAA,SAEElS,EAEAmS,QAAA,IAAAA,MAAqBzF,EAAAjL,YAAY2Q,MAEjC,IAAInI,EAAQ7K,KAAK4R,aAAa/G,MAC9B,OAAO4C,EAAAwF,KAAKC,0BACVzF,EAAAwF,KAAKE,2BAA2BvS,EAAMiK,GACtC,KAAM,KAAM,KAAMkI,EAAOlI,IAK7BiG,EAAA7O,UAAAmR,0BAAA,SAEExS,EAEAmS,QAAA,IAAAA,MAAqBzF,EAAAjL,YAAY2Q,MAEjC,IAAInI,EAAQ7K,KAAK4R,aAAa/G,MAC1BwI,EAAa5F,EAAAwF,KAAKE,2BAA2BvS,EAAMiK,GACvD,OAAO4C,EAAAwF,KAAKK,sBACVD,EACA,KACA5F,EAAAwF,KAAKM,kBAAkB1I,GACvB,KAAMkI,EAAOlI,IAQjBiG,EAAA7O,UAAAuR,8BAAA,SAEE5S,EAEAmS,QAAA,IAAAA,MAAqBzF,EAAAjL,YAAY2Q,MAEjC,IAAInI,EAAQ7K,KAAK4R,aAAa/G,MAC9B,OAAO4C,EAAAwF,KAAKQ,0BACVhG,EAAAwF,KAAKE,2BAA2BvS,EAAMiK,GACtC,KACA7K,KAAK2R,uBAAyB3R,KAAK2R,qBAAuBlE,EAAAwF,KAAKS,gBAAgB,GAC7EjG,EAAAwF,KAAKU,WACHlG,EAAAwF,KAAKW,qBAAqBtG,EAAAtK,cAAc0B,MAAOmG,GAC/C,MAAM,EAAOA,GAEf,MAAM,EAAOA,IAEf,KAAM,KAAMkI,EAAK,EAAkBlI,IAKvCiG,EAAA7O,UAAA4R,+BAAA,SAEEjT,EAEAmS,QAAA,IAAAA,MAAqBzF,EAAAjL,YAAY2Q,MAEjC,IAAInI,EAAQ7K,KAAK4R,aAAa/G,MAC9B,OAAO4C,EAAAwF,KAAKa,2BACVrG,EAAAwF,KAAKE,2BAA2BvS,EAAMiK,GACtC,GAAI,KAAMkI,EAAOlI,IAKrBiG,EAAA7O,UAAA8R,mBAAA,SAEEnT,EAEAoT,EAEAC,EAEAlB,EAEAmB,GAEA,YANA,IAAAD,MAAkBjU,KAAKgS,iBAEvB,IAAAe,MAAqBzF,EAAAjL,YAAY2Q,WAEjC,IAAAkB,MAAiCrD,EAAemC,MAEzC,IAAImB,EACTvT,EACA,IAAIwT,EACFxT,EACAqT,EACAjU,KAAKwT,8BAA8B5S,EAAMmS,GACzCmB,GAEFF,IAKJlD,EAAA7O,UAAAoS,wBAAA,SAAwBC,GACtB,IAAIhD,EAAwBtR,KAAKsR,sBAEjC,OADApH,OAAOoH,EAAsBiD,IAAID,IAC1BhD,EAAsBpQ,IAAIoT,IAInCxD,EAAA7O,UAAAuS,WAAA,SAAWC,+BACTzU,KAAKyU,QAAUA,EAGfzU,KAAK0U,mBAAmBpH,EAAAtK,cAAcE,GAAIsK,EAAAmH,KAAKzR,IAC/ClD,KAAK0U,mBAAmBpH,EAAAtK,cAAcG,IAAKqK,EAAAmH,KAAKxR,KAChDnD,KAAK0U,mBAAmBpH,EAAAtK,cAAcI,IAAKoK,EAAAmH,KAAKvR,KAChDpD,KAAK0U,mBAAmBpH,EAAAtK,cAAcK,IAAKmK,EAAAmH,KAAKtR,KAChDrD,KAAK0U,mBAAmBpH,EAAAtK,cAAcM,MAAOmR,EAAQG,WACrD5U,KAAK0U,mBAAmBpH,EAAAtK,cAAcO,GAAIiK,EAAAmH,KAAKpR,IAC/CvD,KAAK0U,mBAAmBpH,EAAAtK,cAAcQ,IAAKgK,EAAAmH,KAAKnR,KAChDxD,KAAK0U,mBAAmBpH,EAAAtK,cAAcS,IAAK+J,EAAAmH,KAAKlR,KAChDzD,KAAK0U,mBAAmBpH,EAAAtK,cAAcU,IAAK8J,EAAAmH,KAAKjR,KAChD1D,KAAK0U,mBAAmBpH,EAAAtK,cAAcW,MAAO8Q,EAAQI,WACrD7U,KAAK0U,mBAAmBpH,EAAAtK,cAAcY,KAAM4J,EAAAmH,KAAK/Q,MACjD5D,KAAK0U,mBAAmBpH,EAAAtK,cAAca,IAAK2J,EAAAmH,KAAK9Q,KAChD7D,KAAK0U,mBAAmBpH,EAAAtK,cAAcc,IAAK0J,EAAAmH,KAAK7Q,KAChD9D,KAAK0U,mBAAmBpH,EAAAtK,cAAc0B,MAAO8I,EAAAmH,KAAKG,MAClD9U,KAAK0U,mBAAmBpH,EAAAtK,cAAc2B,OAAQ6I,EAAAmH,KAAK7Q,KACnD9D,KAAK0U,mBAAmBpH,EAAAtK,cAAc4B,QAAS4I,EAAAmH,KAAK/Q,MACpD5D,KAAKgS,WAAW+C,IAAIzH,EAAAtK,cAAc8B,OAAQ,IAAIkQ,EAC5C1H,EAAAtK,cAAc8B,OACd9E,KAAKgS,WACLhS,KAAKoT,0BAA0B9F,EAAAtK,cAAc8B,OAAQwI,EAAAjL,YAAY4S,OAAS3H,EAAAjL,YAAY6S,SACtFrE,EAAesE,UAEbV,EAAQW,WAAU,IAAgBpV,KAAK0U,mBAAmBpH,EAAAtK,cAAce,KAAMyJ,EAAAmH,KAAK5Q,MAGvF/D,KAAKqV,wBAAwB/H,EAAAtK,cAAcqC,WAAYmI,EAAAmH,KAAKvR,IAC1DkS,QAAQb,EAAQc,SAAWjI,EAAApE,OAAOsM,OAASlI,EAAApE,OAAOuM,SACpDzV,KAAKqV,wBAAwB/H,EAAAtK,cAAcuC,cAAeiI,EAAAmH,KAAK/Q,KAC7D0R,QAAQb,EAAQiB,SAAW,EAAI,EAAG,IACpC1V,KAAKqV,wBAAwB/H,EAAAtK,cAAcwC,gBAAiBgI,EAAAmH,KAAKvR,IAC/DkS,QAAQb,EAAQkB,WAAY,IAC9B3V,KAAKqV,wBAAwB/H,EAAAtK,cAAcyC,mBAAoB+H,EAAAmH,KAAKvR,IAClEkS,QAAQb,EAAQmB,kBAAmB,IACrC5V,KAAKqV,wBAAwB/H,EAAAtK,cAAc0C,iBAAkB8H,EAAAmH,KAAKvR,IAChEkS,QAAQb,EAAQoB,gBAAiB,IACnC7V,KAAKqV,wBAAwB/H,EAAAtK,cAAc2C,2BAA4B6H,EAAAmH,KAAK/Q,KAC1E0R,QAAQb,EAAQW,WAAU,GAA2B,EAAI,EAAG,IAC9DpV,KAAKqV,wBAAwB/H,EAAAtK,cAAc4C,2BAA4B4H,EAAAmH,KAAK/Q,KAC1E0R,QAAQb,EAAQW,WAAU,GAA2B,EAAI,EAAG,IAC9DpV,KAAKqV,wBAAwB/H,EAAAtK,cAAc6C,wBAAyB2H,EAAAmH,KAAK/Q,KACvE0R,QAAQb,EAAQW,WAAU,GAAwB,EAAI,EAAG,IAC3DpV,KAAKqV,wBAAwB/H,EAAAtK,cAAc8C,iBAAkB0H,EAAAmH,KAAK/Q,KAChE0R,QAAQb,EAAQW,WAAU,GAAiB,EAAI,EAAG,IACpDpV,KAAKqV,wBAAwB/H,EAAAtK,cAAc+C,oBAAqByH,EAAAmH,KAAK/Q,KACnE0R,QAAQb,EAAQW,WAAU,IAAoB,EAAI,EAAG,IAUvD,IAPA,IAAIU,EAAgB,IAAI/O,MACpBgP,EAAgB,IAAI7O,IACpB8O,EAAoB,IAAI9O,IACxB+O,EAAgB,IAAIlP,MACpBmP,EAAmB,IAAInP,MAGlB1G,EAAI,EAAG8V,EAAInW,KAAKiR,QAAQhF,OAAQ5L,EAAI8V,IAAK9V,EAAG,CACnD,IAAIoL,EAASzL,KAAKiR,QAAQ5Q,GACtB+V,EAAO,IAAInE,EAAKjS,KAAMyL,GAC1BzL,KAAKoR,YAAYc,IAAIkE,EAAKjE,aAAciE,GAExC,IADA,IAAIC,EAAa5K,EAAO4K,WACfC,EAAI,EAAGhW,EAAI+V,EAAWpK,OAAQqK,EAAIhW,IAAKgW,EAAG,CACjD,IAAIC,EAAYF,EAAWC,GAC3B,OAAQC,EAAUC,MAChB,KAAK/I,EAAAgJ,SAASxB,OACZjV,KAAK0W,kBAAmCH,EAAWH,EAAML,EAAeC,GACxE,MAEF,KAAKvI,EAAAgJ,SAASE,cACZ3W,KAAK4W,wBAAgDL,EAAWH,EAAMH,EAAeC,GACrF,MAEF,KAAKzI,EAAAgJ,SAASI,OACZ7W,KAAK8W,kBAAmCP,EAAWH,EAAMN,EAAeC,GACxE,MAEF,KAAKtI,EAAAgJ,SAASM,SACZ/W,KAAKgX,oBAAuCT,EAAWH,GACvD,MAEF,KAAK3I,EAAAgJ,SAASQ,iBACZjX,KAAKkX,gBAAkCX,EAAWH,EAAMH,EAAeC,GACvE,MAEF,KAAKzI,EAAAgJ,SAASU,gBACZnX,KAAKoX,eAAgCb,EAAWH,GAChD,MAEF,KAAK3I,EAAAgJ,SAASY,oBACZrX,KAAKsX,mBAAwCf,EAAWH,GACxD,MAEF,KAAK3I,EAAAgJ,SAASc,qBACZvX,KAAKwX,oBAA0CjB,EAAWH,GAC1D,MAEF,KAAK3I,EAAAgJ,SAASgB,qBACZzX,KAAK0X,oBAA0CnB,EAAWH,EAAMH,EAAeC,GAC/E,MAEF,KAAKzI,EAAAgJ,SAASkB,gBACZ3X,KAAK4X,yBAA0CrB,EAAWH,SAQlE,IAAgC,IAAAyB,EAAAC,EAAA9B,GAAiB+B,EAAAF,EAAAG,QAAAD,EAAAE,KAAAF,EAAAF,EAAAG,OAAxC,KAAAE,EAAAC,EAAAJ,EAAAzW,MAAA,GAAO8W,GAANhC,EAAA8B,EAAA,GAAMA,EAAA,IACd,IAAS7X,EAAI,EAAG8V,EAAIiC,EAAYnM,OAAQ5L,EAAI8V,IAAK9V,EAAG,CAClD,IAAIgY,EAAaD,EAAY/X,IACzBiY,EAActY,KAAKuY,kBAAkBF,EAAWrK,YAAaqK,EAAWpK,iBAQ5EmI,EAAKoC,iBAAiBF,GANpBtY,KAAKmN,MACHI,EAAAhD,eAAekO,iBACfJ,EAAWjK,YAAYvD,MAAOwN,EAAWjK,YAAY9M,0GAS7D,IAASjB,EAAI,EAAG8V,EAAIL,EAAc7J,OAAQ5L,EAAI8V,IAAK9V,EAAG,CACpD,IAuBMiY,EAvBFI,EAAe5C,EAAczV,GAC7B0N,EAAoB2K,EAAa3K,kBACrC,GAAIA,GACE4K,GAAU3Y,KAAK4Y,cACjB7K,EAAkBhC,KAClB2M,EAAa1K,YACb0K,EAAazK,eACb8H,IAGA2C,EAAa7K,UAAUkH,IACrB2D,EAAa5K,gBAAgB/B,KAC7B4M,IACA,GAIF3Y,KAAKmN,MACHI,EAAAhD,eAAesO,kCACf9K,EAAkBlD,MAAO6N,EAAa1K,YAAaD,EAAkBhC,WAKzE,GADIuM,EAActY,KAAKuY,kBAAkBG,EAAa1K,YAAa0K,EAAazK,gBAC/D,CACf,IAAIJ,EAAY6K,EAAa7K,UACzBiL,EAAYJ,EAAa5K,gBAAgB/B,KAC7C8B,EAAUkH,IACR+D,EACAR,EAAYS,oBACVD,EACAjL,IAEF,QAGF3D,QAAO,OAMb,IAA4B,IAAA8O,EAAAlB,EAAA/B,GAAakD,EAAAD,EAAAhB,QAAAiB,EAAAhB,KAAAgB,EAAAD,EAAAhB,OAAE,CAAlC,IAAAkB,EAAAf,EAAAc,EAAA3X,MAAA,GAAO5B,GAAN0W,EAAA8C,EAAA,GAAMA,EAAA,QACd,IAAuC,IAAAC,EAAArB,EAAApY,GAAO0Z,EAAAD,EAAAnB,QAAAoB,EAAAnB,KAAAmB,EAAAD,EAAAnB,OAAE,CAAvC,IAAAqB,EAAAlB,EAAAiB,EAAA9X,MAAA,GAACgY,GAAAD,EAAA,GAAYE,GAAAF,EAAA,GAEhBrL,IADA8K,EAAYS,GAAazL,gBAAgB/B,KAC3BwN,GAAavL,aAC/B,GAAIA,IACE2K,GAAU3Y,KAAK4Y,cACjBE,EACA9K,GACA9D,OAAOqP,GAAatL,gBACpB8H,IAGAK,EAAKoD,aAAaF,GAAYX,IAE9B3Y,KAAKmN,MACHI,EAAAhD,eAAesO,kCACfU,GAAazL,gBAAgBjD,MAC7BmD,GAAa8K,QAKjB,GADIH,GAAUvC,EAAKqD,aAAaX,GAE9B1C,EAAKoD,aAAaF,GAAYX,QACzB,CACL,IAAIe,GAAgB1Z,KAAK2Z,aAAab,GAClCY,IAAiBA,cAAyBE,EAC5CxD,EAAKoD,aAAaF,GAA6BI,IAE/C1Z,KAAKmN,MACHI,EAAAhD,eAAesO,kCACfU,GAAaxL,kBAAkBlD,MAC/BuL,EAAKjE,aAAcoH,GAAaxL,kBAAkBhC,4MAS9D7B,OAA2B,GAApBlK,KAAK0R,aACZ1R,KAAK6Z,oBAAsB7Z,KAAK8Z,aAAaxM,EAAAtK,cAAcoE,aAC3D8C,OAAsC,GAA/BlK,KAAK6Z,oBAAoBhH,IAChC7S,KAAK+Z,eAAiB/Z,KAAK8Z,aAAaxM,EAAAtK,cAAc8D,QACtDoD,OAAiC,GAA1BlK,KAAK+Z,eAAelH,IAC3B7S,KAAKga,wBAA0Bha,KAAK8Z,aAAaxM,EAAAtK,cAAcmE,iBAC/D+C,OAA0C,GAAnClK,KAAKga,wBAAwBnH,IAGpC7S,KAAKia,wBAAuB,EAAc3M,EAAAtK,cAAcgD,IACxDhG,KAAKia,wBAAuB,EAAe3M,EAAAtK,cAAciD,KACzDjG,KAAKia,wBAAuB,EAAe3M,EAAAtK,cAAckD,KACzDlG,KAAKia,wBAAuB,EAAe3M,EAAAtK,cAAcmD,KACzDnG,KAAKia,wBAAuB,EAAiB3M,EAAAtK,cAAcoD,OAC3DpG,KAAKia,wBAAuB,EAAc3M,EAAAtK,cAAcqD,IACxDrG,KAAKia,wBAAuB,EAAe3M,EAAAtK,cAAcsD,KACzDtG,KAAKia,wBAAuB,EAAe3M,EAAAtK,cAAcuD,KACzDvG,KAAKia,wBAAuB,EAAe3M,EAAAtK,cAAcwD,KACzDxG,KAAKia,wBAAuB,EAAiB3M,EAAAtK,cAAcyD,OAC3DzG,KAAKia,wBAAuB,GAAgB3M,EAAAtK,cAAc0D,MAC1D1G,KAAKia,wBAAuB,GAAe3M,EAAAtK,cAAc2D,KACzD3G,KAAKia,wBAAuB,GAAe3M,EAAAtK,cAAc4D,KACrD6N,EAAQW,WAAU,IAAgBpV,KAAKia,wBAAuB,GAAgB3M,EAAAtK,cAAc6D,MAGhG7G,KAAKka,iBAAmCla,KAAKJ,QAAQ0N,EAAAtK,cAAcuE,UAAWqJ,EAAYuJ,iBAC1Fna,KAAKoa,kBAAoCpa,KAAKJ,QAAQ0N,EAAAtK,cAAcwE,WAAYoJ,EAAYuJ,iBAC5Fna,KAAKqa,kBAAoCra,KAAKJ,QAAQ0N,EAAAtK,cAAcyE,WAAYmJ,EAAYuJ,iBAC5Fna,KAAKsa,kBAAoCta,KAAKJ,QAAQ0N,EAAAtK,cAAc0E,WAAYkJ,EAAYuJ,iBAC5Fna,KAAKua,iBAAmCva,KAAKJ,QAAQ0N,EAAAtK,cAAc2E,WAAYiJ,EAAYuJ,iBAC3Fna,KAAKwa,wBAA0Cxa,KAAKJ,QAAQ0N,EAAAtK,cAAc4E,kBAAmBgJ,EAAYuJ,iBACzGna,KAAKya,kBAAoCza,KAAKJ,QAAQ0N,EAAAtK,cAAc6E,YAAa+I,EAAYuJ,iBAC7Fna,KAAK0a,kBAAoC1a,KAAKJ,QAAQ0N,EAAAtK,cAAc8E,YAAa8I,EAAYuJ,iBAC7Fna,KAAK2a,kBAAoC3a,KAAKJ,QAAQ0N,EAAAtK,cAAc+E,YAAa6I,EAAYuJ,iBAC7Fna,KAAK4a,kBAAoC5a,KAAKJ,QAAQ0N,EAAAtK,cAAcgF,aAAc4I,EAAYuJ,iBAC9Fna,KAAK6a,kBAAoC7a,KAAKJ,QAAQ0N,EAAAtK,cAAciF,aAAc2I,EAAYuJ,iBAG9F,IAAI/H,GAAWpS,KAAKoS,SACpB,IAAS/R,EAAI,EAAG8V,EAAIF,EAAchK,OAAQ5L,EAAI8V,IAAK9V,EAAG,CACpD,IAAIya,GAAgB7E,EAAc5V,GAC9B0a,GAAc7Q,OAAO4Q,GAAcC,aACnCC,GAAc5I,GAAS6I,gBAAgBF,GAAYna,KAAMka,GAAc7G,QAC3E,GAAK+G,GACL,GAAIA,GAAYxE,MAAQ5F,EAAYuJ,gBAAiB,CACnD,IAAIe,GAAgCF,GAChCE,GAAcC,aAAatK,EAAeuK,SAC5Cpb,KAAKmN,MACHI,EAAAhD,eAAe8Q,yCACfN,GAAYlQ,MAAwBmQ,GAAaM,eAAevP,MAIlEmP,GAAcC,aAAatK,EAAe0K,YAC1CT,GAAcK,aAAatK,EAAe0K,YAE1Cvb,KAAKmN,MACHI,EAAAhD,eAAeiR,+DACf/N,EAAAgO,MAAMhP,KAAKqO,GAAcQ,eAAezQ,MAAOkQ,GAAYlQ,QAG/DiQ,GAAcI,cAAgBA,QAE9Blb,KAAKmN,MACHI,EAAAhD,eAAemR,sCACfX,GAAYlQ,OAOhB,IAAI8Q,GAAgBlH,EAAQkH,cAC5B,GAAIA,OACF,IAA0B,IAAAC,GAAA9D,EAAA6D,IAAaE,GAAAD,GAAA5D,QAAA6D,GAAA5D,KAAA4D,GAAAD,GAAA5D,OAAE,CAAhC,IAAA8D,GAAA3D,EAAA0D,GAAAva,MAAA,GAACya,GAAAD,GAAA,GAAOlb,GAAAkb,GAAA,GACf,GAAKlb,GAAKqL,OAAV,CACA,IAAI+P,GAAYpb,GAAKyL,WAAW,GAChC,GAAI2P,IAAS,IAAmBA,IAAS,GACvChc,KAAKqV,wBAAwB0G,GAAOvO,EAAAmH,KAAKvR,IAAKkS,QAAQ2G,SAASrb,GAAM,UAChE,CACL,IAAIyQ,GAAiBrR,KAAKqR,eAE1B,KADIsH,GAAUtH,GAAenQ,IAAIN,KAK5B,MAAM,IAAIsb,MAAM,2BAA6Btb,IAHhD,GAAIyQ,GAAekD,IAAIwH,IAAQ,MAAM,IAAIG,MAAM,6BAA+Btb,IAC9EyQ,GAAea,IAAI6J,GAAOpD,4GASpC3Y,KAAKmc,eAAiCnc,KAAKJ,QAAQ0N,EAAAtK,cAAc+D,MAAO6J,EAAYuJ,iBACpFna,KAAKoc,oBAAsCpc,KAAKJ,QAAQ0N,EAAAtK,cAAcgE,WAAY4J,EAAYuJ,iBAC9Fna,KAAKqc,aAA+Brc,KAAKJ,QAAQ0N,EAAAtK,cAAciE,IAAK2J,EAAYuJ,iBAChFna,KAAKsc,aAA+Btc,KAAKJ,QAAQ0N,EAAAtK,cAAckE,IAAK0J,EAAYuJ,iBAChFna,KAAKuc,cAAgBvc,KAAKwc,gBAAgBlP,EAAAtK,cAAckF,OACxDlI,KAAKyc,cAAgBzc,KAAKwc,gBAAgBlP,EAAAtK,cAAcqF,OACxDrI,KAAK0c,gBAAkB1c,KAAKwc,gBAAgBlP,EAAAtK,cAAcsF,SAC1DtI,KAAK2c,aAAe3c,KAAKwc,gBAAgBlP,EAAAtK,cAAcuF,MACvDvI,KAAK4c,eAAiB5c,KAAKwc,gBAAgBlP,EAAAtK,cAAcwF,QACzDxI,KAAK6c,gBAAkB7c,KAAKwc,gBAAgBlP,EAAAtK,cAAcyF,SAC1DzI,KAAK8c,gBAAkB9c,KAAKwc,gBAAgBlP,EAAAtK,cAAc0F,SAC1D1I,KAAK+c,iBAAmB/c,KAAKwc,gBAAgBlP,EAAAtK,cAAc2F,UAC3D3I,KAAKgd,mBAAqBhd,KAAKwc,gBAAgBlP,EAAAtK,cAAc4F,aAC7D5I,KAAKid,cAAgBjd,KAAKwc,gBAAgBlP,EAAAtK,cAAc6F,OACxD7I,KAAKkd,mBAAqBld,KAAKwc,gBAAgBlP,EAAAtK,cAAc8F,gBAG7D,IAAiB,IAAAqU,GAAArF,EAAA9X,KAAKoR,YAAYgM,UAAQC,GAAAF,GAAAnF,QAAAqF,GAAApF,KAAAoF,GAAAF,GAAAnF,OAAE,CACtCtY,GADG0W,EAAIiH,GAAA/b,OACQ5B,QACnB,GAAM0W,EAAK3K,OAAO6R,SAAW5d,MAC7B,IAAoB,IAAA6d,GAAAzF,EAAApY,EAAQ0d,UAAQI,GAAAD,GAAAvF,QAAAwF,GAAAvF,KAAAuF,GAAAD,GAAAvF,OAAA,CAA/B,IAAIW,GAAO6E,GAAAlc,MAAsBtB,KAAKyd,iBAAiB9E,mNAKxD7H,EAAA7O,UAAArC,QAAR,SAAgBgB,EAAc4V,GAC5B,IAAImC,EAAU3Y,KAAK2Z,aAAa/Y,GAChC,IAAK+X,EAAS,MAAM,IAAIuD,MAAM,WAAatb,GAC3C,GAAI+X,EAAQnC,MAAQA,EAAM,MAAM,IAAI0F,MAAM,cAAgBtb,GAC1D,OAAO+X,GAID7H,EAAA7O,UAAA6X,aAAR,SAAqBlZ,GACnB,IAAIqB,EAAYjC,KAAKJ,QAAQgB,EAAMgQ,EAAYuJ,iBAC3CuD,EAAW1d,KAAKoS,SAASuL,aAA6B1b,EAAW,MACrE,IAAKyb,EAAU,MAAM,IAAIxB,MAAM,WAAatb,GAC5C,OAAO8c,GAID5M,EAAA7O,UAAAua,gBAAR,SAAwB5b,GACtB,IAAIqB,EAAYjC,KAAKJ,QAAQgB,EAAMgQ,EAAYgN,oBAC3CF,EAAW1d,KAAKoS,SAASyL,gBAAmC5b,EAAW,MAC3E,IAAKyb,EAAU,MAAM,IAAIxB,MAAM,WAAatb,GAC5C,OAAO8c,GAID5M,EAAA7O,UAAAwb,iBAAR,SAAyB9E,eAEvB,OADAA,EAAQzG,IAAI5E,EAAAjL,YAAYyb,eAChBnF,EAAQnC,MACd,KAAK5F,EAAYuJ,gBACf,IAAI4D,EAAmCpF,EAASoF,gBAChD,GAAIA,MAAiB,IAAmB,IAAAC,EAAAlG,EAAAiG,EAAgBX,UAAQa,EAAAD,EAAAhG,QAAAiG,EAAAhG,KAAAgG,EAAAD,EAAAhG,OAAA,CAAtC,IAAIkG,EAAMD,EAAA3c,MAA8BtB,KAAKyd,iBAAiBS,qGACxF,MAEF,KAAKtN,EAAYuN,mBACf,IAAIC,EAAsCzF,EAASyF,gBAC/CA,GAAiBpe,KAAKyd,iBAAiBW,GAC3C,IAAIC,EAAsC1F,EAAS0F,gBAC/CA,GAAiBre,KAAKyd,iBAAiBY,GAC3C,MAEF,KAAKzN,EAAY0N,SACjB,KAAK1N,EAAY2N,SACjB,KAAK3N,EAAY4N,MACjB,KAAK5N,EAAY6N,MAAOvU,QAAO,GAG/B,IAAIwU,EAAU/F,EAAQ+F,QACtB,GAAIA,MAAS,IAAmB,IAAAC,EAAA7G,EAAA4G,EAAQtB,UAAQwB,EAAAD,EAAA3G,QAAA4G,EAAA3G,KAAA2G,EAAAD,EAAA3G,OAAA,CAA1BkG,EAAMU,EAAAtd,MAAsBtB,KAAKyd,iBAAiBS,uGAKpEpN,EAAA7O,UAAAyS,mBAAR,SAA2B9T,EAAcie,GACvC,IAAIlG,EAAU,IAAI3D,EAChBpU,EACAZ,KAAKgS,WACLhS,KAAKoT,0BAA0BxS,EAAM0M,EAAAjL,YAAY4S,QACjDpE,EAAesE,SAEjBwD,EAAQmG,QAAQD,GAChB7e,KAAKgS,WAAW+C,IAAInU,EAAM+X,IAIpB7H,EAAA7O,UAAAgY,wBAAR,SAAgC8E,EAAoBC,GAClD9U,QAAQlK,KAAKwR,YAAY+C,IAAIwK,IAC7B,IAAIpG,EAAU3Y,KAAK2Z,aAAaqF,GAChC,GAAIrG,EAAS,CACXzO,OAAOyO,EAAQnC,MAAQ5F,EAAYuJ,iBACnC,IAAI8E,EAAejf,KAAKoS,SAASuL,aAA6BhF,EAAS,MACnEsG,GAAcjf,KAAKwR,YAAYU,IAAI6M,EAAUE,KAK7CnO,EAAA7O,UAAAoT,wBAAR,SAAgCzU,EAAcie,EAAYvd,GACxD4I,OAAO2U,EAAKK,GAAE,IACd,IAAIC,EAAS,IAAIC,EACfxe,EACAZ,KAAKgS,WACLnB,EAAemC,KACfhT,KAAK8S,8BAA8BlS,EAAM0M,EAAAjL,YAAYgd,MAAQ/R,EAAAjL,YAAY4S,SAE3EkK,EAAOG,wBAAwBhe,EAAOud,GACtC7e,KAAKgS,WAAW+C,IAAInU,EAAMue,IAIpBrO,EAAA7O,UAAAsd,sBAAR,SAA8B3e,EAAcie,EAAYvd,GACtD4I,OAAO2U,EAAKK,GAAE,IACd,IAAIC,EAAS,IAAIC,EACfxe,EACAZ,KAAKgS,WACLnB,EAAemC,KACfhT,KAAK8S,8BAA8BlS,EAAM0M,EAAAjL,YAAYgd,MAAQ/R,EAAAjL,YAAY4S,SAE3EkK,EAAOK,sBAAsBle,EAAOud,GACpC7e,KAAKgS,WAAW+C,IAAInU,EAAMue,IAI5BrO,EAAA7O,UAAAwd,aAAA,SAAa7e,EAAc+X,GACzB,IAAItH,EAAiBrR,KAAKqR,eAC1B,GAAIA,EAAekD,IAAI3T,IACRyQ,EAAenQ,IAAIN,KAMjB+X,EAAS,CACtB,IAAI+G,EAASC,EAAStO,EAAenQ,IAAIN,GAAQ+X,GACjD,IAAK+G,EAKH,OAJA1f,KAAKmN,MACHI,EAAAhD,eAAeqV,uBACfjH,EAAQ2C,eAAezQ,MAAOjK,GAEzB+X,EAETA,EAAU+G,EAId,OADArO,EAAea,IAAItR,EAAM+X,GAClBA,GAIT7H,EAAA7O,UAAA0X,aAAA,SAAa/Y,GACX,IAAIif,EAAW7f,KAAKqR,eACpB,OAAIwO,EAAStL,IAAI3T,GAAcif,EAAS3e,IAAIN,GACrC,MAITkQ,EAAA7O,UAAA6d,cAAA,SAAclf,GACZ,IAAIif,EAAW7f,KAAKqR,eACpB,GAAIwO,EAAStL,IAAI3T,GAAO,OAAOif,EAAS3e,IAAIN,GAC5C,MAAM,IAAIsb,MAAM,mBAIVpL,EAAA7O,UAAAsW,kBAAR,SAEEvK,EAEAC,GAEA,IAAImD,EAAcpR,KAAKoR,YACvB,OAAOA,EAAYmD,IAAIvG,GAChBoD,EAAYlQ,IAAI8M,GAChBoD,EAAYmD,IAAItG,GAChBmD,EAAYlQ,IAAI+M,GAChB,MAID6C,EAAA7O,UAAA2W,cAAR,SAEEmH,EAEA/R,EAEAC,EAEA8H,GAEA,OAAG,CACD,IAAIuC,EAActY,KAAKuY,kBAAkBvK,EAAaC,GACtD,IAAKqK,EAAa,OAAO,KAGzB,IAAIK,EAAUL,EAAY0H,aAAaD,GACvC,GAAIpH,EAAS,OAAOA,EAGpB,GAAI5C,EAAcxB,IAAI+D,GAAc,CAClC,IAAI2H,EAAoBlK,EAAc7U,IAAIoX,GAC1C,GAAI2H,EAAkB1L,IAAIwL,GAAc,CACtC,IAAIxG,EAAe0G,EAAkB/e,IAAI6e,GACzC,GAAIxG,EAAavL,YAAa,CAC5B+R,EAAcxG,EAAazL,gBAAgB/B,KAC3CiC,EAAcuL,EAAavL,YAC3BC,EAAiB/D,OAAOqP,EAAatL,gBACrC,SAGA,GADA0K,EAAUL,EAAYmB,aAAaF,EAAazL,gBAAgB/B,MACnD,OAAO4M,GAI1B,MAEF,OAAO,MAID7H,EAAA7O,UAAAie,gBAAR,SAEEC,EAEAC,GAEA,IAAIrN,EAAQlC,EAAemC,KAC3B,GAAImN,EACF,IAAK,IAAI9f,EAAI,EAAG8V,EAAIgK,EAAWlU,OAAQ5L,EAAI8V,IAAK9V,EAAG,CACjD,IAAIggB,EAAYF,EAAW9f,GAEvBigB,EAAOC,EADA9S,EAAA+S,oBAAoBH,EAAUzf,OAErC0f,IACEA,GAAQzP,EAAesE,QACnBiL,EAAgBE,GAAUD,EAAUxV,MAAMY,OAAOgV,UAMrD1N,GAASuN,EALTtgB,KAAKmN,MACHI,EAAAhD,eAAemW,8BACfL,EAAUxV,MAAOwV,EAAUzf,KAAKiK,MAAMW,YAK/B4U,EAAgBE,EAKlBvN,EAAQuN,EACjBtgB,KAAKmN,MACHI,EAAAhD,eAAeoW,oBACfN,EAAUxV,MAAOwV,EAAUzf,KAAKiK,MAAMW,YAGxCuH,GAASuN,EAVTtgB,KAAKmN,MACHI,EAAAhD,eAAemW,8BACfL,EAAUxV,MAAOwV,EAAUzf,KAAKiK,MAAMW,aAahD,OAAOuH,GAIDjC,EAAA7O,UAAAiV,gBAAR,SAEE5C,EAEAL,EAEAgC,EAEAC,GAEA,IAAItV,EAAO0T,EAAY1T,KAAKmL,KACxB4M,EAAU,IAAIiI,EAChBhgB,EACAqT,EACAK,EACAtU,KAAKkgB,gBAAgB5L,EAAY6L,WAC/BtP,EAAegQ,OACfhQ,EAAeuK,OACfvK,EAAe0K,YAGnB,IAAKtH,EAAOc,IAAInU,EAAM+X,GAAU,OAAO,KAEvC,IAAImI,EAAkBxM,EAAYwM,gBAClC,GAAIA,EAAiB,CACnB,IAAIC,EAAqBD,EAAgB7U,OAEzC,GAAI0M,EAAQwC,aAAatK,EAAe0K,WAClCwF,GACF/gB,KAAKmN,MACHI,EAAAhD,eAAeyW,8CACfvT,EAAAgO,MAAMhP,KACJ6H,EAAY1T,KAAKiK,MACjBiW,EAAgBC,EAAqB,GAAGlW,aAIzC,GAAIkW,EAAoB,CAE7B,IAAK,IAAI1gB,EAAI,EAAGA,EAAI0gB,IAAsB1gB,EACxCL,KAAKiN,QACHM,EAAAhD,eAAe0W,wBACfH,EAAgBzgB,GAAGwK,OAGvBqL,EAAiB1J,KAAKmM,IAItBrE,EAAY4M,aAAajL,EAAczJ,KAAKmM,GAIhD,IADA,IAAIwI,EAAqB7M,EAAYoK,QACrBvI,GAAP9V,EAAI,EAAO8gB,EAAmBlV,QAAQ5L,EAAI8V,IAAK9V,EAAG,CACzD,IAAI+gB,EAAoBD,EAAmB9gB,GAC3C,OAAQ+gB,EAAkB5K,MACxB,KAAK/I,EAAAgJ,SAAS4K,iBACZrhB,KAAKshB,gBAAkCF,EAAmBzI,GAC1D,MAEF,KAAKlL,EAAAgJ,SAAS8K,kBACRH,EAAkBI,MAAMlU,EAAAjL,YAAYof,IAAMnU,EAAAjL,YAAYqf,KACxD1hB,KAAK2hB,mBAAsCP,EAAmBzI,GAE9D3Y,KAAK4hB,iBAAoCR,EAAmBzI,GAE9D,MAEF,KAAKlL,EAAAgJ,SAASoL,0BAA2B,MACzC,QAAS3X,QAAO,IAGpB,OAAOyO,GAID7H,EAAA7O,UAAAqf,gBAAR,SAEEhN,EAEAL,GAEA,IAEI0E,EAFA/X,EAAO0T,EAAY1T,KAAKmL,KACxBoU,EAAa7L,EAAY6L,WAE7B,GAAI7L,EAAY4K,GAAG5R,EAAAjL,YAAYyf,SAa7B,GAZA5X,OAAO+J,EAAOuC,MAAQ5F,EAAYmR,qBAClCpJ,EAAU,IAAIyG,EACZxe,EACAqT,EACAjU,KAAKkgB,gBAAgBC,GAClB7L,EAAY4K,GAAG5R,EAAAjL,YAAY2f,UACxBnR,EAAeoR,OACfpR,EAAemC,MACfnC,EAAeqR,KAAOrR,EAAesR,QAE3C7N,IAEGL,EAAOc,IAAInU,EAAM+X,GAAU,YAShC,GAPAzO,QAAQoK,EAAYkN,MAAMlU,EAAAjL,YAAY+f,SAAW9U,EAAAjL,YAAYof,IAAMnU,EAAAjL,YAAYqf,MAC/E/I,EAAU,IAAI0J,EACZzhB,EACAqT,EACAK,EACAtU,KAAKkgB,gBAAgBC,EAAYtP,EAAesR,UAE7ClO,EAAOqO,YAAY1hB,EAAM+X,GAAU,QAKpC7H,EAAA7O,UAAA2f,iBAAR,SAEEtN,EAEAL,GAEA,IAAIrT,EAAO0T,EAAY1T,KAAKmL,KACxBwW,EAAWjO,EAAY4K,GAAG5R,EAAAjL,YAAYyf,QACtC1B,EAAgBvP,EAAeoR,OAASpR,EAAesR,OACtD7N,EAAY4K,GAAG5R,EAAAjL,YAAY6S,WAC9BkL,GAAiBvP,EAAenC,gBACfmC,EAAeZ,gBACfY,EAAeL,kBAElC,IAAImI,EAAU,IAAIvE,EAChBxT,EACAqT,EACAK,EACAtU,KAAKkgB,gBAAgB5L,EAAY6L,WAAYC,IAE/C,GAAImC,GAEF,GADArY,OAAOoK,EAAY1T,KAAK4V,MAAQ/I,EAAAgJ,SAAS+L,cACpCvO,EAAOc,IAAInU,EAAM+X,GAAU,YAEhC,IAAK1E,EAAOqO,YAAY1hB,EAAM+X,GAAU,OAE1C3Y,KAAKyiB,uBAAuBnO,EAAY6L,WAAYxH,EAAS1E,IAIvDnD,EAAA7O,UAAAwgB,uBAAR,SAEEtC,EAEAle,EAEAygB,GAEA,GAAIvC,EACF,IAAK,IAAI9f,EAAI,EAAG8V,EAAIgK,EAAWlU,OAAQ5L,EAAI8V,IAAK9V,EAAG,CACjD,IAAIggB,EAAYF,EAAW9f,GAC3B,OAAQggB,EAAU/R,eAChB,KAAKb,EAAAe,cAAcC,SACnB,KAAKhB,EAAAe,cAAcE,gBACnB,KAAKjB,EAAAe,cAAcyB,gBACnB,KAAKxC,EAAAe,cAAcgC,iBACjB,IAAImS,EAAUtC,EAAUuC,WAAavC,EAAUuC,UAAU3W,QAAU,EACnE,GAAe,GAAX0W,EAAc,CAChB,IAAIE,EAA0BxC,EAAUuC,UAAW,GACnD,GACEC,EAASrM,MAAQ/I,EAAAgJ,SAASqM,SACND,EAAUE,aAAetV,EAAAuV,YAAYC,OACzD,CACA,IAAIzM,EAAOnI,EACTgS,EAAU/R,cACgBuU,EAAUvhB,OAEtC,GAAIkV,GAAQnJ,EAAasD,QACvB3Q,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf4B,EAAShY,WAEN,CACL,IAAIqY,EAAYR,EAAeS,mBAC3BD,EAAU3O,IAAIiC,GAChBxW,KAAKmN,MACHI,EAAAhD,eAAe6Y,kCACfP,EAAShY,QAGX5I,EAAUohB,aAAe7M,EACzB0M,EAAUhR,IAAIsE,EAAMvU,UAIxBjC,KAAKmN,MACHI,EAAAhD,eAAe+Y,wBACfT,EAAShY,YAIb7K,KAAKmN,MACHI,EAAAhD,eAAegZ,+BACflD,EAAUxV,MAAO,IAAK8X,EAAQnX,SAAS,QAU7CsF,EAAA7O,UAAAuhB,eAAR,SAEElP,EAEAL,GAEA,IAAIrT,EAAO0T,EAAY1T,KAAKmL,KAC5B,GAAIuI,EAAY4K,GAAG5R,EAAAjL,YAAYyf,QAAS,CAEtC,KADI2B,EAAgBxP,EAAOyK,WACN+E,EAAclP,IAAI3T,GAGhC,CACL,IAAI+X,EAAU,IAAI+K,EAAkB9iB,EAAMqT,EAAQK,GAClD,OAAKL,EAAOc,IAAInU,EAAM+X,GACfA,EADgC,KAHvC,IADIA,EAAmB8K,EAAcviB,IAAIN,IAC7B4V,MAAQ5F,EAAYuN,mBAAoB,OAA0BxF,MAM3E,CACL,IAAI8K,EACJ,KADIA,EAAgBxP,EAAO8J,mBACN0F,EAAclP,IAAI3T,GAGhC,CACD+X,EAAU,IAAI+K,EAAkB9iB,EAAMqT,EAAQK,GAClD,OAAKL,EAAOqO,YAAY1hB,EAAM+X,GACvBA,EADwC,KAH/C,IADIA,EAAmB8K,EAAcviB,IAAIN,IAC7B4V,MAAQ5F,EAAYuN,mBAAoB,OAA0BxF,EAWlF,OAJA3Y,KAAKmN,MACHI,EAAAhD,eAAeoZ,qBACfrP,EAAY1T,KAAKiK,MAAOjK,GAEnB,MAIDkQ,EAAA7O,UAAA0f,mBAAR,SAEErN,EAEAL,GAEA,IAAIjS,EAAWhC,KAAKwjB,eAAelP,EAAaL,GAChD,GAAKjS,EAAL,CACA,IAAIpB,EAAO0T,EAAY1T,KAAKmL,KACxB6X,EAAWtP,EAAY4K,GAAG5R,EAAAjL,YAAYof,KAC1C,GAAImC,GACF,GAAI5hB,EAASoc,gBAKX,YAJApe,KAAKmN,MACHI,EAAAhD,eAAeoZ,qBACfrP,EAAY1T,KAAKiK,MAAOjK,QAK5B,GAAIoB,EAASqc,gBAKX,YAJAre,KAAKmN,MACHI,EAAAhD,eAAeoZ,qBACfrP,EAAY1T,KAAKiK,MAAOjK,GAK9B,IAAI+X,EAAU,IAAIvE,GACfwP,EAAWtW,EAAA9K,cAAgB8K,EAAA7K,eAAiB7B,EAC7CoB,EACAsS,EACAtU,KAAKkgB,gBAAgB5L,EAAY6L,WAC/BtP,EAAeoR,OAASpR,EAAesR,SAGvCyB,EACF5hB,EAASoc,gBAAkBzF,EAE3B3W,EAASqc,gBAAkB1F,IAKvB7H,EAAA7O,UAAAmV,eAAR,SAEE9C,EAEAL,GAEA,IAAIrT,EAAO0T,EAAY1T,KAAKmL,KACxB4M,EAAU,IAAIkL,EAChBjjB,EACAqT,EACAK,EACAtU,KAAKkgB,gBAAgB5L,EAAY6L,WAC/BtP,EAAegQ,OACfhQ,EAAeoR,OACfpR,EAAeqR,OAGnB,IAAKjO,EAAOc,IAAInU,EAAM+X,GAAU,OAAO,KAEvC,IADA,IAAIyE,EAAS9I,EAAY8I,OAChB/c,EAAI,EAAG8V,EAAIiH,EAAOnR,OAAQ5L,EAAI8V,IAAK9V,EAC1CL,KAAK8jB,oBAAoB1G,EAAO/c,GAAIsY,GAEtC,OAAOA,GAID7H,EAAA7O,UAAA6hB,oBAAR,SAEExP,EAEAL,GAEA,IAAIrT,EAAO0T,EAAY1T,KAAKmL,KACxB4M,EAAU,IAAIoL,EAChBnjB,EACAqT,EACAK,EACAtU,KAAKkgB,gBAAgB5L,EAAY6L,WAC/BtP,EAAemC,OAGdiB,EAAOc,IAAInU,EAAM+X,IAIhB7H,EAAA7O,UAAAyU,kBAAR,SAEEH,EAEAtC,EAEA8B,EAEAC,GAEA,IAAI0I,EAAUnI,EAAUmI,QACxB,GAAIA,EACF,IAAK,IAAIre,EAAI,EAAG8V,EAAIuI,EAAQzS,OAAQ5L,EAAI8V,IAAK9V,EAC3CL,KAAKgkB,iBAAiBtF,EAAQre,GAAI4T,EAAQsC,EAAU0N,aAAclO,OAE/D,CACL,IAAImO,OAAM,EACNlO,EAAkBzB,IAAIN,GAASiQ,EAASlO,EAAkB9U,IAAI+S,GAC7D+B,EAAkB9D,IAAI+B,EAAQiQ,EAAS,IAC5C,IAAIlW,EAAc9D,OAAOqM,EAAU0N,cACnCC,EAAO1X,KAAK,IAAI2B,EACdH,EACAA,EAAYmW,SAAS7W,EAAAvK,cACjBiL,EAAYzB,UAAU,EAAGyB,EAAY/B,OAASqB,EAAAvK,aAAakJ,QAC3D+B,EAAcV,EAAAvK,aAClBmH,OAAOqM,EAAU6N,UAMftT,EAAA7O,UAAA+hB,iBAAR,SAEE9F,EAEArQ,EAEAG,EAEA+H,GAEA,IAAI+C,EAAYoF,EAAOpF,UAAU/M,KAC7BgU,EAAc7B,EAAOmG,aAAatY,KAGlC4M,EAAU9K,EAAUmS,aAAaD,GACrC,GAAIpH,EACF3Y,KAAKmN,MACHI,EAAAhD,eAAe+Z,4DACfpG,EAAOmG,aAAaxZ,MAAOkV,QAK/B,GAAoB,OAAhB/R,EAGF,GAAI2K,EAAU9K,EAAU4L,aAAaX,GACnCjL,EAAU2L,aAAauG,EAAapH,OAG/B,CACL,IAAIuL,OAAM,EACNnO,EAAcxB,IAAI1G,GAAYqW,EAASnO,EAAc7U,IAAI2M,GACxDkI,EAAc7D,IAAIrE,EAAWqW,EAAS,IAAIhd,KAC/Cgd,EAAOhS,IAAI6N,EAAa,IAAI7R,EAC1BgQ,EAAOpF,UACPoF,EAAOmG,aACP,KAAM,WAKL,CACDH,OAAM,EACNnO,EAAcxB,IAAI1G,GAAYqW,EAASnO,EAAc7U,IAAI2M,GACxDkI,EAAc7D,IAAIrE,EAAWqW,EAAS,IAAIhd,KAC/Cgd,EAAOhS,IAAI6N,EAAa,IAAI7R,EAC1BgQ,EAAOpF,UACPoF,EAAOmG,aACPrW,EACAA,EAAYmW,SAAS7W,EAAAvK,cACjBiL,EAAYzB,UAAU,EAAGyB,EAAY/B,OAASqB,EAAAvK,aAAakJ,QAC3D+B,EAAcV,EAAAvK,iBAKhB+N,EAAA7O,UAAA2U,wBAAR,SAEEL,EAEAtC,EAEAgC,EAEAC,GAEA,IAAI5B,EAAciC,EAAUjC,YACxBqE,EAAkC,KACtC,OAAQrE,EAAYkC,MAClB,KAAK/I,EAAAgJ,SAASU,gBACZwB,EAAU3Y,KAAKoX,eAAgC9C,EAAaL,GAC5D,MAEF,KAAKxG,EAAAgJ,SAASY,oBACZsB,EAAU3Y,KAAKsX,mBAAwChD,EAAaL,GACpE,MAEF,KAAKxG,EAAAgJ,SAASQ,iBACZ0B,EAAU3Y,KAAKkX,gBAAkC5C,EAAaL,EAAQgC,EAAeC,GACrF,MAEF,KAAKzI,EAAAgJ,SAASc,qBACZoB,EAAU3Y,KAAKwX,oBAA0ClD,EAAaL,GACtE,MAEF,KAAKxG,EAAAgJ,SAASgB,qBACZkB,EAAU3Y,KAAK0X,oBAA0CpD,EAAaL,EAAQgC,EAAeC,GAC7F,MAEF,QAAShM,QAAO,GAElB,GAAIyO,EAAS,CACX,IAAIjZ,EAAUuU,EAAOvU,QACrB,GAAKA,GACA,GAAIA,EAAQ6U,IAAI,WAKnB,YAJAvU,KAAKmN,MACHI,EAAAhD,eAAeqV,uBACftL,EAAY1T,KAAKiK,MAAO,gBAJdoJ,EAAOvU,QAAUA,EAAU,IAAIwH,IAQ7CxH,EAAQwS,IAAI,UAAWyG,KAKnB7H,EAAA7O,UAAA6U,kBAAR,SAEEP,EAEAtC,EAEA6B,EAEAC,GAEA,IAAIwO,EAAehO,EAAUgO,aAC7B,GAAIA,EACF,IAAK,IAAIlkB,EAAI,EAAG8V,EAAIoO,EAAatY,OAAQ5L,EAAI8V,IAAK9V,EAChDL,KAAKwkB,iBACHD,EAAalkB,GACb4T,EACAsC,EAAU0N,aACVnO,EACAC,QAGKQ,EAAUkO,eACnB3O,EAActJ,KAAK,IAAIoB,EACrBqG,EACAsC,EAAUkO,cACV,KACAlO,EAAU0N,aACV1N,EAAU0N,aAAe3W,EAAAvK,gBAQvB+N,EAAA7O,UAAAuiB,iBAAR,SAEElQ,EAEAL,EAEAjG,EAEA8H,EAEAC,GAEA,IAAI9H,EAAiBD,EAAYmW,SAAS7W,EAAAvK,cACtCiL,EAAYzB,UAAU,EAAGyB,EAAY/B,OAASqB,EAAAvK,aAAakJ,QAC3D+B,EAAcV,EAAAvK,aAGd4V,EAAU3Y,KAAK4Y,cAActE,EAAYyL,YAAYhU,KAAMiC,EAAaC,EAAgB8H,GACxF4C,EACF1E,EAAOc,IAAIT,EAAY1T,KAAKmL,KAAM4M,GAAS,GAK7C7C,EAActJ,KAAK,IAAIoB,EACrBqG,EACAK,EAAY1T,KACZ0T,EAAYyL,YACZ/R,EACAC,KAKI6C,EAAA7O,UAAAqV,mBAAR,SAEEhD,EAEAL,GAEA,IAAIrT,EAAO0T,EAAY1T,KAAKmL,KACxB2Y,EAAkB7T,EAAesR,OAAStR,EAAesE,QACzDb,EAAY4K,GAAG5R,EAAAjL,YAAYsiB,SAC7BD,GAAmB7T,EAAe+T,SAElCF,GAAmB7T,EAAeoR,OAE/B3N,EAAY4K,GAAG5R,EAAAjL,YAAYwiB,WAC1B5Q,EAAOuC,MAAQ5F,EAAYuJ,kBAC7BuK,GAAmB7T,EAAegQ,QAGjCvM,EAAY4K,GAAG5R,EAAAjL,YAAY6S,UAC1BjB,EAAOuC,MAAQ5F,EAAYkU,MAAe7Q,EAAQxI,OAAO6R,UAC3DoH,GAAmB7T,EAAekU,OAGtC,IAAIpM,EAAU,IAAIvE,EAChBxT,EACAqT,EACAK,EACAtU,KAAKkgB,gBAAgB5L,EAAY6L,WAAYuE,IAE/C,OAAKzQ,EAAOc,IAAInU,EAAM+X,IAClBA,EAAQwC,aAAatK,EAAekU,SAClC/kB,KAAKmR,sBACPnR,KAAKmN,MACHI,EAAAhD,eAAeya,4CACf9a,OAAOuD,EAAAwX,cAAcxX,EAAAe,cAAcuW,MAAOzQ,EAAY6L,aAAatV,OAEhE7K,KAAKmR,sBAAwBwH,GAE/BA,GATgC,MAajC7H,EAAA7O,UAAAuV,oBAAR,SAEElD,EAEAL,GAEA,IAAIrT,EAAO0T,EAAY1T,KAAKmL,KACxB4M,EAAU,IAAIuM,EAChBtkB,EACAqT,EACAK,EACAtU,KAAKkgB,gBAAgB5L,EAAY6L,WAC/BtP,EAAegQ,SAGnB,IAAK5M,EAAOc,IAAInU,EAAM+X,GAAU,OAAO,KAEvC,IADA,IAAIwI,EAAqB7M,EAAYoK,QAC5Bre,EAAI,EAAG8V,EAAIgL,EAAmBlV,OAAQ5L,EAAI8V,IAAK9V,EAAG,CACzD,IAAI+gB,EAAoBD,EAAmB9gB,GAC3C,OAAQ+gB,EAAkB5K,MACxB,KAAK/I,EAAAgJ,SAAS4K,iBACZrhB,KAAKshB,gBAAkCF,EAAmBzI,GAC1D,MAEF,KAAKlL,EAAAgJ,SAAS8K,kBACRH,EAAkBI,MAAMlU,EAAAjL,YAAYof,IAAMnU,EAAAjL,YAAYqf,KACxD1hB,KAAK2hB,mBAAsCP,EAAmBzI,GAE9D3Y,KAAK4hB,iBAAoCR,EAAmBzI,GAE9D,MAEF,QAASzO,QAAO,IAGpB,OAAOyO,GAID7H,EAAA7O,UAAAyV,oBAAR,SAEEpD,EAEAL,EAEAgC,EAEAC,GAEA,IAAItV,EAAO0T,EAAY1T,KAAKmL,KACxBoZ,EAAW,IAAIC,EACjBxkB,EACAqT,EACAK,EACAtU,KAAKkgB,gBAAgB5L,EAAY6L,WAAYtP,EAAegQ,SAE9D,IAAK5M,EAAOc,IAAInU,EAAMukB,GAAW,OAAO,KAGxC,IAFA,IAAIxM,EAAUzO,OAAO+J,EAAOwF,aAAa7Y,IACrC8d,EAAUpK,EAAYoK,QACjBre,EAAI,EAAG8V,EAAIuI,EAAQzS,OAAQ5L,EAAI8V,IAAK9V,EAAG,CAC9C,IAAI6d,EAASQ,EAAQre,GACrB,OAAQ6d,EAAO1H,MACb,KAAK/I,EAAAgJ,SAASQ,iBACZjX,KAAKkX,gBAAkCgH,EAAQiH,EAAUlP,EAAeC,GACxE,MAEF,KAAKzI,EAAAgJ,SAASU,gBACZnX,KAAKoX,eAAgC8G,EAAQiH,GAC7C,MAEF,KAAK1X,EAAAgJ,SAASY,oBACZrX,KAAKsX,mBAAwC4G,EAAQiH,GACrD,MAEF,KAAK1X,EAAAgJ,SAASc,qBACZvX,KAAKwX,oBAA0C0G,EAAQiH,GACvD,MAEF,KAAK1X,EAAAgJ,SAASgB,qBACZzX,KAAK0X,oBAA0CwG,EAAQiH,EAAUlP,EAAeC,GAChF,MAEF,KAAKzI,EAAAgJ,SAASkB,gBACZ3X,KAAK4X,yBAA0CsG,EAAQiH,GACvD,MAEF,KAAK1X,EAAAgJ,SAASM,SACZ/W,KAAKgX,oBAAuCkH,EAAQiH,GACpD,MAEF,QAASjb,QAAO,IAIpB,OADIib,GAAYxM,GAAS0M,EAAYF,EAAUxM,GACxCA,GAID7H,EAAA7O,UAAA2V,yBAAR,SAEEtD,EAEAL,GAEA,IAAIrT,EAAO0T,EAAY1T,KAAKmL,KACxB4M,EAAU,IAAI3D,EAChBpU,EACAqT,EACAK,EACAtU,KAAKkgB,gBAAgB5L,EAAY6L,WAAYtP,EAAemC,OAE9DiB,EAAOc,IAAInU,EAAM+X,IAIX7H,EAAA7O,UAAA+U,oBAAR,SAEET,EAEAtC,GAGA,IADA,IAAIsQ,EAAehO,EAAUgO,aACpBlkB,EAAI,EAAG8V,EAAIoO,EAAatY,OAAQ5L,EAAI8V,IAAK9V,EAAG,CACnD,IAAIiU,EAAciQ,EAAalkB,GAC3BO,EAAO0T,EAAY1T,KAAKmL,KACxBqU,EAAgBvP,EAAegQ,OAAShQ,EAAeqR,KACvD5N,EAAY4K,GAAG5R,EAAAjL,YAAYijB,WAC7BlF,GAAiBvP,EAAe+T,UAE9BtQ,EAAY4K,GAAG5R,EAAAjL,YAAYgd,SAC7Be,GAAiBvP,EAAeoR,QAElC,IAAItJ,EAAU,IAAIyG,EAChBxe,EACAqT,EACAjU,KAAKkgB,gBAAgB5L,EAAY6L,WAAYC,GAC7C9L,GAEGL,EAAOc,IAAInU,EAAM+X,KA8B5B7H,EA5gDA,CAA6BvD,EAAAX,mBAqlD7B,SAAgB2T,EAAoB/J,GAClC,OAAQA,GACN,KAAK/I,EAAAe,cAAcqS,OAAQ,OAAOhQ,EAAegQ,OACjD,KAAKpT,EAAAe,cAAcC,SACnB,KAAKhB,EAAAe,cAAcE,gBAAiB,OAAOmC,EAAenC,gBAC1D,KAAKjB,EAAAe,cAAcyB,gBAAiB,OAAOY,EAAeZ,gBAC1D,KAAKxC,EAAAe,cAAcgC,iBAAkB,OAAOK,EAAeL,iBAC3D,KAAK/C,EAAAe,cAAc+M,UAAW,OAAO1K,EAAe0K,UACpD,KAAK9N,EAAAe,cAAc4M,OAAQ,OAAOvK,EAAeuK,OACjD,KAAK3N,EAAAe,cAAcyT,OAAQ,OAAOpR,EAAeoR,OACjD,KAAKxU,EAAAe,cAAcoW,SAAU,OAAO/T,EAAe+T,SACnD,KAAKnX,EAAAe,cAAc2G,QAAS,OAAOtE,EAAesE,QAClD,KAAK1H,EAAAe,cAAc0T,KAAM,OAAOrR,EAAeqR,KAC/C,KAAKzU,EAAAe,cAAcuW,MAAO,OAAOlU,EAAekU,MAChD,KAAKtX,EAAAe,cAAc2T,OAAQ,OAAOtR,EAAesR,OACjD,QAAS,OAAOtR,EAAemC,MApmDtBtT,EAAAoR,UA+gDb,SAAYF,GAEVA,IAAA,mBAEAA,IAAA,iBAEAA,IAAA,eAEAA,IAAA,yBAEAA,IAAA,2CAEAA,IAAA,uBAEAA,IAAA,qCAEAA,IAAA,qCAEAA,IAAA,iBAEAA,IAAA,6CAEAA,IAAA,0BAEAA,IAAA,sCAEAA,IAAA,kBAEAA,IAAA,4CAEAA,IAAA,wBAEAA,IAAA,0BAEAA,IAAA,gBAEAA,IAAA,oCApCF,CAAYA,EAAAlR,EAAAkR,cAAAlR,EAAAkR,YAAW,KAwCvB,SAAYC,GAEVA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,qCAEAA,IAAA,qCAEAA,IAAA,uCAEAA,IAAA,0BAEAA,IAAA,oBAEAA,IAAA,oBAEAA,IAAA,yBAEAA,IAAA,uBAEAA,IAAA,iBAEAA,IAAA,oBAEAA,IAAA,sBA1BF,CAAYA,EAAAnR,EAAAmR,iBAAAnR,EAAAmR,eAAc,KA8B1BnR,EAAA6gB,sBAoBA,IAAAgF,EAAA,WAcE,SAAAA,EAES/O,EAEA5V,EAEAuR,EAEAqT,EAEPvR,GAROjU,KAAAwW,OAEAxW,KAAAY,OAEAZ,KAAAmS,eAEAnS,KAAAwlB,UAjBTxlB,KAAA+S,MAAqBzF,EAAAjL,YAAY2Q,KAEjChT,KAAAkU,eAAiCrD,EAAemC,KAEhDhT,KAAA0e,QAA8C,KAE9C1e,KAAAylB,WAAoC,KAelCzlB,KAAKwlB,QAAUA,EACfxlB,KAAKY,KAAOA,EACZZ,KAAKmS,aAAeA,EAChB8B,EACFjU,KAAKiU,OAASA,GAEd/J,OAAOlK,KAAKwW,MAAQ5F,EAAYkU,MAChC9kB,KAAKiU,OAASjU,MAoEpB,OA/DEe,OAAAC,eAAIukB,EAAAtjB,UAAA,OAAI,KAAR,WAEE,IADA,IAAIyjB,EAAmB1lB,OACpB,IAAK0lB,EAAUA,EAAQzR,QAAQuC,MAAQ5F,EAAYkU,KAAM,OAAaY,mCAK3EH,EAAAtjB,UAAAid,GAAA,SAAGoB,GAA2B,OAAQtgB,KAAK+S,MAAQuN,IAASA,GAE5DiF,EAAAtjB,UAAAuf,MAAA,SAAMzO,GAA4B,OAA+B,IAAvB/S,KAAK+S,MAAQA,IAEvDwS,EAAAtjB,UAAAiQ,IAAA,SAAIoO,GAA2BtgB,KAAK+S,OAASuN,GAE7CiF,EAAAtjB,UAAA0jB,MAAA,SAAMrF,GAA0BtgB,KAAK+S,QAAUuN,GAE/CiF,EAAAtjB,UAAAkZ,aAAA,SAAamF,GAA8B,OAAQtgB,KAAKkU,eAAiBoM,IAASA,GAGlFiF,EAAAtjB,UAAAwX,aAAA,SAAa7Y,GACX,IAAI8d,EAAU1e,KAAK0e,QACnB,OAAIA,GAAWA,EAAQnK,IAAI3T,GAAc8d,EAAQxd,IAAIN,GAC9C,MAOT2kB,EAAAtjB,UAAA8S,IAAA,SAAInU,EAAc+X,GAChB,IAAIiN,EAAsBjN,EAAQrE,YAC9BoK,EAAU1e,KAAK0e,QACnB,GAAKA,GACA,GAAIA,EAAQnK,IAAI3T,GAAO,CAC1B,IAAIilB,EAASnH,EAAQxd,IAAIN,GACzB,GAAIilB,EAAO5R,SAAWjU,UAEf,CACL,IAAI0f,EAASC,EAASkG,EAAQlN,GAC9B,IAAI+G,EAOF,OAJA1f,KAAKwlB,QAAQrY,MACXI,EAAAhD,eAAeqV,uBACfjH,EAAQ2C,eAAezQ,MAAO8N,EAAQ2C,eAAevP,OAEhD,EANP4M,EAAU+G,SARF1f,KAAK0e,QAAUA,EAAU,IAAIxX,IAkB3CwX,EAAQxM,IAAItR,EAAM+X,GAClB,IAAI6M,EAAUxlB,KAAKwlB,QAMnB,OALI7M,EAAQnC,MAAQ5F,EAAYgN,oBAA2CjF,EAASmN,UAElFN,EAAQnU,eAAea,IAAIyG,EAAQxG,aAAcwG,GACjD6M,EAAQlU,sBAAsBY,IAAI0T,EAAqBjN,KAElD,GAIT4M,EAAAtjB,UAAAuJ,SAAA,WACE,OAAOoF,EAAY5Q,KAAKwW,MAAQ,IAAMxW,KAAKmS,cAE/CoT,EArGA,GAAsB7lB,EAAA6lB,UAwGtB,IAAA3L,EAAA,SAAA7I,GAGE,SAAA6I,EAEEpD,EAEA5V,EAEAuR,EAEAqT,EAEAvR,EAEOK,GAZT,IAAAtD,EAcED,EAAAvQ,KAAAR,KAAMwW,EAAM5V,EAAMuR,EAAcqT,EAASvR,IAAOjU,YAFzCgR,EAAAsD,cASPtD,EAAKsD,YAAcA,EACnBtD,EAAK+B,MAAQuB,EAAYvB,QAiB7B,OA1C8CT,EAAAsH,EAAA7I,GA6B5ChQ,OAAAC,eAAI4Y,EAAA3X,UAAA,sBAAmB,KAAvB,WACE,OAAOjC,KAAKsU,YAAYzJ,MAAMY,OAAOgV,2CAIvC1f,OAAAC,eAAI4Y,EAAA3X,UAAA,iBAAc,KAAlB,WACE,OAAOjC,KAAKsU,YAAY1T,sCAI1BG,OAAAC,eAAI4Y,EAAA3X,UAAA,iBAAc,KAAlB,WACE,OAAOjC,KAAKsU,YAAY6L,4CAE5BvG,EA1CA,CAA8C2L,GAAxB7lB,EAAAka,kBA6CtB,IAAAmM,EAAA,SAAAhV,GAAA,SAAAgV,IAAA,IAAA/U,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YAGEgR,EAAA6N,KAAarR,EAAAmH,KAAKG,OAQpB,OAX2CxC,EAAAyT,EAAAhV,GAMzCgV,EAAA9jB,UAAA6c,QAAA,SAAQD,GACN3U,QAAQlK,KAAKkf,GAAG5R,EAAAjL,YAAY4jB,WAC5BjmB,KAAK6e,KAAOA,EACZ7e,KAAKkS,IAAI5E,EAAAjL,YAAY4jB,WAEzBF,EAXA,CAA2CnM,GAArBla,EAAAqmB,eActB,IAAA9T,EAAA,SAAAlB,GAUE,SAAAkB,EAEEuT,EAEO/Z,GAJT,IAAAuF,EAMED,EAAAvQ,KAAAR,KACE4Q,EAAYkU,KACZrZ,EAAOC,eACPD,EAAOwY,aACPuB,EACA,OACDxlB,KARMgR,EAAAvF,SAXTuF,EAAAtR,QAA8C,KAE9CsR,EAAAoH,YAA6B,KAkB3BpH,EAAKvF,OAASA,EACdvB,QAAQsb,EAAQpU,YAAYmD,IAAIvD,EAAKmB,eACrCqT,EAAQpU,YAAYc,IAAIlB,EAAKmB,aAAcnB,GAC3C,IAAIkV,EAAgBlV,EAAKwU,QAAQzR,mBAC/B,SAAW/C,EAAKmB,aAChB,IAAI3E,EAAA2Y,UAAU,KAAM3Y,EAAAmH,KAAKG,MACzB9D,UAEFkV,EAAc/T,aAAe+T,EAActlB,KAC3CoQ,EAAKkV,cAAgBA,IAoFzB,OApH0B5T,EAAAL,EAAAlB,GAoCxBkB,EAAAhQ,UAAA8S,IAAA,SAAInU,EAAc+X,EAA0ByN,GAI1C,YAJ0C,IAAAA,OAAA,GACtCzN,EAAQwC,aAAatK,EAAegQ,UACtClI,EAAU3Y,KAAKwlB,QAAQ/F,aAAa7e,EAAM+X,MAEvC5H,EAAA9O,UAAM8S,IAAGvU,KAAAR,KAACY,EAAM+X,MACrBA,EAAUzO,OAAOlK,KAAKyZ,aAAa7Y,KACvBse,GAAG5R,EAAAjL,YAAY4S,UAAYmR,GACrCpmB,KAAKwZ,aACHb,EAAQ/X,KACR+X,IAGG,IAIT1G,EAAAhQ,UAAAwX,aAAA,SAAa7Y,GACX,IAAI+X,EAAU5H,EAAA9O,UAAMwX,aAAYjZ,KAAAR,KAACY,GACjC,GAAI+X,EAAS,OAAOA,EACpB,IAAIP,EAAcpY,KAAKoY,YACvB,GAAIA,EACF,IAAK,IAAI/X,EAAI,EAAG8V,EAAIiC,EAAYnM,OAAQ5L,EAAI8V,IAAK9V,EAC/C,GAAIsY,EAAUP,EAAY/X,GAAGoZ,aAAa7Y,GAAO,OAAO+X,EAG5D,OAAO,MAIT1G,EAAAhQ,UAAAokB,OAAA,SAAOzlB,GACL,IAAI+X,EAAU3Y,KAAKyZ,aAAa7Y,GAChC,OAAI+X,GACG3Y,KAAKwlB,QAAQ7L,aAAa/Y,IAInCqR,EAAAhQ,UAAAuX,aAAA,SAAa5Y,EAAc+X,GACzB,IAAIjZ,EAAUM,KAAKN,QACdA,IAASM,KAAKN,QAAUA,EAAU,IAAIwH,KAC3CxH,EAAQwS,IAAItR,EAAM+X,GACd3Y,KAAKyL,OAAOgV,WAAWzgB,KAAKwlB,QAAQ/F,aAAa7e,EAAM+X,IAI7D1G,EAAAhQ,UAAAuW,iBAAA,SAAiBpC,GACf,IAAIgC,EAAcpY,KAAKoY,YACvB,GAAKA,GACA,GAAIA,EAAYkO,SAASlQ,GAAO,YADnBpW,KAAKoY,YAAcA,EAAc,GAEnDA,EAAY5L,KAAK4J,IAInBnE,EAAAhQ,UAAA+d,aAAA,SAAapf,GACX,IAAIlB,EAAUM,KAAKN,QACnB,GAAIA,GAAWA,EAAQ6U,IAAI3T,GAAO,OAAOlB,EAAQwB,IAAIN,GACrD,IAAIwX,EAAcpY,KAAKoY,YACvB,GAAIA,EACF,IAAK,IAAI/X,EAAI,EAAG8V,EAAIiC,EAAYnM,OAAQ5L,EAAI8V,IAAK9V,EAAG,CAClD,IAAIsY,EAAUP,EAAY/X,GAAG2f,aAAapf,GAC1C,GAAI+X,EAAS,OAAOA,EAGxB,OAAO,MAIT1G,EAAAhQ,UAAA8W,oBAAA,SAAoBnY,EAAcqT,WAC5BvS,EAAK,IAAI0jB,EACXxkB,EACAqT,EACAjU,KAAKwlB,QAAQ3R,+BAA+BjT,IAE1ClB,EAAUM,KAAKN,QACnB,GAAIA,MACF,IAAiC,IAAA6mB,EAAAzO,EAAApY,GAAO8mB,EAAAD,EAAAvO,QAAAwO,EAAAvO,KAAAuO,EAAAD,EAAAvO,OAAE,CAAjC,IAAAyO,EAAAtO,EAAAqO,EAAAllB,MAAA,GAAColB,EAAAD,EAAA,GAAYvI,EAAAuI,EAAA,GACpB/kB,EAAGqT,IAAI2R,EAAYxI,qGAGvB,OAAOxc,GAEXuQ,EApHA,CAA0BsT,GAAb7lB,EAAAuS,OAuHb,IAAA+C,EAAA,SAAAjE,GAGE,SAAAiE,EAEEpU,EAEAqT,EAEAK,EAEAJ,QAAA,IAAAA,MAAiCrD,EAAemC,MARlD,IAAAhC,EAUED,EAAAvQ,KAAAR,KACE4Q,EAAY+V,eACZ/lB,EACAgmB,EAAmBhmB,EAAMqT,GAAQ,GACjCA,EAAOuR,QACPvR,EACAK,IACDtU,YACDgR,EAAKkD,eAAiBA,IAiB1B,OAtCoC5B,EAAA0C,EAAAjE,GAyBlChQ,OAAAC,eAAIgU,EAAA/S,UAAA,qBAAkB,KAAtB,WACE,OAAyBjC,KAAKsU,YAAauS,gDAI7C9lB,OAAAC,eAAIgU,EAAA/S,UAAA,WAAQ,KAAZ,WACE,OAAyBjC,KAAKsU,YAAauK,sCAI7C7J,EAAA/S,UAAAokB,OAAA,SAAOzlB,GACL,OAAOZ,KAAKiU,OAAOoS,OAAOzlB,IAE9BoU,EAtCA,CAAoC+Q,GAAvBrmB,EAAAsV,iBAyCb,IAAAoQ,EAAA,SAAArU,GAGE,SAAAqU,EAEExkB,EAEAqT,EAEAK,EAEAJ,QAAA,IAAAA,MAAiCrD,EAAemC,MARlD,IAAAhC,EAUED,EAAAvQ,KAAAR,KACE4Q,EAAYkW,UACZlmB,EACAgmB,EAAmBhmB,EAAMqT,GAAQ,GACjCA,EAAOuR,QACPvR,EACAK,IACDtU,YACDgR,EAAKkD,eAAiBA,IAQ1B,OA7B+B5B,EAAA8S,EAAArU,GAyB7BqU,EAAAnjB,UAAAokB,OAAA,SAAOzlB,GACL,OAAOZ,KAAKyZ,aAAa7Y,IAClBZ,KAAKiU,OAAOoS,OAAOzlB,IAE9BwkB,EA7BA,CAA+BxL,GAAlBla,EAAA0lB,YAgCb,IAAAvB,EAAA,SAAA9S,GAGE,SAAA8S,EAEEjjB,EAEAqT,EAEAK,EAEAJ,QAAA,IAAAA,MAAiCrD,EAAemC,MARlD,IAAAhC,EAUED,EAAAvQ,KAAAR,KACE4Q,EAAYmW,KACZnmB,EACAgmB,EAAmBhmB,EAAMqT,GAAQ,GACjCA,EAAOuR,QACPvR,EACAK,IACDtU,YACDgR,EAAKkD,eAAiBA,EACtBlD,EAAK8N,QAAQtR,EAAAmH,KAAKvR,OAQtB,OA9B0BkP,EAAAuR,EAAA9S,GA0BxB8S,EAAA5hB,UAAAokB,OAAA,SAAOzlB,GACL,OAAOZ,KAAKyZ,aAAa7Y,IAClBZ,KAAKiU,OAAOoS,OAAOzlB,IAE9BijB,EA9BA,CAA0BkC,GAAbrmB,EAAAmkB,OAiCb,SAAkBmD,GAEhBA,IAAA,eAEAA,IAAA,qBAEAA,IAAA,iBANF,CAAkBtnB,EAAAsnB,oBAAAtnB,EAAAsnB,kBAAiB,KAUnC,IAAAC,EAAA,SAAAlW,GAUE,SAAAkW,EAEEzQ,EAEA5V,EAEAqT,EAEAK,QAAA,IAAAA,MAAgDL,EAAOuR,QAAQ1S,8BAA8BlS,IAR/F,IAAAoQ,EAUED,EAAAvQ,KAAAR,KACEwW,EACA5V,EACAgmB,EAAmBhmB,EAAMqT,GAAQ,GACjCA,EAAOuR,QACPvR,EACAK,IACDtU,YAxBHgR,EAAAkW,kBAAiB,EAyBflW,EAAK+B,MAAQuB,EAAYvB,QAmC7B,OA/DkDT,EAAA2U,EAAAlW,GAgChDhQ,OAAAC,eAAIimB,EAAAhlB,UAAA,WAAQ,KAAZ,WACE,OAA0CjC,KAAKsU,YAAauK,sCAI9D9d,OAAAC,eAAIimB,EAAAhlB,UAAA,kBAAe,KAAnB,WACE,OAA0CjC,KAAKsU,YAAa6S,6CAI9DF,EAAAhlB,UAAAqd,wBAAA,SAAwBhe,EAAYud,GAClC3U,OAAO2U,EAAKK,GAAE,IACdlf,KAAK6e,KAAOA,EACZ7e,KAAKknB,kBAAiB,EACtBlnB,KAAKonB,qBAAuB9lB,EAC5BtB,KAAKkS,IAAI5E,EAAAjL,YAAYgd,MAAQ/R,EAAAjL,YAAYglB,QAAU/Z,EAAAjL,YAAY4jB,WAIjEgB,EAAAhlB,UAAAud,sBAAA,SAAsBle,EAAYud,GAChC3U,OAAO2U,EAAKK,GAAE,IACdlf,KAAK6e,KAAOA,EACZ7e,KAAKknB,kBAAiB,EACtBlnB,KAAKsnB,mBAAqBhmB,EAC1BtB,KAAKkS,IAAI5E,EAAAjL,YAAYgd,MAAQ/R,EAAAjL,YAAYglB,QAAU/Z,EAAAjL,YAAY4jB,WAIjEgB,EAAAhlB,UAAAokB,OAAA,SAAOzlB,GACL,OAAOZ,KAAKiU,OAAOoS,OAAOzlB,IAE9BqmB,EA/DA,CAAkDlB,GAA5BrmB,EAAAunB,sBAkEtB,IAAAlD,EAAA,SAAAhT,GAGE,SAAAgT,EAEEnjB,EAEAqT,EAEAK,EAEAJ,QAAA,IAAAA,MAAiCrD,EAAemC,MARlD,IAAAhC,EAUED,EAAAvQ,KAAAR,KACE4Q,EAAY2W,UACZ3mB,EACAqT,EACAK,IACDtU,YAMHgR,EAAAwW,aAAoB,EALlBxW,EAAKkD,eAAiBA,EACtBlD,EAAK8N,QAAQtR,EAAAmH,KAAKvR,OAetB,OAnC+BkP,EAAAyR,EAAAhT,GA2B7BhQ,OAAAC,eAAI+iB,EAAA9hB,UAAA,YAAS,KAAb,WACE,OAA8BjC,KAAKsU,YAAahT,uCAIlDyiB,EAAA9hB,UAAAokB,OAAA,SAAOzlB,GACL,OAAOZ,KAAKiU,OAAOoS,OAAOzlB,IAE9BmjB,EAnCA,CAA+BkD,GAAlBvnB,EAAAqkB,YAsCb,IAAA3E,EAAA,SAAArO,GAGE,SAAAqO,EAEExe,EAEAqT,EAEAC,EAEAI,QAAA,IAAAA,MAAgDL,EAAOuR,QAAQ1S,8BAA8BlS,IAR/F,IAAAoQ,EAUED,EAAAvQ,KAAAR,KACE4Q,EAAYiQ,OACZjgB,EACAqT,EACAK,IACDtU,YACDgR,EAAKkD,eAAiBA,IAE1B,OArB4B5B,EAAA8M,EAAArO,GAqB5BqO,EArBA,CAA4B6H,GAAfvnB,EAAA0f,SAwBb,IAAAqI,EAAA,WAUA,OARE,SAES7mB,EAEAie,EAEAsI,QAAA,IAAAA,MAAA,MAJAnnB,KAAAY,OAEAZ,KAAA6e,OAEA7e,KAAAmnB,eARX,GAAaznB,EAAA+nB,YAab,IAAAC,EAAA,SAAA3W,GAGE,SAAA2W,EAEE9mB,EAEO+mB,EAEP9I,EAEA5K,EAEAK,QAAA,IAAAA,MAAgDL,EAAOuR,QAAQ1S,8BAA8BlS,IAV/F,IAAAoQ,EAYED,EAAAvQ,KAAAR,KACE4Q,EAAYgX,MACZhnB,EACAqT,EACAK,IACDtU,YAbMgR,EAAA2W,QAcP3W,EAAK2W,MAAQA,EACbzd,OAAO2U,GAAQrR,EAAAmH,KAAKG,MACpB9D,EAAK8N,QAAQD,KAEjB,OAzB2BvM,EAAAoV,EAAA3W,GAyB3B2W,EAzBA,CAA2BT,GAAdvnB,EAAAgoB,QA4Bb,IAAAtT,EAAA,SAAArD,GAWE,SAAAqD,EAEExT,EAEAqT,EAEAK,EAEAJ,QAAA,IAAAA,MAAiCrD,EAAemC,MARlD,IAAAhC,EAUED,EAAAvQ,KAAAR,KACE4Q,EAAYgN,mBACZhd,EACAgmB,EAAmBhmB,EAAMqT,EAAQK,EAAY4K,GAAG5R,EAAAjL,YAAYwiB,WAC5D5Q,EAAOuR,QACPvR,EACAK,IACDtU,YAzBHgR,EAAAqS,aAA6BhW,EAAasD,QAE1CK,EAAA6W,UAAyC,KAGjC7W,EAAA8W,gBAAuD,KAqB7D9W,EAAKkD,eAAiBA,IAsE1B,OAnGuC5B,EAAA8B,EAAArD,GAiCrChQ,OAAAC,eAAIoT,EAAAnS,UAAA,qBAAkB,KAAtB,WACE,OAA6BjC,KAAKsU,YAAauS,gDAIjD9lB,OAAAC,eAAIoT,EAAAnS,UAAA,gBAAa,KAAjB,WACE,OAA6BjC,KAAKsU,YAAaN,2CAIjDjT,OAAAC,eAAIoT,EAAAnS,UAAA,WAAQ,KAAZ,WACE,OAA6BjC,KAAKsU,YAAayT,sCAIjDhnB,OAAAC,eAAIoT,EAAAnS,UAAA,YAAS,KAAb,WACE,OAA6BjC,KAAKsU,YAAa0T,2CAIjDjnB,OAAAC,eAAIoT,EAAAnS,UAAA,UAAO,KAAX,WACE,IAAIgS,EAASjU,KAAKiU,OAClB,OAAOA,EAAOuC,MAAQ5F,EAAY6N,OAC3BxK,EAAOuC,MAAQ5F,EAAYuN,oBAAsBlK,EAAOA,OAAOuC,MAAQ5F,EAAY6N,uCAI5FrK,EAAAnS,UAAAgmB,QAAA,SAAQvV,GACNxI,OAAOlK,KAAKkf,GAAG5R,EAAAjL,YAAYwiB,WAC3B3a,QAAQlK,KAAK8lB,SACb,IAAIgC,EAAkB9nB,KAAK8nB,gBAC3B,GAAKA,GACA,GAAIA,EAAgBvT,IAAI7B,GAAgB,OAAOoV,EAAgB5mB,IAAIwR,QADlD1S,KAAK8nB,gBAAkBA,EAAkB,IAAI5gB,IAEnE,IAAIoN,EAActU,KAAKsU,YAAapK,OAAOoK,EAAYkC,MAAQ/I,EAAAgJ,SAAS8K,mBACxE,IAAI2G,EAAQ,IAAI9T,EACdpU,KAAKY,KACL8R,EACmB4B,EACnBtU,KAAKkU,gBAMP,OAJAgU,EAAMnV,MAAQ/S,KAAK+S,MACnBmV,EAAM7E,aAAerjB,KAAKqjB,aAE1ByE,EAAgB5V,IAAIQ,EAAewV,GAC5BA,GAIT9T,EAAAnS,UAAAkmB,oBAAA,SAAoBC,GAClB,IAAIP,EAAY7nB,KAAK6nB,UACrB,OAAIA,GAAaA,EAAUtT,IAAI6T,GAA+BP,EAAU3mB,IAAIknB,GACrE,MAIThU,EAAAnS,UAAAomB,oBAAA,SAAoBD,EAAqBE,GACvC,IAAIT,EAAY7nB,KAAK6nB,UAChBA,EACA3d,QAAQ2d,EAAUtT,IAAI6T,IADXpoB,KAAK6nB,UAAYA,EAAY,IAAI3gB,IAEjD2gB,EAAU3V,IAAIkW,EAAaE,IAI7BlU,EAAAnS,UAAAokB,OAAA,SAAOzlB,GACL,OAAOZ,KAAKiU,OAAOoS,OAAOzlB,IAE9BwT,EAnGA,CAAuCwF,GAA1Bla,EAAA0U,oBAsGb,IAAAD,EAAA,SAAApD,GAiCE,SAAAoD,EAEEoU,EAEAtmB,EAEA+R,EAEAwU,QAAA,IAAAA,MAAA,MARF,IAAAxX,EAUED,EAAAvQ,KAAAR,KACE4Q,EAAY2N,SACZgK,EACA3B,EAAmB2B,EAAwBtmB,EAAUgS,OAAQhS,EAAUid,GAAG5R,EAAAjL,YAAYwiB,WACtF5iB,EAAUujB,QACVvjB,EAAUgS,OACVhS,EAAUqS,cACXtU,KAOD,GAlDFgR,EAAAyX,aAAkC,IAAIvhB,IAEtC8J,EAAA0X,cAAyB,GAEzB1X,EAAA2X,iBAA2B,GAM3B3X,EAAA4X,eAA0B,GAE1B5X,EAAA6X,IAAmB,EAEnB7X,EAAA8X,oBAA2B,EAE3B9X,EAAA+X,WAA8B,KAG9B/X,EAAAgY,aAAoB,EAEpBhY,EAAAiY,gBAAuB,EAEvBjY,EAAAkY,kBAAyB,EAyFzBlY,EAAAmY,SAA2B,KAC3BnY,EAAAoY,SAA2B,KAC3BpY,EAAAqY,SAA2B,KAC3BrY,EAAAsY,SAA2B,KAC3BtY,EAAAuY,UAA4B,KAG5BvY,EAAAwY,YAAmB,EACnBxY,EAAAyY,WAA2B,KAC3BzY,EAAA0Y,WAA4B,KA7E1B1Y,EAAK/O,UAAYA,EACjB+O,EAAKgD,UAAYA,EACjBhD,EAAK+B,MAAQ9Q,EAAU8Q,MAAQzF,EAAAjL,YAAY4jB,SAC3CjV,EAAKkD,eAAiBjS,EAAUiS,eAChClD,EAAKwX,wBAA0BA,EAC/BxX,EAAK6N,KAAOrR,EAAAmH,KAAKlR,IAAIkmB,WAAW3V,IAC3B/R,EAAUid,GAAG5R,EAAAjL,YAAYsiB,SAAU,CACtC,IAAIiF,EAAa,EACjB,GAAI5Y,EAAKkO,GAAG5R,EAAAjL,YAAYwiB,UAAW,CACjC,IAAIgF,EAAQ,IAAInC,EACdpa,EAAAtK,cAAckC,MACd0kB,IACA1f,OAAO8J,EAAU8V,UACjB9Y,GAEFA,EAAKyX,aAAavW,IAAI5E,EAAAtK,cAAckC,MAAO2kB,GAC3C7Y,EAAK0X,cAAcmB,EAAMlC,OAASkC,EAGpC,IADA,IAAIE,EAAiB/V,EAAU+V,eACtB1pB,EAAI,EAAG8V,EAAI4T,EAAe9d,OAAQ5L,EAAI8V,IAAK9V,EAAG,CACrD,IAAI2pB,EAAgBD,EAAe1pB,GAC/B4pB,EAAgBjW,EAAUkW,iBAAiB7pB,GAC3CwpB,EAAQ,IAAInC,EACduC,EACAL,IACAI,EACAhZ,GAEFA,EAAKyX,aAAavW,IAAI+X,EAAeJ,GACrC7Y,EAAK0X,cAAcmB,EAAMlC,OAASkC,UAGtC7Y,EAAKmZ,KAAOxc,EAAAyc,KAAKzoB,OAAOqP,GACxBqZ,EAAwBrZ,EAAKwU,QAASxU,KAmE1C,OAvJ8BsB,EAAA6B,EAAApD,GAwF5BoD,EAAAlS,UAAAqoB,SAAA,SAASzL,EAAYje,EAA4B0T,QAA5B,IAAA1T,MAAA,WAA4B,IAAA0T,MAAA,MAE/C,IAAIsV,EAAa5pB,KAAKgU,UAAU+V,eAAe9d,OAASjM,KAAK2oB,iBAAiB1c,OAC1EjM,KAAKkf,GAAG5R,EAAAjL,YAAYwiB,aAAa+E,EACrC,IAAI9Q,EAAqB,OAATlY,EACZA,EACA,OAASgpB,EAAWpe,WACpBqe,EAAQ,IAAInC,EACd5O,EACA8Q,EACA/K,EACA7e,KACAsU,GAAetU,KAAKwlB,QAAQ1S,8BAA8BgG,IAE5D,GAAIlY,EAAM,CACR,GAAIZ,KAAKyoB,aAAalU,IAAI3T,GAAO,MAAM,IAAIsb,MAAM,wBACjDlc,KAAKyoB,aAAavW,IAAItR,EAAMipB,GAI9B,OAFA7pB,KAAK0oB,cAAcmB,EAAMlC,OAASkC,EAClC7pB,KAAK2oB,iBAAiBnc,KAAKqS,GACpBgL,GAIT1V,EAAAlS,UAAAokB,OAAA,SAAOzlB,GACL,IAAI2pB,EAASvqB,KAAKyoB,aAClB,OAAI8B,EAAOhW,IAAI3T,GAAc2pB,EAAOrpB,IAAIN,GACjCZ,KAAKiU,OAAOoS,OAAOzlB,IAgB5BuT,EAAAlS,UAAAuoB,SAAA,SAAS7qB,EAAgBkpB,GAMvB,GALA7oB,KAAK6oB,IAAMA,EACX3e,QAAQlK,KAAKypB,aAAezpB,KAAKypB,WAAWxd,QAC5CjM,KAAKypB,WAAa,KAClBzpB,KAAK0pB,WAAa,KAClB1pB,KAAKmpB,SAAWnpB,KAAKopB,SAAWppB,KAAKqpB,SAAWrpB,KAAKspB,SAAW,KAC5DtpB,KAAKwlB,QAAQ/Q,QAAQgW,UAEvB,IADA,IAAI7B,EAAiB5oB,KAAK4oB,eACjBvoB,EAAI,EAAG8V,EAAIyS,EAAe3c,OAAQ5L,EAAI8V,IAAK9V,EAAG,CACrD,IAAIqqB,EAAgB9B,EAAevoB,GACnCV,EAAOgrB,iBACL9B,EACA6B,EAAcE,aACdF,EAAcjf,OAAOof,eACrBH,EAAc/e,KACd+e,EAAc9e,UAKxBuI,EAvJA,CAA8B4R,GAAjBrmB,EAAAyU,WA0Jb,IAAA2W,EAAA,SAAA/Z,GAQE,SAAA+Z,EAEE9W,EAEAwR,EACAuF,QAAA,IAAAA,MAAA,IALF,IAAA/Z,EAOED,EAAAvQ,KAAAR,KACE4Q,EAAYoa,gBACZD,EAAM,OAAS/W,EAAUiX,oBACzBF,EACAvF,EACAA,EAAQxT,aACThS,YACDgR,EAAKgD,UAAYA,EACjBhD,EAAK+B,MAAQzF,EAAAjL,YAAY4jB,SACzBjV,EAAK6N,KAAOrR,EAAAmH,KAAKlR,IAAIkmB,WAAW3V,KAOpC,OA/BoC1B,EAAAwY,EAAA/Z,GA4BlC+Z,EAAA7oB,UAAAokB,OAAA,SAAOzlB,GACL,OAAO,MAEXkqB,EA/BA,CAAoCvF,GAAvB7lB,EAAAorB,iBAkCb,IAAAzI,EAAA,SAAAtR,GAGE,SAAAsR,EAEEzhB,EAEAqT,EAEAK,EAEAJ,QAAA,IAAAA,MAAiCrD,EAAemC,MARlD,IAAAhC,EAUED,EAAAvQ,KAAAR,KACE4Q,EAAYsa,gBACZtqB,EACAgmB,EAAmBhmB,EAAMqT,EAAQ/J,OAAOoK,EAAY4K,GAAG5R,EAAAjL,YAAYwiB,YACnE5Q,EAAOuR,QACPvR,EACAK,IACDtU,YACDgR,EAAKkD,eAAiBA,IAsB1B,OA3CoC5B,EAAA+P,EAAAtR,GAyBlChQ,OAAAC,eAAIqhB,EAAApgB,UAAA,WAAQ,KAAZ,WACE,OAA0BjC,KAAKsU,YAAauK,sCAI9C9d,OAAAC,eAAIqhB,EAAApgB,UAAA,kBAAe,KAAnB,WACE,OAA0BjC,KAAKsU,YAAa6S,6CAI9CpmB,OAAAC,eAAIqhB,EAAApgB,UAAA,iBAAc,KAAlB,WACE,OAA0BjC,KAAKsU,YAAa6W,gDAI9C9I,EAAApgB,UAAAokB,OAAA,SAAOzlB,GACL,OAAOZ,KAAKiU,OAAOoS,OAAOzlB,IAE9ByhB,EA3CA,CAAoCzI,GAAvBla,EAAA2iB,iBA8Cb,IAAA+I,EAAA,SAAAra,GAQE,SAAAqa,EAEEnpB,EAEAgS,EAEA4K,GANF,IAAA7N,EAQED,EAAAvQ,KAAAR,KACE4Q,EAAY4N,MACZvc,EAAUrB,KACVqT,EACkChS,EAAUqS,cAC7CtU,YAhBHgR,EAAAqa,cAAqB,EAiBnBra,EAAK/O,UAAYA,EACjB+O,EAAK+B,MAAQ9Q,EAAU8Q,MACvB7I,OAAO2U,GAAQrR,EAAAmH,KAAKG,MACpB9D,EAAK8N,QAAQD,GACbwL,EAAwBrZ,EAAKwU,QAASxU,KAE1C,OA5B2BsB,EAAA8Y,EAAAra,GA4B3Bqa,EA5BA,CAA2BnE,GAAdvnB,EAAA0rB,QA+Bb,IAAA1H,EAAA,SAAA3S,GAQE,SAAA2S,EAEE9iB,EAEAqT,EAEAqX,GANF,IAAAta,EAQED,EAAAvQ,KAAAR,KACE4Q,EAAYuN,mBACZvd,EACAgmB,EAAmBhmB,EAAMqT,EAAQqX,EAAiBpM,GAAG5R,EAAAjL,YAAYwiB,WACjE5Q,EAAOuR,QACPvR,EACAqX,IACDtrB,YApBHgR,EAAAoN,gBAA4C,KAE5CpN,EAAAqN,gBAA4C,KAmB1CrN,EAAK+B,SAAWzF,EAAAjL,YAAYof,IAAMnU,EAAAjL,YAAYqf,OAOlD,OA/BuCpP,EAAAoR,EAAA3S,GA4BrC2S,EAAAzhB,UAAAokB,OAAA,SAAOzlB,GACL,OAAOZ,KAAKiU,OAAOoS,OAAOzlB,IAE9B8iB,EA/BA,CAAuC9J,GAA1Bla,EAAAgkB,oBAkCb,IAAA6H,EAAA,SAAAxa,GAUE,SAAAwa,EAEEtpB,EAEAgS,GAJF,IAAAjD,EAMED,EAAAvQ,KAAAR,KACE4Q,EAAY0N,SACZrc,EAAUrB,KACVqT,EACAhS,EAAUujB,QAAQ1S,8BAChB7Q,EAAUrB,KACVqB,EAAUid,GAAG5R,EAAAjL,YAAYwiB,UACrBvX,EAAAjL,YAAYwiB,SACZvX,EAAAjL,YAAY2Q,QAEnBhT,YArBHgR,EAAAwa,eAAkC,KAElCxa,EAAAya,eAAkC,KAoBhCza,EAAK/O,UAAYA,EACjBooB,EAAwBrZ,EAAKwU,QAASxU,KAO1C,OAnC8BsB,EAAAiZ,EAAAxa,GAgC5Bwa,EAAAtpB,UAAAokB,OAAA,SAAOzlB,GACL,OAAOZ,KAAKiU,OAAOoS,OAAOzlB,IAE9B2qB,EAnCA,CAA8BtE,GAAjBvnB,EAAA6rB,WAsCb,IA4GWG,EA5GX9K,EAAA,SAAA7P,GAaE,SAAA6P,EAEEhgB,EAEAqT,EAEAK,EAEAJ,EACAyX,QADA,IAAAzX,MAAiCrD,EAAemC,WAChD,IAAA2Y,OAAA,GATF,IAAA3a,EAWED,EAAAvQ,KAAAR,KACE2rB,EAAe/a,EAAYmR,oBAAsBnR,EAAYuJ,gBAC7DvZ,EACAgmB,EAAmBhmB,EAAMqT,EAAQK,EAAY4K,GAAG5R,EAAAjL,YAAYwiB,WAC5D5Q,EAAOuR,QACPvR,EACAK,IACDtU,YA5BHgR,EAAA+M,gBAA8C,KAE9C/M,EAAAkK,cAAuC,KAEvClK,EAAA4a,qBAAiD,KAEjD5a,EAAAmS,mBAA2D,IAAIjc,IAE/D8J,EAAA6W,UAAsC,KAqBpC7W,EAAKkD,eAAiBA,IA0E1B,OA1GoC5B,EAAAsO,EAAA7P,GAoClChQ,OAAAC,eAAI4f,EAAA3e,UAAA,qBAAkB,KAAtB,WACE,OAA0BjC,KAAKsU,YAAauS,gDAG9C9lB,OAAAC,eAAI4f,EAAA3e,UAAA,cAAW,KAAf,WACE,OAA0BjC,KAAKsU,YAAa4M,6CAG9CngB,OAAAC,eAAI4f,EAAA3e,UAAA,kBAAe,KAAnB,WACE,OAA0BjC,KAAKsU,YAAawM,iDAI9C/f,OAAAC,eAAI4f,EAAA3e,UAAA,iBAAc,KAAlB,WACE,IAAI+X,EAA0Bha,KAAKwlB,QAAQxL,wBAC3C,OAAmC,OAA5BA,GACAha,KAAK6rB,QAAQ7R,EAAwB/X,4CAI9C2e,EAAA3e,UAAA4pB,QAAA,SAAQC,GACN,IAAIpG,EAAiC1lB,KACrC,GAAG,GAAI0lB,IAAYoG,EAAe,OAAO,QAClCpG,EAAUA,EAAQxK,eACzB,OAAO,GAIT0F,EAAA3e,UAAAqgB,YAAA,SAAY1hB,EAAc+X,GACxB,IAAIiN,EAAsBjN,EAAQrE,YAC9ByJ,EAAkB/d,KAAK+d,gBAC3B,GAAKA,GACA,GAAIA,EAAgBxJ,IAAI3T,GAAO,CAClC,IAAI8e,EAASC,EAAS5B,EAAgB7c,IAAIN,GAAQ+X,GAClD,IAAK+G,EAKH,OAJA1f,KAAKwlB,QAAQrY,MACXI,EAAAhD,eAAeqV,uBACfjH,EAAQ2C,eAAezQ,MAAO8N,EAAQ2C,eAAevP,OAEhD,EAET4M,EAAU+G,QAVU1f,KAAK+d,gBAAkBA,EAAkB,IAAI7W,IAiBnE,OALA6W,EAAgB7L,IAAItR,EAAM+X,GACtBA,EAAQuG,GAAG5R,EAAAjL,YAAY4S,SAAWjV,KAAKkf,GAAG5R,EAAAjL,YAAYyb,gBACxDnF,EAAQzG,IAAI5E,EAAAjL,YAAYyb,eAE1B9d,KAAKwlB,QAAQlU,sBAAsBY,IAAI0T,EAAqBjN,IACrD,GAITiI,EAAA3e,UAAAkmB,oBAAA,SAAoBC,GAClB,IAAIP,EAAY7nB,KAAK6nB,UACrB,OAAIA,GAAaA,EAAUtT,IAAI6T,GAA4BP,EAAU3mB,IAAIknB,GAClE,MAITxH,EAAA3e,UAAAomB,oBAAA,SAAoBD,EAAqBE,GACvC,IAAIT,EAAY7nB,KAAK6nB,UAChBA,EACA3d,QAAQ2d,EAAUtT,IAAI6T,IADXpoB,KAAK6nB,UAAYA,EAAY,IAAI3gB,IAEjD2gB,EAAU3V,IAAIkW,EAAaE,IAI7B1H,EAAA3e,UAAAokB,OAAA,SAAOzlB,GACL,OAAOZ,KAAKiU,OAAOoS,OAAOzlB,IAE9BggB,EA1GA,CAAoChH,GAAvBla,EAAAkhB,iBA4Gb,SAAW8K,GACTA,IAAA,qBACAA,IAAA,qBACAA,IAAA,6BAHF,CAAWA,MAAY,KAOvB,IAAAK,EAAA,SAAAhb,GAkDE,SAAAgb,EAEExD,EAEAtmB,EAEA+pB,EAEAC,EACAN,gBAHA,IAAAK,MAAA,WAEA,IAAAC,MAAA,WACA,IAAAN,OAAA,GATF,IAAA3a,EAWED,EAAAvQ,KAAAR,KACE2rB,EAAe/a,EAAYsb,UAAYtb,EAAY6N,MACnD8J,EACA3B,EAAmB2B,EAAwBtmB,EAAUgS,OAAQhS,EAAUid,GAAG5R,EAAAjL,YAAYwiB,WACtF5iB,EAAUujB,QACVvjB,EAAUgS,OACVhS,EAAUqS,cACXtU,KA3DHgR,EAAAwX,wBAAmD,KAEnDxX,EAAAmb,oBAA2B,EAE3Bnb,EAAAob,oBAAuC,KAEvCpb,EAAAkS,UAA+C,KAEvClS,EAAAqb,IAAW,EAEXrb,EAAAsb,SAAQ,EAEhBtb,EAAAub,UAAiB,EAgDf,IAAI/G,EAAUxU,EAAKwU,QAQnB,GAPAxU,EAAK/O,UAAYA,EACjB+O,EAAK+B,MAAQ9Q,EAAU8Q,MACvB/B,EAAKkD,eAAiBjS,EAAUiS,eAChClD,EAAKgb,cAAgBA,EACrBhb,EAAK8N,QAAQ0G,EAAQ/Q,QAAQI,UAAU2X,QAAQxb,IAC/CA,EAAKib,KAAOA,GAEPjb,EAAKmK,aAAatK,EAAe0K,WAAY,CAChD,IAAI1I,EAAK2S,EAAQ9T,cACjBV,EAAKqb,IAAMxZ,EACX2S,EAAQ/T,eAAeS,IAAIW,EAAI7B,GAIjC,GAAIib,EAAM,CACR,IAAIQ,EAAyBR,EAAKzD,wBAClC,GAAIiE,EAAwB,CAC1B,IAAIjE,EAA0BxX,EAAKwX,4BACnC,IAAiC,IAAAkE,EAAA5U,EAAA2U,GAAsBE,EAAAD,EAAA1U,QAAA2U,EAAA1U,KAAA0U,EAAAD,EAAA1U,OAAE,CAAhD,IAAAyO,EAAAtO,EAAAwU,EAAArrB,MAAA,GAACsrB,EAAAnG,EAAA,GAAUoG,EAAApG,EAAA,GACb+B,IAAyBxX,EAAKwX,wBAA0BA,EAA0B,IAAIthB,KAC3FshB,EAAwBtW,IAAI0a,EAAUC,uGAM5C,IAAIhG,EAAiB5kB,EAAU6qB,mBAC/B,GAAId,EAAe,CACjB,IAAIe,EAAmBf,EAAc/f,OACrC,IAAK4a,GAAkBkG,GAAoBlG,EAAe5a,OACxD,MAAM,IAAIiQ,MAAM,gCAElB,GAAI6Q,EAAkB,CACf/b,EAAKwX,0BAAyBxX,EAAKwX,wBAA0B,IAAIthB,KACtE,IAAK,IAAI7G,EAAI,EAAGA,EAAI0sB,IAAoB1sB,EACtC2Q,EAAKwX,wBAAwBtW,IAAI2U,EAAexmB,GAAGO,KAAKmL,KAAMigB,EAAc3rB,UAG3E,GAAIwmB,GAAkBA,EAAe5a,OAC1C,MAAM,IAAIiQ,MAAM,uCAElBmO,EAAwB7E,EAASxU,KA+NrC,OA9U2BsB,EAAAyZ,EAAAhb,GAwBzBhQ,OAAAC,eAAI+qB,EAAA9pB,UAAA,KAAE,KAAN,WACE,OAAOjC,KAAKqsB,qCAIdtrB,OAAAC,eAAI+qB,EAAA9pB,UAAA,iBAAc,KAAlB,WACE,OAAOjC,KAAKiC,UAAU+qB,gDAIxBjsB,OAAAC,eAAI+qB,EAAA9pB,UAAA,cAAW,KAAf,WACE,GAAIjC,KAAKgtB,eAAgB,OAAO,EAChC,IAAIC,EAAcjtB,KAAKyZ,aAAa,UACpC,OAAuB,OAAhBwT,IACLA,EAAYzW,MAAQ5F,EAAY4N,OAE9ByO,EAAYzW,MAAQ5F,EAAY0N,UACW,OAAhC2O,EAAazB,kBAGwB,OAAlDxrB,KAAKktB,eAAe7f,EAAasB,cAC2B,OAA5D3O,KAAKktB,eAAe7f,EAAawB,yDAsErCkd,EAAA9pB,UAAAkrB,eAAA,SAAeC,GACb,IAAI1H,EAAwB1lB,KAC5B,GAAG,GAAI0lB,GAAW0H,EAAQ,OAAO,QAC1B1H,EAAUA,EAAQuG,MACzB,OAAO,GAITF,EAAA9pB,UAAAirB,eAAA,SAAe1W,EAAoB6W,GACjC,QADiC,IAAAA,OAAA,GAC7BA,EACF,OAAQ7W,GACN,KAAKnJ,EAAasB,YAEhB,GADI2e,EAAoBttB,KAAKktB,eAAe7f,EAAawB,uBAClC,OAAOye,EAC9B,MAEF,KAAKjgB,EAAauB,YAChB,IAAI0e,EACJ,GADIA,EAAoBttB,KAAKktB,eAAe7f,EAAayB,uBAClC,OAAOwe,EAC9B,MAEF,QAASpjB,QAAO,GAGpB,IAAIoe,EAAyBtoB,KAC7B,EAAG,CACD,IAAIkjB,EAAYoF,EAASpF,UACzB,GAAIA,EAAW,CACb,IAAIqK,EAAWrK,EAAUhiB,IAAIsV,GAC7B,GAAI+W,EAAU,OAAOA,SAEhBjF,EAAWA,EAAS2D,MAC7B,OAAO,MAITF,EAAA9pB,UAAAokB,OAAA,SAAOzlB,GACL,OAAOZ,KAAKiU,OAAOoS,OAAOzlB,IAI5BmrB,EAAA9pB,UAAAurB,SAAA,SAASC,GACP,IAAI/O,EAAUxU,OAAOlK,KAAK0e,SAC1BxU,OAAOwU,EAAQnK,IAAIkZ,IACnB,IAAIC,EAAiBhP,EAAQxd,IAAIusB,GAEjC,OADAvjB,OAAOwjB,EAAMlX,MAAQ5F,EAAY4N,OAClBkP,EAAOrC,cAIxBU,EAAA9pB,UAAA0rB,WAAA,SAAc/sB,EAAcU,EAAUkR,EAAoBob,GACxD,IAAIF,EAAQ1tB,KAAKyZ,aAAa7Y,GAC9B,GAAI8sB,GAASA,EAAMlX,MAAQ5F,EAAY4N,MAAO,CAC5C,IAAI/L,EAASmb,EAAqBF,EAAOrC,aACzC,OAAgBqC,EAAO7O,KAAKrI,MAC1B,OACA,OAEE,OADA7M,EAAAkkB,QAAQzqB,IAAI9B,GAAQkR,EAAQC,GACrB,EAET,OACA,OAEE,OADA9I,EAAAmkB,SAAS1qB,IAAI9B,GAAQkR,EAAQC,GACtB,EAET,OACA,OAEE,OADA9I,EAAAiJ,SAASxP,IAAI9B,GAAQkR,EAAQC,GACtB,EAET,OACA,OAGE,OAFAvI,QAAQlK,KAAKwlB,QAAQ/Q,QAAQc,UAC7B5L,EAAAiJ,SAASxP,IAAI9B,GAAQkR,EAAQC,GACtB,EAET,QAEE,OADA9I,EAAAokB,SAASlqB,IAAIvC,GAAQkR,EAAQC,GACtB,EAET,QAEE,OADA9I,EAAAqkB,SAASlqB,IAAIxC,GAAQkR,EAAQC,GACtB,GAKb,OADAvI,QAAO,GACA,GAIT6hB,EAAA9pB,UAAA4pB,QAAA,SAAQ5pB,GACN,OAAOjC,KAAKiC,UAAU4pB,QAAQ5pB,IAIhC8pB,EAAA9pB,UAAAgsB,mBAAA,SAAmBC,GACjB,IAAIxI,EAAwB1lB,KAC5B,GAAG,GAAI0lB,EAAQzjB,YAAcisB,EAAmB,OAAOxI,EAAQsG,oBACxDtG,EAAUA,EAAQuG,MACzB,OAAO,MAITF,EAAA9pB,UAAAksB,kBAAA,WAIE,IAHA,IAAIzI,EAAiB1lB,KACjBwlB,EAAUxlB,KAAKwlB,QACf4I,EAAc5I,EAAQxL,wBACnB0L,EAAQuG,OAASmC,GACtB1I,EAAUxb,OAAOwb,EAAQuG,MAE3B,OAAQvG,EAAQzjB,WACd,KAAKujB,EAAQtL,iBAAkB,OAAO1M,EAAAmH,KAAKzR,GAC3C,KAAKsiB,EAAQpL,kBAAmB,OAAO5M,EAAAmH,KAAKxR,IAC5C,KAAKqiB,EAAQnL,kBAAmB,OAAO7M,EAAAmH,KAAKvR,IAC5C,KAAKoiB,EAAQlL,kBAAmB,OAAO9M,EAAAmH,KAAKtR,IAC5C,KAAKmiB,EAAQjL,iBACb,KAAKiL,EAAQhL,wBAAyB,OAAOhN,EAAAmH,KAAKpR,GAClD,KAAKiiB,EAAQ/K,kBAAmB,OAAOjN,EAAAmH,KAAKnR,IAC5C,KAAKgiB,EAAQ9K,kBAAmB,OAAOlN,EAAAmH,KAAKlR,IAC5C,KAAK+hB,EAAQ7K,kBAAmB,OAAOnN,EAAAmH,KAAKjR,IAC5C,KAAK8hB,EAAQ5K,kBAAmB,OAAOpN,EAAAmH,KAAK9Q,IAC5C,KAAK2hB,EAAQ3K,kBAAmB,OAAOrN,EAAAmH,KAAK7Q,IAC5C,KAAK0hB,EAAQrJ,eAAgB,OAAOjS,OAAOlK,KAAKiuB,mBAAmBzI,EAAQrJ,iBAAiB,GAC5F,QAASjS,QAAO,GAElB,OAAOsD,EAAAmH,KAAKG,MAId/T,OAAAC,eAAI+qB,EAAA9pB,UAAA,YAAS,KAAb,WACE,IAAIosB,EAAUruB,KAAKssB,SACnB,GAAW,GAAP+B,EAAiC,CACnC,IAAIC,EAAWtuB,KAAKuuB,SAASvuB,MACfA,KAAKssB,SAAW+B,EAA1BC,EAAiC,EACT,EAE9B,OAAc,GAAPD,mCAIDtC,EAAA9pB,UAAAssB,SAAR,SAAiBC,EAAcC,WAezB/I,EAJJ,QAX6B,IAAA+I,MAAA,IAAyBxnB,KAWlDwnB,EAAOla,IAAIvU,MAAO,OAAO,EAC7ByuB,EAAO1Z,IAAI/U,MAIX,IAeIkb,EAfAwD,EAAU1e,KAAK0e,QACnB,GAAIA,MACF,IAAmB,IAAA+H,EAAA3O,EAAA4G,EAAQtB,UAAQY,EAAAyI,EAAAzO,QAAAgG,EAAA/F,KAAA+F,EAAAyI,EAAAzO,OAAE,CAAhC,IAAIkG,EAAMF,EAAA1c,MACb,GACE4c,EAAO1H,MAAQ5F,EAAY4N,OACyB,QAAnDkH,EAAkBxH,EAAQW,KAAK6P,kBAE9BhJ,IAAY8I,GACZ9I,EAAQ6I,SAASC,EAAOC,IAE1B,OAAO,oGAQb,IAAKvT,EAAgBlb,KAAKwlB,QAAQrJ,iBAAmBnc,KAAKiC,UAAU4pB,QAAQ3Q,GAAgB,CAC1F,IAAI8Q,EAAgB9hB,OAAOlK,KAAKiuB,mBAAmB/S,IAEnD,GADAhR,OAA+B,GAAxB8hB,EAAc/f,QAE6B,QAA/CyZ,EAAUsG,EAAc,GAAG0C,kBAE1BhJ,IAAY8I,GACZ9I,EAAQ6I,SAASC,EAAOC,IAE1B,OAAO,OAGJ,IAAKvT,EAAgBlb,KAAKwlB,QAAQnJ,eAAiBrc,KAAKiC,UAAU4pB,QAAQ3Q,GAAgB,CAC3F8Q,EAAgB9hB,OAAOlK,KAAKiuB,mBAAmB/S,IAEnD,GADAhR,OAA+B,GAAxB8hB,EAAc/f,QAE6B,QAA/CyZ,EAAUsG,EAAc,GAAG0C,kBAE1BhJ,IAAY8I,GACZ9I,EAAQ6I,SAASC,EAAOC,IAE1B,OAAO,OAGJ,IAAKvT,EAAgBlb,KAAKwlB,QAAQlJ,eAAiBtc,KAAKiC,UAAU4pB,QAAQ3Q,GAAgB,CAC3F8Q,EAAgB9hB,OAAOlK,KAAKiuB,mBAAmB/S,IAEnD,GADAhR,OAA+B,GAAxB8hB,EAAc/f,QAE6B,QAA/CyZ,EAAUsG,EAAc,GAAG0C,kBAE1BhJ,IAAY8I,GACZ9I,EAAQ6I,SAASC,EAAOC,IAE1B,OAAO,EACT,GACkD,QAA/C/I,EAAUsG,EAAc,GAAG0C,kBAE1BhJ,IAAY8I,GACZ9I,EAAQ6I,SAASC,EAAOC,IAE1B,OAAO,EAEX,OAAO,GAEX1C,EA9UA,CAA2BhG,GAAdrmB,EAAAqsB,QAiVb,IAAA7G,EAAA,SAAAnU,GAGE,SAAAmU,EACEtkB,EACAqT,EACAK,EACAJ,UAEAnD,EAAAvQ,KAAAR,KACEY,EACAqT,EACAK,EACAJ,GACA,IACDlU,KAEL,OAjBwCsS,EAAA4S,EAAAnU,GAiBxCmU,EAjBA,CAAwCtE,GAA3BlhB,EAAAwlB,qBAoBb,IAAAyJ,EAAA,SAAA5d,GAGE,SAAA4d,EACEpG,EACAtmB,EACA+pB,EACAC,eADA,IAAAD,MAAA,SACA,IAAAC,MAAA,MAEAlb,EAAAvQ,KAAAR,KACEuoB,EACAtmB,EACA+pB,EACAC,GACA,IACDjsB,KAEL,OAjB+BsS,EAAAqc,EAAA5d,GAiB/B4d,EAjBA,CAA+B5C,GAoB/B,SAAS1B,EAAwB7E,EAAkB7M,GACjDzO,QAAQsb,EAAQjU,gBAAgBgD,IAAIoE,EAAQxG,eAC5CqT,EAAQjU,gBAAgBW,IAAIyG,EAAQxG,aAAcwG,GAIpD,SAASgH,EAASiP,EAAgBC,GAGhC3kB,OAAO0kB,EAAMpJ,UAAYqJ,EAAMrJ,SAC/Btb,QAAQ2kB,EAAMnQ,SACd,IAAIgB,EAAiC,KACrC,OAAQkP,EAAMpY,MACZ,KAAK5F,EAAYgN,mBACf,OAAQiR,EAAMrY,MACZ,KAAK5F,EAAYkW,UACfzB,EAAYwJ,EAAOD,GACnBlP,EAA0BkP,EAC1B,MAEF,KAAKhe,EAAY+V,eACViI,EAAMnJ,aACTmJ,EAAMnJ,WAA6BoJ,EACnCxJ,EAAYwJ,EAAOD,GACnBlP,EAA0BkP,GAKhC,MAEF,KAAKhe,EAAYuJ,gBACjB,KAAKvJ,EAAYmW,KACf,GAAI8H,EAAMrY,MAAQ5F,EAAYkW,UAAW,CACvCzB,EAAYwJ,EAAOD,GACnBlP,EAA0BkP,EAC1B,MAEF,MAEF,KAAKhe,EAAYkW,UACf,OAAQ+H,EAAMrY,MACZ,KAAK5F,EAAYmW,KACjB,KAAKnW,EAAYuJ,gBACjB,KAAKvJ,EAAYgN,mBACfyH,EAAYuJ,EAAOC,GACnBnP,EAA0BmP,EAC1B,MAEF,KAAKje,EAAYkW,UACfzB,EAAYwJ,EAAOD,GACnBlP,EAA0BkP,EAC1B,MAEF,KAAKhe,EAAY+V,eACViI,EAAMnJ,aACTmJ,EAAMnJ,WAA6BoJ,EACnCxJ,EAAYwJ,EAAOD,GACnBlP,EAA0BkP,GAKhC,MAEF,KAAKhe,EAAYiQ,OACXgO,EAAMrY,MAAQ5F,EAAY+V,iBACvBiI,EAAMnJ,aACTmJ,EAAMnJ,WAA6BoJ,EACnCxJ,EAAYwJ,EAAOD,GACnBlP,EAA0BkP,IAG9B,MAEF,KAAKhe,EAAY+V,eACf,OAAQkI,EAAMrY,MACZ,KAAK5F,EAAYiQ,OACjB,KAAKjQ,EAAYgN,mBACjB,KAAKhN,EAAYkW,UACV+H,EAAMpJ,aACToJ,EAAMpJ,WAA6BmJ,EACnCvJ,EAAYuJ,EAAOC,GACnBnP,EAA0BmP,IAQhCnP,KACkBkP,EAAM1P,GAAG5R,EAAAjL,YAAY4S,SAAW2Z,EAAMzT,aAAatK,EAAegQ,WAClEgO,EAAM3P,GAAG5R,EAAAjL,YAAY4S,SAAW4Z,EAAM1T,aAAatK,EAAegQ,UAEpF+N,EAAMpJ,QAAQrY,MACZI,EAAAhD,eAAeukB,kFACfpP,EAAOpE,eAAezQ,MAAO6U,EAAOpE,eAAevP,OAIzD,OAAO2T,EAIT,SAAS2F,EAAY0J,EAAcC,WAC7BC,EAAaF,EAAIrQ,QACrB,GAAIuQ,EAAY,CACd,IAAIC,EAAcF,EAAKtQ,QAClBwQ,IAAaF,EAAKtQ,QAAUwQ,EAAc,IAAIhoB,SACnD,IAAiC,IAAAioB,EAAArX,EAAAmX,GAAUG,EAAAD,EAAAnX,QAAAoX,EAAAnX,KAAAmX,EAAAD,EAAAnX,OAAE,CAApC,IAAAyO,EAAAtO,EAAAiX,EAAA9tB,MAAA,GAAColB,EAAAD,EAAA,GAAYvI,EAAAuI,EAAA,GACpByI,EAAYhd,IAAIwU,EAAYxI,uGAMlC,SAAgB0I,EAAmBhmB,EAAcqT,EAAiBob,EAAkBC,GAClF,YADkF,IAAAA,OAAA,GAC1Erb,EAAOuC,MACb,KAAK5F,EAAYkU,KACf,OAAIwK,EAAiB1uB,EACdqT,EAAO9B,aAAe7E,EAAAhL,eAAiB1B,EAEhD,KAAKgQ,EAAY2N,SACf,OAAI+Q,EAAiB1uB,GACrBsJ,QAAQmlB,GACDpb,EAAO9B,aAAe7E,EAAA1K,gBAAkBhC,GAEjD,QACE,OAAOgmB,EAAmB3S,EAAOrT,KAAMqT,EAAOA,OAAQA,EAAOiL,GAAG5R,EAAAjL,YAAYwiB,UAAWyK,IAC/ED,EAAa/hB,EAAA5K,mBAAqB4K,EAAA3K,kBAAoB/B,GAtJvDlB,EAAAivB,YAyIbjvB,EAAAknB,sSCx+GA,IAaY2I,EAqBAC,EAlCZliB,EAAAnN,EAAA,IAaA,SAAYovB,GACVA,IAAA,KAAOE,qBAAmB,OAC1BF,IAAA,IAAOG,sBAAoB,MAC3BH,IAAA,IAAOI,sBAAoB,MAC3BJ,IAAA,IAAOK,wBAAsB,MAC7BL,IAAA,IAAOM,wBAAsB,MAC7BN,IAAA,KAAOO,uBAAqB,OAC5BP,IAAA,YAAcQ,4BAA0B,cACxCR,IAAA,KAAOS,qBAAmB,OAR5B,CAAYT,EAAA7vB,EAAA6vB,aAAA7vB,EAAA6vB,WAAU,KAWtB,SAAYU,GACVA,IAAA,QAAUC,2BAAyB,UACnCD,IAAA,eAAiBE,kCAAgC,iBACjDF,IAAA,mBAAqBG,sCAAoC,qBACzDH,IAAA,QAAUI,2BAAyB,UACnCJ,IAAA,WAAaK,8BAA4B,aACzCL,IAAA,QAAUM,2BAAyB,UACnCN,IAAA,kBAAoBO,qCAAmC,oBAPzD,CAAY9wB,EAAAuwB,eAAAvwB,EAAAuwB,aAAY,KAUxB,SAAYT,GACVA,IAAA,QAAUiB,sBAAoB,UAC9BjB,IAAA,MAAQkB,oBAAkB,QAC1BlB,IAAA,GAAKmB,iBAAe,KACpBnB,IAAA,KAAOoB,mBAAiB,OACxBpB,IAAA,MAAQqB,oBAAkB,QAC1BrB,IAAA,OAASsB,qBAAmB,SAC5BtB,IAAA,KAAOuB,mBAAiB,OACxBvB,IAAA,aAAewB,2BAAyB,eACxCxB,IAAA,SAAWyB,uBAAqB,WAChCzB,IAAA,SAAW0B,uBAAqB,WAChC1B,IAAA,UAAY2B,wBAAsB,YAClC3B,IAAA,UAAY4B,wBAAsB,YAClC5B,IAAA,KAAO6B,mBAAiB,OACxB7B,IAAA,MAAQ8B,oBAAkB,QAC1B9B,IAAA,MAAQ+B,oBAAkB,QAC1B/B,IAAA,MAAQgC,oBAAkB,QAC1BhC,IAAA,OAASiC,qBAAmB,SAC5BjC,IAAA,OAASkC,qBAAmB,SAC5BlC,IAAA,KAAOmC,mBAAiB,OACxBnC,IAAA,OAASoC,qBAAmB,SAC5BpC,IAAA,KAAOqC,mBAAiB,OACxBrC,IAAA,IAAMsC,kBAAgB,MACtBtC,IAAA,YAAcuC,0BAAwB,cACtCvC,IAAA,cAAgBwC,4BAA0B,gBAC1CxC,IAAA,UAAYyC,wBAAsB,YAClCzC,IAAA,WAAa0C,yBAAuB,aACpC1C,IAAA,aAAe2C,2BAAyB,eACxC3C,IAAA,YAAc4C,0BAAwB,cACtC5C,IAAA,YAAc6C,0BAAwB,cACtC7C,IAAA,YAAc8C,0BAAwB,cACtC9C,IAAA,cAAgB+C,4BAA0B,gBAC1C/C,IAAA,UAAYgD,wBAAsB,YAClChD,IAAA,WAAaiD,yBAAuB,aACpCjD,IAAA,SAAWkD,uBAAqB,WAChClD,IAAA,WAAamD,yBAAuB,aACpCnD,IAAA,WAAaoD,yBAAuB,aApCtC,CAAYpD,EAAA9vB,EAAA8vB,eAAA9vB,EAAA8vB,aAAY,KAuCxB,SAAYqD,GACVA,IAAA,OAASC,qBAAmB,SAC5BD,IAAA,OAASE,qBAAmB,SAC5BF,IAAA,UAAYG,wBAAsB,YAClCH,IAAA,OAASI,uBAAqB,SAC9BJ,IAAA,OAASK,uBAAqB,SAC9BL,IAAA,QAAUM,wBAAsB,UAChCN,IAAA,SAAWO,yBAAuB,WAClCP,IAAA,SAAWQ,yBAAuB,WAClCR,IAAA,WAAaS,2BAAyB,aACtCT,IAAA,QAAUU,wBAAsB,UAChCV,IAAA,OAASW,qBAAmB,SAC5BX,IAAA,OAASY,qBAAmB,SAC5BZ,IAAA,OAASa,qBAAmB,SAC5Bb,IAAA,UAAYc,wBAAsB,YAClCd,IAAA,OAASe,uBAAqB,SAC9Bf,IAAA,OAASgB,uBAAqB,SAC9BhB,IAAA,QAAUiB,wBAAsB,UAChCjB,IAAA,SAAWkB,yBAAuB,WAClClB,IAAA,SAAWmB,yBAAuB,WAClCnB,IAAA,WAAaoB,2BAAyB,aACtCpB,IAAA,QAAUqB,wBAAsB,UAChCrB,IAAA,OAASsB,qBAAmB,SAC5BtB,IAAA,UAAYuB,yBAAuB,YACnCvB,IAAA,UAAYwB,yBAAuB,YACnCxB,IAAA,QAAUyB,sBAAoB,UAC9BzB,IAAA,cAAgB0B,iCAA+B,gBAC/C1B,IAAA,cAAgB2B,iCAA+B,gBAC/C3B,IAAA,cAAgB4B,iCAA+B,gBAC/C5B,IAAA,cAAgB6B,iCAA+B,gBAC/C7B,IAAA,cAAgB8B,iCAA+B,gBAC/C9B,IAAA,cAAgB+B,iCAA+B,gBAC/C/B,IAAA,cAAgBgC,iCAA+B,gBAC/ChC,IAAA,cAAgBiC,iCAA+B,gBAC/CjC,IAAA,eAAiBkC,+BAA6B,iBAC9ClC,IAAA,eAAiBmC,+BAA6B,iBAC9CnC,IAAA,gBAAkBoC,mCAAiC,kBACnDpC,IAAA,gBAAkBqC,mCAAiC,kBACnDrC,IAAA,gBAAkBsC,mCAAiC,kBACnDtC,IAAA,gBAAkBuC,mCAAiC,kBACnDvC,IAAA,gBAAkBwC,mCAAiC,kBACnDxC,IAAA,gBAAkByC,mCAAiC,kBACnDzC,IAAA,gBAAkB0C,mCAAiC,kBACnD1C,IAAA,gBAAkB2C,mCAAiC,kBACnD3C,IAAA,WAAa4C,2BAAyB,aACtC5C,IAAA,UAAY6C,0BAAwB,YACpC7C,IAAA,eAAiB8C,6BAA2B,iBAC5C9C,IAAA,eAAiB+C,6BAA2B,iBAG5C/C,IAAA,cAAgBgD,0BAAwB,gBACxChD,IAAA,eAAiBiD,2BAAyB,iBAC1CjD,IAAA,cAAgBkD,0BAAwB,gBACxClD,IAAA,eAAiBmD,2BAAyB,iBAC1CnD,IAAA,eAAiBoD,2BAAyB,iBAa1CpD,IAAA,cAAgBqD,0BAAwB,gBACxCrD,IAAA,cAAgBsD,0BAAwB,gBACxCtD,IAAA,cAAgBuD,0BAAwB,gBACxCvD,IAAA,cAAgBwD,0BAAwB,gBACxCxD,IAAA,cAAgByD,0BAAwB,gBACxCzD,IAAA,cAAgB0D,0BAAwB,gBACxC1D,IAAA,UAAY2D,sBAAoB,YAChC3D,IAAA,YAAc4D,wBAAsB,cACpC5D,IAAA,gBAAkB6D,4BAA0B,kBAC5C7D,IAAA,gBAAkB8D,4BAA0B,kBAC5C9D,IAAA,YAAc+D,wBAAsB,cACpC/D,IAAA,gBAAkBgE,4BAA0B,kBAC5ChE,IAAA,gBAAkBiE,4BAA0B,kBAC5CjE,IAAA,YAAckE,wBAAsB,cACpClE,IAAA,gBAAkBmE,4BAA0B,kBAC5CnE,IAAA,gBAAkBoE,4BAA0B,kBAC5CpE,IAAA,YAAcqE,wBAAsB,cACpCrE,IAAA,gBAAkBsE,4BAA0B,kBAC5CtE,IAAA,gBAAkBuE,4BAA0B,kBAC5CvE,IAAA,YAAcwE,wBAAsB,cACpCxE,IAAA,YAAcyE,wBAAsB,cACpCzE,IAAA,aAAe0E,yBAAuB,eACtC1E,IAAA,YAAc2E,wBAAsB,cACpC3E,IAAA,YAAc4E,wBAAsB,cACpC5E,IAAA,aAAe6E,yBAAuB,eACtC7E,IAAA,4BAA8B8E,wCAAsC,8BACpE9E,IAAA,4BAA8B+E,wCAAsC,8BACpE/E,IAAA,4BAA8BgF,wCAAsC,8BACpEhF,IAAA,4BAA8BiF,wCAAsC,8BACpEjF,IAAA,2BAA6BkF,uCAAqC,6BAClElF,IAAA,2BAA6BmF,uCAAqC,6BAClEnF,IAAA,2BAA6BoF,uCAAqC,6BAClEpF,IAAA,2BAA6BqF,uCAAqC,6BAnGpE,CAAYx4B,EAAAmzB,UAAAnzB,EAAAmzB,QAAO,KAsGnB,SAAYsF,GACVA,IAAA,OAASC,qBAAmB,SAC5BD,IAAA,OAASE,qBAAmB,SAC5BF,IAAA,OAASG,qBAAmB,SAC5BH,IAAA,OAASI,sBAAoB,SAC7BJ,IAAA,OAASK,sBAAoB,SAC7BL,IAAA,OAASM,sBAAoB,SAC7BN,IAAA,OAASO,sBAAoB,SAC7BP,IAAA,OAASQ,qBAAmB,SAC5BR,IAAA,MAAQS,oBAAkB,QAC1BT,IAAA,OAASU,qBAAmB,SAC5BV,IAAA,OAASW,qBAAmB,SAC5BX,IAAA,OAASY,sBAAoB,SAC7BZ,IAAA,OAASa,sBAAoB,SAC7Bb,IAAA,QAAUc,sBAAoB,UAC9Bd,IAAA,QAAUe,sBAAoB,UAC9Bf,IAAA,MAAQgB,oBAAkB,QAC1BhB,IAAA,MAAQiB,oBAAkB,QAC1BjB,IAAA,MAAQkB,qBAAmB,QAC3BlB,IAAA,MAAQmB,qBAAmB,QAC3BnB,IAAA,MAAQoB,qBAAmB,QAC3BpB,IAAA,MAAQqB,qBAAmB,QAC3BrB,IAAA,MAAQsB,qBAAmB,QAC3BtB,IAAA,MAAQuB,qBAAmB,QAC3BvB,IAAA,MAAQwB,qBAAmB,QAC3BxB,IAAA,MAAQyB,qBAAmB,QAC3BzB,IAAA,OAAS0B,qBAAmB,SAC5B1B,IAAA,OAAS2B,qBAAmB,SAC5B3B,IAAA,OAAS4B,qBAAmB,SAC5B5B,IAAA,OAAS6B,sBAAoB,SAC7B7B,IAAA,OAAS8B,sBAAoB,SAC7B9B,IAAA,OAAS+B,sBAAoB,SAC7B/B,IAAA,OAASgC,sBAAoB,SAC7BhC,IAAA,OAASiC,qBAAmB,SAC5BjC,IAAA,MAAQkC,oBAAkB,QAC1BlC,IAAA,OAASmC,qBAAmB,SAC5BnC,IAAA,OAASoC,qBAAmB,SAC5BpC,IAAA,OAASqC,sBAAoB,SAC7BrC,IAAA,OAASsC,sBAAoB,SAC7BtC,IAAA,QAAUuC,sBAAoB,UAC9BvC,IAAA,QAAUwC,sBAAoB,UAC9BxC,IAAA,MAAQyC,oBAAkB,QAC1BzC,IAAA,MAAQ0C,oBAAkB,QAC1B1C,IAAA,MAAQ2C,qBAAmB,QAC3B3C,IAAA,MAAQ4C,qBAAmB,QAC3B5C,IAAA,MAAQ6C,qBAAmB,QAC3B7C,IAAA,MAAQ8C,qBAAmB,QAC3B9C,IAAA,MAAQ+C,qBAAmB,QAC3B/C,IAAA,MAAQgD,qBAAmB,QAC3BhD,IAAA,MAAQiD,qBAAmB,QAC3BjD,IAAA,MAAQkD,qBAAmB,QAC3BlD,IAAA,OAASmD,uBAAqB,SAC9BnD,IAAA,OAASoD,uBAAqB,SAC9BpD,IAAA,OAASqD,uBAAqB,SAC9BrD,IAAA,OAASsD,uBAAqB,SAC9BtD,IAAA,YAAcuD,4BAA0B,cACxCvD,IAAA,OAASwD,uBAAqB,SAC9BxD,IAAA,OAASyD,uBAAqB,SAC9BzD,IAAA,MAAQ0D,sBAAoB,QAC5B1D,IAAA,MAAQ2D,sBAAoB,QAC5B3D,IAAA,MAAQ4D,sBAAoB,QAC5B5D,IAAA,MAAQ6D,sBAAoB,QAC5B7D,IAAA,MAAQ8D,sBAAoB,QAC5B9D,IAAA,MAAQ+D,sBAAoB,QAC5B/D,IAAA,OAASgE,uBAAqB,SAC9BhE,IAAA,OAASiE,uBAAqB,SAC9BjE,IAAA,OAASkE,uBAAqB,SAC9BlE,IAAA,OAASmE,uBAAqB,SAC9BnE,IAAA,YAAcoE,4BAA0B,cACxCpE,IAAA,OAASqE,uBAAqB,SAC9BrE,IAAA,OAASsE,uBAAqB,SAC9BtE,IAAA,MAAQuE,sBAAoB,QAC5BvE,IAAA,MAAQwE,sBAAoB,QAC5BxE,IAAA,MAAQyE,sBAAoB,QAC5BzE,IAAA,MAAQ0E,sBAAoB,QAC5B1E,IAAA,MAAQ2E,sBAAoB,QAC5B3E,IAAA,MAAQ4E,sBAAoB,QAG5B5E,IAAA,WAAa6E,uBAAqB,aAClC7E,IAAA,WAAa8E,uBAAqB,aAClC9E,IAAA,YAAc+E,wBAAsB,cACpC/E,IAAA,YAAcgF,wBAAsB,cACpChF,IAAA,YAAciF,wBAAsB,cACpCjF,IAAA,YAAckF,wBAAsB,cACpClF,IAAA,YAAcmF,wBAAsB,cACpCnF,IAAA,YAAcoF,wBAAsB,cACpCpF,IAAA,YAAcqF,wBAAsB,cACpCrF,IAAA,YAAcsF,wBAAsB,cACpCtF,IAAA,WAAauF,uBAAqB,aAClCvF,IAAA,WAAawF,uBAAqB,aAClCxF,IAAA,YAAcyF,wBAAsB,cACpCzF,IAAA,YAAc0F,wBAAsB,cACpC1F,IAAA,YAAc2F,wBAAsB,cACpC3F,IAAA,YAAc4F,wBAAsB,cACpC5F,IAAA,YAAc6F,wBAAsB,cACpC7F,IAAA,YAAc8F,wBAAsB,cACpC9F,IAAA,YAAc+F,wBAAsB,cACpC/F,IAAA,YAAcgG,wBAAsB,cACpChG,IAAA,WAAaiG,uBAAqB,aAClCjG,IAAA,WAAakG,uBAAqB,aAClClG,IAAA,YAAcmG,wBAAsB,cACpCnG,IAAA,YAAcoG,wBAAsB,cACpCpG,IAAA,YAAcqG,wBAAsB,cACpCrG,IAAA,YAAcsG,wBAAsB,cACpCtG,IAAA,YAAcuG,wBAAsB,cACpCvG,IAAA,YAAcwG,wBAAsB,cACpCxG,IAAA,YAAcyG,wBAAsB,cACpCzG,IAAA,YAAc0G,wBAAsB,cACpC1G,IAAA,WAAa2G,uBAAqB,aAClC3G,IAAA,WAAa4G,uBAAqB,aAClC5G,IAAA,WAAa6G,uBAAqB,aAClC7G,IAAA,WAAa8G,uBAAqB,aAClC9G,IAAA,WAAa+G,uBAAqB,aAClC/G,IAAA,WAAagH,uBAAqB,aAClChH,IAAA,WAAaiH,uBAAqB,aAClCjH,IAAA,WAAakH,uBAAqB,aAClClH,IAAA,WAAamH,uBAAqB,aAClCnH,IAAA,WAAaoH,uBAAqB,aAClCpH,IAAA,WAAaqH,uBAAqB,aAClCrH,IAAA,WAAasH,uBAAqB,aAClCtH,IAAA,UAAYuH,sBAAoB,YAChCvH,IAAA,SAAWwH,qBAAmB,WAC9BxH,IAAA,UAAYyH,sBAAoB,YAChCzH,IAAA,YAAc0H,wBAAsB,cACpC1H,IAAA,gBAAkB2H,4BAA0B,kBAC5C3H,IAAA,gBAAkB4H,4BAA0B,kBAC5C5H,IAAA,YAAc6H,wBAAsB,cACpC7H,IAAA,gBAAkB8H,4BAA0B,kBAC5C9H,IAAA,gBAAkB+H,4BAA0B,kBAC5C/H,IAAA,YAAcgI,wBAAsB,cACpChI,IAAA,YAAciI,wBAAsB,cACpCjI,IAAA,gBAAkBkI,4BAA0B,kBAC5ClI,IAAA,gBAAkBmI,4BAA0B,kBAC5CnI,IAAA,YAAcoI,wBAAsB,cACpCpI,IAAA,gBAAkBqI,4BAA0B,kBAC5CrI,IAAA,gBAAkBsI,4BAA0B,kBAC5CtI,IAAA,YAAcuI,wBAAsB,cACpCvI,IAAA,YAAcwI,wBAAsB,cACpCxI,IAAA,YAAcyI,wBAAsB,cACpCzI,IAAA,YAAc0I,wBAAsB,cACpC1I,IAAA,YAAc2I,wBAAsB,cACpC3I,IAAA,YAAc4I,wBAAsB,cACpC5I,IAAA,YAAc6I,wBAAsB,cACpC7I,IAAA,YAAc8I,wBAAsB,cACpC9I,IAAA,YAAc+I,wBAAsB,cACpC/I,IAAA,YAAcgJ,wBAAsB,cACpChJ,IAAA,YAAciJ,wBAAsB,cACpCjJ,IAAA,YAAckJ,wBAAsB,cACpClJ,IAAA,YAAcmJ,wBAAsB,cACpCnJ,IAAA,YAAcoJ,wBAAsB,cACpCpJ,IAAA,YAAcqJ,wBAAsB,cACpCrJ,IAAA,YAAcsJ,wBAAsB,cACpCtJ,IAAA,YAAcuJ,wBAAsB,cACpCvJ,IAAA,YAAcwJ,wBAAsB,cA1JtC,CAAYjiC,EAAAy4B,WAAAz4B,EAAAy4B,SAAQ,KA6JpB,SAAYyJ,GACVA,IAAA,WAAaC,uBAAqB,aAClCD,IAAA,WAAaE,uBAAqB,aAFpC,CAAYpiC,EAAAkiC,SAAAliC,EAAAkiC,OAAM,KAKlB,SAAYG,GACVA,IAAA,IAAMC,yBAAuB,MAC7BD,IAAA,IAAME,yBAAuB,MAC7BF,IAAA,IAAMG,yBAAuB,MAC7BH,IAAA,GAAKI,wBAAsB,KAC3BJ,IAAA,IAAMK,yBAAuB,MAC7BL,IAAA,KAAOM,0BAAwB,OANjC,CAAY3iC,EAAAqiC,cAAAriC,EAAAqiC,YAAW,KASvB,SAAYO,GACVA,IAAA,qBAAuBC,iCAA+B,uBACtDD,IAAA,qBAAuBE,iCAA+B,uBACtDF,IAAA,qBAAuBG,iCAA+B,uBACtDH,IAAA,qBAAuBI,iCAA+B,uBACtDJ,IAAA,oBAAsBK,gCAA8B,sBACpDL,IAAA,oBAAsBM,gCAA8B,sBACpDN,IAAA,oBAAsBO,gCAA8B,sBACpDP,IAAA,oBAAsBQ,gCAA8B,sBARtD,CAAYpjC,EAAA4iC,gBAAA5iC,EAAA4iC,cAAa,KAWzB,SAAYS,GACVA,IAAA,oBAAsBC,gCAA8B,sBACpDD,IAAA,oBAAsBE,gCAA8B,sBACpDF,IAAA,oBAAsBG,gCAA8B,sBACpDH,IAAA,oBAAsBI,gCAA8B,sBACpDJ,IAAA,oBAAsBK,gCAA8B,sBACpDL,IAAA,oBAAsBM,gCAA8B,sBANtD,CAAY3jC,EAAAqjC,gBAAArjC,EAAAqjC,cAAa,KASzB,SAAYO,GACVA,IAAA,YAAcC,wBAAsB,cACpCD,IAAA,aAAeE,yBAAuB,eACtCF,IAAA,aAAeG,yBAAuB,eACtCH,IAAA,YAAcI,wBAAsB,cACpCJ,IAAA,aAAeK,yBAAuB,eACtCL,IAAA,aAAeM,yBAAuB,eACtCN,IAAA,YAAcO,wBAAsB,cACpCP,IAAA,aAAeQ,yBAAuB,eACtCR,IAAA,aAAeS,yBAAuB,eACtCT,IAAA,YAAcU,wBAAsB,cACpCV,IAAA,aAAeW,yBAAuB,eACtCX,IAAA,aAAeY,yBAAuB,eAZxC,CAAYxkC,EAAA4jC,cAAA5jC,EAAA4jC,YAAW,KAevB,IAAAa,EAAA,oBAAAA,KAWA,OANSA,EAAAxiC,OAAP,SAAc6Q,EAAoBC,GAChC,IAAI2xB,EAAU,IAAID,EAGlB,OAFAC,EAAQ5xB,OAASA,EACjB4xB,EAAQ3xB,OAASA,EACV2xB,GAEXD,EAXA,GAAazkC,EAAAykC,gBAab,IAAAE,EAAA,WAyBE,SAAAA,IAwbQrkC,KAAAskC,sBAA6B,EAoO7BtkC,KAAAukC,sBAA+B,EAmE/BvkC,KAAAwkC,cAAmC,IAAIt9B,IA4IjD,OA93BSm9B,EAAA1iC,OAAP,WACE,IAAIhC,EAAS,IAAI0kC,EAGjB,OAFA1kC,EAAOkpB,IAAM4b,wBACb9kC,EAAO+kC,IAAMC,OAAOC,SAASC,0BACtBllC,GAGF0kC,EAAAS,WAAP,SAAkBtyB,GAChB,IAAIuyB,EAAOC,EAAaxyB,GACxB,IACE,IAAI7S,EAAS,IAAI0kC,EAGjB,OAFA1kC,EAAOkpB,IAAMoc,oBAAoBF,EAAMvyB,EAAOvG,QAC9CtM,EAAO+kC,IAAMC,OAAOC,SAASC,0BACtBllC,UAEPglC,OAAOp8B,KAAK28B,WAAkBH,MAQlCV,EAAApiC,UAAAkjC,gBAAA,SACEvkC,EACAwkC,EACAC,GAEA,IAAIC,EAAOtlC,KAAKulC,kBAAkB3kC,GAC9BmkC,EAAOS,EAAcH,GACzB,IACE,OAAOI,yBAAyBzlC,KAAK6oB,IAAKyc,EAAMF,EAAQL,EAAMM,EAAaA,EAAWp5B,OAAS,WAE/F04B,OAAOp8B,KAAKw8B,KAIhBV,EAAApiC,UAAAyjC,2BAAA,SACEN,EACAC,GAEA,IAAIN,EAAOS,EAAcH,GACzB,IACE,OAAOM,oCAAoC3lC,KAAK6oB,IAAKuc,EAAQL,EAAMM,EAAaA,EAAWp5B,OAAS,WAEpG04B,OAAOp8B,KAAKw8B,KAIhBV,EAAApiC,UAAA2jC,mBAAA,SAAmBhlC,GACjB,IAAI0kC,EAAOtlC,KAAKulC,kBAAkB3kC,GAClCilC,4BAA4B7lC,KAAK6oB,IAAKyc,IAKxCjB,EAAApiC,UAAAmB,IAAA,SAAI9B,GACF,IAAIwkC,EAAM9lC,KAAK0kC,IAEf,OADAqB,sBAAsBD,EAAKxkC,GACpB0kC,eAAehmC,KAAK6oB,IAAKid,IAGlCzB,EAAApiC,UAAAoB,IAAA,SAAI4iC,EAAeC,QAAA,IAAAA,MAAA,GACjB,IAAIJ,EAAM9lC,KAAK0kC,IAEf,OADAyB,sBAAsBL,EAAKG,EAAUC,GAC9BF,eAAehmC,KAAK6oB,IAAKid,IAGlCzB,EAAApiC,UAAA4B,IAAA,SAAIvC,GACF,IAAIwkC,EAAM9lC,KAAK0kC,IAEf,OADA0B,wBAAwBN,EAAKxkC,GACtB0kC,eAAehmC,KAAK6oB,IAAKid,IAGlCzB,EAAApiC,UAAA6B,IAAA,SAAIxC,GACF,IAAIwkC,EAAM9lC,KAAK0kC,IAEf,OADA2B,wBAAwBP,EAAKxkC,GACtB0kC,eAAehmC,KAAK6oB,IAAKid,IAGlCzB,EAAApiC,UAAA8B,KAAA,SAAKuiC,GACHp8B,OAAuB,IAAhBo8B,EAAMr6B,QAEb,IADA,IAAI65B,EAAM9lC,KAAK0kC,IACNrkC,EAAI,EAAGA,EAAI,KAAMA,EAAGkmC,MAAUT,EAAMzlC,EAAGimC,EAAMjmC,IAEtD,OADAmmC,uBAAuBV,EAAKA,GACrBE,eAAehmC,KAAK6oB,IAAKid,IAKlCzB,EAAApiC,UAAAwkC,MAAA,SACEC,EACAC,GAEA,OAAOC,eAAe5mC,KAAK6oB,IAAK6d,EAAIC,IAGtCtC,EAAApiC,UAAA4kC,OAAA,SACEH,EACAI,EACAC,GAEA,OAAOC,gBAAgBhnC,KAAK6oB,IAAK6d,EAAII,EAAMC,IAG7C1C,EAAApiC,UAAAglC,KAAA,SACEP,EACA9lC,EACAsmC,QADA,IAAAtmC,MAAA,WACA,IAAAsmC,MAAA,MAEA,IAAI5B,EAAOtlC,KAAKulC,kBAAkB3kC,GAC9BmkC,EAAOoC,EAAcD,GACzB,IACE,OAAOE,cAAcpnC,KAAK6oB,IAAK6d,EAAIpB,EAAMP,EAAMmC,EAA6BA,EAAUj7B,OAAS,WAE/F04B,OAAOp8B,KAAKw8B,KAIhBV,EAAApiC,UAAAolC,UAAA,SACE1f,EACA9I,GAEA,OAAOyoB,kBAAkBtnC,KAAK6oB,IAAKlB,EAAO9I,IAG5CwlB,EAAApiC,UAAAslC,UAAA,SACE5f,EACArmB,GAEA,OAAOkmC,kBAAkBxnC,KAAK6oB,IAAKlB,EAAOrmB,IAG5C+iC,EAAApiC,UAAAwlC,WAAA,SACE7mC,EACAie,GAEA,IAAIymB,EAAOtlC,KAAKulC,kBAAkB3kC,GAClC,OAAO8mC,mBAAmB1nC,KAAK6oB,IAAKyc,EAAMzmB,IAG5CwlB,EAAApiC,UAAA0lC,KAAA,SACErB,EACAsB,EACAC,EACAhpB,EACApM,EACAq1B,GAEA,YAHA,IAAAr1B,MAAA,QACA,IAAAq1B,MAAAxB,GAEOyB,cAAc/nC,KAAK6oB,IAAKyd,EAAOsB,EAAS,EAAI,EAAGn1B,EAAQq1B,EAAOjpB,EAAMgpB,IAG7ExD,EAAApiC,UAAAskC,MAAA,SACED,EACAuB,EACAvmC,EACAud,EACApM,EACAq1B,GAEA,QAHA,IAAAr1B,MAAA,QACA,IAAAq1B,MAAAxB,GAEIznB,EAAO0Q,EAAWyY,MAAQnpB,EAAO0Q,EAAW1oB,KAAM,MAAM,IAAIqV,MAAM,SAAW2C,GACjF,OAAOopB,eAAejoC,KAAK6oB,IAAKyd,EAAO7zB,EAAQq1B,EAAOD,EAAKvmC,EAAOud,IAGpEwlB,EAAApiC,UAAAimC,YAAA,SACE5B,EACAuB,EACAhpB,EACApM,GAEA,YAFA,IAAAA,MAAA,GAEO01B,oBAAoBnoC,KAAK6oB,IAAKyd,EAAO7zB,EAAQoM,EAAMgpB,IAG5DxD,EAAApiC,UAAAmmC,aAAA,SACE9B,EACAuB,EACAvmC,EACAud,EACApM,GAEA,YAFA,IAAAA,MAAA,GAEO41B,qBAAqBroC,KAAK6oB,IAAKyd,EAAO7zB,EAAQo1B,EAAKvmC,EAAOud,IAGnEwlB,EAAApiC,UAAAqmC,WAAA,SACE5B,EACAJ,EACA7zB,EACAo1B,EACAvmC,EACAud,GAEA,OAAO0pB,mBAAmBvoC,KAAK6oB,IAAK6d,EAAIJ,EAAO7zB,EAAQo1B,EAAKvmC,EAAOud,IAGrEwlB,EAAApiC,UAAAumC,eAAA,SACElC,EACA7zB,EACAo1B,EACAY,EACAC,EACA7pB,GAEA,OAAO8pB,uBAAuB3oC,KAAK6oB,IAAKyd,EAAO7zB,EAAQo1B,EAAKY,EAAUC,EAAa7pB,IAGrFwlB,EAAApiC,UAAA2mC,YAAA,SACEf,EACAY,EACAI,EACAC,GAEA,OAAOC,oBAAoB/oC,KAAK6oB,IAAKgf,EAAKY,EAAUI,EAASC,IAG/DzE,EAAApiC,UAAA+mC,cAAA,SACEnB,EACAoB,GAEA,OAAOC,sBAAsBlpC,KAAK6oB,IAAKgf,EAAKoB,IAK9C5E,EAAApiC,UAAAknC,UAAA,SACExhB,EACArmB,GAEA,OAAO8nC,kBAAkBppC,KAAK6oB,IAAKlB,EAAOrmB,IAG5C+iC,EAAApiC,UAAAonC,WAAA,SACEzoC,EACAU,GAEA,IAAIgkC,EAAOtlC,KAAKulC,kBAAkB3kC,GAClC,OAAO0oC,mBAAmBtpC,KAAK6oB,IAAKyc,EAAMhkC,IAG5C+iC,EAAApiC,UAAAsnC,MAAA,SACEC,EACAC,EACA5qB,QAAA,IAAAA,MAAmB0Q,EAAWyY,MAE9B,IAAI1C,EAAOtlC,KAAKulC,kBAAkBiE,GAC9BzE,EAAOoC,EAAcsC,GACzB,IACE,OAAOC,eAAe1pC,KAAK6oB,IAAKyc,EAAMP,EAAM0E,EAASx9B,OAAQ4S,WAE7D8lB,OAAOp8B,KAAKw8B,KAIhBV,EAAApiC,UAAA0nC,GAAA,SACEH,EACAI,EACAtoC,QADA,IAAAsoC,MAAA,QACA,IAAAtoC,MAAA,GAEA,IAAIgkC,EAAOtlC,KAAKulC,kBAAkBiE,GAClC,OAAOK,eAAe7pC,KAAK6oB,IAAKyc,EAAMsE,EAAWtoC,IAGnD+iC,EAAApiC,UAAA6nC,KAAA,SACEC,GAEA,OAAOC,cAAchqC,KAAK6oB,IAAKkhB,IAGjC1F,EAAApiC,UAAAgoC,KAAA,SACET,EACAzhB,GAEA,IAAIud,EAAOtlC,KAAKulC,kBAAkBiE,GAClC,OAAOU,cAAclqC,KAAK6oB,IAAKyc,EAAMvd,IAGvCsc,EAAApiC,UAAAkoC,GAAA,SACEP,EACAQ,EACAC,GAEA,YAFA,IAAAA,MAAA,GAEOC,YAAYtqC,KAAK6oB,IAAK+gB,EAAWQ,EAAQC,IAGlDhG,EAAApiC,UAAAsoC,IAAA,WACE,OAAOC,aAAaxqC,KAAK6oB,MAG3Bwb,EAAApiC,UAAAwoC,OAAA,SACEV,GAEA,YAFA,IAAAA,MAAA,GAEOW,gBAAgB1qC,KAAK6oB,IAAKkhB,IAGnC1F,EAAApiC,UAAA0oC,OAAA,SACEP,EACAC,EACAT,GAEA,OAAOgB,gBAAgB5qC,KAAK6oB,IAAK+gB,EAAWQ,EAAQC,IAGtDhG,EAAApiC,UAAA4oC,OAAA,SACEC,EACAC,EACAnB,EACAtoC,QAAA,IAAAA,MAAA,GAIA,IAFA,IAAI0pC,EAAWF,EAAM7+B,OACjBg/B,EAAO,IAAIlkC,MAAaikC,GACnB3qC,EAAI,EAAGA,EAAI2qC,IAAY3qC,EAC9B4qC,EAAK5qC,GAAKL,KAAKulC,kBAAkBuF,EAAMzqC,IAEzC,IAAI0kC,EAAOS,EAAcyF,GACrB3F,EAAOtlC,KAAKulC,kBAAkBwF,GAClC,IACE,OAAOG,gBAAgBlrC,KAAK6oB,IAAKkc,EAAMiG,EAAU1F,EAAMsE,EAAWtoC,WAElEqjC,OAAOp8B,KAAKw8B,KAIhBV,EAAApiC,UAAAzB,KAAA,SACE4sB,EACA8Z,EACAiE,GAEA,IAAI7F,EAAOtlC,KAAKulC,kBAAkBnY,GAC9B2X,EAAOoC,EAAcD,GACzB,IACE,OAAOkE,cAAcprC,KAAK6oB,IAAKyc,EAAMP,EAAMmC,GAAYA,EAASj7B,QAAU,EAAGk/B,WAE7ExG,OAAOp8B,KAAKw8B,KAIhBV,EAAApiC,UAAAopC,cAAA,SACE1jB,EACAuf,EACAoE,GAEA,IAAIhG,EAAOtlC,KAAKulC,kBAAkB+F,GAC9BvG,EAAOoC,EAAcD,GACzB,IACE,OAAOqE,sBAAsBvrC,KAAK6oB,IAAKlB,EAAOod,EAAMmC,GAAYA,EAASj7B,QAAU,EAAGq5B,WAEtFX,OAAOp8B,KAAKw8B,KAIhBV,EAAApiC,UAAAupC,YAAA,WACE,OAAOC,qBAAqBzrC,KAAK6oB,MAKnCwb,EAAApiC,UAAAypC,YAAA,SACE1c,EACAvjB,EACAkgC,GAEA,OAAOC,oBAAoB5rC,KAAK6oB,IAAKmG,EAAMvjB,EAAQkgC,IAGrDtH,EAAApiC,UAAA4pC,YAAA,SACE7c,EACA1tB,EACAqqC,GAEA,OAAOG,oBAAoB9rC,KAAK6oB,IAAKmG,EAAM1tB,EAAOqqC,IAKpDtH,EAAApiC,UAAA8pC,aAAA,SACErF,EACAsF,EACAC,GAEA,OAAOC,qBAAqBlsC,KAAK6oB,IAAK6d,EAAIsF,EAAKC,IAGjD5H,EAAApiC,UAAAkqC,aAAA,SACEzF,EACAsF,EACAC,EACA3qC,GAEA,OAAO8qC,qBAAqBpsC,KAAK6oB,IAAK6d,EAAIsF,EAAKC,EAAK3qC,IAGtD+iC,EAAApiC,UAAAoqC,aAAA,SACEC,EACAC,EACAC,GAEAtiC,OAAsB,IAAfsiC,EAAKvgC,QACZ,IAAI84B,EAAOC,EAAawH,GACxB,IACE,OAAOC,qBAAqBzsC,KAAK6oB,IAAKyjB,EAAMC,EAAMxH,WAElDJ,OAAOp8B,KAAKw8B,KAIhBV,EAAApiC,UAAAyqC,eAAA,SACEJ,EACAC,EACAI,GAEA,OAAOC,uBAAuB5sC,KAAK6oB,IAAKyjB,EAAMC,EAAMI,IAGtDtI,EAAApiC,UAAA4qC,WAAA,SACEnG,EACAsF,EACAc,GAEA,OAAOC,mBAAmB/sC,KAAK6oB,IAAK6d,EAAIsF,EAAKc,IAK/CzI,EAAApiC,UAAA+qC,UAAA,SACEpsC,EACAie,EACAouB,EACA9lB,GAEA,IAAIme,EAAOtlC,KAAKulC,kBAAkB3kC,GAClC,OAAOssC,mBAAmBltC,KAAK6oB,IAAKyc,EAAMzmB,EAAMouB,EAAU,EAAI,EAAG9lB,IAGnEkd,EAAApiC,UAAAkrC,aAAA,SACEvsC,GAEA,IAAI0kC,EAAOtlC,KAAKulC,kBAAkB3kC,GAClCwsC,sBAAsBptC,KAAK6oB,IAAKyc,IAGlCjB,EAAApiC,UAAAorC,YAAA,SACEzsC,EACAie,EACAyuB,EACAvlB,GAEA,IAAIud,EAAOtlC,KAAKulC,kBAAkB3kC,GAC9BmkC,EAAOS,EAAc8H,GACzB,IACE,OAAOC,qBAAqBvtC,KAAK6oB,IAAKyc,EAAMzmB,EAAMkmB,EAAMuI,EAAWA,EAASrhC,OAAS,EAAG8b,WAExF4c,OAAOp8B,KAAKw8B,KAIhBV,EAAApiC,UAAAurC,eAAA,SAAe5sC,GACb,IAAI0kC,EAAOtlC,KAAKulC,kBAAkB3kC,GAClC6sC,wBAAwBztC,KAAK6oB,IAAKyc,IAKpCjB,EAAApiC,UAAAyrC,qBAAA,SAAqBtI,EAAoBC,EAAiCtd,GACxE/nB,KAAKskC,qBAAuBp6B,QAAQlK,KAAKskC,sBACzC,IAAIqJ,EAAW3tC,KAAKulC,kBAAkB,IAClCR,EAAOS,EAAcH,GACzB,IACE,IAAIuI,EAAUnI,yBAAyBzlC,KAAK6oB,IAAK8kB,EAAUvI,EAAQL,EAAMM,EAAaA,EAAWp5B,OAAS,GAC1G,OAAOshC,qBAAqBvtC,KAAK6oB,IAAK8kB,EAAUC,EAAS,EAAG,EAAG7lB,WAE/D4c,OAAOp8B,KAAKw8B,KAIhBV,EAAApiC,UAAA4rC,wBAAA,WACE7tC,KAAKskC,sBAAwBp6B,OAAOlK,KAAKskC,sBACzC,IAAIqJ,EAAW3tC,KAAKulC,kBAAkB,IACtCkI,wBAAwBztC,KAAK6oB,IAAK8kB,GAClC9H,4BAA4B7lC,KAAK6oB,IAAK8kB,IAGxCtJ,EAAApiC,UAAA6rC,kBAAA,SACE37B,EACA47B,GAEA,IAAIC,EAAQhuC,KAAKulC,kBAAkBpzB,GAC/B87B,EAAQjuC,KAAKulC,kBAAkBwI,GACnC,OAAOG,2BAA2BluC,KAAK6oB,IAAKmlB,EAAOC,IAGrD5J,EAAApiC,UAAAksC,eAAA,SACEh8B,EACA47B,GAEA,IAAIC,EAAQhuC,KAAKulC,kBAAkBpzB,GAC/B87B,EAAQjuC,KAAKulC,kBAAkBwI,GACnC,OAAOK,wBAAwBpuC,KAAK6oB,IAAKmlB,EAAOC,IAGlD5J,EAAApiC,UAAAosC,gBAAA,SACEl8B,EACA47B,GAEA,IAAIC,EAAQhuC,KAAKulC,kBAAkBpzB,GAC/B87B,EAAQjuC,KAAKulC,kBAAkBwI,GACnC,OAAOO,yBAAyBtuC,KAAK6oB,IAAKmlB,EAAOC,IAGnD5J,EAAApiC,UAAAssC,gBAAA,SACEp8B,EACA47B,GAEA,IAAIC,EAAQhuC,KAAKulC,kBAAkBpzB,GAC/B87B,EAAQjuC,KAAKulC,kBAAkBwI,GACnC,OAAOS,yBAAyBxuC,KAAK6oB,IAAKmlB,EAAOC,IAGnD5J,EAAApiC,UAAAwsC,aAAA,SAAaV,GACX,IAAIzI,EAAOtlC,KAAKulC,kBAAkBwI,GAClCW,sBAAsB1uC,KAAK6oB,IAAKyc,IAGlCjB,EAAApiC,UAAA0sC,kBAAA,SACEx8B,EACAy8B,EACAC,EACAC,GAEA,IAAId,EAAQhuC,KAAKulC,kBAAkBpzB,GAC/B87B,EAAQjuC,KAAKulC,kBAAkBqJ,GAC/BG,EAAQ/uC,KAAKulC,kBAAkBsJ,GACnC,OAAOG,2BAA2BhvC,KAAK6oB,IAAKmlB,EAAOC,EAAOc,EAAOD,IAGnEzK,EAAApiC,UAAAgtC,eAAA,SACE98B,EACAy8B,EACAC,GAEA,IAAIb,EAAQhuC,KAAKulC,kBAAkBpzB,GAC/B87B,EAAQjuC,KAAKulC,kBAAkBqJ,GAC/BG,EAAQ/uC,KAAKulC,kBAAkBsJ,GACnC,OAAOK,wBAAwBlvC,KAAK6oB,IAAKmlB,EAAOC,EAAOc,IAGzD1K,EAAApiC,UAAAktC,gBAAA,SACEh9B,EACAy8B,EACAC,EACAO,QAAA,IAAAA,OAAA,GAEA,IAAIpB,EAAQhuC,KAAKulC,kBAAkBpzB,GAC/B87B,EAAQjuC,KAAKulC,kBAAkBqJ,GAC/BG,EAAQ/uC,KAAKulC,kBAAkBsJ,GACnC,OAAOQ,yBAAyBrvC,KAAK6oB,IAAKmlB,EAAOC,EAAOc,EAAOK,IAGjE/K,EAAApiC,UAAAqtC,gBAAA,SACEn9B,EACAy8B,EACAC,EACAU,GAEA,IAAIvB,EAAQhuC,KAAKulC,kBAAkBpzB,GAC/B87B,EAAQjuC,KAAKulC,kBAAkBqJ,GAC/BG,EAAQ/uC,KAAKulC,kBAAkBsJ,GACnC,OAAOW,yBAAyBxvC,KAAK6oB,IAAKmlB,EAAOC,EAAOc,EAAOQ,IAMjElL,EAAApiC,UAAAwtC,UAAA,SACEC,EACAC,EACAC,EACAxiB,EACA9T,EACA81B,QADA,IAAA91B,MAAA,WACA,IAAA81B,OAAA,GAQA,IANA,IAAI9J,EAAOtlC,KAAKulC,kBAAkBjsB,GAC9BnD,EAAIy5B,EAAS3jC,OACb4jC,EAAO,IAAI9oC,MAAaoP,GACxB25B,EAAO,IAAI/oC,MAAUoP,GACrB45B,EAAO,IAAIhpC,MAAqBoP,GAChC65B,EAAO,IAAIjpC,MAAaoP,GACnB9V,EAAI,EAAGA,EAAI8V,IAAK9V,EAAG,CAC1B,IAAImS,EAASo9B,EAASvvC,GAAGmS,OACrBC,EAASm9B,EAASvvC,GAAGoS,OACzBo9B,EAAKxvC,GAAK2kC,EAAaxyB,GACvBs9B,EAAKzvC,GAAK,EACV0vC,EAAK1vC,GAAK+sB,GAAU9f,EAAApE,OAAOsM,OACvBxV,KAAKqD,IAAI4sC,QAAQx9B,GAASy9B,SAASz9B,IACnCzS,KAAKoD,IAAI6sC,QAAQx9B,IACrBu9B,EAAK3vC,GAAKmS,EAAOvG,OAEnB,IAAIkkC,EAAQ3K,EAAcqK,GACtBO,EAAQpL,EAAa8K,GACrBO,EAAQ7K,EAAcuK,GACtBO,EAAQ9K,EAAcwK,GAC1B,IACEO,mBAAmBvwC,KAAK6oB,IAAK6mB,EAASC,EAASrK,EAAM6K,EAAOC,EAAOC,EAAOC,EAAOn6B,EAAGi5B,WAEpFzK,OAAOp8B,KAAK+nC,GACZ3L,OAAOp8B,KAAK8nC,GACZ1L,OAAOp8B,KAAK6nC,GACZzL,OAAOp8B,KAAK4nC,GACZ,IAAS9vC,EAAI8V,EAAI,EAAG9V,GAAK,IAAKA,EAAGskC,OAAOp8B,KAAKsnC,EAAKxvC,MAItDgkC,EAAApiC,UAAAuuC,iBAAA,SACEd,EACAC,EACAc,GAIA,IAFA,IAAIzF,EAAWyF,EAAMxkC,OACjB6+B,EAAQ,IAAI/jC,MAAaikC,GACpB3qC,EAAI,EAAGA,EAAI2qC,IAAY3qC,EAC9ByqC,EAAMzqC,GAAKL,KAAKulC,kBAAkBkL,EAAMpwC,IAE1C,IAAI0kC,EAAOS,EAAcsF,GACzB,IACE4F,0BAA0B1wC,KAAK6oB,IAAK6mB,EAASC,EAAS5K,EAAMiG,WAE5DrG,OAAOp8B,KAAKw8B,KAIhBV,EAAApiC,UAAA0uC,SAAA,SAASC,GACPC,kBAAkB7wC,KAAK6oB,IAAK+nB,IAG9BvM,EAAApiC,UAAA6uC,iBAAA,WACE,OAAOC,6BAGT1M,EAAApiC,UAAA+uC,iBAAA,SAAiBC,QAAA,IAAAA,MAAA,GACfC,0BAA0BD,IAG5B5M,EAAApiC,UAAAkvC,eAAA,WACE,OAAOC,2BAGT/M,EAAApiC,UAAAovC,eAAA,SAAeJ,QAAA,IAAAA,MAAA,GACbK,wBAAwBL,IAG1B5M,EAAApiC,UAAAsvC,aAAA,SAAaC,QAAA,IAAAA,OAAA,GACXC,sBAAsBD,IAGxBnN,EAAApiC,UAAAyvC,YAAA,WACE,OAAOC,2BAA2B3xC,KAAK6oB,MAGzCwb,EAAApiC,UAAA2vC,YAAA,SAAYC,GACVC,2BAA2B9xC,KAAK6oB,IAAKgpB,IAGvCxN,EAAApiC,UAAA8vC,SAAA,SAASnB,QAAA,IAAAA,MAAA,GACHA,EACFoB,0BAA0BpB,EAAM5wC,KAAK6oB,KAErCopB,wBAAwBjyC,KAAK6oB,MAIjCwb,EAAApiC,UAAAiwC,UAAA,SAAUC,EAAkBvB,QAAA,IAAAA,MAAA,GAG1B,IAFA,IAAI5F,EAAWmH,EAAOlmC,OAClB6+B,EAAQ,IAAI/jC,MAAaikC,GACpB3qC,EAAI,EAAGA,EAAI2qC,IAAY3qC,EAC9ByqC,EAAMzqC,GAAK+xC,EAAYD,EAAO9xC,IAEhC,IAAI0kC,EAAOS,EAAcsF,GACzB,IACM8F,EACFyB,2BAA2BzB,EAAM5wC,KAAK6oB,IAAKkc,EAAMiG,GAEjDsH,yBAAyBtyC,KAAK6oB,IAAKkc,EAAMiG,WAG3CrG,OAAOp8B,KAAKw8B,GACZ,IAAS1kC,EAAI2qC,EAAU3qC,GAAK,IAAKA,EAAGskC,OAAOp8B,KAAKuiC,EAAMzqC,MAM1DgkC,EAAApiC,UAAAswC,qBAAA,SAAqB5L,GAEnB,IAAI6L,EAAwBzB,4BACxB0B,EAAsBrB,0BACtBsB,EAAoBC,wBACxBzB,0BAA0B,GAC1BI,wBAAwB,GACxBG,uBAAsB,GAGtB,IAAI5yB,EAAO+zB,2BAA2BjM,GAClCiK,EAAO5wC,KAAK0tC,qBAAqB7uB,EAAM,KAAM8nB,GAC7CmE,EAAQ9qC,KAAKukC,sBAYjB,OAXKuG,IACH9qC,KAAKukC,sBAAwBuG,EAAQtF,EAAc,CAAExlC,KAAKulC,kBAAkB,iBAE9E8M,2BAA2BzB,EAAM5wC,KAAK6oB,IAAKiiB,EAAO,GAClDnE,EAAOkM,yBAAyBjC,GAChC5wC,KAAK6tC,0BAGLqD,0BAA0BsB,GAC1BlB,wBAAwBmB,GACxBhB,sBAAsBiB,GACf/L,GAGTtC,EAAApiC,UAAA6wC,SAAA,WACE,OAA4C,GAArCC,wBAAwB/yC,KAAK6oB,MAGtCwb,EAAApiC,UAAA+wC,UAAA,WACEC,yBAAyBjzC,KAAK6oB,MAGhCwb,EAAApiC,UAAAixC,SAAA,SAASC,GACP,IAAIrN,EAAM9lC,KAAK0kC,IACfx6B,OAAO26B,0BAA4B,IACnC,IAAIS,EAAO8M,EAAYe,GACnBC,EAAmB,EACnBC,EAAsB,EAC1B,IACEC,gCAAgCxN,EAAK9lC,KAAK6oB,IAAKyc,GAC/C8N,EAAYG,EAAQzN,GACpB,IAAI0N,EAAcD,EAAQzN,EAAM,GAChCuN,EAAeE,EAAQzN,EAAM,GAC7B,IAAI2N,EAAM,IAAIC,EAGd,OAFAD,EAAIE,OA2jBV,SAAoB9L,EAAY57B,GAE9B,IADA,IAAIwnC,EAAM,IAAI9rC,WAAWsE,GAChB5L,EAAW,EAAGA,EAAI4L,IAAU5L,EACnCozC,EAAIpzC,GAAKsnC,KAASE,EAAMxnC,GAE1B,OAAOozC,EAhkBUG,CAAWR,EAAWI,GACnCC,EAAIhpB,UAAYopB,EAAWR,GACpBI,UAEHnO,GAAMX,OAAOp8B,KAAK+8B,GAClB8N,GAAWzO,OAAOp8B,KAAK6qC,GACvBC,GAAc1O,OAAOp8B,KAAK8qC,KAIlChP,EAAApiC,UAAA6xC,OAAA,WACE,MAAM,IAAI53B,MAAM,oBAGlBmoB,EAAApiC,UAAA8xC,QAAA,WACE,MAAM,IAAI73B,MAAM,oBAKVmoB,EAAApiC,UAAAsjC,kBAAR,SAA0ByO,GACxB,GAAW,MAAPA,EAAa,OAAO,EACxB,IAAIxP,EAAgBxkC,KAAKwkC,cACzB,GAAIA,EAAcjwB,IAAIy/B,GAAM,OAAcxP,EAActjC,IAAI8yC,GAC5D,IAAInM,EAAMuK,EAAY4B,GAEtB,OADAxP,EAActyB,IAAI8hC,EAAKnM,GAChBA,GAGTxD,EAAApiC,UAAAgyC,QAAA,mBACE/pC,OAAOlK,KAAK6oB,SACZ,IAAgB,IAAApC,EAAA3O,EAAA9X,KAAKwkC,cAAcpnB,UAAQY,EAAAyI,EAAAzO,QAAAgG,EAAA/F,KAAA+F,EAAAyI,EAAAzO,OAAA,CAAtC,IAAI6vB,EAAG7pB,EAAA1c,MAAiCqjC,OAAOp8B,KAAKs/B,qGACzD7nC,KAAKwkC,cAAgB,IAAIt9B,IACzBy9B,OAAOp8B,KAAKvI,KAAK0kC,KACjBC,OAAOp8B,KAAKvI,KAAKukC,uBACjBvkC,KAAKukC,sBAAwB,EAC7B2P,uBAAuBl0C,KAAK6oB,KAC5B7oB,KAAK6oB,IAAM,GAGbwb,EAAApiC,UAAAkyC,eAAA,WACE,OAAOC,EAASzyC,OAAO3B,OAGzBqkC,EAAApiC,UAAAoyC,gBAAA,SACE1N,EACA2N,EACAC,GAEA,QAHA,IAAAD,OAAA,QACA,IAAAC,MAAgBnxC,IAAIoxC,WAEhBD,EAAW,EAAG,OAAO,EAGzB,IAAIE,EACAC,EAEA,OALJH,GAAY,EAKAI,yBAAyBhO,IACnC,KAAKnX,EAAaolB,MAChB,OAAQhC,2BAA2BjM,IACjC,KAAKpX,EAAWrpB,IACd,OAAOlG,KAAKoD,IAAIyxC,0BAA0BlO,IAE5C,KAAKpX,EAAWppB,IACd,OAAOnG,KAAKqD,IACVyxC,6BAA6BnO,GAC7BoO,8BAA8BpO,IAGlC,KAAKpX,EAAW5oB,IACd,OAAO3G,KAAK6D,IAAImxC,0BAA0BrO,IAE5C,KAAKpX,EAAW3oB,IACd,OAAO5G,KAAK8D,IAAImxC,0BAA0BtO,IAE5C,KAAKpX,EAAW1oB,KAEd,OAAO,EAET,QACE,MAAM,IAAIqV,MAAM,0BAItB,KAAKsT,EAAa0lB,SAChB,OAAO5N,kBAAkBtnC,KAAK6oB,IAC5BssB,0BAA0BxO,GAC1BiM,2BAA2BjM,IAG/B,KAAKnX,EAAa4lB,UAChB,IAAIC,EAAaC,0BAA0B3O,GAC3C,IAAK0O,EAAY,MACjB,OAAO3N,mBAAmB1nC,KAAK6oB,IAAKwsB,EAAYzC,2BAA2BjM,IAE7E,KAAKnX,EAAa+lB,KAChB,KAAMd,EAAUz0C,KAAKq0C,gBAAgBmB,oBAAoB7O,GAAO2N,EAAeC,IAC7E,MAEF,OACEkB,sBAAsB9O,GAClBwB,oBAAoBnoC,KAAK6oB,IACvB6sB,sBAAsB/O,GACtBgP,uBAAuBhP,GACvBiM,2BAA2BjM,GAC3B8N,GAEF1M,cAAc/nC,KAAK6oB,IACjB6sB,sBAAsB/O,GACtBiP,sBAAsBjP,GAAQ,EAAI,EAClCgP,uBAAuBhP,GACvBkP,sBAAsBlP,GACtBiM,2BAA2BjM,GAC3B8N,GAIV,KAAKjlB,EAAasmB,MAChB,KAAMrB,EAAUz0C,KAAKq0C,gBAAgB0B,uBAAuBpP,GAAO2N,EAAeC,IAChF,MAEF,OAAO3N,eAAe5mC,KAAK6oB,IAAKmtB,oBAAoBrP,GAAO8N,GAE7D,KAAKjlB,EAAaymB,OAChB,KAAMxB,EAAUz0C,KAAKq0C,gBAAgB6B,uBAAuBvP,GAAO2N,EAAeC,IAChF,MAEF,KAAMG,EAAU10C,KAAKq0C,gBAAgB8B,wBAAwBxP,GAAO2N,EAAeC,IACjF,MAEF,OAAOvN,gBAAgBhnC,KAAK6oB,IAAKutB,qBAAqBzP,GAAO8N,EAASC,GAG1E,OAAO,GAKTrQ,EAAApiC,UAAAo0C,iBAAA,SAAiBz1C,GACf,IAAI0kC,EAAO8M,EAAYxxC,GACvB,IACE,OAAO01C,oCAAoCt2C,KAAK6oB,IAAKyc,WAErDX,OAAOp8B,KAAK+8B,KAIhBjB,EAAApiC,UAAAs0C,iBAAA,SAAiB5uB,GACf,OAAOksB,EAAW2C,oCAAoCx2C,KAAK6oB,IAAKlB,KAGlE0c,EAAApiC,UAAA0oB,iBAAA,SACEimB,EACAjK,EACA8P,EACAC,EACAC,GAEAC,kCAAkChG,EAAMjK,EAAM8P,EAAWC,EAAYC,IAnUvDtS,EAAAwS,kBAAkC,EAqUpDxS,EAp4BA,GAw4BA,SAAgByS,EAAgBnQ,GAC9B,OAAOgO,yBAAyBhO,GAz4BrBjnC,EAAA2kC,SAw4Bb3kC,EAAAo3C,kBAIAp3C,EAAAq3C,kBAAA,SAAkCpQ,GAChC,OAAOiM,2BAA2BjM,IAGpCjnC,EAAAs3C,iBAAA,SAAiCrQ,GAC/B,OAAOkO,0BAA0BlO,IAGnCjnC,EAAAu3C,oBAAA,SAAoCtQ,GAClC,OAAOmO,6BAA6BnO,IAGtCjnC,EAAAw3C,qBAAA,SAAqCvQ,GACnC,OAAOoO,8BAA8BpO,IAGvCjnC,EAAAy3C,iBAAA,SAAiCxQ,GAC/B,OAAOqO,0BAA0BrO,IAGnCjnC,EAAA03C,iBAAA,SAAiCzQ,GAC/B,OAAOsO,0BAA0BtO,IAGnCjnC,EAAA23C,iBAAA,SAAiC1Q,GAC/B,OAAOwO,0BAA0BxO,IAGnCjnC,EAAA43C,iBAAA,SAAiC3Q,GAC/B,OAAO4Q,0BAA0B5Q,IAGnCjnC,EAAA83C,iBAAA,SAAiC7Q,GAC/B,OAAO8Q,0BAA0B9Q,IAGnCjnC,EAAAg4C,WAAA,SAA2B/Q,GACzB,OAAOgR,uBAAuBhR,IAGhCjnC,EAAAk4C,iBAAA,SAAiCjR,GAC/B,OAAOkN,EAAWyB,0BAA0B3O,KAG9CjnC,EAAAm4C,YAAA,SAA4BlR,GAC1B,OAAOyP,qBAAqBzP,IAG9BjnC,EAAAo4C,cAAA,SAA8BnR,GAC5B,OAAOuP,uBAAuBvP,IAGhCjnC,EAAAq4C,eAAA,SAA+BpR,GAC7B,OAAOwP,wBAAwBxP,IAGjCjnC,EAAAs4C,WAAA,SAA2BrR,GACzB,OAAOqP,oBAAoBrP,IAG7BjnC,EAAAu4C,cAAA,SAA8BtR,GAC5B,OAAOoP,uBAAuBpP,IAGhCjnC,EAAAw4C,aAAA,SAA6BvR,GAC3B,OAAO+O,sBAAsB/O,IAG/BjnC,EAAAy4C,cAAA,SAA8BxR,GAC5B,OAAOgP,uBAAuBhP,IAGhCjnC,EAAA04C,WAAA,SAA2BzR,GACzB,OAAO6O,oBAAoB7O,IAG7BjnC,EAAA24C,aAAA,SAA6B1R,GAC3B,OAAOiP,sBAAsBjP,IAG/BjnC,EAAA44C,cAAA,SAA8B3R,GAC5B,OAAO4R,uBAAuB5R,IAGhCjnC,EAAA84C,eAAA,SAA+B7R,GAC7B,OAAO8R,wBAAwB9R,IAGjCjnC,EAAAg5C,YAAA,SAA4B/R,GAC1B,OAAOgS,qBAAqBhS,IAG9BjnC,EAAAk5C,cAAA,SAA8BjS,GAC5B,OAAOkS,uBAAuBlS,IAGhCjnC,EAAAo5C,aAAA,SAA6BnS,GAC3B,OAAOkN,EAAWkF,sBAAsBpS,KAG1CjnC,EAAAs5C,mBAAA,SAAmCrS,GACjC,OAAOsS,6BAA6BtS,IAGtCjnC,EAAAw5C,cAAA,SAA8BvS,EAAqBhf,GACjD,OAAOwxB,uBAAuBxS,EAAMhf,IAGtCjoB,EAAA05C,eAAA,SAA+BzS,GAC7B,OAAO0S,wBAAwB1S,IAGjCjnC,EAAA45C,UAAA,SAA0B3S,GACxB,OAAO4S,qBAAqB5S,IAG9BjnC,EAAA85C,WAAA,SAA2B7S,GACzB,OAAO8S,sBAAsB9S,IAG/BjnC,EAAAg6C,YAAA,SAA4B/S,GAC1B,OAAOkN,EAAW8F,qBAAqBhT,KAGzCjnC,EAAAk6C,YAAA,SAA4BjT,GAC1B,OAAOkT,qBAAqBlT,IAG9BjnC,EAAAo6C,aAAA,SAA6BnT,GAC3B,OAAOkN,EAAWkG,sBAAsBpT,KAG1CjnC,EAAAs6C,kBAAA,SAAkCrT,GAChC,OAAOsT,2BAA2BtT,IAGpCjnC,EAAAw6C,cAAA,SAA8BvT,GAC5B,OAAOwT,yBAAyBxT,IAGlCjnC,EAAA06C,cAAA,SAA8BzT,GAC5B,OAAO0T,0BAA0B1T,IAGnCjnC,EAAA46C,mBAAA,SAAmC3T,GACjC,OAAO4T,4BAA4B5T,IAGrCjnC,EAAA86C,aAAA,SAA6B7T,GAC3B,OAAO8T,sBAAsB9T,IAG/BjnC,EAAAg7C,eAAA,SAA+B/T,GAC7B,OAAOgU,wBAAwBhU,IAGjCjnC,EAAAk7C,cAAA,SAA8BjU,GAC5B,OAAOkN,EAAWgH,uBAAuBlU,KAG3CjnC,EAAAo7C,oBAAA,SAAoCnU,GAClC,OAAOoU,4BAA4BpU,IAGrCjnC,EAAAs7C,eAAA,SAA+BrU,EAAqBhf,GAClD,OAAOszB,wBAAwBtU,EAAMhf,IAGvCjoB,EAAAw7C,UAAA,SAA0BvU,GACxB,OAAOwU,mBAAmBxU,IAG5BjnC,EAAA07C,oBAAA,SAAoCzU,GAClC,OAAO0U,4BAA4B1U,IAGrCjnC,EAAA47C,eAAA,SAA+B3U,EAAqBhf,GAClD,OAAO4zB,wBAAwB5U,EAAMhf,IAGvCjoB,EAAA87C,YAAA,SAA4B7U,GAC1B,OAAOkN,EAAW4H,4BAA4B9U,KAKhDjnC,EAAAg8C,gBAAA,SAAgC9K,GAC9B,OAAOiC,yBAAyBjC,IAGlClxC,EAAAi8C,gBAAA,SAAgC/K,GAC9B,OAAOiD,EAAW+H,yBAAyBhL,KAG7ClxC,EAAAm8C,sBAAA,SAAsCjL,GACpC,OAAOkL,8BAA8BlL,IAGvClxC,EAAAq8C,qBAAA,SAAqCnL,EAAmBjpB,GACtD,OAAOq0B,0BAA0BpL,EAAMjpB,IAGzCjoB,EAAAu8C,sBAAA,SAAsCrL,GACpC,OAAOsL,2BAA2BtL,IAGpC,IAAAwD,EAAA,WAYE,SAAAA,KAoCF,OA3CSA,EAAAzyC,OAAP,SAAchC,GACZ,IAAIw8C,EAAW,IAAI/H,EAGnB,OAFA+H,EAASx8C,OAASA,EAClBw8C,EAAStzB,IAAMuzB,gBAAgBz8C,EAAOkpB,KAC/BszB,GAKT/H,EAAAnyC,UAAAo6C,SAAA,SAAS1xC,GACP,OAAO2xC,kBAAkBt8C,KAAK6oB,IAAKle,IAGrCypC,EAAAnyC,UAAAs6C,UAAA,SACEC,EACAC,EACA7S,EACAj/B,QADA,IAAAi/B,MAAA,QACA,IAAAj/B,MAAA,GAEA+xC,mBAAmBF,EAAMC,EAAI7S,EAAWj/B,IAG1CypC,EAAAnyC,UAAA06C,mBAAA,SAAmBhyC,EAAqBi/B,GACtC,OAAOgT,4BAA4B58C,KAAK6oB,IAAKle,EAAMi/B,IAGrDwK,EAAAnyC,UAAA46C,mBAAA,SACEL,EACAC,EACAK,EACAnyC,QAAA,IAAAA,MAAA,GAEA,IAAIo6B,EAAOS,EAAcsX,GACzB,IACEC,4BAA4BP,EAAMC,EAAI1X,EAAM+X,EAAQ7wC,OAAQtB,WAE5Dg6B,OAAOp8B,KAAKw8B,KAIhBqP,EAAAnyC,UAAA+6C,iBAAA,SAAiBC,EAAyBC,GACxC,OAAOC,0BAA0Bn9C,KAAK6oB,IAAKo0B,EAAOC,IAEtD9I,EAhDA,GA4FA,SAASpP,EAAaoY,GACpB,IAAKA,EAAK,OAAO,EAIjB,IAHA,IAAIC,EAAYD,EAAInxC,OAChB47B,EAAMlD,OAAOC,SAASyY,GACtBpR,EAAMpE,EACDxnC,EAAI,EAAGA,EAAIg9C,IAAah9C,EAC/BkmC,MAAU0F,IAAOmR,EAAI/8C,IAEvB,OAAOwnC,EAGT,SAASrC,EAAc8X,GACrB,IAAKA,EAAM,OAAO,EAGlB,IAFA,IAAIzV,EAAMlD,OAAOC,SAAS0Y,EAAKrxC,QAAU,GACrCggC,EAAMpE,EACDxnC,EAAI,EAAG8V,EAAImnC,EAAKrxC,OAAQ5L,EAAI8V,IAAK9V,EAAG,CAC3C,IAAIk9C,EAAMD,EAAKj9C,GAEfkmC,MAAU0F,EAAyB,IAAdsR,GACrBhX,MAAU0F,EAAM,EAAKsR,GAAS,EAAK,KACnChX,MAAU0F,EAAM,EAAKsR,GAAQ,GAAM,KACnChX,MAAU0F,EAAM,EAAKsR,IAAQ,IAC7BtR,GAAO,EAET,OAAOpE,EAGT,SAASV,EAAcqW,GACrB,OAAOhY,EAAcgY,GA2BvB,SAASpL,EAAY4B,GACnB,GAAW,MAAPA,EAAa,OAAO,EAIxB,IAHA,IAAInM,EAAMlD,OAAOC,SA1BnB,SAA0BoP,GAExB,IADA,IAAIhoC,EAAM,EACD3L,EAAI,EAAG8V,EAAI69B,EAAI/nC,OAAQ5L,EAAI8V,IAAK9V,EAAG,CAC1C,IAAIo9C,EAAIzJ,EAAI3nC,WAAWhM,GACnBo9C,GAAK,OAAUA,GAAK,OAAUp9C,EAAI,EAAI8V,IACxCsnC,EAAI,QAAgB,KAAJA,IAAc,IAA6B,KAAtBzJ,EAAI3nC,aAAahM,IAEpDo9C,GAAK,MACLzxC,EAEFA,GADSyxC,GAAK,KACP,EACEA,GAAK,MACP,EACEA,GAAK,QACP,EACEA,GAAK,SACP,EAEA,EAGX,OAAOzxC,EAKmB0xC,CAAiB1J,GAAO,GAE9C/H,EAAMpE,EACDxnC,EAAI,EAAG8V,EAAI69B,EAAI/nC,OAAQ5L,EAAI8V,IAAK9V,EAAG,CAC1C,IAAIo9C,EAAIzJ,EAAI3nC,WAAWhM,GACnBo9C,GAAK,OAAUA,GAAK,OAAUp9C,EAAI,EAAI8V,IACxCsnC,EAAI,QAAgB,KAAJA,IAAc,IAA6B,KAAtBzJ,EAAI3nC,aAAahM,IAEpDo9C,GAAK,IACPlX,MAAU0F,IAAOwR,GACRA,GAAK,MACdlX,MAAU0F,IAAQ,IAASwR,IAAM,GACjClX,MAAU0F,IAAQ,IAAqB,GAAZwR,IAClBA,GAAK,OACdlX,MAAU0F,IAAQ,IAASwR,IAAM,IACjClX,MAAU0F,IAAQ,IAASwR,IAAO,EAAK,IACvClX,MAAU0F,IAAQ,IAAqB,GAAZwR,IAClBA,GAAK,SACdlX,MAAU0F,IAAQ,IAASwR,IAAM,IACjClX,MAAU0F,IAAQ,IAASwR,IAAM,GAAM,IACvClX,MAAU0F,IAAQ,IAASwR,IAAO,EAAK,IACvClX,MAAU0F,IAAQ,IAAqB,GAAZwR,IAClBA,GAAK,UACdlX,MAAU0F,IAAQ,IAASwR,IAAM,IACjClX,MAAU0F,IAAQ,IAASwR,IAAM,GAAM,IACvClX,MAAU0F,IAAQ,IAASwR,IAAM,GAAM,IACvClX,MAAU0F,IAAQ,IAASwR,IAAO,EAAK,IACvClX,MAAU0F,IAAQ,IAAqB,GAAZwR,KAE3BlX,MAAU0F,IAAQ,IAASwR,IAAM,IACjClX,MAAU0F,IAAQ,IAASwR,IAAM,GAAM,IACvClX,MAAU0F,IAAQ,IAASwR,IAAM,GAAM,IACvClX,MAAU0F,IAAQ,IAASwR,IAAM,GAAM,IACvClX,MAAU0F,IAAQ,IAASwR,IAAO,EAAK,IACvClX,MAAU0F,IAAQ,IAAqB,GAAZwR,IAI/B,OADAlX,MAAU0F,EAAK,GACRpE,EAGT,SAAS0L,EAAQ1L,GACf,OACGF,KAASE,GACTF,KAASE,EAAM,IAAO,EACtBF,KAASE,EAAM,IAAM,GACrBF,KAASE,EAAM,IAAM,GAY1B,SAAgBgM,EAAWhM,GACzB,IAAKA,EAAK,OAAO,KAKjB,IAJA,IAEI8V,EACAC,EAASC,EAASC,EAASC,EAH3BC,EAAM,IAAIj3C,MAIP42C,EAAKhW,KAASE,MACR,IAAL8V,GAINC,EAAuB,GAAlBjW,KAASE,KACK,MAAT,IAAL8V,IAILE,EAAuB,GAAlBlW,KAASE,KACK,MAAT,IAAL8V,GACHA,GAAY,GAALA,IAAY,GAAOC,GAAM,EAAKC,GAErCC,EAAuB,GAAlBnW,KAASE,KACK,MAAT,IAAL8V,GACHA,GAAY,EAALA,IAAW,GAAOC,GAAM,GAAOC,GAAM,EAAKC,GAEjDC,EAAuB,GAAlBpW,KAASE,KAEZ8V,EADiB,MAAT,IAALA,IACS,EAALA,IAAW,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,EAAKC,GAGlD,EAALJ,IAAW,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,GAAOC,GAAM,EAD/C,GAAlBpW,KAASE,OAKpBmW,EAAIxxC,KAAKmxC,IApBPK,EAAIxxC,MAAY,GAALmxC,IAAY,EAAKC,IAL5BI,EAAIxxC,KAAKmxC,GAmCb,OAAO72C,OAAOm3C,eAAeD,GA1PlBt+C,EAAA00C,WA+Mb10C,EAAAm0C,aA+CA,IAAAH,EAAA,WAKA,OALA,gBAAah0C,EAAAg0C,eAQbh0C,EAAAw+C,yBAAA,SAAgBA,EAAyBvX,GAEvC,GAAIiM,2BAA2BjM,IAASpX,EAAW4uB,YAAa,OAAO,EAEvE,OAAQxJ,yBAAyBhO,IAC/B,KAAKnX,EAAa2uB,YAClB,KAAK3uB,EAAa4uB,OAAQ,OAAO,EACjC,KAAK5uB,EAAa6uB,MAAO,OAA2C,GAApCpE,2BAA2BtT,GAC3D,KAAKnX,EAAa8uB,MAChB,IAAKvF,sBAAsBpS,GAAO,CAChC,IAAI4X,EAActF,6BAA6BtS,GAC/C,OAAO4X,EAAc,GAAKL,EAAyB/E,uBAAuBxS,EAAM4X,EAAc,KAIpG,OAAO,GAIT7+C,EAAA8+C,SAAA,SAA4B7X,EAAqB8X,EAAS51C,GACxD,OAAQiuC,EAAgBnQ,IACtB,KAAKnX,EAAa8uB,MAChB,IAAK,IAAIj+C,EAAI,EAAGyB,EAAIm3C,6BAA6BtS,GAAOtmC,EAAIyB,IAAKzB,EAC/DwI,EAAMswC,uBAAuBxS,EAAMtmC,GAAIo+C,GAEzC,MAEF,KAAKjvB,EAAakvB,GAChB71C,EAAMwwC,wBAAwB1S,GAAO8X,GACrC51C,EAAM0wC,qBAAqB5S,GAAO8X,GAClC,IAAIpU,EAAUoP,sBAAsB9S,GAChC0D,GAASxhC,EAAMwhC,EAASoU,GAC5B,MAEF,KAAKjvB,EAAamvB,KAChB91C,EAAMgxC,qBAAqBlT,GAAO8X,GAClC,MAEF,KAAKjvB,EAAa6uB,MAChB,IAAIzU,EAAYqQ,2BAA2BtT,GACvCiD,GAAW/gC,EAAM+gC,EAAW6U,GAChC,MAEF,KAAKjvB,EAAaovB,OAChB/1C,EAAMg2C,4BAA4BlY,GAAO8X,GACzC,MAEF,KAAKjvB,EAAasvB,KAChB,IAASz+C,EAAI,EAAGyB,EAAIi5C,4BAA4BpU,GAAOtmC,EAAIyB,IAAKzB,EAC9DwI,EAAMoyC,wBAAwBtU,EAAMtmC,GAAIo+C,GAE1C,MAEF,KAAKjvB,EAAauvB,aAChB,IAAS1+C,EAAI,EAAGyB,EAAIk9C,oCAAoCrY,GAAOtmC,EAAIyB,IAAKzB,EACtEwI,EAAMo2C,gCAAgCtY,EAAMtmC,GAAIo+C,GAElD,MAEF,KAAKjvB,EAAa0lB,SAChB,MAEF,KAAK1lB,EAAa0vB,SAChBr2C,EAAM4uC,0BAA0B9Q,GAAO8X,GACvC,MAEF,KAAKjvB,EAAa4lB,UAChB,MAEF,KAAK5lB,EAAa2vB,UAChBt2C,EAAMu2C,2BAA2BzY,GAAO8X,GACxC,MAEF,KAAKjvB,EAAa+lB,KAChB1sC,EAAM2sC,oBAAoB7O,GAAO8X,GACjC,MAEF,KAAKjvB,EAAa6vB,MAChBx2C,EAAM8vC,qBAAqBhS,GAAO8X,GAClC51C,EAAMgwC,uBAAuBlS,GAAO8X,GACpC,MAEF,KAAKjvB,EAAa8vB,UAChBz2C,EAAM02C,yBAAyB5Y,GAAO8X,GACtC51C,EAAM22C,2BAA2B7Y,GAAO8X,GACxC,MAEF,KAAKjvB,EAAaiwB,cAChB52C,EAAM62C,6BAA6B/Y,GAAO8X,GAC1C51C,EAAM82C,kCAAkChZ,GAAO8X,GAC/C51C,EAAM+2C,qCAAqCjZ,GAAO8X,GAClD,MAEF,KAAKjvB,EAAaqwB,WAChBh3C,EAAMi3C,0BAA0BnZ,GAAO8X,GACvC51C,EAAMk3C,+BAA+BpZ,GAAO8X,GAC5C51C,EAAMm3C,8BAA8BrZ,GAAO8X,GAC3C,MAEF,KAAKjvB,EAAaywB,aAChBp3C,EAAMq3C,4BAA4BvZ,GAAO8X,GACzC,MAEF,KAAKjvB,EAAa2wB,YAChBt3C,EAAMu3C,2BAA2BzZ,GAAO8X,GACxC,MAEF,KAAKjvB,EAAa6wB,YAChBx3C,EAAMy3C,2BAA2B3Z,GAAO8X,GACxC51C,EAAM03C,6BAA6B5Z,GAAO8X,GAC1C,MAEF,KAAKjvB,EAAagxB,YAChB33C,EAAM43C,4BAA4B9Z,GAAO8X,GACzC51C,EAAM63C,6BAA6B/Z,GAAO8X,GAC1C,MAEF,KAAKjvB,EAAamxB,cAChB93C,EAAM+3C,8BAA8Bja,GAAO8X,GAC3C51C,EAAMg4C,+BAA+Bla,GAAO8X,GAC5C51C,EAAMi4C,8BAA8Bna,GAAO8X,GAC3C,MAEF,KAAKjvB,EAAauxB,UAChBl4C,EAAMm4C,yBAAyBra,GAAO8X,GACtC51C,EAAMo4C,2BAA2Bta,GAAO8X,GACxC,MAEF,KAAKjvB,EAAa0xB,WAChBr4C,EAAMs4C,2BAA2Bxa,GAAO8X,GACxC51C,EAAMu4C,6BAA6Bza,GAAO8X,GAC1C51C,EAAMw4C,2BAA2B1a,GAAO8X,GACxC,MAEF,KAAKjvB,EAAa8xB,SAChB,MAEF,KAAK9xB,EAAa+xB,WAChB14C,EAAM24C,2BAA2B7a,GAAO8X,GACxC51C,EAAM44C,6BAA6B9a,GAAO8X,GAC1C51C,EAAM64C,2BAA2B/a,GAAO8X,GACxC,MAEF,KAAKjvB,EAAamyB,WAChB94C,EAAM+4C,2BAA2Bjb,GAAO8X,GACxC51C,EAAMg5C,4BAA4Blb,GAAO8X,GACzC51C,EAAMi5C,2BAA2Bnb,GAAO8X,GACxC,MAEF,KAAKjvB,EAAaolB,MAChB,MAEF,KAAKplB,EAAasmB,MAChBjtC,EAAMktC,uBAAuBpP,GAAO8X,GACpC,MAEF,KAAKjvB,EAAaymB,OAChBptC,EAAMqtC,uBAAuBvP,GAAO8X,GACpC51C,EAAMstC,wBAAwBxP,GAAO8X,GACrC,MAEF,KAAKjvB,EAAauyB,OAChBl5C,EAAMsxC,yBAAyBxT,GAAO8X,GACtC51C,EAAMwxC,0BAA0B1T,GAAO8X,GACvC51C,EAAM0xC,4BAA4B5T,GAAO8X,GACzC,MAEF,KAAKjvB,EAAawyB,KAChBn5C,EAAM4xC,sBAAsB9T,GAAO8X,GACnC,MAEF,KAAKjvB,EAAa4uB,OAChBv1C,EAAM8xC,wBAAwBhU,GAAO8X,GACrC,MAEF,KAAKjvB,EAAayyB,KAChB,IAAS5hD,EAAI,EAAGyB,EAAIu5C,4BAA4B1U,GAAOtmC,EAAIyB,IAAKzB,EAC9DwI,EAAM0yC,wBAAwB5U,EAAMtmC,GAAIo+C,GAE1C,MAEF,KAAKjvB,EAAa0yB,IAGlB,KAAK1yB,EAAa2uB,YAChB,MAEF,QAASj0C,QAAO,GAElB,OAAO,kaCv6DT,IAAAoD,EAAAnN,EAAA,GAOAgiD,EAAAhiD,EAAA,GAYST,EAAA0iD,MAXPD,EAAAC,MAWc1iD,EAAA+b,MATd0mC,EAAA1mC,MAGF,IASYhF,EATZ9M,EAAAxJ,EAAA,IASA,SAAYsW,GAEVA,IAAA,mBAGAA,IAAA,eACAA,IAAA,uBACAA,IAAA,iCACAA,IAAA,yBACAA,IAAA,yBAGAA,IAAA,2BACAA,IAAA,yBACAA,IAAA,mBACAA,IAAA,eACAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,kCACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,4BACAA,IAAA,sBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,kCACAA,IAAA,oCACAA,IAAA,sBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,gBACAA,IAAA,8BACAA,IAAA,gCACAA,IAAA,8BAGAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,YACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,kCACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,cACAA,IAAA,YACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,oBACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,wBACAA,IAAA,gBACAA,IAAA,kBAGAA,IAAA,wCACAA,IAAA,sCACAA,IAAA,gDACAA,IAAA,wCACAA,IAAA,8CACAA,IAAA,0CACAA,IAAA,0DACAA,IAAA,gDACAA,IAAA,0CACAA,IAAA,gDACAA,IAAA,sCACAA,IAAA,8CAGAA,IAAA,0BACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,sBA1EF,CAAYA,EAAA/W,EAAA+W,WAAA/W,EAAA+W,SAAQ,KA8EpB/W,EAAA2iD,oBAAA,SAAoC7rC,GAClC,OAAQA,GACN,KAAKC,EAASqM,QACd,KAAKrM,EAAS6rC,KACd,KAAK7rC,EAAS8rC,KACd,KAAK9rC,EAAS+rC,MAAO,OAAO,EAE9B,OAAO,GAIT9iD,EAAA+iD,eAAA,SAA+BjsC,GAC7B,OAAQA,GACN,KAAKC,EAASisC,WACd,KAAKjsC,EAASksC,UACd,KAAKlsC,EAASmsC,KACd,KAAKnsC,EAASosC,cACd,KAAKpsC,EAASqsC,cACd,KAAKrsC,EAASssC,eACd,KAAKtsC,EAASusC,MAAO,OAAO,EAE9B,OAAO,GAITtjD,EAAAujD,sBAAA,SAAsCzsC,GACpC,OAAQA,GACN,KAAKC,EAASisC,WACd,KAAKjsC,EAASssC,eAAgB,OAAO,EAEvC,OAAO,GAIT,IAAA9vC,EAAA,oBAAAA,KA66BA,OAp6BSA,EAAAiwC,eAAP,SACEtiD,EACAiK,GAEA,IAAIygC,EAAW,IAAI6X,EAInB,OAHA7X,EAASzgC,MAAQA,EACjBygC,EAASj4B,WAAazS,EACtB0qC,EAAStzB,KAAO,KACTszB,GAGFr4B,EAAAW,qBAAP,SACEhT,EACAiK,GAEA,OAAOoI,EAAKiwC,eAAejwC,EAAKE,2BAA2BvS,EAAMiK,GAAQA,IAGpEoI,EAAAU,WAAP,SACE/S,EACAorB,EACAo3B,EACAv4C,GAEA,IAAIgU,EAAO,IAAIwkC,EAKf,OAJAxkC,EAAKhU,MAAQA,EACbgU,EAAKje,KAAOA,EACZie,EAAKmN,cAAgBA,EACrBnN,EAAKukC,WAAaA,EACXvkC,GAGF5L,EAAAM,kBAAP,SACE1I,GAEA,OAAOoI,EAAKU,WACVV,EAAKW,qBAAqB,GAAI/I,GAC9B,MACA,EACAA,IAIGoI,EAAAqwC,oBAAP,SACE1iD,EACAsgB,EACAqiC,EACA14C,GAEA,IAAI24C,EAAO,IAAIC,EAKf,OAJAD,EAAK34C,MAAQA,EACb24C,EAAK5iD,KAAOA,EACZ4iD,EAAKtiC,YAAcA,EACnBsiC,EAAKD,YAAcA,EACZC,GAGFvwC,EAAAywC,gBAAP,SACE9iD,EACAie,EACAsI,EACA3Q,EACA3L,GAEA,IAAI24C,EAAO,IAAIG,EAMf,OALAH,EAAK34C,MAAQA,EACb24C,EAAK5iD,KAAOA,EACZ4iD,EAAK3kC,KAAOA,EACZ2kC,EAAKr8B,YAAcA,EACnBq8B,EAAKI,cAAgBptC,EACdgtC,GAGFvwC,EAAAS,gBAAP,SACEmwC,EACA1Y,EACA2Y,EACAV,EACAv4C,GAEA,IAAIk5C,EAAM,IAAIC,EAMd,OALAD,EAAIl5C,MAAQA,EACZk5C,EAAIF,WAAaA,EACjBE,EAAI5Y,WAAaA,EACjB4Y,EAAID,iBAAmBA,EACvBC,EAAIX,WAAaA,EACVW,GAKF9wC,EAAAgxC,gBAAP,SACErjD,EACAsjD,EACAr5C,GAEA,IAAIs5C,EAAO,IAAIC,EAKf,OAJAD,EAAKt5C,MAAQA,EACbs5C,EAAKvjD,KAAOA,EACZujD,EAAKvhC,UAAYshC,EACjBC,EAAK71C,cAAgBkS,EAAoB5f,GAClCujD,GAGFlxC,EAAAoxC,cAAP,SACEt4C,EACAyK,EACA3L,GAEA,IAAIy5C,EAAO,IAAIC,EAIf,OAHAD,EAAKz5C,MAAQA,EACby5C,EAAKE,YAAchuC,EACnB8tC,EAAKv4C,KAAOA,EACLu4C,GAKFrxC,EAAAE,2BAAP,SACEvS,EACAiK,EACA45C,QAAA,IAAAA,OAAA,GAEA,IAAI9d,EAAO,IAAI+d,EAKf,OAJA/d,EAAK97B,MAAQA,EACb87B,EAAK56B,KAAOnL,EACZ+lC,EAAKge,OAAS/jD,EACd+lC,EAAK8d,SAAWA,EACT9d,GAGF1zB,EAAA2xC,gCAAP,SACE/5C,GAEA,IAAI87B,EAAO,IAAI+d,EAGf,OAFA/d,EAAK97B,MAAQA,EACb87B,EAAK56B,KAAO,GACL46B,GAGF1zB,EAAA4xC,6BAAP,SACEhlC,EACAhV,GAEA,IAAI87B,EAAO,IAAIme,EAGf,OAFAne,EAAK97B,MAAQA,EACb87B,EAAKoe,mBAAqBllC,EACnB8mB,GAGF1zB,EAAA+xC,0BAAP,SACEC,EACAlb,EACAmb,EACAr6C,GAEA,IAAI87B,EAAO,IAAIwe,EAKf,OAJAxe,EAAK97B,MAAQA,EACb87B,EAAKse,cAAgBA,EACrBte,EAAKoD,WAAaA,EAClBpD,EAAKue,OAASA,EACPve,GAGF1zB,EAAAmyC,uBAAP,SACEC,EACAve,EACAC,EACAl8B,GAEA,IAAI87B,EAAO,IAAI2e,EAKf,OAJA3e,EAAK97B,MAAQA,EACb87B,EAAK0e,SAAWA,EAChB1e,EAAKG,KAAOA,EACZH,EAAKI,MAAQA,EACNJ,GAGF1zB,EAAAsyC,qBAAP,SACExb,EACAyb,EACAtB,EACAr5C,GAEA,IAAI87B,EAAO,IAAI8e,EAKf,OAJA9e,EAAK97B,MAAQA,EACb87B,EAAKoD,WAAaA,EAClBpD,EAAK3a,cAAgBw5B,EACrB7e,EAAK/jB,UAAYshC,EACVvd,GAGF1zB,EAAAyyC,sBAAP,SACEpxC,GAEA,IAAIqyB,EAAO,IAAIgf,EAGf,OAFAhf,EAAK97B,MAAQyJ,EAAYzJ,MACzB87B,EAAKryB,YAAcA,EACZqyB,GAGF1zB,EAAA2yC,sBAAP,SACEC,EACAh7C,GAEA,IAAI87B,EAAO,IAAImf,EAGf,OAFAnf,EAAK97B,MAAQA,EACb87B,EAAKkf,YAAcA,EACZlf,GAGF1zB,EAAA8yC,4BAAP,SACEl7C,GAEA,IAAI87B,EAAO,IAAIqf,EAEf,OADArf,EAAK97B,MAAQA,EACN87B,GAGF1zB,EAAAgzC,8BAAP,SACElc,EACApxB,EACA9N,GAEA,IAAI87B,EAAO,IAAIuf,EAIf,OAHAvf,EAAK97B,MAAQA,EACb87B,EAAKoD,WAAaA,EAClBpD,EAAKwf,kBAAoBxtC,EAClBguB,GAGF1zB,EAAAmzC,sBAAP,SACEv7C,GAEA,IAAI87B,EAAO,IAAI0f,EAEf,OADA1f,EAAK97B,MAAQA,EACN87B,GAGF1zB,EAAAqzC,6BAAP,SACEhlD,EACAuJ,GAEA,IAAI87B,EAAO,IAAI4f,EAGf,OAFA5f,EAAK97B,MAAQA,EACb87B,EAAKrlC,MAAQA,EACNqlC,GAGF1zB,EAAAuzC,yBAAP,SACElyC,GAEA,IAAIqyB,EAAO,IAAI8f,EAGf,OAFA9f,EAAK97B,MAAQyJ,EAAYzJ,MACzB87B,EAAKryB,YAAcA,EACZqyB,GAGF1zB,EAAAyzC,2BAAP,SACE3c,EACA4c,EACA97C,GAEA,IAAI87B,EAAO,IAAIigB,EAIf,OAHAjgB,EAAK97B,MAAQA,EACb87B,EAAKoD,WAAaA,EAClBpD,EAAKggB,OAASA,EACPhgB,GAGF1zB,EAAA4zC,+BAAP,SACEvlD,EACAuJ,GAEA,IAAI87B,EAAO,IAAImgB,EAGf,OAFAngB,EAAK97B,MAAQA,EACb87B,EAAKrlC,MAAQA,EACNqlC,GAGF1zB,EAAA8zC,oBAAP,SACEhd,EACAyb,EACAtB,EACAr5C,GAEA,IAAI87B,EAAO,IAAIqgB,EAKf,OAJArgB,EAAK97B,MAAQA,EACb87B,EAAKoD,WAAaA,EAClBpD,EAAK3a,cAAgBw5B,EACrB7e,EAAK/jB,UAAYshC,EACVvd,GAGF1zB,EAAAg0C,qBAAP,SACEp8C,GAEA,IAAI87B,EAAO,IAAIugB,EAEf,OADAvgB,EAAK97B,MAAQA,EACN87B,GAGF1zB,EAAAk0C,8BAAP,SACErc,EACA1tB,EACAvS,GAEA,IAAI87B,EAAO,IAAIygB,EAIf,OAHAzgB,EAAK97B,MAAQA,EACb87B,EAAKmE,MAAQA,EACbnE,EAAKvpB,OAASA,EACPupB,GAGF1zB,EAAAo0C,8BAAP,SACEtd,EACAl/B,GAEA,IAAI87B,EAAO,IAAI2gB,EAGf,OAFA3gB,EAAK97B,MAAQA,EACb87B,EAAKoD,WAAaA,EACXpD,GAGF1zB,EAAAs0C,+BAAP,SACExd,EACA/nC,EACA6I,GAEA,IAAI87B,EAAO,IAAI6gB,EAIf,OAHA7gB,EAAK97B,MAAQA,EACb87B,EAAKoD,WAAaA,EAClBpD,EAAK3kC,SAAWA,EACT2kC,GAGF1zB,EAAAw0C,8BAAP,SACEC,EACA30C,EACAlI,GAEA,IAAI87B,EAAO,IAAIghB,EAIf,OAHAhhB,EAAK97B,MAAQA,EACb87B,EAAK+gB,QAAUA,EACf/gB,EAAKihB,aAAe70C,EACb4zB,GAGF1zB,EAAA40C,wBAAP,SACEje,EACAke,EACAC,EACAl9C,GAEA,IAAI87B,EAAO,IAAIqhB,EAKf,OAJArhB,EAAK97B,MAAQA,EACb87B,EAAKiD,UAAYA,EACjBjD,EAAKmhB,OAASA,EACdnhB,EAAKohB,OAASA,EACPphB,GAGF1zB,EAAAg1C,8BAAP,SACE3mD,EACAuJ,GAEA,IAAI87B,EAAO,IAAIuhB,EAGf,OAFAvhB,EAAK97B,MAAQA,EACb87B,EAAKrlC,MAAQA,EACNqlC,GAGF1zB,EAAAk1C,sBAAP,SACEt9C,GAEA,IAAI87B,EAAO,IAAIyhB,EAEf,OADAzhB,EAAK97B,MAAQA,EACN87B,GAGF1zB,EAAAo1C,qBAAP,SACEx9C,GAEA,IAAI87B,EAAO,IAAI2hB,EAEf,OADA3hB,EAAK97B,MAAQA,EACN87B,GAGF1zB,EAAAs1C,qBAAP,SACE19C,GAEA,IAAI87B,EAAO,IAAI6hB,EAEf,OADA7hB,EAAK97B,MAAQA,EACN87B,GAGF1zB,EAAAw1C,6BAAP,SACEpD,EACAqD,EACA79C,GAEA,IAAI87B,EAAO,IAAIgiB,EAIf,OAHAhiB,EAAK97B,MAAQA,EACb87B,EAAK0e,SAAWA,EAChB1e,EAAK+hB,QAAUA,EACR/hB,GAGF1zB,EAAA21C,4BAAP,SACEvD,EACAqD,EACA79C,GAEA,IAAI87B,EAAO,IAAIkiB,EAIf,OAHAliB,EAAK97B,MAAQA,EACb87B,EAAK0e,SAAWA,EAChB1e,EAAK+hB,QAAUA,EACR/hB,GAKF1zB,EAAA61C,qBAAP,SACEzyC,EACAxL,GAEA,IAAIs5C,EAAO,IAAI4E,GAGf,OAFA5E,EAAKt5C,MAAQA,EACbs5C,EAAK9tC,WAAaA,EACX8tC,GAGFlxC,EAAA+1C,qBAAP,SACExf,EACA3+B,GAEA,IAAIs5C,EAAO,IAAI8E,GAGf,OAFA9E,EAAKt5C,MAAQA,EACbs5C,EAAK3a,MAAQA,EACN2a,GAGFlxC,EAAAi2C,uBAAP,SACE71C,EACAwT,EACA3F,EACAJ,EACApC,EACAyB,EACApN,EACAlI,GAEA,IAAIs5C,EAAO,IAAIgF,GASf,OARAhF,EAAKt5C,MAAQA,EACbs5C,EAAKpxC,MAAQA,EACboxC,EAAKvjD,KAAOyS,EACZ8wC,EAAKt9B,eAAiBA,EACtBs9B,EAAKjjC,YAAcA,EACnBijC,EAAKrjC,gBAAkBA,EACvBqjC,EAAKzlC,QAAUA,EACfylC,EAAKhkC,WAAaA,EACXgkC,GAGFlxC,EAAAm2C,wBAAP,SACE5f,EACA3+B,GAEA,IAAIs5C,EAAO,IAAIkF,GAGf,OAFAlF,EAAKt5C,MAAQA,EACbs5C,EAAK3a,MAAQA,EACN2a,GAGFlxC,EAAAq2C,kBAAP,SACE/yC,EACAqzB,EACA/+B,GAEA,IAAIs5C,EAAO,IAAIoF,GAIf,OAHApF,EAAKt5C,MAAQA,EACbs5C,EAAK5tC,UAAYA,EACjB4tC,EAAKva,UAAYA,EACVua,GAGFlxC,EAAAu2C,qBAAP,SACE3+C,GAEA,IAAIs5C,EAAO,IAAIsF,GAEf,OADAtF,EAAKt5C,MAAQA,EACNs5C,GAGFlxC,EAAAy2C,sBAAP,SACE9oD,EACA8d,EACAyB,EACApN,EACAlI,GAEA,IAAIs5C,EAAO,IAAIwF,GAMf,OALAxF,EAAKt5C,MAAQA,EACbs5C,EAAKpxC,MAAQA,EACboxC,EAAKvjD,KAAOA,EACZujD,EAAK/mC,OAASsB,EACdylC,EAAKhkC,WAAaA,EACXgkC,GAGFlxC,EAAA22C,2BAAP,SACEhpD,EACAU,EACAyR,EACAlI,GAEA,IAAIs5C,EAAO,IAAI0F,GAKf,OAJA1F,EAAKt5C,MAAQA,EACbs5C,EAAKpxC,MAAQA,EACboxC,EAAKvjD,KAAOA,EACZujD,EAAK7iD,MAAQA,EACN6iD,GAGFlxC,EAAA62C,sBAAP,SACEprC,EACA0F,EACA2lC,EACAl/C,GAEA,IAAIs5C,EAAO,IAAI6F,GAIf,GAHA7F,EAAKt5C,MAAQA,EACbs5C,EAAKzlC,QAAUA,EACfylC,EAAK//B,KAAOA,EACRA,EAAM,CACR,IAAI1Y,EAAiB/B,EAAAsgD,cAAc7lC,EAAK9iB,OACpC8iB,EAAK9iB,MAAM4oD,WAAW,KACxB/F,EAAKz4C,eAAiB/B,EAAAwgD,YACpBz+C,EACAb,EAAMY,OAAOC,iBAGVA,EAAew+C,WAAW58C,EAAAxK,kBAC7B4I,EAAiB4B,EAAAxK,eAAiB4I,GAEpCy4C,EAAKz4C,eAAiBA,GAExBy4C,EAAKlgC,aAAemmC,GAAmBjG,EAAKz4C,qBAE5Cy4C,EAAKz4C,eAAiB,KACtBy4C,EAAKlgC,aAAe,KAGtB,OADAkgC,EAAK4F,UAAYA,EACV5F,GAGFlxC,EAAAo3C,6BAAP,SACE/1C,EACAzJ,GAEA,IAAIs5C,EAAO,IAAImG,GAGf,OAFAnG,EAAK7vC,YAAcA,EACnB6vC,EAAKt5C,MAAQA,EACNs5C,GAGFlxC,EAAAs3C,4BAAP,SACE3pD,EACAmtC,EACAljC,GAEA,IAAIs5C,EAAO,IAAIqG,GAIf,OAHArG,EAAKt5C,MAAQA,EACbs5C,EAAKvjD,KAAOA,EACZujD,EAAKpW,aAAeA,EACboW,GAGFlxC,EAAAw3C,mBAAP,SACE7pD,EACAmtC,EACAljC,GAEA,IAAI24C,EAAO,IAAIkH,GAKf,OAJAlH,EAAK34C,MAAQA,EACb24C,EAAK1qC,UAAYlY,EACZmtC,IAAcA,EAAentC,GAClC4iD,EAAKn/B,aAAe0pB,EACbyV,GAGFvwC,EAAA03C,0BAAP,SACE5gB,GAEA,IAAIoa,EAAO,IAAIyG,GAGf,OAFAzG,EAAKt5C,MAAQk/B,EAAWl/B,MACxBs5C,EAAKpa,WAAaA,EACXoa,GAGFlxC,EAAA43C,kBAAP,SACEjhB,EACAQ,EACAC,EACAx/B,GAEA,IAAIs5C,EAAO,IAAI2G,GAKf,OAJA3G,EAAKt5C,MAAQA,EACbs5C,EAAKva,UAAYA,EACjBua,EAAK/Z,OAASA,EACd+Z,EAAK9Z,QAAUA,EACR8Z,GAGFlxC,EAAA83C,sBAAP,SACEC,EACA5mC,EACAvZ,GAEA,IAAIs5C,EAAO,IAAI8G,GACf9G,EAAKt5C,MAAQA,EACbs5C,EAAK5/B,aAAeymC,EACpB7G,EAAK1/B,cAAgB,KACrB0/B,EAAK//B,KAAOA,EACZ,IAAI1Y,EAAiB/B,EAAAsgD,cAAc7lC,EAAK9iB,OAaxC,OAZI8iB,EAAK9iB,MAAM4oD,WAAW,KACxB/F,EAAKz4C,eAAiB/B,EAAAwgD,YACpBz+C,EACAb,EAAMY,OAAOC,iBAGVA,EAAew+C,WAAW58C,EAAAxK,kBAC7B4I,EAAiB4B,EAAAxK,eAAiB4I,GAEpCy4C,EAAKz4C,eAAiBA,GAExBy4C,EAAKlgC,aAAemmC,GAAmBjG,EAAKz4C,gBACrCy4C,GAGFlxC,EAAAi4C,kCAAP,SACE73C,EACA+Q,EACAvZ,GAEA,IAAIs5C,EAAO,IAAI8G,GACf9G,EAAKt5C,MAAQA,EACbs5C,EAAK5/B,aAAe,KACpB4/B,EAAK1/B,cAAgBpR,EACrB8wC,EAAK//B,KAAOA,EACZ,IAAI1Y,EAAiB/B,EAAAsgD,cAAc7lC,EAAK9iB,OAaxC,OAZI8iB,EAAK9iB,MAAM4oD,WAAW,KACxB/F,EAAKz4C,eAAiB/B,EAAAwgD,YACpBz+C,EACAb,EAAMY,OAAOC,iBAGVA,EAAew+C,WAAW58C,EAAAxK,kBAC7B4I,EAAiB4B,EAAAxK,eAAiB4I,GAEpCy4C,EAAKz4C,eAAiBA,GAExBy4C,EAAKlgC,aAAemmC,GAAmBjG,EAAKz4C,gBACrCy4C,GAGFlxC,EAAAk4C,wBAAP,SACEprC,EACAnf,EACAiK,GAEA,IAAI24C,EAAO,IAAI4H,GAKf,OAJA5H,EAAK34C,MAAQA,EACb24C,EAAKzjC,YAAcA,EACdnf,IAAMA,EAAOmf,GAClByjC,EAAK5iD,KAAOA,EACL4iD,GAGFvwC,EAAAo4C,2BAAP,SACEzqD,EACAimB,EACA3F,EACAxC,EACAyB,EACApN,EACAlI,GAEA,IAAIs5C,EAAO,IAAImH,GAQf,OAPAnH,EAAKt5C,MAAQA,EACbs5C,EAAKpxC,MAAQA,EACboxC,EAAKvjD,KAAOA,EACZujD,EAAKt9B,eAAiBA,EACtBs9B,EAAKjjC,YAAcA,EACnBijC,EAAKzlC,QAAUA,EACfylC,EAAKhkC,WAAaA,EACXgkC,GAGFlxC,EAAAs4C,uBAAP,SACE3qD,EACAie,EACAsI,EACAhH,EACApN,EACAlI,GAEA,IAAIs5C,EAAO,IAAIqH,GAOf,OANArH,EAAKt5C,MAAQA,EACbs5C,EAAKpxC,MAAQA,EACboxC,EAAKvjD,KAAOA,EACZujD,EAAKtlC,KAAOA,EACZslC,EAAKh9B,YAAcA,EACnBg9B,EAAKhkC,WAAaA,EACXgkC,GAGFlxC,EAAAw4C,mBAAP,SACEtkC,EACAyiB,EACA8hB,EACAn1C,EACA1L,GAEA,IAAIs5C,EAAO,IAAIwH,GAMf,OALAxH,EAAKt5C,MAAQA,EACbs5C,EAAKh9B,YAAcA,EACnBg9B,EAAKva,UAAYA,EACjBua,EAAKuH,YAAcA,EACnBvH,EAAK5tC,UAAYA,EACV4tC,GAGFlxC,EAAAQ,0BAAP,SACE7S,EACAimB,EACA7S,EACA+T,EACA5H,EACApN,EACAiV,EACAnd,GAEA,IAAIs5C,EAAO,IAAIyH,GASf,OARAzH,EAAKt5C,MAAQA,EACbs5C,EAAKpxC,MAAQA,EACboxC,EAAKvjD,KAAOA,EACZujD,EAAKt9B,eAAiBA,EACtBs9B,EAAKnwC,UAAYA,EACjBmwC,EAAKp8B,KAAOA,EACZo8B,EAAKhkC,WAAaA,EAClBgkC,EAAKn8B,UAAYA,EACVm8B,GAGFlxC,EAAA44C,gCAAP,SACEC,EACAC,EACAlhD,GAEA,IAAI24C,EAAO,IAAIwI,GAIf,OAHAxI,EAAK34C,MAAQA,EACb24C,EAAKsI,QAAUA,EACftI,EAAKuI,UAAYA,EACVvI,GAGFvwC,EAAAg5C,wBAAP,SACErrD,EACAimB,EACA7S,EACA+T,EACA5H,EACApN,EACAlI,GAEA,IAAIs5C,EAAO,IAAI+H,GAQf,OAPA/H,EAAKt5C,MAAQA,EACbs5C,EAAKpxC,MAAQA,EACboxC,EAAKvjD,KAAOA,EACZujD,EAAKt9B,eAAiBA,EACtBs9B,EAAKnwC,UAAYA,EACjBmwC,EAAKp8B,KAAOA,EACZo8B,EAAKhkC,WAAaA,EACXgkC,GAGFlxC,EAAAa,2BAAP,SACElT,EACA8d,EACAyB,EACApN,EACAlI,GAEA,IAAIs5C,EAAO,IAAIgI,GAMf,OALAhI,EAAKt5C,MAAQA,EACbs5C,EAAKpxC,MAAQA,EACboxC,EAAKvjD,KAAOA,EACZujD,EAAKzlC,QAAUA,EACfylC,EAAKhkC,WAAaA,EACXgkC,GAGFlxC,EAAAm5C,sBAAP,SACE9qD,EACAuJ,GAEA,IAAIs5C,EAAO,IAAIkI,GAGf,OAFAlI,EAAKt5C,MAAQA,EACbs5C,EAAK7iD,MAAQA,EACN6iD,GAGFlxC,EAAAq5C,sBAAP,SACE1iB,EACA2iB,EACA1hD,GAEA,IAAIs5C,EAAO,IAAIqI,GAIf,OAHArI,EAAKt5C,MAAQA,EACbs5C,EAAKva,UAAYA,EACjBua,EAAKoI,MAAQA,EACNpI,GAGFlxC,EAAAw5C,iBAAP,SACEjjB,EACAnzB,EACAxL,GAEA,IAAI24C,EAAO,IAAIkJ,GAIf,OAHAlJ,EAAK34C,MAAQA,EACb24C,EAAKha,MAAQA,EACbga,EAAKntC,WAAaA,EACXmtC,GAGFvwC,EAAA05C,qBAAP,SACErrD,EACAuJ,GAEA,IAAIs5C,EAAO,IAAIyI,GAGf,OAFAzI,EAAKt5C,MAAQA,EACbs5C,EAAK7iD,MAAQA,EACN6iD,GAGFlxC,EAAA45C,mBAAP,SACEx2C,EACAy2C,EACAC,EACAC,EACAniD,GAEA,IAAIs5C,EAAO,IAAI8I,GAMf,OALA9I,EAAKt5C,MAAQA,EACbs5C,EAAK9tC,WAAaA,EAClB8tC,EAAK2I,cAAgBA,EACrB3I,EAAK4I,gBAAkBA,EACvB5I,EAAK6I,kBAAoBA,EAClB7I,GAGFlxC,EAAAK,sBAAP,SACE1S,EACAimB,EACA9K,EACAoE,EACApN,EACAlI,GAEA,IAAIs5C,EAAO,IAAI+I,GAOf,OANA/I,EAAKt5C,MAAQA,EACbs5C,EAAKpxC,MAAQA,EACboxC,EAAKvjD,KAAOA,EACZujD,EAAKt9B,eAAiBA,EACtBs9B,EAAKtlC,KAAO9C,EACZooC,EAAKhkC,WAAaA,EACXgkC,GAGFlxC,EAAAk6C,wBAAP,SACE5oC,EACApE,EACAtV,GAEA,IAAIs5C,EAAO,IAAIiJ,GAIf,OAHAjJ,EAAKt5C,MAAQA,EACbs5C,EAAK5/B,aAAeA,EACpB4/B,EAAKhkC,WAAaA,EACXgkC,GAGFlxC,EAAAC,0BAAP,SACEtS,EACAie,EACAsI,EACAhH,EACApN,EACAlI,GAEA,IAAI24C,EAAO,IAAI6J,GAOf,OANA7J,EAAK34C,MAAQA,EACb24C,EAAKzwC,MAAQA,EACbywC,EAAK5iD,KAAOA,EACZ4iD,EAAK3kC,KAAOA,EACZ2kC,EAAKr8B,YAAcA,EACnBq8B,EAAKrjC,WAAaA,EACXqjC,GAGFvwC,EAAAq6C,oBAAP,SACEvjB,EACAl/B,GAEA,IAAIs5C,EAAO,IAAIoJ,GAGf,OAFApJ,EAAKt5C,MAAQA,EACbs5C,EAAKpa,WAAaA,EACXoa,GAGFlxC,EAAAu6C,qBAAP,SACE5jB,EACArzB,EACA1L,GAEA,IAAIs5C,EAAO,IAAIsJ,GAIf,OAHAtJ,EAAKt5C,MAAQA,EACbs5C,EAAKva,UAAYA,EACjBua,EAAK5tC,UAAYA,EACV4tC,GAEXlxC,EA76BA,GAAsBvT,EAAAuT,OAi7BtB,IAAAy6C,EAAA,SAAA38C,GAAA,SAAA28C,mDAKA,OAL6Cp7C,EAAAo7C,EAAA38C,GAK7C28C,EALA,CAA6Cz6C,GAAvBvT,EAAAguD,iBAQtB,IAAAvK,EAAA,SAAApyC,GAAA,SAAAoyC,IAAA,IAAAnyC,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAASk3C,WAMlB,OAP8Br7C,EAAA6wC,EAAApyC,GAO9BoyC,EAPA,CAA8BlwC,GAAjBvT,EAAAyjD,WAUb,IAAAE,EAAA,SAAAtyC,GAAA,SAAAsyC,IAAA,IAAAryC,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAASm3C,OAMlB,OAP8Bt7C,EAAA+wC,EAAAtyC,GAO9BsyC,EAPA,CAA8BqK,GAAjBhuD,EAAA2jD,WAUb,IAAAI,EAAA,SAAA1yC,GAAA,SAAA0yC,IAAA,IAAAzyC,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAASo3C,gBAQlB,OATuCv7C,EAAAmxC,EAAA1yC,GASvC0yC,EATA,CAAuCxwC,GAA1BvT,EAAA+jD,oBAYb,SAAYqK,GAEVA,IAAA,qBAEAA,IAAA,uBAEAA,IAAA,eANF,CAAYpuD,EAAAouD,gBAAApuD,EAAAouD,cAAa,KAUzB,IAAAnK,EAAA,SAAA5yC,GAAA,SAAA4yC,IAAA,IAAA3yC,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAASs3C,UAWhB/8C,EAAAg9C,yBAAoD,KAEpDh9C,EAAA+B,MAAqBzF,EAAAjL,YAAY2Q,OAQnC,OAtBmCV,EAAAqxC,EAAA5yC,GAiBjC4yC,EAAA1hD,UAAAid,GAAA,SAAGoB,GAA2B,OAAQtgB,KAAK+S,MAAQuN,IAASA,GAE5DqjC,EAAA1hD,UAAAuf,MAAA,SAAMlB,GAA2B,OAA8B,IAAtBtgB,KAAK+S,MAAQuN,IAEtDqjC,EAAA1hD,UAAAiQ,IAAA,SAAIoO,GAA2BtgB,KAAK+S,OAASuN,GAC/CqjC,EAtBA,CAAmC1wC,GAAtBvT,EAAAikD,gBAyBb,IAcYn1C,EAdZw1C,EAAA,SAAAjzC,GAAA,SAAAizC,IAAA,IAAAhzC,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAASw3C,YAQlB,OATmC37C,EAAA0xC,EAAAjzC,GASnCizC,EATA,CAAmC0J,GAgCnC,SAAgBltC,EAAoB5f,GAElC,GAAIA,EAAK4V,MAAQC,EAASisC,WAAY,CACpC,IAAIwL,EAAiCttD,EAAMmL,KAE3C,OADA7B,OAAOgkD,EAAQjiD,QACPiiD,EAAQ7hD,WAAW,IACzB,QACE,GAAe,WAAX6hD,EAAsB,OAAO1/C,EAAc2G,QAC/C,MAEF,SACE,GAAe,YAAX+4C,EAAuB,OAAO1/C,EAAcoW,SAChD,MAEF,SACE,GAAe,UAAXspC,EAAqB,OAAO1/C,EAAcqS,OAC9C,MAEF,SACE,GAAe,UAAXqtC,EAAqB,OAAO1/C,EAAcyT,OAC9C,MAEF,SACE,GAAe,QAAXisC,EAAmB,OAAO1/C,EAAc0T,KAC5C,MAEF,SACE,GAAe,YAAXgsC,EAAuB,OAAO1/C,EAAcC,SAChD,MAEF,SACE,GAAe,UAAXy/C,EAAqB,OAAO1/C,EAAc4M,OAC9C,GAAe,SAAX8yC,EAAoB,OAAO1/C,EAAcuW,MAC7C,MAEF,SACE,GAAe,aAAXmpC,EAAwB,OAAO1/C,EAAc+M,UACjD,GAAe,UAAX2yC,EAAqB,OAAO1/C,EAAc2T,aAI7C,GACLvhB,EAAK4V,MAAQC,EAASssC,gBACKniD,EAAMmpC,WAAWvzB,MAAQC,EAASisC,WAC7D,CACIwL,EAA4DttD,EAAMmpC,WAAYh+B,KAClF7B,OAAOgkD,EAAQjiD,QACf,IAAIkiD,EAAqCvtD,EAAMoB,SAAS+J,KAGxD,GAFA7B,OAAOikD,EAAQliD,QAEA,YAAXiiD,EACF,OAAQC,EAAQ9hD,WAAW,IACzB,QACE,GAAe,UAAX8hD,EAAqB,OAAO3/C,EAAcE,gBAC9C,MAEF,SACE,OAAQy/C,GACN,IAAK,SAAU,OAAO3/C,EAAcyB,gBACpC,IAAK,UAAW,OAAOzB,EAAcgC,mBAO/C,OAAOhC,EAAc4/C,OAlGV1uD,EAAAskD,gBAcb,SAAYx1C,GACVA,IAAA,mBACAA,IAAA,mBACAA,IAAA,uBACAA,IAAA,qCACAA,IAAA,qCACAA,IAAA,uCACAA,IAAA,yBACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,uBACAA,IAAA,sBACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,oBAdF,CAAYA,EAAA9O,EAAA8O,gBAAA9O,EAAA8O,cAAa,KAkBzB9O,EAAA8gB,sBAsEA,IAAA4jC,EAAA,SAAArzC,GAAA,SAAAqzC,IAAA,IAAApzC,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAAS43C,YAQlB,OATmC/7C,EAAA8xC,EAAArzC,GASnCqzC,EATA,CAAmCnxC,GAAtBvT,EAAA0kD,gBAYb,SAAYkK,GAEVA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,iBANF,CAAY5uD,EAAA4uD,cAAA5uD,EAAA4uD,YAAW,KAUvB,IAAA/J,EAAA,SAAAxzC,GAAA,SAAAwzC,IAAA,IAAAvzC,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAAS83C,UAMlB,OAPiCj8C,EAAAiyC,EAAAxzC,GAOjCwzC,EAPA,CAAiCtxC,GAApBvT,EAAA6kD,cAYb,IAAAiK,EAAA,SAAAz9C,GAAA,SAAAy9C,mDAAgD,OAAPl8C,EAAAk8C,EAAAz9C,GAAOy9C,EAAhD,CAAyCv7C,GAAnBvT,EAAA8uD,aAGtB,IAYYxrC,EAZZ0hC,EAAA,SAAA3zC,GAAA,SAAA2zC,IAAA,IAAA1zC,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAASisC,aAQlB,OAT0CpwC,EAAAoyC,EAAA3zC,GAS1C2zC,EATA,CAA0C8J,GAA7B9uD,EAAAglD,uBAYb,SAAY1hC,GACVA,IAAA,iBACAA,IAAA,qBACAA,IAAA,mBACAA,IAAA,mBACAA,IAAA,iBACAA,IAAA,mBANF,CAAYA,EAAAtjB,EAAAsjB,cAAAtjB,EAAAsjB,YAAW,KAUvB,IAAAyrC,EAAA,SAAA19C,GAAA,SAAA09C,IAAA,IAAAz9C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAASqM,UAIlB,OALgDxQ,EAAAm8C,EAAA19C,GAKhD09C,EALA,CAAgDD,GAA1B9uD,EAAA+uD,oBAQtB,IAAA3J,EAAA,SAAA/zC,GAAA,SAAA+zC,IAAA,IAAA9zC,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAA+R,YAAcC,EAAY0rC,QAI5B,OAL4Cp8C,EAAAwyC,EAAA/zC,GAK5C+zC,EALA,CAA4C2J,GAA/B/uD,EAAAolD,yBAQb,SAAY6J,GACVA,IAAA,mBACAA,IAAA,WACAA,IAAA,qBAHF,CAAYjvD,EAAAivD,gBAAAjvD,EAAAivD,cAAa,KAOzB,IAAAxJ,EAAA,SAAAp0C,GAAA,SAAAo0C,IAAA,IAAAn0C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAASksC,YAQlB,OATyCrwC,EAAA6yC,EAAAp0C,GASzCo0C,EATA,CAAyCqJ,GAA5B9uD,EAAAylD,sBAYb,IAAAG,EAAA,SAAAv0C,GAAA,SAAAu0C,IAAA,IAAAt0C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAASm4C,SAQlB,OATsCt8C,EAAAgzC,EAAAv0C,GAStCu0C,EATA,CAAsCkJ,GAAzB9uD,EAAA4lD,mBAYb,IAAAG,EAAA,SAAA10C,GAAA,SAAA00C,IAAA,IAAAz0C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAASmsC,OA4BlB,OA7BoCtwC,EAAAmzC,EAAA10C,GAWlChQ,OAAAC,eAAIykD,EAAAxjD,UAAA,qBAAkB,KAAtB,WACE,IACI8qB,EADAf,EAAgBhsB,KAAKgsB,cAEzB,OAAIA,IAAkBe,EAAmBf,EAAc/f,QAC9Ck2C,EAAA1mC,MAAMhP,KAAKuf,EAAc,GAAGnhB,MAAOmhB,EAAce,EAAmB,GAAGliB,OAEzE7K,KAAK+pC,WAAWl/B,uCAIzB9J,OAAAC,eAAIykD,EAAAxjD,UAAA,iBAAc,KAAlB,WACE,IAAIiiD,EAAOlkD,KAAK4iB,UACZisC,EAAe3K,EAAKj4C,OACxB,OAAI4iD,EACK1M,EAAA1mC,MAAMhP,KAAKy3C,EAAK,GAAGr5C,MAAOq5C,EAAK2K,EAAe,GAAGhkD,OAEnD7K,KAAK+pC,WAAWl/B,uCAE3B46C,EA7BA,CAAoC+I,GAAvB9uD,EAAA+lD,iBAgCb,IAAAE,EAAA,SAAA50C,GAAA,SAAA40C,IAAA,IAAA30C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAASgI,QAIlB,OALqCnM,EAAAqzC,EAAA50C,GAKrC40C,EALA,CAAqC6I,GAAxB9uD,EAAAimD,kBAQb,IAAAG,EAAA,SAAA/0C,GAAA,SAAA+0C,IAAA,IAAA90C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAASq4C,QAIlB,OALqCx8C,EAAAwzC,EAAA/0C,GAKrC+0C,EALA,CAAqC0I,GAAxB9uD,EAAAomD,kBAQb,IAAAE,EAAA,SAAAj1C,GAAA,SAAAi1C,IAAA,IAAAh1C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAAS+L,YAChBxR,EAAAjF,KAAO,cACPiF,EAAA2zC,OAASr3C,EAAAtK,cAAcoC,cACzB,OAJ2CkN,EAAA0zC,EAAAj1C,GAI3Ci1C,EAJA,CAA2CtB,GAA9BhlD,EAAAsmD,wBAOb,IAAAE,EAAA,SAAAn1C,GAAA,SAAAm1C,IAAA,IAAAl1C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAASosC,gBAMlB,OAP6CvwC,EAAA4zC,EAAAn1C,GAO7Cm1C,EAPA,CAA6CsI,GAAhC9uD,EAAAwmD,0BAUb,IAAAK,EAAA,SAAAx1C,GAAA,SAAAw1C,IAAA,IAAAv1C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAA+R,YAAcC,EAAY+rC,QAI5B,OAL4Cz8C,EAAAi0C,EAAAx1C,GAK5Cw1C,EALA,CAA4CkI,GAA/B/uD,EAAA6mD,yBAQb,IAAAE,EAAA,SAAA11C,GAAA,SAAA01C,IAAA,IAAAz1C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAAS8H,WAIlB,OALwCjM,EAAAm0C,EAAA11C,GAKxC01C,EALA,CAAwC+H,GAA3B9uD,EAAA+mD,qBAQb,IAAAG,EAAA,SAAA71C,GAAA,SAAA61C,IAAA,IAAA51C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAASu4C,aAMlB,OAP0C18C,EAAAs0C,EAAA71C,GAO1C61C,EAPA,CAA0C4H,GAA7B9uD,EAAAknD,uBAUb,IAAAE,EAAA,SAAA/1C,GAAA,SAAA+1C,IAAA,IAAA91C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAA+R,YAAcC,EAAYisC,UAI5B,OAL8C38C,EAAAw0C,EAAA/1C,GAK9C+1C,EALA,CAA8C2H,GAAjC/uD,EAAAonD,2BAQb,IAAAE,EAAA,SAAAj2C,GAAA,SAAAi2C,IAAA,IAAAh2C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAASy4C,MAClB,OAFmC58C,EAAA00C,EAAAj2C,GAEnCi2C,EAFA,CAAmCvB,GAAtB/lD,EAAAsnD,gBAKb,IAAAE,EAAA,SAAAn2C,GAAA,SAAAm2C,IAAA,IAAAl2C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAAS6rC,KAChBtxC,EAAAjF,KAAO,OACPiF,EAAA2zC,OAASr3C,EAAAtK,cAAc+B,QACzB,OAJoCuN,EAAA40C,EAAAn2C,GAIpCm2C,EAJA,CAAoCxC,GAAvBhlD,EAAAwnD,iBAOb,IAAAE,EAAA,SAAAr2C,GAAA,SAAAq2C,IAAA,IAAAp2C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAA+R,YAAcC,EAAYmsC,SAM5B,OAP6C78C,EAAA80C,EAAAr2C,GAO7Cq2C,EAPA,CAA6CqH,GAAhC/uD,EAAA0nD,0BAUb,IAAAE,EAAA,SAAAv2C,GAAA,SAAAu2C,IAAA,IAAAt2C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAASqsC,gBAIlB,OAL6CxwC,EAAAg1C,EAAAv2C,GAK7Cu2C,EALA,CAA6CkH,GAAhC9uD,EAAA4nD,0BAQb,IAAAE,EAAA,SAAAz2C,GAAA,SAAAy2C,IAAA,IAAAx2C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAASssC,iBAMlB,OAP8CzwC,EAAAk1C,EAAAz2C,GAO9Cy2C,EAPA,CAA8CgH,GAAjC9uD,EAAA8nD,2BAUb,IAAAG,EAAA,SAAA52C,GAAA,SAAA42C,IAAA,IAAA32C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAA+R,YAAcC,EAAYosC,SAM5B,OAP6C98C,EAAAq1C,EAAA52C,GAO7C42C,EAPA,CAA6C8G,GAAhC/uD,EAAAioD,0BAUb,IAAAK,EAAA,SAAAj3C,GAAA,SAAAi3C,IAAA,IAAAh3C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAAS44C,UAQlB,OATuC/8C,EAAA01C,EAAAj3C,GASvCi3C,EATA,CAAuCwG,GAA1B9uD,EAAAsoD,oBAYb,IAAAE,EAAA,SAAAn3C,GAAA,SAAAm3C,IAAA,IAAAl3C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAA+R,YAAcC,EAAYC,SAI5B,OAL6C3Q,EAAA41C,EAAAn3C,GAK7Cm3C,EALA,CAA6CuG,GAAhC/uD,EAAAwoD,0BAQb,IAAAE,EAAA,SAAAr3C,GAAA,SAAAq3C,IAAA,IAAAp3C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAASusC,MAChBhyC,EAAAjF,KAAO,QACPiF,EAAA2zC,OAASr3C,EAAAtK,cAAcmC,SACzB,OAJqCmN,EAAA81C,EAAAr3C,GAIrCq3C,EAJA,CAAqC1D,GAAxBhlD,EAAA0oD,kBAOb,IAAAE,EAAA,SAAAv3C,GAAA,SAAAu3C,IAAA,IAAAt3C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAAS64C,KAChBt+C,EAAAjF,KAAO,OACPiF,EAAA2zC,OAASr3C,EAAAtK,cAAckC,QACzB,OAJoCoN,EAAAg2C,EAAAv3C,GAIpCu3C,EAJA,CAAoC5D,GAAvBhlD,EAAA4oD,iBAOb,IAAAE,EAAA,SAAAz3C,GAAA,SAAAy3C,IAAA,IAAAx3C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAAS8rC,KAChBvxC,EAAAjF,KAAO,OACPiF,EAAA2zC,OAASr3C,EAAAtK,cAAcgC,QACzB,OAJoCsN,EAAAk2C,EAAAz3C,GAIpCy3C,EAJA,CAAoC9D,GAAvBhlD,EAAA8oD,iBAOb,IAAAnC,EAAA,SAAAt1C,GAAA,SAAAs1C,IAAA,IAAAr1C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAAS+rC,MAChBxxC,EAAAjF,KAAO,QACPiF,EAAA2zC,OAASr3C,EAAAtK,cAAciC,SACzB,OAJqCqN,EAAA+zC,EAAAt1C,GAIrCs1C,EAJA,CAAqC3B,GAAxBhlD,EAAA2mD,kBAOb,IAAAkJ,EAAA,SAAAx+C,GAAA,SAAAw+C,mDAMA,OAN8Cj9C,EAAAi9C,EAAAx+C,GAM9Cw+C,EANA,CAA8Cf,GAAxB9uD,EAAA6vD,kBAStB,IAAA5G,EAAA,SAAA53C,GAAA,SAAA43C,IAAA,IAAA33C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAAS+4C,eAClB,OAF4Cl9C,EAAAq2C,EAAA53C,GAE5C43C,EAFA,CAA4C4G,GAA/B7vD,EAAAipD,yBAKb,IAAAE,EAAA,SAAA93C,GAAA,SAAA83C,IAAA,IAAA73C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAASg5C,cAClB,OAF2Cn9C,EAAAu2C,EAAA93C,GAE3C83C,EAFA,CAA2C0G,GAA9B7vD,EAAAmpD,wBAOb,IAGY/2C,EAHZ49C,EAAA,SAAA3+C,GAAA,SAAA2+C,mDAA+C,OAAPp9C,EAAAo9C,EAAA3+C,GAAO2+C,EAA/C,CAAwCz8C,GAAlBvT,EAAAgwD,YAGtB,SAAY59C,GAEVA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,qBANF,CAAYA,EAAApS,EAAAoS,aAAApS,EAAAoS,WAAU,KAUtB,IAAAD,EAAA,SAAAd,GAwBE,SAAAc,EAAYnG,EAAwBK,EAAcyK,GAAlD,IAAAxF,EACED,EAAAvQ,KAAAR,OAAOA,KAxBTgR,EAAAwF,KAAOC,EAASk5C,OAChB3+C,EAAAiD,OAAS,KAeTjD,EAAA4+C,UAA8B,KAE9B5+C,EAAA6Z,gBAAuB,EAEvB7Z,EAAA6+C,YAAkC,KAKhC7+C,EAAK8+C,WAAat5C,EAClBxF,EAAKtF,eAAiBA,EACtB,IAAIuY,EAAemmC,GAAmBp5C,EAAKtF,gBAC3CsF,EAAKiT,aAAeA,EACpB,IAAI8rC,EAAM9rC,EAAa+rC,YAAY1iD,EAAAhL,uBACnC0O,EAAKi/C,WAAaF,GAAO,EAAI9rC,EAAa1X,UAAUwjD,EAAM,GAAK9rC,EAC/DjT,EAAKqF,WAAa,IAAItP,MACtBiK,EAAKnG,MAAQ,IAAIs3C,EAAA1mC,MAAMzK,EAAM,EAAGjF,EAAKE,QACrC+E,EAAKjF,KAAOA,IAOhB,OAzC4BuG,EAAAT,EAAAd,GAsC1BhQ,OAAAC,eAAI6Q,EAAA5P,UAAA,UAAO,KAAX,WAAsB,OAAOjC,KAAK8vD,YAAch+C,EAAWo+C,uCAE3DnvD,OAAAC,eAAI6Q,EAAA5P,UAAA,YAAS,KAAb,WAAwB,OAAOjC,KAAK8vD,YAAch+C,EAAWC,yCAC/DF,EAzCA,CAA4BoB,GAAfvT,EAAAmS,SA4Cb,IAAAs+C,GAAA,SAAAp/C,GAAA,SAAAo/C,IAAA,IAAAn/C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YAIEgR,EAAAmP,WAAqC,KAErCnP,EAAA+B,MAAqBzF,EAAAjL,YAAY2Q,OAQnC,OAdmDV,EAAA69C,EAAAp/C,GASjDo/C,EAAAluD,UAAAid,GAAA,SAAGoB,GAA2B,OAAQtgB,KAAK+S,MAAQuN,IAASA,GAE5D6vC,EAAAluD,UAAAuf,MAAA,SAAMlB,GAA2B,OAA8B,IAAtBtgB,KAAK+S,MAAQuN,IAEtD6vC,EAAAluD,UAAAiQ,IAAA,SAAIoO,GAA2BtgB,KAAK+S,OAASuN,GAC/C6vC,EAdA,CAAmDT,GAA7BhwD,EAAAywD,wBAiBtB,IAAAnE,GAAA,SAAAj7C,GAAA,SAAAi7C,IAAA,IAAAh7C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAASoL,4BAMlB,OAP+CvP,EAAA05C,EAAAj7C,GAO/Ci7C,EAPA,CAA+CmE,IAAlCzwD,EAAAssD,6BAUb,IAAAoE,GAAA,SAAAr/C,GAAA,SAAAq/C,mDAMA,OAN+D99C,EAAA89C,EAAAr/C,GAM/Dq/C,EANA,CAA+DD,IAAzCzwD,EAAA0wD,oCAStB,IAAArH,GAAA,SAAAh4C,GAAA,SAAAg4C,IAAA,IAAA/3C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAAS45C,QAIlB,OALoC/9C,EAAAy2C,EAAAh4C,GAKpCg4C,EALA,CAAoC2G,GAAvBhwD,EAAAqpD,kBAQb,IAAAE,GAAA,SAAAl4C,GAAA,SAAAk4C,IAAA,IAAAj4C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAAS65C,QAIlB,OALoCh+C,EAAA22C,EAAAl4C,GAKpCk4C,EALA,CAAoCyG,GAAvBhwD,EAAAupD,kBAQb,IAAAE,GAAA,SAAAp4C,GAAA,SAAAo4C,IAAA,IAAAn4C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAASQ,mBAelB,OAhBsC3E,EAAA62C,EAAAp4C,GAYpChQ,OAAAC,eAAImoD,EAAAlnD,UAAA,YAAS,KAAb,WACE,IAAI4kB,EAAiB7mB,KAAK6mB,eAC1B,OAAyB,MAAlBA,GAA0BA,EAAe5a,OAAS,mCAE7Dk9C,EAhBA,CAAsCgH,IAAzBzwD,EAAAypD,oBAmBb,IAAAE,GAAA,SAAAt4C,GAAA,SAAAs4C,IAAA,IAAAr4C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAAS85C,WAIlB,OALuCj+C,EAAA+2C,EAAAt4C,GAKvCs4C,EALA,CAAuCqG,GAA1BhwD,EAAA2pD,qBAQb,IAAAE,GAAA,SAAAx4C,GAAA,SAAAw4C,IAAA,IAAAv4C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAAS+5C,KAMlB,OAPiCl+C,EAAAi3C,EAAAx4C,GAOjCw4C,EAPA,CAAiCmG,GAApBhwD,EAAA6pD,eAUb,IAAAE,GAAA,SAAA14C,GAAA,SAAA04C,IAAA,IAAAz4C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAASxT,QAClB,OAFoCqP,EAAAm3C,EAAA14C,GAEpC04C,EAFA,CAAoCiG,GAAvBhwD,EAAA+pD,kBAKb,IAAAE,GAAA,SAAA54C,GAAA,SAAA44C,IAAA,IAAA34C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAASU,kBAIlB,OALqC7E,EAAAq3C,EAAA54C,GAKrC44C,EALA,CAAqCwG,IAAxBzwD,EAAAiqD,mBAQb,IAAAE,GAAA,SAAA94C,GAAA,SAAA84C,IAAA,IAAA74C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAASg6C,uBAKlB,OAN0Cn+C,EAAAu3C,EAAA94C,GAM1C84C,EANA,CAA0CuG,IAA7B1wD,EAAAmqD,wBASb,IAAAW,GAAA,SAAAz5C,GAAA,SAAAy5C,IAAA,IAAAx5C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAASi6C,eAMlB,OAP2Cp+C,EAAAk4C,EAAAz5C,GAO3Cy5C,EAPA,CAA2Cv3C,GAA9BvT,EAAA8qD,yBAUb,IAAAE,GAAA,SAAA35C,GAAA,SAAA25C,IAAA,IAAA15C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAASk6C,eAMlB,OAPkCr+C,EAAAo4C,EAAA35C,GAOlC25C,EAPA,CAAkCz3C,GAArBvT,EAAAgrD,gBAUb,IAAAV,GAAA,SAAAj5C,GAAA,SAAAi5C,IAAA,IAAAh5C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAASxB,SAYlB,OAbqC3C,EAAA03C,EAAAj5C,GAarCi5C,EAbA,CAAqC0F,GAAxBhwD,EAAAsqD,mBAgBb,IAAAM,GAAA,SAAAv5C,GAAA,SAAAu5C,IAAA,IAAAt5C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAASE,gBAIlB,OAL4CrE,EAAAg4C,EAAAv5C,GAK5Cu5C,EALA,CAA4CoF,GAA/BhwD,EAAA4qD,0BAQb,IAAAM,GAAA,SAAA75C,GAAA,SAAA65C,IAAA,IAAA55C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAASm6C,aAIlB,OALyCt+C,EAAAs4C,EAAA75C,GAKzC65C,EALA,CAAyC8E,GAA5BhwD,EAAAkrD,uBAQb,IAAAY,GAAA,SAAAz6C,GAAA,SAAAy6C,IAAA,IAAAx6C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAAS4K,iBAGhBrQ,EAAAma,gBAAuB,IACzB,OALsC7Y,EAAAk5C,EAAAz6C,GAKtCy6C,EALA,CAAsC4E,IAAzB1wD,EAAA8rD,oBAQb,IAAAG,GAAA,SAAA56C,GAAA,SAAA46C,IAAA,IAAA36C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAASo6C,MAalB,OAdkCv+C,EAAAq5C,EAAA56C,GAclC46C,EAdA,CAAkC+D,GAArBhwD,EAAAisD,gBAiBb,SAAkBmF,GAEhBA,IAAA,eAEAA,IAAA,6CAEAA,IAAA,+BANF,CAAkBpxD,EAAAoxD,YAAApxD,EAAAoxD,UAAS,KAU3B,IAAAlF,GAAA,SAAA76C,GAAA,SAAA66C,IAAA,IAAA56C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAASY,sBA6BlB,OA9ByC/E,EAAAs5C,EAAA76C,GAYvChQ,OAAAC,eAAI4qD,EAAA3pD,UAAA,YAAS,KAAb,WACE,IAAI4kB,EAAiB7mB,KAAK6mB,eAC1B,OAAyB,MAAlBA,GAA0BA,EAAe5a,OAAS,mCAI3D2/C,EAAA3pD,UAAA8uD,MAAA,WACE,OAAO99C,EAAKQ,0BACVzT,KAAKY,KACLZ,KAAK6mB,eACL7mB,KAAKgU,UACLhU,KAAK+nB,KACL/nB,KAAKmgB,WACLngB,KAAK+S,MACL/S,KAAKgoB,UACLhoB,KAAK6K,QAGX+gD,EA9BA,CAAyCuE,IAA5BzwD,EAAAksD,uBAiCb,IAAAd,GAAA,SAAA/5C,GAAA,SAAA+5C,IAAA,IAAA95C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAASu6C,KAQlB,OATiC1+C,EAAAw4C,EAAA/5C,GASjC+5C,EATA,CAAiC4E,GAApBhwD,EAAAorD,eAYb,IAAAM,GAAA,SAAAr6C,GAAA,SAAAq6C,IAAA,IAAAp6C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAASw6C,oBAIlB,OALuC3+C,EAAA84C,EAAAr6C,GAKvCq6C,EALA,CAAuC+E,IAA1BzwD,EAAA0rD,qBAQb,IAAAH,GAAA,SAAAl6C,GAAA,SAAAk6C,IAAA,IAAAj6C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAASI,SAYlB,OAbqCvE,EAAA24C,EAAAl6C,GAarCk6C,EAbA,CAAqCyE,GAAxBhwD,EAAAurD,mBAgBb,IAAAK,GAAA,SAAAv6C,GAAA,SAAAu6C,IAAA,IAAAt6C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAASc,uBAClB,OAF0CjF,EAAAg5C,EAAAv6C,GAE1Cu6C,EAFA,CAA0CnC,IAA7BzpD,EAAA4rD,wBAKb,IAAAY,GAAA,SAAAn7C,GAAA,SAAAm7C,IAAA,IAAAl7C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAAS8K,oBAClB,OAFuCjP,EAAA45C,EAAAn7C,GAEvCm7C,EAFA,CAAuCN,IAA1BlsD,EAAAwsD,qBAKb,IAAAC,GAAA,SAAAp7C,GAAA,SAAAo7C,IAAA,IAAAn7C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAASgB,uBAIlB,OAL0CnF,EAAA65C,EAAAp7C,GAK1Co7C,EALA,CAA0CgE,IAA7BzwD,EAAAysD,wBAQb,IAAAE,GAAA,SAAAt7C,GAAA,SAAAs7C,IAAA,IAAAr7C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAASy6C,SAIlB,OALqC5+C,EAAA+5C,EAAAt7C,GAKrCs7C,EALA,CAAqCqD,GAAxBhwD,EAAA2sD,mBAQb,IAAAK,GAAA,SAAA37C,GAAA,SAAA27C,IAAA,IAAA17C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAAS06C,aAMlB,OAPgC7+C,EAAAo6C,EAAA37C,GAOhC27C,EAPA,CAAgCz5C,GAAnBvT,EAAAgtD,cAUb,IAAAF,GAAA,SAAAz7C,GAAA,SAAAy7C,IAAA,IAAAx7C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAAS26C,SAMlB,OAPqC9+C,EAAAk6C,EAAAz7C,GAOrCy7C,EAPA,CAAqCkD,GAAxBhwD,EAAA8sD,mBAUb,IAAAI,GAAA,SAAA77C,GAAA,SAAA67C,IAAA,IAAA57C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAAS46C,QAIlB,OALoC/+C,EAAAs6C,EAAA77C,GAKpC67C,EALA,CAAoC8C,GAAvBhwD,EAAAktD,kBAQb,IAAAK,GAAA,SAAAl8C,GAAA,SAAAk8C,IAAA,IAAAj8C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAAS66C,MAUlB,OAXkCh/C,EAAA26C,EAAAl8C,GAWlCk8C,EAXA,CAAkCyC,GAArBhwD,EAAAutD,gBAcb,IAAAC,GAAA,SAAAn8C,GAAA,SAAAm8C,IAAA,IAAAl8C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAASkB,kBAMlB,OAPqCrF,EAAA46C,EAAAn8C,GAOrCm8C,EAPA,CAAqCiD,IAAxBzwD,EAAAwtD,mBAUb,IAAAG,GAAA,SAAAt8C,GAAA,SAAAs8C,IAAA,IAAAr8C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAAS86C,sBAClB,OAFyCj/C,EAAA+6C,EAAAt8C,GAEzCs8C,EAFA,CAAyC+C,IAA5B1wD,EAAA2tD,uBAKb,IAAAD,GAAA,SAAAr8C,GAAA,SAAAq8C,IAAA,IAAAp8C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAASM,WAMlB,OAPuCzE,EAAA86C,EAAAr8C,GAOvCq8C,EAPA,CAAuCsC,GAA1BhwD,EAAA0tD,qBAUb,IAAAG,GAAA,SAAAx8C,GAAA,SAAAw8C,IAAA,IAAAv8C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAAS+6C,OAIlB,OALmCl/C,EAAAi7C,EAAAx8C,GAKnCw8C,EALA,CAAmCmC,GAAtBhwD,EAAA6tD,iBAQb,IAAAE,GAAA,SAAA18C,GAAA,SAAA08C,IAAA,IAAAz8C,EAAA,OAAAD,KAAAiV,MAAAhmB,KAAA4iB,YAAA5iB,YACEgR,EAAAwF,KAAOC,EAASg7C,QAMlB,OAPoCn/C,EAAAm7C,EAAA18C,GAOpC08C,EAPA,CAAoCiC,GAqBpC,SAAgBtF,GAAmBhmC,GAEjC,OADIA,EAAKD,SAAS,SAAQC,EAAOA,EAAK7X,UAAU,EAAG6X,EAAKnY,OAAS,IAC1DmY,EAvBI1kB,EAAA+tD,kBAUb/tD,EAAAulB,cAAA,SAA8BzO,EAAqB2J,GACjD,GAAIA,EACF,IAAK,IAAI9f,EAAI,EAAG8V,EAAIgK,EAAWlU,OAAQ5L,EAAI8V,IAAK9V,EAAG,CACjD,IAAIggB,EAAYF,EAAW9f,GAC3B,GAAIggB,EAAU/R,eAAiBkI,EAAM,OAAO6J,EAGhD,OAAO,MAIT3gB,EAAA0qD,sBAMA1qD,EAAAgyD,cAAA,SAA8B7yC,GAC5B,GAAIA,EAAKrI,MAAQC,EAASm3C,KAAM,CAC9B,IAAIhtD,EAAkBie,EAAMje,KAC5B,QAASA,EAAKoX,MAAQpX,EAAKyS,WAAWtH,KAAKE,QAE7C,OAAO,kFCr/DT,IAAA0lD,EAAAxxD,EAAA,GAOAyxD,EAAAzxD,EAAA,IAOA,SAAkB0xD,GAKhBA,IAAA,WAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,iBAKAA,IAAA,WAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,iBAEAA,IAAA,gBAKAA,IAAA,cAEAA,IAAA,cAKAA,IAAA,gBAKAA,IAAA,gBA7CF,CAAkBnyD,EAAAmyD,WAAAnyD,EAAAmyD,SAAQ,KAiD1B,SAAkBC,GAChBA,IAAA,eAEAA,IAAA,mBAEAA,IAAA,uBAEAA,IAAA,qBAEAA,IAAA,iBAEAA,IAAA,sBAEAA,IAAA,kBAEAA,IAAA,gBAEAA,IAAA,mBAEAA,IAAA,2BAEAA,IAAA,yBAEAA,IAAA,sBAvBF,CAAkBpyD,EAAAoyD,YAAApyD,EAAAoyD,UAAS,KA0B3B,IAAMC,EAAY,IAAIpqD,WAAW,IAGjCgN,EAAA,WAoBE,SAAAA,EAAY6B,EAAgBzD,EAAkB44B,GAHtC3rC,KAAAgyD,mBAAkC,KAIxChyD,KAAKwW,KAAOA,EACZxW,KAAK+S,MAAQA,EACb/S,KAAK2rC,KAAOA,EACZ3rC,KAAKiyD,SAAgBC,KAAevmB,EAAO,GAC3C3rC,KAAK0uB,eAAiB,KACtB1uB,KAAKmyD,mBAAqB,KAC1BnyD,KAAKoyD,gBAAkBpyD,KAoZ3B,OAhZEe,OAAAC,eAAI2T,EAAA1S,UAAA,UAAO,KAAX,WACE,OAAQjC,KAAKwW,MACX,OAAkB,OAAO7B,EAAKzR,GAC9B,OAAmB,OAAOyR,EAAKxR,IAC/B,QACA,OAAmB,OAAOwR,EAAKvR,IAC/B,QACA,OAAmB,OAAOuR,EAAKtR,IAC/B,OAAqB,OAAoB,IAAbrD,KAAK2rC,KAAah3B,EAAK09C,QAAU19C,EAAK29C,QAClE,OAAkB,OAAO39C,EAAKpR,GAC9B,OAAmB,OAAOoR,EAAKnR,IAC/B,OAAmB,OAAOmR,EAAKlR,IAC/B,OAAmB,OAAOkR,EAAKjR,IAC/B,OAAqB,OAAoB,IAAb1D,KAAK2rC,KAAah3B,EAAK49C,QAAU59C,EAAK69C,QAClE,QACA,QAAS,OAAO79C,EAAKvR,sCAKzBrC,OAAAC,eAAI2T,EAAA1S,UAAA,YAAS,KAAb,WACE,OAAO,GAAKwwD,IAASzyD,KAAKiyD,2CAI5BlxD,OAAAC,eAAI2T,EAAA1S,UAAA,YAAS,KAAb,WACE,IAAIysB,EAAiB1uB,KAAK0uB,eAC1B,OAA0B,OAAnBA,IAA4BA,EAAevT,aAAaw2C,EAAA9gD,eAAe0K,4CAIhFxa,OAAAC,eAAI2T,EAAA1S,UAAA,cAAW,KAAf,WACE,IAAIysB,EAAiB1uB,KAAK0uB,eAC1B,OAA0B,OAAnBA,GAA2BA,EAAevT,aAAaw2C,EAAA9gD,eAAe0K,4CAI/E5G,EAAA1S,UAAAywD,yBAAA,SAAyBC,GACvB,OAAOA,EAAWhnB,KAAO3rC,KAAK2rC,MAIhCh3B,EAAA1S,UAAA2wD,wBAAA,SAAwBD,GACtB,IAAIhnB,EAAO3rC,KAAKkf,GAAE,GAAuBlf,KAAK2rC,KAAO3rC,KAAK2rC,KAAO,EACjE,OAAO,IAAQgnB,EAAWhnB,KAAOA,GAInCh3B,EAAA1S,UAAAid,GAAA,SAAGnM,GAA0B,OAAQ/S,KAAK+S,MAAQA,IAAUA,GAE5D4B,EAAA1S,UAAAuf,MAAA,SAAMzO,GAA0B,OAA+B,IAAvB/S,KAAK+S,MAAQA,IAGrD4B,EAAA1S,UAAAuqB,QAAA,SAAQqmC,GACN3oD,OAAgB,GAATlK,KAAKwW,OAA2BxW,KAAK0uB,gBAC5C,IAAI+kB,EAAM,IAAI9+B,EAAK3U,KAAKwW,MAAmB,IAAbxW,KAAK+S,MAAwB,IAAwB/S,KAAK2rC,MAExF,OADA8H,EAAI/kB,eAAiBmkC,EACdpf,GAIT9+B,EAAA1S,UAAA0nB,WAAA,SAAW3V,GACT9J,OAAgB,GAATlK,KAAKwW,OAAyBxW,KAAKmyD,oBAC1C,IAAI1e,EAAM,IAAI9+B,EAAK3U,KAAKwW,MAAmB,IAAbxW,KAAK+S,MAAwB,IAAwB/S,KAAK2rC,MAExF,OADA8H,EAAI0e,mBAAqBn+C,EAClBy/B,GAIT9+B,EAAA1S,UAAA6wD,WAAA,WASE,OARA5oD,OAAOlK,KAAKkf,GAAE,MACTlf,KAAKgyD,qBACR9nD,QAAQlK,KAAKkf,GAAE,MACflf,KAAKgyD,mBAAqB,IAAIr9C,EAAK3U,KAAKwW,KAAgB,IAAVxW,KAAK+S,MAA4B/S,KAAK2rC,MACpF3rC,KAAKgyD,mBAAmBI,gBAAkBpyD,KAC1CA,KAAKgyD,mBAAmBtjC,eAAiB1uB,KAAK0uB,eAC9C1uB,KAAKgyD,mBAAmBG,mBAAqBnyD,KAAKmyD,oBAE7CnyD,KAAKgyD,oBAIdr9C,EAAA1S,UAAAkrB,eAAA,SAAeC,EAAc2lC,GAC3B,IAAIC,EACAC,EACAC,EACAC,EACJ,QAL2B,IAAAJ,OAAA,GAKvB/yD,KAAKkf,GAAE,MACT,GAAIkO,EAAOlO,GAAE,QACNlf,KAAKkf,GAAE,MAAwBkO,EAAOlO,GAAE,MAC3C,GAAI8zC,EAAehzD,KAAK0uB,gBACtB,GAAIukC,EAAc7lC,EAAOsB,eACvB,OAAOskC,EAAa7lC,eAAe8lC,QAEhC,IAAIC,EAAkBlzD,KAAKmyD,sBAC5BgB,EAAiB/lC,EAAO+kC,oBAC1B,OAAOe,EAAgB/lC,eAAegmC,QAKzC,IAAK/lC,EAAOlO,GAAE,KACnB,GAAIlf,KAAKkf,GAAE,GACT,GAAIkO,EAAOlO,GAAE,IACX,IACG6zC,GACD/yD,MAAQ2U,EAAK/Q,MACb5D,KAAKkf,GAAE,IAAsBkO,EAAOlO,GAAE,GAEtC,OAAOlf,KAAK2rC,MAAQve,EAAOue,SAExB,IAAe,IAAXve,EAAO5W,KAChB,OAAOxW,KAAK2rC,MAAQ,GACf,GAAe,IAAXve,EAAO5W,KAChB,OAAOxW,KAAK2rC,MAAQ,QAEjB,GAAI3rC,KAAKkf,GAAE,IAChB,GAAIkO,EAAOlO,GAAE,GACX,OAAOlf,KAAK2rC,MAAQve,EAAOue,UAExB,GAAI3rC,KAAKkf,GAAE,OACZkO,EAAOlO,GAAE,MACX,OAAOlf,KAAK2rC,MAAQve,EAAOue,KAIjC,OAAO,GAITh3B,EAAA1S,UAAAmxD,uBAAA,SAAuBhmC,EAAc2lC,GACnC,YADmC,IAAAA,OAAA,GAC/B/yD,KAAKkf,GAAE,KAA8Blf,KAAKmtB,eAAeC,IACpDA,EAAOlO,GAAE,OACdlf,KAAKkf,GAAE,GACFkO,EAAOlO,GAAE,IAAuBkO,EAAOue,MAAQ3rC,KAAK2rC,QACxDonB,GAAwB/yD,KAAKkf,GAAE,IAAsBkO,EAAOlO,GAAE,IAG5Dlf,KAAKwW,MAAQ4W,EAAO5W,OAItB7B,EAAA0+C,kBAAP,SAAyBvsB,EAAYC,EAAausB,GAChD,OAAIvsB,EAAM5Z,eAAe2Z,EAAMwsB,GAA+BxsB,EACrDA,EAAK3Z,eAAe4Z,EAAOusB,GAA+BvsB,EAC5D,MAITpyB,EAAA1S,UAAAuJ,SAAA,WACE,GAAIxL,KAAKkf,GAAE,KAAuB,CAChC,IAAIwP,EAAiB1uB,KAAK0uB,eAC1B,GAAIA,EACF,OAAO1uB,KAAKkf,GAAE,KACVwP,EAAevc,aAAe,UAC9Buc,EAAevc,aAErB,IAAIggD,EAAqBnyD,KAAKmyD,mBAC9B,GAAIA,EACF,OAAOnyD,KAAKkf,GAAE,KACV,IAAMizC,EAAmB3mD,WAAa,WACtC2mD,EAAmB3mD,WAEzBtB,QAAO,GAET,OAAQlK,KAAKwW,MACX,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAqB,MAAO,QAC5B,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAqB,MAAO,QAC5B,QAAoB,MAAO,OAC3B,QAAmB,MAAO,MAC1B,QAAmB,MAAO,MAC1B,QAAoB,MAAO,OAC3B,QAAStM,QAAO,GAChB,QAAoB,MAAO,SAO/ByK,EAAA1S,UAAAsxD,aAAA,WACE,OAAQvzD,KAAKwW,MACX,QAAS,OAAOo7C,EAAAriC,WAAWrpB,IAC3B,OACA,OAAmB,OAAO0rD,EAAAriC,WAAWppB,IACrC,OACA,OAAqB,OAAoB,IAAbnG,KAAK2rC,KAAaimB,EAAAriC,WAAWppB,IAAMyrD,EAAAriC,WAAWrpB,IAC1E,QAAmB,OAAO0rD,EAAAriC,WAAW5oB,IACrC,QAAmB,OAAOirD,EAAAriC,WAAW3oB,IACrC,QAAoB,OAAOgrD,EAAAriC,WAAW1oB,KACtC,QAAqB,OAAO+qD,EAAAriC,WAAWyY,OAK3CrzB,EAAA1S,UAAAuxD,aAAA,SAAa7zD,GACX,OAAQK,KAAKwW,MACX,QAAoBtM,QAAO,GAC3B,QAAS,OAAOvK,EAAOyD,IAAI,GAC3B,OACA,OAAqB,GAAiB,IAAbpD,KAAK2rC,KAAY,OAAOhsC,EAAOyD,IAAI,GAC5D,OACA,OAAmB,OAAOzD,EAAO0D,IAAI,GACrC,QAAmB,OAAO1D,EAAOkE,IAAI,GACrC,QAAmB,OAAOlE,EAAOmE,IAAI,GACrC,QAAoB,OAAOnE,EAAOoE,KAAKguD,KAK3Cp9C,EAAA1S,UAAAwxD,YAAA,SAAY9zD,GACV,OAAQK,KAAKwW,MACX,QACA,QAAoBtM,QAAO,GAC3B,QAAS,OAAOvK,EAAOyD,IAAI,GAC3B,OACA,OAAqB,GAAiB,IAAbpD,KAAK2rC,KAAY,OAAOhsC,EAAOyD,IAAI,GAC5D,OACA,OAAmB,OAAOzD,EAAO0D,IAAI,GACrC,QAAmB,OAAO1D,EAAOkE,IAAI,GACrC,QAAmB,OAAOlE,EAAOmE,IAAI,KAKzC6Q,EAAA1S,UAAAyxD,eAAA,SAAe/zD,GACb,OAAQK,KAAKwW,MACX,QACA,QAAoBtM,QAAO,GAC3B,QAAS,OAAOvK,EAAOyD,KAAK,GAC5B,OACA,OAAqB,GAAiB,IAAbpD,KAAK2rC,KAAY,OAAOhsC,EAAOyD,KAAK,GAC7D,OACA,OAAmB,OAAOzD,EAAO0D,KAAK,GAAI,GAC1C,QAAmB,OAAO1D,EAAOkE,KAAK,GACtC,QAAmB,OAAOlE,EAAOmE,KAAK,KAK1C6Q,EAAA1S,UAAAgpB,kBAAA,WACE,OAAQjrB,KAAKwW,MAEX,OACA,OACA,OACA,OACA,OACA,OACA,QAAoB,MAAO,IAC3B,OACA,OAAmB,MAAO,IAC1B,OACA,OAAqB,OAAoB,IAAbxW,KAAK2rC,KAAa,IAAM,IACpD,QAAmB,MAAO,IAC1B,QAAmB,MAAO,IAC1B,QAAoB,MAAO,IAC3B,QAAoB,MAAO,IAC3B,QAASzhC,QAAO,GAElB,MAAO,KAMOyK,EAAAzR,GAAY,IAAIyR,EAAI,EAClC,IAGmB,GAILA,EAAAxR,IAAY,IAAIwR,EAAI,EAClC,IAGkB,IAIJA,EAAAvR,IAAY,IAAIuR,EAAI,EAClC,IAEkB,IAIJA,EAAAtR,IAAY,IAAIsR,EAAI,EAClC,IAGkB,IAIJA,EAAA29C,QAAgB,IAAI39C,EAAI,EACtC,IAGkB,IAIJA,EAAA09C,QAAgB,IAAI19C,EAAI,EACtC,IAIkB,IAIJA,EAAApR,GAAW,IAAIoR,EAAI,EACjC,IAGmB,GAILA,EAAAnR,IAAY,IAAImR,EAAI,EAClC,IAGkB,IAIJA,EAAAlR,IAAY,IAAIkR,EAAI,EAClC,IAEkB,IAIJA,EAAAjR,IAAY,IAAIiR,EAAI,EAClC,IAGkB,IAIJA,EAAA69C,QAAgB,IAAI79C,EAAI,EACtC,IAGkB,IAIJA,EAAA49C,QAAgB,IAAI59C,EAAI,EACtC,IAIkB,IAIJA,EAAA/Q,KAAa,IAAI+Q,EAAI,GACnC,IAGmB,GAILA,EAAA9Q,IAAY,IAAI8Q,EAAI,GAClC,IAEkB,IAIJA,EAAA7Q,IAAY,IAAI6Q,EAAI,GAClC,IAGkB,IAIJA,EAAA5Q,KAAa,IAAI4Q,EAAI,GACnC,KACiB,KAIHA,EAAAG,KAAa,IAAIH,EAAI,KAAgC,GACvEA,EA/aA,GAAajV,EAAAiV,OAkbbjV,EAAAi0D,mBAAA,SAAmCC,GAGjC,IAFA,IAAIC,EAAWD,EAAM3nD,OACjBwnC,EAAM,IAAI1sC,MAAkB8sD,GACvBxzD,EAAI,EAAGA,EAAIwzD,IAAYxzD,EAAGozC,EAAIpzC,GAAKuzD,EAAMvzD,GAAGkzD,eACrD,OAAO9f,GAIT/zC,EAAAo0D,cAAA,SAA8BF,GAC5B,IAAIC,EAAWD,EAAM3nD,OACrB,IAAK4nD,EAAU,MAAO,GAEtB,IADA,IAAIvnD,EAAK,IAAIvF,MAAc8sD,GAClBxzD,EAAI,EAAGA,EAAIwzD,IAAYxzD,EAAGiM,EAAGjM,GAAKuzD,EAAMvzD,GAAGmL,WACpD,OAAOc,EAAGG,KAAK,MAIjB,IAAA0Z,EAAA,WAoBE,SAAAA,EACE4D,EACAohB,EACArhB,QAFA,IAAAC,MAAA,WACA,IAAAohB,MAAA,WACA,IAAArhB,MAAA,MARF9pB,KAAA+zD,qBAA8C,KAU5C/zD,KAAK+pB,eAAiBA,GAAkC,GACxD/pB,KAAKg0D,eAAiB,KACtBh0D,KAAKi0D,mBAAqB,EAC1Bj0D,KAAKmrC,WAAaA,GAA0Bx2B,EAAKG,KACjD9U,KAAK8pB,SAAWA,EAChB9pB,KAAKk0D,SAAU,EACfl0D,KAAK6e,KAAOlK,EAAKlR,IAAIkmB,WAAW3pB,MAoGpC,OAjGEmmB,EAAAlkB,UAAAkyD,iBAAA,SAAiB3uC,GACf,IAAI4H,EAASptB,KAAK+zD,qBAGlB,OAFK3mC,EACAljB,OAAOkjB,EAAO5H,SAAWA,GADjBxlB,KAAK+zD,qBAAuB3mC,EAAS,IAAIukC,EAAA7mC,eAAe9qB,KAAMwlB,GAEpE4H,GAITjH,EAAAlkB,UAAAioB,iBAAA,SAAiBvC,GACf,IAAIqsC,EAAiBh0D,KAAKg0D,eAC1B,OAAOA,GAAkBA,EAAe/nD,OAAS0b,EAC7CqsC,EAAersC,GACfysC,EAAwBzsC,IAI9BxB,EAAAlkB,UAAAkrB,eAAA,SAAeC,GAIb,IAAIinC,EAAer0D,KAAK8pB,SACpBwqC,EAAiBlnC,EAAOtD,SAC5B,GAAIuqC,GACF,IAAMC,IAAkBD,EAAalnC,eAAemnC,GAAkB,OAAO,OACxE,GAAIA,EACT,OAAO,EAIT,GAAIt0D,KAAKk0D,SAAW9mC,EAAO8mC,QAAS,OAAO,EAG3C,IAAIK,EAAqBv0D,KAAK+pB,eAC1ByqC,EAAuBpnC,EAAOrD,eAC9B0qC,EAAgBF,EAAmBtoD,OACvC,GAAIwoD,GAAiBD,EAAqBvoD,OAAQ,OAAO,EACzD,IAAK,IAAI5L,EAAI,EAAGA,EAAIo0D,IAAiBp0D,EAAG,CACtC,IAAIq0D,EAAoBH,EAAmBl0D,GACvCs0D,EAAsBH,EAAqBn0D,GAC/C,IAAKq0D,EAAkBvnC,eAAewnC,GAAsB,OAAO,EAIrE,IAAIC,EAAiB50D,KAAKmrC,WACtB0pB,EAAmBznC,EAAO+d,WAC9B,OAAOypB,GAAkBC,GAAoBD,EAAeznC,eAAe0nC,IAItE1uC,EAAA2uC,oBAAP,SAA2B/qC,EAA+BohB,EAAkBrhB,QAAA,IAAAA,MAAA,MAC1E,IAAIxd,EAAK,GAGT,GAFAA,EAAGE,KAAK2+B,EAAWlgB,qBACfnB,GAAUxd,EAAGE,KAAKsd,EAASmB,qBAC3BlB,EACF,IAAK,IAAI1pB,EAAI,EAAG8V,EAAI4T,EAAe9d,OAAQ5L,EAAI8V,IAAK9V,EAAGiM,EAAGE,KAAKud,EAAe1pB,GAAG4qB,qBAEnF,MAAO,WAAa3e,EAAGG,KAAK,KAI9B0Z,EAAAlkB,UAAAgpB,kBAAA,WACE,OAAO9E,EAAU2uC,oBAAoB90D,KAAK+pB,eAAgB/pB,KAAKmrC,WAAYnrC,KAAK8pB,WAIlF3D,EAAAlkB,UAAAuJ,SAAA,WACE,IAAIc,EAAK,IAAIvF,MACbuF,EAAGE,KAAK,KACR,IAAImb,EAAQ,EACRmC,EAAW9pB,KAAK8pB,SAChBA,IACFxd,EAAGE,KAAK,UACRtC,QAAQ4f,EAASqoC,oBACjB7lD,EAAGE,KAAKsd,EAASte,YACjBmc,EAAQ,GAEV,IAAIk8B,EAAa7jD,KAAK+pB,eAClB0qC,EAAgB5Q,EAAW53C,OAC/B,GAAIwoD,EAKF,IAJA,IAAI3pB,EAAQ9qC,KAAKg0D,eACbhpB,EAAWF,EAAQA,EAAM7+B,OAAS,EAClC8oD,EAAgB/0D,KAAKi0D,mBACrBe,EAAYh1D,KAAKk0D,QAAUO,EAAgB,GAAK,EAC3Cp0D,EAAI,EAAGA,EAAIo0D,IAAiBp0D,IAAKsnB,EACpCA,GAAOrb,EAAGE,KAAK,MACfnM,GAAK20D,GAAW1oD,EAAGE,KAAK,OACxBnM,EAAI2qC,EAAU1+B,EAAGE,KAAgBs+B,EAAOzqC,IACvCiM,EAAGE,KAAK4nD,EAAwB/zD,IACjCA,GAAK00D,GAAiB10D,GAAK20D,EAAW1oD,EAAGE,KAAK,OAC7CF,EAAGE,KAAK,MACbF,EAAGE,KAAKq3C,EAAWxjD,GAAGmL,YAK1B,OAFAc,EAAGE,KAAK,SACRF,EAAGE,KAAKxM,KAAKmrC,WAAW3/B,YACjBc,EAAGG,KAAK,KAEnB0Z,EAnIA,GAAazmB,EAAAymB,YAwIb,IAAI8uC,EAA+C,KAGnD,SAAgBb,EAAwBzsC,GACjCstC,IAA6BA,EAA8B,IAChE,IAAK,IAAI50D,EAAI40D,EAA4BhpD,OAAQ5L,GAAKsnB,IAAStnB,EAC7D40D,EAA4BzoD,KAAK,OAASnM,EAAEmL,SAAS,KAEvD,OAAOypD,EAA4BttC,EAAQ,GAL7CjoB,EAAA00D,ybCtqBA,IAuBYhS,EAwIA8S,EA/JZ3nD,EAAApN,EAAA,GAMAsN,EAAAtN,EAAA,GAKAwJ,EAAAxJ,EAAA,GA0JA,SAAgBg1D,EAAiBppD,GAE/B,OADA7B,OAAO6B,EAAKE,QACJF,EAAKM,WAAW,IACtB,QACE,OAAQN,GACN,IAAK,WAAY,OAAOq2C,EAAMhgC,SAC9B,IAAK,KAAM,OAAOggC,EAAMgT,GACxB,IAAK,QAAS,OAAOhT,EAAMiT,MAC3B,IAAK,QAAS,OAAOjT,EAAMkT,MAE7B,MAEF,QACE,OAAQvpD,GACN,IAAK,QAAS,OAAOq2C,EAAMkO,MAE7B,MAEF,QACE,OAAQvkD,GACN,IAAK,OAAQ,OAAOq2C,EAAMmT,KAC1B,IAAK,QAAS,OAAOnT,EAAMoT,MAC3B,IAAK,QAAS,OAAOpT,EAAM3jC,MAC3B,IAAK,WAAY,OAAO2jC,EAAMmO,SAC9B,IAAK,QAAS,OAAOnO,EAAM/iC,MAC3B,IAAK,cAAe,OAAO+iC,EAAM5/B,YAEnC,MAEF,SACE,OAAQzW,GACN,IAAK,WAAY,OAAOq2C,EAAMqT,SAC9B,IAAK,UAAW,OAAOrT,EAAM98B,QAC7B,IAAK,UAAW,OAAO88B,EAAMsT,QAC7B,IAAK,SAAU,OAAOtT,EAAMuT,OAC5B,IAAK,KAAM,OAAOvT,EAAMoO,GAE1B,MAEF,SACE,OAAQzkD,GACN,IAAK,OAAQ,OAAOq2C,EAAMwT,KAC1B,IAAK,OAAQ,OAAOxT,EAAMr7B,KAC1B,IAAK,SAAU,OAAOq7B,EAAMntC,OAC5B,IAAK,UAAW,OAAOmtC,EAAMyT,QAE/B,MAEF,SACE,OAAQ9pD,GACN,IAAK,QAAS,OAAOq2C,EAAMI,MAC3B,IAAK,UAAW,OAAOJ,EAAM0T,QAC7B,IAAK,MAAO,OAAO1T,EAAMyO,IACzB,IAAK,OAAQ,OAAOzO,EAAM2T,KAC1B,IAAK,WAAY,OAAO3T,EAAM7jC,SAEhC,MAEF,SACE,OAAQxS,GACN,IAAK,MAAO,OAAOq2C,EAAM3gC,IAE3B,MAEF,SACE,OAAQ1V,GACN,IAAK,KAAM,OAAOq2C,EAAM4O,GACxB,IAAK,aAAc,OAAO5O,EAAM4T,WAChC,IAAK,SAAU,OAAO5T,EAAMvrC,OAC5B,IAAK,KAAM,OAAOurC,EAAM6T,GACxB,IAAK,aAAc,OAAO7T,EAAM4M,WAChC,IAAK,YAAa,OAAO5M,EAAMl2B,UAC/B,IAAK,KAAM,OAAOk2B,EAAM8T,GAE1B,MAEF,SACE,OAAQnqD,GACN,IAAK,QAAS,OAAOq2C,EAAM+T,MAE7B,MAEF,SACE,OAAQpqD,GACN,IAAK,MAAO,OAAOq2C,EAAMgU,IAE3B,MAEF,SACE,OAAQrqD,GACN,IAAK,SAAU,OAAOq2C,EAAMiU,OAE9B,MAEF,SACE,OAAQtqD,GACN,IAAK,YAAa,OAAOq2C,EAAMt7B,UAC/B,IAAK,MAAO,OAAOs7B,EAAM8M,IACzB,IAAK,OAAQ,OAAO9M,EAAME,KAE5B,MAEF,SACE,OAAQv2C,GACN,IAAK,KAAM,OAAOq2C,EAAMkU,GAE1B,MAEF,SACE,OAAQvqD,GACN,IAAK,UAAW,OAAOq2C,EAAMmU,QAC7B,IAAK,UAAW,OAAOnU,EAAMoU,QAC7B,IAAK,YAAa,OAAOpU,EAAMqU,UAC/B,IAAK,SAAU,OAAOrU,EAAMsU,OAE9B,MAEF,SACE,OAAQ3qD,GACN,IAAK,WAAY,OAAOq2C,EAAMpgC,SAC9B,IAAK,SAAU,OAAOogC,EAAM8O,OAE9B,MAEF,SACE,OAAQnlD,GACN,IAAK,MAAO,OAAOq2C,EAAM1gC,IACzB,IAAK,SAAU,OAAO0gC,EAAMtgC,OAC5B,IAAK,QAAS,OAAOsgC,EAAMY,MAC3B,IAAK,SAAU,OAAOZ,EAAMgP,OAE9B,MAEF,SACE,OAAQrlD,GACN,IAAK,OAAQ,OAAOq2C,EAAMkN,KAC1B,IAAK,QAAS,OAAOlN,EAAMiP,MAC3B,IAAK,OAAQ,OAAOjP,EAAMG,KAC1B,IAAK,MAAO,OAAOH,EAAMkP,IACzB,IAAK,OAAQ,OAAOlP,EAAMwL,KAC1B,IAAK,SAAU,OAAOxL,EAAMuU,OAE9B,MAEF,SACE,OAAQ5qD,GACN,IAAK,MAAO,OAAOq2C,EAAMwU,IACzB,IAAK,OAAQ,OAAOxU,EAAMoP,KAE5B,MAEF,SACE,OAAQzlD,GACN,IAAK,QAAS,OAAOq2C,EAAMqP,MAC3B,IAAK,OAAQ,OAAOrP,EAAMyU,KAE5B,MAEF,SACE,OAAQ9qD,GACN,IAAK,QAAS,OAAOq2C,EAAM0U,OAKjC,OAAO1U,EAAMzxC,QAGf,SAAgBomD,EAAsBC,GACpC,OAAQA,GACN,KAAK5U,EAAMhgC,SACX,KAAKggC,EAAMgT,GACX,KAAKhT,EAAM5/B,YACX,KAAK4/B,EAAM98B,QACX,KAAK88B,EAAMuT,OACX,KAAKvT,EAAM2T,KACX,KAAK3T,EAAMyO,IACX,KAAKzO,EAAM3gC,IACX,KAAK2gC,EAAM4M,WACX,KAAK5M,EAAM8T,GACX,KAAK9T,EAAM+T,MACX,KAAK/T,EAAMiU,OACX,KAAKjU,EAAMt7B,UACX,KAAKs7B,EAAMpgC,SACX,KAAKogC,EAAM1gC,IACX,KAAK0gC,EAAMwL,KACX,KAAKxL,EAAMoP,KAAM,OAAO,EACxB,QAAS,OAAO,IAzUpB,SAAYpP,GAKVA,IAAA,uBACAA,IAAA,WACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,eACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,iBACAA,IAAA,uBACAA,IAAA,8BACAA,IAAA,wBACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,oBACAA,IAAA,YACAA,IAAA,gBACAA,IAAA,gBACAA,IAAA,oBACAA,IAAA,sBACAA,IAAA,kBACAA,IAAA,sBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,cACAA,IAAA,YACAA,IAAA,4BACAA,IAAA,oBACAA,IAAA,YACAA,IAAA,4BACAA,IAAA,0BACAA,IAAA,YACAA,IAAA,kBACAA,IAAA,cACAA,IAAA,oBACAA,IAAA,0BACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,YACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,0BACAA,IAAA,oBACAA,IAAA,wBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,oBACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,gBACAA,IAAA,kBAIAA,IAAA,0BACAA,IAAA,4BACAA,IAAA,0BACAA,IAAA,4BACAA,IAAA,8BACAA,IAAA,gCACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,0BACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,8BACAA,IAAA,sCACAA,IAAA,4CACAA,IAAA,kCACAA,IAAA,4CACAA,IAAA,gDACAA,IAAA,0DACAA,IAAA,4CACAA,IAAA,gBACAA,IAAA,kBACAA,IAAA,0CACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,sBACAA,IAAA,0BACAA,IAAA,8BACAA,IAAA,0CACAA,IAAA,sDACAA,IAAA,8EACAA,IAAA,0BACAA,IAAA,cACAA,IAAA,kBACAA,IAAA,8BACAA,IAAA,kBACAA,IAAA,8CACAA,IAAA,sBACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,qBACAA,IAAA,+BACAA,IAAA,iCACAA,IAAA,uCACAA,IAAA,yDACAA,IAAA,iCACAA,IAAA,qCACAA,IAAA,yDACAA,IAAA,qEACAA,IAAA,6FACAA,IAAA,yCACAA,IAAA,6BACAA,IAAA,iCACAA,IAAA,aAIAA,IAAA,6BACAA,IAAA,mCACAA,IAAA,qCACAA,IAAA,iCAIAA,IAAA,uBACAA,IAAA,2BArIF,CAAYA,EAAA1iD,EAAA0iD,QAAA1iD,EAAA0iD,MAAK,KAwIjB,SAAY8S,GACVA,IAAA,qBACAA,IAAA,mBACAA,IAAA,mBAHF,CAAYA,EAAAx1D,EAAAw1D,qBAAAx1D,EAAAw1D,mBAAkB,KAM9Bx1D,EAAAy1D,mBAwKAz1D,EAAAq3D,wBAuBAr3D,EAAAu3D,sBAAA,SAAsCD,GACpC,OAAQA,GACN,KAAK5U,EAAMuT,OAAQ,MAAO,SAC1B,KAAKvT,EAAM6T,GAAI,MAAO,KACtB,KAAK7T,EAAM4M,WAAY,MAAO,aAC9B,KAAK5M,EAAM8M,IAAK,MAAO,MACvB,KAAK9M,EAAMuU,OAAQ,MAAO,SAC1B,KAAKvU,EAAMoP,KAAM,MAAO,OACxB,KAAKpP,EAAM0U,MAAO,MAAO,QACzB,KAAK1U,EAAM8U,YAAa,MAAO,MAC/B,KAAK9U,EAAM0M,MAAO,MAAO,IACzB,KAAK1M,EAAM+U,SAAU,MAAO,IAC5B,KAAK/U,EAAMgV,YAAa,MAAO,IAC/B,KAAKhV,EAAMiV,gBAAiB,MAAO,KACnC,KAAKjV,EAAMkV,mBAAoB,MAAO,KACtC,KAAKlV,EAAMmV,cAAe,MAAO,KACjC,KAAKnV,EAAMoV,mBAAoB,MAAO,KACtC,KAAKpV,EAAMqV,qBAAsB,MAAO,MACxC,KAAKrV,EAAMsV,0BAA2B,MAAO,MAC7C,KAAKtV,EAAMlyC,KAAM,MAAO,IACxB,KAAKkyC,EAAMhyC,MAAO,MAAO,IACzB,KAAKgyC,EAAMuV,kBAAmB,MAAO,KACrC,KAAKvV,EAAMwV,SAAU,MAAO,IAC5B,KAAKxV,EAAMyV,MAAO,MAAO,IACzB,KAAKzV,EAAM0V,QAAS,MAAO,IAC3B,KAAK1V,EAAM2V,UAAW,MAAO,KAC7B,KAAK3V,EAAM4V,YAAa,MAAO,KAC/B,KAAK5V,EAAM6V,kBAAmB,MAAO,KACrC,KAAK7V,EAAM8V,wBAAyB,MAAO,KAC3C,KAAK9V,EAAM+V,oCAAqC,MAAO,MACvD,KAAK/V,EAAMgW,UAAW,MAAO,IAC7B,KAAKhW,EAAMiW,IAAK,MAAO,IACvB,KAAKjW,EAAMkW,MAAO,MAAO,IACzB,KAAKlW,EAAMmW,YAAa,MAAO,IAC/B,KAAKnW,EAAMoW,MAAO,MAAO,IACzB,KAAKpW,EAAMqW,oBAAqB,MAAO,KACvC,KAAKrW,EAAMsW,QAAS,MAAO,KAC3B,KAAKtW,EAAMuW,OAAQ,MAAO,IAC1B,KAAKvW,EAAMwW,YAAa,MAAO,KAC/B,KAAKxW,EAAMyW,aAAc,MAAO,KAChC,KAAKzW,EAAM0W,gBAAiB,MAAO,KACnC,KAAK1W,EAAM2W,yBAA0B,MAAO,MAC5C,KAAK3W,EAAM4W,aAAc,MAAO,KAChC,KAAK5W,EAAM6W,eAAgB,MAAO,KAClC,KAAK7W,EAAM8W,yBAA0B,MAAO,MAC5C,KAAK9W,EAAM+W,+BAAgC,MAAO,MAClD,KAAK/W,EAAMgX,2CAA4C,MAAO,OAC9D,KAAKhX,EAAMiX,iBAAkB,MAAO,KACpC,KAAKjX,EAAMkX,WAAY,MAAO,KAC9B,KAAKlX,EAAMmX,aAAc,MAAO,KAChC,QAEE,OADArvD,QAAO,GACA,KAKb,IAAAuR,EAAA,WAUE,SAAAA,EAAYhQ,EAAgBS,EAAYC,GA6CxCnM,KAAA4qB,aAAsB,EA5CpB5qB,KAAKyL,OAASA,EACdzL,KAAKkM,MAAQA,EACblM,KAAKmM,IAAMA,EA2Cf,OAxCSsP,EAAAhP,KAAP,SAAY+sD,EAAUC,GACpB,GAAID,EAAE/tD,QAAUguD,EAAEhuD,OAAQ,MAAM,IAAIyQ,MAAM,mBAC1C,OAAO,IAAIT,EAAM+9C,EAAE/tD,OACjB+tD,EAAEttD,MAAQutD,EAAEvtD,MAAQstD,EAAEttD,MAAQutD,EAAEvtD,MAChCstD,EAAErtD,IAAMstD,EAAEttD,IAAMqtD,EAAErtD,IAAMstD,EAAEttD,MAI9BpL,OAAAC,eAAIya,EAAAxZ,UAAA,UAAO,KAAX,WACE,OAAO,IAAIwZ,EAAMzb,KAAKyL,OAAQzL,KAAKkM,MAAOlM,KAAKkM,wCAGjDnL,OAAAC,eAAIya,EAAAxZ,UAAA,QAAK,KAAT,WACE,OAAO,IAAIwZ,EAAMzb,KAAKyL,OAAQzL,KAAKmM,IAAKnM,KAAKmM,sCAG/CpL,OAAAC,eAAIya,EAAAxZ,UAAA,OAAI,KAAR,WAGE,IAFA,IAAI8J,EAAO/L,KAAKyL,OAAOM,KACnBJ,EAAO,EACFokD,EAAM/vD,KAAKkM,MAAO6jD,GAAO,IAAKA,EACb,IAApBhkD,EAAKM,WAAW0jD,IAA2BpkD,IAEjD,OAAOA,mCAGT5K,OAAAC,eAAIya,EAAAxZ,UAAA,SAAM,KAAV,WAGE,IAFA,IAAI8J,EAAO/L,KAAKyL,OAAOM,KACnBH,EAAS,EACJmkD,EAAM/vD,KAAKkM,MAAQ,EAAG6jD,GAAO,GACZ,IAApBhkD,EAAKM,WAAW0jD,KADqBA,IAEvCnkD,EAEJ,OAAOA,mCAGT6P,EAAAxZ,UAAAuJ,SAAA,WACE,OAAOxL,KAAKyL,OAAOM,KAAKQ,UAAUvM,KAAKkM,MAAOlM,KAAKmM,MAIvDsP,EAxDA,GAAa/b,EAAA+b,QAgEb,IAAAi+C,EAAA,SAAA3oD,GAgBE,SAAA2oD,EAAYjuD,EAAgBoB,QAAA,IAAAA,MAAA,MAA5B,IAAAmE,EACED,EAAAvQ,KAAAR,KAAM6M,IAAY7M,KAdpBgR,EAAA7E,IAAW,EAEX6E,EAAA++C,IAAW,EACX/+C,EAAAgmD,OAAgB,EAChBhmD,EAAA2oD,SAAgB,EAEhB3oD,EAAA4oD,WAAoB,EACpB5oD,EAAA6oD,aAAoB,EACpB7oD,EAAA8oD,oBAA2B,EAE3B9oD,EAAA+oD,UAAmC,KAMjC/oD,EAAKvF,OAASA,EACduF,EAAK++C,IAAM,EACX/+C,EAAK7E,IAAMV,EAAOM,KAAKE,OACvB+E,EAAKnE,YAAcA,GAAe,IAAI9F,MAEtC,IAAIoF,EAAM6E,EAAK7E,IACXJ,EAAON,EAAOM,KAWlB,GAPEiF,EAAK++C,IAAM5jD,GACc,OAAzBJ,EAAKM,WAAW2E,EAAK++C,QAEnB/+C,EAAK++C,IAKP/+C,EAAK++C,IAAM,EAAI5jD,GACU,IAAzBJ,EAAKM,WAAW2E,EAAK++C,MACQ,IAA7BhkD,EAAKM,WAAW2E,EAAK++C,IAAM,GAG3B,IADA/+C,EAAK++C,KAAO,EAEV/+C,EAAK++C,IAAM5jD,GACc,IAAzBJ,EAAKM,WAAW2E,EAAK++C,QAEnB/+C,EAAK++C,aA8iCf,OA5lC+Bz9C,EAAAonD,EAAA3oD,GAoD7B2oD,EAAAz3D,UAAA+V,KAAA,SAAKgiD,GAEH,YAFG,IAAAA,MAAyC9E,EAAmBQ,SAC/D11D,KAAK45D,WAAa,EACX55D,KAAKg3D,MAAQh3D,KAAKi6D,WAAWD,IAG9BN,EAAAz3D,UAAAg4D,WAAR,SACED,EACAE,QADA,IAAAF,MAAyC9E,EAAmBQ,cAC5D,IAAAwE,MAAsB92D,IAAIoxC,WAI1B,IAFA,IAAIroC,EAAMnM,KAAKmM,IACXJ,EAAO/L,KAAKyL,OAAOM,KAChB/L,KAAK+vD,IAAM5jD,GAAK,CACrBnM,KAAK25D,SAAW35D,KAAK+vD,IACrB,IAAIrvD,EAAIqL,EAAKM,WAAWrM,KAAK+vD,KAC7B,OAAQrvD,GACN,QACE,OACIV,KAAK+vD,IAAM5jD,GACY,IAAzBJ,EAAKM,WAAWrM,KAAK+vD,MACpB,MAGL,QACA,OACA,QACA,QACA,UACI/vD,KAAK+vD,IACP,MAEF,QAEE,QADE/vD,KAAK+vD,IAELmK,EAAiB,GAAKl6D,KAAK+vD,IAAM5jD,GACR,IAAzBJ,EAAKM,WAAWrM,KAAK+vD,QAEnB/vD,KAAK+vD,IAELmK,EAAiB,GAAKl6D,KAAK+vD,IAAM5jD,GACR,IAAzBJ,EAAKM,WAAWrM,KAAK+vD,QAEnB/vD,KAAK+vD,IACA3N,EAAMsV,2BAERtV,EAAMoV,oBAERpV,EAAMmW,YAEf,QACA,QACA,QACE,OAAOnW,EAAM+X,cAEf,QAEE,QADEn6D,KAAK+vD,IAELmK,EAAiB,GAAKl6D,KAAK+vD,IAAM5jD,GACR,IAAzBJ,EAAKM,WAAWrM,KAAK+vD,QAEnB/vD,KAAK+vD,IACA3N,EAAM6W,gBAER7W,EAAM0V,QAEf,QAEE,KADE93D,KAAK+vD,IACHmK,EAAiB,GAAKl6D,KAAK+vD,IAAM5jD,EAAK,CAExC,GAAO,KADHiuD,EAAMruD,EAAKM,WAAWrM,KAAK+vD,MAG7B,QADE/vD,KAAK+vD,IACA3N,EAAMqW,oBAEf,GAAO,IAAH2B,EAEF,QADEp6D,KAAK+vD,IACA3N,EAAMiX,iBAGjB,OAAOjX,EAAMgW,UAEf,QAEE,QADEp4D,KAAK+vD,IACA3N,EAAMiY,UAEf,QAEE,QADEr6D,KAAK+vD,IACA3N,EAAMkY,WAEf,QAEE,KADEt6D,KAAK+vD,IACHmK,EAAiB,GAAKl6D,KAAK+vD,IAAM5jD,EAAK,CAExC,GAAO,KADHiuD,EAAMruD,EAAKM,WAAWrM,KAAK+vD,MAG7B,QADE/vD,KAAK+vD,IACA3N,EAAM0W,gBAEf,GAAO,IAAHsB,EAEF,QADEp6D,KAAK+vD,IAELmK,EAAiB,GAAKl6D,KAAK+vD,IAAM5jD,GACR,IAAzBJ,EAAKM,WAAWrM,KAAK+vD,QAEnB/vD,KAAK+vD,IACA3N,EAAM2W,0BAER3W,EAAMuV,kBAGjB,OAAOvV,EAAMwV,SAEf,QAEE,KADE53D,KAAK+vD,IACHmK,EAAiB,GAAKl6D,KAAK+vD,IAAM5jD,EAAK,CAExC,GAAO,KADHiuD,EAAMruD,EAAKM,WAAWrM,KAAK+vD,MAG7B,QADE/vD,KAAK+vD,IACA3N,EAAM2V,UAEf,GAAO,IAAHqC,EAEF,QADEp6D,KAAK+vD,IACA3N,EAAMwW,YAGjB,OAAOxW,EAAMlyC,KAEf,QAEE,QADElQ,KAAK+vD,IACA3N,EAAM0M,MAEf,QAEE,KADE9uD,KAAK+vD,IACHmK,EAAiB,GAAKl6D,KAAK+vD,IAAM5jD,EAAK,CAExC,GAAO,KADHiuD,EAAMruD,EAAKM,WAAWrM,KAAK+vD,MAG7B,QADE/vD,KAAK+vD,IACA3N,EAAM4V,YAEf,GAAO,IAAHoC,EAEF,QADEp6D,KAAK+vD,IACA3N,EAAMyW,aAGjB,OAAOzW,EAAMhyC,MAEf,QAEE,KADEpQ,KAAK+vD,IACHmK,EAAiB,GAAKl6D,KAAK+vD,IAAM5jD,EAAK,CACxC,IAAIiuD,EAAMruD,EAAKM,WAAWrM,KAAK+vD,KAC/B,GAAIpmD,EAAA4wD,eAAeH,GAEjB,QADEp6D,KAAK+vD,IACA3N,EAAMoY,aAEf,GACEN,EAAiB,GAAKl6D,KAAK+vD,IAAM,EAAI5jD,GAClC,IAAHiuD,GAC6B,IAA7BruD,EAAKM,WAAWrM,KAAK+vD,IAAM,GAG3B,OADA/vD,KAAK+vD,KAAO,EACL3N,EAAM8U,YAGjB,OAAO9U,EAAMqY,IAEf,QACE,IAAIC,EAAkB16D,KAAK+vD,IAE3B,KADE/vD,KAAK+vD,IACHmK,EAAiB,GAAKl6D,KAAK+vD,IAAM5jD,EAAK,CAExC,GAAO,KADHiuD,EAAMruD,EAAKM,WAAWrM,KAAK+vD,MACJ,CACzB,IAAIvL,EAAc/2C,EAAA6gD,YAAYqM,KAQ9B,IANE36D,KAAK+vD,IAAM,EAAI5jD,GACc,IAA7BJ,EAAKM,WAAWrM,KAAK+vD,IAAM,OAEzB/vD,KAAK+vD,IACPvL,EAAc/2C,EAAA6gD,YAAYsM,UAEnB56D,KAAK+vD,IAAM5jD,GAClB,GAA6B,IAAzBJ,EAAKM,WAAWrM,KAAK+vD,KAA2B,GAChD/vD,KAAK+vD,IACP,MAGA/vD,KAAK+5D,WACP/5D,KAAK+5D,UACHvV,EACAz4C,EAAKQ,UAAUmuD,EAAiB16D,KAAK+vD,KACrC/vD,KAAK6K,MAAM6vD,EAAiB16D,KAAK+vD,MAGrC,MAEF,GAAO,IAAHqK,EAA0B,CAE5B,IADA,IAAIS,GAAS,IACJ76D,KAAK+vD,IAAM5jD,GAElB,GACG,KAFHzL,EAAIqL,EAAKM,WAAWrM,KAAK+vD,OAGvB/vD,KAAK+vD,IAAM,EAAI5jD,GACc,IAA7BJ,EAAKM,WAAWrM,KAAK+vD,IAAM,GAC3B,CACA/vD,KAAK+vD,KAAO,EACZ8K,GAAS,EACT,MAGCA,EAKM76D,KAAK+5D,WACd/5D,KAAK+5D,UACHtsD,EAAA6gD,YAAY+B,MACZtkD,EAAKQ,UAAUmuD,EAAiB16D,KAAK+vD,KACrC/vD,KAAK6K,MAAM6vD,EAAiB16D,KAAK+vD,MARnC/vD,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACf96D,KAAK6K,MAAM7K,KAAK+vD,KAAM,MAS1B,MAEF,GAAO,IAAHqK,EAEF,QADEp6D,KAAK+vD,IACA3N,EAAM4W,aAGjB,OAAO5W,EAAMyV,MAEf,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACE,OAAO73D,KAAK+6D,cACR3Y,EAAM4Y,eACN5Y,EAAMoY,aAEZ,QAEE,QADEx6D,KAAK+vD,IACA3N,EAAM6Y,MAEf,QAEE,QADEj7D,KAAK+vD,IACA3N,EAAM8Y,UAEf,QAEE,KADEl7D,KAAK+vD,IACHmK,EAAiB,GAAKl6D,KAAK+vD,IAAM5jD,EAAK,CAExC,GAAO,KADHiuD,EAAMruD,EAAKM,WAAWrM,KAAK+vD,MAG7B,QADE/vD,KAAK+vD,IAELmK,EAAiB,GACjBl6D,KAAK+vD,IAAM5jD,GACc,IAAzBJ,EAAKM,WAAWrM,KAAK+vD,QAEnB/vD,KAAK+vD,IACA3N,EAAM8W,0BAER9W,EAAM6V,kBAEf,GAAO,IAAHmC,EAEF,QADEp6D,KAAK+vD,IACA3N,EAAMiV,gBAGjB,OAAOjV,EAAM+U,SAEf,QAEE,KADEn3D,KAAK+vD,IACHmK,EAAiB,GAAKl6D,KAAK+vD,IAAM5jD,EAAK,CAExC,GAAO,KADHiuD,EAAMruD,EAAKM,WAAWrM,KAAK+vD,MAG7B,QADE/vD,KAAK+vD,IAELmK,EAAiB,GACjBl6D,KAAK+vD,IAAM5jD,GACc,IAAzBJ,EAAKM,WAAWrM,KAAK+vD,QAEnB/vD,KAAK+vD,IACA3N,EAAMqV,sBAERrV,EAAMmV,cAEf,GAAO,IAAH6C,EAEF,QADEp6D,KAAK+vD,IACA3N,EAAM+Y,mBAGjB,OAAO/Y,EAAMuW,OAEf,QAEE,KADE34D,KAAK+vD,IACHmK,EAAiB,GAAKl6D,KAAK+vD,IAAM5jD,EAAK,CAExC,GAAO,KADHiuD,EAAMruD,EAAKM,WAAWrM,KAAK+vD,MACE,CAE/B,KADE/vD,KAAK+vD,IACHmK,EAAiB,GAAKl6D,KAAK+vD,IAAM5jD,EAAK,CAExC,GAAO,KADPiuD,EAAMruD,EAAKM,WAAWrM,KAAK+vD,MAGzB,QADE/vD,KAAK+vD,IAELmK,EAAiB,GAAKl6D,KAAK+vD,IAAM5jD,GACR,IAAzBJ,EAAKM,WAAWrM,KAAK+vD,QAEnB/vD,KAAK+vD,IACA3N,EAAMgX,4CAERhX,EAAM+V,oCAEf,GAAO,IAAHiC,EAEF,QADEp6D,KAAK+vD,IACA3N,EAAM+W,+BAGjB,OAAO/W,EAAM8V,wBAEf,GAAO,IAAHkC,EAEF,QADEp6D,KAAK+vD,IACA3N,EAAMkV,mBAGjB,OAAOlV,EAAMgV,YAEf,QAEE,QADEp3D,KAAK+vD,IACA3N,EAAMgZ,SAEf,QAEE,QADEp7D,KAAK+vD,IACA3N,EAAMiZ,YAEf,QAEE,QADEr7D,KAAK+vD,IACA3N,EAAMkZ,aAEf,QAEE,QADEt7D,KAAK+vD,IAELmK,EAAiB,GAAKl6D,KAAK+vD,IAAM5jD,GACR,IAAzBJ,EAAKM,WAAWrM,KAAK+vD,QAEnB/vD,KAAK+vD,IACA3N,EAAMmX,cAERnX,EAAMkW,MAEf,SAEE,QADEt4D,KAAK+vD,IACA3N,EAAMmZ,UAEf,SAEE,KADEv7D,KAAK+vD,IACHmK,EAAiB,GAAKl6D,KAAK+vD,IAAM5jD,EAAK,CAExC,GAAO,MADHiuD,EAAMruD,EAAKM,WAAWrM,KAAK+vD,MAG7B,QADE/vD,KAAK+vD,IACA3N,EAAMsW,QAEf,GAAO,IAAH0B,EAEF,QADEp6D,KAAK+vD,IACA3N,EAAMkX,WAGjB,OAAOlX,EAAMiW,IAEf,SAEE,QADEr4D,KAAK+vD,IACA3N,EAAMoZ,WAEf,SAEE,QADEx7D,KAAK+vD,IACA3N,EAAMoW,MAEf,QAEE,QADEx4D,KAAK+vD,IACA3N,EAAMqZ,GAEf,QACE,GAAI9xD,EAAA+xD,kBAAkBh7D,GAAI,CACxB,GAAIiJ,EAAAgyD,mBAAmBj7D,GAAI,CAEzB,IADA,IAAIk7D,EAAY57D,KAAK+vD,MAEjB/vD,KAAK+vD,IAAM5jD,GACbxC,EAAAkyD,iBAAiBn7D,EAAIqL,EAAKM,WAAWrM,KAAK+vD,OAE1C,IAAKpmD,EAAAgyD,mBAAmBj7D,GAEtB,OADAV,KAAK+vD,IAAM6L,EACJxZ,EAAMM,WAGjB,IACIoZ,EAAe3G,EADDppD,EAAKQ,UAAUqvD,EAAW57D,KAAK+vD,MAEjD,GACE+L,IAAiB1Z,EAAMzxC,SACvBqpD,IAAuB9E,EAAmB6G,SAExC/B,IAAuB9E,EAAmB8G,SAC1CjF,EAAsB+E,IAGxB,OAAOA,EAET97D,KAAK+vD,IAAM6L,EAEb,OAAOxZ,EAAMM,WACR,GAAI/4C,EAAAsyD,aAAav7D,GAAI,GACxBV,KAAK+vD,IACP,MAOF,OALA/vD,KAAKmN,MACHI,EAAAhD,eAAe2xD,kBACfl8D,KAAK6K,MAAM7K,KAAK+vD,IAAK/vD,KAAK+vD,IAAM,MAEhC/vD,KAAK+vD,IACA3N,EAAMzxC,SAInB,OAAOyxC,EAAM+Z,WAGfzC,EAAAz3D,UAAAm6D,KAAA,SACEC,EACArC,EACAsC,QAFA,IAAAD,OAAA,QACA,IAAArC,MAAyC9E,EAAmBQ,cAC5D,IAAA4G,MAAyBl5D,IAAIoxC,WAE7B,IAAIzoC,EAAO/L,KAAKyL,OAAOM,KACvB,GAAI/L,KAAK45D,UAAY,EAAG,CACtB,IAAIgC,EAAY57D,KAAK+vD,IACjBwM,EAAcv8D,KAAKg3D,MACnBwF,EAAiBx8D,KAAK25D,SAG1B,GAFA35D,KAAK45D,UAAY55D,KAAKi6D,WAAWD,EAAoBsC,GACrDt8D,KAAK65D,aAAe75D,KAAK25D,SACrB0C,EAAgB,CAClBr8D,KAAK85D,oBAAqB,EAC1B,IAAK,IAAI/J,EAAM6L,EAAWzvD,EAAMnM,KAAK65D,aAAc9J,EAAM5jD,IAAO4jD,EAC9D,GAAIpmD,EAAAyC,YAAYL,EAAKM,WAAW0jD,IAAO,CACrC/vD,KAAK85D,oBAAqB,EAC1B,OAIN95D,KAAK+vD,IAAM6L,EACX57D,KAAKg3D,MAAQuF,EACbv8D,KAAK25D,SAAW6C,EAElB,OAAOx8D,KAAK45D,WAGdF,EAAAz3D,UAAAw6D,eAAA,SAAezC,GACb,YADa,IAAAA,MAAyC9E,EAAmB8G,QAClEh8D,KAAK08D,KAAKta,EAAMM,WAAYsX,IAGrCN,EAAAz3D,UAAAy6D,KAAA,SAAK1F,EAAcgD,QAAA,IAAAA,MAAyC9E,EAAmBQ,SAC7E,IAAIkG,EAAY57D,KAAK+vD,IACjBwM,EAAcv8D,KAAKg3D,MACnBwF,EAAiBx8D,KAAK25D,SACtB2C,EAAoBl5D,IAAIoxC,UAC5B,OAAQwiB,GACN,KAAK5U,EAAMgV,YACTkF,EAAoB,EAKxB,OADAt8D,KAAKg3D,MAAQh3D,KAAKi6D,WAAWD,EAAoBsC,GAC7Ct8D,KAAKg3D,OAASA,GAChBh3D,KAAK45D,WAAa,GACX,IAEP55D,KAAK+vD,IAAM6L,EACX57D,KAAKg3D,MAAQuF,EACbv8D,KAAK25D,SAAW6C,GACT,IAIX9C,EAAAz3D,UAAA06D,KAAA,WACE,IAAIC,EAUJ,OATIC,GACFD,EAAQC,EACRA,EAAgB,MAEhBD,EAAQ,IAAIE,EAEdF,EAAM7M,IAAM/vD,KAAK+vD,IACjB6M,EAAM5F,MAAQh3D,KAAKg3D,MACnB4F,EAAMjD,SAAW35D,KAAK25D,SACfiD,GAGTlD,EAAAz3D,UAAA86D,QAAA,SAAQH,GACNC,EAAgBD,GAGlBlD,EAAAz3D,UAAA+6D,MAAA,SAAMJ,GACJ58D,KAAK+vD,IAAM6M,EAAM7M,IACjB/vD,KAAKg3D,MAAQ4F,EAAM5F,MACnBh3D,KAAK25D,SAAWiD,EAAMjD,SACtB35D,KAAK45D,WAAa,GAGpBF,EAAAz3D,UAAA4I,MAAA,SAAMqB,EAAiBC,GAOrB,YAPI,IAAAD,OAAc,QAAG,IAAAC,OAAY,GAC7BD,EAAQ,GACVA,EAAQlM,KAAK25D,SACbxtD,EAAMnM,KAAK+vD,KACF5jD,EAAM,IACfA,EAAMD,GAED,IAAIuP,EAAMzb,KAAKyL,OAAQS,EAAOC,IAGvCutD,EAAAz3D,UAAAg7D,eAAA,WAIE,IAHA,IAAIlxD,EAAO/L,KAAKyL,OAAOM,KACnBG,EAAQlM,KAAK+vD,IACb5jD,EAAMnM,KAAKmM,MAEXnM,KAAK+vD,IAAM5jD,GACbxC,EAAAkyD,iBAAiB9vD,EAAKM,WAAWrM,KAAK+vD,QAExC,OAAOhkD,EAAKQ,UAAUL,EAAOlM,KAAK+vD,MAGpC2J,EAAAz3D,UAAA4xC,WAAA,WAME,IALA,IAAI9nC,EAAO/L,KAAKyL,OAAOM,KACnBmxD,EAAQnxD,EAAKM,WAAWrM,KAAK+vD,OAC7B7jD,EAAQlM,KAAK+vD,IACb5jD,EAAMnM,KAAKmM,IACXi5B,EAAS,KACA,CACX,GAAIplC,KAAK+vD,KAAO5jD,EAAK,CACnBi5B,GAAUr5B,EAAKQ,UAAUL,EAAOlM,KAAK+vD,KACrC/vD,KAAKmN,MACHI,EAAAhD,eAAe4yD,4BACfn9D,KAAK6K,MAAMqB,EAAQ,EAAGC,IAExB,MAEF,IAAIzL,EAAIqL,EAAKM,WAAWrM,KAAK+vD,KAC7B,GAAIrvD,GAAKw8D,EAAO,CACd93B,GAAUr5B,EAAKQ,UAAUL,EAAOlM,KAAK+vD,OACrC,MAEF,GAAK,IAADrvD,EAAJ,CAMA,GAAIiJ,EAAAyC,YAAY1L,GAAI,CAClB0kC,GAAUr5B,EAAKQ,UAAUL,EAAOlM,KAAK+vD,KACrC/vD,KAAKmN,MACHI,EAAAhD,eAAe4yD,4BACfn9D,KAAK6K,MAAMqB,EAAQ,EAAGlM,KAAK+vD,MAE7B,QAEA/vD,KAAK+vD,SAbL3qB,GAAUr5B,EAAKQ,UAAUL,EAAOlM,KAAK+vD,KACrC3qB,GAAUplC,KAAKo9D,qBACflxD,EAAQlM,KAAK+vD,IAajB,OAAO3qB,GAGTs0B,EAAAz3D,UAAAm7D,mBAAA,WACE,IAAIjxD,EAAMnM,KAAKmM,IACf,KAAMnM,KAAK+vD,KAAO5jD,EAKhB,OAJAnM,KAAKmN,MACHI,EAAAhD,eAAe8yD,uBACfr9D,KAAK6K,MAAMsB,IAEN,GAGT,IAAIJ,EAAO/L,KAAKyL,OAAOM,KACnBrL,EAAIqL,EAAKM,WAAWrM,KAAK+vD,OAC7B,OAAQrvD,GACN,QAAkB,MAAO,KACzB,QAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,SAAiB,MAAO,KACxB,QAA2B,MAAO,IAClC,QAA2B,MAAO,IAClC,SACE,OACEV,KAAK+vD,IAAM5jD,GACc,KAAzBJ,EAAKM,WAAWrM,KAAK+vD,QAEnB/vD,KAAK+vD,IACA/vD,KAAKs9D,6BAEPt9D,KAAKu9D,oBAEd,QAEIv9D,KAAK+vD,IAAM5jD,GACc,IAAzBJ,EAAKM,WAAWrM,KAAK+vD,QAEnB/vD,KAAK+vD,IAIX,QACA,UACA,UAAkC,MAAO,GACzC,QAAS,OAAOjpD,OAAO02D,aAAa98D,KAIxCg5D,EAAAz3D,UAAAw7D,kBAAA,WAKE,IAJA,IAAI1xD,EAAO/L,KAAKyL,OAAOM,KACnBG,EAAQlM,KAAK+vD,IACb5jD,EAAMnM,KAAKmM,IACXuxD,GAAU,IACD,CACX,GAAI19D,KAAK+vD,KAAO5jD,EAAK,CACnBnM,KAAKmN,MACHI,EAAAhD,eAAeozD,wCACf39D,KAAK6K,MAAMqB,EAAOC,IAEpB,MAEF,GAA6B,IAAzBJ,EAAKM,WAAWrM,KAAK+vD,KAAzB,CAKA,IAAIrvD,EAAIqL,EAAKM,WAAWrM,KAAK+vD,KAC7B,IAAK2N,GAAY,IAADh9D,EAAqB,MACrC,GAAIiJ,EAAAyC,YAAY1L,GAAI,CAClBV,KAAKmN,MACHI,EAAAhD,eAAeozD,wCACf39D,KAAK6K,MAAMqB,EAAOlM,KAAK+vD,MAEzB,QAEA/vD,KAAK+vD,IACP2N,GAAU,QAdN19D,KAAK+vD,IACP2N,GAAU,EAed,OAAO3xD,EAAKQ,UAAUL,EAAOlM,KAAK+vD,MAGpC2J,EAAAz3D,UAAA27D,gBAAA,WAKE,IAJA,IAAI7xD,EAAO/L,KAAKyL,OAAOM,KACnBG,EAAQlM,KAAK+vD,IACb5jD,EAAMnM,KAAKmM,IACX4G,EAAQ,EACL/S,KAAK+vD,IAAM5jD,GAAK,CACrB,IAAIzL,EAASqL,EAAKM,WAAWrM,KAAK+vD,KAClC,IAAKpmD,EAAAkyD,iBAAiBn7D,GAAI,MAI1B,SAHEV,KAAK+vD,IAGCrvD,GACN,SACEqS,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,SACEA,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,SACEA,GAAiB,EAARA,GAAa,EAAI,EAC1B,MAEF,QACEA,GAAS,GAWf,OANc,GAAVA,GACF/S,KAAKmN,MACHI,EAAAhD,eAAeszD,iCACf79D,KAAK6K,MAAMqB,EAAOlM,KAAK+vD,MAGpBhkD,EAAKQ,UAAUL,EAAOlM,KAAK+vD,MAGpC2J,EAAAz3D,UAAA84D,YAAA,WACE,IAAI5uD,EAAMnM,KAAKmM,IACXJ,EAAO/L,KAAKyL,OAAOM,KACvB,GAAI/L,KAAK+vD,IAAM,EAAI5jD,GAAgC,IAAzBJ,EAAKM,WAAWrM,KAAK+vD,KAC7C,OAAQhkD,EAAKM,WAAWrM,KAAK+vD,IAAM,IACjC,SACA,QACA,QACA,QACA,SACA,QAAiB,OAAO,EAI5B,IADA,IAAIA,EAAM/vD,KAAK+vD,IACRA,EAAM5jD,GAAK,CAChB,IAAIzL,EAAIqL,EAAKM,WAAW0jD,GACxB,GAAK,IAADrvD,GAAsB,KAADA,GAAoB,IAADA,EAAiB,OAAO,EACpE,IAAKA,EAAC,IAAkBA,EAAC,KAAoB,IAADA,EAAiB,MAE7DqvD,IAEF,OAAO,GAGT2J,EAAAz3D,UAAA67D,YAAA,WACE,IAAI/xD,EAAO/L,KAAKyL,OAAOM,KACvB,GAAI/L,KAAK+vD,IAAM,EAAI/vD,KAAKmM,KAAgC,IAAzBJ,EAAKM,WAAWrM,KAAK+vD,KAAqB,CACvE,OAAQhkD,EAAKM,WAAWrM,KAAK+vD,IAAM,IACjC,SACA,QAEE,OADA/vD,KAAK+vD,KAAO,EACL/vD,KAAK+9D,iBAEd,QACA,QAEE,OADA/9D,KAAK+vD,KAAO,EACL/vD,KAAKg+D,oBAEd,SACA,QAEE,OADAh+D,KAAK+vD,KAAO,EACL/vD,KAAKi+D,mBAGhB,GAAIt0D,EAAAu0D,aAAanyD,EAAKM,WAAWrM,KAAK+vD,IAAM,IAAK,CAC/C,IAAI7jD,EAAQlM,KAAK+vD,MACf/vD,KAAK+vD,IACP,IAAIzuD,EAAQtB,KAAKi+D,mBAKjB,OAJAj+D,KAAKmN,MACHI,EAAAhD,eAAe4zD,8CACfn+D,KAAK6K,MAAMqB,EAAOlM,KAAK+vD,MAElBzuD,GAGX,OAAOtB,KAAKo+D,sBAGd1E,EAAAz3D,UAAA87D,eAAA,WAOE,IANA,IAAIhyD,EAAO/L,KAAKyL,OAAOM,KACnBG,EAAQlM,KAAK+vD,IACbzuD,EAAQgU,QAAQ,GAChB+oD,EAAQ/oD,QAAQ,GAChBgpD,EAASpyD,EACTC,EAAMnM,KAAKmM,IACRnM,KAAK+vD,IAAM5jD,GAAK,CACrB,IAAI4jD,EAAM/vD,KAAK+vD,IACXrvD,EAAIqL,EAAKM,WAAW0jD,GACxB,GAAIrvD,GAAC,IAAmBA,GAAC,GAEvBY,EAAQi9D,QACNC,QAAQl9D,EAAO+8D,GACf/oD,QAAQ5U,EAAC,UAEL,GAAIA,GAAC,IAAkBA,GAAC,GAE9BY,EAAQi9D,QACNC,QAAQl9D,EAAO+8D,GACf/oD,QAAQ,GAAK5U,EAAC,UAEX,GAAIA,GAAC,IAAkBA,GAAC,IAE7BY,EAAQi9D,QACNC,QAAQl9D,EAAO+8D,GACf/oD,QAAQ,GAAK5U,EAAC,SAEX,IAAK,IAADA,EAWT,MAVI49D,GAAUvO,GACZ/vD,KAAKmN,MACHmxD,GAAUpyD,EACNqB,EAAAhD,eAAek0D,wCACflxD,EAAAhD,eAAem0D,0DACnB1+D,KAAK6K,MAAMklD,IAGfuO,EAASvO,EAAM,EAIjB/vD,KAAK+vD,IAAMA,EAAM,EAanB,OAXI/vD,KAAK+vD,KAAO7jD,EACdlM,KAAKmN,MACHI,EAAAhD,eAAeo0D,2BACf3+D,KAAK6K,MAAMqB,IAEJoyD,GAAUt+D,KAAK+vD,KACxB/vD,KAAKmN,MACHI,EAAAhD,eAAek0D,wCACfz+D,KAAK6K,MAAMyzD,EAAS,IAGjBh9D,GAGTo4D,EAAAz3D,UAAAm8D,mBAAA,WAOE,IANA,IAAIryD,EAAO/L,KAAKyL,OAAOM,KACnBG,EAAQlM,KAAK+vD,IACb5jD,EAAMnM,KAAKmM,IACX7K,EAAQgU,QAAQ,GAChBspD,EAAStpD,QAAQ,IACjBgpD,EAASpyD,EACNlM,KAAK+vD,IAAM5jD,GAAK,CACrB,IAAI4jD,EAAM/vD,KAAK+vD,IACXrvD,EAAIqL,EAAKM,WAAW0jD,GACxB,GAAIrvD,GAAC,IAAmBA,GAAC,GAEvBY,EAAQi9D,QACNM,QAAQv9D,EAAOs9D,GACftpD,QAAQ5U,EAAC,SAEN,IAAK,IAADA,EAWT,MAVI49D,GAAUvO,GACZ/vD,KAAKmN,MACHmxD,GAAUpyD,EACNqB,EAAAhD,eAAek0D,wCACflxD,EAAAhD,eAAem0D,0DACnB1+D,KAAK6K,MAAMklD,IAGfuO,EAASvO,EAAM,EAIjB/vD,KAAK+vD,IAAMA,EAAM,EAanB,OAXI/vD,KAAK+vD,KAAO7jD,EACdlM,KAAKmN,MACHI,EAAAhD,eAAeu0D,eACf9+D,KAAK6K,MAAMqB,IAEJoyD,GAAUt+D,KAAK+vD,KACxB/vD,KAAKmN,MACHI,EAAAhD,eAAek0D,wCACfz+D,KAAK6K,MAAMyzD,EAAS,IAGjBh9D,GAGTo4D,EAAAz3D,UAAAg8D,iBAAA,WAOE,IANA,IAAIlyD,EAAO/L,KAAKyL,OAAOM,KACnBG,EAAQlM,KAAK+vD,IACbzuD,EAAQgU,QAAQ,GAChBypD,EAAQzpD,QAAQ,GAChBgpD,EAASpyD,EACTC,EAAMnM,KAAKmM,IACRnM,KAAK+vD,IAAM5jD,GAAK,CACrB,IAAI4jD,EAAM/vD,KAAK+vD,IACXrvD,EAAIqL,EAAKM,WAAW0jD,GACxB,GAAIrvD,GAAC,IAAmBA,GAAC,GAEvBY,EAAQi9D,QACNC,QAAQl9D,EAAOy9D,GACfzpD,QAAQ5U,EAAC,SAEN,IAAK,IAADA,EAWT,MAVI49D,GAAUvO,GACZ/vD,KAAKmN,MACHmxD,GAAUpyD,EACNqB,EAAAhD,eAAek0D,wCACflxD,EAAAhD,eAAem0D,0DACnB1+D,KAAK6K,MAAMklD,IAGfuO,EAASvO,EAAM,IAIf/vD,KAAK+vD,IAaT,OAXI/vD,KAAK+vD,KAAO7jD,EACdlM,KAAKmN,MACHI,EAAAhD,eAAey0D,qBACfh/D,KAAK6K,MAAMqB,IAEJoyD,GAAUt+D,KAAK+vD,KACxB/vD,KAAKmN,MACHI,EAAAhD,eAAek0D,wCACfz+D,KAAK6K,MAAMyzD,EAAS,IAGjBh9D,GAGTo4D,EAAAz3D,UAAA+7D,kBAAA,WAOE,IANA,IAAIjyD,EAAO/L,KAAKyL,OAAOM,KACnBG,EAAQlM,KAAK+vD,IACbzuD,EAAQgU,QAAQ,GAChB2pD,EAAQ3pD,QAAQ,GAChBgpD,EAASpyD,EACTC,EAAMnM,KAAKmM,IACRnM,KAAK+vD,IAAM5jD,GAAK,CACrB,IAAI4jD,EAAM/vD,KAAK+vD,IACXrvD,EAAIqL,EAAKM,WAAW0jD,GACxB,GAAK,IAADrvD,EAEFY,EAAQk9D,QAAQl9D,EAAO29D,QAClB,GAAK,IAADv+D,EAETY,EAAQi9D,QACNC,QAAQl9D,EAAO29D,GACfA,OAEG,IAAK,IAADv+D,EAWT,MAVI49D,GAAUvO,GACZ/vD,KAAKmN,MACHmxD,GAAUpyD,EACNqB,EAAAhD,eAAek0D,wCACflxD,EAAAhD,eAAem0D,0DACnB1+D,KAAK6K,MAAMklD,IAGfuO,EAASvO,EAAM,EAIjB/vD,KAAK+vD,IAAMA,EAAM,EAanB,OAXI/vD,KAAK+vD,KAAO7jD,EACdlM,KAAKmN,MACHI,EAAAhD,eAAe20D,sBACfl/D,KAAK6K,MAAMqB,IAEJoyD,GAAUt+D,KAAK+vD,KACxB/vD,KAAKmN,MACHI,EAAAhD,eAAek0D,wCACfz+D,KAAK6K,MAAMyzD,EAAS,IAGjBh9D,GAGTo4D,EAAAz3D,UAAAk9D,UAAA,WAWE,OAAOn/D,KAAKo/D,oBAGd1F,EAAAz3D,UAAAm9D,iBAAA,WAKE,IAHA,IAAIlzD,EAAQlM,KAAK+vD,IACb5jD,EAAMnM,KAAKmM,IACXJ,EAAO/L,KAAKyL,OAAOM,KAChB/L,KAAK+vD,IAAM5jD,GAAOxC,EAAA4wD,eAAexuD,EAAKM,WAAWrM,KAAK+vD,SACzD/vD,KAAK+vD,IAET,GAAI/vD,KAAK+vD,IAAM5jD,GAAgC,IAAzBJ,EAAKM,WAAWrM,KAAK+vD,KAEzC,MADE/vD,KAAK+vD,IACA/vD,KAAK+vD,IAAM5jD,GAAOxC,EAAA4wD,eAAexuD,EAAKM,WAAWrM,KAAK+vD,SACzD/vD,KAAK+vD,IAGX,GAAI/vD,KAAK+vD,IAAM5jD,EAAK,CAClB,IAAIzL,EAAIqL,EAAKM,WAAWrM,KAAK+vD,KAC7B,GAAK,KAADrvD,GAAoB,IAADA,EAQrB,OANIV,KAAK+vD,IAAM5jD,GACkB,KAA9BzL,EAAIqL,EAAKM,WAAWrM,KAAK+vD,OAA4B,IAADrvD,GACrDiJ,EAAA4wD,eAAexuD,EAAKM,WAAWrM,KAAK+vD,IAAM,QAExC/vD,KAAK+vD,IAEF/vD,KAAK+vD,IAAM5jD,GAAOxC,EAAA4wD,eAAexuD,EAAKM,WAAWrM,KAAK+vD,SACzD/vD,KAAK+vD,IAIb,OAAOsP,WAAWtzD,EAAKQ,UAAUL,EAAOlM,KAAK+vD,OAG/C2J,EAAAz3D,UAAAq9D,aAAA,WACE,MAAM,IAAIpjD,MAAM,oBAGlBw9C,EAAAz3D,UAAAs7D,kBAAA,WAKE,IAJA,IAAIgC,EAAS,EACTj+D,EAAQ,EACR6K,EAAMnM,KAAKmM,IACXJ,EAAO/L,KAAKyL,OAAOM,KAChB/L,KAAK+vD,IAAM5jD,GAAK,CACrB,IAAIzL,EAAIqL,EAAKM,WAAWrM,KAAK+vD,OAC7B,GAAIrvD,GAAC,IAAmBA,GAAC,GACvBY,GAASA,GAAS,GAAKZ,EAAC,QACnB,GAAIA,GAAC,IAAkBA,GAAC,GAC7BY,GAASA,GAAS,GAAKZ,GAAI,OACtB,MAAIA,GAAC,IAAkBA,GAAC,KAO7B,OAJAV,KAAKmN,MACHI,EAAAhD,eAAeo0D,2BACf3+D,KAAK6K,MAAM7K,KAAK+vD,IAAM,EAAG/vD,KAAK+vD,MAEzB,GANPzuD,GAASA,GAAS,GAAKZ,GAAI,GAQ7B,GAAgB,KAAV6+D,EAAa,MAErB,OAAIA,GACFv/D,KAAKmN,MACHI,EAAAhD,eAAe8yD,uBACfr9D,KAAK6K,MAAM7K,KAAK+vD,MAEX,IAEFjpD,OAAO02D,aAAal8D,IAGrBo4D,EAAAz3D,UAAAq7D,0BAAR,WACE,IAAIpxD,EAAQlM,KAAK+vD,IACbzuD,EAAQtB,KAAK+9D,iBACbyB,EAAUvvB,QAAQ3uC,GAClBm+D,GAAU,EAEdv1D,QAAQgmC,SAAS5uC,IACbk+D,EAAU,UACZx/D,KAAKmN,MACHI,EAAAhD,eAAem1D,4EACf1/D,KAAK6K,MAAMqB,EAAOlM,KAAK+vD,MAEzB0P,GAAU,GAGZ,IAAItzD,EAAMnM,KAAKmM,IACXJ,EAAO/L,KAAKyL,OAAOM,KAiBvB,OAhBI/L,KAAK+vD,KAAO5jD,GACdnM,KAAKmN,MACHI,EAAAhD,eAAe8yD,uBACfr9D,KAAK6K,MAAMqB,EAAOC,IAEpBszD,GAAU,GACwB,KAAzB1zD,EAAKM,WAAWrM,KAAK+vD,OAC5B/vD,KAAK+vD,KAEP/vD,KAAKmN,MACHI,EAAAhD,eAAeo1D,qCACf3/D,KAAK6K,MAAMqB,EAAOlM,KAAK+vD,MAEzB0P,GAAU,GAGRA,EAAgB,GACbD,EAAU,MACb14D,OAAO02D,aAAagC,GACpB14D,OAAO02D,aACsB,OAA3BgC,EAAU,QAAW,IACM,OAA3BA,EAAU,MAAS,QAI3B9F,EAAAz3D,UAAA29D,OAAA,aAEFlG,EA5lCA,CAA+BnsD,EAAAX,mBAAlBlN,EAAAg6D,YA+lCb,IAAAoD,EAAA,WAOA,OAPA,gBAAap9D,EAAAo9D,QAUb,IAAID,EAA8B,oBC/kDlC,IAAAgD,EAGAA,EAAA,WACA,OAAA7/D,KADA,GAIA,IAEA6/D,KAAA,IAAA1rD,SAAA,iBACC,MAAA2rD,GAED,iBAAAC,SAAAF,EAAAE,QAOApgE,EAAAD,QAAAmgE,44BCdA,IAoFYG,EApFZzyD,EAAApN,EAAA,GAKAwxD,EAAAxxD,EAAA,GAuBAsN,EAAAtN,EAAA,GA6BAqN,EAAArN,EAAA,GAQAmN,EAAAnN,EAAA,GAKAwJ,EAAAxJ,EAAA,GAKAgiD,EAAAhiD,EAAA,GAIA8/D,EAAA9/D,EAAA,KAKA,SAAY6/D,GAEVA,IAAA,mBAEAA,IAAA,qBAJF,CAAYA,EAAAtgE,EAAAsgE,aAAAtgE,EAAAsgE,WAAU,KAQtB,IAAA3tD,EAAA,SAAAtB,GAWE,SAAAsB,EAEEmT,GAFF,IAAAxU,EAIED,EAAAvQ,KAAAR,KAAMwlB,EAAQ3Y,cAAY7M,YAT5BgR,EAAAkvD,sBAA2C,KAE3ClvD,EAAAmvD,yBAA+C,KAQ7CnvD,EAAKwU,QAAUA,IAunDnB,OAvoD8BlT,EAAAD,EAAAtB,GAoB5BsB,EAAApQ,UAAAm+D,YAAA,SAEE9b,EAEA+b,EAEA73C,EAEA83C,GAIA,QANA,IAAA93C,MAAA,WAEA,IAAA83C,MAAyBN,EAAWO,QAIhCjc,EAAK9tC,MAAQ/I,EAAAgJ,SAASw3C,UAAW,CACnC,IAAInK,EAAmCQ,EAAMR,iBACzCh6B,EAAwB,KAC5B,GAAIg6B,KACFh6B,EAAW9pB,KAAKogE,YACdtc,EACAuc,EACA73C,EACA83C,IAEa,OAAO,KAQxB,IANA,IAAIE,EAAiClc,EAAMT,WACvC4Q,EAAgB+L,EAAev0D,OAC/B8d,EAAiB,IAAIhjB,MAAY0tD,GACjCT,EAAiB,IAAIjtD,MAAc0tD,GACnCR,EAAqB,EACrBC,GAAU,EACL7zD,EAAI,EAAGA,EAAIo0D,IAAiBp0D,EAAG,CACtC,IAAIogE,EAAgBD,EAAengE,GACnC,OAAQogE,EAAc7c,eACpB,KAAKn2C,EAAAqgD,cAAc4H,QACjBzB,EAAqB5zD,EAAI,EACzB,MAEF,KAAKoN,EAAAqgD,cAAc4S,KACjBx2D,OAAO7J,GAAKo0D,GACZP,GAAU,EAId,IAAIyM,EAAoBF,EAAc5hD,KACtC,GAAIpR,EAAAikD,cAAciP,GAOhB,OANIL,GAAcN,EAAWO,QAC3BvgE,KAAKmN,MACHI,EAAAhD,eAAeq2D,cACfD,EAAkB91D,OAGf,KAET,IAAImf,EAAgBhqB,KAAKogE,YACvBO,EACAN,EACA73C,EACA83C,GAEF,IAAKt2C,EAAe,OAAO,KAC3BD,EAAe1pB,GAAK2pB,EACpBgqC,EAAe3zD,GAAKogE,EAAc7/D,KAAKmL,KAEzC,IAAI80D,EAAiCvc,EAAMnZ,WAC3C,GAAI19B,EAAAikD,cAAcmP,GAOhB,OANIP,GAAcN,EAAWO,QAC3BvgE,KAAKmN,MACHI,EAAAhD,eAAeq2D,cACfC,EAAeh2D,OAGZ,KAET,IAAIsgC,OAAU,EACd,GAAI01B,GAOF,KANA11B,EAAanrC,KAAKogE,YAChBS,EACAR,EACA73C,EACA83C,IAEe,OAAO,UAExBn1B,EAAa39B,EAAAmH,KAAKG,KAEpB,IAAId,EAAY,IAAIxG,EAAA2Y,UAAU4D,EAAgBohB,EAAYrhB,GAI1D,OAHA9V,EAAUggD,eAAiBA,EAC3BhgD,EAAUigD,mBAAqBA,EAC/BjgD,EAAUkgD,QAAUA,EACb5P,EAAKlB,WAAapvC,EAAU6K,KAAKi0C,aAAe9+C,EAAU6K,KAInE3U,OAAOo6C,EAAK9tC,MAAQ/I,EAAAgJ,SAASm3C,MAC7B,IAAIkT,EAAqBxc,EACrBhZ,EAAWw1B,EAASlgE,KACpBmgE,EAAoBD,EAAS90C,cAC7Bg1C,GAAuB11B,EAAStzB,KAGpC,GAAIgpD,GACEx4C,GAA2BA,EAAwBjU,IAAI+2B,EAASj4B,WAAWtH,MAAO,CACpF,IAAI8S,EAAO2J,EAAwBtnB,IAAIoqC,EAASj4B,WAAWtH,MAS3D,OAR0B,OAAtBg1D,GAA8BA,EAAkB90D,QAC9Cq0D,GAAcN,EAAWO,QAC3BvgE,KAAKmN,MACHI,EAAAhD,eAAe02D,sBACf3c,EAAKz5C,MAAOgU,EAAKrT,YAInB84C,EAAKlB,YACFvkC,EAAKK,GAAE,MACNohD,GAAcN,EAAWO,QAC3BvgE,KAAKmN,MACHI,EAAAhD,eAAe22D,gCACf5c,EAAKz5C,MAAOgU,EAAKrT,YAIhBqT,EAAKi0C,cAEPj0C,EAKX,IAAIlG,EAAU3Y,KAAKib,gBAAgBqwB,EAAU+0B,EAASC,GACtD,IAAK3nD,EAAS,OAAO,KAGrB,GAAIA,EAAQ8M,WACV9M,EAAUA,EAAQ8M,eAEb,CAEL,GAAI9M,EAAQnC,MAAQm7C,EAAA/gD,YAAYmW,KAiB9B,OAhB0B,OAAtBg6C,GAA8BA,EAAkB90D,QAC9Cq0D,GAAcN,EAAWO,QAC3BvgE,KAAKmN,MACHI,EAAAhD,eAAe02D,sBACf3c,EAAKz5C,MAAO8N,EAAQxG,cAItBmyC,EAAKlB,YACHkd,GAAcN,EAAWO,QAC3BvgE,KAAKmN,MACHI,EAAAhD,eAAe22D,gCACf5c,EAAKz5C,MAAO8N,EAAQ/X,MAInB4M,EAAAmH,KAAKvR,IAId,GAAIuV,EAAQnC,MAAQm7C,EAAA/gD,YAAYuJ,gBAAiB,CAC/C,IAAImO,EAAWtoB,KAAKmhE,8BACFxoD,EAChBooD,EACAV,EACA12D,EAAAy3D,QAAqB54C,GACrB87B,GAEF,OAAKh8B,EACEg8B,EAAKlB,WAAa96B,EAASzJ,KAAKi0C,aAAexqC,EAASzJ,KADzC,MAM1B,GAAIlG,EAAQnC,MAAQm7C,EAAA/gD,YAAY+V,eAAgB,CAG9C,GAAIhO,EAAQuG,GAAG5R,EAAAjL,YAAY4jB,UAAW,CACV,OAAtB86C,GAA8BA,EAAkB90D,QAC9Cq0D,GAAcN,EAAWO,QAC3BvgE,KAAKmN,MACHI,EAAAhD,eAAe02D,sBACf3c,EAAKz5C,MAAO8N,EAAQxG,cAI1B,IAAIkvD,EAAwB1oD,EAASkG,KACrC,GAAIylC,EAAKlB,WAAY,CACnB,GAAKie,EAAKniD,GAAE,KAQV,OAAOmiD,EAAKvO,aAPRwN,GAAcN,EAAWO,QAC3BvgE,KAAKmN,MACHI,EAAAhD,eAAe22D,gCACfJ,EAASlgE,KAAKiK,MAAOygC,EAASj4B,WAAWtH,MAOjD,OAAOs1D,EAIT,GAAIL,GAAuB11B,EAASj4B,WAAWtH,MAAQuB,EAAAtK,cAAc8B,OAAQ,CAC3E,IAAMi8D,GAAiD,GAA5BA,EAAkB90D,OAO3C,OANIq0D,GAAcN,EAAWO,QAC3BvgE,KAAKmN,MACHI,EAAAhD,eAAe+2D,oCACfR,EAASj2D,MAAO,KAAMk2D,EAAoBA,EAAkB90D,OAAS,GAAGT,SAAS,KAG9E,KAET,IAAI+1D,EAAevhE,KAAKogE,YACtBW,EAAkB,GAClBV,EACA73C,EACA83C,GAEF,IAAKiB,EAAc,OAAO,KAC1B,OAAQA,EAAa/qD,MACnB,OACA,OACA,OAAmB,OAAOhJ,EAAAmH,KAAKvR,IAC/B,OAAqB,IAAKpD,KAAKwlB,QAAQ/Q,QAAQc,SAAU,OAAO/H,EAAAmH,KAAKvR,IACrE,OAAmB,OAAOoK,EAAAmH,KAAKtR,IAC/B,OACA,OACA,OACA,QAAoB,OAAOmK,EAAAmH,KAAKlR,IAChC,OAAqB,IAAKzD,KAAKwlB,QAAQ/Q,QAAQc,SAAU,OAAO/H,EAAAmH,KAAKlR,IACrE,OAAmB,OAAO+J,EAAAmH,KAAKjR,IAC/B,QAAmB,OAAO8J,EAAAmH,KAAK9Q,IAC/B,QAAmB,OAAO2J,EAAAmH,KAAK7Q,IAC/B,QAAoB,OAAO0J,EAAAmH,KAAK5Q,KAChC,QAAoB,OAAOyJ,EAAAmH,KAAKG,KAChC,QAAS5K,QAAO,IAKpB,IAAI4iB,EAAsCnU,EAASmU,mBAEnD,GAAIA,GASF,IARgB9sB,KAAKwhE,qBACnB10C,EACAi0C,EACAV,EACA73C,EAA0B7e,EAAAy3D,QAAQ54C,GAClC87B,EACAgc,GAEkB,OAAO,UAClBS,GAAqBA,EAAkB90D,QAChDjM,KAAKmN,MACHI,EAAAhD,eAAe02D,sBACfH,EAASj2D,MAAOygC,EAASj4B,WAAWtH,MAUxC,KANI8S,EAAO7e,KAAKogE,YACGznD,EAASmoD,SAC1BnoD,EACA6P,EACA83C,IAES,OAAO,KAClB,GAAIhc,EAAKlB,WAAY,CACnB,GAAKvkC,EAAKK,GAAE,KAQV,OAAOL,EAAKi0C,aAPRwN,GAAcN,EAAWO,QAC3BvgE,KAAKmN,MACHI,EAAAhD,eAAe22D,gCACfJ,EAASlgE,KAAKiK,MAAOygC,EAASj4B,WAAWtH,MAOjD,OAAO8S,EAQT,OANIyhD,GAAcN,EAAWO,QAC3BvgE,KAAKmN,MACHI,EAAAhD,eAAek3D,mBACfX,EAASlgE,KAAKiK,MAAOygC,EAASj4B,WAAWtH,MAGtC,MAITsG,EAAApQ,UAAAgZ,gBAAA,SAEEqwB,EAEA+0B,EAEAC,QAAA,IAAAA,MAAaN,EAAWO,QAExB,IAAI5nD,EAAU0nD,EAAQh6C,OAAOilB,EAASj4B,WAAWtH,MACjD,IAAK4M,EAOH,OANI2nD,GAAcN,EAAWO,QAC3BvgE,KAAKmN,MACHI,EAAAhD,eAAek3D,mBACfn2B,EAASzgC,MAAOygC,EAASj4B,WAAWtH,MAGjC,KAIT,IAFA,IAAI21D,EAAOp2B,EACPtzB,EAAOszB,EAAStzB,KACbA,GAAM,CACX,KAAMW,EAAUA,EAAQc,aAAazB,EAAK3E,WAAWtH,OAOnD,OANIu0D,GAAcN,EAAWO,QAC3BvgE,KAAKmN,MACHI,EAAAhD,eAAeo3D,oCACf3pD,EAAKnN,MAAOmN,EAAK3E,WAAWtH,KAAM21D,EAAKruD,WAAWtH,MAG/C,KAET21D,EAAO1pD,EACPA,EAAOA,EAAKA,KAEd,OAAOW,GAITtG,EAAApQ,UAAAu/D,qBAAA,SAEE36C,EAEAk6C,EAEAV,EAEA73C,EAEAo5C,EAEAtB,QAJA,IAAA93C,MAA4C7e,EAAAy3D,gBAE5C,IAAAQ,MAAA,WAEA,IAAAtB,MAAyBN,EAAWO,QAIpC,IAFA,IAAIsB,EAAoB,EACpBC,EAAoB,EACfzhE,EAAI,EAAG8V,EAAI0Q,EAAe5a,OAAQ5L,EAAI8V,IAAK9V,EAC7CwmB,EAAexmB,GAAGkjD,eAAese,IACpCC,EAEJ,IAAIC,EAAgBhB,EAAoBA,EAAkB90D,OAAS,EACnE,GAAI81D,EAAgBF,GAAqBE,EAAgBD,EAYvD,OAXA9hE,KAAKmN,MACHI,EAAAhD,eAAe+2D,oCACfS,EACIt0D,EAAAgO,MAAMhP,KACSs0D,EAAmB,GAAGl2D,MACtBk2D,EAAmBgB,EAAgB,GAAGl3D,OAErDX,OAAO03D,GAAuB/2D,OACjCk3D,EAAgBF,EAAoBA,EAAoBC,GAAmBt2D,SAAS,IACrFu2D,EAAcv2D,SAAS,KAElB,KAET,IAAIwgB,EAAgB,IAAIjlB,MAAY+6D,GACpC,IAASzhE,EAAI,EAAGA,EAAIyhE,IAAqBzhE,EAAG,CAC1C,IAAIwe,EAAOxe,EAAI0hE,EACX/hE,KAAKogE,YACUW,EAAmB1gE,GAChCggE,EACA73C,EACA83C,GAEFtgE,KAAKogE,YACHl2D,OAAO2c,EAAexmB,GAAGkjD,aACzB8c,EACA73C,EACA83C,GAEN,IAAKzhD,EAAM,OAAO,KAElB2J,EAAwBtW,IAAI2U,EAAexmB,GAAGO,KAAKmL,KAAM8S,GACzDmN,EAAc3rB,GAAKwe,EAErB,OAAOmN,GAIT3Z,EAAApQ,UAAA+/D,kBAAA,SAEE3uD,EAEA8W,EAEAk2C,EAEAC,QAAA,IAAAA,MAAyBN,EAAWO,QAEpC,IACI5nD,EADA/X,EAAOyS,EAAWtH,KAEtB,OAAIoe,IACExR,EAAUwR,EAAK9D,OAAOzlB,KACxBZ,KAAKkgE,sBAAwB,KAC7BlgE,KAAKmgE,yBAA2B,KACzBxnD,GAGP0nD,IACE1nD,EAAU0nD,EAAQh6C,OAAOzlB,KAC3BZ,KAAKkgE,sBAAwB,KAC7BlgE,KAAKmgE,yBAA2B,KACzBxnD,IAGPA,EAAU3Y,KAAKwlB,QAAQ7L,aAAa/Y,KACtCZ,KAAKkgE,sBAAwB,KAC7BlgE,KAAKmgE,yBAA2B,KACzBxnD,IAEL2nD,GAAcN,EAAWO,QAC3BvgE,KAAKmN,MACHI,EAAAhD,eAAek3D,mBACfpuD,EAAWxI,MAAOjK,GAGf,OAITyR,EAAApQ,UAAAggE,yBAAA,SAAyB9iD,EAAgBmhD,GACvC,QADuC,IAAAA,MAAyBN,EAAWO,QACvEphD,EAAOD,GAAG5R,EAAAjL,YAAY4jB,UAAW,OAAO,EAC5C,IAAI66C,EAAW3hD,EAAO2hD,SACtB,IAAKA,EAAU,OAAO,EACtB,IAAIjiD,EAAO7e,KAAKogE,YACdU,EACA3hD,EAAOlL,OACP,KACAqsD,GAEF,QAAKzhD,IACLM,EAAOL,QAAQD,IACR,IAITxM,EAAApQ,UAAAigE,gCAAA,SAEEC,EAEAh4C,EAEAi4C,EAEA9B,QAAA,IAAAA,MAAyBN,EAAWO,QAEpC,IAAI8B,EAAmBF,EAAep4B,WAClC3c,EAASptB,KAAKsiE,kBAAkBD,EAAkBl4C,EAAMi4C,EAAgB9B,GAC5E,IAAKlzC,EAAQ,OAAO,KACpB,IAAIm1C,EAAeJ,EAAengE,SAAS+J,KAG3C,OAAQqhB,EAAO5W,MACb,KAAKm7C,EAAA/gD,YAAYiQ,OAAQ,IAAK7gB,KAAKiiE,yBAAiC70C,EAAQkzC,GAAa,OAAO,KAChG,KAAK3O,EAAA/gD,YAAYgX,MACjB,KAAK+pC,EAAA/gD,YAAY4N,MACf,IAAIK,EAA6BuO,EAAQvO,KAEzC,GAF+C3U,OAAO2U,GAAQrR,EAAAmH,KAAKG,QAC/D4Z,EAAiB7P,EAAK6P,gBACL,CACnB,IAAIld,EAAcxR,KAAKwlB,QAAQhU,YAC/B,GAAKqN,EAAKK,GAAE,OAAyB1N,EAAY+C,IAAIsK,EAAKrI,MAOxD,OAJAxW,KAAKmN,MACHI,EAAAhD,eAAeo3D,oCACfQ,EAAengE,SAAS6I,MAAO03D,EAAoCn1C,EAAQvO,KAAKrT,YAE3E,KANPkjB,EAAiBld,EAAYtQ,IAAI2d,EAAKrI,MAS1C4W,EAASsB,EACT,MAEF,KAAKijC,EAAA/gD,YAAYuN,mBAOf,KANIqN,EAAiBxrB,KAAK6d,gBACxB3T,OAA2BkjB,EAAQhP,iBACnC,KACAzU,EAAAy3D,UACAd,IAEmB,OAAO,KAE5B,KADI5xC,EAAiBlD,EAAexX,UAAUm3B,WAAWzc,gBAMvD,OAJA1uB,KAAKmN,MACHI,EAAAhD,eAAeo3D,oCACfQ,EAAengE,SAAS6I,MAAO03D,EAAc/2C,EAAexX,UAAUm3B,WAAW3/B,YAE5E,KAET4hB,EAASsB,EACT,MAEF,KAAKijC,EAAA/gD,YAAY0N,SACf,IAAIkN,EAEJ,KADIkD,GADAlD,EAAiBthB,OAAkBkjB,EAAQ5B,iBACXxX,UAAUm3B,WAAWzc,gBAMvD,OAJA1uB,KAAKmN,MACHI,EAAAhD,eAAeo3D,oCACfQ,EAAengE,SAAS6I,MAAO03D,EAAc/2C,EAAexX,UAAUm3B,WAAW3/B,YAE5E,KAET4hB,EAASsB,EACT,MAEF,KAAKijC,EAAA/gD,YAAY6N,MACf,IAAI0nC,EAAoBnmD,KAAKmgE,yBAC7B,GAAIha,EAAmB,CAGnB,IAAIqc,EAAqBp1C,EAAQF,eAAeykC,EAAAtkD,aAAasB,aAC7D,IAAK6zD,EAKH,OAJAxiE,KAAKmN,MACHI,EAAAhD,eAAek4D,qCACftc,EAAkBt7C,MAAeuiB,EAAQjb,cAEpC,KAET,IAAIuwD,EAAYF,EAAWxuD,UAAUm3B,WAEvC,KAAM/d,EAASs1C,EAAUh0C,gBAKvB,OAJA1uB,KAAKmN,MACHI,EAAAhD,eAAeo3D,oCACfQ,EAAengE,SAAS6I,MAAO03D,EAAcG,EAAUl3D,YAElD,KAGX,MAEF,KAAKmmD,EAAA/gD,YAAYgN,mBACf,IAAI6H,EAAa2H,EAAO3H,WACxB,GAAIA,EAAY,CACd,IAAKA,EAAWvG,GAAG5R,EAAAjL,YAAY4jB,UAAW,CACxC,IAAI08C,EAAe3iE,KAAKogE,YAAY36C,EAAWq7C,SAAUr7C,EAAWxR,OAAQ,KAAMqsD,GAC9EqC,GAAcl9C,EAAW3G,QAAQ6jD,GAEvC,IAAIj0C,KAAiBjJ,EAAW5G,KAAK6P,kBACjBtB,EAASsB,EAAezsB,WAC5C,OAMN,OAAQmrB,EAAO5W,MACb,KAAKm7C,EAAA/gD,YAAYuJ,gBACjB,KAAKw3C,EAAA/gD,YAAY6N,MACf,OAAG,CAED,IADIC,EAAU0O,EAAO1O,UACNA,EAAQnK,IAAIguD,GAGzB,OAFAviE,KAAKkgE,sBAAwBmC,EAC7BriE,KAAKmgE,yBAA2B,KACzBzhD,EAAQxd,IAAIqhE,GAGrB,GAAIn1C,EAAO5W,MAAQm7C,EAAA/gD,YAAYuJ,gBAAiB,CAC9C,IAAqBiT,EAAQlS,cAG3B,MAFAkS,EAA0CA,EAAQlS,kBAK/C,IAAIkS,EAAO5W,MAAQm7C,EAAA/gD,YAAY6N,MAOpC,MANA,IAAY2O,EAAQnB,KAGlB,MAFAmB,EAAwBA,EAAQnB,MAQtC,MAEF,QACE,IAAIvN,EACJ,IADIA,EAAU0O,EAAO1O,UACNA,EAAQnK,IAAIguD,GAGzB,OAFAviE,KAAKkgE,sBAAwBmC,EAC7BriE,KAAKmgE,yBAA2B,KACzBzhD,EAAQxd,IAAIqhE,GAUzB,OAJAviE,KAAKmN,MACHI,EAAAhD,eAAeo3D,oCACfQ,EAAengE,SAAS6I,MAAO03D,EAAcn1C,EAAOjb,cAE/C,MAITE,EAAApQ,UAAA2gE,+BAAA,SAEEC,EAEA14C,EAEAi4C,EAEA9B,QAAA,IAAAA,MAAyBN,EAAWO,QAEpC,IAAI8B,EAAmBQ,EAAc94B,WACjC3c,EAASptB,KAAKsiE,kBAAkBD,EAAkBl4C,EAAMi4C,EAAgB9B,GAC5E,IAAKlzC,EAAQ,OAAO,KACpB,OAAQA,EAAO5W,MACb,KAAKm7C,EAAA/gD,YAAYiQ,OAAQ,IAAK7gB,KAAKiiE,yBAAiC70C,EAAQkzC,GAAa,OAAO,KAChG,KAAK3O,EAAA/gD,YAAYgX,MACjB,KAAK+pC,EAAA/gD,YAAY4N,MAEf,GAAI4O,EAD6BA,EAAQvO,KACvB6P,eAGhB,OAFA1uB,KAAKkgE,sBAAwBmC,EAC7BriE,KAAKmgE,yBAA2B0C,EAAc1c,kBACvC/4B,EAET,MAEF,KAAKukC,EAAA/gD,YAAY6N,MAGb,IAAI+jD,EAAqBp1C,EAAQF,eAAeykC,EAAAtkD,aAAasB,aAC7D,IAAK6zD,EAOH,OANIlC,GAAcN,EAAWO,QAC3BvgE,KAAKmN,MACHI,EAAAhD,eAAek4D,qCACfI,EAAch4D,MAAeuiB,EAAQjb,cAGlC,KAET,IAAIuwD,EAAYF,EAAWxuD,UAAUm3B,WAEvC,OAAIk3B,EAAiB7rD,MAAQ/I,EAAAgJ,SAASosC,eAChCz1B,EAASs1C,EAAUh0C,iBACrB1uB,KAAKkgE,sBAAwBmC,EAC7BriE,KAAKmgE,yBAA2B0C,EAAc1c,kBACvC/4B,GAEF,MAETptB,KAAKkgE,sBAAwBmC,EAC7BriE,KAAKmgE,yBAA2B0C,EAAc1c,kBACvC/4B,GASX,OANIkzC,GAAcN,EAAWO,QAC3BvgE,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACfohD,EAAiBx3D,OAGd,MAITwH,EAAApQ,UAAA6gE,4BAAA,SAEEC,EAEAX,GAEA,IAAKA,EAAeljD,GAAE,KAEpB,OAAQkjD,EAAe5rD,MACrB,OACE,GAAIwsD,UAAUD,GAAW,OAAOv1D,EAAAmH,KAAKzR,GACrC,MAEF,OACE,GAAI+/D,UAAUF,GAAW,OAAOv1D,EAAAmH,KAAKpR,GACrC,MAEF,OACE,GAAI2/D,WAAWH,GAAW,OAAOv1D,EAAAmH,KAAKxR,IACtC,MAEF,OACE,GAAIggE,WAAWJ,GAAW,OAAOv1D,EAAAmH,KAAKnR,IACtC,MAEF,OACE,GAAI4/D,WAAWL,GAAW,OAAOv1D,EAAAmH,KAAKvR,IACtC,MAEF,OACE,GAAIigE,WAAWN,GAAW,OAAOv1D,EAAAmH,KAAKlR,IACtC,MAEF,QACE,GAAI6/D,YAAYP,GAAW,OAAOv1D,EAAAmH,KAAK/Q,KACvC,MAEF,OACE,IAAK5D,KAAKwlB,QAAQ/Q,QAAQc,SAAU,CAClC,GAAI6tD,WAAWL,GAAW,OAAOv1D,EAAAmH,KAAK29C,QACtC,MAEF,OAAO9kD,EAAAmH,KAAK09C,QAEd,OACE,IAAKryD,KAAKwlB,QAAQ/Q,QAAQc,SAAU,CAClC,GAAI8tD,WAAWN,GAAW,OAAOv1D,EAAAmH,KAAK69C,QACtC,MAEF,OAAOhlD,EAAAmH,KAAK49C,QAEd,OAAmB,OAAO/kD,EAAAmH,KAAKtR,IAC/B,OAAmB,OAAOmK,EAAAmH,KAAKjR,IAC/B,QAAmB,OAAO8J,EAAAmH,KAAK9Q,IAC/B,QAAmB,OAAO2J,EAAAmH,KAAK7Q,IAC/B,QAAoB,MACpB,QAASoG,QAAO,GAIpB,OAAIk5D,WAAWL,GAAkBv1D,EAAAmH,KAAKvR,IAClCigE,WAAWN,GAAkBv1D,EAAAmH,KAAKlR,IAC/B+J,EAAAmH,KAAKtR,KAIdgP,EAAApQ,UAAAqgE,kBAAA,SAEEv4B,EAEA5f,EAEAi4C,EAEA9B,GAEA,SAJA,IAAA8B,MAAuB50D,EAAAmH,KAAKG,WAE5B,IAAAwrD,MAAyBN,EAAWO,QAE7Bx2B,EAAWvzB,MAAQ/I,EAAAgJ,SAASqsC,eACjC/Y,EAAuCA,EAAYA,WAErD,OAAQA,EAAWvzB,MACjB,KAAK/I,EAAAgJ,SAASksC,UACZ,OAAO3iD,KAAKujE,2BACWx5B,EACrB5f,EAAMi4C,EAAgB9B,GAG1B,KAAK7yD,EAAAgJ,SAASg5C,YACZ,OAAOzvD,KAAKwjE,6BACaz5B,EACvB5f,EAAMi4C,EAAgB9B,GAG1B,KAAK7yD,EAAAgJ,SAAS+4C,aACZ,OAAOxvD,KAAKyjE,8BACc15B,EACxB5f,EAAMi4C,EAAgB9B,GAG1B,KAAK7yD,EAAAgJ,SAASm4C,OACZ,OAAO5uD,KAAK0jE,wBACQ35B,EAClB5f,EAAMi4C,EAAgB9B,GAG1B,KAAK7yD,EAAAgJ,SAAS64C,KACZ,OAAOtvD,KAAK2jE,sBACM55B,EAChB5f,EAAMi4C,EAAgB9B,GAG1B,KAAK7yD,EAAAgJ,SAASusC,MACZ,OAAOhjD,KAAK4jE,uBACO75B,EACjB5f,EAAMi4C,EAAgB9B,GAG1B,KAAK7yD,EAAAgJ,SAASisC,WACZ,OAAO1iD,KAAKgiE,kBACYj4B,EACtB5f,EAAMA,EAAK05C,eAAgBvD,GAG/B,KAAK7yD,EAAAgJ,SAASqM,QACZ,OAAO9iB,KAAK8jE,yBACS/5B,EACnB5f,EAAMi4C,EAAgB9B,GAG1B,KAAK7yD,EAAAgJ,SAASssC,eACZ,OAAO/iD,KAAKkiE,gCACgBn4B,EAC1B5f,EAAMi4C,EAAgB9B,GAG1B,KAAK7yD,EAAAgJ,SAASosC,cACZ,OAAO7iD,KAAK4iE,+BACe74B,EACzB5f,EAAMi4C,EAAgB9B,GAG1B,KAAK7yD,EAAAgJ,SAASmsC,KACZ,OAAO5iD,KAAK+jE,sBACMh6B,EAChB5f,EAAMi4C,EAAgB9B,GAW5B,OANIA,GAAcN,EAAWO,QAC3BvgE,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8oB,EAAWl/B,OAGR,MAITwH,EAAApQ,UAAAshE,2BAAA,SAEEx5B,EAEA5f,EAEAi4C,EAEA9B,GAEA,QAJA,IAAA8B,MAAuB50D,EAAAmH,KAAKG,WAE5B,IAAAwrD,MAAyBN,EAAWO,QAEhCx2B,EAAWkb,eAAiBx3C,EAAAkhD,cAAcqV,QAC5C,OAAOhkE,KAAKsiE,kBACVv4B,EAAWA,WACX5f,EACAi4C,EACA9B,GAGJ,IAAIzhD,EAAO7e,KAAKogE,YACdl2D,OAAO6/B,EAAWmb,QAClB/6B,EAAK05C,eACL15C,EAAK3B,wBACL83C,GAEF,IAAKzhD,EAAM,OAAO,KAClB,IAAIlG,EAA0BkG,EAAK6P,eACnC,IAAK/V,EAAS,CACZ,IAAI3E,EAAY6K,EAAKszC,mBACrB,IAAKn+C,EAAW,OAAO,KACvB2E,EAAU3E,EAAUmgD,iBAAiBn0D,KAAKwlB,SAI5C,OAFAxlB,KAAKkgE,sBAAwB,KAC7BlgE,KAAKmgE,yBAA2B,KACzBxnD,GAITtG,EAAApQ,UAAAuhE,6BAAA,SAEEz5B,EAEA5f,EAEAi4C,EAEA9B,QAFA,IAAA8B,MAAuB50D,EAAAmH,KAAKG,WAE5B,IAAAwrD,MAAyBN,EAAWO,QAEpC,IAAI7X,EAAU3e,EAAW2e,QAEzB,OAAQ3e,EAAWsb,UACjB,KAAKlD,EAAAC,MAAMhyC,MAET,GAAIs4C,EAAQlyC,MAAQ/I,EAAAgJ,SAASqM,SAA+B4lC,EAAS3lC,aAAetV,EAAAuV,YAAYisC,QAAS,CACvG,IAAIpwC,EAAO7e,KAAK8iE,4BACdmB,QAAQC,SAAqCxb,EAASpnD,OACtD8gE,GAGF,OADI5wD,EAAcxR,KAAKwlB,QAAQhU,aACZ+C,IAAIsK,EAAKrI,MAAQhF,EAAYtQ,IAAI2d,EAAKrI,MAAS,KAEpE,OAAOxW,KAAKsiE,kBACV5Z,EACAv+B,EACAi4C,EACA9B,GAGJ,KAAKne,EAAAC,MAAMlyC,KACX,KAAKiyC,EAAAC,MAAM2V,UACX,KAAK5V,EAAAC,MAAM4V,YACT,OAAOh4D,KAAKsiE,kBACVv4B,EAAW2e,QACXv+B,EACAi4C,EACA9B,GAGJ,KAAKne,EAAAC,MAAMmW,YACT,IAAI/mD,EACJ,OADIA,EAAcxR,KAAKwlB,QAAQhU,aACZ+C,IAAG,IAAkB/C,EAAYtQ,IAAG,IAAmB,KAE5E,KAAKihD,EAAAC,MAAMoW,MAOT,IANsBx4D,KAAKsiE,kBACzBv4B,EAAW2e,QACXv+B,EACAi4C,EACA9B,GAEoB,OAAO,KAE7B,MAEF,QAASp2D,QAAO,GAQlB,OANIo2D,GAAcN,EAAWO,QAC3BvgE,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8oB,EAAWl/B,OAGR,MAITwH,EAAApQ,UAAAwhE,8BAAA,SAEE15B,EAEA5f,EAEAi4C,EAEA9B,GAGA,YALA,IAAA8B,MAAuB50D,EAAAmH,KAAKG,WAE5B,IAAAwrD,MAAyBN,EAAWO,QAG5Bx2B,EAAWsb,UACjB,KAAKlD,EAAAC,MAAM2V,UACX,KAAK5V,EAAAC,MAAM4V,YACT,OAAOh4D,KAAKsiE,kBACVv4B,EAAW2e,QACXv+B,EACAi4C,EACA9B,GAGJ,QAASp2D,QAAO,GAQlB,OANIo2D,GAAcN,EAAWO,QAC3BvgE,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8oB,EAAWl/B,OAGR,MAITwH,EAAApQ,UAAAyhE,wBAAA,SAEE35B,EAEA5f,EAEAi4C,EAEA9B,GASA,YAXA,IAAA8B,MAAuB50D,EAAAmH,KAAKG,WAE5B,IAAAwrD,MAAyBN,EAAWO,QAGhCD,GAAcN,EAAWO,QAC3BvgE,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8oB,EAAWl/B,OAGR,MAITwH,EAAApQ,UAAA0hE,sBAAA,SAEE55B,EAEA5f,EAEAi4C,EAEA9B,GAEA,QAJA,IAAA8B,MAAuB50D,EAAAmH,KAAKG,WAE5B,IAAAwrD,MAAyBN,EAAWO,QAEhCp2C,EAAKjL,GAAE,MAA4B,CACrC,IAAIilD,EAAYh6C,EAAKi6C,YAAY92D,EAAAtK,cAAckC,OAC/C,GAAIi/D,EAGF,OAFAnkE,KAAKkgE,sBAAwB,KAC7BlgE,KAAKmgE,yBAA2B,KACzBgE,EAGX,IAAIlwD,EAASkW,EAAK05C,eAAe5vD,OACjC,OAAIA,GACFjU,KAAKkgE,sBAAwB,KAC7BlgE,KAAKmgE,yBAA2B,KACzBlsD,IAELqsD,GAAcN,EAAWO,QAC3BvgE,KAAKmN,MACHI,EAAAhD,eAAe85D,+CACft6B,EAAWl/B,OAGR,OAITwH,EAAApQ,UAAA2hE,uBAAA,SAEE75B,EAEA5f,EAEAi4C,EAEA9B,GAEA,QAJA,IAAA8B,MAAuB50D,EAAAmH,KAAKG,WAE5B,IAAAwrD,MAAyBN,EAAWO,QAEhCp2C,EAAKjL,GAAE,MAA4B,CACrC,IAAIolD,EAAan6C,EAAKi6C,YAAY92D,EAAAtK,cAAcmC,QAChD,GAAIm/D,EAGF,OAFAtkE,KAAKkgE,sBAAwB,KAC7BlgE,KAAKmgE,yBAA2B,KACzBmE,EAGX,IAAIrwD,EAAyBkW,EAAK05C,eAAe5vD,OACjD,OAAIA,GAAUA,EAAOuC,MAAQm7C,EAAA/gD,YAAY6N,QAAUxK,EAAiBA,EAAQgY,OAC1EjsB,KAAKkgE,sBAAwB,KAC7BlgE,KAAKmgE,yBAA2B,KACzBlsD,IAELqsD,GAAcN,EAAWO,QAC3BvgE,KAAKmN,MACHI,EAAAhD,eAAeg6D,iDACfx6B,EAAWl/B,OAGR,OAITwH,EAAApQ,UAAA6hE,yBAAA,SAEE/5B,EAEA5f,EAEAi4C,EAEA9B,GAEA,YAJA,IAAA8B,MAAuB50D,EAAAmH,KAAKG,WAE5B,IAAAwrD,MAAyBN,EAAWO,QAE5Bx2B,EAAWhnB,aACjB,KAAKtV,EAAAuV,YAAYisC,QACfjvD,KAAKkgE,sBAAwBn2B,EAC7B/pC,KAAKmgE,yBAA2B,KAChC,IAAIqE,EAAcxkE,KAAK8iE,4BACM/4B,EAAYzoC,MACvC8gE,GAGF,OADI5wD,EAAcxR,KAAKwlB,QAAQhU,aACZ+C,IAAIiwD,EAAYhuD,MAAQhF,EAAYtQ,IAAIsjE,EAAYhuD,MAAS,KAElF,KAAK/I,EAAAuV,YAAY+rC,MACf/uD,KAAKkgE,sBAAwBn2B,EAC7B/pC,KAAKmgE,yBAA2B,KAChC,IACI3uD,EADAgzD,EAAcpC,GAAkB50D,EAAAmH,KAAK9Q,IAAM2J,EAAAmH,KAAK9Q,IAAM2J,EAAAmH,KAAK7Q,IAE/D,OADI0N,EAAcxR,KAAKwlB,QAAQhU,aACZ+C,IAAIiwD,EAAYhuD,MAAQhF,EAAYtQ,IAAIsjE,EAAYhuD,MAAS,KAElF,KAAK/I,EAAAuV,YAAYC,OAGf,OAFAjjB,KAAKkgE,sBAAwBn2B,EAC7B/pC,KAAKmgE,yBAA2B,KACzBngE,KAAKwlB,QAAQzL,eAWxB,OANIumD,GAAcN,EAAWO,QAC3BvgE,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8oB,EAAWl/B,OAGR,MAITwH,EAAApQ,UAAA8hE,sBAAA,SAEEh6B,EAEA5f,EAEAi4C,EAEA9B,QAFA,IAAA8B,MAAuB50D,EAAAmH,KAAKG,WAE5B,IAAAwrD,MAAyBN,EAAWO,QAEpC,IAAI8B,EAAmBt4B,EAAWA,WAC9B3c,EAASptB,KAAKsiE,kBAChBD,EACAl4C,EACAi4C,EACA9B,GAEF,IAAKlzC,EAAQ,OAAO,KACpB,GAAIA,EAAO5W,MAAQm7C,EAAA/gD,YAAYgN,mBAAoB,CAEjD,GACsBwP,EAAQjb,cAAgB8tD,EAAAwE,eAAep3C,WAC3D0c,EAAWnnB,UAAU3W,OAAS,EAE9B,OAAOjM,KAAKsiE,kBAAkBv4B,EAAWnnB,UAAU,GAAIuH,EAAMi4C,EAAgB9B,GAG/E,IAAIh4C,EAAWtoB,KAAK0kE,iCACCt3C,EACnB2c,EAAW/d,cACX7B,EAAK05C,eACLl6D,EAAAy3D,QAAQj3C,EAAK3B,yBACbuhB,EACAu2B,GAEF,IAAKh4C,EAAU,OAAO,KACtB,IAAI6iB,EAAa7iB,EAAStU,UAAUm3B,WAChC0nB,EAAY1nB,EAAWzc,eAC3B,GAAImkC,EAGF,OAAOA,EAEP,IAAI7+C,EAAYm3B,EAAWgnB,mBAC3B,OAAIn+C,EACmBA,EAAUmgD,iBAAiBn0D,KAAKwlB,UAMrD86C,GAAcN,EAAWO,QAC3BvgE,KAAKmN,MACHI,EAAAhD,eAAeo6D,uGACftC,EAAiBx3D,MAAOuiB,EAAOjb,cAG5B,MAQT,OANImuD,GAAcN,EAAWO,QAC3BvgE,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8oB,EAAWl/B,OAGR,MAITwH,EAAApQ,UAAA4b,gBAAA,SAEE5b,EAEA+pB,EAEAxD,EAEA83C,QAFA,IAAA93C,MAA4C7e,EAAAy3D,gBAE5C,IAAAd,MAAyBN,EAAWO,QAEpC,IAAIqE,EAAe3iE,EAAUgS,OAAOuC,MAAQm7C,EAAA/gD,YAAYuN,mBACpDlc,EAAUgS,OAAOA,OACjBhS,EAAUgS,OACVvB,EAA8B,KAC9B0V,EAAc4D,EAAgBxe,EAAAsmD,cAAc9nC,GAAiB,GAGjE,GAAI/pB,EAAUid,GAAG5R,EAAAjL,YAAYwiB,UAAW,CAMtC,GALA3a,OAAO06D,EAAapuD,MAAQm7C,EAAA/gD,YAAY6N,OACxC/L,EAAuBkyD,EAGnBC,EAAmB5iE,EAAUkmB,oBAAoBC,GAC/B,OAAOy8C,EAG7B,IAAIC,EAAqBpyD,EAAcsZ,cACvC,GAAI84C,EAAoB,CACtB,IAAIC,EAAsB76D,OAAOwI,EAAczQ,UAAU6qB,oBACrDk4C,EAAwBD,EAAoB94D,OAChD/B,OAAO86D,GAAyBD,EAAoB94D,QACpD,IAAK,IAAI5L,EAAI,EAAGA,EAAI2kE,IAAyB3kE,EAAG,CAC9C,IAAI4kE,EAAyBF,EAAoB1kE,GAAGO,KAAKmL,KACpDyc,EAAwBjU,IAAI0wD,IAC/Bz8C,EAAwBtW,IACtB+yD,EACAH,EAAmBzkE,UAKtB,CAEL,IAAIwkE,EACJ,GAFA36D,OAAO06D,EAAapuD,MAAQm7C,EAAA/gD,YAAY6N,OACpComD,EAAmB5iE,EAAUkmB,oBAAoBC,GAC/B,OAAOy8C,EAI/B,IAEIK,EAFAC,EAAgBljE,EAAUkjE,cAC1Br4C,EAAqB7qB,EAAU6qB,mBAEnC,GAAId,IAAkBk5C,EAA2Bl5C,EAAc/f,QAAS,CACtE/B,OAAO4iB,GAAsBo4C,GAA4Bp4C,EAAmB7gB,QAC5E,IAAS5L,EAAI,EAAGA,EAAI6kE,IAA4B7kE,EAC9CmoB,EAAwBtW,IACA4a,EAAoBzsB,GAAGO,KAAKmL,KAClDigB,EAAc3rB,SAIlB6J,QAAQ4iB,GAAmD,GAA7BA,EAAmB7gB,QAInD,IAAI6d,EAAwB,KACxBg6B,EAAmBqhB,EAAcrhB,iBACrC,GAAIA,EAAkB,CAOpB,KANAh6B,EAAW9pB,KAAKogE,YACdtc,EACA7hD,EAAUgS,OACVuU,EACA83C,IAEa,OAAO,KACtB93C,EAAwBtW,IAAI5E,EAAAtK,cAAckC,MAAO4kB,QACxCpX,IACToX,EAAWpX,EAAcmM,KACzB2J,EAAwBtW,IAAI5E,EAAAtK,cAAckC,MAAO4kB,IAInD,IA8BIqhB,EA9BAi6B,EAAsBD,EAActhB,WACpCwhB,EAAyBD,EAAoBn5D,OAC7C8d,EAAiB,IAAIhjB,MAAYs+D,GACjCrR,EAAiB,IAAIjtD,MAAcs+D,GACnCpR,EAAqB,EACzB,IAAS5zD,EAAI,EAAGA,EAAIglE,IAA0BhlE,EAAG,CAC/C,IAAIilE,EAAuBF,EAAoB/kE,GAC3CilE,EAAqB1hB,eAAiBn2C,EAAAqgD,cAAc4H,UACtDzB,EAAqB5zD,EAAI,GAE3B,IAAIygE,EAAWwE,EAAqBzmD,KACpC,GAAIpR,EAAAikD,cAAcoP,GAKhB,OAJA9gE,KAAKmN,MACHI,EAAAhD,eAAeq2D,cACfE,EAASj2D,OAEJ,KAET,IAAImf,EAAgBhqB,KAAKogE,YACvBU,EACA7+D,EAAUgS,OACVuU,EACA83C,GAEF,IAAKt2C,EAAe,OAAO,KAC3BD,EAAe1pB,GAAK2pB,EACpBgqC,EAAe3zD,GAAKilE,EAAqB1kE,KAAKmL,KAKhD,GAAI9J,EAAUid,GAAG5R,EAAAjL,YAAYqf,KAC3BypB,EAAa39B,EAAAmH,KAAKG,UACb,GAAI7S,EAAUid,GAAG5R,EAAAjL,YAAYmgB,aAClC2oB,EAAajhC,OAAOwI,GAAemM,SAC9B,CACDiiD,EAAWqE,EAAch6B,WAC7B,GAAI19B,EAAAikD,cAAcoP,GAKhB,OAJA9gE,KAAKmN,MACHI,EAAAhD,eAAeq2D,cACfE,EAASj2D,OAEJ,KAET,IAAIgU,EAAO7e,KAAKogE,YACdU,EACA7+D,EAAUgS,OACVuU,EACA83C,GAEF,IAAKzhD,EAAM,OAAO,KAClBssB,EAAatsB,EAGf,IAAI7K,EAAY,IAAIxG,EAAA2Y,UAAU4D,EAAgBohB,EAAYrhB,GAC1D9V,EAAUggD,eAAiBA,EAC3BhgD,EAAUigD,mBAAqBA,EAE/B,IAAI1rC,EAAyBtmB,EAAUrB,KACnCwnB,EAAYnc,SAAQsc,GAA0B,IAAMH,EAAc,KACtE,IAAIE,EAAW,IAAIqpC,EAAAx9C,SACjBoU,EACAtmB,EACA+R,EACAwU,GAGF,OADAvmB,EAAUomB,oBAAoBD,EAAaE,GACpCA,GAITjW,EAAApQ,UAAAyiE,iCAAA,SAEEziE,EAEA8+D,EAEAV,EAEA73C,EAEA+8C,EAEAjF,QAAA,IAAAA,MAAyBN,EAAWO,QAEpC,IAAIqE,EAAe3iE,EAAUgS,OAAOuC,MAAQm7C,EAAA/gD,YAAYuN,mBACpDlc,EAAUgS,OAAOA,OACjBhS,EAAUgS,OACVuxD,EAAuC,KAG3C,GAAIvjE,EAAUid,GAAG5R,EAAAjL,YAAY6S,SAAU,CAGrC,GAAIjT,EAAUid,GAAG5R,EAAAjL,YAAYwiB,UAAW,CACtC3a,OAAO06D,EAAapuD,MAAQm7C,EAAA/gD,YAAY6N,OACxC,IAAIqmD,EAA6BF,EAAc54C,cAC/C,GAAI84C,EAAoB,CACtB,IAAIh4C,EAAqB5iB,OAAe06D,EAAc3iE,UAAU6qB,oBAC5Dk4C,EAAwBF,EAAmB74D,OAC/C/B,OAAO86D,GAAyBl4C,EAAmB7gB,QACnD,IAAK,IAAI5L,EAAI,EAAGA,EAAI2kE,IAAyB3kE,EAC3CmoB,EAAwBtW,IACtB4a,EAAmBzsB,GAAGO,KAAKmL,KAC3B+4D,EAAmBzkE,KAc3B,KARAmlE,EAAwBxlE,KAAKwhE,qBAC3Bt3D,OAAOjI,EAAU6qB,oBACjBi0C,EACAV,EACA73C,EACA+8C,EACAjF,IAE0B,OAAO,UAInC,GAA0B,OAAtBS,GAA8BA,EAAkB90D,OAOlD,OANIq0D,GAAcN,EAAWO,QAC3BvgE,KAAKmN,MACHI,EAAAhD,eAAe02D,sBACfsE,EAAW16D,MAAO5I,EAAUkQ,cAGzB,KAKX,OAAOnS,KAAK6d,gBACV5b,EACAujE,EACAh9C,EACA83C,IAKJjuD,EAAApQ,UAAA0b,aAAA,SAEE1b,EAEA+pB,EAEAxD,EAEA83C,wBAFA,IAAA93C,MAA4C7e,EAAAy3D,gBAE5C,IAAAd,MAAyBN,EAAWO,QAEpC,IAAIn4C,EAAc4D,EAAgBxe,EAAAsmD,cAAc9nC,GAAiB,GAG7D1D,EAAWrmB,EAAUkmB,oBAAoBC,GAC7C,GAAIE,EAAU,OAAOA,EAIrB,GAAI0D,EAAe,CACjB,IACIy5C,GADA34C,EAAqB5iB,OAAOjI,EAAU6qB,qBACC7gB,OACvC8gB,EAAmBf,EAAc/f,OACrC/B,OAAO6iB,GAAoB04C,GAC3B,IAAK,IAAIplE,EAAI,EAAGA,EAAI0sB,IAAoB1sB,EACtCmoB,EAAwBtW,IAAI4a,EAAmBzsB,GAAGO,KAAKmL,KAAMigB,EAAc3rB,QAExE,CACL,IAAIysB,EAAqB7qB,EAAU6qB,mBACnC5iB,SAAS4iB,GAAsBA,EAAmB7gB,SAIpD,IAAIiP,EAAgBjZ,EAAUiZ,cAC1BwqD,EAA0B,KAC9B,GAAIxqD,EAAe,CACjB,IAAIH,EAAc7Q,OAAOjI,EAAU8Y,aASnC,KARA2qD,EAAY1lE,KAAKmhE,8BACfjmD,EACAH,EAAYiR,cACZ/pB,EAAUgS,OACVtK,EAAAy3D,QAAQ54C,GACRzN,EACAulD,IAEc,OAAO,KAIzB,IAAIqF,EAAwB1jE,EAAUrB,KAClCwnB,EAAYnc,SAAQ05D,GAAyB,IAAMv9C,EAAc,MACrEE,EAAW,IAAIqpC,EAAA5lC,MAAM45C,EAAuB1jE,EAAW+pB,EAAe05C,IAC7Dl9C,wBAA0BA,EACnCvmB,EAAUomB,oBAAoBD,EAAaE,GAG3C,IAAI+C,EAAoB,EACxB,GAAIq6C,EAAW,CAEb,GADIE,EAAcF,EAAUhnD,QACX,EACXX,EAAkBuK,EAAS5J,WACT4J,EAAS5J,QAAUX,EAAkB,IAAI7W,SAC/D,IAAyC,IAAA2+D,EAAA/tD,EAAA8tD,GAAWE,EAAAD,EAAA7tD,QAAA8tD,EAAA7tD,KAAA6tD,EAAAD,EAAA7tD,OAAE,CAA7C,IAAAiG,EAAA9F,EAAA2tD,EAAAxkE,MAAA,GAACykE,EAAA9nD,EAAA,GAAgB+nD,EAAA/nD,EAAA,GACxBF,EAAgB7L,IAAI6zD,EAAgBC,sGAGxC36C,EAAeq6C,EAAUv5C,oBAI3B,IAAI85C,EAA2BhkE,EAAU8b,gBACzC,GAAIkoD,MACF,IAAmB,IAAAtnD,EAAA7G,EAAAmuD,EAAyB7oD,UAAQwB,EAAAD,EAAA3G,QAAA4G,EAAA3G,KAAA2G,EAAAD,EAAA3G,OAAE,CAAjD,IAAIkG,EAAMU,EAAAtd,MACb,OAAQ4c,EAAO1H,MAGb,KAAKm7C,EAAA/gD,YAAYsa,gBACf,IAAInN,EACJ,GADIA,EAAkBuK,EAAS5J,SAE1B,GAAIX,EAAgBxJ,IAAI2J,EAAOtd,MAAO,CACzCZ,KAAKmN,MACHI,EAAAhD,eAAeqV,uBACE1B,EAAQ5C,eAAezQ,MACxCqT,EAAOtd,MAET,YAPoB0nB,EAAS5J,QAAUX,EAAkB,IAAI7W,IAS/D,IAAIg/D,EAAiChoD,EAAQ4iD,SACzCqF,EAAyB,KAE7B,GAAKD,EAoBHC,EAAYnmE,KAAKogE,YACf8F,EACAjkE,EAAUgS,OACVqU,EAASE,wBACT83C,OAxBgB,CAEhB,IAAIsF,EADN,GAAIF,EAEF,IADIE,EAAcF,EAAUhnD,UACTknD,EAAYrxD,IAAqB2J,EAAQtd,MAAO,CACjE,IAAIwlE,EAAYR,EAAY1kE,IAAqBgd,EAAQtd,MACpDwlE,EAAUlnD,GAAG5R,EAAAjL,YAAYm0D,WAC5BtsD,OAAOk8D,EAAU5vD,MAAQm7C,EAAA/gD,YAAY4N,OACrC2nD,EAAoBC,EAAWvnD,MAIhCsnD,GACC7F,GAAcN,EAAWO,QAC3BvgE,KAAKmN,MACHI,EAAAhD,eAAeq2D,cACE1iD,EAAQ5C,eAAezQ,MAAMw7D,OAYtD,IAAKF,EAAW,MAChB,IAAIG,EAAgB,IAAI3U,EAAAvmC,MAAsBlN,EAAQoK,EAAU69C,GAChEj8D,OAAOP,EAAAJ,WAAW48D,EAAUlU,WAC5B,IAAIzlB,EAAO25B,EAAUlU,SAAW,EAC5B5mC,EAAemhB,IAAMnhB,EAAuC,GAAvBA,EAAemhB,IACxD85B,EAAcj7C,aAAeA,EAC7BA,GAAgB86C,EAAUlU,SAC1B3pC,EAASvT,IAAImJ,EAAOtd,KAAM0lE,GAC1B,MAEF,KAAK3U,EAAA/gD,YAAYgN,mBACf,IAAI2oD,EAAqCroD,EAAQ+J,QAAQK,GACzDA,EAASvT,IAAIwxD,EAAe3lE,KAAM2lE,GAClC,MAEF,KAAK5U,EAAA/gD,YAAYuN,mBACf,IAAIqoD,EAAmB,IAAI7U,EAAApmC,SAA4BrN,EAAQoK,GAC3DlK,EAAsCF,EAAQE,gBAClD,GAAIA,EAAiB,CACnB,IAAIoN,EAAiBxrB,KAAK6d,gBACxBO,EAAgB6J,QAAQK,GACxB,KACA3e,EAAAy3D,QAAQ94C,EAASE,yBACjB83C,GAEE90C,IACFg7C,EAAiBh7C,eAAiBA,EAClCg7C,EAAiB1nD,QAAQ0M,EAAexX,UAAUm3B,aAGtD,IAAI9sB,EAAsCH,EAAQG,gBAClD,GAAIA,EAAiB,CACnB,IAAIoN,EAAiBzrB,KAAK6d,gBACxBQ,EAAgB4J,QAAQK,GACxB,KACA3e,EAAAy3D,QAAQ94C,EAASE,yBACjB83C,GAEE70C,IACF+6C,EAAiB/6C,eAAiBA,EAC7B+6C,EAAiBtnD,GAAG5R,EAAAjL,YAAY4jB,YACnC/b,OAAyD,GAAlDuhB,EAAezX,UAAU+V,eAAe9d,QAC/Cu6D,EAAiB1nD,QAAQ2M,EAAezX,UAAU+V,eAAe,MAIvEzB,EAASvT,IAAIyxD,EAAiB5lE,KAAM4lE,GACpC,MAEF,QAASt8D,QAAO,sGAMtBoe,EAAS6D,oBAAsBd,EAI7B,IAAIo7C,EAAgBn+C,EAAS7O,aAAanM,EAAAtK,cAAcoC,aACxD,GAAIqhE,GAAiBA,EAAcxyD,SAAWqU,EAAU,CACtDpe,OAAOu8D,EAAcjwD,MAAQm7C,EAAA/gD,YAAYgN,oBACzC,IAAI8oD,EAAe1mE,KAAK6d,gBACH4oD,EACnB,KACAn+C,EAASE,wBACT83C,GAEEoG,IAAcp+C,EAAS8D,oBAAgCs6C,OAK/D,IAAsC,IAAAxuD,EAAAJ,EAAA7V,EAAUkhB,oBAAkBjK,GAAAhB,EAAAF,QAAAkB,GAAAjB,KAAAiB,GAAAhB,EAAAF,OAAE,CAA3D,IAAAqB,GAAAlB,EAAAe,GAAA5X,MAAA,GAACkV,GAAA6C,GAAA,GAAMstD,GAAAttD,GAAA,GACdnP,OAAOsM,IAAQm7C,EAAAtkD,aAAasD,SAC5B,IAAIi2D,QAAgB,EACpB,GAAID,GAAkBznD,GAAG5R,EAAAjL,YAAYwiB,UAAW,CAC1C0hD,EAAiBI,GAAkB1+C,QAAQK,GAC/Cs+C,GAAmB5mE,KAAK6d,gBACtB0oD,EACA,KACA58D,EAAAy3D,UACAd,QAGFsG,GAAmB5mE,KAAK6d,gBACtB8oD,GACA,KACAh9D,EAAAy3D,UACAd,GAGJ,GAAKsG,GAAL,CACA,IAAI1jD,GAAYoF,EAASpF,UACpBA,KAAWoF,EAASpF,UAAYA,GAAY,IAAIhc,KACrDgc,GAAUhR,IAAIsE,GAAMowD,yGAEtB,OAAOt+C,GAITjW,EAAApQ,UAAAk/D,8BAAA,SAEEl/D,EAEA8+D,EAEAV,EAEA73C,EAEA+8C,EAEAjF,QAAA,IAAAA,MAAyBN,EAAWO,QAEpC,IAAIiF,EAAuC,KAG3C,GAAIvjE,EAAUid,GAAG5R,EAAAjL,YAAY6S,UAS3B,KARAswD,EAAwBxlE,KAAKwhE,qBAC3Bt3D,OAAOjI,EAAU6qB,oBACjBi0C,EACAV,EACA73C,EACA+8C,EACAjF,IAE0B,OAAO,UAInC,GAA0B,OAAtBS,GAA8BA,EAAkB90D,OAOlD,OANIq0D,GAAcN,EAAWO,QAC3BvgE,KAAKmN,MACHI,EAAAhD,eAAe02D,sBACfsE,EAAW16D,MAAO5I,EAAUkQ,cAGzB,KAKX,OAAOnS,KAAK2d,aACV1b,EACAujE,EACAh9C,EACA83C,IAGNjuD,EAvoDA,CAA8B9E,EAAAX,mBAAjBlN,EAAA2S,4RC5Fb,IAwIYw0D,EAxIZr5D,EAAArN,EAAA,GAMAwxD,EAAAxxD,EAAA,GAQAyxD,EAAAzxD,EAAA,GAuCAmN,EAAAnN,EAAA,GAIAoN,EAAApN,EAAA,IASA,SAAkB2mE,GAEhBA,IAAA,eAKAA,IAAA,qBAEAA,IAAA,qCAEAA,IAAA,qCAEAA,IAAA,mBAEAA,IAAA,oBAEAA,IAAA,0BAEAA,IAAA,0BAEAA,IAAA,+BAKAA,IAAA,mDAEAA,IAAA,iDAEAA,IAAA,kDAEAA,IAAA,wDAEAA,IAAA,wDAKAA,IAAA,sCAEAA,IAAA,6CAKAA,IAAA,sCAMAA,IAAA,uCAUAA,IAAA,wCA9DF,CAAkBpnE,EAAAonE,YAAApnE,EAAAonE,UAAS,KAsE3B,SAAYD,GAEVA,IAAA,eAGAA,IAAA,uBAEAA,IAAA,qBAEAA,IAAA,qBAEAA,IAAA,uBAEAA,IAAA,0BAEAA,IAAA,wBAGAA,IAAA,oDAEAA,IAAA,uDAEAA,IAAA,qDAGAA,IAAA,sCAQAA,IAAA,uCAMAA,IAAA,iCAvCF,CAAYA,EAAAnnE,EAAAmnE,aAAAnnE,EAAAmnE,WAAU,KA0CtB,SAAiBA,GACCA,EAAAp6D,KAAhB,SAAqBq6B,EAAkBC,GACrC,OAASD,EAAO+/B,EAAWE,gBAAoBhgC,EAAQ8/B,EAAWE,gBACzDjgC,EAAO+/B,EAAWG,gBAAoBjgC,EAAQ8/B,EAAWG,iBAHtE,CAAiBH,EAAAnnE,EAAAmnE,aAAAnnE,EAAAmnE,WAAU,KAQ3B,SAAYI,GAEVA,IAAA,eAGAA,IAAA,6BAEAA,IAAA,yDAGAA,IAAA,qCAGAA,IAAA,qCAbF,CAAYvnE,EAAAunE,aAAAvnE,EAAAunE,WAAU,KAetB,SAAiBA,GACCA,EAAAx6D,KAAhB,SAAqBq6B,EAAkBC,GACrC,OAASD,EAAOmgC,EAAWF,gBAAoBhgC,EAAQkgC,EAAWF,gBACzDjgC,EAAOmgC,EAAWD,gBAAoBjgC,EAAQkgC,EAAWD,iBAHtE,CAAiBtnE,EAAAunE,aAAAvnE,EAAAunE,WAAU,KAQ3B,IAAA78C,EAAA,WAsDE,SAAAA,IArCApqB,KAAAknE,aAAyC,KAIzClnE,KAAAmnE,WAA4C,KAyyB9C,OAlyBS/8C,EAAAzoB,OAAP,SAAcylE,GACZ,IAAIj9C,EAAO,IAAIC,EAWf,OAVAD,EAAKlW,OAAS,KACdkW,EAAKpX,MAAK,EACVoX,EAAKi9C,eAAiBA,EACtBj9C,EAAKk9C,cAAgB,KACrBl9C,EAAKT,WAAa,KAClBS,EAAKghB,WAAai8B,EAAepzD,UAAUm3B,WAC3ChhB,EAAK3B,wBAA0B4+C,EAAe5+C,wBAC9C2B,EAAKm9C,WAAa,GAClBn9C,EAAKo9C,eAAiB,KACtBp9C,EAAKq9C,kBAAoB,KAClBr9C,GAIFC,EAAAq9C,aAAP,SAAoBL,EAA0BG,GAC5C,IAAIp9C,EAAOC,EAAKzoB,OAAOylE,GAMvB,OALAj9C,EAAKjY,IAAG,MACRiY,EAAKo9C,eAAiBA,EACtBp9C,EAAKq9C,kBAAoBD,EAAep1D,aAAe,aAAeo1D,EAAev+C,gBAAgBxd,SAAS,IAC9G2e,EAAKghB,WAAao8B,EAAevzD,UAAUm3B,WAC3ChhB,EAAK3B,wBAA0B++C,EAAe/+C,wBACvC2B,GAMTppB,OAAAC,eAAIopB,EAAAnoB,UAAA,iBAAc,KAAlB,WACE,OAAOjC,KAAKunE,gBAAkBvnE,KAAKonE,gDAIrCh9C,EAAAnoB,UAAAid,GAAA,SAAGoB,GAAyB,OAAQtgB,KAAK+S,MAAQuN,IAASA,GAE1D8J,EAAAnoB,UAAAuf,MAAA,SAAMlB,GAAyB,OAA8B,IAAtBtgB,KAAK+S,MAAQuN,IAEpD8J,EAAAnoB,UAAAiQ,IAAA,SAAIoO,GAAyBtgB,KAAK+S,OAASuN,GAE3C8J,EAAAnoB,UAAA0jB,MAAA,SAAMrF,GAAyBtgB,KAAK+S,QAAUuN,GAG9C8J,EAAAnoB,UAAAylE,KAAA,WACE,IAAIC,EAAS,IAAIv9C,EAWjB,OAVAu9C,EAAO1zD,OAASjU,KAChB2nE,EAAO50D,MAAQ/S,KAAK+S,MACpB40D,EAAOP,eAAiBpnE,KAAKonE,eAC7BO,EAAON,cAAgBrnE,KAAKqnE,cAC5BM,EAAOj+C,WAAa1pB,KAAK0pB,WACzBi+C,EAAOx8B,WAAanrC,KAAKmrC,WACzBw8B,EAAOn/C,wBAA0BxoB,KAAKwoB,wBACtCm/C,EAAOL,WAAatnE,KAAKsnE,WAAWM,QACpCD,EAAOJ,eAAiBvnE,KAAKunE,eAC7BI,EAAOH,kBAAoBxnE,KAAKwnE,kBACzBG,GAITv9C,EAAAnoB,UAAA4lE,aAAA,SAAahpD,EAAY4P,QAAA,IAAAA,MAAA,MACvB,IACIq5C,EASAj+C,EAVAu9C,EAAiBpnE,KAAKonE,eAE1B,OAAQvoD,EAAK00C,gBACX,KAAK3B,EAAAriC,WAAWrpB,IAAO4hE,EAAQV,EAAej+C,SAAU,MACxD,KAAKyoC,EAAAriC,WAAWppB,IAAO2hE,EAAQV,EAAeh+C,SAAU,MACxD,KAAKwoC,EAAAriC,WAAW5oB,IAAOmhE,EAAQV,EAAe/9C,SAAU,MACxD,KAAKuoC,EAAAriC,WAAW3oB,IAAOkhE,EAAQV,EAAe99C,SAAU,MACxD,KAAKsoC,EAAAriC,WAAW1oB,KAAQihE,EAAQV,EAAe79C,UAAW,MAC1D,QAAS,MAAM,IAAIrN,MAAM,0BAG3B,GAAIuS,EAAQ,CACV,GAAIq5C,GAASA,EAAM77D,OACjB,IAAK,IAAI5L,EAAI,EAAG8V,EAAI2xD,EAAM77D,OAAQ5L,EAAI8V,IAAK9V,EACzC,IAAKouB,EAAOla,IAAIuzD,EAAMznE,GAAGsnB,OAAQ,CAC/BkC,EAAQi+C,EAAMznE,GAEd,IADA,IAAI0nE,EAAID,EAAM77D,OAAS,EAChB5L,EAAI0nE,GAAG16C,UAAUy6C,EAAMznE,GAAKynE,EAAY,EAANznE,MAKzC,OAJAynE,EAAM77D,OAAS87D,EACfl+C,EAAMhL,KAAOA,EACbgL,EAAM9W,MAAQzF,EAAAjL,YAAY2Q,KAC1BhT,KAAKgoE,eAAen+C,EAAMlC,OAAO,GAC1BkC,EAIbA,EAAQu9C,EAAe98C,SAASzL,QAE5BipD,GAASA,EAAM77D,SACjB4d,EAAQi+C,EAAMG,OACRppD,KAAOA,EACbgL,EAAM9W,MAAQzF,EAAAjL,YAAY2Q,MAE1B6W,EAAQu9C,EAAe98C,SAASzL,GAIpC,OADA7e,KAAKgoE,eAAen+C,EAAMlC,OAAO,GAC1BkC,GAITO,EAAAnoB,UAAAimE,oBAAA,SAAoBrpD,EAAY4P,QAAA,IAAAA,MAAA,MAC9B,IAAI5E,EAAQ7pB,KAAK6nE,aAAahpD,EAAM4P,GACpC5E,EAAM3X,IAAI5E,EAAAjL,YAAY8lE,QACtB,IAAIjB,EAAelnE,KAAKknE,aAIxB,OAHKA,IAAclnE,KAAKknE,aAAeA,EAAe,IAAIhgE,KAC1DggE,EAAah1D,IAAI,QAAWlS,KAAKonE,eAAel+C,oBAAsBW,GACtE7pB,KAAKooE,aAAav+C,EAAMlC,MAAOk/C,EAAWwB,UACnCx+C,GAITO,EAAAnoB,UAAAqmE,cAAA,SAAcz+C,GACZ,IAAIA,EAAM3K,GAAG5R,EAAAjL,YAAYglB,SAAzB,CACAnd,OAAO2f,EAAMlC,OAAS,GACtB,IACImgD,EADAV,EAAiBpnE,KAAKonE,eAG1B,OADAl9D,OAAqB,MAAd2f,EAAMhL,MACEgL,EAAMhL,KAAM00C,gBACzB,KAAK3B,EAAAriC,WAAWrpB,IACd4hE,EAAQV,EAAej+C,WAAai+C,EAAej+C,SAAW,IAC9D,MAEF,KAAKyoC,EAAAriC,WAAWppB,IACd2hE,EAAQV,EAAeh+C,WAAag+C,EAAeh+C,SAAW,IAC9D,MAEF,KAAKwoC,EAAAriC,WAAW5oB,IACdmhE,EAAQV,EAAe/9C,WAAa+9C,EAAe/9C,SAAW,IAC9D,MAEF,KAAKuoC,EAAAriC,WAAW3oB,IACdkhE,EAAQV,EAAe99C,WAAa89C,EAAe99C,SAAW,IAC9D,MAEF,KAAKsoC,EAAAriC,WAAW1oB,KACdihE,EAAQV,EAAe79C,YAAc69C,EAAe79C,UAAY,IAChE,MAEF,QAAS,MAAM,IAAIrN,MAAM,0BAE3BhS,OAAO2f,EAAMlC,OAAS,GACtBmgD,EAAMt7D,KAAKqd,KAIbO,EAAAnoB,UAAAsmE,oBAAA,SAAoB1pD,EAAY4P,QAAA,IAAAA,MAAA,MAC9B,IAAI5E,EAAQ7pB,KAAK6nE,aAAahpD,EAAM4P,GAEpC,OADAzuB,KAAKsoE,cAAcz+C,GACZA,GAITO,EAAAnoB,UAAAumE,eAAA,SAAe5nE,GACb,IAAIsmE,EAAelnE,KAAKknE,aACxB,OAAIA,GAAgBA,EAAa3yD,IAAI3T,GAAcsmE,EAAahmE,IAAIN,GAC7D,MAITwpB,EAAAnoB,UAAAwmE,eAAA,SAAe7nE,EAAcie,EAAY4P,QAAA,IAAAA,MAAA,MACvC,IAAIi6C,EAAc1oE,KAAK6nE,aAAahpD,EAAM4P,GACtCy4C,EAAelnE,KAAKknE,aAKxB,OAJKA,EACAh9D,QAAQg9D,EAAa3yD,IAAI3T,IADXZ,KAAKknE,aAAeA,EAAe,IAAIhgE,IAE1DwhE,EAAYx2D,IAAI5E,EAAAjL,YAAY8lE,QAC5BjB,EAAah1D,IAAItR,EAAM8nE,GAChBA,GAITt+C,EAAAnoB,UAAA0mE,eAAA,SAAe/nE,EAAcie,EAAY8I,EAAY49C,GACnD,QADmD,IAAAA,MAAA,MAC9CvlE,KAAKknE,aACL,CACH,IAAI0B,EAAgB5oE,KAAKknE,aAAahmE,IAAIN,GAC1C,GAAIgoE,EAOF,OANIrD,GACFvlE,KAAKonE,eAAe5hD,QAAQrY,MAC1BI,EAAAhD,eAAeqV,uBACf2lD,EAAW16D,OAGR+9D,OAVa5oE,KAAKknE,aAAe,IAAIhgE,IAahDgD,OAAOyd,EAAQ3nB,KAAKonE,eAAe1+C,cAAczc,QACjD,IAAI48D,EAAc,IAAIlX,EAAAjqC,MAAM9mB,EAAM+mB,EAAO9I,EAAM7e,KAAKonE,gBAGpD,OADApnE,KAAKknE,aAAah1D,IAAItR,EAAMioE,GACrBA,GAITz+C,EAAAnoB,UAAA6mE,iBAAA,mBACE,GAAI9oE,KAAKknE,aAAc,KACrB,IAAwB,IAAAzgD,EAAA3O,EAAA9X,KAAKknE,aAAa9pD,UAAQY,EAAAyI,EAAAzO,QAAAgG,EAAA/F,KAAA+F,EAAAyI,EAAAzO,OAAE,CAA/C,IAAI0wD,EAAW1qD,EAAA1c,MACdonE,EAAYxpD,GAAG5R,EAAAjL,YAAY8lE,SAC7BnoE,KAAKsoE,cAAcI,qGAGvB1oE,KAAKknE,aAAe,OAKxB98C,EAAAnoB,UAAAmiE,YAAA,SAAYxjE,GACV,IACImoE,EADArjD,EAAuB1lB,KAE3B,GAAG,IAAK+oE,EAAQrjD,EAAQwhD,eAAkB6B,EAAMx0D,IAAI3T,GAAQ,OAAOmoE,EAAM7nE,IAAIN,SACtE8kB,EAAUA,EAAQzR,QACzB,OAAOjU,KAAKonE,eAAe3+C,aAAavnB,IAAIN,IAI9CwpB,EAAAnoB,UAAAokB,OAAA,SAAOzlB,GACL,IAAI+X,EAAU3Y,KAAKokE,YAAYxjE,GAC/B,OAAI+X,GACG3Y,KAAK6jE,eAAex9C,OAAOzlB,IAIpCwpB,EAAAnoB,UAAA+mE,YAAA,SAAYrhD,EAAYrH,EAAkB2oD,GACxC,YADwC,IAAAA,OAAA,GACpCthD,EAAQ,EAAUshD,EAEfthD,EADU3nB,KAAKsnE,WACIr7D,SAAWohB,UAAUrtB,KAAKsnE,WAAW3/C,IAAUrH,IAASA,GAIpF8J,EAAAnoB,UAAAinE,eAAA,SAAevhD,EAAYrH,EAAkB2oD,GAC3C,YAD2C,IAAAA,OAAA,GACvCthD,EAAQ,EAAUshD,EAEfthD,EADU3nB,KAAKsnE,WACIr7D,QAAwD,IAA7CohB,UAAUrtB,KAAKsnE,WAAW3/C,IAAUrH,IAI3E8J,EAAAnoB,UAAAmmE,aAAA,SAAazgD,EAAYrH,GACvB,KAAIqH,EAAQ,GAAZ,CACA,IAAI2/C,EAAatnE,KAAKsnE,WAClBv0D,EAAQ4U,EAAQ2/C,EAAWr7D,OAASohB,UAAUi6C,EAAW3/C,IAAU,EACvE3nB,KAAKsnE,WAAW3/C,GAAS5U,EAAQuN,IAInC8J,EAAAnoB,UAAA+lE,eAAA,SAAergD,EAAYrH,GACzB,KAAIqH,EAAQ,GAAZ,CACA,IAAI2/C,EAAatnE,KAAKsnE,WAClBv0D,EAAQ4U,EAAQ2/C,EAAWr7D,OAASohB,UAAUi6C,EAAW3/C,IAAU,EACvE3nB,KAAKsnE,WAAW3/C,GAAS5U,GAASuN,IAIpC8J,EAAAnoB,UAAAknE,eAAA,WACE,IAAI/B,EAAiBpnE,KAAKonE,eACtBv0D,EAAKu0D,EAAe59C,cACpB4/C,EAAQhC,EAAe39C,WAG3B,OAFK2/C,EACAA,EAAM58D,KAAKqG,GADJu0D,EAAe39C,WAAa,CAAE5W,GAEnCu0D,EAAe19C,WAAa7W,EAAGrH,SAAS,KAIjD4e,EAAAnoB,UAAAonE,cAAA,WACE,IAAIjC,EAAiBpnE,KAAKonE,eACtBgC,EAAQl/D,OAAOk9D,EAAe39C,YAC9Bxd,EAAS/B,OAAOk/D,EAAMn9D,QAC1Bm9D,EAAMnB,MACFh8D,EAAS,EACXm7D,EAAe19C,WAAa0/C,EAAMn9D,EAAS,GAAGT,SAAS,KAEvD47D,EAAe19C,WAAa,KAC5B09C,EAAe39C,WAAa,OAKhCW,EAAAnoB,UAAAqnE,QAAA,SAAQ96C,GACNxuB,KAAK+S,OAAuB,KAAdyb,EAAMzb,MACpB/S,KAAKsnE,WAAa94C,EAAM84C,YAI1Bl9C,EAAAnoB,UAAAsnE,mBAAA,SAAmB/6C,GACbA,EAAMtP,GAAE,IACVlf,KAAKkS,IAAG,KAENsc,EAAMtP,GAAE,IACVlf,KAAKkS,IAAG,KAENsc,EAAMtP,GAAE,KAAsBsP,EAAM9E,YAAc1pB,KAAK0pB,YACzD1pB,KAAKkS,IAAG,MAENsc,EAAMtP,GAAE,KAAyBsP,EAAM64C,eAAiBrnE,KAAKqnE,eAC/DrnE,KAAKkS,IAAG,MAENsc,EAAMtP,GAAE,KACVlf,KAAKkS,IAAG,MAGV,IADA,IAAIo1D,EAAa94C,EAAM84C,WACdjnE,EAAI,EAAG8V,EAAImxD,EAAWr7D,OAAQ5L,EAAI8V,IAAK9V,EAAG,CACjD,IAAI0S,EAAQu0D,EAAWjnE,GACnB0S,EAAQ8zD,EAAWwB,UAAUroE,KAAKooE,aAAa/nE,EAAGwmE,EAAW2C,wBAC7Dz2D,EAAQ8zD,EAAW4C,UAAUzpE,KAAKooE,aAAa/nE,EAAGwmE,EAAW6C,wBAC7D32D,EAAQ8zD,EAAW8C,WAAW3pE,KAAKooE,aAAa/nE,EAAGwmE,EAAW+C,2BAKtEx/C,EAAAnoB,UAAA4nE,cAAA,SAAc/iC,EAAYC,GAExB/mC,KAAKkS,IAAI40B,EAAK/zB,MAAQg0B,EAAMh0B,MAAK,KAGjC/S,KAAKkS,IAAc,KAAV40B,EAAK/zB,OACd/S,KAAKkS,IAAe,KAAX60B,EAAMh0B,OAQf,IALA,IAAI+2D,EAAiBhjC,EAAKwgC,WACtByC,EAAoBD,EAAe79D,OACnC+9D,EAAkBjjC,EAAMugC,WACxB2C,EAAqBD,EAAgB/9D,OACrCi+D,EAAgB,IAAInjE,MAAkBojE,IAASJ,EAAmBE,IAC7D5pE,EAAI,EAAGA,EAAI0pE,IAAqB1pE,EACvC6pE,EAAc7pE,GAAKwmE,EAAWp6D,KAC5B4gB,UAAUy8C,EAAezpE,IACzBA,EAAI4pE,EACA58C,UAAU28C,EAAgB3pE,IAC1B,GAGR,IAASA,EAAI0pE,EAAmB1pE,EAAI4pE,IAAsB5pE,EACxD6pE,EAAc7pE,GAAKwmE,EAAWp6D,KAC5B,EACA4gB,UAAU28C,EAAgB3pE,KAG9BL,KAAKsnE,WAAa4C,GAIpB9/C,EAAAnoB,UAAAmoE,UAAA,SAAUzjC,EAAqB9nB,GAC7B,IAAKA,EAAKK,GAAE,KAAsB,OAAO,EAIzC,OAAQ0yC,EAAA9a,gBAAgBnQ,IACtB,KAAKirB,EAAApiC,aAAa0vB,SAChB,IAAK0S,EAAAla,WAAW/Q,GAAO,MAEvB,QADI9c,EAAQ7pB,KAAKonE,eAAe1+C,cAAckpC,EAAAta,iBAAiB3Q,KACjD9nB,KAAKK,GAAE,MAAwBlf,KAAKgpE,YAAYn/C,EAAMlC,MAAOk/C,EAAW7C,SAAS,GAEjG,KAAKpS,EAAApiC,aAAa0lB,SAChB,IAAIrrB,EACJ,QADIA,EAAQ7pB,KAAKonE,eAAe1+C,cAAckpC,EAAAva,iBAAiB1Q,KACjD9nB,KAAKK,GAAE,MAAwBlf,KAAKgpE,YAAYn/C,EAAMlC,MAAOk/C,EAAW7C,SAAS,GAGnG,OAAO,GAIT55C,EAAAnoB,UAAAooE,qBAAA,SAAqB1jC,GAEnB,OAAQirB,EAAA9a,gBAAgBnQ,IACtB,KAAKirB,EAAApiC,aAAa0vB,SAChB,IAAK0S,EAAAla,WAAW/Q,GAAO,MACvB,IAAI9c,EAAQ7pB,KAAKonE,eAAe1+C,cAAckpC,EAAAta,iBAAiB3Q,IAC/D3mC,KAAKooE,aAAav+C,EAAMlC,MAAOk/C,EAAW7C,SAC1ChkE,KAAKqqE,qBAAqBzY,EAAApa,iBAAiB7Q,IAC3C,MAEF,KAAKirB,EAAApiC,aAAa0lB,SACZrrB,EAAQ7pB,KAAKonE,eAAe1+C,cAAckpC,EAAAva,iBAAiB1Q,IAC/D3mC,KAAKooE,aAAav+C,EAAMlC,MAAOk/C,EAAW7C,SAC1C,MAEF,KAAKpS,EAAApiC,aAAakvB,GAChB,IAAIrU,EAAUunB,EAAApY,WAAW7S,GACzB,IAAK0D,EAAS,MACVunB,EAAA9a,gBAAgBzM,IAAYunB,EAAApiC,aAAaolB,QAIxCgd,EAAA7a,kBAAkB1M,IAAYunB,EAAAriC,WAAWrpB,KAAoC,GAA7B0rD,EAAA5a,iBAAiB3M,IACjEunB,EAAA7a,kBAAkB1M,IAAYunB,EAAAriC,WAAWppB,KAAuC,GAAhCyrD,EAAA3a,oBAAoB5M,IAAkD,GAAjCunB,EAAA1a,qBAAqB7M,MAE3GrqC,KAAKqqE,qBAAqBzY,EAAAxY,eAAezS,IACzC3mC,KAAKqqE,qBAAqBzY,EAAAtY,UAAU3S,KAGxC,MAEF,KAAKirB,EAAApiC,aAAasmB,MAChB,OAAQ8b,EAAA5Z,WAAWrR,IACjB,KAAKirB,EAAA/+B,QAAQy3C,OACb,KAAK1Y,EAAA/+B,QAAQ03C,OACXvqE,KAAKwqE,sBAAsB5Y,EAAA3Z,cAActR,IAI7C,MAEF,KAAKirB,EAAApiC,aAAaymB,OAChB,OAAQ2b,EAAA/Z,YAAYlR,IAClB,KAAKirB,EAAAz5B,SAASsyC,MACZ,IAAI3jC,EAAO8qB,EAAA9Z,cAAcnR,GACrBI,EAAQ6qB,EAAA7Z,eAAepR,GACvBirB,EAAA9a,gBAAgBhQ,IAAS8qB,EAAApiC,aAAaolB,OAAmC,GAA1Bgd,EAAA5a,iBAAiBlQ,GAClE9mC,KAAKqqE,qBAAqBtjC,GACjB6qB,EAAA9a,gBAAgB/P,IAAU6qB,EAAApiC,aAAaolB,OAAoC,GAA3Bgd,EAAA5a,iBAAiBjQ,IAC1E/mC,KAAKqqE,qBAAqBvjC,GAE5B,MAEF,KAAK8qB,EAAAz5B,SAASuyC,MACR5jC,EAAO8qB,EAAA9Z,cAAcnR,GACrBI,EAAQ6qB,EAAA7Z,eAAepR,GACvBirB,EAAA9a,gBAAgBhQ,IAAS8qB,EAAApiC,aAAaolB,OAAuC,GAA7Bgd,EAAA3a,oBAAoBnQ,IAA4C,GAA9B8qB,EAAA1a,qBAAqBpQ,GAEhG8qB,EAAA9a,gBAAgB/P,IAAU6qB,EAAApiC,aAAaolB,OAAwC,GAA9Bgd,EAAA3a,oBAAoBlQ,IAA8C,GAA/B6qB,EAAA1a,qBAAqBnQ,IAClH/mC,KAAKqqE,qBAAqBvjC,GAF1B9mC,KAAKqqE,qBAAqBtjC,GAI5B,MAEF,KAAK6qB,EAAAz5B,SAASwyC,MACR7jC,EAAO8qB,EAAA9Z,cAAcnR,GACrBI,EAAQ6qB,EAAA7Z,eAAepR,GACvBirB,EAAA9a,gBAAgBhQ,IAAS8qB,EAAApiC,aAAaolB,OAAmC,GAA1Bgd,EAAA5a,iBAAiBlQ,GAClE9mC,KAAKqqE,qBAAqBtjC,GACjB6qB,EAAA9a,gBAAgB/P,IAAU6qB,EAAApiC,aAAaolB,OAAoC,GAA3Bgd,EAAA5a,iBAAiBjQ,IAC1E/mC,KAAKqqE,qBAAqBvjC,GAE5B,MAEF,KAAK8qB,EAAAz5B,SAASyyC,MACR9jC,EAAO8qB,EAAA9Z,cAAcnR,GACrBI,EAAQ6qB,EAAA7Z,eAAepR,GACvBirB,EAAA9a,gBAAgBhQ,IAAS8qB,EAAApiC,aAAaolB,OAAsC,GAA7Bgd,EAAA3a,oBAAoBnQ,IAA4C,GAA9B8qB,EAAA1a,qBAAqBpQ,GACxG9mC,KAAKqqE,qBAAqBtjC,GACjB6qB,EAAA9a,gBAAgB/P,IAAU6qB,EAAApiC,aAAaolB,OAAuC,GAA9Bgd,EAAA3a,oBAAoBlQ,IAA8C,GAA/B6qB,EAAA1a,qBAAqBnQ,IACjH/mC,KAAKqqE,qBAAqBvjC,GAKhC,MAEF,KAAK8qB,EAAApiC,aAAasvB,KAGhB,OAFW8S,EAAAhX,cAAcjU,IAGvB,KAFY3mC,KAAKonE,eAAe5hD,QAEnB5I,eAAezK,aAC1BnS,KAAKqqE,qBAAqBzY,EAAA5W,eAAerU,EAAM,OAUzDvc,EAAAnoB,UAAAuoE,sBAAA,SAAsB7jC,GAEpB,OAAQirB,EAAA9a,gBAAgBnQ,IACtB,KAAKirB,EAAApiC,aAAasmB,MAChB,OAAQ8b,EAAA5Z,WAAWrR,IACjB,KAAKirB,EAAA/+B,QAAQy3C,OACb,KAAK1Y,EAAA/+B,QAAQ03C,OACXvqE,KAAKqqE,qBAAqBzY,EAAA3Z,cAActR,IAI5C,MAEF,KAAKirB,EAAApiC,aAAakvB,GAChB,IAAItU,EAASwnB,EAAAtY,UAAU3S,GACvB,GAAIirB,EAAA9a,gBAAgB1M,IAAWwnB,EAAApiC,aAAaolB,MAAO,CAEjD,IADcgd,EAAApY,WAAW7S,GACX,OAIXirB,EAAA7a,kBAAkB3M,IAAWwnB,EAAAriC,WAAWrpB,KAAmC,GAA5B0rD,EAAA5a,iBAAiB5M,IAChEwnB,EAAA7a,kBAAkB3M,IAAWwnB,EAAAriC,WAAWppB,MAAuC,GAA/ByrD,EAAA3a,oBAAoB7M,IAAgD,GAAhCwnB,EAAA1a,qBAAqB9M,OAE1GpqC,KAAKwqE,sBAAsB5Y,EAAAxY,eAAezS,IAC1C3mC,KAAKwqE,sBAAsB5Y,EAAApY,WAAW7S,KAI1C,MAEF,KAAKirB,EAAApiC,aAAaymB,OAChB,OAAQ2b,EAAA/Z,YAAYlR,IAElB,KAAKirB,EAAAz5B,SAASsyC,MACZ,IAAI3jC,EAAO8qB,EAAA9Z,cAAcnR,GACrBI,EAAQ6qB,EAAA7Z,eAAepR,GACvBirB,EAAA9a,gBAAgBhQ,IAAS8qB,EAAApiC,aAAaolB,OAAmC,GAA1Bgd,EAAA5a,iBAAiBlQ,GAClE9mC,KAAKqqE,qBAAqBtjC,GACjB6qB,EAAA9a,gBAAgB/P,IAAU6qB,EAAApiC,aAAaolB,OAAoC,GAA3Bgd,EAAA5a,iBAAiBjQ,IAC1E/mC,KAAKqqE,qBAAqBvjC,GAE5B,MAEF,KAAK8qB,EAAAz5B,SAASuyC,MACR5jC,EAAO8qB,EAAA9Z,cAAcnR,GACrBI,EAAQ6qB,EAAA7Z,eAAepR,GACvBirB,EAAA9a,gBAAgBhQ,IAAS8qB,EAAApiC,aAAaolB,OAAsC,GAA7Bgd,EAAA3a,oBAAoBnQ,IAA4C,GAA9B8qB,EAAA1a,qBAAqBpQ,GACxG9mC,KAAKqqE,qBAAqBtjC,GACjB6qB,EAAA9a,gBAAgB/P,IAAU6qB,EAAApiC,aAAaolB,OAAuC,GAA9Bgd,EAAA3a,oBAAoBlQ,IAA8C,GAA/B6qB,EAAA1a,qBAAqBnQ,IACjH/mC,KAAKqqE,qBAAqBvjC,GAE5B,MAEF,KAAK8qB,EAAAz5B,SAASwyC,MACR7jC,EAAO8qB,EAAA9Z,cAAcnR,GACrBI,EAAQ6qB,EAAA7Z,eAAepR,GACvBirB,EAAA9a,gBAAgBhQ,IAAS8qB,EAAApiC,aAAaolB,OAAmC,GAA1Bgd,EAAA5a,iBAAiBlQ,GAClE9mC,KAAKqqE,qBAAqBtjC,GACjB6qB,EAAA9a,gBAAgB/P,IAAU6qB,EAAApiC,aAAaolB,OAAoC,GAA3Bgd,EAAA5a,iBAAiBjQ,IAC1E/mC,KAAKqqE,qBAAqBvjC,GAE5B,MAEF,KAAK8qB,EAAAz5B,SAASyyC,MACR9jC,EAAO8qB,EAAA9Z,cAAcnR,GACrBI,EAAQ6qB,EAAA7Z,eAAepR,GACvBirB,EAAA9a,gBAAgBhQ,IAAS8qB,EAAApiC,aAAaolB,OAAuC,GAA7Bgd,EAAA3a,oBAAoBnQ,IAA4C,GAA9B8qB,EAAA1a,qBAAqBpQ,GAEhG8qB,EAAA9a,gBAAgB/P,IAAU6qB,EAAApiC,aAAaolB,OAAwC,GAA9Bgd,EAAA3a,oBAAoBlQ,IAA8C,GAA/B6qB,EAAA1a,qBAAqBnQ,IAClH/mC,KAAKqqE,qBAAqBvjC,GAF1B9mC,KAAKqqE,qBAAqBtjC,MAiBtC3c,EAAAnoB,UAAA4oE,YAAA,SAAYlkC,EAAqB9nB,GAM/B,GAHA3U,OAAO2U,GAAQrR,EAAAmH,KAAKG,OAGf+J,EAAKK,GAAG,IAAsC,OAAO,EAE1D,IAAIwpC,EACJ,OAAQkJ,EAAA9a,gBAAgBnQ,IAGtB,KAAKirB,EAAApiC,aAAa0lB,SAChB,IAAIrrB,EAAQ7pB,KAAKonE,eAAe1+C,cAAckpC,EAAAva,iBAAiB1Q,IAC/D,OAAQ3mC,KAAKgpE,YAAYn/C,EAAMlC,MAAOk/C,EAAWiE,SAAS,IACnDC,EAAsBlhD,EAAMhL,KAAMA,GAI3C,KAAK+yC,EAAApiC,aAAa0vB,SAEhB,OADAh1C,OAAO0nD,EAAAla,WAAW/Q,IACX3mC,KAAK6qE,YAAYjZ,EAAApa,iBAAiB7Q,GAAO9nB,GAIlD,KAAK+yC,EAAApiC,aAAa4lB,UAEhB,IAAI41B,EAAS9gE,OAAOlK,KAAKonE,eAAe5hD,QAAQnU,eAAenQ,IAAIgJ,OAAO0nD,EAAAha,iBAAiBjR,MAE3F,OADAz8B,OAAO8gE,EAAOx0D,MAAQm7C,EAAA/gD,YAAYiQ,QAC3BkqD,EAAsB7gE,OAAgB8gE,EAAQnsD,MAAOA,GAG9D,KAAK+yC,EAAApiC,aAAaymB,OAChB,OAAQ2b,EAAA/Z,YAAYlR,IAGlB,KAAKirB,EAAAz5B,SAASsyC,MACd,KAAK7Y,EAAAz5B,SAASuyC,MACd,KAAK9Y,EAAAz5B,SAAS8yC,MACd,KAAKrZ,EAAAz5B,SAAS+yC,MACd,KAAKtZ,EAAAz5B,SAASwyC,MACd,KAAK/Y,EAAAz5B,SAASyyC,MACd,KAAKhZ,EAAAz5B,SAASgzC,MACd,KAAKvZ,EAAAz5B,SAASizC,MACd,KAAKxZ,EAAAz5B,SAASkzC,MACd,KAAKzZ,EAAAz5B,SAASmzC,MACd,KAAK1Z,EAAAz5B,SAASozC,MACd,KAAK3Z,EAAAz5B,SAASqzC,MACd,KAAK5Z,EAAAz5B,SAASszC,MACd,KAAK7Z,EAAAz5B,SAASuzC,MACd,KAAK9Z,EAAAz5B,SAASwzC,MACd,KAAK/Z,EAAAz5B,SAASyzC,MACd,KAAKha,EAAAz5B,SAAS0zC,MACd,KAAKja,EAAAz5B,SAAS2zC,MACd,KAAKla,EAAAz5B,SAAS4zC,MACd,KAAKna,EAAAz5B,SAAS6zC,MACd,KAAKpa,EAAAz5B,SAAS8zC,MACd,KAAKra,EAAAz5B,SAAS+zC,MACd,KAAKta,EAAAz5B,SAASg0C,MACd,KAAKva,EAAAz5B,SAASi0C,MACd,KAAKxa,EAAAz5B,SAASk0C,MACd,KAAKza,EAAAz5B,SAASm0C,MACd,KAAK1a,EAAAz5B,SAASo0C,MACd,KAAK3a,EAAAz5B,SAASq0C,MACd,KAAK5a,EAAAz5B,SAASs0C,MACd,KAAK7a,EAAAz5B,SAASu0C,MACd,KAAK9a,EAAAz5B,SAASw0C,MACd,KAAK/a,EAAAz5B,SAASy0C,MAAO,OAAO,EAG5B,KAAKhb,EAAAz5B,SAAS00C,OACZ,QAEIjb,EAAA9a,gBAAgB4R,EAAUkJ,EAAA9Z,cAAcnR,KAAUirB,EAAApiC,aAAaolB,QAEhC,GAA7Bgd,EAAA5a,iBAAiB0R,IAEc,GAA7BkJ,EAAA5a,iBAAiB0R,KAChB1oD,KAAK6qE,YAAYjZ,EAAA7Z,eAAepR,GAAO9nB,KAI5C+yC,EAAA9a,gBAAgB4R,EAAUkJ,EAAA7Z,eAAepR,KAAUirB,EAAApiC,aAAaolB,QAEjC,GAA7Bgd,EAAA5a,iBAAiB0R,IAEc,GAA7BkJ,EAAA5a,iBAAiB0R,KAChB1oD,KAAK6qE,YAAYjZ,EAAA9Z,cAAcnR,GAAO9nB,KASjD,KAAK+yC,EAAAz5B,SAAS20C,OAGZ,QAGMlb,EAAA9a,gBAAgB4R,EAAUkJ,EAAA9Z,cAAcnR,KAAUirB,EAAApiC,aAAaolB,OAC/Dgd,EAAA5a,iBAAiB0R,IAAY7pC,EAAK+zC,wBAAwBplD,EAAAmH,KAAKvR,OAC3DpD,KAAK6qE,YAAYniB,EAAS7pC,IAG9B+yC,EAAA9a,gBAAgB4R,EAAUkJ,EAAA7Z,eAAepR,KAAUirB,EAAApiC,aAAaolB,OAChEgd,EAAA5a,iBAAiB0R,IAAY7pC,EAAK+zC,wBAAwBplD,EAAAmH,KAAKvR,OAC3DpD,KAAK6qE,YAAYniB,EAAS7pC,IAMtC,KAAK+yC,EAAAz5B,SAAS40C,OACZ,IAAIjgC,EAAQ,GAAKjuB,EAAK8sB,KACtB,OAAOimB,EAAA9a,gBAAgB4R,EAAUkJ,EAAA7Z,eAAepR,KAAUirB,EAAApiC,aAAaolB,OAChEgd,EAAA5a,iBAAiB0R,GAAW5b,EAIrC,KAAK8kB,EAAAz5B,SAAS60C,OACRlgC,EAAQ,GAAKjuB,EAAK8sB,KACtB,OAAO3rC,KAAK6qE,YAAYjZ,EAAA9Z,cAAcnR,GAAO9nB,KAC3C+yC,EAAA9a,gBAAgB4R,EAAUkJ,EAAA7Z,eAAepR,KAAUirB,EAAApiC,aAAaolB,OAChEgd,EAAA5a,iBAAiB0R,GAAW5b,GAMhC,KAAK8kB,EAAAz5B,SAAS80C,OACRngC,EAAQ,GAAKjuB,EAAK8sB,KACtB,OAAO9sB,EAAKK,GAAE,KAER0yC,EAAA9a,gBAAgB4R,EAAUkJ,EAAA7Z,eAAepR,KAAUirB,EAAApiC,aAAaolB,OAChEgd,EAAA5a,iBAAiB0R,GAAW5b,GAE9B9sC,KAAK6qE,YAAYjZ,EAAA9Z,cAAcnR,GAAO9nB,MACpC+yC,EAAA9a,gBAAgB4R,EAAUkJ,EAAA7Z,eAAepR,KAAUirB,EAAApiC,aAAaolB,OAChEgd,EAAA5a,iBAAiB0R,IAAY5b,GAKrC,KAAK8kB,EAAAz5B,SAAS+0C,OACd,KAAKtb,EAAAz5B,SAASg1C,OACd,KAAKvb,EAAAz5B,SAASi1C,OACZ,OAAOptE,KAAK6qE,YAAYjZ,EAAA9Z,cAAcnR,GAAO9nB,IACtC7e,KAAK6qE,YAAYjZ,EAAA7Z,eAAepR,GAAO9nB,GAGlD,MAGF,KAAK+yC,EAAApiC,aAAasmB,MAChB,OAAQ8b,EAAA5Z,WAAWrR,IAGjB,KAAKirB,EAAA/+B,QAAQy3C,OACb,KAAK1Y,EAAA/+B,QAAQ03C,OAAQ,OAAO,EAG5B,KAAK3Y,EAAA/+B,QAAQw6C,OACb,KAAKzb,EAAA/+B,QAAQy6C,OACb,KAAK1b,EAAA/+B,QAAQ06C,UAAW,OAAO1uD,EAAK8sB,KAAO,EAE7C,MAIF,KAAKimB,EAAApiC,aAAaolB,MAChB,IAAItzC,EAAa,EACjB,OAAQswD,EAAA7a,kBAAkBpQ,IACxB,KAAKirB,EAAAriC,WAAWrpB,IAAO5E,EAAQswD,EAAA5a,iBAAiBrQ,GAAO,MACvD,KAAKirB,EAAAriC,WAAWppB,IAAO7E,EAAQswD,EAAA3a,oBAAoBtQ,GAAO,MAC1D,KAAKirB,EAAAriC,WAAW5oB,IAAOrF,EAAQ8B,IAAIwuD,EAAAza,iBAAiBxQ,IAAQ,MAC5D,KAAKirB,EAAAriC,WAAW3oB,IAAOtF,EAAQ8B,IAAIwuD,EAAAxa,iBAAiBzQ,IAAQ,MAC5D,QAASz8B,QAAO,GAElB,OAAQ2U,EAAKrI,MACX,OAAkB,OAAOlV,EAAQ4B,GAAGsqE,WAAalsE,EAAQ4B,GAAGsxC,UAC5D,OAAmB,OAAOlzC,EAAQ6B,IAAIqqE,WAAalsE,EAAQ6B,IAAIqxC,UAC/D,OAAkB,OAAOlzC,EAAQ,GAAKA,EAAQiC,GAAGixC,UACjD,OAAmB,OAAOlzC,EAAQ,GAAKA,EAAQkC,IAAIgxC,UACnD,QAAoB,OAAuB,KAAP,EAARlzC,GAE9B,MAIF,KAAKswD,EAAApiC,aAAa+lB,KAChB,IAAIk4B,OAAQ,EACR7lC,EAASgqB,EAAAvZ,aAAa1R,GAC1B,OAAQirB,EAAA1Z,aAAavR,IACnB,KAAK,EAAM8mC,EAAW7lC,EAASp6B,EAAAmH,KAAKzR,GAAMsK,EAAAmH,KAAKpR,GAAK,MACpD,KAAK,EAAMkqE,EAAW7lC,EAASp6B,EAAAmH,KAAKxR,IAAMqK,EAAAmH,KAAKnR,IAAK,MACpD,QAAWiqE,EAAW7lC,EAASp6B,EAAAmH,KAAKvR,IAAMoK,EAAAmH,KAAKlR,IAEjD,OAAOsnE,EAAsB0C,EAAU5uD,GAMzC,KAAK+yC,EAAApiC,aAAa8uB,MAChB,IAAKsT,EAAA9Y,aAAanS,GAAO,CACvB,IAAIgF,EAAOzhC,OAAO0nD,EAAA5Y,mBAAmBrS,IACjC+mC,EAAO9b,EAAA1Y,cAAcvS,EAAMgF,EAAO,GACtC,OAAO3rC,KAAK6qE,YAAY6C,EAAM7uD,GAEhC,MAIF,KAAK+yC,EAAApiC,aAAakvB,GAChB,OAAO1+C,KAAK6qE,YAAYjZ,EAAAtY,UAAU3S,GAAO9nB,IAClC7e,KAAK6qE,YAAY3gE,OAAO0nD,EAAApY,WAAW7S,IAAQ9nB,GAIpD,KAAK+yC,EAAApiC,aAAauyB,OAChB,OAAO/hD,KAAK6qE,YAAYjZ,EAAA1X,cAAcvT,GAAO9nB,IACtC7e,KAAK6qE,YAAYjZ,EAAAxX,cAAczT,GAAO9nB,GAI/C,KAAK+yC,EAAApiC,aAAasvB,KAChB,IACIvtC,EADUvR,KAAKonE,eAAe5hD,QACJjU,gBAC1Bo8D,EAAezjE,OAAO0nD,EAAAhX,cAAcjU,IACxC,GAAIp1B,EAAgBgD,IAAIo5D,GAAe,CACrC,IAAIrlD,EAAW/W,EAAgBrQ,IAAIysE,GACnCzjE,OAAOoe,EAAS9R,MAAQm7C,EAAA/gD,YAAY2N,UACpC,IAAI4sB,EAAwB7iB,EAAUtU,UAAUm3B,WAChD,OAAmB7iB,EAAU6B,KAAKjL,GAAE,IAC7B6rD,EAAsB5/B,EAAYtsB,GAE3C,OAAO,EAIT,KAAK+yC,EAAApiC,aAAa2uB,YAAa,OAAO,EAExC,OAAO,GAGT/zB,EAAAnoB,UAAAuJ,SAAA,WAGE,IAFA,IAAIoiE,EAAS,EACT35D,EAASjU,KAAKiU,OACXA,GACLA,EAASA,EAAOA,SACd25D,EAEJ,MAAO,QAAU5tE,KAAK6jE,eAAiB,KAAO+J,EAAOpiE,WAAa,KAEtE4e,EA9zBA,GAi0BA,SAAS2gD,EAAsB0C,EAAgBvoB,GAC7C,OAAQuoB,EAASvuD,GAAE,IACZuuD,EAAS9hC,KAAOuZ,EAAOvZ,MACvB8hC,EAASvuD,GAAE,IAAsBgmC,EAAOhmC,GAAE,GAUnD,SAAS2uD,EAAoBlnC,EAAqBmnC,GAChD,OAAQlc,EAAA9a,gBAAgBnQ,IACtB,KAAKirB,EAAApiC,aAAa0lB,SAChB44B,EAAK/4D,IAAI68C,EAAAva,iBAAiB1Q,IAC1B,MAEF,KAAKirB,EAAApiC,aAAa0vB,SAChB4uB,EAAK/4D,IAAI68C,EAAAta,iBAAiB3Q,IAG5B,QAASirB,EAAApT,SAAS7X,EAAMmnC,EAAMD,IAx1BrBnuE,EAAA0qB,OAw0Bb1qB,EAAAquE,eAAA,SAA+BpnC,EAAqBmnC,GAElD,YAFkD,IAAAA,MAAA,IAAqB7mE,KACvE2qD,EAAApT,SAAS7X,EAAMmnC,EAAMD,GACdC,64BC3hCT,IAAA7N,EAAA9/D,EAAA,IASAoN,EAAApN,EAAA,GAKAyxD,EAAAzxD,EAAA,GA4BAmN,EAAAnN,EAAA,GAYAwxD,EAAAxxD,EAAA,GAwBAwN,EAAAxN,EAAA,IAOAuN,EAAAvN,EAAA,GAIAgiD,EAAAhiD,EAAA,GAKAsN,EAAAtN,EAAA,GA+DAqN,EAAArN,EAAA,GAQAwJ,EAAAxJ,EAAA,GAWA6tE,EAAA,oBAAAA,IAGEhuE,KAAAotB,OAAiB9f,EAAApE,OAAOuM,OAExBzV,KAAA0V,UAAiB,EAEjB1V,KAAAiuE,cAAqB,EAErBjuE,KAAAkuE,aAAoB,EAEpBluE,KAAAmuE,aAAoB,EAEpBnuE,KAAAyqB,WAAkB,EAElBzqB,KAAA2V,WAAkB,EAElB3V,KAAA2b,cAA2C,KAE3C3b,KAAAouE,SAAQ,EAGRpuE,KAAA4V,kBAAyB,EAEzB5V,KAAA6V,gBAAuB,EA0BzB,OAvBE9U,OAAAC,eAAIgtE,EAAA/rE,UAAA,WAAQ,KAAZ,WACE,OAAOjC,KAAKotB,QAAU9f,EAAApE,OAAOsM,wCAI/BzU,OAAAC,eAAIgtE,EAAA/rE,UAAA,YAAS,KAAb,WACE,OAAOjC,KAAKotB,QAAU9f,EAAApE,OAAOsM,OAAShI,EAAAmH,KAAK49C,QAAU/kD,EAAAmH,KAAK69C,yCAI5DzxD,OAAAC,eAAIgtE,EAAA/rE,UAAA,YAAS,KAAb,WACE,OAAOjC,KAAKotB,QAAU9f,EAAApE,OAAOsM,OAAShI,EAAAmH,KAAK09C,QAAU7kD,EAAAmH,KAAK29C,yCAI5DvxD,OAAAC,eAAIgtE,EAAA/rE,UAAA,iBAAc,KAAlB,WACE,OAAOjC,KAAKotB,QAAU9f,EAAApE,OAAOsM,OAASo8C,EAAAriC,WAAWppB,IAAMyrD,EAAAriC,WAAWrpB,qCAIpE8nE,EAAA/rE,UAAAmT,WAAA,SAAWi5D,GACT,OAAoC,IAA5BruE,KAAKouE,SAAWC,IAE5BL,EAlDA,GAAatuE,EAAAsuE,UAqDb,SAAkBM,GAChBA,IAAA,eAGAA,IAAA,uBAEAA,IAAA,uBAEAA,IAAA,eAGAA,IAAA,yBAEAA,IAAA,wCAEAA,IAAA,gCAEAA,IAAA,oCAjBF,CAAkB5uE,EAAA4uE,kBAAA5uE,EAAA4uE,gBAAe,KAqBjC,SAAkBC,GAChBA,IAAA,eAEAA,IAAA,eAEAA,IAAA,eAEAA,IAAA,+BAEAA,IAAA,+BATF,CAAkB7uE,EAAA6uE,kBAAA7uE,EAAA6uE,gBAAe,KAajC,IAkjRIC,EACAC,EAnjRJC,EAAA,SAAA39D,GA2CE,SAAA29D,EAAYlpD,EAAkB/Q,QAAA,IAAAA,MAAA,MAA9B,IAAAzD,EACED,EAAAvQ,KAAAR,KAAMwlB,EAAQ3Y,cAAY7M,KA/B5BgR,EAAA29D,uBAAqC,GAErC39D,EAAA49D,YAA2B,KAE3B59D,EAAA69D,YAAoBrhE,EAAAmH,KAAKG,KAMzB9D,EAAA89D,eAAkC,GAElC99D,EAAA+9D,eAA4C,IAAI7nE,IAEhD8J,EAAAg+D,cAA0B,CAAE,QAE5Bh+D,EAAAi+D,QAAqB,EAErBj+D,EAAAk+D,QAAuB,EAEvBl+D,EAAAm+D,gBAAe,EAEfn+D,EAAAo+D,oBAA0C,IAAInoE,IAgwFtC+J,EAAAq+D,eAAkC,KAClCr+D,EAAAs+D,eAAkC,KAClCt+D,EAAAu+D,eAAkC,KAClCv+D,EAAAw+D,eAAkC,KAzvFxCx+D,EAAKwU,QAAUA,EACfxU,EAAKoB,SAAWoT,EAAQpT,SACnBqC,IAASA,EAAU,IAAIu5D,GAC5Bh9D,EAAKyD,QAAUA,EACfzD,EAAKqa,aAAe/V,QAGlB60D,IAAI11D,EAAQkB,WAAY,IAE1B3E,EAAKrR,OAASiyD,EAAAvtB,OAAO1iC,SACrB,IAAIkwC,EAAqC,SACrC7gC,EAAKyD,QAAQW,WAAU,MAAmBy8B,GAAgB+f,EAAA3hC,aAAaw/C,SACvEz+D,EAAKyD,QAAQW,WAAU,KAA0By8B,GAAgB+f,EAAA3hC,aAAay/C,gBAE9E1+D,EAAKyD,QAAQW,WAAU,KAAgBy8B,GAAgB+f,EAAA3hC,aAAa0/C,SACpE3+D,EAAKyD,QAAQW,WAAU,KAAuBy8B,GAAgB+f,EAAA3hC,aAAa2/C,YAC3E5+D,EAAKyD,QAAQW,WAAU,KAA0By8B,GAAgB+f,EAAA3hC,aAAa4/C,SAElF7+D,EAAKrR,OAAOiyC,YAAYC,KA07Q5B,OAz/Q8Bv/B,EAAAo8D,EAAA39D,GAsCrB29D,EAAAoB,QAAP,SAAetqD,EAAkB/Q,GAC/B,YAD+B,IAAAA,MAAA,MACxB,IAAIi6D,EAASlpD,EAAS/Q,GAASq7D,WA4BxCpB,EAAAzsE,UAAA6tE,QAAA,uBACMr7D,EAAUzU,KAAKyU,QACf9U,EAASK,KAAKL,OACd6lB,EAAUxlB,KAAKwlB,QAGnBA,EAAQhR,WAAWC,GAGnB,IAAIs7D,EAAwBvqD,EAAQzR,mBAAmB,QAAS,IAAIvG,EAAA2Y,UAAU,GAAI3Y,EAAAmH,KAAKG,OACvFi7D,EAAsB59D,aAAe,QACrC,IAAI69D,EAAoB,IAAIjpE,MAC5B/G,KAAKiwE,YAAcF,EAAsB5lD,KACzCnqB,KAAKkwE,YAAcF,EAGfv7D,EAAQc,UACV5V,EAAOqtC,UAAUizB,EAAAwE,eAAe0L,UAAWve,EAAAriC,WAAWppB,KAAK,EAAMxG,EAAO0D,IAAI,IAC5E1D,EAAOqtC,UAAUizB,EAAAwE,eAAe2L,UAAWxe,EAAAriC,WAAWppB,KAAK,EAAMxG,EAAO0D,IAAI,MAE5E1D,EAAOqtC,UAAUizB,EAAAwE,eAAe0L,UAAWve,EAAAriC,WAAWrpB,KAAK,EAAMvG,EAAOyD,IAAI,IAC5EzD,EAAOqtC,UAAUizB,EAAAwE,eAAe2L,UAAWxe,EAAAriC,WAAWrpB,KAAK,EAAMvG,EAAOyD,IAAI,KAI9E,IAAIitE,EAAQ7qD,EAAQpU,gBACpB,IAAiB,IAAA4M,EAAAlG,EAAAu4D,EAAMjzD,UAAQa,EAAAD,EAAAhG,QAAAiG,EAAAhG,KAAAgG,EAAAD,EAAAhG,OAAE,EAAxB5B,EAAI6H,EAAA3c,OACFmK,OAAO6R,UACdtd,KAAKswE,YAAYl6D,GACjBpW,KAAKuwE,eAAen6D,sGAKxB,IAAIo6D,EAAqD,OAAlChrD,EAAQrU,sBAC/B,GAAI6+D,EAAkB/jE,QAAUukE,EAAkB,CAChD,IAAIx8D,EAAY+7D,EAAsB/7D,UAClCy8D,EAAU9wE,EAAO0tC,YACnB0iC,EAAsB59D,aACtBnS,KAAK0wE,mBACH18D,EAAU+V,eACV/V,EAAUm3B,WACVn3B,EAAU8V,UAEZtc,EAAAmmD,mBAAmBoc,EAAsBpnD,kBACzChpB,EAAO4pC,MAAM,KAAMymC,IAErBD,EAAsBvlD,SAAS7qB,EAAQ8wE,GAClCD,GAAkB7wE,EAAOgxC,SAAS8/B,GAIjB,EAApBzwE,KAAKmvE,iBAAgDlP,EAAA0Q,oBAAoB3wE,MACrD,EAApBA,KAAKmvE,iBAAgDlP,EAAA2Q,oBAAoB5wE,MAC7EL,EAAOwtC,aAAa8yB,EAAAwE,eAAe2L,WACX,EAApBpwE,KAAKmvE,iBAAwClP,EAAA4Q,YAAY7wE,MAG7D,IAAIqrB,EAAerrB,KAAKqrB,aACxBA,EAAeylD,UAAUzlD,EAAc5W,EAAQI,UAAUo9C,UACzDjyD,KAAKqrB,aAAeA,EACpB1rB,EAAOwtC,aAAa8yB,EAAAwE,eAAe0L,WACX,EAApBnwE,KAAKmvE,kBACH16D,EAAQc,SACV5V,EAAOqtC,UACLizB,EAAAwE,eAAe0L,UACfve,EAAAriC,WAAWppB,KACX,EACAxG,EAAO0D,IAAI4sC,QAAQ5kB,GAAe6kB,SAAS7kB,KAG7C1rB,EAAOqtC,UACLizB,EAAAwE,eAAe0L,UACfve,EAAAriC,WAAWrpB,KACX,EACAvG,EAAOyD,IAAI6sC,QAAQ5kB,MAMzB,IAAI0lD,EAAiBt8D,EAAQW,WAAU,KAAqBX,EAAQy5D,aAAe,EACnFvuE,EAAO8vC,UACLzvC,KAAKyU,QAAQkB,YAAiC3V,KAAK8uE,eAAe7iE,OAC9DgkC,QAAQ+gC,UAAUF,UAAUzlD,EAAc,OAAU/V,QAAQ,GAAI,KAChE,EACJy7D,EAAiBt8D,EAAQy5D,aAAetc,EAAAvtB,OAAOwS,iBAC/C72C,KAAK8uE,eACLr6D,EAAQ2Y,OACR,SACA2jD,GAIEt8D,EAAQw5D,cAActuE,EAAOwvC,gBAAgB,IAAK,MAAO,SAAU4hC,GAGvE,IAAI/B,EAAgBhvE,KAAKgvE,cACzBrvE,EAAO6wC,iBAAiBw+B,EAAc/iE,OAAQ,WAAY+iE,GAC1DrvE,EAAO0tC,YAAY,OAAQrtC,KAAK0wE,mBAAmB,KAAMljE,EAAAmH,KAAKG,MAAO,KAAMnV,EAAO4pC,MAAM,KAAM,KAG1F90B,EAAQ05D,aAAaxuE,EAAOsvC,eAAe,IAAK,MAAO,aAG3D,IAAiB,IAAAtwB,EAAA7G,EAAA9X,KAAKwlB,QAAQpU,YAAYgM,UAAQwB,EAAAD,EAAA3G,QAAA4G,EAAA3G,KAAA2G,EAAAD,EAAA3G,OAAE,CAA/C,IAAI5B,KAAIwI,EAAAtd,OACFmK,OAAO6R,SAAStd,KAAKixE,oBAAoB76D,qGAEpD,OAAOzW,GAID+uE,EAAAzsE,UAAAgvE,oBAAR,SAA4B76D,WACtBsI,EAAUtI,EAAK1W,QACnB,GAAIgf,MAAS,IAA2B,IAAAwyD,EAAAp5D,EAAA4G,GAAOyyD,EAAAD,EAAAl5D,QAAAm5D,EAAAl5D,KAAAk5D,EAAAD,EAAAl5D,OAAA,CAAzB,IAAAyO,EAAAtO,EAAAg5D,EAAA7vE,MAAA,GAACV,EAAA6lB,EAAA,GAAMvI,EAAAuI,EAAA,GAAoBzmB,KAAKoxE,mBAAmBxwE,EAAMsd,qGAC/E,IAAI9F,EAAchC,EAAKgC,YACvB,GAAIA,EACF,IAAK,IAAI/X,EAAI,EAAG8V,EAAIiC,EAAYnM,OAAQ5L,EAAI8V,IAAK9V,EAAGL,KAAKixE,oBAAoB74D,EAAY/X,KAKrFquE,EAAAzsE,UAAAmvE,mBAAR,SAA2BxwE,EAAc+X,EAAkB04D,uBACzD,YADyD,IAAAA,MAAA,IACjD14D,EAAQnC,MAGd,KAAKm7C,EAAA/gD,YAAYgN,mBAEf,GADIiK,EAAgClP,EAASkP,cAE3C,IAAqB,IAAAlJ,EAAA7G,EAAA+P,EAAUzK,UAAQwB,EAAAD,EAAA3G,QAAA4G,EAAA3G,KAAA2G,EAAAD,EAAA3G,OAAE,CAApC,IAAIsQ,EAAQ1J,EAAAtd,MACXqsE,EAAe/sE,EACnB,GAAI0nB,EAASpJ,GAAG5R,EAAAjL,YAAY6S,SAE1By4D,IADI2D,EAAWhpD,EAASnW,cACC5F,UAAU+kE,EAASthB,YAAY,MAE1DhwD,KAAKoxE,mBAAmBzD,EAAcrlD,EAAU+oD,qGAGpD,MAEF,KAAK1f,EAAA/gD,YAAYuJ,gBACf,IAAI0N,EACJ,GADIA,EAA6BlP,EAASkP,cAExC,IAAqB,IAAA3P,EAAAJ,EAAA+P,EAAUzK,UAAQlE,EAAAhB,EAAAF,QAAAkB,EAAAjB,KAAAiB,EAAAhB,EAAAF,OAAE,CAApC,IAGGs5D,EAHChpD,EAAQpP,EAAA5X,MACXqsE,EAAe/sE,EACnB,GAAI0nB,EAASpJ,GAAG5R,EAAAjL,YAAY6S,SAE1By4D,IADI2D,EAAWhpD,EAASnW,cACC5F,UAAU+kE,EAASthB,YAAY,MAE1DhwD,KAAKoxE,mBAAmBzD,EAAcrlD,EAAU+oD,qGAGpD,MAEF,KAAK1f,EAAA/gD,YAAYuN,mBACf,IAAItd,EAA6B8X,EAASyF,gBACtCmzD,EAA6B54D,EAAS0F,gBACtCxd,GAAQb,KAAKoxE,mBAAmB9jE,EAAA9K,cAAgB5B,EAAMC,EAAQwwE,GAC9DE,GAAQvxE,KAAKoxE,mBAAmB9jE,EAAA7K,cAAgB7B,EAAM2wE,EAAQF,GAClE,MAIF,KAAK1f,EAAA/gD,YAAYiQ,OACDlI,EAAQuG,GAAG5R,EAAAjL,YAAYgd,QAAU1G,EAAQuG,GAAG5R,EAAAjL,YAAYyf,OAASxU,EAAAjL,YAAY2f,WAC1EhiB,KAAKyU,QAAQW,WAAU,GAMtCpV,KAAKL,OAAO4uC,gBAAgB51B,EAAQxG,aAAck/D,EAASzwE,GAL3DZ,KAAKmN,MACHI,EAAAhD,eAAeinE,+BACN74D,EAAS2C,eAAezQ,OAKrC,MAEF,KAAK8mD,EAAA/gD,YAAY2W,UACE5O,EAAS6O,aAAgBxnB,KAAKyU,QAAQW,WAAU,GAM/DpV,KAAKL,OAAO4uC,gBAAgB51B,EAAQxG,aAAck/D,EAASzwE,GAL3DZ,KAAKmN,MACHI,EAAAhD,eAAeinE,+BACH74D,EAAS2C,eAAezQ,OAKxC,MAEF,KAAK8mD,EAAA/gD,YAAY2N,SACf,IACIvK,GADAsU,EAAqB3P,GACA3E,UACrBA,EAAUigD,mBAAqBjgD,EAAU+V,eAAe9d,SAE1Dqc,EAAWtoB,KAAKyxE,iBAAiBnpD,GACjCtoB,KAAK0xE,iBAEHppD,EAASpJ,GAAG5R,EAAAjL,YAAYsvE,WAAW3xE,KAAKL,OAAOmuC,kBAAkBxlB,EAASnW,aAAck/D,EAASzwE,GACrG,MAEF,KAAK+wD,EAAA/gD,YAAY0N,UACXzd,EAAoB8X,EAAS6S,iBACrBxrB,KAAKoxE,mBAAmB9jE,EAAA9K,cAAgB5B,EAAMC,EAAQwwE,IAC9DE,EAAoB54D,EAAS8S,iBACrBzrB,KAAKoxE,mBAAmB9jE,EAAA7K,cAAgB7B,EAAM2wE,EAAQF,GAClE,MAEF,KAAK1f,EAAA/gD,YAAY4N,MACfxe,KAAK4xE,wBAAwBP,EAAS/jE,EAAA9K,cAAgB5B,EAAa+X,GAC9DA,EAAQuG,GAAG5R,EAAAjL,YAAY2f,WAC1BhiB,KAAK6xE,wBAAwBR,EAAS/jE,EAAA7K,cAAgB7B,EAAa+X,GAErE,MAEF,KAAKg5C,EAAA/gD,YAAY6N,MAEf,IAAa9F,EAASkG,KAAKizD,YAAa,CACtC,IAAInyE,EAASK,KAAKL,OACdwS,EAAuBwG,EAASxG,aACpCxS,EAAOqtC,UAAU76B,EAAcy/C,EAAAriC,WAAWrpB,KAAK,EAAOvG,EAAOyD,IAAYuV,EAAS9F,KAClFlT,EAAO4uC,gBAAgBp8B,EAAck/D,EAASzwE,GAEhD,MAIF,KAAK+wD,EAAA/gD,YAAYmW,KACjB,KAAK4qC,EAAA/gD,YAAYkW,UACjB,KAAK6qC,EAAA/gD,YAAYkU,KACjB,KAAK6sC,EAAA/gD,YAAY+V,eAAgB,MAEjC,QAASzc,QAAO,GAIlB,IAAIwU,EAAU/F,EAAQ+F,QACtB,GAAIA,EAAS,CACX,IAAIqzD,EAAYV,EAASzwE,GAAQ+X,EAAQnC,MAAQm7C,EAAA/gD,YAAY6N,MACzDnR,EAAA5K,mBACA4K,EAAA3K,kBAEJ,GACEgW,EAAQnC,MAAQm7C,EAAA/gD,YAAYkW,WAC5BnO,EAAQnC,MAAQm7C,EAAA/gD,YAAYkU,SAE5B,IAAmB,IAAAzL,EAAAvB,EAAA4G,EAAQtB,UAAQtB,EAAAzC,EAAArB,QAAA8D,EAAA7D,KAAA6D,EAAAzC,EAAArB,OAAE,EAA5BkG,EAAMpC,EAAAxa,OACD4d,GAAG5R,EAAAjL,YAAY4S,SAC3BjV,KAAKoxE,mBAAmBlzD,EAAOtd,KAAMsd,EAAQ6zD,8GAG/C,IAAmB,IAAA50D,EAAArF,EAAA4G,EAAQtB,UAAQC,EAAAF,EAAAnF,QAAAqF,EAAApF,KAAAoF,EAAAF,EAAAnF,OAAE,CAAhC,IAAIkG,KAAMb,EAAA/b,OACF4d,GAAG5R,EAAAjL,YAAYm0D,UAC1Bx2D,KAAKoxE,mBAAmBlzD,EAAOtd,KAAMsd,EAAQ6zD,wGAO7CrD,EAAAzsE,UAAA2vE,wBAAR,SAAgChxE,EAAc8sB,GAC5C,IAAI/tB,EAASK,KAAKL,OACdkf,EAAO6O,EAAM7O,KACbhK,EAAY7U,KAAKyU,QAAQI,UACzBm9D,EAAWryE,EAAOgoC,KAAK9oB,EAAKozC,SAAUpzC,EAAKK,GAAE,GAC/Cvf,EAAO0nC,UAAU,EAAGxyB,EAAU0+C,gBAC9B10C,EAAK00C,eAAgB7lC,EAAMrC,cAGzBxM,EAAKozD,YAAWD,EAAWhyE,KAAKkyE,WAAWF,IAC/CryE,EAAO0tC,YACLzsC,EACAZ,KAAK0wE,mBAAmB,KAAM7xD,EAAMhK,GACpC,KACAm9D,GAEFryE,EAAOmuC,kBAAkBltC,EAAMA,IAIzB8tE,EAAAzsE,UAAA4vE,wBAAR,SAAgCjxE,EAAc8sB,GAC5C,IAAI/tB,EAASK,KAAKL,OACdkf,EAAO6O,EAAM7O,KACbszD,EAAatzD,EAAK00C,eAClB1+C,EAAY7U,KAAKyU,QAAQI,UACzBu9D,EAAiBv9D,EAAU0+C,eAC3B8e,EAAY1yE,EAAO0nC,UAAU,EAAG8qC,GAChCtzD,EAAKozD,YACPI,EAAYryE,KAAKsyE,kBACf3yE,EAAOgoC,KAAK9oB,EAAKozC,UAAU,EACzBtyD,EAAO0nC,UAAU,EAAG+qC,GACpBD,EAAYzkD,EAAMrC,cAEpBgnD,IAGJ1yE,EAAO0tC,YACLzsC,EACAZ,KAAK0wE,mBAAmB,CAAE7xD,GAAQrR,EAAAmH,KAAKG,KAAMD,GAC7C,KACAlV,EAAO4mC,MACL1nB,EAAKozC,SACLtyD,EAAO0nC,UAAU,EAAG+qC,GACpBC,EACAF,EACAzkD,EAAMrC,eAGV1rB,EAAOmuC,kBAAkBltC,EAAMA,IAMjC8tE,EAAAzsE,UAAAswE,eAAA,SAAe55D,EAAkB65D,GAC/B,YAD+B,IAAAA,OAAA,GACvB75D,EAAQnC,MACd,KAAKm7C,EAAA/gD,YAAYiQ,OACf7gB,KAAKyyE,cAAsB95D,GAC3B,MAEF,KAAKg5C,EAAA/gD,YAAYmW,KACf/mB,KAAK0yE,YAAkB/5D,GACvB,MAEF,KAAKg5C,EAAA/gD,YAAYgN,mBACVjF,EAAQuG,GAAG5R,EAAAjL,YAAY6S,UAC1BlV,KAAK2yE,kCAAqDh6D,EAAS,IAErE,MAEF,KAAKg5C,EAAA/gD,YAAYuJ,gBACVxB,EAAQuG,GAAG5R,EAAAjL,YAAY6S,UAC1BlV,KAAK4yE,+BAA+Cj6D,EAAS,IAE/D,MAEF,KAAKg5C,EAAA/gD,YAAYuN,mBACf,IAAIC,EAAsCzF,EAASyF,gBAC/CA,GACFpe,KAAK2yE,kCAAkCv0D,EAAiB,IAE1D,IAAIC,EAAsC1F,EAAS0F,gBAC/CA,GACFre,KAAK2yE,kCAAkCt0D,EAAiB,IAE1D,MAEF,KAAKszC,EAAA/gD,YAAYkW,UACjB,KAAK6qC,EAAA/gD,YAAY+V,eACjB,KAAKgrC,EAAA/gD,YAAY2W,UAAW,MAC5B,QAASrd,QAAO,EAAOynD,EAAA/gD,YAAY+H,EAAQnC,OAEzCg8D,GAAgBxyE,KAAKwyE,eAAe75D,IAI1C+1D,EAAAzsE,UAAAuwE,eAAA,SAAe75D,WACT+F,EAAU/F,EAAQ+F,QACtB,GAAIA,MAAS,IAAoB,IAAA+H,EAAA3O,EAAA4G,EAAQtB,UAAQY,EAAAyI,EAAAzO,QAAAgG,EAAA/F,KAAA+F,EAAAyI,EAAAzO,OAAA,CAA/B,IAAI66D,EAAO70D,EAAA1c,MAAsBtB,KAAKuyE,eAAeM,uGAIzEnE,EAAAzsE,UAAAsuE,eAAA,SAAen6D,eACT1W,EAAU0W,EAAK1W,QACnB,GAAIA,MAAS,IAAoB,IAAAse,EAAAlG,EAAApY,EAAQ0d,UAAQa,EAAAD,EAAAhG,QAAAiG,EAAAhG,KAAAgG,EAAAD,EAAAhG,OAAA,CAA/B,IAAIW,EAAOsF,EAAA3c,MAAsBtB,KAAKuyE,eAAe55D,qGACvE,IAAIP,EAAchC,EAAKgC,YACvB,GAAIA,MACF,IAAuB,IAAA06D,EAAAh7D,EAAAM,GAAW26D,EAAAD,EAAA96D,QAAA+6D,EAAA96D,KAAA86D,EAAAD,EAAA96D,OAAE,CAA/B,IAAIK,EAAU06D,EAAAzxE,MACjBtB,KAAKswE,YAAYj4D,GACjBrY,KAAKuwE,eAAel4D,uGAQ1Bq2D,EAAAzsE,UAAA+wE,kBAAA,SAAkBC,EAAwC1N,GACxD,IAAInvD,EAEA88D,EADA9hE,EAAcpR,KAAKwlB,QAAQpU,YAE/B,GAAIA,EAAYmD,IAAI0+D,GAClB78D,EAAOhF,EAAYlQ,IAAI+xE,OAClB,KAAI7hE,EAAYmD,IAAI2+D,EAAgBD,EAAiC3lE,EAAAvK,cAO1E,YAJA/C,KAAKmN,MACHI,EAAAhD,eAAekO,iBACf8sD,EAAW16D,MAAOooE,GAJpB78D,EAAOhF,EAAYlQ,IAAIgyE,GAQzBlzE,KAAKswE,YAAYl6D,IAInBs4D,EAAAzsE,UAAAquE,YAAA,SAAYl6D,GACV,IAAIA,EAAK8I,GAAG5R,EAAAjL,YAAYsvE,UAAxB,CACAv7D,EAAKlE,IAAI5E,EAAAjL,YAAYsvE,UAGrB,IAAIzrD,EAAgB9P,EAAK8P,cACrBitD,EAAenzE,KAAKkwE,YACpBF,EAAoB,IAAIjpE,MAC5B/G,KAAKkwE,YAAcF,EAGnB,IAAIoD,EAAepzE,KAAKiwE,YACpB9lD,EAAOjE,EAAciE,KACzBnqB,KAAKiwE,YAAc9lD,EACnB,IAAK,IAAI9T,EAAaD,EAAK3K,OAAO4K,WAAYhW,EAAI,EAAG8V,EAAIE,EAAWpK,OAAQ5L,EAAI8V,IAAK9V,EACnFL,KAAKqzE,yBAAyBh9D,EAAWhW,GAAI2vE,GAO/C,GALAhwE,KAAKszE,mBAAmBnpD,EAAM6lD,GAC9BhwE,KAAKiwE,YAAcmD,EACnBpzE,KAAKkwE,YAAciD,EAGfnD,EAAkB/jE,OAAQ,CAC5B,IAAItM,EAASK,KAAKL,OACd4qB,EAASrE,EAAcwC,cACvB6qD,EAAYhpD,EAAOte,OACnBqhC,EAAW,IAAIvmC,MAAkBwsE,GACrC,IAASlzE,EAAI,EAAGA,EAAIkzE,IAAalzE,EAAGitC,EAASjtC,GAAKkqB,EAAOlqB,GAAGwe,KAAK00C,eACjE5zD,EAAO0tC,YACLnnB,EAAc/T,aACdnS,KAAK0wE,mBAAmBxqD,EAAclS,UAAU+V,eAAgB7D,EAAclS,UAAUm3B,YACxFmC,EACA0iC,EAAkB/jE,OAAS,EACvBtM,EAAO4pC,MAAM,KAAMymC,GACnBA,EAAkB,IAExBmD,EAAa3mE,KACX7M,EAAOa,KAAK0lB,EAAc/T,aAAc,KAAMy/C,EAAAriC,WAAWyY,UAO/D0mC,EAAAzsE,UAAAwwE,cAAA,SAActzD,GACZ,GAAIA,EAAOD,GAAG5R,EAAAjL,YAAYsvE,UAAW,OAAO,EAC5CxyD,EAAOjN,IAAI5E,EAAAjL,YAAYsvE,UAEvB,IAAIhyE,EAASK,KAAKL,OACd6zE,EAA0B,EAC1BC,GAA+B,EAC/B3S,EAAW3hD,EAAO2hD,SAClB4S,EAAkBv0D,EAAOu0D,gBAE7B,IAAKv0D,EAAOD,GAAG5R,EAAAjL,YAAY4jB,UAGzB,GAAI66C,EAAU,CACZ,IAAI6B,EAAe3iE,KAAKoS,SAASguD,YAAYU,EAAU3hD,EAAOlL,QAC9D,IAAK0uD,EAAc,OAAO,EAC1B,GAAIA,GAAgBn1D,EAAAmH,KAAKG,KAKvB,OAJA9U,KAAKmN,MACHI,EAAAhD,eAAeq2D,cACfE,EAASj2D,QAEJ,EAETsU,EAAOL,QAAQ6jD,OAGV,KAAI+Q,EAyBT,OAJA1zE,KAAKmN,MACHI,EAAAhD,eAAeq2D,cACfzhD,EAAO7D,eAAezQ,MAAMw7D,QAEvB,EAxBP,IAAI+M,EAAepzE,KAAKiwE,YASxB,GARI9wD,EAAOhE,aAAaw2C,EAAA9gD,eAAeqR,QACrCliB,KAAKiwE,YAAc9wD,EAAO/I,KAAK8P,cAAciE,MAE/CqpD,EAAWxzE,KAAK2zE,kBAAkBD,EAAiBlmE,EAAAmH,KAAKvR,IACtD,IAEEpD,KAAKovE,oBAAoB76D,IAAIi/D,KAAWC,GAAyB,GACrEzzE,KAAKiwE,YAAcmD,EACfpzE,KAAK6uE,aAAerhE,EAAAmH,KAAKG,KAK3B,OAJA9U,KAAKmN,MACHI,EAAAhD,eAAeqpE,mCACfF,EAAgB7oE,MAAO7K,KAAK6uE,YAAYrjE,WAAY,WAE/C,EAET2T,EAAOL,QAAQ9e,KAAK6uE,aAaxB,GAAI1vD,EAAOD,GAAG5R,EAAAjL,YAAYsiB,UAAYxF,EAAOhE,aAAaw2C,EAAA9gD,eAAesE,SAGvE,OAFIgK,EAAOhN,cAAgB8tD,EAAAwE,eAAe0L,UAAWnwE,KAAKmvE,iBAAe,EAChEhwD,EAAOhN,cAAgB8tD,EAAAwE,eAAe2L,YAAWpwE,KAAKmvE,iBAAe,IACvE,EAGT,IAAItwD,EAAOM,EAAON,KACdszD,EAAatzD,EAAK00C,eAClBsgB,EAAqB10D,EAAOD,GAAG5R,EAAAjL,YAAYgd,QAAUF,EAAOD,GAAG5R,EAAAjL,YAAYyf,OAASxU,EAAAjL,YAAY2f,UAChG8xD,EAAmB30D,EAAOhE,aAAaw2C,EAAA9gD,eAAeoR,QAG1D,GAAI9C,EAAOD,GAAG5R,EAAAjL,YAAYsiB,SAGxB,OAAIkvD,GAAsB7zE,KAAKyU,QAAQW,WAAU,IAC/C+J,EAAOjN,IAAI5E,EAAAjL,YAAY0xE,eACvBC,EAAiB70D,EAAQA,EAAO7K,aAChC3U,EAAO2vC,gBACLnwB,EAAOhN,aACPq8D,EACAC,EACA0D,GAEFhzD,EAAOjN,IAAI5E,EAAAjL,YAAYsvE,WAChB,IAIP3xE,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf9B,EAAO7K,YAAYzJ,QAGhB,GAKT,IAAIopE,GAAoB,EAGxB,GAAIP,EAAiB,CACnB,IAAKF,EAAU,CACTJ,EAAepzE,KAAKiwE,YACpB9wD,EAAOhE,aAAaw2C,EAAA9gD,eAAeqR,QACrCliB,KAAKiwE,YAAc9wD,EAAO/I,KAAK8P,cAAciE,MAE/CqpD,EAAWxzE,KAAK2zE,kBAAkBD,EAAiB70D,EACjD,IAEE7e,KAAKovE,oBAAoB76D,IAAIi/D,KAAWC,GAAyB,GACrEzzE,KAAKiwE,YAAcmD,EAarB,GAVIxhB,EAAA9a,gBAAgB08B,IAAa5hB,EAAApiC,aAAaolB,QACxCi/B,GACFL,EAAW7zE,EAAO4yC,qBAAqBihC,GACnC5hB,EAAA9a,gBAAgB08B,IAAa5hB,EAAApiC,aAAaolB,QAAOq/B,GAAoB,IAEzEA,GAAoB,GAKpBH,EACF,GAAIG,EACFj0E,KAAKiN,QACHM,EAAAhD,eAAe2pE,gCACfR,EAAgB7oE,WAEb,CAGL,OAFAX,OAAO0nD,EAAA9a,gBAAgB08B,IAAa5hB,EAAApiC,aAAaolB,OAClCgd,EAAA7a,kBAAkBy8B,IAE/B,KAAK5hB,EAAAriC,WAAWrpB,IACdiZ,EAAO+H,kBAAiB,EACxB/H,EAAOiI,qBAAuB9R,QAAQs8C,EAAA5a,iBAAiBw8B,GAAW,GAClE,MAEF,KAAK5hB,EAAAriC,WAAWppB,IACdgZ,EAAO+H,kBAAiB,EACxB/H,EAAOiI,qBAAuB9R,QAC5Bs8C,EAAA3a,oBAAoBu8B,GACpB5hB,EAAA1a,qBAAqBs8B,IAEvB,MAEF,KAAK5hB,EAAAriC,WAAW5oB,IACdwY,EAAO+H,kBAAiB,EACxB/H,EAAOmI,mBAAqBsqC,EAAAza,iBAAiBq8B,GAC7C,MAEF,KAAK5hB,EAAAriC,WAAW3oB,IACduY,EAAO+H,kBAAiB,EACxB/H,EAAOmI,mBAAqBsqC,EAAAxa,iBAAiBo8B,GAC7C,MAEF,QAEE,OADAtpE,QAAO,IACA,EAGXiV,EAAOjN,IAAI5E,EAAAjL,YAAYglB,eAM3BmsD,EAAW30D,EAAK20C,aAAa7zD,GAG/B,IAAIwS,EAAegN,EAAOhN,aAiB1B,OAfI8hE,GACEH,GACF9zE,KAAKmN,MACHI,EAAAhD,eAAemW,8BACfxW,OAAOuD,EAAAwX,cAAcxX,EAAAe,cAAcyT,OAAQ9C,EAAOg1D,iBAAiBtpE,MAAO,UAG9ElL,EAAOqtC,UAAU76B,EAAcggE,GAAY,EAAMtzD,EAAK20C,aAAa7zD,IAC/Dkf,EAAKozD,YAAcwB,IAAwBD,EAAWxzE,KAAKkyE,WAAWsB,IAC1ExzE,KAAKkwE,YAAY1jE,KACf7M,EAAO0pC,WAAWl3B,EAAcqhE,KAExBM,GACVn0E,EAAOqtC,UAAU76B,EAAcggE,GAAa0B,EAAoBL,IAE3D,GAKT9E,EAAAzsE,UAAAywE,YAAA,SAAY/5D,WACV,GAAIA,EAAQuG,GAAG5R,EAAAjL,YAAYsvE,UAAW,OAAO,EAC7Ch5D,EAAQzG,IAAI5E,EAAAjL,YAAYsvE,UAExB,IAAIhyE,EAASK,KAAKL,OAClBK,KAAK4uE,YAAcj2D,EACnB,IAAIy7D,EAAkC,KAClCC,GAAqB,EACrBC,EAAW37D,EAAQuG,GAAG5R,EAAAjL,YAAYgd,QAAU1G,EAAQwC,aAAaw2C,EAAA9gD,eAAeoR,QAEpF,GAAItJ,EAAQ+F,YACV,IAAmB,IAAA+H,EAAA3O,EAAAa,EAAQ+F,QAAQtB,UAAQY,EAAAyI,EAAAzO,QAAAgG,EAAA/F,KAAA+F,EAAAyI,EAAAzO,OAAE,CAAxC,IAAIkG,EAAMF,EAAA1c,MACb,GAAI4c,EAAO1H,MAAQm7C,EAAA/gD,YAAY2W,UAA/B,CACA,IAAIgtD,GAAc,EACdh3B,EAAiBr/B,EACjBs2D,EAAYj3B,EAAIi3B,UACpBj3B,EAAIrrC,IAAI5E,EAAAjL,YAAYsvE,UACpB,IAAIyB,EAAepzE,KAAKiwE,YACpBt3D,EAAQwC,aAAaw2C,EAAA9gD,eAAeqR,QACtCliB,KAAKiwE,YAAct3D,EAAQvC,KAAK8P,cAAciE,MAEhD,IAAIqpD,OAAQ,EACRgB,GACFhB,EAAWxzE,KAAK2zE,kBAAkBa,EAAWhnE,EAAAmH,KAAKvR,IAAG,GAGjDwuD,EAAA9a,gBAAgB08B,IAAa5hB,EAAApiC,aAAaolB,QAC5C4+B,EAAW7zE,EAAO4yC,qBAAqBihC,GACnC5hB,EAAA9a,gBAAgB08B,IAAa5hB,EAAApiC,aAAaolB,QACxCj8B,EAAQuG,GAAG5R,EAAAjL,YAAYgd,QACzBrf,KAAKmN,MACHI,EAAAhD,eAAekqE,0EACfD,EAAU3pE,OAGd0pE,GAAc,KAGQ,MAAjBH,EACTZ,EAAW7zE,EAAOyD,IAAI,IAElBixE,GACFr0E,KAAKmN,MACHI,EAAAhD,eAAemqE,kCACHx2D,EAAQ5C,eAAezQ,MAAMw7D,OAG7CmN,EAAW7zE,EAAOknC,OAAO+qB,EAAAz5B,SAASw8C,OAChCh1E,EAAO8nC,WAAW2sC,EAAcjiE,aAAcy/C,EAAAriC,WAAWrpB,KACzDvG,EAAOyD,IAAI,IAEbowE,EAAW7zE,EAAO4yC,qBAAqBihC,GACnC5hB,EAAA9a,gBAAgB08B,IAAa5hB,EAAApiC,aAAaolB,QACxCj8B,EAAQuG,GAAG5R,EAAAjL,YAAYgd,QACzBrf,KAAKmN,MACHI,EAAAhD,eAAekqE,0EACfv2D,EAAO5J,YAAYzJ,OAGvB0pE,GAAc,IAGlBv0E,KAAKiwE,YAAcmD,EACfmB,GACF50E,EAAOqtC,UAAUuQ,EAAIprC,aAAcy/C,EAAAriC,WAAWrpB,KAAK,EAAMvG,EAAOyD,IAAI,IACpEpD,KAAKkwE,YAAY1jE,KACfxM,KAAK40E,qBAAqBr3B,EAAKi2B,GAAU,IAE3Ca,GAAqB,IAEjBC,GACF/2B,EAAIj+B,wBAAwBhK,QAAQs8C,EAAA5a,iBAAiBw8B,IAAYhmE,EAAAmH,KAAKvR,KAClEm6C,EAAIr+B,GAAG5R,EAAAjL,YAAYyb,gBACrBne,EAAOqtC,UAAUuQ,EAAIprC,aAAcy/C,EAAAriC,WAAWrpB,KAAK,EAAOstE,IAG5D7zE,EAAOqtC,UAAUuQ,EAAIprC,aAAcy/C,EAAAriC,WAAWrpB,KAAK,EAAOstE,GAE5Dj2B,EAAI/1B,aAAc,EAClB6sD,GAAqB,GAEvBD,EAA2B72B,qGAI/B,OADAv9C,KAAK4uE,YAAc,MACZ,GAMTF,EAAAzsE,UAAA0wE,kCAAA,SACE1wE,EACA+pB,EACAxD,EACAo5C,GAEA,QAHA,IAAAp5C,MAA4C7e,EAAAy3D,gBAC5C,IAAAQ,MAAA,MAEI3/D,EAAUkZ,aAAaw2C,EAAA9gD,eAAesE,SAAU,OAAO,KAC3D,IAAImT,EAAWtoB,KAAKoS,SAASsyD,iCAC3BziE,EACA+pB,EACA/pB,EAAUgS,OACVuU,EACAo5C,GAAyB3/D,EAAUqS,aAErC,OAAKgU,GACAtoB,KAAK60E,gBAAgBvsD,GACnBA,EAFe,MAMxBomD,EAAAzsE,UAAAyuE,mBAAA,SACE3mD,EACAohB,EACArhB,QAAA,IAAAA,MAAA,MAEA,IACIub,EADAovB,EAAgB1qC,EAAiBA,EAAe9d,OAAS,EAEzD0b,EAAQ,EAQZ,GAPImC,IACFub,EAAa,IAAIt+B,MAAM,EAAI0tD,IAChB,GAAK3qC,EAASypC,eACzB5rC,EAAQ,GAER0d,EAAa,IAAIt+B,MAAM0tD,GAErB1qC,EACF,IAAK,IAAI1pB,EAAI,EAAGA,EAAIo0D,IAAiBp0D,IAAKsnB,EACxC0d,EAAW1d,GAASoC,EAAe1pB,GAAGkzD,eAG1C,IAAIuhB,EAAa3pC,EAAWooB,eACxB5zD,EAASK,KAAKL,OACdiuC,EAAUjuC,EAAO+lC,2BAA2BovC,EAAYzvC,GAC5D,IAAKuI,EAAS,CACZ,IAAIhtC,EAAO4M,EAAA2Y,UAAU2uC,oBAAoB/qC,EAAgBohB,EAAYrhB,GACrE8jB,EAAUjuC,EAAOwlC,gBAAgBvkC,EAAMk0E,EAAYzvC,GAErD,OAAOuI,GAIT8gC,EAAAzsE,UAAA8yE,oBAAA,SAEEzsD,EAEA0sD,QAAA,IAAAA,MAAA,MAEA,IAAIr1E,EAASK,KAAKL,OACds1E,EAAW/qE,OAAOoe,EAASrmB,UAAUgzE,UACrC9pC,EAAa7iB,EAAStU,UAAUm3B,WAChChhB,EAAOnqB,KAAKiwE,YAGhB,GAAIgF,EAASz+D,MAAQ/I,EAAAgJ,SAAS45C,MAC5B2kB,EAAQh1E,KAAKk1E,kBAAmCD,EAAU5+D,YAAY,EAAM2+D,OACvE,CAEL9qE,OAAO+qE,EAASz+D,MAAQ/I,EAAAgJ,SAASm6C,YAGjC1mD,OAAOoe,EAASrmB,UAAU+lB,WAG1B9d,QAAQoe,EAAS9G,MAAMlU,EAAAjL,YAAYmgB,YAAclV,EAAAjL,YAAYof,IAAMnU,EAAAjL,YAAYqf,IAAMpU,EAAAjL,YAAY8yE,OAEjG,IAAIxuC,EAAO3mC,KAAK2zE,kBAAwCsB,EAAUlrC,WAAYoB,EAAU,GAKxF,GAFK6pC,EACAA,EAAMxoE,KAAKm6B,GADJquC,EAAQ,CAAEruC,IAEjBxc,EAAK3I,MAAK,IAA6B,CAC1C,IAAI4zD,EAAcJ,EAAM/oE,OACxBjM,KAAKq1E,oBAAoBlrD,EAAM6qD,GAC/Bh1E,KAAKszE,mBAAmBnpD,EAAM6qD,GAC9B,IAAInK,EAAc1gD,EAAK0gD,YAAYlkC,EAAMwE,GACrCmqC,EAAUnrD,EAAKigD,UAAUzjC,EAAMwE,GACnC,GAAI6pC,EAAM/oE,OAASmpE,EAAa,CAC9B,IAAIG,EAAOprD,EAAKo+C,oBAAoBp9B,GAC/B0/B,GAAa1gD,EAAKi+C,aAAamN,EAAK5tD,MAAOha,EAAAk5D,WAAWiE,SACvDwK,GAASnrD,EAAKi+C,aAAamN,EAAK5tD,MAAOha,EAAAk5D,WAAW7C,SACtDgR,EAAMI,EAAc,GAAKz1E,EAAOwpC,UAAUosC,EAAK5tD,MAAOgf,GACtDquC,EAAMxoE,KAAK7M,EAAO0nC,UAAUkuC,EAAK5tD,MAAOwjB,EAAWooB,iBAEhDsX,GAAa1gD,EAAKjY,IAAG,GACtBojE,GAASnrD,EAAKjY,IAAG,GACrBiY,EAAKjY,IAAG,IAsBZ,GAjBIoW,EAASrmB,WAAajC,KAAKwlB,QAAQrU,wBACrCxR,EAAOqtC,UAAUizB,EAAAwE,eAAe+Q,QAAS5jB,EAAAriC,WAAWrpB,KAAK,EAAMvG,EAAOyD,IAAI,IAC1E4xE,EAAMS,QACJ91E,EAAOwqC,GACLxqC,EAAO8mC,MACLmrB,EAAA/+B,QAAQy3C,OACR3qE,EAAO8nC,WAAWw4B,EAAAwE,eAAe+Q,QAAS5jB,EAAAriC,WAAWrpB,MAEvDvG,EAAO4pC,MAAM,KAAM,CACjB5pC,EAAOa,KAAK,QAAS,KAAMoxD,EAAAriC,WAAWyY,MACtCroC,EAAO0pC,WAAW42B,EAAAwE,eAAe+Q,QAAS71E,EAAOyD,IAAI,SAOzDklB,EAASpJ,GAAG5R,EAAAjL,YAAYmgB,aAAc,CACxC,IAAI4vD,EAAiBpyE,KAAKyU,QAAQ29D,eAClCloE,OAAOoe,EAASpJ,GAAG5R,EAAAjL,YAAYwiB,WAC/B,IAAInS,EAAgBxI,OAAOoe,EAASrU,QAEpC,GAF6C/J,OAAOwI,EAAc8D,MAAQm7C,EAAA/gD,YAAY6N,QAEjF0L,EAAK3I,MAAK,IAA6B,CAC1C,IAAI2iD,EAAYj6D,OAAOigB,EAAKi6C,YAAY92D,EAAAtK,cAAckC,QAGjDilB,EAAKjL,GAAE,MAMV81D,EAAMxoE,KACJ7M,EAAOwqC,GACLxqC,EAAO8mC,MAAM2rC,GAAkBxgB,EAAAriC,WAAWppB,IAAMyrD,EAAA/+B,QAAQ03C,OAAS3Y,EAAA/+B,QAAQy3C,OACvE3qE,EAAO0nC,UAAU88B,EAAUx8C,MAAOyqD,IAEpCzyE,EAAOwpC,UAAUg7B,EAAUx8C,MACzB3nB,KAAKkyE,WACHlyE,KAAK01E,eAAsBhjE,OAKnC1S,KAAK21E,wBAA+BjjE,EAAesiE,IAErDh1E,KAAKq1E,oBAAoBlrD,EAAM6qD,GAC/Bh1E,KAAKszE,mBAAmBnpD,EAAM6qD,GAC9BA,EAAMxoE,KAAK7M,EAAO0nC,UAAU88B,EAAUx8C,MAAO3nB,KAAKyU,QAAQ29D,iBAC1DjoD,EAAKjY,IAAI,GAICQ,EAAeuZ,OAAS9B,EAAKjL,GAAE,MACzClf,KAAKmN,MACHI,EAAAhD,eAAeqrE,2DACfttD,EAASrmB,UAAUqS,YAAYzJ,YAK1BsgC,GAAc39B,EAAAmH,KAAKG,MAASqV,EAAKjL,GAAE,IAC5Clf,KAAKmN,MACHI,EAAAhD,eAAesrE,+DACfvtD,EAASrmB,UAAUkjE,cAAch6B,WAAWtgC,OAIhD,OAAOmqE,GAITtG,EAAAzsE,UAAA4yE,gBAAA,SAAgBvsD,GACd,GAAIA,EAASpJ,GAAG5R,EAAAjL,YAAYsvE,UAAW,OAAO,EAC9CznE,SAASoe,EAASpJ,GAAG5R,EAAAjL,YAAYsiB,UAAY2D,EAASnN,aAAaw2C,EAAA9gD,eAAesE,WAElF,IAAI2gE,EAAe91E,KAAK6uE,YACxBvmD,EAASpW,IAAI5E,EAAAjL,YAAYsvE,UAEzB,IAKIlB,EALA9wE,EAASK,KAAKL,OACdqU,EAAYsU,EAAStU,UACrBihE,EAAW3sD,EAASrmB,UAAUgzE,SAE9BrnC,EAAU5tC,KAAK0wE,mBAAmB18D,EAAU+V,eAAgB/V,EAAUm3B,WAAYn3B,EAAU8V,UAIhG,GAAImrD,EAAU,CAWZ,GARI3sD,EAASpJ,GAAG5R,EAAAjL,YAAYsiB,UAC1B3kB,KAAKmN,MACHI,EAAAhD,eAAewrE,yDACfztD,EAAShN,eAAezQ,OAKxByd,EAASnN,aAAaw2C,EAAA9gD,eAAe+T,UAAW,CAClD,IAAIuvD,EAAiB7rD,EAAS6rD,eAC1B9zD,EAAYnW,OAAOuD,EAAAwX,cAAcxX,EAAAe,cAAcoW,SAAUuvD,IAC7Dn0E,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACfZ,EAAUxV,OAKd,IAAIuoE,EAAepzE,KAAKiwE,YACpB9lD,EAAO7B,EAAS6B,KACpBnqB,KAAKiwE,YAAc9lD,EACnB,IAAI6qD,EAAQ,IAAIjuE,MAGZ4gB,EAAQ,EACG3T,EAAU8V,YAGrBnC,EAGJ,IADA,IAAIoC,EAAiB/V,EAAU+V,eACtB1pB,EAAI,EAAG8V,EAAI4T,EAAe9d,OAAQ5L,EAAI8V,IAAK9V,IAAKsnB,EAAO,CAC9D,IAAI9I,EAAOkL,EAAe1pB,GACtBwe,EAAKozD,YACP+C,EAAMxoE,KACJ7M,EAAOmqC,KACL9pC,KAAKkyE,WACHvyE,EAAO0nC,UAAU1f,EAAO9I,EAAK00C,mBAInCppC,EAAKi+C,aAAazgD,EAAOha,EAAAk5D,WAAWwB,WAIxCroE,KAAK+0E,oBAAoBzsD,EAAU0sD,GAC9B7qD,EAAK3I,MAAK,MACbxhB,KAAKq1E,oBAAoBlrD,EAAM6qD,GAC/Bh1E,KAAKszE,mBAAmBnpD,EAAM6qD,IAEhCh1E,KAAKiwE,YAAcmD,EAGnB3C,EAAU9wE,EAAO0tC,YACf/kB,EAASnW,aACTy7B,EACApgC,EAAAmmD,mBAAmBrrC,EAASK,kBAC5BqtD,EAAQr2E,EAAQq1E,EAAO1sD,EAAStU,UAAUm3B,WAAWooB,sBAKlDjrC,EAASpJ,GAAG5R,EAAAjL,YAAYsiB,UAC3B3kB,KAAKmN,MACHI,EAAAhD,eAAe0rE,gFACf3tD,EAAShN,eAAezQ,OAI5Byd,EAASpW,IAAI5E,EAAAjL,YAAY0xE,eACzBC,EAAiB1rD,EAAUA,EAAShU,aAGpCm8D,EAAU9wE,EAAOgvC,kBACfrmB,EAASnW,aACTq8D,EACAC,EACA7gC,GAMJ,OAFAtlB,EAASkC,SAAS7qB,EAAQ8wE,GAC1BzwE,KAAK6uE,YAAciH,GACZ,GAKTpH,EAAAzsE,UAAA2wE,+BAAA,SACE3wE,EACA+pB,EACAxD,EACAo5C,QADA,IAAAp5C,MAA4C7e,EAAAy3D,gBAC5C,IAAAQ,MAAA,MAEA,IAAIt5C,EAAWtoB,KAAKoS,SAAS+uD,8BAC3Bl/D,EACA+pB,EACA/pB,EAAUgS,OACVuU,EACAo5C,GAAyB3/D,EAAUqS,aAEhCgU,GACLtoB,KAAKk2E,aAAa5tD,IAGpBomD,EAAAzsE,UAAAi0E,aAAA,SAAa5tD,eACX,GAAIA,EAASpJ,GAAG5R,EAAAjL,YAAYsvE,UAAW,OAAO,EAC9CrpD,EAASpW,IAAI5E,EAAAjL,YAAYsvE,UACzB,IACIwE,EADY7tD,EAASrmB,UACuByc,QAChD,GAAIy3D,MACF,IAAoB,IAAAn4D,EAAAlG,EAAAq+D,EAAc/4D,UAAQa,EAAAD,EAAAhG,QAAAiG,EAAAhG,KAAAgG,EAAAD,EAAAhG,OAAE,CAC1C,QADOW,EAAOsF,EAAA3c,OACEkV,MACd,KAAKm7C,EAAA/gD,YAAYiQ,OACf7gB,KAAKyyE,cAAsB95D,GAC3B,MAEF,KAAKg5C,EAAA/gD,YAAYgN,mBAEQjF,EAASuG,GAAG5R,EAAAjL,YAAY6S,UAE7ClV,KAAK2yE,kCACgBh6D,EACnB,GACAhP,EAAAy3D,UACoBzoD,EAAS2C,gBAGjC,MAEF,KAAKq2C,EAAA/gD,YAAYuN,oBACXtd,EAA6B8X,EAASyF,kBAExCpe,KAAK2yE,kCACH9xE,EACA,GACA8I,EAAAy3D,UACAvgE,EAAOya,iBAGPi2D,EAA6B54D,EAAS0F,kBAExCre,KAAK2yE,kCACHpB,EACA,GACA5nE,EAAAy3D,UACAmQ,EAAOj2D,gBAGX,MAEF,KAAKq2C,EAAA/gD,YAAY0N,6GAKvB,IAAIooD,EAAep+C,EAAS8D,oBACxBs6C,GAAc1mE,KAAK60E,gBAAgBnO,GACvC,IAAI3oD,EAAkBuK,EAAS5J,QAC/B,GAAIX,MACF,IAAoB,IAAAY,EAAA7G,EAAAiG,EAAgBX,UAAQwB,EAAAD,EAAA3G,QAAA4G,EAAA3G,KAAA2G,EAAAD,EAAA3G,OAAE,CAAzC,IAAIW,EACP,QADOA,EAAOiG,EAAAtd,OACEkV,MACd,KAAKm7C,EAAA/gD,YAAYgN,mBAEQjF,EAASuG,GAAG5R,EAAAjL,YAAY6S,UAE7ClV,KAAK2yE,kCACgBh6D,EACnB,GACAhP,EAAAy3D,QAAqB94C,EAASE,yBACV7P,EAASrE,YAAY1T,MAG7C,MAEF,KAAK+wD,EAAA/gD,YAAYsa,gBACfvS,EAAQzG,IAAI5E,EAAAjL,YAAYsvE,UACxB,MAEF,KAAKhgB,EAAA/gD,YAAY0N,SACf,IAAIzd,EAEA0wE,GAFA1wE,EAAoB8X,EAAS6S,iBACrBxrB,KAAK60E,gBAAgBh0E,IAC7B0wE,EAAoB54D,EAAS8S,iBACrBzrB,KAAK60E,gBAAgBtD,sGAMzC,OAAO,GAGT7C,EAAAzsE,UAAAm0E,4BAAA,SACE9hE,EACA0X,EACAxD,EACAo5C,QADA,IAAAp5C,MAAA,WACA,IAAAo5C,MAAA,MAGA5hE,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf3M,EAAYzJ,QAOhB6jE,EAAAzsE,UAAAo0E,iBAAA,SAAiB7jE,EAAoB8jE,QAAA,IAAAA,MAAA,GACnC,IAAIjrD,EAAeylD,UAAU9wE,KAAKqrB,aAAcirD,GAC5ClyC,EAAUwtB,EAAAztB,cAAcxiC,OAAO6Q,EAAQ6Y,GAG3C,OAFArrB,KAAK8uE,eAAetiE,KAAK43B,GACzBpkC,KAAKqrB,aAAekzC,QAAQlzC,EAAc/V,QAAQ9C,EAAOvG,OAAQ,IAC1Dm4B,GAITsqC,EAAAzsE,UAAAs0E,mBAAA,SAAmBC,GACjB,IAGIC,EAHAjxD,EAAUxlB,KAAKwlB,QACfkxD,EAAelxD,EAAQmxD,kBACvB58D,EAAiB7P,OAAOsb,EAAQzL,gBAEhC61B,EAAW5vC,KAAK+uE,eACpB,GAAIn/B,EAASr7B,IAAIiiE,GACfC,EAAgB7mC,EAAS1uC,IAAIs1E,OACxB,CACL,IAAIvqE,EAASuqE,EAAYvqE,OACrBuG,EAAS,IAAI7K,WAAW+uE,GAAgBzqE,GAAU,IACtDuZ,EAAQjT,mBAAmBC,EAAQ,EAAGuH,EAAgB9N,GAAU,GAChE,IAAK,IAAI5L,EAAI,EAAGA,EAAI4L,IAAU5L,EAC5BsJ,EAAAmkB,SAAS0oD,EAAYnqE,WAAWhM,GAAImS,EAAQkkE,GAAgBr2E,GAAK,IAEnEo2E,EAAgBz2E,KAAKq2E,iBAAiB7jE,GACtCo9B,EAAS19B,IAAIskE,EAAaC,GAE5B,IAAI5tD,EAAM01C,QAAQkY,EAAchkE,OAAQ6C,QAAQohE,IAEhD,OADA12E,KAAK6uE,YAAc90D,EAAe8E,KAC9B7e,KAAKyU,QAAQc,SACRvV,KAAKL,OAAO0D,IAAI4sC,QAAQpnB,GAAMqnB,SAASrnB,KAE9C3e,OAAOm5D,WAAWx6C,IACX7oB,KAAKL,OAAOyD,IAAI6sC,QAAQpnB,MAInC6lD,EAAAzsE,UAAA20E,wBAAA,SAAwBC,EAAmBz5D,GACzC,IAAIoI,EAAUxlB,KAAKwlB,QACfvZ,EAASmR,EAAOnR,OAChBgmD,EAAW4kB,EAAY5kB,SACvB6kB,EAAa7qE,EAASgmD,EACtB8kB,EAAiB7sE,OAAOsb,EAAQ3L,qBAChC88D,EAAoBnxD,EAAQmxD,kBAE5BK,EAAM,IAAIrvE,WAAWgvE,EAAoBG,GAC7CtxD,EAAQjT,mBAAmBykE,EAAK,EAAGD,EAAgBD,GACnD,IAAI/mB,EAAM4mB,EACNxE,EAAa0E,EAAYtjB,eAC7B,OAAQ4e,GACN,KAAKvgB,EAAAriC,WAAWrpB,IACd,OAAQ+rD,GACN,KAAK,EACH,IAAK,IAAI5xD,EAAI,EAAGA,EAAI4L,IAAU5L,EAAG,CAC/B,IAAIiB,EAAQ8b,EAAO/c,GACnB6J,OAAO0nD,EAAA7a,kBAAkBz1C,IAAU6wE,GACnCjoE,OAAO0nD,EAAA9a,gBAAgBx1C,IAAUswD,EAAApiC,aAAaolB,OAC9CjrC,EAAAkkB,QAAQ+jC,EAAA5a,iBAAiB11C,GAAQ01E,EAAKjnB,GACtCA,GAAO,EAET,MAEF,KAAK,EACH,IAAS1vD,EAAI,EAAGA,EAAI4L,IAAU5L,EAAG,CAC3BiB,EAAQ8b,EAAO/c,GACnB6J,OAAO0nD,EAAA7a,kBAAkBz1C,IAAU6wE,GACnCjoE,OAAO0nD,EAAA9a,gBAAgBx1C,IAAUswD,EAAApiC,aAAaolB,OAC9CjrC,EAAAmkB,SAAS8jC,EAAA5a,iBAAiB11C,GAAQ01E,EAAKjnB,GACvCA,GAAO,EAET,MAEF,KAAK,EACH,IAAS1vD,EAAI,EAAGA,EAAI4L,IAAU5L,EAAG,CAC3BiB,EAAQ8b,EAAO/c,GACnB6J,OAAO0nD,EAAA7a,kBAAkBz1C,IAAU6wE,GACnCjoE,OAAO0nD,EAAA9a,gBAAgBx1C,IAAUswD,EAAApiC,aAAaolB,OAC9CjrC,EAAAiJ,SAASg/C,EAAA5a,iBAAiB11C,GAAQ01E,EAAKjnB,GACvCA,GAAO,EAET,MAEF,QAAS7lD,QAAO,GAElB,MAEF,KAAK0nD,EAAAriC,WAAWppB,IACd,IAAS9F,EAAI,EAAGA,EAAI4L,IAAU5L,EAAG,CAC3BiB,EAAQ8b,EAAO/c,GACnB6J,OAAO0nD,EAAA7a,kBAAkBz1C,IAAU6wE,GACnCjoE,OAAO0nD,EAAA9a,gBAAgBx1C,IAAUswD,EAAApiC,aAAaolB,OAC9CjrC,EAAAstE,SAAS3hE,QAAQs8C,EAAA3a,oBAAoB31C,GAAQswD,EAAA1a,qBAAqB51C,IAAS01E,EAAKjnB,GAChFA,GAAO,EAET,MAEF,KAAK6B,EAAAriC,WAAW5oB,IACd,IAAStG,EAAI,EAAGA,EAAI4L,IAAU5L,EAAG,CAC3BiB,EAAQ8b,EAAO/c,GACnB6J,OAAO0nD,EAAA7a,kBAAkBz1C,IAAU6wE,GACnCjoE,OAAO0nD,EAAA9a,gBAAgBx1C,IAAUswD,EAAApiC,aAAaolB,OAC9CjrC,EAAAokB,SAAS6jC,EAAAza,iBAAiB71C,GAAQ01E,EAAKjnB,GACvCA,GAAO,EAET,MAEF,KAAK6B,EAAAriC,WAAW3oB,IACd,IAASvG,EAAI,EAAGA,EAAI4L,IAAU5L,EAAG,CAC3BiB,EAAQ8b,EAAO/c,GACnB6J,OAAO0nD,EAAA7a,kBAAkBz1C,IAAU6wE,GACnCjoE,OAAO0nD,EAAA9a,gBAAgBx1C,IAAUswD,EAAApiC,aAAaolB,OAC9CjrC,EAAAqkB,SAAS4jC,EAAAxa,iBAAiB91C,GAAQ01E,EAAKjnB,GACvCA,GAAO,EAET,MAEF,QAAS7lD,QAAO,GAIlB,OAFAA,OAAO6lD,GAAOinB,EAAI/qE,QAEXjM,KAAKq2E,iBAAiBW,IAG/BtI,EAAAzsE,UAAAi1E,wBAAA,SAAwBL,EAAmBM,GACzC,IAAI3xD,EAAUxlB,KAAKwlB,QACfmxD,EAAoBnxD,EAAQmxD,kBAC5Bx6D,EAAiBjS,OAAOsb,EAAQrJ,gBAChCi7D,EAAgBltE,OAAOlK,KAAKoS,SAASuL,aAAaxB,EAAgB,CAAE06D,KACpEQ,EAAoBD,EAAcjrD,oBAClCmrD,EAAeH,EAAc3kE,OAAOvG,OAAS0qE,EAC7CY,EAAcn0E,IAAIk0E,EAAeT,EAAY5kB,UAE7C+kB,EAAM,IAAIrvE,WAAWgvE,EAAoBU,GAC7C7xD,EAAQjT,mBAAmBykE,EAAK,EAAGI,EAAeC,GAElD,IAAIG,EAAkBvnC,QAAQknC,EAAc1kE,QAAUkkE,EAOtD,OANAzsE,QAAQsb,EAAQ/Q,QAAQc,UACxBrL,OAAOktE,EAAczpD,WAAW,OAAQ6pD,EAAiBR,EAAKL,IAC9DzsE,OAAOktE,EAAczpD,WAAW,YAAa6pD,EAAiBR,EAAKL,IACnEzsE,OAAOktE,EAAczpD,WAAW,aAAc2pD,EAAcN,EAAKL,IACjEzsE,OAAOktE,EAAczpD,WAAW,UAAW4pD,EAAaP,EAAKL,IAEtD32E,KAAKq2E,iBAAiBW,IAM/BtI,EAAAzsE,UAAAw1E,yBAAA,SAAyB7mC,GAEvB,GADA1mC,OAAO0mC,EAAK1xB,GAAG5R,EAAAjL,YAAYsvE,WACvB/gC,EAAK9nB,oBAAsB,EAC7B,OAAO8nB,EAAK9nB,mBAEd,IAAIkmD,EAAgBhvE,KAAKgvE,cACrBrnD,EAAQqnD,EAAc/iE,OAO1B,OANK2kC,EAAK1xB,GAAG5R,EAAAjL,YAAYq1E,aAAe9mC,EAAK58B,UAAUigD,mBAAqBrjB,EAAK58B,UAAU+V,eAAe9d,SAExG2kC,EAAO5wC,KAAKyxE,iBAAiB7gC,IAE/Bo+B,EAAcxiE,KAAKokC,EAAKz+B,cACxBy+B,EAAK9nB,mBAAqBnB,EACnBA,GAKT+mD,EAAAzsE,UAAAoxE,yBAAA,SAAyB98D,EAAsBwR,GAI7C,OAHIxR,EAAUC,MAAQ/I,EAAAgJ,SAASE,gBAC7BJ,EAAqCA,EAAWjC,aAE1CiC,EAAUC,MAChB,KAAK/I,EAAAgJ,SAASQ,iBAEZ,IADA,IACS5W,EAAI,EAAG8V,GADZwhE,EAAsCphE,EAAWmI,SAChBzS,OAAQ5L,EAAI8V,IAAK9V,EACpDL,KAAKqzE,yBAAyBsE,EAAiBt3E,GAAI0nB,GAErD,MAEF,KAAKta,EAAAgJ,SAASU,gBACZ,IAAIwB,EAAU3Y,KAAKwlB,QAAQnR,wBAAyCkC,GACpErM,OAAOyO,EAAQnC,MAAQm7C,EAAA/gD,YAAYmW,MAC9BpO,EAAQwC,aAAaw2C,EAAA9gD,eAAeqR,OAAOliB,KAAK0yE,YAAkB/5D,GACvE,MAEF,KAAKlL,EAAAgJ,SAASgB,qBACZ,IAAIkgE,EACJ,IAASt3E,EAAI,EAAG8V,GADZwhE,EAA0CphE,EAAWmI,SACpBzS,OAAQ5L,EAAI8V,IAAK9V,EACpDL,KAAKqzE,yBAAyBsE,EAAiBt3E,GAAI0nB,GAErD,MAEF,KAAKta,EAAAgJ,SAASM,SACZ,IAAIwN,EAAmChO,EAAWgO,aAClD,IAASlkB,EAAI,EAAG8V,EAAIoO,EAAatY,OAAQ5L,EAAI8V,IAAK9V,EAAG,CAC/CsY,EAAU3Y,KAAKwlB,QAAQnR,wBAAwBkQ,EAAalkB,IAChE6J,OAAOyO,EAAQnC,MAAQm7C,EAAA/gD,YAAYiQ,QAEhClI,EAAQuG,GAAG5R,EAAAjL,YAAYsiB,UACvBhM,EAAQwC,aAAaw2C,EAAA9gD,eAAeqR,OACrCliB,KAAKyyE,cAAsB95D,GAE/B,MAEF,KAAKlL,EAAAgJ,SAAS4K,kBACR1I,EAAU3Y,KAAKwlB,QAAQnR,wBAA0CkC,IACzDC,MAAQm7C,EAAA/gD,YAAYiQ,SACzBlI,EAAQwC,aAAaw2C,EAAA9gD,eAAeqR,OAAOliB,KAAKyyE,cAAsB95D,IAE7E,MAEF,KAAKlL,EAAAgJ,SAASxB,OACuC,MAA7BsB,EAAW7K,gBAC/B1L,KAAKgzE,kBACuBz8D,EAAW7K,eACM6K,EAAW6N,MAG1D,MAEF,KAAK3W,EAAAgJ,SAASI,OACZ7W,KAAKgzE,kBACez8D,EAAW7K,eACX6K,EAAW6N,MAE/B,MAEF,KAAK3W,EAAAgJ,SAASY,oBACd,KAAK5J,EAAAgJ,SAAS8K,kBACd,KAAK9T,EAAAgJ,SAASc,qBACd,KAAK9J,EAAAgJ,SAASoL,0BACd,KAAKpU,EAAAgJ,SAASkB,gBAAiB,MAC/B,QACE,IAAIwsC,EAAOnkD,KAAK43E,iBAAiBrhE,GAC7Bq7C,EAAA9a,gBAAgBqN,IAASyN,EAAApiC,aAAa0yB,KAAKn6B,EAAKvb,KAAK23C,KAM/DuqB,EAAAzsE,UAAA21E,iBAAA,SACErhE,EACAshE,QAAA,IAAAA,MAAA,GAEA,IACI1zB,EADAxkD,EAASK,KAAKL,OAElB,OAAQ4W,EAAUC,MAChB,KAAK/I,EAAAgJ,SAAS45C,MACZlM,EAAOnkD,KAAK83E,sBAAsCvhE,EAAWshE,GAC7D,MAEF,KAAKpqE,EAAAgJ,SAAS65C,MACZnM,EAAOnkD,KAAK+3E,sBAAsCxhE,EAAWshE,GAC7D,MAEF,KAAKpqE,EAAAgJ,SAAS85C,SACZpM,EAAOnkD,KAAKg4E,yBAA4CzhE,EAAWshE,GACnE,MAEF,KAAKpqE,EAAAgJ,SAAS+5C,GACZrM,EAAOnkD,KAAKi4E,mBAAgC1hE,EAAWshE,GACvD,MAEF,KAAKpqE,EAAAgJ,SAASxT,MACZkhD,EAAOnkD,KAAKk4E,sBAAsC3hE,EAAWshE,GAC7D,MAEF,KAAKpqE,EAAAgJ,SAASm6C,WACZzM,EAAOnkD,KAAKm4E,2BAAgD5hE,EAAWshE,GACvE,MAEF,KAAKpqE,EAAAgJ,SAASo6C,IACZ1M,EAAOnkD,KAAKo4E,oBAAkC7hE,EAAWshE,GACzD,MAEF,KAAKpqE,EAAAgJ,SAASu6C,GACZ7M,EAAOnkD,KAAKq4E,mBAAgC9hE,EAAWshE,GACvD,MAEF,KAAKpqE,EAAAgJ,SAASy6C,OACZ/M,EAAOnkD,KAAKs4E,uBAAwC/hE,EAAWshE,GAC/D,MAEF,KAAKpqE,EAAAgJ,SAAS26C,OACZjN,EAAOnkD,KAAKu4E,uBAAwChiE,EAAWshE,GAC/D,MAEF,KAAKpqE,EAAAgJ,SAAS46C,MACZlN,EAAOnkD,KAAKw4E,sBAAsCjiE,EAAWshE,GAC7D,MAEF,KAAKpqE,EAAAgJ,SAAS66C,IACZnN,EAAOnkD,KAAKy4E,oBAAkCliE,EAAWshE,GACzD,MAEF,KAAKpqE,EAAAgJ,SAASM,UACZotC,EAAOnkD,KAAK04E,yBAA4CniE,EAAWshE,MACxD1zB,EAAOxkD,EAAO4qC,OACzB,MAEF,KAAK98B,EAAAgJ,SAAS+6C,KACZrN,EAAOnkD,KAAK24E,qBAAoCpiE,EAAWshE,GAC3D,MAEF,KAAKpqE,EAAAgJ,SAASg7C,MACZtN,EAAOnkD,KAAK44E,sBAAsCriE,EAAWshE,GAC7D,MAEF,KAAKpqE,EAAAgJ,SAASkB,gBAEZ3X,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf1K,EAAU1L,OAEZs5C,EAAOxkD,EAAO6rC,cACd,MAEF,QACEthC,QAAO,GACPi6C,EAAOxkD,EAAO6rC,cAIlB,OADIxrC,KAAKyU,QAAQgW,WAAWzqB,KAAK64E,iBAAiB10B,EAAM5tC,EAAU1L,OAC3Ds5C,GAGTuqB,EAAAzsE,UAAAizE,kBAAA,SACE7+D,EACAyiE,EACA9D,QADA,IAAA8D,OAAA,QACA,IAAA9D,MAAA,MAEA,IAAI+D,EAAgB1iE,EAAWpK,OAC1B+oE,KACHA,EAAQ,IAAIjuE,MAAqBgyE,IAC3B9sE,OAAS,GAGjB,IADA,IAAIke,EAAOnqB,KAAKiwE,YACP5vE,EAAI,EAAGA,EAAI04E,IAAiB14E,EAAG,CACtC,IAAI8jD,EAAOnkD,KAAK43E,iBAAiBvhE,EAAWhW,GAC1Cy4E,GAAUz4E,GAAK04E,EAAgB,EAC5B,GACA,GAEL,OAAQnnB,EAAA9a,gBAAgBqN,IACtB,KAAKyN,EAAApiC,aAAa8uB,MAChB,IAAKsT,EAAA9Y,aAAaqL,GAAO,CACvB,IAAK,IAAI7tC,EAAI,EAAGH,EAAIy7C,EAAA5Y,mBAAmBmL,GAAO7tC,EAAIH,IAAKG,EAAG0+D,EAAMxoE,KAAKolD,EAAA1Y,cAAciL,EAAM7tC,IACzF,MAIJ,QAAS0+D,EAAMxoE,KAAK23C,GACpB,KAAKyN,EAAApiC,aAAa0yB,KAEpB,GAAI/3B,EAAK3I,MAAK,IAA6B,CACrCowC,EAAA1T,yBAAyBiG,IAAO6wB,EAAMxoE,KAAKxM,KAAKL,OAAO6rC,eAC3D,OAGJ,OAAOwpC,GAGTtG,EAAAzsE,UAAA61E,sBAAA,SACEvhE,EACAshE,GAEA,IAAIxhE,EAAaE,EAAUF,WACvB2iE,EAAYh5E,KAAKiwE,YACjBgJ,EAAYD,EAAUtR,OAC1B1nE,KAAKiwE,YAAcgJ,EAEnB,IAAIjE,EAAQh1E,KAAKk1E,kBAAkB7+D,GAKnC,OAJK4iE,EAAUz3D,MAAK,KAA6BxhB,KAAKq1E,oBAAoB4D,EAAWjE,GACrFiE,EAAUnQ,mBACVkQ,EAAU1P,QAAQ2P,GAClBj5E,KAAKiwE,YAAc+I,EACZhD,EAAQh2E,KAAKL,OAAQq1E,EAAOpjB,EAAAriC,WAAWyY,OAGhD0mC,EAAAzsE,UAAA81E,sBAAA,SACExhE,EACAshE,GAEA,IAAIl4E,EAASK,KAAKL,OAClB,GAAI4W,EAAUizB,MAKZ,OAJAxpC,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf1K,EAAUizB,MAAM3+B,OAEXlL,EAAO6rC,cAEhB,IAAIrhB,EAAOnqB,KAAKiwE,YACZvmD,EAAaS,EAAKT,WACtB,GAAkB,MAAdA,EAKF,OAJA1pB,KAAKmN,MACHI,EAAAhD,eAAe2uE,qFACf3iE,EAAU1L,OAELlL,EAAO6rC,cAEhB,IAAIwpC,EAAQ,IAAIjuE,MAChB/G,KAAKq1E,oBAAoBlrD,EAAM6qD,GAE/B,IADA,IAAItvD,EAAuByE,EAAKlW,OACzByR,GAAWA,EAAQgE,aAAeA,GACvC1pB,KAAKq1E,oBAAoB3vD,EAASsvD,GAAwB,GAC1DtvD,EAAUA,EAAQzR,OAKpB,OAHAkW,EAAK2+C,mBACLkM,EAAMxoE,KAAK7M,EAAOgqC,GAAGjgB,IACrBS,EAAKjY,IAAG,IACD8jE,EAAQr2E,EAAQq1E,EAAOpjB,EAAAriC,WAAWyY,OAG3C0mC,EAAAzsE,UAAA+1E,yBAAA,SACEzhE,EACAshE,GAEA,IAAIl4E,EAASK,KAAKL,OACd6pC,EAAQjzB,EAAUizB,MACtB,GAAIA,EAKF,OAJAxpC,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACfuoB,EAAM3+B,OAEDlL,EAAO6rC,cAGhB,IAAIrhB,EAAOnqB,KAAKiwE,YACZ5I,EAAgBl9C,EAAKk9C,cACzB,GAAqB,MAAjBA,EAKF,OAJArnE,KAAKmN,MACHI,EAAAhD,eAAe4uE,8EACf5iE,EAAU1L,OAELlL,EAAO6rC,cAEhBrhB,EAAKjY,IAAG,IACR,IAAI8iE,EAAQ,IAAIjuE,MAChB/G,KAAKq1E,oBAAoBlrD,EAAM6qD,GAE/B,IADA,IAAItvD,EAAuByE,EAAKlW,OACzByR,GAAWA,EAAQ2hD,gBAAkBA,GAC1CrnE,KAAKq1E,oBAAoB3vD,EAASsvD,GAAwB,GAC1DtvD,EAAUA,EAAQzR,OAIpB,OAFAkW,EAAK2+C,mBACLkM,EAAMxoE,KAAK7M,EAAOgqC,GAAG09B,IACd2O,EAAQr2E,EAAQq1E,EAAOpjB,EAAAriC,WAAWyY,OAG3C0mC,EAAAzsE,UAAAg2E,mBAAA,SACE1hE,EACAshE,GAEA,IAAIl4E,EAASK,KAAKL,OAEdq5E,EAAYh5E,KAAKiwE,YACjBzmC,EAAQwvC,EAAU7P,iBAClB8P,EAAYD,EAAUtR,OAC1B1nE,KAAKiwE,YAAcgJ,EACnB,IAAIvvD,EAAa,SAAW8f,EAC5ByvC,EAAUvvD,WAAaA,EACvB,IAAI29C,EAAgB,YAAc79B,EAClCyvC,EAAU5R,cAAgBA,EAE1B,IAAI2N,EAAQ,IAAIjuE,MACZwP,EAAUA,UAAUC,MAAQ/I,EAAAgJ,SAAS45C,MACvCrwD,KAAKk1E,kBAAmC3+D,EAAUA,UAAWF,YAAY,EAAO2+D,GAEhFA,EAAMxoE,KACJxM,KAAK43E,iBAAiBrhE,EAAUA,YAGpC,IAAI6iE,EAAWp5E,KAAKq5E,cAClBr5E,KAAK2zE,kBAAkBp9D,EAAUqzB,UAAWp8B,EAAAmH,KAAKvR,KACjDpD,KAAK6uE,aAKHyK,EAAaL,EAAUz3D,MAAK,IAC3B83D,GAAYt5E,KAAKq1E,oBAAoB4D,EAAWjE,GACrDiE,EAAUnQ,mBACVkQ,EAAU3P,gBACVrpE,KAAKiwE,YAAc+I,EACnBC,EAAUtzD,MACR,MAKFqzD,EAAU1P,QAAQ2P,GAElB,IAAI1vC,EAAyB,CAC3B5pC,EAAOsqC,KAAKo9B,EACViS,EACItD,EAAQr2E,EAAQq1E,EAAOpjB,EAAAriC,WAAWyY,MAClCroC,EAAO4pC,MAAM,KAAM,CACjBysC,EAAQr2E,EAAQq1E,EAAOpjB,EAAAriC,WAAWyY,MAClCroC,EAAOgqC,GAAG09B,EAAe+R,IACxBxnB,EAAAriC,WAAWyY,QAItB,OADIsxC,GAAY/vC,EAAM/8B,KAAK7M,EAAO6rC,eAC3B7rC,EAAO4pC,MAAM7f,EAAY6f,IAGlCmlC,EAAAzsE,UAAAi2E,sBAAA,SACE3hE,EACAshE,GAEA,OAAO73E,KAAKL,OAAO4qC,OAGrBmkC,EAAAzsE,UAAAk2E,2BAAA,SACE5hE,EACAshE,GAEA,OAAO73E,KAAK2zE,kBAAkBp9D,EAAUwzB,WAAYv8B,EAAAmH,KAAKG,KACxC,GAAf+iE,IAIJnJ,EAAAzsE,UAAAm2E,oBAAA,SACE7hE,EACAshE,GAIA,IAAImB,EAAYh5E,KAAKiwE,YACjBzmC,EAAQwvC,EAAU7P,iBAClB8P,EAAYD,EAAUtR,OAC1B1nE,KAAKiwE,YAAcgJ,EACnB,IAAIvvD,EAAauvD,EAAUvvD,WAAa,SAAW8f,EACnDyvC,EAAUvvD,WAAaA,EACvB,IAAI29C,EAAgB,YAAc79B,EAClCyvC,EAAU5R,cAAgBA,EAC1B,IAAIkS,EAAc,UAAY/vC,EAG1B7pC,EAASK,KAAKL,OACd6zE,EAAWj9D,EAAU4Q,YACrBnnB,KAAK43E,iBAA4BrhE,EAAU4Q,aAC3C,EACAiyD,EAA0B,EAC1BI,GAAa,EACbjjE,EAAUqzB,WACZwvC,EAAWz5E,EAAO4yC,qBAChBvyC,KAAKq5E,cACHr5E,KAAKy5E,4BAAwCljE,EAAUqzB,UAAWp8B,EAAAmH,KAAK/Q,MACvE5D,KAAK6uE,cAILjd,EAAA9a,gBAAgBsiC,IAAaxnB,EAAApiC,aAAaolB,QAC5C1qC,OAAO0nD,EAAA7a,kBAAkBqiC,IAAaxnB,EAAAriC,WAAWrpB,KACf,GAA9B0rD,EAAA5a,iBAAiBoiC,KAAgBI,GAAa,MAMpDJ,EAAWz5E,EAAOyD,IAAI,GACtBo2E,GAAa,GAEfP,EAAU5O,qBAAqB+O,GAC/B,IAAIM,EAAWnjE,EAAUm1C,YACrB1rD,KAAK2zE,kBAA8Bp9D,EAAUm1C,YAAal+C,EAAAmH,KAAKG,KAC7D,GAED,EACD6kE,EAAgBpjE,EAAUA,UAC1By+D,EAAQ,IAAIjuE,MACZ4yE,EAAcnjE,MAAQ/I,EAAAgJ,SAAS45C,MACjCrwD,KAAKk1E,kBAAmCyE,EAAetjE,YAAY,EAAO2+D,GAE1EA,EAAMxoE,KACJxM,KAAK43E,iBAAiB+B,IAGrBV,EAAUz3D,MAAK,KAA6BxhB,KAAKq1E,oBAAoB4D,EAAWjE,GAGrFiE,EAAUnQ,mBACVkQ,EAAU3P,gBACVrpE,KAAKiwE,YAAc+I,EACnB,IAAIY,EAAeX,EAAUz3D,MAAM,MACnCy3D,EAAUtzD,MACR,MAKE6zD,EAAYR,EAAU1P,QAAQ2P,GAC7BD,EAAUzP,mBAAmB0P,GAElC,IAAIY,EAAa,IAAI9yE,MACjBysE,GAAUqG,EAAWrtE,KAAKgnE,GAE9B,IAAIsG,EAAc,IAAI/yE,MACtB,GAAI6yE,EACF5E,EAAMS,QACJ91E,EAAOgqC,GAAGjgB,EAAY/pB,EAAO8mC,MAAMmrB,EAAA/+B,QAAQy3C,OAAQ8O,KAErDU,EAAYttE,KACV7M,EAAO4pC,MAAM89B,EAAe2N,EAAOpjB,EAAAriC,WAAWyY,WAE3C,CACL8xC,EAAYttE,KACV7M,EAAOgqC,GAAGjgB,EAAY/pB,EAAO8mC,MAAMmrB,EAAA/+B,QAAQy3C,OAAQ8O,KAErD,IAAK,IAAI/4E,EAAI,EAAG8V,EAAI6+D,EAAM/oE,OAAQ5L,EAAI8V,IAAK9V,EACzCy5E,EAAYttE,KAAKwoE,EAAM30E,IAY3B,OATIq5E,GAAUI,EAAYttE,KAAKktE,GAC/BI,EAAYttE,KACV7M,EAAOgqC,GAAG4vC,IAGZM,EAAWrtE,KACT7M,EAAOsqC,KAAKsvC,EAAa55E,EAAO4pC,MAAM,KAAMuwC,EAAaloB,EAAAriC,WAAWyY,QAG/DroC,EAAO4pC,MAAM7f,EAAYmwD,IAGlCnL,EAAAzsE,UAAAo2E,mBAAA,SACE9hE,EACAshE,GAEA,IAAIl4E,EAASK,KAAKL,OACdyqC,EAAS7zB,EAAU6zB,OACnBC,EAAU9zB,EAAU8zB,QACpB2uC,EAAYh5E,KAAKiwE,YAGjBmJ,EAAWz5E,EAAO4yC,qBACpBvyC,KAAKq5E,cACHr5E,KAAKy5E,4BAA4BljE,EAAUqzB,UAAWp8B,EAAAmH,KAAK/Q,MAC3D5D,KAAK6uE,cAKT,GACEjd,EAAA9a,gBAAgBsiC,IAAaxnB,EAAApiC,aAAaolB,OAC1Cgd,EAAA7a,kBAAkBqiC,IAAaxnB,EAAAriC,WAAWrpB,IAE1C,OAAO0rD,EAAA5a,iBAAiBoiC,GACpBp5E,KAAK43E,iBAAiBxtC,GACtBC,EACErqC,KAAK43E,iBAAiBvtC,GACtB1qC,EAAO4qC,MAIf,IAAIwvC,EAAc,IAAIhzE,MAClBizE,EAAahB,EAAUtR,OAY3B,GAXA1nE,KAAKiwE,YAAc+J,EACnBA,EAAW3P,qBAAqB+O,GAC5BhvC,EAAO5zB,MAAQ/I,EAAAgJ,SAAS45C,MAC1BrwD,KAAKk1E,kBAAmC9qC,EAAQ/zB,YAAY,EAAO0jE,GAEnEA,EAAYvtE,KAAKxM,KAAK43E,iBAAiBxtC,IAEpC4vC,EAAWx4D,MAAK,KAA6BxhB,KAAKq1E,oBAAoB2E,EAAYD,GACvFC,EAAWlR,mBACX9oE,KAAKiwE,YAAc+I,EAEf3uC,EAAS,CACX,IAAI4vC,EAAcjB,EAAUtR,OAC5B1nE,KAAKiwE,YAAcgK,EACnBA,EAAYzP,sBAAsB4O,GAClC,IAAIc,EAAe,IAAInzE,MAUvB,OATIsjC,EAAQ7zB,MAAQ/I,EAAAgJ,SAAS45C,MAC3BrwD,KAAKk1E,kBAAmC7qC,EAASh0B,YAAY,EAAO6jE,GAEpEA,EAAa1tE,KAAKxM,KAAK43E,iBAAiBvtC,IAErC4vC,EAAYz4D,MAAK,KAA6BxhB,KAAKq1E,oBAAoB4E,EAAaC,GACzFD,EAAYnR,mBACZ9oE,KAAKiwE,YAAc+I,EACnBA,EAAUnP,cAAcmQ,EAAYC,GAC7Bt6E,EAAOwqC,GAAGivC,EACfpD,EAAQr2E,EAAQo6E,EAAanoB,EAAAriC,WAAWyY,MACxCguC,EAAQr2E,EAAQu6E,EAActoB,EAAAriC,WAAWyY,OAO3C,OAJAgxC,EAAUzP,mBAAmByQ,GACzBA,EAAWx4D,MAAK,KAClBw3D,EAAUxO,sBAAsB4O,GAE3Bz5E,EAAOwqC,GAAGivC,EACfpD,EAAQr2E,EAAQo6E,EAAanoB,EAAAriC,WAAWyY,QAU9C0mC,EAAAzsE,UAAAq2E,uBAAA,SACE/hE,EACAshE,GAEA,IAAIl4E,EAASK,KAAKL,OACdgnC,EAAsB,EACtBxc,EAAOnqB,KAAKiwE,YACZ9kC,EAAahhB,EAAKghB,WAGtBhhB,EAAKjY,IAAG,GAER,IAAIioE,EAAkB5jE,EAAUjV,MAChC,GAAI64E,EAAiB,CACnB,GAAIhvC,GAAc39B,EAAAmH,KAAKG,KAMrB,OALA9U,KAAKmN,MACHI,EAAAhD,eAAeqpE,mCACfuG,EAAgBtvE,MAAO7K,KAAK6uE,YAAYrjE,WAAY2/B,EAAW3/B,YAEjExL,KAAK6uE,YAAcrhE,EAAAmH,KAAKG,KACjBnV,EAAO6rC,cAEhB,IAAI4uC,EAAe,EACfjwD,EAAK05C,eAAe3kD,GAAG5R,EAAAjL,YAAYyb,iBAAgBs8D,GAAe,GACtEzzC,EAAO3mC,KAAK2zE,kBAAkBwG,EAAiBhvC,EAA2B,GAAfivC,GAItDp6E,KAAKovE,oBAAoB76D,IAAIoyB,IAC5BwE,EAAW8mC,WACTrgB,EAAA9a,gBAAgBnQ,IAASirB,EAAApiC,aAAa0lB,UACpC/qB,EAAK++C,eAAetX,EAAAva,iBAAiB1Q,GAAOh5B,EAAAk5D,WAAWwT,gBACzDlwD,EAAK69C,eAAepW,EAAAva,iBAAiB1Q,GAAOh5B,EAAAk5D,WAAWwT,cACvDr6E,KAAKovE,oBAAoBr6D,IAAI4xB,IAOhCxc,EAAK0gD,YAAYlkC,EAAMwE,IAAahhB,EAAKjY,IAAG,GAC7CiY,EAAKigD,UAAUzjC,EAAMwE,IAAahhB,EAAKjY,IAAG,QAErCi5B,GAAc39B,EAAAmH,KAAKG,OAC5B9U,KAAKmN,MACHI,EAAAhD,eAAeqpE,mCACfr9D,EAAU1L,MAAO,OAAQsgC,EAAW3/B,YAEtCm7B,EAAOhnC,EAAO6rC,eAGhB,IAAIwpC,EAAQ,IAAIjuE,MAOhB,GANA/G,KAAKq1E,oBAAoBlrD,EAAM6qD,GAC/Bh1E,KAAKszE,mBAAmBnpD,EAAM6qD,GAG1B7pC,EAAW8mC,YAAcjyE,KAAKovE,oBAAoB76D,IAAIoyB,KAAOA,EAAO3mC,KAAKkyE,WAAWvrC,IAEpFwE,GAAc39B,EAAAmH,KAAKG,MAAQkgE,EAAM/oE,OAAQ,CAC3C,IAAIspE,EAAOprD,EAAKo+C,oBAAoBp9B,GAChChhB,EAAKigD,UAAUzjC,EAAMwE,IAAahhB,EAAKi+C,aAAamN,EAAK5tD,MAAOha,EAAAk5D,WAAW7C,SAC/EgR,EAAMS,QACJ91E,EAAOwpC,UAAUosC,EAAK5tD,MAAOgf,IAE/BA,EAAOhnC,EAAO0nC,UAAUkuC,EAAK5tD,MAAOwjB,EAAWooB,gBAKjD,OAHAppC,EAAK2+C,mBAGmD,IAApC,GAAf+O,IAAwDlxC,GAAQwE,GAAc39B,EAAAmH,KAAKG,KACjFkgE,EAAM/oE,QACX+oE,EAAMxoE,KAAKm6B,GACJhnC,EAAO4pC,MAAM,KAAMyrC,EAAO7pC,EAAWooB,iBAFlB5sB,EAMxBxc,EAAKjL,GAAE,MACJ81D,EAAM/oE,QACX+oE,EAAMxoE,KAAK7M,EAAOgqC,GAAGz/B,OAAOigB,EAAKq9C,mBAAoB,EAAG7gC,IAEjDhnC,EAAO4pC,MAAM,KAAMyrC,IAHAr1E,EAAOgqC,GAAGz/B,OAAOigB,EAAKq9C,mBAAoB,EAAG7gC,GAOpEquC,EAAM/oE,QACX+oE,EAAMxoE,KAAK7M,EAAO8qC,OAAO9D,IAClBhnC,EAAO4pC,MAAM,KAAMyrC,IAFAr1E,EAAO8qC,OAAO9D,IAK1C+nC,EAAAzsE,UAAAs2E,uBAAA,SAAuBhiE,EAA4BshE,GACjD,IAAIl4E,EAASK,KAAKL,OAEd4sD,EAAQh2C,EAAUg2C,MAClB+tB,EAAW/tB,EAAMtgD,OACrB,IAAKquE,EACH,OAAOt6E,KAAK2zE,kBAAkBp9D,EAAUqzB,UAAWp8B,EAAAmH,KAAKG,KAAI,GAM9D,IAAIkkE,EAAYh5E,KAAKiwE,YACjB5P,EAAU2Y,EAAU7P,iBAGpBoR,EAAYvB,EAAUnR,aAAar6D,EAAAmH,KAAKlR,KACxC+2E,EAAiBD,EAAU5yD,MAG3B8yD,EAAS,IAAI1zE,MAAqB,EAAIuzE,GAC1CG,EAAO,GAAK96E,EAAOwpC,UACjBqxC,EACAx6E,KAAK2zE,kBAAkBp9D,EAAUqzB,UAAWp8B,EAAAmH,KAAKlR,IAAG,IAQtD,IAFA,IAAIi3E,EAAa,EACbC,GAAgB,EACXt6E,EAAI,EAAGA,EAAIi6E,IAAYj6E,EAAG,CACjC,IACImpC,EADQ+iB,EAAMlsD,GACAmpC,MACdA,EACFixC,EAAOC,KAAgB/6E,EAAOgqC,GAAG,OAAStpC,EAAEmL,SAAS,IAAM,IAAM60D,EAC/D1gE,EAAOknC,OAAO+qB,EAAAz5B,SAASsyC,MACrB9qE,EAAO0nC,UAAUmzC,EAAgB5oB,EAAAriC,WAAWrpB,KAC5ClG,KAAK2zE,kBAAkBnqC,EAAOh8B,EAAAmH,KAAKlR,IAAG,KAM1Ck3E,EAAet6E,EAInB24E,EAAU1Q,cAAciS,GAGxBE,EAAOC,GAAc/6E,EAAOgqC,IAAIgxC,GAAgB,EAC1C,OAASA,EAAanvE,SAAS,IAC/B,SACA,IAAM60D,GAGZ,IAAIua,EAAej7E,EAAO4pC,MAAM,SAAW82B,EAASoa,EAAQ7oB,EAAAriC,WAAWyY,MACnE6yC,GAAgB,EAChBC,GAAuB,EACvBC,GAAe,EACfC,GAAkB,EACtB,IAAS36E,EAAI,EAAGA,EAAIi6E,IAAYj6E,EAAG,CACjC,IACIgW,EADQk2C,EAAMlsD,GACKgW,WACnB0iE,EAAgB1iE,EAAWpK,OAG3BgtE,EAAYD,EAAUtR,OAC1B1nE,KAAKiwE,YAAcgJ,EACnB,IAAIvvD,EAAa,SAAW22C,EAC5B4Y,EAAUvvD,WAAaA,EAEvB,IAAIuxD,EAAS56E,GAAKi6E,EAAW,EACzBY,EAAYD,EAASvxD,EAAa,QAAUrpB,EAAI,GAAGmL,SAAS,IAAM,IAAM60D,EACxE2U,EAAQ,IAAIjuE,MAAqB,EAAIgyE,GACzC/D,EAAM,GAAK4F,EAGX,IAFA,IAAIO,EAAQ,EACR7B,GAAa,EACRhjE,EAAI,EAAGA,EAAIyiE,IAAiBziE,EAAG,CACtC,IAAI6tC,EAAOnkD,KAAK43E,iBAAiBvhE,EAAWC,IAC5C,GAAIs7C,EAAA9a,gBAAgBqN,IAASyN,EAAApiC,aAAa0yB,MACxC8yB,EAAMmG,KAAWh3B,EACb80B,EAAUz3D,MAAK,KAA6B,CAC9C83D,GAAa,EACb,OAINtE,EAAM/oE,OAASkvE,GACX7B,GAAc2B,KACXhC,EAAU/5D,GAAE,KAAqB27D,GAAgB,GACjD5B,EAAU/5D,GAAE,KAA6B47D,GAAuB,GAChE7B,EAAU/5D,GAAE,KAAoB67D,GAAe,GAC/C9B,EAAU/5D,GAAE,MAAuB87D,GAAkB,IAIvD/B,EAAUz3D,MAAK,KAA6BxhB,KAAKq1E,oBAAoB4D,EAAWjE,GACrFiE,EAAUtzD,MACR,MAGFszD,EAAUnQ,mBACV9oE,KAAKiwE,YAAc+I,EACnB4B,EAAej7E,EAAO4pC,MAAM2xC,EAAWlG,EAAOpjB,EAAAriC,WAAWyY,MAW3D,OATAgxC,EAAU3P,gBAGNsR,GAAgB,IACdE,GAAe7B,EAAU9mE,IAAG,GAC5B4oE,GAAsB9B,EAAU9mE,IAAG,GACnC6oE,GAAc/B,EAAU9mE,IAAG,GAC3B8oE,GAAiBhC,EAAU9mE,IAAG,KAE7B0oE,GAGTlM,EAAAzsE,UAAAu2E,sBAAA,SACEjiE,EACAshE,GAEA,IAAI1tD,EAAOnqB,KAAKiwE,YAGhB9lD,EAAKjY,IAAG,GAGRiY,EAAKjY,IAAG,GAER,IAAI8iE,EAAQ,IAAIjuE,MAChB/G,KAAKszE,mBAAmBnpD,EAAM6qD,GAG9B,IAAI1zE,EAAQiV,EAAUjV,MAClBsJ,EAA6B,KACjC,GAAItJ,EAAMkV,MAAQ/I,EAAAgJ,SAASy4C,IAAK,CAC9B,IAAIksB,EAA0B95E,EAAOshB,UACjCw4D,EAAQnvE,SAAQrB,EAAUwwE,EAAQ,IAIxC,OAFApG,EAAMxoE,KAAKyzD,EAAAob,aAAar7E,KAAM4K,EAAS2L,IAEhCy/D,EAAQh2E,KAAKL,OAAQq1E,EAAOpjB,EAAAriC,WAAWyY,OAGhD0mC,EAAAzsE,UAAAw2E,oBAAA,SACEliE,EACAshE,GAQA,OAJA73E,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf1K,EAAU1L,OAEL7K,KAAKL,OAAO6rC,eAIrBkjC,EAAAzsE,UAAAy2E,yBAAA,SAAyBniE,EAA8BshE,GAQrD,IAPA,IAAIl4E,EAASK,KAAKL,OACd4kB,EAAehO,EAAUgO,aACzB+2D,EAAkB/2D,EAAatY,OAC/Bke,EAAOnqB,KAAKiwE,YACZsL,EAAe,IAAIx0E,MACnBqL,EAAWpS,KAAKoS,SAEX/R,EAAI,EAAGA,EAAIi7E,IAAmBj7E,EAAG,CACxC,IAAIiU,EAAciQ,EAAalkB,GAC3BO,EAAO0T,EAAY1T,KAAKmL,KACxB8S,EAAoB,KACpB20D,EAA0B,EAC1BC,GAAyB,EAG7B,GAAIn/D,EAAYuK,KAAM,CAMpB,KALAA,EAAOzM,EAASguD,YACd9rD,EAAYuK,KACZsL,EAAK05C,eACL15C,EAAK3B,0BAEI,SACPlU,EAAY6S,cACdqsD,EAAWxzE,KAAK2zE,kBAAkBr/D,EAAY6S,YAAatI,EACzD,IAEF40D,EAAyBzzE,KAAKovE,oBAAoB76D,IAAIi/D,QAInD,KAAIl/D,EAAY6S,YAehB,CACLnnB,KAAKmN,MACHI,EAAAhD,eAAeq2D,cACftsD,EAAY1T,KAAKiK,MAAMw7D,OAEzB,SAfA,GAJAmN,EAAWxzE,KAAKy5E,4BAA4BnlE,EAAY6S,YAAa3Z,EAAAmH,KAAKG,KAAI,IAG9E2+D,EAAyBzzE,KAAKovE,oBAAoB76D,IAAIi/D,GAClDxzE,KAAK6uE,aAAerhE,EAAAmH,KAAKG,KAAM,CACjC9U,KAAKmN,MACHI,EAAAhD,eAAeqpE,mCACft/D,EAAYzJ,MAAO7K,KAAK6uE,YAAYrjE,WAAY,UAElD,SAEFqT,EAAO7e,KAAK6uE,YAYd,IAAI2M,EAAUlnE,EAAY4K,GAAG5R,EAAAjL,YAAYgd,OACrCkD,GAAW,EACf,GAAIi5D,EACF,GAAIhI,GAEF,GADAA,EAAW7zE,EAAO4yC,qBAAqBihC,GACnC5hB,EAAA9a,gBAAgB08B,IAAa5hB,EAAApiC,aAAaolB,MAAO,CACnD,IAAI/qB,EAAQ,IAAI8nC,EAAAjqC,MAAM9mB,GAAO,EAAGie,EAAMsL,EAAKi9C,gBAC3C,OAAQxV,EAAA7a,kBAAkBy8B,IACxB,KAAK5hB,EAAAriC,WAAWrpB,IACd2jB,EAAMvK,wBACJhK,QACEs8C,EAAA5a,iBAAiBw8B,GACjB,GAEF30D,GAEF,MAEF,KAAK+yC,EAAAriC,WAAWppB,IACd0jB,EAAMvK,wBACJhK,QACEs8C,EAAA3a,oBAAoBu8B,GACpB5hB,EAAA1a,qBAAqBs8B,IAEvB30D,GAEF,MAEF,KAAK+yC,EAAAriC,WAAW5oB,IACdkjB,EAAMrK,sBAA2BoyC,EAAAza,iBAAiBq8B,GAAW30D,GAC7D,MAEF,KAAK+yC,EAAAriC,WAAW3oB,IACdijB,EAAMrK,sBAAsBoyC,EAAAxa,iBAAiBo8B,GAAW30D,GACxD,MAEF,QAEE,OADA3U,QAAO,GACAvK,EAAO6rC,cAIlB,IAAI07B,EAAe/8C,EAAK+8C,aACxB,GAAKA,GACA,GAAIA,EAAa3yD,IAAI3T,GAKxB,OAJAZ,KAAKmN,MACHI,EAAAhD,eAAeqV,uBACftL,EAAY1T,KAAKiK,MAAOjK,GAEnBZ,KAAKL,OAAO6rC,mBANFrhB,EAAK+8C,aAAeA,EAAe,IAAIhgE,IAQ1DggE,EAAah1D,IAAItR,EAAMipB,GACvBtH,GAAW,QAGbviB,KAAKmN,MACHI,EAAAhD,eAAekxE,wCACfnnE,EAAYzJ,OAMlB,IAAK0X,EAAU,CACTsH,OAAK,EACT,GACEvV,EAAYkN,MAAMlU,EAAAjL,YAAY+zD,IAAM9oD,EAAAjL,YAAYgd,QAChD8K,EAAKjL,GAAE,MACP,CACA,IAAI0pD,EAAgBz+C,EAAKq+C,eAAe5nE,GACpCgoE,GACF5oE,KAAKmN,MACHI,EAAAhD,eAAeqV,uBACftL,EAAY1T,KAAKiK,MAAOyJ,EAAY1T,KAAKmL,MAE3C8d,EAAQ++C,GAER/+C,EAAQM,EAAKs+C,eAAe7nE,EAAMie,GAEhC28D,GAASrxD,EAAKi+C,aAAav+C,EAAMlC,MAAOha,EAAAk5D,WAAW6U,cAClD,CACL,GAAIvxD,EAAKi6C,YAAYxjE,GAAO,CAC1BZ,KAAKmN,MACHI,EAAAhD,eAAeqV,uBACftL,EAAY1T,KAAKiK,MAAOjK,GAE1B,SAEFipB,EAAQM,EAAKi9C,eAAe98C,SAASzL,EAAMje,EAAM0T,GAC7CknE,GAASrxD,EAAKi+C,aAAav+C,EAAMlC,MAAOha,EAAAk5D,WAAW6U,UAEzD,IAAIzJ,EAAYpzD,EAAKozD,UACjBuB,GACErpD,EAAKigD,UAAUoJ,EAAU30D,IAAOsL,EAAKi+C,aAAav+C,EAAMlC,MAAOha,EAAAk5D,WAAW7C,SAC1EiO,GACF9nD,EAAKi+C,aAAav+C,EAAMlC,MAAOha,EAAAk5D,WAAWwB,UAC1CkT,EAAa/uE,KACX7M,EAAOwpC,UAAUtf,EAAMlC,MACrB8rD,EACID,EACAxzE,KAAKkyE,WAAWsB,OAIxB+H,EAAa/uE,KACX7M,EAAOwpC,UAAUtf,EAAMlC,MAAO6rD,IAE5B3pD,EAAMhL,KAAKK,GAAG,MACXiL,EAAK0gD,YAAY2I,EAAU30D,GAC3BsL,EAAK69C,eAAen+C,EAAMlC,MAAOha,EAAAk5D,WAAWiE,SADV3gD,EAAKi+C,aAAav+C,EAAMlC,MAAOha,EAAAk5D,WAAWiE,YAKjFmH,GAMFsJ,EAAa/uE,KACX7M,EAAOwpC,UAAUtf,EAAMlC,MACrB9I,EAAK20C,aAAa7zD,KAGtBwqB,EAAKi+C,aAAav+C,EAAMlC,MAAOha,EAAAk5D,WAAW2C,yBACjC3/C,EAAMhL,KAAKK,GAAG,KACvBiL,EAAKi+C,aAAav+C,EAAMlC,MAAOha,EAAAk5D,WAAWiE,UAKlD,OAA8B,GAAvByQ,EAAatvE,OAChB,EACA+pE,EAAQr2E,EAAQ47E,EAAc3pB,EAAAriC,WAAWyY,OAG/C0mC,EAAAzsE,UAAA02E,qBAAA,SAAqBpiE,EAA0BshE,GAC7C,OAAO73E,KAAK2zE,kBAAkBp9D,EAAUwzB,WAAYv8B,EAAAmH,KAAKG,KACvD,KAIJ45D,EAAAzsE,UAAA22E,sBAAA,SAAsBriE,EAA2BshE,GAC/C,IAAIl4E,EAASK,KAAKL,OACdq5E,EAAYh5E,KAAKiwE,YAGjBmJ,EAAWz5E,EAAO4yC,qBACpBvyC,KAAKq5E,cACHr5E,KAAKy5E,4BAA4BljE,EAAUqzB,UAAWp8B,EAAAmH,KAAK/Q,MAC3D5D,KAAK6uE,cAKT,GACEjd,EAAA9a,gBAAgBsiC,IAAaxnB,EAAApiC,aAAaolB,OAC1Cgd,EAAA7a,kBAAkBqiC,IAAaxnB,EAAAriC,WAAWrpB,MAErC0rD,EAAA5a,iBAAiBoiC,GAAW,OAAOz5E,EAAO4qC,MAIjD,IAAIf,EAAQwvC,EAAU7P,iBAClB8P,EAAYD,EAAUtR,OAC1B1nE,KAAKiwE,YAAcgJ,EACnB,IAAIvvD,EAAa,SAAW8f,EAC5ByvC,EAAUvvD,WAAaA,EACvB,IAAI29C,EAAgB,YAAc79B,EAClCyvC,EAAU5R,cAAgBA,EAE1B4R,EAAU5O,qBAAqB+O,GAC/B,IAAIpE,EAAQ,IAAIjuE,MACZwP,EAAUA,UAAUC,MAAQ/I,EAAAgJ,SAAS45C,MACvCrwD,KAAKk1E,kBAAmC3+D,EAAUA,UAAWF,YAAY,EAAO2+D,GAEhFA,EAAMxoE,KAAKxM,KAAK43E,iBAAiBrhE,EAAUA,YAsB7C,OAnBiB0iE,EAAUz3D,MAAK,MAE9BxhB,KAAKq1E,oBAAoB4D,EAAWjE,GACpCA,EAAMxoE,KAAK7M,EAAOgqC,GAAG09B,KAEvB4R,EAAUnQ,mBAGVkQ,EAAU3P,gBACVrpE,KAAKiwE,YAAc+I,EACnBC,EAAUtzD,MACR,MAMGqzD,EAAUzP,mBAAmB0P,GAE3Bt5E,EAAO4pC,MAAM7f,EAAY,CAC9B/pB,EAAOsqC,KAAKo9B,EACV1nE,EAAOwqC,GAAGivC,EACRpD,EAAQr2E,EAAQq1E,EAAOpjB,EAAAriC,WAAWyY,WAa1C0mC,EAAAzsE,UAAA05E,sBAAA,SACEhjE,EACAypD,EACAyV,GAEA3tE,OAAOyO,EAAQuG,GAAG5R,EAAAjL,YAAYglB,UAC9B,IAAIxI,EAAOlG,EAAQkG,KACnB,SACsB,EAAlBg5D,IACFh5D,EAAKK,GAAE,IACPkjD,EAAeljD,GAAE,IACjBL,EAAK8sB,KAAOy2B,EAAez2B,MACtB3rC,KAAK6uE,YAAczM,GAAgB5rD,MACnCxW,KAAK6uE,YAAchwD,GAAMrI,MAE9B,OACA,OACE,IAAIs2B,EAAQjuB,EAAK6zC,yBAAyBllD,EAAAmH,KAAKvR,KAC/C,OAAOpD,KAAKL,OAAOyD,IACQ,GAAzBuV,EAAQuO,kBACJ+oB,QAAQt3B,EAAQyO,uBAAyB0lB,GAASA,EAClD,GAGR,OACA,OACA,QACE,IAAIN,EAAO7zB,EAAQkG,KAAK+zC,wBAAwBplD,EAAAmH,KAAKvR,KACrD,OAAOpD,KAAKL,OAAOyD,IACQ,GAAzBuV,EAAQuO,kBACJ+oB,QAAQt3B,EAAQyO,sBAAwBolB,EACxC,GAGR,OACA,OACE,OAAOxsC,KAAKL,OAAOyD,IACQ,GAAzBuV,EAAQuO,kBACJ+oB,QAAQt3B,EAAQyO,sBAChB,GAGR,OACA,OACE,IAAKzO,EAAQ6M,QAAQ/Q,QAAQc,SAC3B,OAAOvV,KAAKL,OAAOyD,IACQ,GAAzBuV,EAAQuO,kBACJ+oB,QAAQt3B,EAAQyO,sBAChB,GAKV,OACA,OACE,OAAgC,GAAzBzO,EAAQuO,kBACXlnB,KAAKL,OAAO0D,IACV4sC,QAAQt3B,EAAQyO,sBAChB8oB,SAASv3B,EAAQyO,uBAEnBpnB,KAAKL,OAAO0D,IAAI,GAEtB,QAEE,IAAMsV,EAAQwC,aAAaw2C,EAAA9gD,eAAesE,UAAYitD,GAAkB50D,EAAAmH,KAAK9Q,IAC3E,OAAO7D,KAAKL,OAAOmE,IAA0B6U,EAAS2O,oBAGxDtnB,KAAK6uE,YAAcrhE,EAAAmH,KAAK9Q,IAE1B,QACE,OAAO7D,KAAKL,OAAOkE,IAA0B8U,EAAS2O,oBAExD,QAEE,OADApd,QAAO,GACAlK,KAAKL,OAAO6rC,gBAKzBkjC,EAAAzsE,UAAA0xE,kBAAA,SACE5pC,EACAq4B,EACAyV,GAGA,IAAIlxC,EAEJ,YALA,IAAAkxC,MAAA,GAEA73E,KAAK6uE,YAAczM,EAEfA,GAAkB50D,EAAAmH,KAAKG,OAAM+iE,GAAe,GACxC9tC,EAAWvzB,MACjB,KAAK/I,EAAAgJ,SAASksC,UACZhc,EAAO3mC,KAAK47E,2BAAgD7xC,EAAYq4B,EAAgByV,GACxF,MAEF,KAAKpqE,EAAAgJ,SAASm4C,OACZjoB,EAAO3mC,KAAK67E,wBAA0C9xC,EAAYq4B,EAAgByV,GAClF,MAEF,KAAKpqE,EAAAgJ,SAASmsC,KACZjc,EAAO3mC,KAAK87E,sBAAsC/xC,EAAYq4B,EAAgByV,GAC9E,MAEF,KAAKpqE,EAAAgJ,SAASq4C,MACZnoB,EAAO3mC,KAAK+7E,uBAAwChyC,EAAYq4B,EAAgByV,GAChF,MAEF,KAAKpqE,EAAAgJ,SAASosC,cACZlc,EAAO3mC,KAAKg8E,+BAAwDjyC,EAAYq4B,EAAgByV,GAChG,MAEF,KAAKpqE,EAAAgJ,SAAS8H,SACZooB,EAAO3mC,KAAKi8E,0BAA8ClyC,EAAYq4B,EAAejQ,mBAAoB0lB,GACzG,MAEF,KAAKpqE,EAAAgJ,SAASisC,WACd,KAAKj1C,EAAAgJ,SAAS+rC,MACd,KAAK/0C,EAAAgJ,SAAS6rC,KACd,KAAK70C,EAAAgJ,SAAS64C,KACd,KAAK7hD,EAAAgJ,SAASusC,MACd,KAAKv1C,EAAAgJ,SAAS8rC,KACZ5b,EAAO3mC,KAAKk8E,4BAAkDnyC,EAAYq4B,EAAgByV,GAC1F,MAEF,KAAKpqE,EAAAgJ,SAASu4C,WACZroB,EAAO3mC,KAAKm8E,4BAAkDpyC,EAAYq4B,EAAgByV,GAC1F,MAEF,KAAKpqE,EAAAgJ,SAASqM,QACZ6jB,EAAO3mC,KAAKo8E,yBAA4CryC,EAAYq4B,EAAgByV,GACpF,MAEF,KAAKpqE,EAAAgJ,SAASy4C,IACZvoB,EAAO3mC,KAAKq8E,qBAAoCtyC,EAAYq4B,EAAgByV,GAC5E,MAEF,KAAKpqE,EAAAgJ,SAASqsC,cACZnc,EAAO3mC,KAAK2zE,kBAA4C5pC,EAAYA,WAAYq4B,EAAgByV,GAChG,MAEF,KAAKpqE,EAAAgJ,SAASssC,eACZpc,EAAO3mC,KAAKs8E,gCAA0DvyC,EAAYq4B,EAAgByV,GAClG,MAEF,KAAKpqE,EAAAgJ,SAAS44C,QACZ1oB,EAAO3mC,KAAKu8E,yBAA4CxyC,EAAYq4B,EAAgByV,GACpF,MAEF,KAAKpqE,EAAAgJ,SAAS+4C,aACZ7oB,EAAO3mC,KAAKw8E,8BAAsDzyC,EAAYq4B,EAAgByV,GAC9F,MAEF,KAAKpqE,EAAAgJ,SAASg5C,YACZ9oB,EAAO3mC,KAAKy8E,6BAAoD1yC,EAAYq4B,EAAgByV,GAC5F,MAEF,QACE73E,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8oB,EAAWl/B,OAEb87B,EAAO3mC,KAAKL,OAAO6rC,cAIvB,IAAIqjC,EAAc7uE,KAAK6uE,YACnB6N,EAAmD,IAA5B,EAAf7E,GAgBZ,OAfIhJ,GAAezM,IACE,EAAfyV,GACFlxC,EAAO3mC,KAAK28E,kBAAkBh2C,EAAMkoC,EAAazM,GAAgB,EAAMsa,EAAM3yC,GAC7E2yC,GAAO,EACP18E,KAAK6uE,YAAczM,GACK,EAAfyV,IACTlxC,EAAO3mC,KAAK28E,kBAAkBh2C,EAAMkoC,EAAazM,GAAgB,EAAOsa,EAAM3yC,GAC9E2yC,GAAO,EACP18E,KAAK6uE,YAAczM,IAGnBsa,IAAM/1C,EAAO3mC,KAAK48E,uBAAuBj2C,EAAMkoC,IAG/C7uE,KAAKyU,QAAQgW,WAAWzqB,KAAK64E,iBAAiBlyC,EAAMoD,EAAWl/B,OAC5D87B,GAIT+nC,EAAAzsE,UAAAw3E,4BAAA,SACE1vC,EACAq4B,EACAyV,GAEA,YAFA,IAAAA,MAAA,GAEO73E,KAAK2zE,kBAAkB5pC,EAC5Bq4B,GAAkB50D,EAAAmH,KAAKG,KACnBtH,EAAAmH,KAAKvR,IACLg/D,GACe,EAAlByV,IAKLnJ,EAAAzsE,UAAAswC,qBAAA,SACExI,EACAq4B,EACAyV,GAEA,YAFA,IAAAA,MAAA,GAEO73E,KAAKL,OAAO4yC,qBACjBvyC,KAAK2zE,kBAAkB5pC,EAAYq4B,EAAgByV,KAIvDnJ,EAAAzsE,UAAA06E,kBAAA,SACEh2C,EAEA8mC,EAEAvoB,EAEA23B,EAEAH,EACAnX,GAEA,IAAI5lE,EAASK,KAAKL,OAGlB,OAAiB,IAAb8tE,EAASj3D,MACXtM,OAAkB,IAAXg7C,EAAO1uC,MACdxW,KAAKmN,MACHI,EAAAhD,eAAeqpE,mCACfrO,EAAW16D,MAAO4iE,EAASjiE,WAAY05C,EAAO15C,YAEzC7L,EAAO6rC,eAID,IAAX0Z,EAAO1uC,KAA8B7W,EAAOmqC,KAAKnD,IAEjD3mC,KAAKiwE,YAAY7F,UAAUzjC,EAAM8mC,KAAWA,EAAWA,EAASrb,iBAE/Dqb,EAAStgD,eAAe+3B,IACtB23B,IACCpP,EAASrb,iBAAmBlN,EAC9BllD,KAAKmN,MACHI,EAAAhD,eAAeuyE,wBACfvX,EAAW16D,OAGb7K,KAAKmN,MACHI,EAAAhD,eAAewyE,sDACfxX,EAAW16D,MAAO4iE,EAASjiE,WAAY05C,EAAO15C,aAMlDiiE,EAASvuD,GAAE,GAGTgmC,EAAOhmC,GAAE,GACM,IAAbuuD,EAASj3D,KAGI,IAAX0uC,EAAO1uC,OACTmwB,EAAOhnC,EAAO8mC,MAAMmrB,EAAA/+B,QAAQmqD,WAAYr2C,IAMtB,IAAXue,EAAO1uC,OAChBmwB,EAAOhnC,EAAO8mC,MAAMmrB,EAAA/+B,QAAQoqD,UAAWt2C,IAMhCue,EAAOhmC,GAAE,GAGD,IAAbuuD,EAASj3D,KACP0uC,GAAU13C,EAAAmH,KAAK/Q,MACjB+iC,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASgzC,MAAOxkC,EAAMhnC,EAAOkE,IAAI,IACtD64E,GAAO,GAGL/1C,EAFOue,EAAOhmC,GAAE,GACdgmC,EAAOhmC,GAAE,IACJvf,EAAO8mC,MAAMmrB,EAAA/+B,QAAQqqD,cAAev2C,GAEpChnC,EAAO8mC,MAAMmrB,EAAA/+B,QAAQsqD,cAAex2C,GAGzCue,EAAOhmC,GAAE,IACJvf,EAAO8mC,MAAMmrB,EAAA/+B,QAAQuqD,cAAez2C,GAEpChnC,EAAO8mC,MAAMmrB,EAAA/+B,QAAQwqD,cAAe12C,GAM3Cue,GAAU13C,EAAAmH,KAAK/Q,MACjB+iC,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASizC,MAAOzkC,EAAMhnC,EAAOmE,IAAI,IACtD44E,GAAO,GAGL/1C,EAFOue,EAAOhmC,GAAE,GACdgmC,EAAOhmC,GAAE,IACJvf,EAAO8mC,MAAMmrB,EAAA/+B,QAAQyqD,cAAe32C,GAEpChnC,EAAO8mC,MAAMmrB,EAAA/+B,QAAQ0qD,cAAe52C,GAGzCue,EAAOhmC,GAAE,IACJvf,EAAO8mC,MAAMmrB,EAAA/+B,QAAQ2qD,cAAe72C,GAEpChnC,EAAO8mC,MAAMmrB,EAAA/+B,QAAQ4qD,cAAe92C,IAOjDz8B,OAAmB,GAAZg7C,EAAOnyC,MAAyB,sBACvC4zB,EAAOhnC,EAAOmqC,KAAKnD,IAIZ8mC,EAASvuD,GAAE,IAAuBgmC,EAAOhmC,GAAE,GAKhDynB,EAFW,IAAXue,EAAO1uC,KACLi3D,EAASvuD,GAAE,IACNvf,EAAO8mC,MACZgnC,EAASvuD,GAAE,GACP0yC,EAAA/+B,QAAQ6qD,gBACR9rB,EAAA/+B,QAAQ8qD,gBACZh3C,GAGKhnC,EAAO8mC,MACZgnC,EAASvuD,GAAE,GACP0yC,EAAA/+B,QAAQ+qD,gBACRhsB,EAAA/+B,QAAQgrD,gBACZl3C,GAMA8mC,EAASvuD,GAAE,IACNvf,EAAO8mC,MACZgnC,EAASvuD,GAAE,GACP0yC,EAAA/+B,QAAQirD,gBACRlsB,EAAA/+B,QAAQkrD,gBACZp3C,GAGKhnC,EAAO8mC,MACZgnC,EAASvuD,GAAE,GACP0yC,EAAA/+B,QAAQmrD,gBACRpsB,EAAA/+B,QAAQorD,gBACZt3C,GAQF8mC,EAASvuD,GAAE,IAGTgmC,GAAU13C,EAAAmH,KAAK/Q,MACjB+iC,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASyyC,MAAOjkC,EAAMhnC,EAAO0D,IAAI,IACtDq5E,GAAO,GACGx3B,EAAOhmC,GAAE,MACnBynB,EAAOhnC,EAAO8mC,MAAMmrB,EAAA/+B,QAAQqrD,QAASv3C,IAI9Bue,EAAOhmC,GAAE,KAClBynB,EAAOhnC,EAAO8mC,MACZgnC,EAASvuD,GAAE,GAAqB0yC,EAAA/+B,QAAQsrD,UAAYvsB,EAAA/+B,QAAQurD,UAC5Dp+E,KAAK48E,uBAAuBj2C,EAAM8mC,IAEpCiP,GAAO,GAKHjP,EAASvuD,GAAE,KAETuuD,EAAS9hC,KAAOuZ,EAAOvZ,OACzBhF,EAAO3mC,KAAK48E,uBAAuBj2C,EAAM8mC,GACzCiP,GAAO,GAMf18E,KAAK6uE,YAAc3pB,EACZw3B,EACH18E,KAAK48E,uBAAuBj2C,EAAMue,GAClCve,IAGN+nC,EAAAzsE,UAAA25E,2BAAA,SACE7xC,EACAq4B,EACAyV,GAEA,OAAQ9tC,EAAWkb,eACjB,KAAKx3C,EAAAkhD,cAAc0vB,OACnB,KAAK5wE,EAAAkhD,cAAcyG,GACjB,IAAIjrC,EAAOnqB,KAAKiwE,YACZ/qB,EAASllD,KAAKoS,SAASguD,YACzBl2D,OAAO6/B,EAAWmb,QAClB/6B,EAAK05C,eACL15C,EAAK3B,yBAEP,OAAK08B,EACEllD,KAAK2zE,kBAAkB5pC,EAAWA,WAAYmb,EACpC,EAAf2yB,GAFkB73E,KAAKL,OAAO6rC,cAKlC,KAAK/9B,EAAAkhD,cAAcqV,QACjB95D,QAAQ6/B,EAAWmb,QACnB,IAAIve,EAAO3mC,KAAKy5E,4BAA4B1vC,EAAWA,WAAYq4B,GAC/DvjD,EAAO7e,KAAK6uE,YAChB,GAAI7uE,KAAKiwE,YAAY7F,UAAUzjC,EAAM9nB,GACnC7e,KAAK+M,KACHQ,EAAAhD,eAAe+zE,yBACfv0C,EAAWA,WAAWl/B,YAEnB,IAAK7K,KAAKyU,QAAQiB,SAAU,CACjC,IAAI/V,EAASK,KAAKL,OAEd4+E,GADAp0D,EAAOnqB,KAAKiwE,aACK1H,oBAAoB1pD,GAAM8I,MAC1CwC,EAAK0gD,YAAYlkC,EAAM9nB,IAAOsL,EAAKi+C,aAAamW,EAAW5wE,EAAAk5D,WAAWiE,SAC3E3gD,EAAKi+C,aAAamW,EAAW5wE,EAAAk5D,WAAW7C,SACxCr9B,EAAOhnC,EAAOwqC,GACZxqC,EAAO4nC,UAAUg3C,EAAW53C,GAC5BhnC,EAAO0nC,UAAUk3C,EAAW1/D,EAAK00C,gBACjC5zD,EAAO6rC,eAIX,OADAxrC,KAAK6uE,YAAc7uE,KAAK6uE,YAAYzc,gBAC7BzrB,EAET,QAASz8B,QAAO,GAElB,OAAOlK,KAAKL,OAAO6rC,eAQrBkjC,EAAAzsE,UAAA45E,wBAAA,SACE9xC,EACAq4B,EACAyV,GAEA,IAII2G,EACAC,EACAC,EACAC,EACAC,EAEAj4C,EAVAhnC,EAASK,KAAKL,OACdmnC,EAAOiD,EAAWjD,KAClBC,EAAQgD,EAAWhD,MASnB83C,GAAW,EAEXx5B,EAAWtb,EAAWsb,SAC1B,OAAQA,GACN,KAAKlD,EAAAC,MAAM+U,SAKT,GAJAqnB,EAAWx+E,KAAKy5E,4BAA4B3yC,EAAMs7B,GAClDqc,EAAWz+E,KAAK6uE,YAGZ7uE,KAAK6uE,YAAY3vD,GAAE,KAAuB,CAE5C,GADIwP,EAAiB+vD,EAAS/vD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeykC,EAAAtkD,aAAayC,IAC5C,CACZ62B,EAAO3mC,KAAK8+E,sBAAsBvxD,EAAUuZ,EAAM03C,EAAUz3C,EAAOgD,GACnE,MAOJ,OAJA/pC,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8oB,EAAWl/B,OAEN7K,KAAKL,OAAO6rC,cAKrB,GAFAkzC,EAAY1+E,KAAKy5E,4BAA4B1yC,EAAO03C,GACpDE,EAAY3+E,KAAK6uE,cACb+P,EAAapxE,EAAAmH,KAAK0+C,kBAAkBorB,EAAUE,GAAW,IAiB3D,OALA3+E,KAAKmN,MACHI,EAAAhD,eAAew0E,8CACfh1C,EAAWl/B,MAAO,IAAK4zE,EAASjzE,WAAYmzE,EAAUnzE,YAExDxL,KAAK6uE,YAAczM,EACZziE,EAAO6rC,cAEhB,OAlBEgzC,EAAWx+E,KAAK28E,kBAAkB6B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP93C,GAEF43C,EAAY1+E,KAAK28E,kBAAkB+B,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP73C,GAUI63C,EAAWpoE,MACjB,OACA,OACA,OACEmwB,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASkzC,MAAOmT,EAAUE,GAC/C,MAEF,OACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASozC,MAAOiT,EAAUE,GAC/C,MAEF,OACE/3C,EAAOhnC,EAAOknC,OACZ7mC,KAAKyU,QAAQc,SACTq8C,EAAAz5B,SAASozC,MACT3Z,EAAAz5B,SAASkzC,MACbmT,EACAE,GAEF,MAEF,OACA,OACA,OACA,QACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASmzC,MAAOkT,EAAUE,GAC/C,MAEF,OACE/3C,EAAOhnC,EAAOknC,OACZ7mC,KAAKyU,QAAQc,SACTq8C,EAAAz5B,SAASqzC,MACT5Z,EAAAz5B,SAASmzC,MACbkT,EACAE,GAEF,MAEF,OACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASqzC,MAAOgT,EAAUE,GAC/C,MAEF,QACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASszC,MAAO+S,EAAUE,GAC/C,MAEF,QACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASuzC,MAAO8S,EAAUE,GAC/C,MAEF,QACEx0E,QAAO,GACPy8B,EAAOhnC,EAAO6rC,cAGlBxrC,KAAK6uE,YAAcrhE,EAAAmH,KAAK/Q,KACxB,MAEF,KAAKu+C,EAAAC,MAAMgV,YAKT,GAJAonB,EAAWx+E,KAAKy5E,4BAA4B3yC,EAAMs7B,GAClDqc,EAAWz+E,KAAK6uE,YAGZ7uE,KAAK6uE,YAAY3vD,GAAE,KAAuB,CAE5C,GADIwP,EAAiB+vD,EAAS/vD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeykC,EAAAtkD,aAAaqC,IAC5C,CACZi3B,EAAO3mC,KAAK8+E,sBAAsBvxD,EAAUuZ,EAAM03C,EAAUz3C,EAAOgD,GACnE,MAOJ,OAJA/pC,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8oB,EAAWl/B,OAEN7K,KAAKL,OAAO6rC,cAKrB,GAFAkzC,EAAY1+E,KAAKy5E,4BAA4B1yC,EAAO03C,GACpDE,EAAY3+E,KAAK6uE,cACb+P,EAAapxE,EAAAmH,KAAK0+C,kBAAkBorB,EAAUE,GAAW,IAiB3D,OALA3+E,KAAKmN,MACHI,EAAAhD,eAAew0E,8CACfh1C,EAAWl/B,MAAO,IAAK4zE,EAASjzE,WAAYmzE,EAAUnzE,YAExDxL,KAAK6uE,YAAczM,EACZziE,EAAO6rC,cAEhB,OAlBEgzC,EAAWx+E,KAAK28E,kBAAkB6B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP93C,GAEF43C,EAAY1+E,KAAK28E,kBAAkB+B,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP73C,GAUI63C,EAAWpoE,MACjB,OACA,OACA,OACEmwB,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAAS8zC,MAAOuS,EAAUE,GAC/C,MAEF,OACE/3C,EAAOhnC,EAAOknC,OACZ7mC,KAAKyU,QAAQc,SACTq8C,EAAAz5B,SAASg0C,MACTva,EAAAz5B,SAAS8zC,MACbuS,EACAE,GAEF,MAEF,OACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASg0C,MAAOqS,EAAUE,GAC/C,MAEF,OACA,OACA,OACA,QACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAAS+zC,MAAOsS,EAAUE,GAC/C,MAEF,OACE/3C,EAAOhnC,EAAOknC,OACZ7mC,KAAKyU,QAAQc,SACTq8C,EAAAz5B,SAASi0C,MACTxa,EAAAz5B,SAAS+zC,MACbsS,EACAE,GAEF,MAEF,OACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASi0C,MAAOoS,EAAUE,GAC/C,MAEF,QACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASk0C,MAAOmS,EAAUE,GAC/C,MAEF,QACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASm0C,MAAOkS,EAAUE,GAC/C,MAEF,QACEx0E,QAAO,GACPy8B,EAAOhnC,EAAO6rC,cAGlBxrC,KAAK6uE,YAAcrhE,EAAAmH,KAAK/Q,KACxB,MAEF,KAAKu+C,EAAAC,MAAMiV,gBAKT,GAJAmnB,EAAWx+E,KAAKy5E,4BAA4B3yC,EAAMs7B,GAClDqc,EAAWz+E,KAAK6uE,YAGZ7uE,KAAK6uE,YAAY3vD,GAAE,KAAuB,CAE5C,GADIwP,EAAiB+vD,EAAS/vD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeykC,EAAAtkD,aAAa0C,IAC5C,CACZ42B,EAAO3mC,KAAK8+E,sBAAsBvxD,EAAUuZ,EAAM03C,EAAUz3C,EAAOgD,GACnE,MAOJ,OAJA/pC,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8oB,EAAWl/B,OAEN7K,KAAKL,OAAO6rC,cAKrB,GAFAkzC,EAAY1+E,KAAKy5E,4BAA4B1yC,EAAO03C,GACpDE,EAAY3+E,KAAK6uE,cACb+P,EAAapxE,EAAAmH,KAAK0+C,kBAAkBorB,EAAUE,GAAW,IAiB3D,OALA3+E,KAAKmN,MACHI,EAAAhD,eAAew0E,8CACfh1C,EAAWl/B,MAAO,KAAM4zE,EAASjzE,WAAYmzE,EAAUnzE,YAEzDxL,KAAK6uE,YAAczM,EACZziE,EAAO6rC,cAEhB,OAlBEgzC,EAAWx+E,KAAK28E,kBAAkB6B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP93C,GAEF43C,EAAY1+E,KAAK28E,kBAAkB+B,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP73C,GAUI63C,EAAWpoE,MACjB,OACA,OACA,OACEmwB,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASwzC,MAAO6S,EAAUE,GAC/C,MAEF,OACE/3C,EAAOhnC,EAAOknC,OACZ7mC,KAAKyU,QAAQc,SACTq8C,EAAAz5B,SAAS0zC,MACTja,EAAAz5B,SAASwzC,MACb6S,EACAE,GAEF,MAEF,OACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAAS0zC,MAAO2S,EAAUE,GAC/C,MAEF,OACA,OACA,OACA,QACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASyzC,MAAO4S,EAAUE,GAC/C,MAEF,OACE/3C,EAAOhnC,EAAOknC,OACZ7mC,KAAKyU,QAAQc,SACTq8C,EAAAz5B,SAAS2zC,MACTla,EAAAz5B,SAASyzC,MACb4S,EACAE,GAEF,MAEF,OACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAAS2zC,MAAO0S,EAAUE,GAC/C,MAEF,QACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAAS4zC,MAAOyS,EAAUE,GAC/C,MAEF,QACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAAS6zC,MAAOwS,EAAUE,GAC/C,MAEF,QACEx0E,QAAO,GACPy8B,EAAOhnC,EAAO6rC,cAGlBxrC,KAAK6uE,YAAcrhE,EAAAmH,KAAK/Q,KACxB,MAEF,KAAKu+C,EAAAC,MAAMkV,mBAKT,GAJAknB,EAAWx+E,KAAKy5E,4BAA4B3yC,EAAMs7B,GAClDqc,EAAWz+E,KAAK6uE,YAGZ7uE,KAAK6uE,YAAY3vD,GAAE,KAAuB,CAE5C,GADIwP,EAAiB+vD,EAAS/vD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeykC,EAAAtkD,aAAasC,IAC5C,CACZg3B,EAAO3mC,KAAK8+E,sBAAsBvxD,EAAUuZ,EAAM03C,EAAUz3C,EAAOgD,GACnE,MAOJ,OAJA/pC,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8oB,EAAWl/B,OAEN7K,KAAKL,OAAO6rC,cAKrB,GAFAkzC,EAAY1+E,KAAKy5E,4BAA4B1yC,EAAO03C,GACpDE,EAAY3+E,KAAK6uE,cACb+P,EAAapxE,EAAAmH,KAAK0+C,kBAAkBorB,EAAUE,GAAW,IAiB3D,OALA3+E,KAAKmN,MACHI,EAAAhD,eAAew0E,8CACfh1C,EAAWl/B,MAAO,KAAM4zE,EAASjzE,WAAYmzE,EAAUnzE,YAEzDxL,KAAK6uE,YAAczM,EACZziE,EAAO6rC,cAEhB,OAlBEgzC,EAAWx+E,KAAK28E,kBAAkB6B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP93C,GAEF43C,EAAY1+E,KAAK28E,kBAAkB+B,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP73C,GAUI63C,EAAWpoE,MACjB,OACA,OACA,OACEmwB,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASo0C,MAAOiS,EAAUE,GAC/C,MAEF,OACE/3C,EAAOhnC,EAAOknC,OACZ7mC,KAAKyU,QAAQc,SACTq8C,EAAAz5B,SAASs0C,MACT7a,EAAAz5B,SAASo0C,MACbiS,EACAE,GAEF,MAEF,OACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASs0C,MAAO+R,EAAUE,GAC/C,MAEF,OACA,OACA,OACA,QACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASq0C,MAAOgS,EAAUE,GAC/C,MAEF,OACE/3C,EAAOhnC,EAAOknC,OACZ7mC,KAAKyU,QAAQc,SACTq8C,EAAAz5B,SAASu0C,MACT9a,EAAAz5B,SAASq0C,MACbgS,EACAE,GAEF,MAEF,OACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASu0C,MAAO8R,EAAUE,GAC/C,MAEF,QACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASw0C,MAAO6R,EAAUE,GAC/C,MAEF,QACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASy0C,MAAO4R,EAAUE,GAC/C,MAEF,QACEx0E,QAAO,GACPy8B,EAAOhnC,EAAO6rC,cAGlBxrC,KAAK6uE,YAAcrhE,EAAAmH,KAAK/Q,KACxB,MAGF,KAAKu+C,EAAAC,MAAMqV,qBACX,KAAKtV,EAAAC,MAAMmV,cAUT,GAJAinB,EAAWx+E,KAAKy5E,4BAA4B3yC,EAAMs7B,GAClDqc,EAAWz+E,KAAK6uE,YAGZxpB,GAAYlD,EAAAC,MAAMmV,eAAiBv3D,KAAK6uE,YAAY3vD,GAAE,KAExD,GADIwP,EAAiB+vD,EAAS/vD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeykC,EAAAtkD,aAAamC,IAC5C,CACZm3B,EAAO3mC,KAAK8+E,sBAAsBvxD,EAAUuZ,EAAM03C,EAAUz3C,EAAOgD,GACnE,MAQN,GAFA20C,EAAY1+E,KAAKy5E,4BAA4B1yC,EAAO03C,GACpDE,EAAY3+E,KAAK6uE,cACb+P,EAAapxE,EAAAmH,KAAK0+C,kBAAkBorB,EAAUE,GAAW,IAiB3D,OALA3+E,KAAKmN,MACHI,EAAAhD,eAAew0E,8CACfh1C,EAAWl/B,MAAOs3C,EAAA8U,sBAAsBltB,EAAWsb,UAAWo5B,EAASjzE,WAAYmzE,EAAUnzE,YAE/FxL,KAAK6uE,YAAczM,EACZziE,EAAO6rC,cAEhB,OAlBEgzC,EAAWx+E,KAAK28E,kBAAkB6B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP93C,GAEF43C,EAAY1+E,KAAK28E,kBAAkB+B,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP73C,GAUI63C,EAAWpoE,MACjB,OACA,OACA,OACA,OACA,OACA,OACA,QACEmwB,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASsyC,MAAO+T,EAAUE,GAC/C,MAEF,OACA,OACE/3C,EAAOhnC,EAAOknC,OACZ7mC,KAAKyU,QAAQc,SACTq8C,EAAAz5B,SAASuyC,MACT9Y,EAAAz5B,SAASsyC,MACb+T,EACAE,GAEF,MAEF,OACA,OACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASuyC,MAAO8T,EAAUE,GAC/C,MAEF,QACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAAS8yC,MAAOuT,EAAUE,GAC/C,MAEF,QACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAAS+yC,MAAOsT,EAAUE,GAC/C,MAEF,QACE/3C,EAAOhnC,EAAO8mC,MAAMmrB,EAAA/+B,QAAQmsD,gBAC1Br/E,EAAOknC,OAAO+qB,EAAAz5B,SAAS8mD,WAAYT,EAAUE,IAE/C,MAEF,QACEx0E,QAAO,GACPy8B,EAAOhnC,EAAO6rC,cAGlBxrC,KAAK6uE,YAAcrhE,EAAAmH,KAAK/Q,KACxB,MAEF,KAAKu+C,EAAAC,MAAMsV,0BACX,KAAKvV,EAAAC,MAAMoV,mBAKT,GAJAgnB,EAAWx+E,KAAKy5E,4BAA4B3yC,EAAMs7B,GAClDqc,EAAWz+E,KAAK6uE,YAGZxpB,GAAYlD,EAAAC,MAAMoV,oBAAsBx3D,KAAK6uE,YAAY3vD,GAAE,KAE7D,GADIwP,EAAiB+vD,EAAS/vD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeykC,EAAAtkD,aAAaoC,IAC5C,CACZk3B,EAAO3mC,KAAK8+E,sBAAsBvxD,EAAUuZ,EAAM03C,EAAUz3C,EAAOgD,GACnE,MAQN,GAFA20C,EAAY1+E,KAAKy5E,4BAA4B1yC,EAAO03C,GACpDE,EAAY3+E,KAAK6uE,cACb+P,EAAapxE,EAAAmH,KAAK0+C,kBAAkBorB,EAAUE,GAAW,IAiB3D,OALA3+E,KAAKmN,MACHI,EAAAhD,eAAew0E,8CACfh1C,EAAWl/B,MAAOs3C,EAAA8U,sBAAsBltB,EAAWsb,UAAWo5B,EAASjzE,WAAYmzE,EAAUnzE,YAE/FxL,KAAK6uE,YAAczM,EACZziE,EAAO6rC,cAEhB,OAlBEgzC,EAAWx+E,KAAK28E,kBAAkB6B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP93C,GAEF43C,EAAY1+E,KAAK28E,kBAAkB+B,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP73C,GAUI63C,EAAWpoE,MACjB,OACA,OACA,OACA,OACA,OACA,OACA,QACEmwB,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASwyC,MAAO6T,EAAUE,GAC/C,MAEF,OACA,OACE/3C,EAAOhnC,EAAOknC,OACZ7mC,KAAKyU,QAAQc,SACTq8C,EAAAz5B,SAASyyC,MACThZ,EAAAz5B,SAASwyC,MACb6T,EACAE,GAEF,MAEF,OACA,OACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASyyC,MAAO4T,EAAUE,GAC/C,MAEF,QACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASgzC,MAAOqT,EAAUE,GAC/C,MAEF,QACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASizC,MAAOoT,EAAUE,GAC/C,MAEF,QACE/3C,EAAOhnC,EAAO8mC,MAAMmrB,EAAA/+B,QAAQqsD,gBAC1Bv/E,EAAOknC,OAAO+qB,EAAAz5B,SAASgnD,WAAYX,EAAUE,IAE/C,MAEF,QACEx0E,QAAO,GACPy8B,EAAOhnC,EAAO6rC,cAGlBxrC,KAAK6uE,YAAcrhE,EAAAmH,KAAK/Q,KACxB,MAEF,KAAKu+C,EAAAC,MAAMuW,OACT,OAAO34D,KAAKo/E,kBAAkBt4C,EAAMC,EAAOq7B,GAE7C,KAAKjgB,EAAAC,MAAMwW,YAAaimB,GAAW,EACnC,KAAK18B,EAAAC,MAAMlyC,KAKT,GAJAsuE,EAAWx+E,KAAKy5E,4BAA4B3yC,EAAMs7B,GAClDqc,EAAWz+E,KAAK6uE,YAGZ7uE,KAAK6uE,YAAY3vD,GAAE,KAAuB,CAE5C,GADIwP,EAAiB+vD,EAAS/vD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeykC,EAAAtkD,aAAa0B,KAC5C,CACZ43B,EAAO3mC,KAAK8+E,sBAAsBvxD,EAAUuZ,EAAM03C,EAAUz3C,EAAOgD,GACnE,MAOJ,OAJA/pC,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8oB,EAAWl/B,OAEN7K,KAAKL,OAAO6rC,cAGrB,GAAIqzC,EACFH,EAAY1+E,KAAK2zE,kBAAkB5sC,EAAO03C,EAAQ,OAC7C,CAGL,GAFAC,EAAY1+E,KAAKy5E,4BAA4B1yC,EAAO03C,GACpDE,EAAY3+E,KAAK6uE,cACb+P,EAAapxE,EAAAmH,KAAK0+C,kBAAkBorB,EAAUE,GAAW,IAiB3D,OALA3+E,KAAKmN,MACHI,EAAAhD,eAAew0E,8CACfh1C,EAAWl/B,MAAO,IAAK4zE,EAASjzE,WAAYmzE,EAAUnzE,YAExDxL,KAAK6uE,YAAczM,EACZziE,EAAO6rC,cAhBdgzC,EAAWx+E,KAAK28E,kBAAkB6B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP93C,GAEF43C,EAAY1+E,KAAK28E,kBAAkB+B,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP73C,GAWN,OAAQ/mC,KAAK6uE,YAAYr4D,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACEmwB,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASw8C,OAAQ6J,EAAUE,GAChD,MAEF,OACA,OACE/3C,EAAOhnC,EAAOknC,OACZ7mC,KAAKyU,QAAQc,SACTq8C,EAAAz5B,SAASknD,OACTztB,EAAAz5B,SAASw8C,OACb6J,EACAE,GAEF,MAEF,OACA,OACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASknD,OAAQb,EAAUE,GAChD,MAEF,QACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASmnD,OAAQd,EAAUE,GAChD,MAEF,QACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASonD,OAAQf,EAAUE,GAChD,MAEF,QACEx0E,QAAO,GACPy8B,EAAOhnC,EAAO6rC,cAGlB,MAEF,KAAK2W,EAAAC,MAAMyW,aAAcgmB,GAAW,EACpC,KAAK18B,EAAAC,MAAMhyC,MAKT,GAJAouE,EAAWx+E,KAAKy5E,4BAA4B3yC,EAAMs7B,GAClDqc,EAAWz+E,KAAK6uE,YAGZ7uE,KAAK6uE,YAAY3vD,GAAE,KAAuB,CAE5C,GADIwP,EAAiB+vD,EAAS/vD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeykC,EAAAtkD,aAAa2B,KAC5C,CACZ23B,EAAO3mC,KAAK8+E,sBAAsBvxD,EAAUuZ,EAAM03C,EAAUz3C,EAAOgD,GACnE,MAOJ,OAJA/pC,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8oB,EAAWl/B,OAEN7K,KAAKL,OAAO6rC,cAGrB,GAAIqzC,EACFH,EAAY1+E,KAAK2zE,kBAAkB5sC,EAAO03C,EAAQ,GAClDE,EAAY3+E,KAAK6uE,gBACZ,CAGL,GAFA6P,EAAY1+E,KAAKy5E,4BAA4B1yC,EAAO03C,GACpDE,EAAY3+E,KAAK6uE,cACb+P,EAAapxE,EAAAmH,KAAK0+C,kBAAkBorB,EAAUE,GAAW,IAiB3D,OALA3+E,KAAKmN,MACHI,EAAAhD,eAAew0E,8CACfh1C,EAAWl/B,MAAO,IAAK4zE,EAASjzE,WAAYmzE,EAAUnzE,YAExDxL,KAAK6uE,YAAczM,EACZziE,EAAO6rC,cAhBdgzC,EAAWx+E,KAAK28E,kBAAkB6B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP93C,GAEF43C,EAAY1+E,KAAK28E,kBAAkB+B,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP73C,GAWN,OAAQ/mC,KAAK6uE,YAAYr4D,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACEmwB,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASqnD,OAAQhB,EAAUE,GAChD,MAEF,OACA,OACE/3C,EAAOhnC,EAAOknC,OACZ7mC,KAAKyU,QAAQc,SACTq8C,EAAAz5B,SAASsnD,OACT7tB,EAAAz5B,SAASqnD,OACbhB,EACAE,GAEF,MAEF,OACA,OACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASsnD,OAAQjB,EAAUE,GAChD,MAEF,QACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASunD,OAAQlB,EAAUE,GAChD,MAEF,QACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASwnD,OAAQnB,EAAUE,GAChD,MAEF,QACEx0E,QAAO,GACPy8B,EAAOhnC,EAAO6rC,cAGlB,MAEF,KAAK2W,EAAAC,MAAM0W,gBAAiB+lB,GAAW,EACvC,KAAK18B,EAAAC,MAAMwV,SAKT,GAJA4mB,EAAWx+E,KAAKy5E,4BAA4B3yC,EAAMs7B,GAClDqc,EAAWz+E,KAAK6uE,YAGZ7uE,KAAK6uE,YAAY3vD,GAAE,KAAuB,CAE5C,GADIwP,EAAiB+vD,EAAS/vD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeykC,EAAAtkD,aAAa4B,KAC5C,CACZ03B,EAAO3mC,KAAK8+E,sBAAsBvxD,EAAUuZ,EAAM03C,EAAUz3C,EAAOgD,GACnE,MAOJ,OAJA/pC,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8oB,EAAWl/B,OAEN7K,KAAKL,OAAO6rC,cAGrB,GAAIqzC,EACFL,EAAWx+E,KAAK48E,uBAAuB4B,EAAUC,GACjDC,EAAY1+E,KAAK2zE,kBAAkB5sC,EAAO03C,EAAQ,OAC7C,CAGL,GAFAC,EAAY1+E,KAAKy5E,4BAA4B1yC,EAAO03C,GACpDE,EAAY3+E,KAAK6uE,cACb+P,EAAapxE,EAAAmH,KAAK0+C,kBAAkBorB,EAAUE,GAAW,IAiB3D,OALA3+E,KAAKmN,MACHI,EAAAhD,eAAew0E,8CACfh1C,EAAWl/B,MAAO,IAAK4zE,EAASjzE,WAAYmzE,EAAUnzE,YAExDxL,KAAK6uE,YAAczM,EACZziE,EAAO6rC,cAhBdgzC,EAAWx+E,KAAK28E,kBAAkB6B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP93C,GAEF43C,EAAY1+E,KAAK28E,kBAAkB+B,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP73C,GAWN,OAAQ/mC,KAAK6uE,YAAYr4D,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACEmwB,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAAS00C,OAAQ2R,EAAUE,GAChD,MAEF,OACA,OACE/3C,EAAOhnC,EAAOknC,OACZ7mC,KAAKyU,QAAQc,SACTq8C,EAAAz5B,SAASynD,OACThuB,EAAAz5B,SAAS00C,OACb2R,EACAE,GAEF,MAEF,OACA,OACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASynD,OAAQpB,EAAUE,GAChD,MAEF,QACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAAS0nD,OAAQrB,EAAUE,GAChD,MAEF,QACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAAS2nD,OAAQtB,EAAUE,GAChD,MAEF,QACEx0E,QAAO,GACPy8B,EAAOhnC,EAAO6rC,cAGlB,MAEF,KAAK2W,EAAAC,MAAM2W,yBAA0B8lB,GAAW,EAChD,KAAK18B,EAAAC,MAAMuV,kBAKT,GAJA6mB,EAAWx+E,KAAKy5E,4BAA4B3yC,EAAMs7B,GAClDqc,EAAWz+E,KAAK6uE,YAGZ7uE,KAAK6uE,YAAY3vD,GAAE,KAAuB,CAE5C,GADIwP,EAAiB+vD,EAAS/vD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeykC,EAAAtkD,aAAa6B,KAC5C,CACZy3B,EAAO3mC,KAAK8+E,sBAAsBvxD,EAAUuZ,EAAM03C,EAAUz3C,EAAOgD,GACnE,MAOJ,OAJA/pC,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8oB,EAAWl/B,OAEN7K,KAAKL,OAAO6rC,cAGrB,IAAIljB,OAAQ,EAGZ,GAAyB,IAArBtoB,KAAK6uE,YAAYr4D,MAGnB,GAFAkoE,EAAY1+E,KAAK2zE,kBAAkB5sC,EAAOv5B,EAAAmH,KAAK9Q,IAAG,GAClD86E,EAAY3+E,KAAK6uE,cACXvmD,EAAWtoB,KAAKuvE,gBAAiB,CAErC,KADIwQ,EAAY//E,KAAKwlB,QAAQ7L,aAAarM,EAAAtK,cAAcsE,QACxC,CACdtH,KAAKmN,MACHI,EAAAhD,eAAek3D,mBACf13B,EAAWl/B,MAAO,SAEpB87B,EAAOhnC,EAAO6rC,cACd,MAGF,KADIvpC,EAAY89E,EAAUrhE,QAAUqhE,EAAUrhE,QAAQxd,IAAIoM,EAAAtK,cAAcmF,KAAO,MAC/D,CACdnI,KAAKmN,MACHI,EAAAhD,eAAek3D,mBACf13B,EAAWl/B,MAAO,aAEpB87B,EAAOhnC,EAAO6rC,cACd,MAEFthC,OAAOjI,EAAUuU,MAAQm7C,EAAA/gD,YAAYgN,oBACrC5d,KAAKuvE,eAAiBjnD,EAAWtoB,KAAKoS,SAASyL,gBAAmC5b,EAAW,YAc/F,GARAu8E,EAAWx+E,KAAK28E,kBAAkB6B,EAChCx+E,KAAK6uE,YAAarhE,EAAAmH,KAAK7Q,KACvB,GAAO,EACPgjC,GAEF23C,EAAWz+E,KAAK6uE,YAChB6P,EAAY1+E,KAAK2zE,kBAAkB5sC,EAAOv5B,EAAAmH,KAAK7Q,IAAG,GAClD66E,EAAY3+E,KAAK6uE,cACXvmD,EAAWtoB,KAAKwvE,gBAAiB,CAErC,KADIuQ,EAAY//E,KAAKwlB,QAAQ7L,aAAarM,EAAAtK,cAAcqE,OACxC,CACdrH,KAAKmN,MACHI,EAAAhD,eAAek3D,mBACf13B,EAAWl/B,MAAO,QAEpB87B,EAAOhnC,EAAO6rC,cACd,MAGF,KADIvpC,EAAY89E,EAAUrhE,QAAUqhE,EAAUrhE,QAAQxd,IAAIoM,EAAAtK,cAAcmF,KAAO,MAC/D,CACdnI,KAAKmN,MACHI,EAAAhD,eAAek3D,mBACf13B,EAAWl/B,MAAO,YAEpB87B,EAAOhnC,EAAO6rC,cACd,MAEFthC,OAAOjI,EAAUuU,MAAQm7C,EAAA/gD,YAAYgN,oBACrC5d,KAAKwvE,eAAiBlnD,EAAWtoB,KAAKoS,SAASyL,gBAAmC5b,EAAW,MAM/F0kC,EAHIre,GAAYtoB,KAAK60E,gBAAgBvsD,GAG9BtoB,KAAKggF,eAAe13D,EAAU,CAAEk2D,EAAUE,GAAa30C,GAFvDpqC,EAAO6rC,cAIhB,MAEF,KAAK2W,EAAAC,MAAM4W,aAAc6lB,GAAW,EACpC,KAAK18B,EAAAC,MAAMyV,MAKT,GAJA2mB,EAAWx+E,KAAKy5E,4BAA4B3yC,EAAMs7B,GAClDqc,EAAWz+E,KAAK6uE,YAGZ7uE,KAAK6uE,YAAY3vD,GAAE,KAAuB,CAE5C,GADIwP,EAAiB+vD,EAAS/vD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeykC,EAAAtkD,aAAa8B,KAC5C,CACZw3B,EAAO3mC,KAAK8+E,sBAAsBvxD,EAAUuZ,EAAM03C,EAAUz3C,EAAOgD,GACnE,MAOJ,OAJA/pC,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8oB,EAAWl/B,OAEN7K,KAAKL,OAAO6rC,cAGrB,GAAIqzC,EACFL,EAAWx+E,KAAK48E,uBAAuB4B,EAAUC,GACjDC,EAAY1+E,KAAK2zE,kBAAkB5sC,EAAO03C,EAAQ,GAClDE,EAAY3+E,KAAK6uE,gBACZ,CAGL,GAFA6P,EAAY1+E,KAAKy5E,4BAA4B1yC,EAAO03C,GACpDE,EAAY3+E,KAAK6uE,cACb+P,EAAapxE,EAAAmH,KAAK0+C,kBAAkBorB,EAAUE,GAAW,IAiB3D,OALA3+E,KAAKmN,MACHI,EAAAhD,eAAew0E,8CACfh1C,EAAWl/B,MAAO,IAAK4zE,EAASjzE,WAAYmzE,EAAUnzE,YAExDxL,KAAK6uE,YAAczM,EACZziE,EAAO6rC,cAhBdgzC,EAAWx+E,KAAK28E,kBAAkB6B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP93C,GAEF43C,EAAY1+E,KAAK28E,kBAAkB+B,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP73C,GAWN,OAAQ/mC,KAAK6uE,YAAYr4D,MACvB,OACA,OACA,OACEmwB,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAAS8nD,OAAQzB,EAAUE,GAChD,MAEF,OACE/3C,EAAOhnC,EAAOknC,OACZ7mC,KAAKyU,QAAQc,SACTq8C,EAAAz5B,SAAS+nD,OACTtuB,EAAAz5B,SAAS8nD,OACbzB,EACAE,GAEF,MAEF,OACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAAS+nD,OAAQ1B,EAAUE,GAChD,MAEF,OACA,OACA,QAIA,OACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAAS+0C,OAAQsR,EAAUE,GAChD,MAEF,OACE/3C,EAAOhnC,EAAOknC,OACZ7mC,KAAKyU,QAAQc,SACTq8C,EAAAz5B,SAASgoD,OACTvuB,EAAAz5B,SAAS+0C,OACbsR,EACAE,GAEF,MAEF,OACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASgoD,OAAQ3B,EAAUE,GAChD,MAEF,QACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASioD,OAAQ5B,EAAUE,GAChD,MAEF,QACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASkoD,OAAQ7B,EAAUE,GAChD,MAEF,QACEx0E,QAAO,GACPy8B,EAAOhnC,EAAO6rC,cAGlB,MAEF,KAAK2W,EAAAC,MAAM6W,eAAgB4lB,GAAW,EACtC,KAAK18B,EAAAC,MAAM0V,QAKT,GAJA0mB,EAAWx+E,KAAKy5E,4BAA4B3yC,EAAMs7B,GAClDqc,EAAWz+E,KAAK6uE,YAGZ7uE,KAAK6uE,YAAY3vD,GAAE,KAAuB,CAE5C,GADIwP,EAAiB+vD,EAAS/vD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeykC,EAAAtkD,aAAa+B,KAC5C,CACZu3B,EAAO3mC,KAAK8+E,sBAAsBvxD,EAAUuZ,EAAM03C,EAAUz3C,EAAOgD,GACnE,MAOJ,OAJA/pC,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8oB,EAAWl/B,OAEN7K,KAAKL,OAAO6rC,cAGrB,GAAIqzC,EACFL,EAAWx+E,KAAK48E,uBAAuB4B,EAAUC,GACjDC,EAAY1+E,KAAK2zE,kBAAkB5sC,EAAO03C,EAAQ,GAClDE,EAAY3+E,KAAK6uE,gBACZ,CAGL,GAFA6P,EAAY1+E,KAAKy5E,4BAA4B1yC,EAAO03C,GACpDE,EAAY3+E,KAAK6uE,cACb+P,EAAapxE,EAAAmH,KAAK0+C,kBAAkBorB,EAAUE,GAAW,IAiB3D,OALA3+E,KAAKmN,MACHI,EAAAhD,eAAew0E,8CACfh1C,EAAWl/B,MAAO,IAAK4zE,EAASjzE,WAAYmzE,EAAUnzE,YAExDxL,KAAK6uE,YAAczM,EACZziE,EAAO6rC,cAhBdgzC,EAAWx+E,KAAK28E,kBAAkB6B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP93C,GAEF43C,EAAY1+E,KAAK28E,kBAAkB+B,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP73C,GAWN,OAAQ/mC,KAAK6uE,YAAYr4D,MACvB,OACA,OAIA,OACEmwB,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASg1C,OAAQqR,EAAUE,GAChD,MAEF,OACE/3C,EAAOhnC,EAAOknC,OACZ7mC,KAAKyU,QAAQc,SACTq8C,EAAAz5B,SAASmoD,OACT1uB,EAAAz5B,SAASg1C,OACbqR,EACAE,GAEF,MAEF,OACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASmoD,OAAQ9B,EAAUE,GAChD,MAEF,OACA,OACA,QAIA,OACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASi1C,OAAQoR,EAAUE,GAChD,MAEF,OACE/3C,EAAOhnC,EAAOknC,OACZ7mC,KAAKyU,QAAQc,SACTq8C,EAAAz5B,SAASooD,OACT3uB,EAAAz5B,SAASi1C,OACboR,EACAE,GAEF,MAEF,OACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASooD,OAAQ/B,EAAUE,GAChD,MAEF,QAEE,KADIp2D,EAAWtoB,KAAKqvE,gBACL,CAEb,KADI0Q,EAAY//E,KAAKwlB,QAAQ7L,aAAarM,EAAAtK,cAAcsE,QACxC,CACdtH,KAAKmN,MACHI,EAAAhD,eAAek3D,mBACf13B,EAAWl/B,MAAO,SAEpB87B,EAAOhnC,EAAO6rC,cACd,MAGF,KADIvpC,EAAY89E,EAAUrhE,QAAUqhE,EAAUrhE,QAAQxd,IAAIoM,EAAAtK,cAAcoF,KAAO,MAC/D,CACdpI,KAAKmN,MACHI,EAAAhD,eAAek3D,mBACf13B,EAAWl/B,MAAO,aAEpB87B,EAAOhnC,EAAO6rC,cACd,MAEFthC,OAAOjI,EAAUuU,MAAQm7C,EAAA/gD,YAAYgN,oBACrC5d,KAAKqvE,eAAiB/mD,EAAWtoB,KAAKoS,SAASyL,gBAAmC5b,EAAW,MAK7F0kC,EAHIre,GAAYtoB,KAAK60E,gBAAgBvsD,GAG9BtoB,KAAKggF,eAAe13D,EAAU,CAAEk2D,EAAUE,GAAa30C,GAFvDpqC,EAAO6rC,cAIhB,MAEF,QAEE,KADIljB,EAAWtoB,KAAKsvE,gBACL,CACb,IAAIyQ,EASA99E,EARJ,KADI89E,EAAY//E,KAAKwlB,QAAQ7L,aAAarM,EAAAtK,cAAcqE,OACxC,CACdrH,KAAKmN,MACHI,EAAAhD,eAAek3D,mBACf13B,EAAWl/B,MAAO,QAEpB87B,EAAOhnC,EAAO6rC,cACd,MAGF,KADIvpC,EAAY89E,EAAUrhE,QAAUqhE,EAAUrhE,QAAQxd,IAAIoM,EAAAtK,cAAcoF,KAAO,MAC/D,CACdpI,KAAKmN,MACHI,EAAAhD,eAAek3D,mBACf13B,EAAWl/B,MAAO,YAEpB87B,EAAOhnC,EAAO6rC,cACd,MAEFthC,OAAOjI,EAAUuU,MAAQm7C,EAAA/gD,YAAYgN,oBACrC5d,KAAKsvE,eAAiBhnD,EAAWtoB,KAAKoS,SAASyL,gBAAmC5b,EAAW,MAK7F0kC,EAHIre,GAAYtoB,KAAK60E,gBAAgBvsD,GAG9BtoB,KAAKggF,eAAe13D,EAAU,CAAEk2D,EAAUE,GAAa30C,GAFvDpqC,EAAO6rC,cAIhB,MAEF,QACEthC,QAAO,GACPy8B,EAAOhnC,EAAO6rC,cAGlB,MAEF,KAAK2W,EAAAC,MAAM8W,yBAA0B2lB,GAAW,EAChD,KAAK18B,EAAAC,MAAM6V,kBAKT,GAJAumB,EAAWx+E,KAAKy5E,4BAA4B3yC,EAAMs7B,EAAeoe,SACjE/B,EAAWz+E,KAAK6uE,YAGZ7uE,KAAK6uE,YAAY3vD,GAAE,KAAuB,CAE5C,GADIwP,EAAiB+vD,EAAS/vD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeykC,EAAAtkD,aAAa2C,aAC5C,CACZ22B,EAAO3mC,KAAK8+E,sBAAsBvxD,EAAUuZ,EAAM03C,EAAUz3C,EAAOgD,GACnE,MAOJ,OAJA/pC,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8oB,EAAWl/B,OAEN7K,KAAKL,OAAO6rC,cAKrB,OAFAkzC,EAAY1+E,KAAK2zE,kBAAkB5sC,EAAO03C,EAAQ,GAClDE,EAAY3+E,KAAK6uE,YACT7uE,KAAK6uE,YAAYr4D,MACvB,OACA,OACA,OACA,OACA,QACA,OACA,OACEmwB,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAAS40C,OAAQyR,EAAUE,GAChD,MAEF,OACA,OACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASsoD,OAAQjC,EAAUE,GAChD,MAEF,OACA,OACE/3C,EAAOhnC,EAAOknC,OACZ7mC,KAAKyU,QAAQc,SACTq8C,EAAAz5B,SAASsoD,OACT7uB,EAAAz5B,SAAS40C,OACbyR,EACAE,GAEF,MAEF,QACA,QAKE,OAJA1+E,KAAKmN,MACHI,EAAAhD,eAAem2E,2CACf32C,EAAWl/B,MAAOs3C,EAAA8U,sBAAsBltB,EAAWsb,UAAWrlD,KAAK6uE,YAAYrjE,YAE1E7L,EAAO6rC,cAEhB,QACEthC,QAAO,GACPy8B,EAAOhnC,EAAO6rC,cAGlB,MAEF,KAAK2W,EAAAC,MAAM+W,+BAAgC0lB,GAAW,EACtD,KAAK18B,EAAAC,MAAM8V,wBAKT,GAJAsmB,EAAWx+E,KAAKy5E,4BAA4B3yC,EAAMs7B,EAAeoe,SACjE/B,EAAWz+E,KAAK6uE,YAGZ7uE,KAAK6uE,YAAY3vD,GAAE,KAAuB,CAE5C,GADIwP,EAAiB+vD,EAAS/vD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeykC,EAAAtkD,aAAauC,aAC5C,CACZ+2B,EAAO3mC,KAAK8+E,sBAAsBvxD,EAAUuZ,EAAM03C,EAAUz3C,EAAOgD,GACnE,MAOJ,OAJA/pC,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8oB,EAAWl/B,OAEN7K,KAAKL,OAAO6rC,cAMrB,OAHAgzC,EAAWx+E,KAAK48E,uBAAuB4B,EAAUC,GACjDC,EAAY1+E,KAAK2zE,kBAAkB5sC,EAAO03C,EAAQ,GAClDE,EAAY3+E,KAAK6uE,YACT7uE,KAAK6uE,YAAYr4D,MACvB,OACA,OAIA,OACEmwB,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAAS60C,OAAQwR,EAAUE,GAChD,MAEF,OACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASwoD,OAAQnC,EAAUE,GAChD,MAEF,OACE/3C,EAAOhnC,EAAOknC,OACZ7mC,KAAKyU,QAAQc,SACTq8C,EAAAz5B,SAASwoD,OACT/uB,EAAAz5B,SAAS60C,OACbwR,EACAE,GAEF,MAEF,OACA,OACA,QAIA,OACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAAS80C,OAAQuR,EAAUE,GAChD,MAEF,OACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASyoD,OAAQpC,EAAUE,GAChD,MAEF,OACE/3C,EAAOhnC,EAAOknC,OACZ7mC,KAAKyU,QAAQc,SACTq8C,EAAAz5B,SAASyoD,OACThvB,EAAAz5B,SAAS80C,OACbuR,EACAE,GAEF,MAEF,QACA,QAKE,OAJA1+E,KAAKmN,MACHI,EAAAhD,eAAem2E,2CACf32C,EAAWl/B,MAAOs3C,EAAA8U,sBAAsBltB,EAAWsb,UAAWrlD,KAAK6uE,YAAYrjE,YAE1E7L,EAAO6rC,cAEhB,QACEthC,QAAO,GACPy8B,EAAOhnC,EAAO6rC,cAGlB,MAEF,KAAK2W,EAAAC,MAAMgX,2CAA4CylB,GAAW,EAClE,KAAK18B,EAAAC,MAAM+V,oCAKT,GAJAqmB,EAAWx+E,KAAKy5E,4BAA4B3yC,EAAMs7B,EAAeoe,SACjE/B,EAAWz+E,KAAK6uE,YAGZ7uE,KAAK6uE,YAAY3vD,GAAE,KAAuB,CAE5C,GADIwP,EAAiB+vD,EAAS/vD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeykC,EAAAtkD,aAAawC,eAC5C,CACZ82B,EAAO3mC,KAAK8+E,sBAAsBvxD,EAAUuZ,EAAM03C,EAAUz3C,EAAOgD,GACnE,MAOJ,OAJA/pC,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8oB,EAAWl/B,OAEN7K,KAAKL,OAAO6rC,cAMrB,OAHAgzC,EAAWx+E,KAAK48E,uBAAuB4B,EAAUC,GACjDC,EAAY1+E,KAAK2zE,kBAAkB5sC,EAAO03C,EAAQ,GAClDE,EAAY3+E,KAAK6uE,YACT7uE,KAAK6uE,YAAYr4D,MACvB,OACA,OACA,QACEmwB,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAAS80C,OAAQuR,EAAUE,GAElD,OACA,OACA,OACA,OACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAAS80C,OAAQuR,EAAUE,GAChD,MAEF,OACA,OACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASyoD,OAAQpC,EAAUE,GAChD,MAEF,OACA,OACE/3C,EAAOhnC,EAAOknC,OACZ7mC,KAAKyU,QAAQc,SACTq8C,EAAAz5B,SAASyoD,OACThvB,EAAAz5B,SAAS80C,OACbuR,EACAE,GAEF,MAEF,QACA,QAKE,OAJA1+E,KAAKmN,MACHI,EAAAhD,eAAem2E,2CACf32C,EAAWl/B,MAAOs3C,EAAA8U,sBAAsBltB,EAAWsb,UAAWrlD,KAAK6uE,YAAYrjE,YAE1E7L,EAAO6rC,cAEhB,QACEthC,QAAO,GACPy8B,EAAOhnC,EAAO6rC,cAGlB,MAEF,KAAK2W,EAAAC,MAAMiX,iBAAkBwlB,GAAW,EACxC,KAAK18B,EAAAC,MAAMgW,UAKT,GAJAomB,EAAWx+E,KAAKy5E,4BAA4B3yC,EAAMs7B,EAAeoe,SACjE/B,EAAWz+E,KAAK6uE,YAGZ7uE,KAAK6uE,YAAY3vD,GAAE,KAAuB,CAE5C,GADIwP,EAAiB+vD,EAAS/vD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeykC,EAAAtkD,aAAagC,aAC5C,CACZs3B,EAAO3mC,KAAK8+E,sBAAsBvxD,EAAUuZ,EAAM03C,EAAUz3C,EAAOgD,GACnE,MAOJ,OAJA/pC,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8oB,EAAWl/B,OAEN7K,KAAKL,OAAO6rC,cAGrB,GAAIqzC,EACFH,EAAY1+E,KAAK2zE,kBAAkB5sC,EAAO03C,EAAQ,GAClDE,EAAY3+E,KAAK6uE,gBACZ,CAGL,GAFA6P,EAAY1+E,KAAKy5E,4BAA4B1yC,EAAO03C,GACpDE,EAAY3+E,KAAK6uE,cACb+P,EAAapxE,EAAAmH,KAAK0+C,kBAAkBorB,EAAUE,GAAW,IAiB3D,OALA3+E,KAAKmN,MACHI,EAAAhD,eAAew0E,8CACfh1C,EAAWl/B,MAAO,IAAK4zE,EAASjzE,WAAYmzE,EAAUnzE,YAExDxL,KAAK6uE,YAAczM,EACZziE,EAAO6rC,cAhBdgzC,EAAWx+E,KAAK28E,kBAAkB6B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP93C,GAEF43C,EAAY1+E,KAAK28E,kBAAkB+B,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP73C,GAWN,OAAQ/mC,KAAK6uE,YAAYr4D,MACvB,OACA,OACA,OACA,OACA,OACA,QACA,OACEmwB,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAAS20C,OAAQ0R,EAAUE,GAChD,MAEF,OACA,OACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAAS0oD,OAAQrC,EAAUE,GAChD,MAEF,OACA,OACE/3C,EAAOhnC,EAAOknC,OACZ7mC,KAAKyU,QAAQc,SACTq8C,EAAAz5B,SAAS0oD,OACTjvB,EAAAz5B,SAAS20C,OACb0R,EACAE,GAEF,MAEF,QACA,QAKE,OAJA1+E,KAAKmN,MACHI,EAAAhD,eAAem2E,2CACf32C,EAAWl/B,MAAOs3C,EAAA8U,sBAAsBltB,EAAWsb,UAAWrlD,KAAK6uE,YAAYrjE,YAE1E7L,EAAO6rC,cAEhB,QACEthC,QAAO,GACPy8B,EAAOhnC,EAAO6rC,cAGlB,MAEF,KAAK2W,EAAAC,MAAMkX,WAAYulB,GAAW,EAClC,KAAK18B,EAAAC,MAAMiW,IAKT,GAJAmmB,EAAWx+E,KAAKy5E,4BAA4B3yC,EAAMs7B,EAAeoe,SACjE/B,EAAWz+E,KAAK6uE,YAGZ7uE,KAAK6uE,YAAY3vD,GAAE,KAAuB,CAE5C,GADIwP,EAAiB+vD,EAAS/vD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeykC,EAAAtkD,aAAaiC,YAC5C,CACZq3B,EAAO3mC,KAAK8+E,sBAAsBvxD,EAAUuZ,EAAM03C,EAAUz3C,EAAOgD,GACnE,MAOJ,OAJA/pC,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8oB,EAAWl/B,OAEN7K,KAAKL,OAAO6rC,cAGrB,GAAIqzC,EACFH,EAAY1+E,KAAK2zE,kBAAkB5sC,EAAO03C,EAAQ,GAClDE,EAAY3+E,KAAK6uE,gBACZ,CAGL,GAFA6P,EAAY1+E,KAAKy5E,4BAA4B1yC,EAAO03C,GACpDE,EAAY3+E,KAAK6uE,cACb+P,EAAapxE,EAAAmH,KAAK0+C,kBAAkBorB,EAAUE,GAAW,IAiB3D,OALA3+E,KAAKmN,MACHI,EAAAhD,eAAew0E,8CACfh1C,EAAWl/B,MAAO,IAAK4zE,EAASjzE,WAAYmzE,EAAUnzE,YAExDxL,KAAK6uE,YAAczM,EACZziE,EAAO6rC,cAhBdgzC,EAAWx+E,KAAK28E,kBAAkB6B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP93C,GAEF43C,EAAY1+E,KAAK28E,kBAAkB+B,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP73C,GAWN,OAAQ/mC,KAAK6uE,YAAYr4D,MACvB,OACA,OACA,OACA,OACA,QACEmwB,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAAS2oD,MAAOtC,EAAUE,GAC/C,MAEF,OACA,OACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAAS2oD,MAAOtC,EAAUE,GAC/C,MAEF,OACA,OACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAAS4oD,MAAOvC,EAAUE,GAC/C,MAEF,OACA,OACE/3C,EAAOhnC,EAAOknC,OACZ7mC,KAAKyU,QAAQc,SACTq8C,EAAAz5B,SAAS4oD,MACTnvB,EAAAz5B,SAAS2oD,MACbtC,EACAE,GAEF,MAEF,QACA,QAKE,OAJA1+E,KAAKmN,MACHI,EAAAhD,eAAem2E,2CACf32C,EAAWl/B,MAAOs3C,EAAA8U,sBAAsBltB,EAAWsb,UAAWrlD,KAAK6uE,YAAYrjE,YAE1E7L,EAAO6rC,cAEhB,QACEthC,QAAO,GACPy8B,EAAOhnC,EAAO6rC,cAGlB,MAEF,KAAK2W,EAAAC,MAAMmX,aAAcslB,GAAW,EACpC,KAAK18B,EAAAC,MAAMkW,MAKT,GAJAkmB,EAAWx+E,KAAKy5E,4BAA4B3yC,EAAMs7B,EAAeoe,SACjE/B,EAAWz+E,KAAK6uE,YAGZ7uE,KAAK6uE,YAAY3vD,GAAE,KAAuB,CAC5C,IAAIwP,EAEEnB,EADN,GADImB,EAAiB+vD,EAAS/vD,eAG5B,GADInB,EAAWmB,EAAexB,eAAeykC,EAAAtkD,aAAakC,aAC5C,CACZo3B,EAAO3mC,KAAK8+E,sBAAsBvxD,EAAUuZ,EAAM03C,EAAUz3C,EAAOgD,GACnE,MAOJ,OAJA/pC,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8oB,EAAWl/B,OAEN7K,KAAKL,OAAO6rC,cAGrB,GAAIqzC,EACFH,EAAY1+E,KAAK2zE,kBAAkB5sC,EAAO03C,EAAQ,GAClDE,EAAY3+E,KAAK6uE,gBACZ,CAGL,GAFA6P,EAAY1+E,KAAKy5E,4BAA4B1yC,EAAO03C,GACpDE,EAAY3+E,KAAK6uE,cACb+P,EAAapxE,EAAAmH,KAAK0+C,kBAAkBorB,EAAUE,GAAW,IAiB3D,OALA3+E,KAAKmN,MACHI,EAAAhD,eAAew0E,8CACfh1C,EAAWl/B,MAAO,IAAK4zE,EAASjzE,WAAYmzE,EAAUnzE,YAExDxL,KAAK6uE,YAAczM,EACZziE,EAAO6rC,cAhBdgzC,EAAWx+E,KAAK28E,kBAAkB6B,EAChCC,EAAUA,EAAWG,GACrB,GAAO,EACP93C,GAEF43C,EAAY1+E,KAAK28E,kBAAkB+B,EACjCC,EAAWA,EAAYC,GACvB,GAAO,EACP73C,GAWN,OAAQ/mC,KAAK6uE,YAAYr4D,MACvB,OACA,OACA,OACA,OACA,QACEmwB,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAAS6oD,OAAQxC,EAAUE,GAChD,MAEF,OACA,OACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAAS6oD,OAAQxC,EAAUE,GAChD,MAEF,OACA,OACE/3C,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAAS8oD,OAAQzC,EAAUE,GAChD,MAEF,OACA,OACE/3C,EAAOhnC,EAAOknC,OACZ7mC,KAAKyU,QAAQc,SACTq8C,EAAAz5B,SAAS8oD,OACTrvB,EAAAz5B,SAAS6oD,OACbxC,EACAE,GAEF,MAEF,QACA,QAKE,OAJA1+E,KAAKmN,MACHI,EAAAhD,eAAem2E,2CACf32C,EAAWl/B,MAAOs3C,EAAA8U,sBAAsBltB,EAAWsb,UAAWrlD,KAAK6uE,YAAYrjE,YAE1E7L,EAAO6rC,cAEhB,QACEthC,QAAO,GACPy8B,EAAOhnC,EAAO6rC,cAGlB,MAKF,KAAK2W,EAAAC,MAAMqW,oBACT,IAAItuC,EAAOnqB,KAAKiwE,YAChBuO,EAAWx+E,KAAKy5E,4BAA4B3yC,EAAMs7B,EAAgByV,GAClE4G,EAAWz+E,KAAK6uE,YAEhB,IAAIqS,EAAY/2D,EAAKu9C,OAOrB,GANA1nE,KAAKiwE,YAAciR,EACnBA,EAAU7W,qBAAqBmU,GAC/BE,EAAY1+E,KAAK2zE,kBAAkB5sC,EAAO03C,EAAU,GAA8C,EAAlB5G,GAChF8G,EAAYF,EAGRrc,GAAkB50D,EAAAmH,KAAK/Q,MAAQw+D,GAAkB50D,EAAAmH,KAAKG,KACxD4pE,EAAY1+E,KAAKmhF,6BAA6BD,EAAWxC,EAAWC,GACpEuC,EAAUpY,mBACV9oE,KAAKiwE,YAAc9lD,EACnBnqB,KAAK6uE,YAAcrhE,EAAAmH,KAAK/Q,KACxB+iC,EAAOhnC,EAAOwqC,GACZnqC,KAAKq5E,cAAcmF,EAAUC,GAC7Bz+E,KAAKq5E,cAAcqF,EAAWC,GAC9Bh/E,EAAOyD,IAAI,SAIR,GAAIq7E,EAASxM,UAAW,CAC7B,IAAImP,EAAyBphF,KAAKovE,oBAAoB76D,IAAIiqE,GACtD6C,EAA0BrhF,KAAKovE,oBAAoB76D,IAAImqE,GACvDnJ,EAAOprD,EAAK09C,aAAa4W,GAC7BD,EAAW7+E,EAAO4nC,UAAUguC,EAAK5tD,MAAO62D,GAIxC,IAAI8C,GAAmB,EACnBF,GAA0BC,EACvBD,GAGH1C,EAAY1+E,KAAKkyE,WAAWwM,GAC5B2C,GAA0B,GAH1BC,GAAmB,EAKK,GAAfzJ,IACX6G,EAAY1+E,KAAKuhF,gBAAgB7C,EAAWwC,EAAW/2D,IAGzD,IAAIq3D,EAAa,IAAIz6E,MACjBq6E,GACFI,EAAW/L,QACTz1E,KAAKyhF,YACH9hF,EAAO0nC,UAAUkuC,EAAK5tD,MAAO82D,EAASlrB,kBAI5CmrB,EAAY1+E,KAAKmhF,6BAA6BD,EAAWxC,EAAWC,EAAW6C,GAC/EN,EAAUpY,mBACV9oE,KAAKiwE,YAAc9lD,EAEnBwc,EAAOhnC,EAAOwqC,GACZnqC,KAAKq5E,cAAcmF,EAAUC,GAC7BC,EACA4C,EACIthF,KAAKkyE,WACHvyE,EAAO0nC,UAAUkuC,EAAK5tD,MAAO82D,EAASlrB,iBAExC5zD,EAAO0nC,UAAUkuC,EAAK5tD,MAAO82D,EAASlrB,kBAExC6tB,GAA0BC,IAAyBrhF,KAAKovE,oBAAoBr6D,IAAI4xB,GAChF4uC,GAAMprD,EAAKm+C,cAAciN,QAS7B,GALAmJ,EAAY1+E,KAAKmhF,6BAA6BD,EAAWxC,EAAWC,GACpEuC,EAAUpY,mBACV9oE,KAAKiwE,YAAc9lD,EAGfwc,EAAOhnC,EAAO00C,gBAAgBmqC,GAAU,EAAM,GAChD73C,EAAOhnC,EAAOwqC,GACZnqC,KAAKq5E,cAAcmF,EAAUx+E,KAAK6uE,aAClC6P,EACA/3C,OAIG,CACL,IAAI4zC,EAAYpwD,EAAK09C,aAAa4W,GAC7Bt0D,EAAK0gD,YAAY2T,EAAUC,IAAWt0D,EAAKi+C,aAAamS,EAAU5yD,MAAOha,EAAAk5D,WAAWiE,SACrF3gD,EAAKigD,UAAUoU,EAAUC,IAAWt0D,EAAKi+C,aAAamS,EAAU5yD,MAAOha,EAAAk5D,WAAW7C,SACtFr9B,EAAOhnC,EAAOwqC,GACZnqC,KAAKq5E,cAAc15E,EAAO4nC,UAAUgzC,EAAU5yD,MAAO62D,GAAWC,GAChEC,EACA/+E,EAAO0nC,UAAUkzC,EAAU5yD,MAAO82D,EAASlrB,iBAIjDvzD,KAAK6uE,YAAc4P,EACnB,MAEF,KAAKt8B,EAAAC,MAAMsW,QACLvuC,EAAOnqB,KAAKiwE,YAChBuO,EAAWx+E,KAAKy5E,4BAA4B3yC,EAAMs7B,EAAgByV,GAClE4G,EAAWz+E,KAAK6uE,YAEZqS,EAAY/2D,EAAKu9C,OAOrB,GANA1nE,KAAKiwE,YAAciR,EACnBA,EAAU1W,sBAAsBgU,GAChCE,EAAY1+E,KAAK2zE,kBAAkB5sC,EAAO03C,EAAU,EAA2B5G,GAC/E8G,EAAYF,EAGRrc,GAAkB50D,EAAAmH,KAAK/Q,MAAQw+D,GAAkB50D,EAAAmH,KAAKG,KACxD4pE,EAAY1+E,KAAKmhF,6BAA6BD,EAAWxC,EAAWD,GACpEyC,EAAUpY,mBACV9oE,KAAKiwE,YAAc9lD,EACnBnqB,KAAK6uE,YAAcrhE,EAAAmH,KAAK/Q,KACxB+iC,EAAOhnC,EAAOwqC,GACZnqC,KAAKq5E,cAAcmF,EAAUC,GAC7B9+E,EAAOyD,IAAI,GACXpD,KAAKq5E,cAAcqF,EAAWC,SAI3B,GAAIF,EAASxM,UAAW,CACzBmP,EAAyBphF,KAAKovE,oBAAoB76D,IAAIiqE,GACtD6C,EAA0BrhF,KAAKovE,oBAAoB76D,IAAImqE,GACvDnJ,EAAOprD,EAAK09C,aAAa4W,GAC7BD,EAAW7+E,EAAO4nC,UAAUguC,EAAK5tD,MAAO62D,GAIxC,IAAIkD,GAAmB,EACnBN,GAA0BC,EACvBD,GAGH1C,EAAY1+E,KAAKkyE,WAAWwM,GAC5B2C,GAA0B,GAH1BK,GAAmB,EAKK,GAAf7J,IACX6G,EAAY1+E,KAAKuhF,gBAAgB7C,EAAWwC,EAAW/2D,IAGrDq3D,EAAa,IAAIz6E,MACjBq6E,GAGFI,EAAW/L,QACTz1E,KAAKyhF,YACH9hF,EAAO0nC,UAAUkuC,EAAK5tD,MAAO82D,EAASlrB,kBAI5CmrB,EAAY1+E,KAAKmhF,6BAA6BD,EAAWxC,EAAWC,EAAW6C,GAC/EN,EAAUpY,mBACV9oE,KAAKiwE,YAAc9lD,EAEnBwc,EAAOhnC,EAAOwqC,GACZnqC,KAAKq5E,cAAcmF,EAAUC,GAC7BiD,EACI1hF,KAAKkyE,WACHvyE,EAAO0nC,UAAUkuC,EAAK5tD,MAAO82D,EAASlrB,iBAExC5zD,EAAO0nC,UAAUkuC,EAAK5tD,MAAO82D,EAASlrB,gBAC1CmrB,IAEE0C,GAA0BC,IAAyBrhF,KAAKovE,oBAAoBr6D,IAAI4xB,GAChF4uC,GAAMprD,EAAKm+C,cAAciN,QAS7B,GALAmJ,EAAY1+E,KAAKmhF,6BAA6BD,EAAWxC,EAAWC,GACpEuC,EAAUpY,mBACV9oE,KAAKiwE,YAAc9lD,EAGfwc,EAAOhnC,EAAO00C,gBAAgBmqC,GAAU,EAAM,GAChD73C,EAAOhnC,EAAOwqC,GACZnqC,KAAKq5E,cAAcmF,EAAUC,GAC7B93C,EACA+3C,OAIG,CACDnE,EAAYpwD,EAAKo+C,oBAAoBkW,GACpCt0D,EAAK0gD,YAAY2T,EAAUC,IAAWt0D,EAAKi+C,aAAamS,EAAU5yD,MAAOha,EAAAk5D,WAAWiE,SACrF3gD,EAAKigD,UAAUoU,EAAUC,IAAWt0D,EAAKi+C,aAAamS,EAAU5yD,MAAOha,EAAAk5D,WAAW7C,SACtFr9B,EAAOhnC,EAAOwqC,GACZnqC,KAAKq5E,cAAc15E,EAAO4nC,UAAUgzC,EAAU5yD,MAAO62D,GAAWC,GAChE9+E,EAAO0nC,UAAUkzC,EAAU5yD,MAAO82D,EAASlrB,gBAC3CmrB,GAIN1+E,KAAK6uE,YAAc4P,EACnB,MAEF,QACEv0E,QAAO,GACPy8B,EAAO3mC,KAAKL,OAAO6rC,cAGvB,IAAKqzC,EAAU,OAAOl4C,EACtB,IAAIv0B,EAAWpS,KAAKoS,SAChBgb,EAASptB,KAAKoS,SAASkwD,kBAAkBx7B,EAAM9mC,KAAKiwE,aACxD,OAAK7iD,EACEptB,KAAK2hF,eACVv0D,EACAuZ,EACAG,EACA10B,EAAS8tD,sBACT9tD,EAAS+tD,yBACTiC,GAAkB50D,EAAAmH,KAAKG,MAPLnV,EAAO6rC,eAW7BkjC,EAAAzsE,UAAA2/E,qBAAA,SACEhb,EACAtlE,EACA+wE,EACA9M,GAIA,OAAOvlE,KAAKggF,eAAepZ,EAAkB,CAAEyL,GAAa9M,GAAY,IAG1EmJ,EAAAzsE,UAAA68E,sBAAA,SACElY,EACA9/B,EACA03C,EACAz3C,EACAw+B,GAEA,IAAIoZ,EACJ,GAAI/X,EAAiB1nD,GAAG5R,EAAAjL,YAAYwiB,UAAW,CAC7C,IAAInS,EAAgBxI,OAAO08D,EAAiB3yD,QAAS/J,OAAOwI,EAAc8D,MAAQm7C,EAAA/gD,YAAY6N,OAC9FkgE,EAAY/X,EAAiB5yD,UAAU+V,eAAe,QAUtD40D,EAAY/X,EAAiB5yD,UAAU+V,eAAe,GAExD,IAAI20D,EAAY1+E,KAAK2zE,kBAAkB5sC,EAAO43C,EAAS,GACvD,OAAO3+E,KAAKggF,eAAepZ,EAAkB,CAAE4X,EAAUE,GAAanZ,IAGxEmJ,EAAAzsE,UAAAm9E,kBAAA,SAAkBr1C,EAAwBowC,EAA6B/X,GACrE,IACIhwD,EADUpS,KAAKwlB,QACIpT,SACnB+X,EAAOnqB,KAAKiwE,YACZ7iD,EAAShb,EAASkwD,kBAAkBv4B,EAAY5f,GACpD,IAAKiD,EAAQ,OAAOptB,KAAKL,OAAO6rC,cAChC,IAIImnB,EAJAkvB,EAAiBzvE,EAAS8tD,sBAC1B/Z,EAAoB/zC,EAAS+tD,yBAIjC,OAAQ/yC,EAAO5W,MACb,KAAKm7C,EAAA/gD,YAAYiQ,OAEf,IAAK7gB,KAAKyyE,cAAsBrlD,GAAS,OAAOptB,KAAKL,OAAO6rC,cAG9D,KAAKmmB,EAAA/gD,YAAY4N,MAIjB,KAAKmzC,EAAA/gD,YAAYgX,MACf+qC,EAAmCvlC,EAAQvO,KAC3C,MAEF,KAAK8yC,EAAA/gD,YAAYuN,mBACf,IAAIE,EAAsC+O,EAAQ/O,gBAClD,IAAKA,EAKH,OAJAre,KAAKmN,MACHI,EAAAhD,eAAeu3E,oEACf/3C,EAAWl/B,MAAkBuiB,EAAQjb,cAEhCnS,KAAKL,OAAO6rC,cAGrB,KADI/f,EAAiBzrB,KAAKoS,SAASyL,gBAAgBQ,EAAiB,KAAM1U,EAAAy3D,UAAW1zD,EAAAsyD,WAAWO,SAC3E,OAAOvgE,KAAKL,OAAO6rC,cACxCthC,OAAyD,GAAlDuhB,EAAezX,UAAU+V,eAAe9d,QAC/C0mD,EAAalnC,EAAezX,UAAU+V,eAAe,GACrD,MAEF,KAAK4nC,EAAA/gD,YAAY0N,SACf,IAAImN,EACJ,KADIA,EAA4B2B,EAAQ3B,gBAMtC,OAJAzrB,KAAKmN,MACHI,EAAAhD,eAAeu3E,oEACf/3C,EAAWl/B,MAAkBuiB,EAAQjb,cAEhCnS,KAAKL,OAAO6rC,cAErBthC,OAAyD,GAAlDuhB,EAAezX,UAAU+V,eAAe9d,QAC/C0mD,EAAalnC,EAAezX,UAAU+V,eAAe,GACrD,MAEF,KAAK4nC,EAAA/gD,YAAY6N,MACf,GAAI0nC,EAAmB,CACrB,IAAI47B,EAAc53D,EAAKjL,GAAE,OAcrB8iE,EAAqB50D,EAAQF,eAAeykC,EAAAtkD,aAAauB,YAAamzE,GAC1E,IAAKC,EAaH,OAZyB50D,EAAQF,eAAeykC,EAAAtkD,aAAasB,YAAaozE,GAOxE/hF,KAAKmN,MACHI,EAAAhD,eAAe03E,+CACfl4C,EAAWl/B,MAAeuiB,EAAQjb,cAPpCnS,KAAKmN,MACHI,EAAAhD,eAAek4D,qCACf14B,EAAWl/B,MAAeuiB,EAAQjb,cAQ/BnS,KAAKL,OAAO6rC,cAErBthC,OAAqD,GAA9C83E,EAAWhuE,UAAU+V,eAAe9d,QAC3C0mD,EAAaqvB,EAAWhuE,UAAU+V,eAAe,GACjD,MAIJ,QAKE,OAJA/pB,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8oB,EAAWl/B,OAEN7K,KAAKL,OAAO6rC,cAMvB,OADAthC,OAAOyoD,GAAcnlD,EAAAmH,KAAKG,MACnB9U,KAAK2hF,eACVv0D,EACAptB,KAAK2zE,kBAAkBwG,EAAiBxnB,EAAY,IACpD5oB,EACA83C,EACA17B,EACAic,GAAkB50D,EAAAmH,KAAKG,OAK3B45D,EAAAzsE,UAAA0/E,eAAA,SAEEv0D,EAEAilD,EAEA8H,EAEA0H,EAEAK,EAEAC,GAEA,IAAIxiF,EAASK,KAAKL,OACdwqB,EAAOnqB,KAAKiwE,YAKhB,OAAQ7iD,EAAO5W,MACb,KAAKm7C,EAAA/gD,YAAYgX,MACf,OAAIuC,EAAK6+C,YAAoB57C,EAAQzF,MAAOha,EAAAk5D,WAAW6U,UAAU,IAC/D17E,KAAKmN,MACHI,EAAAhD,eAAeu3E,oEACf3H,EAAgBtvE,MAAOuiB,EAAOjb,cAEhCnS,KAAK6uE,YAAcsT,EAAc/0D,EAAQvO,KAAOrR,EAAAmH,KAAKG,KAC9CnV,EAAO6rC,eAETxrC,KAAKoiF,oBAA2Bh1D,EAAQilD,EAAW8P,GAE5D,KAAKxwB,EAAA/gD,YAAYiQ,OACf,OAAK7gB,KAAKyyE,cAAsBrlD,GAC5BA,EAAO5L,MAAMlU,EAAAjL,YAAYgd,MAAQ/R,EAAAjL,YAAY2f,WAC/ChiB,KAAKmN,MACHI,EAAAhD,eAAeu3E,oEACf3H,EAAgBtvE,MAChBuiB,EAAOjb,cAETnS,KAAK6uE,YAAcsT,EAAe/0D,EAAQvO,KAAOrR,EAAAmH,KAAKG,KAC/CnV,EAAO6rC,eAETxrC,KAAK40E,qBAA6BxnD,EAAQilD,EAAW8P,GAVZxiF,EAAO6rC,cAYzD,KAAKmmB,EAAA/gD,YAAY4N,MACf,IAAIk1D,EAA0BtmD,EAAQsmD,gBACtC,OACUtmD,EAAQlO,GAAG5R,EAAAjL,YAAY2f,WAE7BmI,EAAK05C,eAAe3kD,GAAG5R,EAAAjL,YAAYmgB,cACnCkxD,EASG1zE,KAAKqiF,oBAA2Bj1D,EACrCilD,EACAryE,KAAKy5E,4BACHvvE,OAAO23E,GAEP7hF,KAAKyU,QAAQI,WAEfstE,IAbAniF,KAAKmN,MACHI,EAAAhD,eAAeu3E,oEACf3H,EAAgBtvE,MAAeuiB,EAAQjb,cAElCxS,EAAO6rC,eAYlB,KAAKmmB,EAAA/gD,YAAYuN,mBACXne,KAAKovE,oBAAoB76D,IAAI89D,KAAYA,EAAYryE,KAAKsiF,gBAAgBjQ,EAAWloD,IACzF,IAAI9L,EAAsC+O,EAAQ/O,gBAClD,IAAKA,EAKH,OAJAre,KAAKmN,MACHI,EAAAhD,eAAeu3E,oEACf3H,EAAgBtvE,MAAOuiB,EAAOjb,cAEzBxS,EAAO6rC,cAGhB,KADI/f,EAAiBzrB,KAAKoS,SAASyL,gBAAgBQ,EAAiB,KAAM1U,EAAAy3D,UAAW1zD,EAAAsyD,WAAWO,SAC3E,OAAO5gE,EAAO6rC,cAEnC,IAAK22C,EAAK,OAAOniF,KAAKggF,eAAev0D,EAAgB,CAAE4mD,GAAa8H,GAEpE,IAAI/7D,EAAkBlU,OAA2BkjB,EAAQhP,iBAEzD,KADIoN,EAAiBxrB,KAAKoS,SAASyL,gBAAgBO,EAAiB,KAAMzU,EAAAy3D,UAAW1zD,EAAAsyD,WAAWO,SAC3E,OAAO5gE,EAAO6rC,cACnC,IACI+2C,GADAp3C,EAAa3f,EAAexX,UAAUm3B,YACRooB,eAClC,OAAO5zD,EAAO4pC,MAAM,KAAM,CACxBvpC,KAAKggF,eAAev0D,EAAgB,CAAE4mD,GAAa8H,GACnDn6E,KAAKggF,eAAex0D,EAAgB,KAAM2uD,IACzCoI,GAEL,KAAK5wB,EAAA/gD,YAAY0N,SAEf,IAAImN,EACJ,GAFIzrB,KAAKovE,oBAAoB76D,IAAI89D,KAAYA,EAAYryE,KAAKsiF,gBAAgBjQ,EAAWloD,MACrFsB,EAA4B2B,EAAQ3B,gBAMtC,OAJAzrB,KAAKmN,MACHI,EAAAhD,eAAeu3E,oEACf3H,EAAgBtvE,MAAOuiB,EAAOjb,cAEzBxS,EAAO6rC,cAGhB,IAAK22C,EAAK,CACR,IAAIK,EAAWxiF,KAAKy5E,4BAClBvvE,OAAO23E,GACP7hF,KAAKyU,QAAQI,WAEf,OAAO7U,KAAKggF,eAAev0D,EAAgB,CAAE+2D,EAAUnQ,GAAa8H,GAKlEoI,GADAp3C,GADA3f,EAAiBthB,OAAkBkjB,EAAQ5B,iBACfxX,UAAUm3B,YACRooB,eAFlC,IAAI/nC,EAGAi3D,EAAWziF,KAAKy5E,4BAClBvvE,OAAO23E,GACP7hF,KAAKyU,QAAQI,WAGX2lE,EADYrwD,EAAKo+C,oBAAoBp9B,GACVxjB,MAC/B,OAAOhoB,EAAO4pC,MAAM,KAAM,CACxBvpC,KAAKggF,eAAev0D,EAAgB,CAClC9rB,EAAO4nC,UAAUizC,EAAgBiI,GACjCpQ,GACC8H,GACHn6E,KAAKggF,eAAex0D,EAAgB,CAClC7rB,EAAO0nC,UAAUmzC,EAAgB+H,IAChCpI,IACFoI,GAEL,KAAK5wB,EAAA/gD,YAAY6N,MAEf,GADIze,KAAKovE,oBAAoB76D,IAAI89D,KAAYA,EAAYryE,KAAKsiF,gBAAgBjQ,EAAWloD,IACrF+3D,EAAiB,CACnB,IAAIH,EAAc53D,EAAKjL,GAAE,OACrBsjD,EAAqBp1C,EAAQF,eAAeykC,EAAAtkD,aAAasB,YAAaozE,GAC1E,IAAKvf,EAKH,OAJAxiE,KAAKmN,MACHI,EAAAhD,eAAek4D,qCACf0X,EAAgBtvE,MAAOuiB,EAAOjb,cAEzBxS,EAAO6rC,cAEhB,IAAIw2C,EAAqB50D,EAAQF,eAAeykC,EAAAtkD,aAAauB,YAAamzE,GAC1E,IAAKC,EAMH,OALAhiF,KAAKmN,MACHI,EAAAhD,eAAe03E,+CACf9H,EAAgBtvE,MAAOuiB,EAAOjb,cAEhCnS,KAAK6uE,YAAcsT,EAAM3f,EAAWxuD,UAAUm3B,WAAa39B,EAAAmH,KAAKG,KACzDnV,EAAO6rC,cAEhB,IAAImnB,EAAqBvlC,EAAQvO,KAK7B6jE,GAJAD,EAAWziF,KAAKy5E,4BAClBvvE,OAAO23E,GACP7hF,KAAKyU,QAAQI,WAEG7U,KAAK2zE,kBAAkBuO,EAAiB10E,EAAAmH,KAAKvR,IAAG,IAClE,GAAI++E,EAAK,CACP,IAAIQ,EAAkBx4D,EAAK09C,aAAalV,GACpCiwB,EAAmBz4D,EAAKo+C,oBAAoBvoE,KAAK6uE,aACjD1jC,EAAaq3B,EAAWxuD,UAAUm3B,WAEtC,OADAhhB,EAAKm+C,cAAcqa,GACZhjF,EAAO4pC,MAAM,KAAM,CACxBvpC,KAAKggF,eAAegC,EAAY,CAC9BriF,EAAO4nC,UAAUo7C,EAAgBh7D,MAAO86D,GACxC9iF,EAAO4nC,UAAUq7C,EAAiBj7D,MAAO+6D,GACzCrQ,GACC8H,GACHn6E,KAAKggF,eAAexd,EAAY,CAC9B7iE,EAAO0nC,UAAUs7C,EAAgBh7D,MAAOg7D,EAAgB9jE,KAAK00C,gBAC7D5zD,EAAO0nC,UAAUu7C,EAAiBj7D,MAAOi7D,EAAiB/jE,KAAK00C,iBAC9D4mB,IACFhvC,EAAWooB,gBAEd,OAAOvzD,KAAKggF,eAAegC,EAAY,CACrCS,EACAC,EACArQ,GACC8H,IAUX,OAJAn6E,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACfk5D,EAAgBtvE,OAEXlL,EAAO6rC,eAIRkjC,EAAAzsE,UAAAmgF,oBAAR,SAEEv4D,EAEAwoD,EAEA8P,GAEA,IAAItjE,EAAOgL,EAAMhL,KACjB3U,OAAO2U,GAAQrR,EAAAmH,KAAKG,MACpB,IAAIqV,EAAOnqB,KAAKiwE,YACZrmD,EAAaC,EAAMlC,MAQvB,GANI9I,EAAKK,GAAE,OACLiL,EAAKigD,UAAUiI,EAAWxzD,GAAOsL,EAAKi+C,aAAax+C,EAAYjc,EAAAk5D,WAAW7C,SACzE75C,EAAK69C,eAAep+C,EAAYjc,EAAAk5D,WAAW7C,UAElD75C,EAAKi+C,aAAax+C,EAAYjc,EAAAk5D,WAAW8C,WAErC9qD,EAAKozD,UAAW,CAClB,IAAItyE,EAASK,KAAKL,OACdwyE,EAAatzD,EAAK00C,eAEtB,OAAIppC,EAAK++C,eAAet/C,EAAYjc,EAAAk5D,WAAWwT,cACzCr6E,KAAKovE,oBAAoB76D,IAAI89D,IAC/BA,EAAYryE,KAAK6iF,mBACfljF,EAAO0nC,UAAUzd,EAAYuoD,GAC7BE,GAEE8P,GACFniF,KAAK6uE,YAAchwD,EACZlf,EAAO4nC,UAAU3d,EAAYyoD,KAEpCryE,KAAK6uE,YAAcrhE,EAAAmH,KAAKG,KACjBnV,EAAOwpC,UAAUvf,EAAYyoD,MAGtCA,EAAYryE,KAAKsyE,kBACf3yE,EAAO0nC,UAAUzd,EAAYuoD,GAC7BE,GAEE8P,GACFniF,KAAK6uE,YAAchwD,EACZlf,EAAO4nC,UAAU3d,EAAYyoD,KAEpCryE,KAAK6uE,YAAcrhE,EAAAmH,KAAKG,KACjBnV,EAAOwpC,UAAUvf,EAAYyoD,MAIxCloD,EAAK69C,eAAep+C,EAAYjc,EAAAk5D,WAAW2C,wBAC3Cr/C,EAAKi+C,aAAax+C,EAAYjc,EAAAk5D,WAAWwB,UACpCroE,KAAKovE,oBAAoB76D,IAAI89D,KAAYA,EAAYryE,KAAKkyE,WAAWG,IACtE8P,GACFniF,KAAK6uE,YAAchwD,EACZlf,EAAO4nC,UAAU3d,EAAYyoD,KAEpCryE,KAAK6uE,YAAcrhE,EAAAmH,KAAKG,KACjBnV,EAAOwpC,UAAUvf,EAAYyoD,KAQxC,OAJIxzD,EAAKK,GAAG,MACLiL,EAAK0gD,YAAYwH,EAAWxzD,GAC5BsL,EAAK69C,eAAep+C,EAAYjc,EAAAk5D,WAAWiE,SADR3gD,EAAKi+C,aAAax+C,EAAYjc,EAAAk5D,WAAWiE,UAG/EqX,GACFniF,KAAK6uE,YAAchwD,EACZ7e,KAAKL,OAAO4nC,UAAU3d,EAAYyoD,KAEzCryE,KAAK6uE,YAAcrhE,EAAAmH,KAAKG,KACjB9U,KAAKL,OAAOwpC,UAAUvf,EAAYyoD,KAMvC3D,EAAAzsE,UAAA2yE,qBAAR,SAEEz1D,EAEAkzD,EAEA8P,GAEA,IAAIxiF,EAASK,KAAKL,OACdkf,EAAOM,EAAON,KAClB3U,OAAO2U,GAAQrR,EAAAmH,KAAKG,MACpB,IAAIq9D,EAAatzD,EAAK00C,eAEtB,OAAI10C,EAAKozD,UACHjyE,KAAKovE,oBAAoB76D,IAAI89D,GAC3B8P,GACFniF,KAAK6uE,YAAchwD,EACZlf,EAAO4pC,MAAM,KAAM,CACxB5pC,EAAO0pC,WAAWlqB,EAAOhN,aACvBnS,KAAK6iF,mBACHljF,EAAO8nC,WAAWtoB,EAAOhN,aAAcggE,GACvCE,IAGJ1yE,EAAO8nC,WAAWtoB,EAAOhN,aAAcggE,IACtCA,KAEHnyE,KAAK6uE,YAAcrhE,EAAAmH,KAAKG,KACjBnV,EAAO0pC,WAAWlqB,EAAOhN,aAC9BnS,KAAK6iF,mBACHljF,EAAO8nC,WAAWtoB,EAAOhN,aAAcggE,GACvCE,KAKF8P,GACFniF,KAAK6uE,YAAchwD,EACZlf,EAAO4pC,MAAM,KAAM,CACxB5pC,EAAO0pC,WAAWlqB,EAAOhN,aACvBnS,KAAKsyE,kBACH3yE,EAAO8nC,WAAWtoB,EAAOhN,aAAcggE,GACvCE,IAGJ1yE,EAAO8nC,WAAWtoB,EAAOhN,aAAcggE,IACtCA,KAEHnyE,KAAK6uE,YAAcrhE,EAAAmH,KAAKG,KACjBnV,EAAO0pC,WAAWlqB,EAAOhN,aAC9BnS,KAAKsyE,kBACH3yE,EAAO8nC,WAAWtoB,EAAOhN,aAAcggE,GACvCE,MAMRA,EAAYryE,KAAK48E,uBAAuBvK,EAAWxzD,GAC/CsjE,GACFniF,KAAK6uE,YAAchwD,EACZlf,EAAO4pC,MAAM,KAAM,CACxB5pC,EAAO0pC,WAAWlqB,EAAOhN,aAAckgE,GACvC1yE,EAAO8nC,WAAWtoB,EAAOhN,aAAcggE,IACtCA,KAEHnyE,KAAK6uE,YAAcrhE,EAAAmH,KAAKG,KACjBnV,EAAO0pC,WAAWlqB,EAAOhN,aAC9BkgE,MAOR3D,EAAAzsE,UAAAogF,oBAAA,SAEE30D,EAEA2kD,EAEAoQ,EAEAN,GAEA,IAAIxiF,EAASK,KAAKL,OACdwqB,EAAOnqB,KAAKiwE,YACZ9J,EAAYz4C,EAAM7O,KAClBikE,EAAkB3c,EAAU5S,eAChCrpD,OAAOwjB,EAAMzZ,OAAOuC,MAAQm7C,EAAA/gD,YAAY6N,OACxC,IAAIqL,EAAmB4D,EAAMzZ,OAAQ4K,KACjCkkE,EAAiBj5D,EAASypC,eAE9B,GAAI4S,EAAU8L,WAAanoD,EAASmoD,UAAW,CAC7C,IAAI+Q,EAAW74D,EAAK09C,aAAa/9C,GACjC,GAAI9pB,KAAKovE,oBAAoB76D,IAAI89D,GAAY,CAC3C,GAAI8P,EAAK,CACP,IAAIc,EAAY94D,EAAKo+C,oBAAoBpC,GAKzC,OAJKh8C,EAAK0gD,YAAYwH,EAAWlM,IAAYh8C,EAAKi+C,aAAa6a,EAAUt7D,MAAOha,EAAAk5D,WAAWiE,SACvF3gD,EAAKigD,UAAUiI,EAAWlM,IAAYh8C,EAAKi+C,aAAa6a,EAAUt7D,MAAOha,EAAAk5D,WAAW7C,SACxF75C,EAAKm+C,cAAc0a,GACnBhjF,KAAK6uE,YAAc1I,EACZxmE,EAAO4pC,MAAM,KAAM,CACxB5pC,EAAO4mC,MAAM4/B,EAAUlU,SACrBtyD,EAAO4nC,UAAUy7C,EAASr7D,MAAO86D,GACjCziF,KAAK6iF,mBACHljF,EAAOgoC,KAAKw+B,EAAUlU,SAAUkU,EAAUjnD,GAAE,GAC1Cvf,EAAO0nC,UAAU27C,EAASr7D,MAAOo7D,GACjCD,EAAiBp1D,EAAMrC,cAEzB1rB,EAAO4nC,UAAU07C,EAAUt7D,MAAO0qD,IAEpCyQ,EAAiBp1D,EAAMrC,cAEzB1rB,EAAO0nC,UAAU47C,EAAUt7D,MAAOm7D,IACjCA,GAIH,OAFA34D,EAAKm+C,cAAc0a,GACnBhjF,KAAK6uE,YAAcrhE,EAAAmH,KAAKG,KACjBnV,EAAO4mC,MAAM4/B,EAAUlU,SAC5BtyD,EAAO4nC,UAAUy7C,EAASr7D,MAAO86D,GACjCziF,KAAK6iF,mBACHljF,EAAOgoC,KAAKw+B,EAAUlU,SAAUkU,EAAUjnD,GAAE,GAC1Cvf,EAAO0nC,UAAU27C,EAASr7D,MAAOo7D,GACjCD,EAAiBp1D,EAAMrC,cAEzBgnD,GAEFyQ,EAAiBp1D,EAAMrC,cAI3B,GAAI82D,EAAK,CACHc,EAAY94D,EAAKo+C,oBAAoBpC,GAKzC,OAJKh8C,EAAK0gD,YAAYwH,EAAWlM,IAAYh8C,EAAKi+C,aAAa6a,EAAUt7D,MAAOha,EAAAk5D,WAAWiE,SACvF3gD,EAAKigD,UAAUiI,EAAWlM,IAAYh8C,EAAKi+C,aAAa6a,EAAUt7D,MAAOha,EAAAk5D,WAAW7C,SACxF75C,EAAKm+C,cAAc0a,GACnBhjF,KAAK6uE,YAAc1I,EACZxmE,EAAO4pC,MAAM,KAAM,CACxB5pC,EAAO4mC,MAAM4/B,EAAUlU,SACrBtyD,EAAO4nC,UAAUy7C,EAASr7D,MAAO86D,GACjCziF,KAAKsyE,kBACH3yE,EAAOgoC,KAAKw+B,EAAUlU,SAAUkU,EAAUjnD,GAAE,GAC1Cvf,EAAO0nC,UAAU27C,EAASr7D,MAAOo7D,GACjCD,EAAiBp1D,EAAMrC,cAEzB1rB,EAAO4nC,UAAU07C,EAAUt7D,MAAO0qD,IAEpCyQ,EAAiBp1D,EAAMrC,cAEzB1rB,EAAO0nC,UAAU47C,EAAUt7D,MAAOm7D,IACjCA,GAIH,OAFA34D,EAAKm+C,cAAc0a,GACnBhjF,KAAK6uE,YAAcrhE,EAAAmH,KAAKG,KACjBnV,EAAO4mC,MAAM4/B,EAAUlU,SAC5BtyD,EAAO4nC,UAAUy7C,EAASr7D,MAAO86D,GACjCziF,KAAKsyE,kBACH3yE,EAAOgoC,KAAKw+B,EAAUlU,SAAUkU,EAAUjnD,GAAE,GAC1Cvf,EAAO0nC,UAAU27C,EAASr7D,MAAOo7D,GACjCD,EAAiBp1D,EAAMrC,cAEzBgnD,GAEFyQ,EAAiBp1D,EAAMrC,cAK7B,GAAI82D,EAAK,CACHc,EAAY94D,EAAKo+C,oBAAoBpC,GAIzC,OAHKh8C,EAAK0gD,YAAYwH,EAAWlM,IAAYh8C,EAAKi+C,aAAa6a,EAAUt7D,MAAOha,EAAAk5D,WAAWiE,SACvF3gD,EAAKigD,UAAUiI,EAAWlM,IAAYh8C,EAAKi+C,aAAa6a,EAAUt7D,MAAOha,EAAAk5D,WAAW7C,SACxFhkE,KAAK6uE,YAAc1I,EACZxmE,EAAO4pC,MAAM,KAAM,CACxB5pC,EAAO4mC,MAAM4/B,EAAUlU,SACrBwwB,EACA9iF,EAAO4nC,UAAU07C,EAAUt7D,MAAO0qD,GAClCyQ,EAAiBp1D,EAAMrC,cAEzB1rB,EAAO0nC,UAAU47C,EAAUt7D,MAAOm7D,IACjCA,GAGH,OADA9iF,KAAK6uE,YAAcrhE,EAAAmH,KAAKG,KACjBnV,EAAO4mC,MAAM4/B,EAAUlU,SAC5BwwB,EACApQ,EACAyQ,EAAiBp1D,EAAMrC,eAO/BqjD,EAAAzsE,UAAA65E,sBAAA,SAEE/xC,EAEAq4B,EAEAyV,GAGA,IAAIl4E,EAASK,KAAKL,OACdwqB,EAAOnqB,KAAKiwE,YAGhB,GAAIlmC,EAAWA,WAAWvzB,MAAQ/I,EAAAgJ,SAASusC,MAAO,CAChD,IAAIkgC,EAAOljF,KAAKiwE,YACZpM,EAAiBqf,EAAKrf,eAC1B,IAAKA,EAAe3kD,GAAG5R,EAAAjL,YAAYmgB,aAKjC,OAJAxiB,KAAKmN,MACHI,EAAAhD,eAAe44E,8FACfp5C,EAAWl/B,OAENlL,EAAO6rC,cAGhB,IAAI94B,EAAgBxI,OAAO25D,EAAe5vD,QAAS/J,OAAOwI,EAAc8D,MAAQm7C,EAAA/gD,YAAY6N,OAC5F,IAAI2kE,EAAoBl5E,OAAewI,EAAeuZ,MAClDk4C,EAAYj6D,OAAOg5E,EAAK9e,YAAY92D,EAAAtK,cAAckC,QAClDktE,EAAiBpyE,KAAKyU,QAAQ29D,eAO9BiR,EAAUrjF,KAAKsjF,kBACjBtjF,KAAKujF,kBAAkBH,EAAmBr5C,GAC1CA,EAAWnnB,UACXmnB,EACApqC,EAAOwqC,GACLxqC,EAAO0nC,UAAU88B,EAAUx8C,MAAOyqD,GAClCzyE,EAAO0nC,UAAU88B,EAAUx8C,MAAOyqD,GAClCpyE,KAAKkyE,WACHlyE,KAAK01E,eAAsBhjE,KAE9B,IAGHxI,OAAOlK,KAAKovE,oBAAoB76D,IAAI8uE,IACpC,IAAIrO,EAAyB,CAC3Br1E,EAAOwpC,UAAUg7B,EAAUx8C,MAAO07D,IAKpC,OAHArjF,KAAK21E,wBAA+BjjE,EAAesiE,GAG/CkO,EAAK1hE,MACP,OAGAxhB,KAAKmN,MACHI,EAAAhD,eAAei5E,kFACfz5C,EAAWl/B,OAENlL,EAAO6rC,gBAEhB03C,EAAKhxE,IAAI,KACTlS,KAAK6uE,YAAcrhE,EAAAmH,KAAKG,KACjBnV,EAAO4pC,MAAM,KAAMyrC,IAI5B,IAGIhhE,EACAyvE,EAJAr2D,EAASptB,KAAKoS,SAASkwD,kBAAkBv4B,EAAWA,WAAY5f,GACpE,IAAKiD,EAAQ,OAAOztB,EAAO6rC,cAI3B,OAAQpe,EAAO5W,MAGb,KAAKm7C,EAAA/gD,YAAYgN,mBACf,IAAI3b,EAA+BmrB,EAC/BpB,EAAgB+d,EAAW/d,cAG/B,GAAI/pB,EAAUkZ,aAAaw2C,EAAA9gD,eAAesE,SACxC,OAAOnV,KAAK0jF,6BAA6BzhF,EAAW8nC,EAAYq4B,GAGlE,IAAI95C,EAA4B,KAGhC,GAAI0D,EAAe,CACjB,IAAK/pB,EAAUid,GAAG5R,EAAAjL,YAAY6S,SAK5B,OAJAlV,KAAKmN,MACHI,EAAAhD,eAAe02D,sBACfl3B,EAAWA,WAAWl/B,MAAO5I,EAAUkQ,cAElCxS,EAAO6rC,cAEhBljB,EAAWtoB,KAAKoS,SAASsyD,iCACvBziE,EACA+pB,EACA7B,EAAK05C,eAAe5vD,OACpBtK,EAAAy3D,QAAqBj3C,EAAK3B,yBAC1BuhB,OAIG,IAAI9nC,EAAUid,GAAG5R,EAAAjL,YAAY6S,SAAU,CAI5C,IAHA,IAAIyuE,EAAgB,IAAIz8E,IACpB4lB,EAAqB5iB,OAAOjI,EAAU6qB,oBACtC24C,EAAoB34C,EAAmB7gB,OAClC5L,EAAI,EAAGA,EAAIolE,IAAqBplE,EACvCsjF,EAAczxE,IAAI4a,EAAmBzsB,GAAGO,KAAKmL,KAAM,MAGrD,IAAIy0D,EAAiBv+D,EAAUkjE,cAActhB,WACzC4Q,EAAgB+L,EAAev0D,OAC/B23E,EAAgB75C,EAAWnnB,UAC3BisC,EAAe+0B,EAAc33E,OAC7B43E,EAAgB,IAAI98E,MAAqB8nD,GAC7C,IAASxuD,EAAI,EAAGA,EAAIo0D,IAAiBp0D,EAAG,CACtC,IAAIygE,EAAWN,EAAengE,GAAGwe,KAC7BilE,EAAehjB,EAAStqD,MAAQ/I,EAAAgJ,SAASm3C,MAAoBkT,EAAUlgE,KAAKoX,KAE5E,KADW8oD,EAAUlgE,KAAKyS,WAAWtH,KAErCg4E,EAAqB1jF,EAAIwuD,EACzB+0B,EAAcvjF,GACdmgE,EAAengE,GAAG8mB,YACtB,IAAK48D,EAKH,OAJA/jF,KAAKmN,MACHI,EAAAhD,eAAegZ,+BACfwmB,EAAWl/B,MAAO4pD,EAAcjpD,SAAS,IAAKqjD,EAAarjD,SAAS,KAE/D7L,EAAO6rC,cAEhB,GAAqB,OAAjBs4C,GAAyBH,EAAcpvE,IAAIuvE,GAAe,CAE5D,GADIE,EAAeL,EAAcziF,IAAI4iF,GACnB,CAChBD,EAAcxjF,GAAKL,KAAKy5E,4BAA4BsK,EAAoBC,GACxE,IAAIpF,OAAU,EACd,KAAMA,EAAapxE,EAAAmH,KAAK0+C,kBAAkB2wB,EAAchkF,KAAK6uE,aAAa,OAClE+P,EAAapxE,EAAAmH,KAAK0+C,kBAAkB2wB,EAAchkF,KAAK6uE,aAAa,IAKxE,OAJA7uE,KAAKmN,MACHI,EAAAhD,eAAeqpE,mCACfpT,EAAengE,GAAGwe,KAAKhU,MAAO7K,KAAK6uE,YAAYrjE,WAAYw4E,EAAax4E,YAEnE7L,EAAO6rC,cAGlBw4C,EAAepF,OAEfiF,EAAcxjF,GAAKL,KAAKy5E,4BAA4BsK,EAAoBv2E,EAAAmH,KAAKvR,KAC7E4gF,EAAehkF,KAAK6uE,YAGtB8U,EAAczxE,IAAI4xE,EAAcE,OAC3B,CACL,IAAIC,EAAejkF,KAAKoS,SAASguD,YAC/BI,EAAengE,GAAGwe,KAClBsL,EAAK05C,eACL15C,EAAK3B,yBAEP,IAAKy7D,EAAc,OAAOtkF,EAAO6rC,cACjCq4C,EAAcxjF,GAAKL,KAAK2zE,kBAAkBoQ,EAAoBE,EAAY,IAG9E,IAAIze,EAAwB,IAAIz+D,MAAY0+D,GAC5C,IAASplE,EAAI,EAAGA,EAAIolE,IAAqBplE,EAAG,CAC1C,IAAI2jF,EAAe95E,OAAOy5E,EAAcziF,IAAI4rB,EAAmBzsB,GAAGO,KAAKmL,OACvEy5D,EAAsBnlE,GAAK2jF,EAO7B,OALA17D,EAAWtoB,KAAKoS,SAASyL,gBACvB5b,EACAujE,EACA77D,EAAAy3D,QAAqBj3C,EAAK3B,2BAGrBxoB,KAAKggF,eAAe13D,EAAUu7D,EAAe95C,EAAYq4B,GAAkB50D,EAAAmH,KAAKG,MADjE9U,KAAKL,OAAO6rC,cAQlCljB,EAAWtoB,KAAKoS,SAASyL,gBAAgB5b,EAAW,MAEtD,IAAKqmB,EAAU,OAAOtoB,KAAKL,OAAO6rC,cAGlC,IAAIi3C,EAA0B,EAQ9B,OAPIn6D,EAASpJ,GAAG5R,EAAAjL,YAAYwiB,YAC1B49D,EAAWziF,KAAKy5E,4BACdvvE,OAAOlK,KAAKoS,SAAS8tD,uBACrBlgE,KAAKyU,QAAQI,YAIV7U,KAAKsjF,kBACVh7D,EACAyhB,EAAWnnB,UACXmnB,EACA04C,EACA5K,GAKJ,KAAKlmB,EAAA/gD,YAAYgX,MACf,GAAI5T,EAAoBoZ,EAAQvO,KAAKszC,mBAAoB,CAErDsxB,EADUr2D,EAAQlO,GAAG5R,EAAAjL,YAAYglB,SACtB1nB,EAAOyD,IAAI6sC,QAAgB7iB,EAAQhG,uBAEnCznB,EAAO0nC,UAAkBja,EAAQzF,MAAOiqC,EAAAriC,WAAWrpB,KAEhE,MAMA,OAJAlG,KAAKmN,MACHI,EAAAhD,eAAeo6D,uGACf56B,EAAWl/B,MAAeuiB,EAAQvO,KAAKrT,YAElC7L,EAAO6rC,cAGlB,KAAKmmB,EAAA/gD,YAAYiQ,OACf,GAAI7M,EAAqBoZ,EAAQvO,KAAKszC,mBAAoB,CACxDsxB,EAAW9jF,EAAO8nC,WAAoBra,EAAQjb,aAAuBib,EAAQvO,KAAK00C,gBAClF,MAMA,OAJAvzD,KAAKmN,MACHI,EAAAhD,eAAeo6D,uGACf56B,EAAWl/B,MAAgBuiB,EAAQvO,KAAKrT,YAEnC7L,EAAO6rC,cAGlB,KAAKmmB,EAAA/gD,YAAY4N,MACf,IAAIK,EAAeuO,EAAQvO,KAC3B,GAAI7K,EAAY6K,EAAKszC,mBAAoB,CACvC,IAAI0vB,EAAiB33E,OAAOlK,KAAKoS,SAAS8tD,uBACtCuiB,EAAWziF,KAAKy5E,4BAClBoI,EACA7hF,KAAKyU,QAAQI,WAEf4uE,EAAW9jF,EAAOgoC,KAChB,GACA,EACA86C,EACA7wB,EAAAriC,WAAWrpB,IACHknB,EAAQ/B,cAElB,MAMA,OAJArrB,KAAKmN,MACHI,EAAAhD,eAAeo6D,uGACf56B,EAAWl/B,MAAOgU,EAAKrT,YAElB7L,EAAO6rC,cAGlB,KAAKmmB,EAAA/gD,YAAYoa,gBACfhX,EAA6BoZ,EAAQpZ,UACrCyvE,EAAWzjF,KAAK2zE,kBAAkB5pC,EAAWA,WAA6B3c,EAAQvO,KAAI,GACtF,MAGF,KAAK8yC,EAAA/gD,YAAYuN,mBACf,IAAIC,EAAkBlU,OAA2BkjB,EAAQhP,iBAEzD,KADIoN,EAAiBxrB,KAAKoS,SAASyL,gBAAgBO,EAAiB,OAC/C,OAAOze,EAAO6rC,cAGnC,GAFAi4C,EAAWzjF,KAAKsjF,kBAAkB93D,EAAgB,GAAIue,EAAWA,cACjE/1B,EAAYhU,KAAK6uE,YAAY1c,oBAM3B,OAJAnyD,KAAKmN,MACHI,EAAAhD,eAAeo6D,uGACf56B,EAAWl/B,MAAO7K,KAAK6uE,YAAYrjE,YAE9B7L,EAAO6rC,cAEhB,MAEF,KAAKmmB,EAAA/gD,YAAY0N,SACf,IAAIkN,EAAiBthB,OAAkBkjB,EAAQ5B,gBAQ/C,GAPAi4D,EAAWzjF,KAAKsjF,kBAAkB93D,EAAgB,GAAIue,EAAWA,WAC/D/pC,KAAKy5E,4BACHvvE,OAAOlK,KAAKoS,SAAS8tD,uBACrBlgE,KAAKyU,QAAQI,cAGjBb,EAAYhU,KAAK6uE,YAAY1c,oBAM3B,OAJAnyD,KAAKmN,MACHI,EAAAhD,eAAeo6D,uGACf56B,EAAWl/B,MAAO7K,KAAK6uE,YAAYrjE,YAE9B7L,EAAO6rC,cAEhB,MAIF,QAKE,OAJAxrC,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8oB,EAAWl/B,OAENlL,EAAO6rC,cAGlB,OAAOxrC,KAAKkkF,oBACVlwE,EACAyvE,EACA15C,EAAWnnB,UACXmnB,EACA,EACAq4B,GAAkB50D,EAAAmH,KAAKG,OAInB45D,EAAAzsE,UAAAyhF,6BAAR,SACEzhF,EACA8nC,EACAq4B,GAEA,IAAIp2C,EAA+B,KAI/Bc,EAAqB7qB,EAAU6qB,mBAC/Bi0C,EAAoBh3B,EAAW/d,cAC/B+d,EAAW/d,gBACR/pB,EAAUid,GAAG5R,EAAAjL,YAAY6S,UAC5BlV,KAAKmN,MACHI,EAAAhD,eAAe02D,sBACfl3B,EAAWl/B,MAAO5I,EAAUkQ,cAGhC6Z,EAAgBhsB,KAAKoS,SAASovD,qBAC5Bt3D,OAAO4iB,GACPi0C,EACA/gE,KAAKiwE,YAAYpM,eAAe5vD,OAChCtK,EAAAy3D,QAAqBphE,KAAKiwE,YAAYznD,yBACtCuhB,IAKJ,IAAIpD,EAAOs5B,EAAAkkB,YACTnkF,KACAiC,EACA+pB,EACA+d,EAAWnnB,UACXw/C,EACAr4B,GAEF,OAAKpD,IACH3mC,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8oB,EAAWl/B,OAEN7K,KAAKL,OAAO6rC,gBASvBkjC,EAAAzsE,UAAAmiF,mBAAA,SACEpwE,EACA66C,EACAw1B,EACA9e,GAKA,GAAI8e,IAAwB,MADbrwE,EAAU8V,UAMvB,OAJA9pB,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACfskD,EAAW16D,QAEN,EAIT,IAAIqpD,EAAUlgD,EAAUkgD,QACxB,GAAIA,EAKF,OAJAl0D,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACfskD,EAAW16D,QAEN,EAGT,IAAIy5E,EAAUtwE,EAAUigD,mBACpBtkB,EAAU37B,EAAU+V,eAAe9d,OAGvC,OAAI4iD,EAAey1B,GACjBtkF,KAAKmN,MACHm3E,EAAU30C,EACNpiC,EAAAhD,eAAeg6E,wCACfh3E,EAAAhD,eAAegZ,+BACnBgiD,EAAW16D,MAAOy5E,EAAQ94E,WAAYqjD,EAAarjD,aAE9C,KAILqjD,EAAelf,IAAYukB,KAC7Bl0D,KAAKmN,MACHI,EAAAhD,eAAegZ,+BACfgiD,EAAW16D,MAAO8kC,EAAQnkC,WAAYqjD,EAAarjD,aAE9C,IAOXkjE,EAAAzsE,UAAAqhF,kBAAA,SACEh7D,EACAk8D,EACAjf,EACAkf,EACA5M,QADA,IAAA4M,MAAA,QACA,IAAA5M,MAAA,GAEA,IAAIhpB,EAAe21B,EAAoBv4E,OACnC+H,EAAYsU,EAAStU,UACzB,IAAKhU,KAAKokF,mBACRpwE,EACA66C,EACW,GAAX41B,EACAlf,GAGA,OADAvlE,KAAK6uE,YAAc76D,EAAUm3B,WACtBnrC,KAAKL,OAAO6rC,cAIrB,GAAIljB,EAASnN,aAAaw2C,EAAA9gD,eAAeoR,QAAS,CAEhD,GADA/X,QAAQoe,EAASpJ,GAAG5R,EAAAjL,YAAYq1E,cAC5B13E,KAAK2uE,uBAAuBroD,SAASgC,GAKlC,CACLtoB,KAAK2uE,uBAAuBniE,KAAK8b,GACjC,IAAIo8D,EAAiB1wE,EAAU+V,eAC/B7f,OAAO2kD,GAAgB61B,EAAez4E,QAGtC,IADA,IAAIi4C,EAAO,IAAIn9C,MAAqB8nD,GAC3BxuD,EAAI,EAAGA,EAAIwuD,IAAgBxuD,EAClC6jD,EAAK7jD,GAAKL,KAAK2zE,kBAAkB6Q,EAAoBnkF,GAAIqkF,EAAerkF,GACtE,IAIJ,IAAIsmC,EAAO3mC,KAAK2kF,eAAer8D,EAAU47B,EAAMugC,EAA0D,IAAjC,EAAf5M,IASzD,OARI73E,KAAK6uE,YAAYoD,YACE,GAAf4F,EAGJ73E,KAAKovE,oBAAoBr6D,IAAI4xB,GAF7BA,EAAO3mC,KAAKsiF,gBAAgB37C,EAAM3mC,KAAKiwE,cAK3CjwE,KAAK2uE,uBAAuB1G,MACrBthC,EAzBP3mC,KAAKiN,QACHM,EAAAhD,eAAeq6E,yCACfrf,EAAW16D,MAAOyd,EAASnW,cA4BjC,IAAI0yE,EAAuBJ,EAAU51B,EAAe,EAAIA,EACpD3nB,EAAW,IAAIngC,MAAqB89E,GACpCl9D,EAAQ,EACR88D,IACFv9C,EAAS,GAAKu9C,EACd98D,EAAQ,GAEV,IAAIoC,EAAiB/V,EAAU+V,eAC/B,IAAS1pB,EAAI,EAAGA,EAAIwuD,IAAgBxuD,IAAKsnB,EACvCuf,EAASvf,GAAS3nB,KAAK2zE,kBAAkB6Q,EAAoBnkF,GAAI0pB,EAAe1pB,GAAE,GAKpF,GADA6J,OAAOyd,GAASk9D,GACZ7wE,EAAUm3B,WAAW8mC,UAAW,CAClC,GAAmB,EAAf4F,EAEF,OAAO73E,KAAKggF,eAAe13D,EAAU4e,EAAUq+B,GAAY,GACtD,GAAmB,GAAfsS,EAAoD,CAEzDlxC,EAAO3mC,KAAKggF,eAAe13D,EAAU4e,EAAUq+B,GAAY,GAAO,GAEtE,OADAvlE,KAAKovE,oBAAoBr6D,IAAI4xB,GACtBA,EAEP,OAAO3mC,KAAKggF,eAAe13D,EAAU4e,EAAUq+B,GAAY,GAAO,GAGtE,OAAOvlE,KAAKggF,eAAe13D,EAAU4e,EAAUq+B,EACI,IAAjC,EAAfsS,KAILnJ,EAAAzsE,UAAA0iF,eAAA,SACEr8D,EACA4e,EACAu9C,EACAK,QADA,IAAAL,MAAA,QACA,IAAAK,OAAA,GAeA,IAbA,IAAInlF,EAASK,KAAKL,OACdkvD,EAAe3nB,EAAWA,EAASj7B,OAAS,EAC5C+H,EAAYsU,EAAStU,UACrB+V,EAAiB/V,EAAU+V,eAC3B0qC,EAAgB1qC,EAAe9d,OAG/BmnE,EAAepzE,KAAKiwE,YACpB9lD,EAAOxc,EAAAyc,KAAKq9C,aAAa2L,EAAahM,eAAgB9+C,GACtDP,EAAO,GACPg9D,EAAa,IAAI99E,IAGZ5G,EAAIwuD,EAAe,EAAGxuD,GAAK,IAAKA,EAAG,CAM1C,IAAI2kF,EAAY99C,EAAU7mC,GACtB4kF,EAAYl7D,EAAe1pB,GAC3B6kF,EAAgB/6D,EAAKs+C,eAAez0D,EAAUkW,iBAAiB7pB,GAAI4kF,EAAWF,GAClFp3E,EAAAogE,eAAeiX,EAAWD,GAErB3R,EAAavI,YAAYma,EAAWC,IAAY96D,EAAKi+C,aAAa8c,EAAcv9D,MAAOha,EAAAk5D,WAAWiE,SACnG3gD,EAAKigD,UAAU4a,EAAWC,IAAY96D,EAAKi+C,aAAa8c,EAAcv9D,MAAOha,EAAAk5D,WAAW7C,SAExFihB,EAAUhT,YACPjyE,KAAKovE,oBAAoB76D,IAAIywE,KAAYA,EAAYhlF,KAAKkyE,WAAW8S,IAC1E76D,EAAKi+C,aAAa8c,EAAcv9D,MAAOha,EAAAk5D,WAAWwB,WAEpDtgD,EAAK0tD,QACH91E,EAAOwpC,UAAU+7C,EAAcv9D,MAAOq9D,IAG1C,GAAIP,EAAS,CACX,IAAI/xE,EAAgBxI,OAAOoe,EAASrU,QAAS/J,OAAOwI,EAAc8D,MAAQm7C,EAAA/gD,YAAY6N,OACtF,IAAIqL,EAAW5f,OAAOoe,EAAStU,UAAU8V,UACrCq6C,EAAYh6C,EAAKs+C,eAAen7D,EAAAtK,cAAckC,MAAO4kB,EAAUi7D,GAEnEh9D,EAAK0tD,QACH91E,EAAOwpC,UAAUg7B,EAAUx8C,MAAO88D,IAEpC,IAAIU,EAAuBzyE,EAAeuZ,KACtCk5D,GAAch7D,EAAKw+C,eAAer7D,EAAAtK,cAAcmC,OAAQggF,EAAatmE,KAAMslD,EAAUx8C,YAEzFzd,QAAQoe,EAAStU,UAAU8V,UAK7B9pB,KAAKiwE,YAAc9lD,EACnB,IAAS9pB,EAAIwuD,EAAcxuD,EAAIo0D,IAAiBp0D,EAAG,CACjD,IAAI+kF,EAAWr7D,EAAe1pB,GAC1BmzE,EAAWxzE,KAAK2zE,kBAClBzpE,OAAOoe,EAASrmB,UAAUkjE,cAActhB,WAAWxjD,GAAG8mB,aACtDi+D,EAAQ,GAGNF,EAAgB/6D,EAAKs+C,eAAez0D,EAAUkW,iBAAiB7pB,GAAI+kF,GAClEj7D,EAAK0gD,YAAY2I,EAAU4R,IAAWj7D,EAAKi+C,aAAa8c,EAAcv9D,MAAOha,EAAAk5D,WAAWiE,SACzF3gD,EAAKigD,UAAUoJ,EAAU4R,IAAWj7D,EAAKi+C,aAAa8c,EAAcv9D,MAAOha,EAAAk5D,WAAW7C,SACtFohB,EAASnT,WACX9nD,EAAKi+C,aAAa8c,EAAcv9D,MAAOha,EAAAk5D,WAAWwB,UAClDtgD,EAAKvb,KACH7M,EAAOwpC,UAAU+7C,EAAcv9D,MAC7B3nB,KAAKkyE,WAAWsB,MAIpBzrD,EAAKvb,KACH7M,EAAOwpC,UAAU+7C,EAAcv9D,MAAO6rD,IAM5CxzE,KAAK+0E,oBAAoBzsD,EAAUP,GAG9BoC,EAAK3I,MAAK,MACbxhB,KAAKq1E,oBAAoBlrD,EAAMpC,GAC/B/nB,KAAKszE,mBAAmBnpD,EAAMpC,IAEhCoC,EAAK2+C,mBACL,IAAI39B,EAAahhB,EAAKghB,WACtBnrC,KAAKiwE,YAAcmD,EAGnB,IAAIzsC,EAAOhnC,EAAO4pC,MAAMpf,EAAKq9C,kBAAmBz/C,EAAMojB,EAAWooB,gBAQjE,OAPAvzD,KAAK6uE,YAAc1jC,EACfA,EAAW8mC,WACT6S,IACFn+C,EAAO3mC,KAAKyhF,YAAY96C,GACxB3mC,KAAK6uE,YAAcrhE,EAAAmH,KAAKG,MAGrB6xB,GAIT+nC,EAAAzsE,UAAAwvE,iBAAA,SAAiBtsD,GAQf,IAAI4D,EAAa5D,EAAS4D,WAC1B,GAAIA,EAAY,OAAOA,EAEvB,IAAIs8D,EAAoBlgE,EAASnR,UAC7BsxE,EAAengE,EAAShT,aACxBozE,EAAyBF,EAAkBt7D,eAC3Cy7D,EAAgCrgE,EAASljB,UAAUkjE,cAActhB,WACjE1Y,EAAak6C,EAAkBl6C,WAC/BrhB,EAAWu7D,EAAkBv7D,SAC7BuF,EAAalK,EAASjG,GAAG5R,EAAAjL,YAAYwiB,UAGrC4gE,EAAeJ,EAAkBpxB,mBACjCyxB,EAAcD,EACdE,EAAeJ,EAAuBt5E,OACtC25E,EAAcD,EACdt2D,MACAq2D,IACAE,GAEJ,IAAIC,EAAc37E,OAAO07E,EAAcF,GAEnCI,EAAoB,IAAI/+E,MAAqB2+E,GAC7CK,EAAe,EAGfpmF,EAASK,KAAKL,OACd0vB,IACFy2D,EAAkB,GAAKnmF,EAAO0nC,UAAU,EAAGrnC,KAAKyU,QAAQ29D,gBACxD2T,EAAe,GAIjB,IAAK,IAAI1lF,EAAI,EAAGA,EAAIolF,IAAgBplF,IAAK0lF,EACvCD,EAAkBC,GAAgBpmF,EAAO0nC,UAAU0+C,EAAcR,EAAuBllF,GAAGkzD,gBAE7FrpD,OAAO67E,GAAgBL,GAGvB,IAAIM,EAAsB,IAAIx4E,EAAA2Y,UAAUo/D,EAAwBp6C,EAAYrhB,GAC5Ek8D,EAAoB/xB,mBAAqB0xB,EACzCK,EAAoBhyB,eAAiBqxB,EAAkBrxB,gBACvDjrC,EAAa,IAAI4oC,EAAAx9C,SACfgR,EAASvkB,KAAO,cAChBukB,EAASljB,UACT+jF,EACA7gE,EAASqD,0BAEAtW,IAAIiT,EAASpS,MAAQzF,EAAAjL,YAAYq1E,WAAapqE,EAAAjL,YAAYsvE,UACrExsD,EAAS4D,WAAaA,EAItB,IAAIqqD,EAAepzE,KAAKiwE,YACpB9lD,EAAOpB,EAAWoB,KACtBnqB,KAAKiwE,YAAc9lD,EAGnB,IAAI6gB,EAAW66C,EAAc,EACzB/6C,EAAQ,IAAI/jC,MAAcikC,GAC1Bi7C,EAAM,KAAOJ,EAAYr6E,SAAS,IACtC,IAASnL,EAAI,EAAGA,EAAI2qC,IAAY3qC,EAAG,CACjC,IAAImpC,EAAQnpC,EAAEmL,SAAS,IAAMy6E,EAC7Bn7C,EAAMzqC,GAAKmpC,EAEb,IAAIzhB,EAAOpoB,EAAO4pC,MAAMuB,EAAM,GAAI,CAChCnrC,EAAO4pC,MAAM,aAAc,CACzB5pC,EAAOkrC,OAAOC,EAAO,aAEnB26C,EACI9lF,EAAOknC,OACL+qB,EAAAz5B,SAASqnD,OACT7/E,EAAO8nC,WAAWw4B,EAAAwE,eAAeyhB,KAAMt0B,EAAAriC,WAAWrpB,KAClDvG,EAAOyD,IAAIqiF,IAEb9lF,EAAO8nC,WAAWw4B,EAAAwE,eAAeyhB,KAAMt0B,EAAAriC,WAAWrpB,QAG1DvG,EAAO6rC,gBAET,IAASnrC,EAAI,EAAGA,EAAIwlF,IAAexlF,IAAK0lF,EAAc,CACpD,IAAIlnE,EAAO0mE,EAAuBE,EAAeplF,GAC7CiU,EAAckxE,EAA8BC,EAAeplF,GAC3D8mB,EAAc7S,EAAY6S,YAC1BqsD,OAAQ,EACRrsD,EACFqsD,EAAW7zE,EAAOwpC,UAAU48C,EAC1B/lF,KAAK2zE,kBACHxsD,EACAtI,EAAI,KAKR7e,KAAKmN,MACHI,EAAAhD,eAAe47E,4CACf7xE,EAAYzJ,OAEd2oE,EAAW7zE,EAAO6rC,eAEpBzjB,EAAOpoB,EAAO4pC,MAAMuB,EAAMzqC,EAAI,GAAI,CAChC0nB,EACAyrD,IAEFsS,EAAkBC,GAAgBpmF,EAAO0nC,UAAU0+C,EAAclnE,EAAK00C,gBAExErpD,OAAO67E,GAAgBH,GAEvB,IAAI5Q,EAAyB,CAAEjtD,GAC3Bs7D,EAAU1jF,EAAOa,KAAK8kF,EAAcQ,EAAmB36C,EAAWooB,gBAClEpoB,GAAc39B,EAAAmH,KAAKG,KACrB9U,KAAKmhF,6BAA6Bh3D,EAAMk5D,EAASl4C,EAAY6pC,IAE7DA,EAAMxoE,KAAK62E,GACXrjF,KAAKq1E,oBAAoBlrD,EAAM6qD,IAEjC7qD,EAAK2+C,mBACL9oE,KAAKiwE,YAAcmD,EAEnB,IAAI3C,EAAU9wE,EAAO0tC,YACnBtkB,EAAW5W,aACXnS,KAAK0wE,mBACHsV,EAAoBj8D,eACpBohB,EACArhB,GAEFtc,EAAAmmD,mBAAmB5qC,EAAWJ,kBAC9BhpB,EAAO4pC,MAAM,KAAMyrC,EAAO7pC,EAAWooB,iBAGvC,OADAxqC,EAAWyB,SAAS7qB,EAAQ8wE,GACrB1nD,GAID2lD,EAAAzsE,UAAAmkF,cAAR,WACE,IAAKpmF,KAAKivE,QAAS,CACjB,IAAItvE,EAASK,KAAKL,OAClBK,KAAKivE,QAAUtvE,EAAOqtC,UACpBizB,EAAAwE,eAAeyhB,KACft0B,EAAAriC,WAAWrpB,KACX,EACAvG,EAAOyD,IAAI,IAGf,OAAO68D,EAAAwE,eAAeyhB,MAIhBxX,EAAAzsE,UAAAyvE,cAAR,WACE,IAAK1xE,KAAKkvE,QAAS,CACjB,IAAIvvE,EAASK,KAAKL,OAClBK,KAAKkvE,QAAUvvE,EAAO0tC,YAAY4yB,EAAAwE,eAAe4hB,QAC/CrmF,KAAK0wE,mBAAmB,CAAEljE,EAAAmH,KAAKlR,KAAO+J,EAAAmH,KAAKG,MAC3C,KACAnV,EAAO0pC,WAAWrpC,KAAKomF,gBACrBzmF,EAAO0nC,UAAU,EAAGuqB,EAAAriC,WAAWrpB,OAGnCvG,EAAOmuC,kBAAkBmyB,EAAAwE,eAAe4hB,QAAS,aAEnD,OAAOpmB,EAAAwE,eAAe4hB,SAMxB3X,EAAAzsE,UAAAiwE,WAAA,SAAWvrC,GACT,IAAI/pB,EAAiB5c,KAAKwlB,QAAQ5I,eAElC,OADA5c,KAAK60E,gBAAgBj4D,GACd5c,KAAKL,OAAOa,KAAKoc,EAAezK,aAAc,CAAEw0B,GAAQ3mC,KAAKyU,QAAQ29D,iBAI9E1D,EAAAzsE,UAAAqwE,kBAAA,SAAkBgU,EAAwBC,GAKxC,IAAI5mF,EAASK,KAAKL,OACdwqB,EAAOnqB,KAAKiwE,YACZp7D,EAAY7U,KAAKyU,QAAQI,UACzBu9D,EAAiBpyE,KAAKyU,QAAQ29D,eAC9BoU,EAAQr8D,EAAK09C,aAAahzD,EAAWlH,EAAAogE,eAAeuY,IACpDG,EAAQt8D,EAAKo+C,oBAAoB1zD,GAErC,OADAsV,EAAKm+C,cAAcke,GACZ7mF,EAAO4pC,MAAM,KAAM,CACxB5pC,EAAOwqC,GACLxqC,EAAOknC,OAAOurC,GAAkBxgB,EAAAriC,WAAWppB,IAAMyrD,EAAAz5B,SAASyyC,MAAQhZ,EAAAz5B,SAASwyC,MACzEhrE,EAAO4nC,UAAUi/C,EAAM7+D,MAAO4+D,GAC9B5mF,EAAO4nC,UAAUk/C,EAAM9+D,MAAO2+D,IAEhC3mF,EAAO4pC,MAAM,KAAM,CACjB5pC,EAAOmqC,KACL9pC,KAAKkyE,WAAWvyE,EAAO0nC,UAAUm/C,EAAM7+D,MAAOyqD,KAEhDpyE,KAAKyhF,YAAY9hF,EAAO0nC,UAAUo/C,EAAM9+D,MAAOyqD,OAGnDzyE,EAAO0nC,UAAUm/C,EAAM7+D,MAAOyqD,IAC7BA,IAIL1D,EAAAzsE,UAAA4gF,mBAAA,SAAmByD,EAAwBC,GAGzC,IAAI5mF,EAASK,KAAKL,OACdwqB,EAAOnqB,KAAKiwE,YACZp7D,EAAY7U,KAAKyU,QAAQI,UACzBu9D,EAAiBpyE,KAAKyU,QAAQ29D,eAC9BmD,EAAOprD,EAAKo+C,oBAAoB1zD,EAAWlH,EAAAogE,eAAeuY,IAC9D,OAAO3mF,EAAO4pC,MAAM,KAAM,CACxB5pC,EAAOwpC,UAAUosC,EAAK5tD,MAAO4+D,GAC7BvmF,KAAKyhF,YAAY6E,GACjB3mF,EAAO0nC,UAAUkuC,EAAK5tD,MAAOyqD,IAC5BA,IAIL1D,EAAAzsE,UAAAw/E,YAAA,SAAY96C,GACV,IAAI9pB,EAAkB7c,KAAKwlB,QAAQ3I,gBAEnC,OADA7c,KAAK60E,gBAAgBh4D,GACd7c,KAAKL,OAAOa,KAAKqc,EAAgB1K,aAAc,CAAEw0B,GAAQirB,EAAAriC,WAAWyY,OAI7E0mC,EAAAzsE,UAAAqgF,gBAAA,SAAgB37C,EAAqBxc,GACnC,YADmC,IAAAA,MAAanqB,KAAKiwE,aAC9CjwE,KAAKL,OAAO4nC,UAAUpd,EAAK+9C,oBAAoBloE,KAAKyU,QAAQI,WAAW8S,MAAOgf,IAIvF+nC,EAAAzsE,UAAAykF,gBAAA,SAAgB//C,EAAqBxc,GAInC,OAAQynC,EAAA9a,gBAAgBnQ,IACtB,KAAKirB,EAAApiC,aAAa0vB,SAChB,GAAI0S,EAAAla,WAAW/Q,GAAO,CACpB,IAAIhf,EAAQiqC,EAAAta,iBAAiB3Q,GAC7B,GAAIxc,EAAK++C,eAAevhD,EAAOha,EAAAk5D,WAAWwT,cAKxC,OADAlwD,EAAK69C,eAAergD,EAAOha,EAAAk5D,WAAWwT,cAC/B1yD,EAGX,MAEF,KAAKiqC,EAAApiC,aAAa8uB,MAChB,GAA2B,OAAvBsT,EAAA9Y,aAAanS,GAAgB,CAC/B,IAAIw0C,EAAQvpB,EAAA5Y,mBAAmBrS,GAC/B,GAAIw0C,EACF,OAAOn7E,KAAK0mF,gBAAgB90B,EAAA1Y,cAAcvS,EAAMw0C,EAAQ,GAAIhxD,IAMpE,OAAQ,GAQVukD,EAAAzsE,UAAAs/E,gBAAA,SAAgB56C,EAAqBggD,EAAqBC,GAKxD,OADY5mF,KAAK0mF,gBAAgB//C,EAAMggD,GAEnC3mF,KAAKsiF,gBAAgB37C,EAAMigD,GAC3B5mF,KAAKsiF,gBAAgBtiF,KAAKkyE,WAAWvrC,GAAOigD,IAIlDlY,EAAAzsE,UAAAozE,oBAAA,SAAoBlrD,EAAY6qD,EAAwB6R,gBAAA,IAAAA,OAAA,GACtD,IAAI3f,EAAe/8C,EAAK+8C,aACxB,GAAIA,EAAc,CAChB,IAAIvnE,EAASK,KAAKL,WAClB,IAAkB,IAAA8mB,EAAA3O,EAAAovD,EAAa9pD,UAAQY,EAAAyI,EAAAzO,QAAAgG,EAAA/F,KAAA+F,EAAAyI,EAAAzO,OAAE,CAApC,IAAI6R,EAAK7L,EAAA1c,MACZ,GAAIuoB,EAAM3K,GAAG5R,EAAAjL,YAAY8lE,QAAS,CAChC,IAAIv+C,EAAaC,EAAMlC,MACnBwC,EAAK++C,eAAet/C,EAAYjc,EAAAk5D,WAAWwT,gBACzCwM,GAAY18D,EAAK69C,eAAep+C,EAAYjc,EAAAk5D,WAAWwT,cAC3DrF,EAAMxoE,KACJxM,KAAKyhF,YACH9hF,EAAO0nC,UAAUzd,EAAYC,EAAMhL,KAAK00C,yHAUtDmb,EAAAzsE,UAAAk/E,6BAAA,SACEh3D,EACAkoD,EACAtmB,EACAipB,EACA6R,QADA,IAAA7R,MAAA,WACA,IAAA6R,OAAA,GAEK7R,IAAOA,EAAQ,IAAIjuE,OACxBiuE,EAAMxoE,KACJxM,KAAKL,OAAO4qC,OAEd,IAAIu8C,EAAe9R,EAAM/oE,OAEzB,GADAjM,KAAKq1E,oBAAoBlrD,EAAM6qD,EAAO6R,GAClC7R,EAAM/oE,OAAS66E,EAAc,CAC/B,IAAI3U,EAAapmB,EAAUwH,eACvBgiB,EAAOprD,EAAKo+C,oBAAoBxc,GAC/B5hC,EAAK0gD,YAAYwH,EAAWtmB,IAAY5hC,EAAKi+C,aAAamN,EAAK5tD,MAAOha,EAAAk5D,WAAWiE,SAClF3gD,EAAKigD,UAAUiI,EAAWtmB,IAAY5hC,EAAKi+C,aAAamN,EAAK5tD,MAAOha,EAAAk5D,WAAW7C,SACnF,IAAIrkE,EAASK,KAAKL,OAKlB,OAJAq1E,EAAM8R,EAAe,GAAKnnF,EAAOwpC,UAAUosC,EAAK5tD,MAAO0qD,GACvD2C,EAAMxoE,KACJ7M,EAAO0nC,UAAUkuC,EAAK5tD,MAAOwqD,IAExBxyE,EAAO4pC,MAAM,KAAMyrC,EAAO7C,GAC5B,OAAI6C,EAAM/oE,OAAS,GACxB+oE,EAAM8R,EAAe,GAAKzU,EACnBryE,KAAKL,OAAO4pC,MAAM,KAAMyrC,EAAOjpB,EAAUwH,iBAE3C8e,GAIT3D,EAAAzsE,UAAAqxE,mBAAA,SAAmBnpD,EAAY6qD,WACzBr1E,EAASK,KAAKL,OAClB,GAAIwqB,EAAKjL,GAAE,MAA4B,CAIrC,IADA,IAAIjL,OAAM,EACHA,EAASkW,EAAKlW,QAAQkW,EAAOlW,EACpCjU,KAAKq1E,oBAAoBlrD,EAAM6qD,GAAO,YAEtC,IAAkB,IAAAvuD,EAAA3O,EAAAqS,EAAKi9C,eAAe1+C,eAAa1K,EAAAyI,EAAAzO,QAAAgG,EAAA/F,KAAA+F,EAAAyI,EAAAzO,OAAE,CAAhD,IAAI6R,EAAK7L,EAAA1c,MACRsoB,EAAaC,EAAMlC,MACnBwC,EAAK++C,eAAet/C,EAAYjc,EAAAk5D,WAAWwT,gBAC7ClwD,EAAK69C,eAAep+C,EAAYjc,EAAAk5D,WAAWwT,cAC3CrF,EAAMxoE,KACJxM,KAAKyhF,YACH9hF,EAAO0nC,UAAUzd,EAAYC,EAAMhL,KAAK00C,uHAWpDmb,EAAAzsE,UAAA+9E,eAAA,SACE13D,EACA4e,EACAq+B,EACAuf,EAEAiC,QAFA,IAAAjC,OAAA,QAEA,IAAAiC,OAAA,GAEIz+D,EAASnN,aAAaw2C,EAAA9gD,eAAeoR,SACvCjiB,KAAKiN,QACHM,EAAAhD,eAAey8E,6DACfzhB,EAAW16D,MAAOyd,EAASnW,cAG/B,IAAI80E,EAAc//C,EAAWA,EAASj7B,OAAS,EAC3C4iD,EAAeo4B,EAEfvB,EADep9D,EAAStU,UAAUigD,mBAElC0xB,EAAer9D,EAAStU,UAAU+V,eAAe9d,OACjD25E,EAAcD,EACdr9D,EAASpJ,GAAG5R,EAAAjL,YAAYwiB,cACxB6gE,IACAE,IACA/2B,GAEJ3kD,OAAO+8E,GAAevB,GAEtB,IAAI/lF,EAASK,KAAKL,OAClB,IAAKK,KAAK60E,gBAAgBvsD,GAAW,OAAO3oB,EAAO6rC,cACnD,IAAIL,EAAa7iB,EAAStU,UAAUm3B,WAChC+7C,EAAe5+D,EAASpJ,GAAG5R,EAAAjL,YAAY0xE,eAG3C,GAAIkT,EAAcrB,EAAa,CACxB1+C,KACHA,EAAW,IAAIngC,MAAM6+E,IACZ35E,OAAS,GAEpB,IAAI8d,EAAiBzB,EAAStU,UAAU+V,eACpCy2C,EAAiBl4C,EAASrmB,UAAUkjE,cAActhB,WACtD35C,OAAOs2D,EAAev0D,QAAU8d,EAAe9d,QAE/C,IADA,IAAIk7E,GAA0B,EACrB9mF,EAAIwuD,EAAcxuD,EAAIslF,IAAgBtlF,EAAG,CAChD,IAAI8mB,EAAcq5C,EAAengE,GAAG8mB,YACpC,GAAIA,EAAa,CACf,IAAIzJ,OAAQ,EACZ,GACEjQ,EAAA40C,oBAAoBl7B,EAAY3Q,QAE7BkH,EAAW1d,KAAKoS,SAASkwD,kBAAkBn7C,EAAamB,EAAS6B,KAAMJ,EAAe1pB,MAErFqd,EAASlH,MAAQm7C,EAAA/gD,YAAYiQ,OAIjC,CACA,IAAIuyD,EAAepzE,KAAKiwE,YACxBjwE,KAAKiwE,YAAc3nD,EAAS6B,KAC5B+c,EAAS16B,KAAKxM,KAAK2zE,kBACLnT,EAAengE,GAAG8mB,YAC9B4C,EAAe1pB,GAAE,IAGnBL,KAAKiwE,YAAcmD,EACnB,UAGJlsC,EAAS16B,KAAKud,EAAe1pB,GAAGmzD,aAAa7zD,IAC7CwnF,GAA0B,EAE5B,IAAKA,IACED,EAAc,CACjB,IAAI/hE,EAAWmD,EAEf,GADAA,EAAWtoB,KAAKyxE,iBAAiBnpD,IAC5BtoB,KAAK60E,gBAAgBvsD,GAAW,OAAO3oB,EAAO6rC,cACnDljB,EAAS6B,KAAKpX,MAAQoS,EAASgF,KAAKpX,MACpC,IAAIwvE,EAAmBp3C,EAAWooB,eAC9B6zB,EAAOznF,EAAOa,KAAK8nB,EAASnW,aAAc+0B,EAAUq7C,GAYxD,OAXAviF,KAAK6uE,YAAc1jC,EACfA,EAAW8mC,YACT6S,GACFsC,EAAOpnF,KAAKyhF,YAAY2F,GACxBpnF,KAAK6uE,YAAcrhE,EAAAmH,KAAKG,MACdiyE,EAGV/mF,KAAKovE,oBAAoBr6D,IAAIqyE,GAF7BA,EAAOpnF,KAAKsiF,gBAAgB8E,IAKzBznF,EAAO4pC,MAAM,KAAM,CACxB5pC,EAAO0pC,WAAWrpC,KAAKomF,gBAAiBzmF,EAAOyD,IAAIyrD,IACnDu4B,GACCpnF,KAAK6uE,YAAYtb,iBAQ1B,IAAI5sB,EAAOhnC,EAAOa,KAAK8nB,EAASnW,aAAc+0B,EAAUiE,EAAWooB,gBAUnE,OATAvzD,KAAK6uE,YAAc1jC,EACfA,EAAW8mC,YACT6S,GACFn+C,EAAO3mC,KAAKyhF,YAAY96C,GACxB3mC,KAAK6uE,YAAcrhE,EAAAmH,KAAKG,MACdiyE,IACVpgD,EAAO3mC,KAAKsiF,gBAAgB37C,KAGzBA,GAIT+nC,EAAAzsE,UAAAiiF,oBAAA,SACElwE,EACAyvE,EACAe,EACAjf,EACAkf,EACAK,QADA,IAAAL,MAAA,QACA,IAAAK,OAAA,GAEA,IAAIj2B,EAAe21B,EAAoBv4E,OAEvC,IAAKjM,KAAKokF,mBACRpwE,EACA66C,EACW,GAAX41B,EACAlf,GAEA,OAAOvlE,KAAKL,OAAO6rC,cAGrB,IAAIq5C,EAAuBJ,EAAU51B,EAAe,EAAIA,EACpD3nB,EAAW,IAAIngC,MAAqB89E,GACpCl9D,EAAQ,EACR88D,IACFv9C,EAAS,GAAKu9C,EACd98D,EAAQ,GAGV,IADA,IAAIoC,EAAiB/V,EAAU+V,eACtB1pB,EAAI,EAAGA,EAAIwuD,IAAgBxuD,IAAKsnB,EACvCuf,EAASvf,GAAS3nB,KAAK2zE,kBAAkB6Q,EAAoBnkF,GAAI0pB,EAAe1pB,GAAE,GAKpF,OADA6J,OAAOyd,GAASk9D,GACT7kF,KAAKqnF,iBAAiBrzE,EAAWyvE,EAAUv8C,EAAU49C,IAI9DpW,EAAAzsE,UAAAolF,iBAAA,SACErzE,EACAyvE,EACAv8C,EACA49C,QADA,IAAA59C,MAAA,WACA,IAAA49C,OAAA,GAEA,IAAImC,EAAc//C,EAAWA,EAASj7B,OAAS,EAC3C4iD,EAAeo4B,EAEfvB,EADe1xE,EAAUigD,mBAEzB0xB,EAAe3xE,EAAU+V,eAAe9d,OACxC25E,EAAcD,EACd3xE,EAAU8V,aACV47D,IACAE,IACA/2B,GAEJ3kD,OAAO+8E,GAAevB,GAEtB1lF,KAAK0wE,mBAAmB18D,EAAU+V,eAAgB/V,EAAUm3B,WAAYn3B,EAAU8V,UAClF,IAAInqB,EAASK,KAAKL,OAGlB,GAAIsnF,EAAcrB,EAAa,CACxB1+C,KACHA,EAAW,IAAIngC,MAAM6+E,IACZ35E,OAAS,GAGpB,IADA,IAAI8d,EAAiB/V,EAAU+V,eACtB1pB,EAAIwuD,EAAcxuD,EAAIslF,IAAgBtlF,EAC7C6mC,EAAS16B,KAAKud,EAAe1pB,GAAGmzD,aAAa7zD,IAIjD,IAAIwrC,EAAan3B,EAAUm3B,WACvBxE,EAAOhnC,EAAO0rC,cAAco4C,EAAUv8C,EAAUlzB,EAAUiX,qBAU9D,OATAjrB,KAAK6uE,YAAc1jC,EACfA,EAAW8mC,YACT6S,GACFn+C,EAAO3mC,KAAKyhF,YAAY96C,GACxB3mC,KAAK6uE,YAAcrhE,EAAAmH,KAAKG,MAExB6xB,EAAO3mC,KAAKsiF,gBAAgB37C,IAGzBhnC,EAAO4pC,MAAM,KAAM,CACxB5pC,EAAO0pC,WAAWrpC,KAAKomF,gBACrBzmF,EAAOyD,IAAIyrD,IAEbloB,GACC3mC,KAAK6uE,YAAYtb,iBAGtBmb,EAAAzsE,UAAA85E,uBAAA,SACEhyC,EACAq4B,EACAyV,GAKA,IAHA,IAAIhyB,EAAc9b,EAAW8b,YACzByhC,EAAiBzhC,EAAY55C,OAC7Bs7E,EAAQ,IAAIxgF,MAAqBugF,KAC5BjnF,EAAI,EAAGA,EAAIinF,IAAkBjnF,EACpCknF,EAAMlnF,GAAKL,KAAK2zE,kBAAkB9tB,EAAYxlD,GAAImN,EAAAmH,KAAKG,KACrD,GAIJ,OADAyyE,EAAMD,GAAkBtnF,KAAK2zE,kBAAkB9tB,EAAYyhC,GAAiBllB,EAAgByV,GACrF73E,KAAKL,OAAO4pC,MAAM,KAAMg+C,EAAOvnF,KAAK6uE,YAAYtb,iBAGzDmb,EAAAzsE,UAAA+5E,+BAAA,SACEjyC,EACAq4B,EACAyV,GAEA,IAAIzqD,EAASptB,KAAKoS,SAASwwD,+BACzB74B,EACA/pC,KAAKiwE,YACL7N,GAEF,IAAKh1C,EAAQ,OAAOptB,KAAKL,OAAO6rC,cAChC,OAAQpe,EAAO5W,MACb,KAAKm7C,EAAA/gD,YAAY6N,MACf,IAAI+jD,EAAqBp1C,EAAQF,eAAeykC,EAAAtkD,aAAasB,YAAa3O,KAAKiwE,YAAY/wD,GAAE,QAC7F,IAAKsjD,EAKH,OAJAxiE,KAAKmN,MACHI,EAAAhD,eAAek4D,qCACf14B,EAAWA,WAAWl/B,MAAeuiB,EAAQjb,cAExCnS,KAAKL,OAAO6rC,cAErB,IAAIi5C,EAAUzkF,KAAK2zE,kBAAkB5pC,EAAWA,WAAoB3c,EAAQvO,KAAI,GAGhF,OAAO7e,KAAKsjF,kBAAkB9gB,EAAY,CACxCz4B,EAAWoc,mBACVpc,EAAY06C,EAA2B,GAAlB5M,GAO5B,OAJA73E,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8oB,EAAWl/B,OAEN7K,KAAKL,OAAO6rC,eAGrBkjC,EAAAzsE,UAAAg6E,0BAAA,SACElyC,EACAy9C,EACA3P,GAEA,IAAIvjE,EAAcy1B,EAAWz1B,YAAYy8C,QACzC7mD,QAAQoK,EAAYuS,gBACpB,IAUIyB,EAVA6B,EAAOnqB,KAAKiwE,YACZpM,EAAiB15C,EAAK05C,eACtB5hE,EAAY,IAAI0vD,EAAAv9C,kBAClBE,EAAY1T,KAAKmL,KAAKE,OAClBqI,EAAY1T,KAAKmL,KACjB,cAAgB83D,EAAe56C,mBAAmBzd,SAAS,IAC/Dq4D,EACAvvD,EACAq9C,EAAA9gD,eAAemC,MAGbwV,EAA0B7e,EAAAy3D,QAAQj3C,EAAK3B,yBAI3C,GAAIg/D,EAAqB,CACvB,IAAIriB,EAAgBljE,EAAUkjE,cAC1B3E,EAAiB2E,EAActhB,WAC/B4jC,EAAuBjnB,EAAev0D,OAGtC8d,EAAiBy9D,EAAoBz9D,eACrC0qC,EAAgB1qC,EAAe9d,OACnC,GAAIw7E,EAAuBhzB,EAKzB,OAJAz0D,KAAKmN,MACHI,EAAAhD,eAAegZ,+BACfwmB,EAAWl/B,MAAO4pD,EAAcjpD,WAAYi8E,EAAqBj8E,YAE5DxL,KAAKL,OAAO6rC,cAKrB,IADA,IAAIwoB,EAAiB,IAAIjtD,MAAc0gF,GAC9BpnF,EAAI,EAAGA,EAAIonF,IAAwBpnF,EAAG,CAC7C,IAAIogE,EAAgBD,EAAengE,GAEnC,GADA2zD,EAAe3zD,GAAKogE,EAAc7/D,KAAKmL,MAClC0B,EAAAikD,cAAc+O,EAAc5hD,MAAO,CAMtC,KALI8jD,EAAe3iE,KAAKoS,SAASguD,YAC/BK,EAAc5hD,KACdglD,EAAe5vD,OACfuU,IAEiB,OAAOxoB,KAAKL,OAAO6rC,cACtC,IAAKzhB,EAAe1pB,GAAG+yD,uBAAuBuP,GAK5C,OAJA3iE,KAAKmN,MACHI,EAAAhD,eAAeqpE,mCACfnT,EAAc51D,MAAOkf,EAAe1pB,GAAGmL,WAAYm3D,EAAan3D,YAE3DxL,KAAKL,OAAO6rC,eAOzB,IAAIL,EAAaq8C,EAAoBr8C,WACrC,IAAK19B,EAAAikD,cAAcyT,EAAch6B,YAAa,CAM5C,KALIw3B,EAAe3iE,KAAKoS,SAASguD,YAC/B+E,EAAch6B,WACd04B,EAAe5vD,OACfuU,IAEiB,OAAOxoB,KAAKL,OAAO6rC,cACtC,GACEL,GAAc39B,EAAAmH,KAAKG,KACf6tD,GAAgBn1D,EAAAmH,KAAKG,MACpB6tD,EAAavP,uBAAuBjoB,GAMzC,OAJAnrC,KAAKmN,MACHI,EAAAhD,eAAeqpE,mCACfzO,EAAch6B,WAAWtgC,MAAO83D,EAAan3D,WAAY2/B,EAAW3/B,YAE/DxL,KAAKL,OAAO6rC,cAKvB,IAAI1hB,EAAW09D,EAAoB19D,SAC/B49D,EAAeviB,EAAcrhB,iBACjC,GAAI4jC,EAAc,CAChB,IAAK59D,EAKH,OAJA9pB,KAAKmN,MACHI,EAAAhD,eAAe85D,+CACfqjB,EAAa78E,OAER7K,KAAKL,OAAO6rC,cAErB,IAAIm3B,EAKJ,KALIA,EAAe3iE,KAAKoS,SAASguD,YAC/BsnB,EACA7jB,EAAe5vD,OACfuU,IAEiB,OAAOxoB,KAAKL,OAAO6rC,cACtC,IAAK1hB,EAASspC,uBAAuBuP,GAKnC,OAJA3iE,KAAKmN,MACHI,EAAAhD,eAAeqpE,mCACf8T,EAAa78E,MAAOif,EAASte,WAAYm3D,EAAan3D,YAEjDxL,KAAKL,OAAO6rC,cAIvB,IAAIx3B,EAAY,IAAIxG,EAAA2Y,UAAU4D,EAAgBohB,EAAYrhB,GAS1D,GARA9V,EAAUigD,mBAAqBQ,EAC/BzgD,EAAUggD,eAAiBA,EAC3B1rC,EAAW,IAAIqpC,EAAAx9C,SACblS,EAAUrB,KACVqB,EACA+R,EACAwU,IAEGxoB,KAAK60E,gBAAgBvsD,GAAW,OAAOtoB,KAAKL,OAAO6rC,cACxDxrC,KAAK6uE,YAAc2Y,EAAoB3oE,SAGlC,CAML,KALAyJ,EAAWtoB,KAAK2yE,kCACd1wE,EACA,GACAumB,IAEa,OAAOxoB,KAAKL,OAAO6rC,cAClCxrC,KAAK6uE,YAAcvmD,EAAStU,UAAU6K,KAGxC,IAAI8I,EAAQ3nB,KAAKy3E,yBAAyBnvD,GAC1C,OAAOX,EAAQ,EACX3nB,KAAKL,OAAO6rC,cACZxrC,KAAKL,OAAOyD,IAAIukB,IAId+mD,EAAAzsE,UAAA0lF,4BAAR,SAAoC59C,GAClC,IAAI9lB,EAAe8lB,EAAWl/B,MAAMY,OAAOwY,aACvC7S,EAAcpR,KAAKwlB,QAAQpU,YAC/BlH,OAAOkH,EAAYmD,IAAI0P,IACH7S,EAAYlQ,IAAI+iB,GACjB/E,GAAG5R,EAAAjL,YAAYsvE,WAChC3xE,KAAKgzE,kBAAkB/uD,EAAc8lB,IASzC2kC,EAAAzsE,UAAAi6E,4BAAA,SACEnyC,EACAq4B,EACAyV,GAEA,IAAIl4E,EAASK,KAAKL,OACdwqB,EAAOnqB,KAAKiwE,YACZpM,EAAiB15C,EAAK05C,eAG1B,OAAQ95B,EAAWvzB,MACjB,KAAK/I,EAAAgJ,SAAS6rC,KACZ,IAAI7tC,EAAUzU,KAAKyU,QAInB,OAHK2tD,EAAe1zC,iBAClB1uB,KAAK6uE,YAAcp6D,EAAQI,WAEtBJ,EAAQc,SACX5V,EAAO0D,IAAI,GACX1D,EAAOyD,IAAI,GAEjB,KAAKqK,EAAAgJ,SAAS8rC,KAEZ,OADAviD,KAAK6uE,YAAcrhE,EAAAmH,KAAK/Q,KACjBjE,EAAOyD,IAAI,GAEpB,KAAKqK,EAAAgJ,SAAS+rC,MAEZ,OADAxiD,KAAK6uE,YAAcrhE,EAAAmH,KAAK/Q,KACjBjE,EAAOyD,IAAI,GAEpB,KAAKqK,EAAAgJ,SAAS64C,KACZ,GAAIuU,EAAe3kD,GAAG5R,EAAAjL,YAAYwiB,UAAW,CAC3C,IAAIs/C,EAAYj6D,OAAOigB,EAAKi6C,YAAY92D,EAAAtK,cAAckC,QAClDwN,EAAgBxI,OAAO25D,EAAe5vD,QAAS/J,OAAOwI,EAAc8D,MAAQm7C,EAAA/gD,YAAY6N,OAC5F,IAAI2zD,EAAiBpyE,KAAKyU,QAAQ29D,eAClC,GAAIvO,EAAe3kD,GAAG5R,EAAAjL,YAAYmgB,eAC3B2H,EAAKjL,GAAE,IAAuB,CACjCiL,EAAKjY,IAAG,IAOR,IAAI8iE,EAAyB,CAC3Br1E,EAAOwqC,GACLxqC,EAAO8mC,MAAM2rC,GAAkBxgB,EAAAriC,WAAWppB,IAAMyrD,EAAA/+B,QAAQ03C,OAAS3Y,EAAA/+B,QAAQy3C,OACvE3qE,EAAO0nC,UAAU88B,EAAUx8C,MAAOyqD,IAEpCzyE,EAAOwpC,UAAUg7B,EAAUx8C,MACzB3nB,KAAKkyE,WACHlyE,KAAK01E,eAAsBhjE,OAUnC,OALA1S,KAAK21E,wBAA+BjjE,EAAesiE,GACnDA,EAAMxoE,KACJ7M,EAAO0nC,UAAU88B,EAAUx8C,MAAOyqD,IAEpCpyE,KAAK6uE,YAAc1K,EAAUtlD,KACtBlf,EAAO4pC,MAAM,KAAMyrC,EAAO5C,GAIrC,IAAItoD,EAAW5f,OAAO25D,EAAe7vD,UAAU8V,UAE/C,OADA9pB,KAAK6uE,YAAc/kD,EACZnqB,EAAO0nC,UAAU88B,EAAUx8C,MAAOmC,EAASypC,gBAOpD,OALAvzD,KAAKmN,MACHI,EAAAhD,eAAe85D,+CACft6B,EAAWl/B,OAEb7K,KAAK6uE,YAAc7uE,KAAKyU,QAAQI,UACzBlV,EAAO6rC,cAEhB,KAAK/9B,EAAAgJ,SAASusC,MACZ,IAAI4kC,EAAO5nF,KAAKiwE,YACZ4X,EAAiBD,EAAK/jB,eAU1B,GATIgkB,EAAe3oE,GAAG5R,EAAAjL,YAAYmgB,eAC3BolE,EAAK1oE,GAAE,MAEVlf,KAAKmN,MACHI,EAAAhD,eAAeu9E,iGACf/9C,EAAWl/B,QAIb+8E,EAAK1oE,GAAE,MAA4B,CACrC,IAAI6oE,EAAaH,EAAKxjB,YAAY92D,EAAAtK,cAAckC,OAChD,GAAI6iF,EAAY,CACd,IACI97D,EADkB/hB,OAAO69E,EAAWlpE,KAAK6P,gBAClBzC,KAC3B,GAAIA,EAEF,OADAjsB,KAAK6uE,YAAc5iD,EAAKpN,KACjBlf,EAAO0nC,UAAU0gD,EAAWpgE,MAAOsE,EAAKpN,KAAK00C,iBAI1D,GAAIs0B,EAAe3oE,GAAG5R,EAAAjL,YAAYwiB,UAAW,CACvCnS,EAAgBxI,OAAO29E,EAAe5zE,QAAS/J,OAAOwI,EAAc8D,MAAQm7C,EAAA/gD,YAAY6N,OAC5F,IAAI2kE,EAA4B1wE,EAAeuZ,KAC/C,GAAIm3D,EAAmB,CACrB,IAAI4E,EAAY5E,EAAkBvkE,KAElC,OADA7e,KAAK6uE,YAAcmZ,EACZroF,EAAO0nC,UAAU,EAAG2gD,EAAUz0B,iBAQzC,OALAvzD,KAAKmN,MACHI,EAAAhD,eAAeg6D,iDACfx6B,EAAWl/B,OAEb7K,KAAK6uE,YAAc7uE,KAAKyU,QAAQI,UACzBlV,EAAO6rC,cAIlBxrC,KAAK2nF,4BAA4B59C,GAGjC,IAAI3c,EAASptB,KAAKoS,SAAS4vD,kBACzBj4B,EACA5f,EACAnqB,KAAK4uE,aAAe/K,GAEtB,IAAKz2C,EAAQ,OAAOztB,EAAO6rC,cAE3B,OAAQpe,EAAO5W,MACb,KAAKm7C,EAAA/gD,YAAYgX,MACf,IAAI/I,EAAeuO,EAAQvO,KAE3B,GADA3U,OAAO2U,GAAQrR,EAAAmH,KAAKG,MACRsY,EAAQlO,GAAG5R,EAAAjL,YAAYglB,SACjC,OAAOrnB,KAAK27E,sBAA6BvuD,EAAQg1C,EAAgByV,GAEnE,IAAIjuD,EAAqBwD,EAAQzF,MAMjC,OALAzd,OAAO0f,GAAc,GACjB/K,EAAKK,GAAE,MAAwBiL,EAAK6+C,YAAYp/C,EAAYjc,EAAAk5D,WAAW7C,SAAS,KAClFnlD,EAAOA,EAAKuzC,iBAEdpyD,KAAK6uE,YAAchwD,EACZ7e,KAAKL,OAAO0nC,UAAUzd,EAAY/K,EAAK00C,gBAEhD,KAAK5B,EAAA/gD,YAAYiQ,OACf,IAAK7gB,KAAKyyE,cAAsBrlD,GAC9B,OAAOptB,KAAKL,OAAO6rC,cAEjB3sB,EAAgBuO,EAAQvO,KAE5B,OADA3U,OAAO2U,GAAQrR,EAAAmH,KAAKG,MACPsY,EAAQlO,GAAG5R,EAAAjL,YAAYglB,SAC3BrnB,KAAK27E,sBAA8BvuD,EAAQg1C,EAAgByV,IAEpE73E,KAAK6uE,YAAchwD,EACZ7e,KAAKL,OAAO8nC,WAAoBra,EAAQjb,aAAc0M,EAAK00C,iBAEpE,KAAK5B,EAAA/gD,YAAY2W,UACf,OAAK6F,EAAOlO,GAAG5R,EAAAjL,YAAYsvE,WAQ3B3xE,KAAK6uE,YAAcrhE,EAAAmH,KAAKvR,IACRgqB,EAAQlO,GAAG5R,EAAAjL,YAAYglB,UACrCnd,OAA4C,GAAzBkjB,EAAQlG,mBACpBlnB,KAAKL,OAAOyD,IAAI6sC,QAAoB7iB,EAAQhG,wBAE9CpnB,KAAKL,OAAO8nC,WAAuBra,EAAQjb,aAAcy/C,EAAAriC,WAAWrpB,OAZzElG,KAAKmN,MACHI,EAAAhD,eAAe09E,+HACfl+C,EAAWl/B,OAEb7K,KAAK6uE,YAAcrhE,EAAAmH,KAAKvR,IACjBpD,KAAKL,OAAO6rC,eASvB,KAAKmmB,EAAA/gD,YAAYgN,mBACf,IAAI0K,EAAWtoB,KAAKoS,SAASyL,gBACRuP,EACnB,KACAzjB,EAAAy3D,QAAqBj3C,EAAK3B,0BAE5B,IAAMF,IAAYtoB,KAAK60E,gBAAgBvsD,GAAY,OAAO3oB,EAAO6rC,cACjE,IAAI7jB,EAAQ3nB,KAAKy3E,yBAAyBnvD,GAE1C,OADAtoB,KAAK6uE,YAAcvmD,EAAStU,UAAU6K,KAC/B7e,KAAKL,OAAOyD,IAAIukB,GAO3B,OAJA3nB,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8oB,EAAWl/B,OAEN7K,KAAKL,OAAO6rC,eAGrBkjC,EAAAzsE,UAAAk6E,4BAAA,SACEpyC,EACAq4B,EACAyV,GAEA,IAAIl4E,EAASK,KAAKL,OAKdgnC,EAAO3mC,KAAKy5E,4BAA4B1vC,EAAWA,WAAY/pC,KAAKyU,QAAQI,WAC5EqzE,EAAaloF,KAAK6uE,YAClB/lC,EAAe9oC,KAAKoS,SAASguD,YAAYr2B,EAAW4c,OAAQ3mD,KAAKiwE,YAAYpM,gBAEjF,GADA7jE,KAAK6uE,YAAcrhE,EAAAmH,KAAK/Q,MACnBklC,EAAc,OAAOnpC,EAAO6rC,cAGjC,IAAK1C,EAAa5pB,GAAE,KAClB,OAAOvf,EAAO4pC,MAAM,KAAM,CACxBvpC,KAAK28E,kBAAkBh2C,EAAMuhD,EAAY16E,EAAAmH,KAAKG,KAAsD,IAAhC,EAAf+iE,IAAkD,EAAO9tC,EAAWA,YACzHpqC,EAAOyD,IAAI8kF,GAAcp/C,EAAe,EAAI,IAC3C8oB,EAAAriC,WAAWrpB,KAIhB,IAAKgiF,EAAWhpE,GAAE,KAChB,OAAOvf,EAAO4pC,MAAM,KAAM,CACxBvpC,KAAK28E,kBAAkBh2C,EAAMuhD,EAAY16E,EAAAmH,KAAKG,KAAsD,IAAhC,EAAf+iE,IAAiD,EAAO9tC,EAAWA,YACxHpqC,EAAOyD,IAAI,IACVwuD,EAAAriC,WAAWrpB,KAIhB,IAAIksE,EAAiB8V,EAAW30B,eAGhC,GAAI20B,EAAWhpE,GAAE,OAAyB4pB,EAAa5pB,GAAE,KAAsB,CAG7E,GAAIgpE,EAAW91B,gBAAgBjlC,eAAe2b,GAC5C,OAAOnpC,EAAOknC,OACZurC,GAAkBxgB,EAAAriC,WAAWppB,IACzByrD,EAAAz5B,SAASyyC,MACThZ,EAAAz5B,SAASwyC,MACbhkC,EACAuhD,EAAW10B,aAAa7zD,IAK5B,GAAImpC,EAAa3b,eAAe+6D,GAAa,CAC3C,IAAI1iE,EAAUxlB,KAAKwlB,QACnB,IAAM0iE,EAAWpW,cAAehpC,EAAagpC,YAAc,CACzD,IACIyI,EADOv6E,KAAKiwE,YACK1H,oBAAoB2f,GACrClrE,EAAqB9S,OAAOsb,EAAQxI,oBAExC,OADAhd,KAAK60E,gBAAgB73D,GACdrd,EAAOwqC,GACZxqC,EAAO8mC,MACL2rC,GAAkBxgB,EAAAriC,WAAWppB,IACzByrD,EAAA/+B,QAAQ03C,OACR3Y,EAAA/+B,QAAQy3C,OACZ3qE,EAAO4nC,UAAUgzC,EAAU5yD,MAAOgf,IAEpChnC,EAAOyD,IAAI,GACXpD,KAAKggF,eAAehjE,EAAoB,CACtCrd,EAAO0nC,UAAUkzC,EAAU5yD,MAAOyqD,GAClCzyE,EAAOyD,IAAI0lC,EAAapa,eAAgB7b,KACvCk3B,IAGL/pC,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8oB,EAAWl/B,YAMZ,CAGL,GAAIq9E,EAAW/6D,eAAe2b,GAC5B,OAAOnpC,EAAO4pC,MAAM,KAAM,CACxBvpC,KAAK28E,kBAAkBh2C,EAAMuhD,EAAY16E,EAAAmH,KAAKG,KAAsD,IAAhC,EAAf+iE,IAAkD,EAAO9tC,EAAWA,YACzHpqC,EAAOyD,IAAI,IACVwuD,EAAAriC,WAAWrpB,KAGT,GAAI4iC,EAAa3b,eAAe+6D,GAAa,CAC9C1iE,EAAUxlB,KAAKwlB,QACnB,IAAM0iE,EAAWpW,cAAehpC,EAAagpC,YAAc,CAKrDyI,EADOv6E,KAAKiwE,YACK1H,oBAAoB2f,GACrClrE,EAAqB9S,OAAOsb,EAAQxI,oBAExC,OADAhd,KAAK60E,gBAAgB73D,GACdrd,EAAOwqC,GACZxqC,EAAO8mC,MACL2rC,GAAkBxgB,EAAAriC,WAAWppB,IACzByrD,EAAA/+B,QAAQ03C,OACR3Y,EAAA/+B,QAAQy3C,OACZ3qE,EAAO4nC,UAAUgzC,EAAU5yD,MAAOgf,IAEpChnC,EAAOyD,IAAI,GACXpD,KAAKggF,eAAehjE,EAAoB,CACtCrd,EAAO0nC,UAAUkzC,EAAU5yD,MAAOyqD,GAClCzyE,EAAOyD,IAAI0lC,EAAapa,eAAgB7b,KACvCk3B,IAGL/pC,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8oB,EAAWl/B,QAOnB,OAAOlL,EAAO4pC,MAAM,KAAM,CACxBvpC,KAAK28E,kBAAkBh2C,EAAMuhD,EAAY16E,EAAAmH,KAAKG,KAAsD,IAAhC,EAAf+iE,IAAkD,EAAO9tC,EAAWA,YACzHpqC,EAAOyD,IAAI,IACVwuD,EAAAriC,WAAWrpB,MAGhBwoE,EAAAzsE,UAAAm6E,yBAAA,SACEryC,EACAq4B,EACAyV,EACAsQ,QAAA,IAAAA,OAAA,GAEA,IAAIxoF,EAASK,KAAKL,OAClB,OAAQoqC,EAAWhnB,aACjB,KAAKtV,EAAAuV,YAAY0rC,MACfxkD,QAAQi+E,GACR,IAAIt1B,EAAYuP,EAAe1zC,eAC/B,OAAImkC,GACEA,EAAU5wD,WAAajC,KAAKwlB,QAAQrJ,eAC/Bnc,KAAKooF,oBACVl+E,OAAO2oD,EAAU7mC,eAAe,GACP+d,EAAYgb,oBACrC,EACA8yB,EACA9tC,IAIN/pC,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8oB,EAAWl/B,OAENlL,EAAO6rC,eAEhB,KAAK/9B,EAAAuV,YAAY+rC,MACf,IAAIs5B,EAAsCt+C,EAAYzoC,MAItD,OAHI6mF,IACFE,GAAcA,GAEZjmB,GAAkB50D,EAAAmH,KAAK9Q,IAClBlE,EAAOkE,IAASwkF,IAEzBroF,KAAK6uE,YAAcrhE,EAAAmH,KAAK7Q,IACjBnE,EAAOmE,IAAIukF,IAEpB,KAAK56E,EAAAuV,YAAYisC,QACf,IAAI8T,EAAsCh5B,EAAYzoC,MAClD6mF,IACFplB,EAAWkB,QACT3uD,QAAQ,GACRytD,IAGJ,IAAIlkD,EAAO7e,KAAKoS,SAAS0wD,4BAA4BC,EAAUX,GAE/D,OADApiE,KAAK6uE,YAAchwD,EACXA,EAAKrI,MACX,OAAqB,IAAKxW,KAAKyU,QAAQc,SAAU,OAAO5V,EAAOyD,IAAI6sC,QAAQ8yB,IAC3E,OAAmB,OAAOpjE,EAAO0D,IAAI4sC,QAAQ8yB,GAAW7yB,SAAS6yB,IACjE,OAAqB,IAAK/iE,KAAKyU,QAAQc,SAAU,OAAO5V,EAAOyD,IAAI6sC,QAAQ8yB,IAC3E,OAAmB,OAAOpjE,EAAO0D,IAAI4sC,QAAQ8yB,GAAW7yB,SAAS6yB,IACjE,QAAmB,OAAOpjE,EAAOkE,IAAIykF,WAAWvlB,IAChD,QAAmB,OAAOpjE,EAAOmE,IAAIykF,WAAWxlB,IAChD,QAAS,OAAOpjE,EAAOyD,IAAI6sC,QAAQ8yB,IAGvC,KAAKt1D,EAAAuV,YAAYC,OAEf,OADA/Y,QAAQi+E,GACDnoF,KAAKwoF,qBAA8Cz+C,GAE5D,KAAKt8B,EAAAuV,YAAYmsC,OAEf,OADAjlD,QAAQi+E,GACDnoF,KAAKyoF,qBAA8C1+C,EAAYq4B,GAS1E,OALApiE,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8oB,EAAWl/B,OAEb7K,KAAK6uE,YAAczM,EACZziE,EAAO6rC,eAGhBkjC,EAAAzsE,UAAAumF,qBAAA,SAAqBz+C,GACnB,OAAO/pC,KAAKu2E,mBAAmBxsC,EAAWzoC,QAG5CotE,EAAAzsE,UAAAmmF,oBAAA,SACEvR,EACAhxB,EACA21B,EACA3D,EACAtS,GAmBA,IAjBA,IAAI5lE,EAASK,KAAKL,OACd6lB,EAAUxlB,KAAKwlB,QACfrJ,EAAiBjS,OAAOsb,EAAQrJ,gBAChCi7D,EAAgBltE,OAAOlK,KAAKoS,SAASuL,aAAaxB,EAAgB,CAAE06D,KACpEh9D,EAAsB3P,OAAOsb,EAAQ3L,qBACrC6oD,EAAY0U,EAAcv4D,KAC1BsL,EAAOnqB,KAAKiwE,YAGZ+S,EAAW74D,EAAK09C,aAAanF,GAC7BgmB,EAAgBv+D,EAAK09C,aAAahuD,EAAoBgF,MAGtD5S,EAAS45C,EAAY55C,OACrBmR,EAAS,IAAIrW,MAAqBkF,GAClCsW,GAAW,EACXomE,EAAoB9R,EAAYtjB,eAC3BlzD,EAAI,EAAGA,EAAI4L,IAAU5L,EAAG,CAC/B,IAAI0pC,EAAa8b,EAAYxlD,GACzBsmC,EAAOoD,EACPpqC,EAAO4yC,qBACLvyC,KAAK2zE,kBAA8B5pC,EAAY8sC,EAAW,IAI5DA,EAAYrjB,aAAa7zD,GACzBiyD,EAAA9a,gBAAgBnQ,IAASirB,EAAApiC,aAAaolB,MACxC1qC,OAAO0nD,EAAA7a,kBAAkBpQ,IAASgiD,GAElCpmE,GAAW,EAEbnF,EAAO/c,GAAKsmC,EAId,GAAIpkB,EAAU,CACZ4H,EAAKm+C,cAAc0a,GACnB74D,EAAKm+C,cAAcogB,GAEnB,IAAI/R,EAAoBnxD,EAAQmxD,kBAC5BQ,EAAgBn3E,KAAK42E,wBAAwBC,EAAaz5D,GAC1DwrE,EAAgBrqB,QAAQ4Y,EAAc1kE,OAAQ6C,QAAQqhE,IAI1D,GAAmB,GAAfkB,EAAkD,CACpD,IAAIgR,EAAe7oF,KAAKk3E,wBAAwBL,EAAaM,GACzD2R,EAAevqB,QAAQsqB,EAAap2E,OAAQ6C,QAAQqhE,IAExD,OADA32E,KAAK6uE,YAAcnM,EACZl9C,EAAQ/Q,QAAQc,SACnBvV,KAAKL,OAAO0D,IAAI4sC,QAAQ64C,GAAe54C,SAAS44C,IAChD9oF,KAAKL,OAAOyD,IAAI6sC,QAAQ64C,IAKxBniD,EAAO3mC,KAAKggF,eAAex6D,EAAQtI,mBAAoB,CACzDvd,EAAOyD,IAAI6I,GACXuZ,EAAQ/Q,QAAQc,SACZ5V,EAAO0D,IAAIwzE,EAAYkS,WACvBppF,EAAOyD,IAAIyzE,EAAYkS,WAC3BppF,EAAOyD,IAAIg0E,EAAcvkE,IACzB2S,EAAQ/Q,QAAQc,SACZ5V,EAAO0D,IAAI4sC,QAAQ24C,GAAgB14C,SAAS04C,IAC5CjpF,EAAOyD,IAAI6sC,QAAQ24C,KACtBrjB,GAEH,OADAvlE,KAAK6uE,YAAcnM,EACZ1iE,KAAKsiF,gBAAgBtiF,KAAKkyE,WAAWvrC,IAMhD,IADaywC,EAAclqD,eAAeykC,EAAAtkD,aAAauB,aAAa,GASlE,OAPAub,EAAKm+C,cAAc0a,GACnB74D,EAAKm+C,cAAcogB,GACnB1oF,KAAKmN,MACHI,EAAAhD,eAAe03E,+CACf1c,EAAW16D,MAAOusE,EAAcjlE,cAElCnS,KAAK6uE,YAAcnM,EACZ/iE,EAAO6rC,cAEhB,IAAIw9C,EAAkBtmB,EAAUnP,eAE5ByhB,EAAQ,IAAIjuE,MAEhBiuE,EAAMxoE,KACJ7M,EAAOwpC,UAAU65C,EAASr7D,MACxB3nB,KAAKggF,eAAex6D,EAAQtI,mBAAoB,CAC9Cvd,EAAOyD,IAAI6I,GACXuZ,EAAQ/Q,QAAQc,SACZ5V,EAAO0D,IAAIwzE,EAAYkS,WACvBppF,EAAOyD,IAAIyzE,EAAYkS,WAC3BppF,EAAOyD,IAAIg0E,EAAcvkE,IACzB2S,EAAQ/Q,QAAQc,SACZ5V,EAAO0D,IAAI,GACX1D,EAAOyD,IAAI,IACdmiE,KAIP,IAAI0jB,EAAY/+E,OAAOktE,EAAc39D,aAAa,cAClDvP,OAAO++E,EAAUzyE,MAAQm7C,EAAA/gD,YAAY4N,OACrCw2D,EAAMxoE,KACJ7M,EAAOwpC,UAAUu/C,EAAc/gE,MAC7BhoB,EAAOgoC,KAAK+6B,EAAUzQ,UAAU,EAC9BtyD,EAAO0nC,UAAU27C,EAASr7D,MAAOqhE,GACjCA,EACQC,EAAW59D,gBAKzB,IADA,IAAI4mD,EAAY4E,EAAY5E,UACZ8W,GAAP1oF,EAAI,EAAew2E,EAAYkS,WAAW1oF,EAAI4L,IAAU5L,EAAG,CAClE,IAAIgyE,EAAYj1D,EAAO/c,GACnB4xE,IAEFI,EAAYryE,KAAKkyE,WAAWG,IAG9B2C,EAAMxoE,KACJ7M,EAAO4mC,MAAMswC,EAAY5kB,SACvBtyD,EAAO0nC,UAAUqhD,EAAc/gE,MAAOqhE,GACtC3W,EACAsW,EACAtoF,GAAK0oF,IAWX,OANA/T,EAAMxoE,KACJ7M,EAAO0nC,UAAU27C,EAASr7D,MAAOqhE,IAEnC7+D,EAAKm+C,cAAc0a,GACnB74D,EAAKm+C,cAAcogB,GACnB1oF,KAAK6uE,YAAcnM,EACZ/iE,EAAO4pC,MAAM,KAAMyrC,EAAOgU,IAGnCta,EAAAzsE,UAAAwmF,qBAAA,SAAqB1+C,EAAqCq4B,GACxD,IAAIziE,EAASK,KAAKL,OAGd+uB,EAAiB0zC,EAAe1zC,eACpC,IAAKA,GAAkBA,EAAexP,GAAG5R,EAAAjL,YAAY+f,UAKnD,OAJApiB,KAAKmN,MACHI,EAAAhD,eAAeqpE,mCACf7pC,EAAWl/B,MAAO,WAAYu3D,EAAe52D,YAExC7L,EAAO6rC,cAIhB,IAAI09C,EAAOx6D,EAAetC,oBAC1B,GAAI88D,EAAM,CAGR,GAAIA,EAAKl1E,UAAUigD,mBAKjB,OAJAj0D,KAAKmN,MACHI,EAAAhD,eAAe4+E,sDACfp/C,EAAWl/B,MAAO6jB,EAAeljB,YAE5B7L,EAAO6rC,cAEhB,GAAI09C,EAAKhqE,GAAG5R,EAAAjL,YAAYm0D,SAKtB,OAJAx2D,KAAKmN,MACHI,EAAAhD,eAAe6+E,mFACfr/C,EAAWl/B,MAAO6jB,EAAeljB,YAE5B7L,EAAO6rC,cAEhB,GAAI09C,EAAKhqE,GAAG5R,EAAAjL,YAAYo0D,WAKtB,OAJAz2D,KAAKmN,MACHI,EAAAhD,eAAe8+E,qFACft/C,EAAWl/B,MAAO6jB,EAAeljB,YAE5B7L,EAAO6rC,cAKlB,IAAIV,EAAQf,EAAWe,MACnBE,EAAWF,EAAM7+B,OACjBmR,EAAS2sB,EAAW3sB,OACpBsB,EAAUgQ,EAAehQ,QACzB4qE,GAAY,EACZ/B,EAAQ,IAAIxgF,MAAqBikC,EAAW,GAE5CuvC,EADOv6E,KAAKiwE,YACK/H,oBAAoBloE,KAAKyU,QAAQI,WACtD3K,OAAO8gC,GAAY5tB,EAAOnR,QAC1B,IAAK,IAAI5L,EAAI,EAAG8V,EAAI60B,EAAU3qC,EAAI8V,IAAK9V,EAAG,CACxC,IAAI6d,EAASQ,EAAUA,EAAQxd,IAAI4pC,EAAMzqC,GAAG0L,MAAQ,KACpD,GAAKmS,GAAUA,EAAO1H,MAAQm7C,EAAA/gD,YAAY4N,MAA1C,CAQA,IAAIK,EAAeX,EAAQW,KAC3B0oE,EAAMlnF,EAAI,GAAKL,KAAKL,OAAO4mC,MACzB1nB,EAAKozC,SACLjyD,KAAKL,OAAO0nC,UAAUkzC,EAAU5yD,MAAO3nB,KAAKyU,QAAQ29D,gBACpDpyE,KAAK2zE,kBAAkBv2D,EAAO/c,GAAY6d,EAAQW,KAAI,GACtDA,EAAK00C,eACGr1C,EAAQmN,mBAbhBrrB,KAAKmN,MACHI,EAAAhD,eAAeo3D,oCACf72B,EAAMzqC,GAAGwK,MAAOigC,EAAMzqC,GAAG0L,KAAM2iB,EAAeljB,YAEhD89E,GAAY,EAahB,OADAtpF,KAAK6uE,YAAcngD,EAAe7P,KAAKuzC,gBACnCk3B,EAAkB3pF,EAAO6rC,eAG7B+7C,EAAM,GAAK5nF,EAAOwpC,UAChBoxC,EAAU5yD,MACV3nB,KAAKkyE,WACHlyE,KAAK01E,eAAehnD,KAKxB64D,EAAMA,EAAMt7E,OAAS,GAAKtM,EAAO0nC,UAAUkzC,EAAU5yD,MAAO3nB,KAAKyU,QAAQ29D,gBAEzEpyE,KAAK6uE,YAAcngD,EAAe7P,KAC3Blf,EAAO4pC,MAAM,KAAMg+C,EAAOvnF,KAAKyU,QAAQ29D,kBAGhD1D,EAAAzsE,UAAAo6E,qBAAA,SACEtyC,EACAq4B,EACAyV,GAEA,IAAIl4E,EAASK,KAAKL,OACdwqB,EAAOnqB,KAAKiwE,YAGZ7iD,EAASptB,KAAKoS,SAASkwD,kBACzBv4B,EAAWA,WACX5f,GAEF,IAAKiD,EAAQ,OAAOztB,EAAO6rC,cAC3B,GAAIpe,EAAO5W,MAAQm7C,EAAA/gD,YAAYuJ,gBAK7B,OAJAna,KAAKmN,MACHI,EAAAhD,eAAeg/E,yEACfx/C,EAAWA,WAAWl/B,OAEjB7K,KAAKL,OAAO6rC,cAErB,IAGI9c,EAHAhM,EAAiC0K,EACjC1a,EAA8B,KAC9BsZ,EAAgB+d,EAAW/d,cAqB/B,OAdEtZ,GAJCsZ,GACoD,QAApD0C,EAAiB0zC,EAAe1zC,iBACjCA,EAAexP,GAAG5R,EAAAjL,YAAY6S,SAEdlV,KAAKoS,SAASuL,aAC5B+E,EACAgM,EAAe1C,cACfriB,EAAAy3D,QAAqBj3C,EAAK3B,0BAGZxoB,KAAKoS,SAAS+uD,8BAC5Bz+C,EACAsJ,EACA7B,EAAK05C,eAAe5vD,OACpBtK,EAAAy3D,QAAqBj3C,EAAK3B,yBAC1BuhB,KAIAq4B,GAAkB50D,EAAAmH,KAAKG,OAAM+iE,GAAe,GACzC73E,KAAKwpF,mBAAmB92E,EAAeq3B,EAAWnnB,UAAWi1D,EAAiB9tC,IAF1DpqC,EAAO6rC,eAMpCkjC,EAAAzsE,UAAAshF,kBAAA,SAAkB7wE,EAAsB6yD,GACtC,IAAIj9C,EAAW5V,EAAc0Z,oBAC7B,GAAI9D,EAGF,OADKA,EAASnN,aAAaw2C,EAAA9gD,eAAeoR,SAASjiB,KAAK60E,gBAAgBvsD,GACjEA,EAIT,IAAIo9C,EAAYhzD,EAAcuZ,KAC9B,GAAIy5C,EAAW,CACb,IAAI+jB,EAAWzpF,KAAKujF,kBAAkB7d,EAAWH,GACjDj9C,EAAW,IAAIqpC,EAAAx9C,SACb7G,EAAAtK,cAAcoC,YACd,IAAIusD,EAAAv9C,kBACF9G,EAAAtK,cAAcoC,YACdsN,EAEsB+2E,EAASn1E,YAAay8C,SAE9C04B,EAASz1E,UACT,WAKFsU,EAAW,IAAIqpC,EAAAx9C,SACb7G,EAAAtK,cAAcoC,YACd,IAAIusD,EAAAv9C,kBACF9G,EAAAtK,cAAcoC,YACdsN,EACA1S,KAAKwlB,QAAQhS,8BAA8BlG,EAAAtK,cAAcoC,YACvDkI,EAAAjL,YAAYwiB,SAAWvX,EAAAjL,YAAYmgB,cAGvC,IAAIhV,EAAA2Y,UAAU,KAAMzT,EAAcmM,KAAMnM,EAAcmM,MACtD,MAIJyJ,EAASnW,aAAeO,EAAcP,aAAe7E,EAAA5K,mBAAqB,cAC1E4lB,EAASpW,IAAI5E,EAAAjL,YAAYsvE,UACzBrpD,EAASrmB,UAAUomB,oBAAoB,GAAIC,GAC3C5V,EAAc0Z,oBAAsB9D,EACpC,IAAI8qD,EAAepzE,KAAKiwE,YACpB9lD,EAAO7B,EAAS6B,KACpBnqB,KAAKiwE,YAAc9lD,EAGnB,IAAInW,EAAYsU,EAAStU,UACrBrU,EAASK,KAAKL,OACdyyE,EAAiBpyE,KAAKyU,QAAQ29D,eAC9B4C,EAAQ,IAAIjuE,MAqBhB,GAZAiuE,EAAMxoE,KACJ7M,EAAOwqC,GACLxqC,EAAO8mC,MAAM2rC,GAAkBxgB,EAAAriC,WAAWppB,IAAMyrD,EAAA/+B,QAAQ03C,OAAS3Y,EAAA/+B,QAAQy3C,OACvE3qE,EAAO0nC,UAAU,EAAG+qC,IAEtBzyE,EAAOwpC,UAAU,EACfnpC,KAAKkyE,WACHlyE,KAAK01E,eAAehjE,OAKxBgzD,EAAW,CACb,IAAI37C,EAAiB/V,EAAU+V,eAC3B0qC,EAAgB1qC,EAAe9d,OAC/Bi7B,EAAW,IAAIngC,MAAqB,EAAI0tD,GAC5CvtB,EAAS,GAAKvnC,EAAO0nC,UAAU,EAAG+qC,GAClC,IAAK,IAAI/xE,EAAI,EAAGA,EAAIo0D,IAAiBp0D,EACnC6mC,EAAS7mC,EAAI,GAAKV,EAAO0nC,UAAUhnC,EAAI,EAAG0pB,EAAe1pB,GAAGkzD,gBAG9DyhB,EAAMxoE,KACJ7M,EAAOwpC,UAAU,EACfnpC,KAAKggF,eAAe91E,OAAOw7D,EAAUt5C,qBAAsB8a,EAAUq+B,KAI3EvlE,KAAK21E,wBAAwBjjE,EAAesiE,GAC5C,IAAIjtD,EAAO/nB,KAAKmhF,6BAA6Bh3D,EAAMxqB,EAAO0nC,UAAU,EAAG+qC,GAAiB1/D,EAAcmM,KAAMm2D,GAC5G7qD,EAAK2+C,mBACL9oE,KAAKiwE,YAAcmD,EAGnB,IAAIxlC,EAAU5tC,KAAK0wE,mBAAmB18D,EAAU+V,eAAgB/V,EAAUm3B,WAAYn3B,EAAU8V,UAC5FS,EAASjC,EAASI,cAClB4kB,EAAW,IAAIvmC,MACfkgF,EAAc,EAAIjzE,EAAU+V,eAAe9d,OAC3CsnE,EAAYhpD,EAAOte,OACvB,GAAIsnE,EAAY0T,EACd,IAAS5mF,EAAI4mF,EAAa5mF,EAAIkzE,IAAalzE,EAAGitC,EAAS9gC,KAAK+d,EAAOlqB,GAAGwe,KAAK00C,gBAE7E,IAAIkd,EAAU9wE,EAAO0tC,YAAY/kB,EAASnW,aAAcy7B,EAASN,EAAUvlB,GAE3E,OADAO,EAASkC,SAAS7qB,EAAQ8wE,GACnBnoD,GAGTomD,EAAAzsE,UAAAunF,mBAAA,SAEE92E,EAEA8xE,EAEA3M,EAEAtS,GAEA,IAAI2jB,EAAOlpF,KAAKujF,kBAAkB7wE,EAAe6yD,GAC7C5+B,EAAO3mC,KAAKsjF,kBACd4F,EACA1E,EACAjf,EACAvlE,KAAKyU,QAAQI,UAAU2+C,aAAaxzD,KAAKL,QACzCk4E,GAKF,OAHIjmB,EAAA7a,kBAAkBpQ,IAASirB,EAAAriC,WAAWyY,OACxChoC,KAAK6uE,YAAcn8D,EAAcmM,MAE5B8nB,GAQT+nC,EAAAzsE,UAAAq6E,gCAAA,SACEna,EACAC,EACAyV,GAEA,IAAIl4E,EAASK,KAAKL,OACdwqB,EAAOnqB,KAAKiwE,YAEhBjwE,KAAK2nF,4BAA4BxlB,GAEjC,IAAI/0C,EAASptB,KAAKoS,SAAS8vD,gCAAgCC,EAAgBh4C,EAAMi4C,GACjF,IAAKh1C,EAAQ,OAAOztB,EAAO6rC,cAE3B,OAAQpe,EAAO5W,MACb,KAAKm7C,EAAA/gD,YAAYiQ,OACf,IAAK7gB,KAAKyyE,cAAsBrlD,GAC9B,OAAOztB,EAAO6rC,cAEhB,IAAI+D,EAAsBniB,EAAQvO,KAElC,OADA3U,OAAOqlC,GAAc/hC,EAAAmH,KAAKG,MACbsY,EAAQlO,GAAG5R,EAAAjL,YAAYglB,SAC3BrnB,KAAK27E,sBAA8BvuD,EAAQg1C,EAAgByV,IAEpE73E,KAAK6uE,YAAct/B,EACZ5vC,EAAO8nC,WAAoBra,EAAQjb,aAAco9B,EAAWgkB,iBAErE,KAAK5B,EAAA/gD,YAAY2W,UACf,IAAImiE,EAAUx/E,OAAmBkjB,EAAQnZ,QACzC,OADkD/J,OAAOw/E,EAAQlzE,MAAQm7C,EAAA/gD,YAAYmW,MAChF/mB,KAAK0yE,YAAkBgX,IAI5B1pF,KAAK6uE,YAAcrhE,EAAAmH,KAAKvR,IACRgqB,EAAQlO,GAAG5R,EAAAjL,YAAYglB,UACrCnd,OAA4C,GAAzBkjB,EAAQlG,mBACpBvnB,EAAOyD,IAAI6sC,QAAoB7iB,EAAQhG,wBAEzCznB,EAAO8nC,WAAuBra,EAAQjb,aAAcy/C,EAAAriC,WAAWrpB,OARpElG,KAAK6uE,YAAcrhE,EAAAmH,KAAKvR,IACjBpD,KAAKL,OAAO6rC,eASvB,KAAKmmB,EAAA/gD,YAAY4N,MACftU,OAAekjB,EAAQ/B,cAAgB,GACvC,IAAIo3D,EAAWziF,KAAKy5E,4BAClBvvE,OAAOlK,KAAKoS,SAAS8tD,uBACrBlgE,KAAKyU,QAAQI,WAGf,OADA7U,KAAK6uE,YAAsBzhD,EAAQvO,KAC5Blf,EAAOgoC,KACJva,EAAQvO,KAAKozC,SACb7kC,EAAQvO,KAAKK,GAAG,GACxBujE,EACQr1D,EAAQvO,KAAK00C,eACbnmC,EAAQ/B,cAGpB,KAAKsmC,EAAA/gD,YAAYuN,mBACf,IAAIC,EAAsCgP,EAAQhP,gBAClD,GAAIA,EAAiB,CACnB,IAAIvd,EAASb,KAAKoS,SAASyL,gBAAgBO,EAAiB,MAC5D,GAAIvd,EAAQ,OAAOb,KAAKsjF,kBAAkBziF,EAAQ,GAAIshE,EAAgB,GAExE,OAAOxiE,EAAO6rC,cAEhB,KAAKmmB,EAAA/gD,YAAY0N,SACf,IAAIkN,EAAiBthB,OAAkBkjB,EAAQ5B,gBAC/C,OAAOxrB,KAAKsjF,kBAAkB93D,EAAgB,GAAI22C,EAChDniE,KAAKy5E,4BACHvvE,OAAOlK,KAAKoS,SAAS8tD,uBACrBlgE,KAAKyU,QAAQI,YAInB,KAAK88C,EAAA/gD,YAAYgN,mBAKf,OAJA5d,KAAKmN,MACHI,EAAAhD,eAAeo/E,wEACfxnB,EAAet3D,MAA2BuiB,EAAQxsB,MAE7CjB,EAAO6rC,cAOlB,OAJAxrC,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACfkhD,EAAet3D,OAEVlL,EAAO6rC,eAGhBkjC,EAAAzsE,UAAAs6E,yBAAA,SACExyC,EACAq4B,EACAyV,GAEA,IAAI/vB,EAAS/d,EAAW+d,OACpBC,EAAShe,EAAWge,OACpBixB,EAAYh5E,KAAKiwE,YAEjBmJ,EAAWp5E,KAAKL,OAAO4yC,qBACzBvyC,KAAKq5E,cACHr5E,KAAKy5E,4BAA4B1vC,EAAWH,UAAWp8B,EAAAmH,KAAK/Q,MAC5D5D,KAAK6uE,cAKT,GACEjd,EAAA9a,gBAAgBsiC,IAAaxnB,EAAApiC,aAAaolB,OAC1Cgd,EAAA7a,kBAAkBqiC,IAAaxnB,EAAAriC,WAAWrpB,IAE1C,OAAO0rD,EAAA5a,iBAAiBoiC,GACpBp5E,KAAKy5E,4BAA4B3xB,EAAQsa,GACzCpiE,KAAKy5E,4BAA4B1xB,EAAQqa,GAG/C,IAAIwnB,EAAa5Q,EAAUtR,OAC3B1nE,KAAKiwE,YAAc2Z,EACnB,IAAIC,EAAa7pF,KAAKy5E,4BAA4B3xB,EAAQsa,EAA+B,GAAfyV,GACtEiS,EAAa9pF,KAAK6uE,YAClBkb,EAA2B/pF,KAAKovE,oBAAoB76D,IAAIs1E,GAExDG,EAAahR,EAAUtR,OAC3B1nE,KAAKiwE,YAAc+Z,EACnB,IAAIC,EAAajqF,KAAKy5E,4BAA4B1xB,EAAQqa,EAA+B,GAAfyV,GACtEqS,EAAalqF,KAAK6uE,YAClBsb,EAA2BnqF,KAAKovE,oBAAoB76D,IAAI01E,GAExDrL,EAAapxE,EAAAmH,KAAK0+C,kBAAkBy2B,EAAYI,GAAY,GAChE,IAAKtL,EAMH,OALA5+E,KAAKmN,MACHI,EAAAhD,eAAeqpE,mCACf7rB,EAAOl9C,MAAOq/E,EAAW1+E,WAAYs+E,EAAWt+E,YAElDxL,KAAK6uE,YAAczM,EACZpiE,KAAKL,OAAO6rC,cAErBq+C,EAAa7pF,KAAK28E,kBAChBkN,EACAC,EAAYlL,GACZ,GAAO,EACP92B,GAEFmiC,EAAajqF,KAAK28E,kBAChBsN,EACAC,EAAYtL,GACZ,GAAO,EACP72B,GAEF/nD,KAAK6uE,YAAc+P,EAEfmL,GAA4BI,EACzBJ,GAIHE,EAAajqF,KAAKkyE,WAAW+X,GAC7BE,GAA2B,IAJ3BN,EAAa7pF,KAAKkyE,WAAW2X,GAC7BE,GAA2B,IAKnBA,GAA4BnL,EAAW3M,YAE/C4X,EAAa7pF,KAAKuhF,gBAAgBsI,EAAYD,EAAY5Q,GAC1DiR,EAAajqF,KAAKuhF,gBAAgB0I,EAAYD,EAAYhR,IAI9D6Q,EAAa7pF,KAAKmhF,6BAA6ByI,EAAYC,EAAYjL,GACvEgL,EAAW9gB,mBAEXmhB,EAAajqF,KAAKmhF,6BAA6B6I,EAAYC,EAAYrL,GACvEoL,EAAWlhB,mBAEX9oE,KAAKiwE,YAAc+I,EACnBA,EAAUnP,cAAc+f,EAAYI,GAEpC,IAAIrjD,EAAO3mC,KAAKL,OAAOwqC,GAAGivC,EAAUyQ,EAAYI,GAGhD,OAFA//E,OAAO6/E,GAA4BI,GAC/BJ,GAA0B/pF,KAAKovE,oBAAoBr6D,IAAI4xB,GACpDA,GAGT+nC,EAAAzsE,UAAAu6E,8BAAA,SACEzyC,EACAq4B,EACAyV,GAEA,IAAIl4E,EAASK,KAAKL,OACdwqB,EAAOnqB,KAAKiwE,YAGZma,EAAWpqF,KAAK2zE,kBAClB5pC,EAAW2e,QACX0Z,GAAkB50D,EAAAmH,KAAKG,KACnBtH,EAAAmH,KAAKvR,IACLg/D,EAAc,GAKpB,GAAIxQ,EAAA9a,gBAAgBszC,IAAax4B,EAAApiC,aAAa2uB,YAAa,OAAOisC,EAGlE,IASIzjD,EATA4zC,EAA0B,KAW9B,OAVInY,GAAkB50D,EAAAmH,KAAKG,OACzBylE,EAAYpwD,EAAK09C,aAAa7nE,KAAK6uE,aACnCub,EAAWzqF,EAAO4nC,UAChBgzC,EAAU5yD,MACVyiE,IAMIrgD,EAAWsb,UACjB,KAAKlD,EAAAC,MAAM2V,UACT,OAAQ/3D,KAAK6uE,YAAYr4D,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEmwB,EAAOhnC,EAAOknC,OACZ+qB,EAAAz5B,SAASw8C,OACTyV,EACAzqF,EAAOyD,IAAI,IAEb,MAEF,OAEE,GAAIpD,KAAK6uE,YAAY3vD,GAAE,KAAuB,CAE5C,GADIwP,EAAiB1uB,KAAK6uE,YAAYngD,eAGpC,GADInB,EAAWmB,EAAexB,eAAeykC,EAAAtkD,aAAaoD,aAC5C,CACZk2B,EAAO3mC,KAAK4hF,qBAAqBr0D,EAAUwc,EAAW2e,QAAS0hC,EAAUrgD,GACzE,MAOJ,OAJA/pC,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8oB,EAAWl/B,OAENlL,EAAO6rC,cAGlB,OACE,IAAI/2B,EAAUzU,KAAKyU,QACnBkyB,EAAOhnC,EAAOknC,OACZpyB,EAAQc,SACJq8C,EAAAz5B,SAASknD,OACTztB,EAAAz5B,SAASw8C,OACbyV,EACApqF,KAAK6uE,YAAYpb,YAAY9zD,IAE/B,MAEF,OACA,OACEgnC,EAAOhnC,EAAOknC,OACZ+qB,EAAAz5B,SAASknD,OACT+K,EACAzqF,EAAO0D,IAAI,IAEb,MAEF,QACEsjC,EAAOhnC,EAAOknC,OACZ+qB,EAAAz5B,SAASmnD,OACT8K,EACAzqF,EAAOkE,IAAI,IAEb,MAEF,QACE8iC,EAAOhnC,EAAOknC,OACZ+qB,EAAAz5B,SAASonD,OACT6K,EACAzqF,EAAOmE,IAAI,IAEb,MAEF,QAEE,OADAoG,QAAO,GACAvK,EAAO6rC,cAGlB,MAEF,KAAK2W,EAAAC,MAAM4V,YACT,OAAQh4D,KAAK6uE,YAAYr4D,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEmwB,EAAOhnC,EAAOknC,OACZ+qB,EAAAz5B,SAASqnD,OACT4K,EACAzqF,EAAOyD,IAAI,IAEb,MAEF,OAEE,GAAIpD,KAAK6uE,YAAY3vD,GAAE,KAAuB,CAC5C,IAAIwP,EAEEnB,EADN,GADImB,EAAiB1uB,KAAK6uE,YAAYngD,eAGpC,GADInB,EAAWmB,EAAexB,eAAeykC,EAAAtkD,aAAaqD,aAC5C,CACZi2B,EAAO3mC,KAAK4hF,qBAAqBr0D,EAAUwc,EAAW2e,QAAS0hC,EAAUrgD,GACzE,MAOJ,OAJA/pC,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8oB,EAAWl/B,OAENlL,EAAO6rC,cAGlB,OACM/2B,EAAUzU,KAAKyU,QACnBkyB,EAAOhnC,EAAOknC,OACZpyB,EAAQc,SACJq8C,EAAAz5B,SAASsnD,OACT7tB,EAAAz5B,SAASqnD,OACb4K,EACApqF,KAAK6uE,YAAYpb,YAAY9zD,IAE/B,MAEF,OACA,OACEgnC,EAAOhnC,EAAOknC,OACZ+qB,EAAAz5B,SAASsnD,OACT2K,EACAzqF,EAAO0D,IAAI,IAEb,MAEF,QACEsjC,EAAOhnC,EAAOknC,OACZ+qB,EAAAz5B,SAASunD,OACT0K,EACAzqF,EAAOkE,IAAI,IAEb,MAEF,QACE8iC,EAAOhnC,EAAOknC,OACZ+qB,EAAAz5B,SAASwnD,OACTyK,EACAzqF,EAAOmE,IAAI,IAEb,MAEF,QAEE,OADAoG,QAAO,GACAvK,EAAO6rC,cAGlB,MAEF,QAEE,OADAthC,QAAO,GACAvK,EAAO6rC,cAIlB,IAAIp5B,EAAWpS,KAAKoS,SAChBgb,EAAShb,EAASkwD,kBAAkBv4B,EAAW2e,QAASv+B,GAG5D,IAAKowD,EAEH,OADAv6E,KAAK6uE,YAAcrhE,EAAAmH,KAAKG,KACnBsY,EACEptB,KAAK2hF,eACVv0D,EACAuZ,EACAoD,EAAW2e,QACXt2C,EAAS8tD,sBACT9tD,EAAS+tD,0BACT,GAPkBxgE,EAAO6rC,cAStB,IAAKpe,EACV,OAAOztB,EAAO6rC,cAIhB,IAAI6+C,EAAWrqF,KAAK2hF,eAClBv0D,EACAuZ,EACAoD,EAAW2e,QACXt2C,EAAS8tD,sBACT9tD,EAAS+tD,0BACT,GAGFngE,KAAK6uE,YAAc0L,EAAU17D,KAC7BsL,EAAKm+C,cAAciS,GACnB,IAAIpI,EAAaoI,EAAU17D,KAAK00C,eAEhC,OAAO5zD,EAAO4pC,MAAM,KAAM,CACxB8gD,EACA1qF,EAAO0nC,UAAUkzC,EAAU5yD,MAAOwqD,IACjCA,IAGLzD,EAAAzsE,UAAAw6E,6BAAA,SACE1yC,EACAq4B,EACAyV,GAEA,IAEIlxC,EAFAhnC,EAASK,KAAKL,OACdk/E,GAAW,EAGf,OAAQ90C,EAAWsb,UACjB,KAAKlD,EAAAC,MAAMlyC,KAUT,GATAy2B,EAAO3mC,KAAK2zE,kBACV5pC,EAAW2e,QACX0Z,GAAkB50D,EAAAmH,KAAKG,KACnBtH,EAAAmH,KAAKvR,IACLg/D,EAAc,GAKhBpiE,KAAK6uE,YAAY3vD,GAAE,KAAuB,CAE5C,GADIwP,EAAiB1uB,KAAK6uE,YAAYngD,eAGpC,GADInB,EAAWmB,EAAexB,eAAeykC,EAAAtkD,aAAa6C,MAC5C,CACZy2B,EAAO3mC,KAAK4hF,qBAAqBr0D,EAAUwc,EAAW2e,QAAS/hB,EAAMoD,GACrE,MAOJ,OAJA/pC,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8oB,EAAWl/B,OAENlL,EAAO6rC,cAIhB,MAEF,KAAK2W,EAAAC,MAAMhyC,MACT,GAAI25B,EAAW2e,QAAQlyC,MAAQ/I,EAAAgJ,SAASqM,UAClBinB,EAAW2e,QAAS3lC,aAAetV,EAAAuV,YAAYisC,SAC/CllB,EAAW2e,QAAS3lC,aAAetV,EAAAuV,YAAY+rC,OAClE,CAEDpoB,EAAO3mC,KAAKo8E,yBAA4CryC,EAAW2e,QAAS0Z,EAAc,GAAwB,GAE9GpiE,KAAKyU,QAAQgW,WAAWzqB,KAAK64E,iBAAiBlyC,EAAMoD,EAAWl/B,OACnE,MAYF,GATA87B,EAAO3mC,KAAK2zE,kBACV5pC,EAAW2e,QACX0Z,GAAkB50D,EAAAmH,KAAKG,KACnBtH,EAAAmH,KAAKvR,IACLg/D,EAAc,GAKhBpiE,KAAK6uE,YAAY3vD,GAAE,KAAuB,CAE5C,GADIwP,EAAiB1uB,KAAK6uE,YAAYngD,eAGpC,GADInB,EAAWmB,EAAexB,eAAeykC,EAAAtkD,aAAa+C,OAC5C,CACZu2B,EAAO3mC,KAAK4hF,qBAAqBr0D,EAAUwc,EAAW2e,QAAS/hB,EAAMoD,GACrE,MAOJ,OAJA/pC,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8oB,EAAWl/B,OAENlL,EAAO6rC,cAGhB,OAAQxrC,KAAK6uE,YAAYr4D,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEmwB,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASqnD,OAAQ7/E,EAAOyD,IAAI,GAAIujC,GACrD,MAEF,OACA,OACEA,EAAOhnC,EAAOknC,OACZ7mC,KAAKyU,QAAQc,SACTq8C,EAAAz5B,SAASsnD,OACT7tB,EAAAz5B,SAASqnD,OACbx/E,KAAK6uE,YAAYrb,aAAa7zD,GAC9BgnC,GAEF,MAEF,OACA,OACEA,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASsnD,OAAQ9/E,EAAO0D,IAAI,GAAIsjC,GACrD,MAEF,QACEA,EAAOhnC,EAAO8mC,MAAMmrB,EAAA/+B,QAAQy3D,OAAQ3jD,GACpC,MAEF,QACEA,EAAOhnC,EAAO8mC,MAAMmrB,EAAA/+B,QAAQ03D,OAAQ5jD,GACpC,MAEF,QACEz8B,QAAO,GACPy8B,EAAOhnC,EAAO6rC,cAGlB,MAEF,KAAK2W,EAAAC,MAAM2V,UAWT,GAVA8mB,GAAW,EACXl4C,EAAO3mC,KAAK2zE,kBACV5pC,EAAW2e,QACX0Z,GAAkB50D,EAAAmH,KAAKG,KACnBtH,EAAAmH,KAAKvR,IACLg/D,EAAc,GAKhBpiE,KAAK6uE,YAAY3vD,GAAE,KAAuB,CAE5C,GADIwP,EAAiB1uB,KAAK6uE,YAAYngD,eAGpC,GADInB,EAAWmB,EAAexB,eAAeykC,EAAAtkD,aAAa8C,YAC5C,CACZw2B,EAAO3mC,KAAK4hF,qBAAqBr0D,EAAUwc,EAAW2e,QAAS/hB,EAAMoD,GACrE,MAOJ,OAJA/pC,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8oB,EAAWl/B,OAENlL,EAAO6rC,cAGhB,OAAQxrC,KAAK6uE,YAAYr4D,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEmwB,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASw8C,OAAQhuC,EAAM3mC,KAAKL,OAAOyD,IAAI,IAC5D,MAEF,OACA,OACEujC,EAAOhnC,EAAOknC,OACZ7mC,KAAKyU,QAAQc,SACTq8C,EAAAz5B,SAASknD,OACTztB,EAAAz5B,SAASw8C,OACbhuC,EACA3mC,KAAK6uE,YAAYpb,YAAY9zD,IAE/B,MAEF,OACA,OACEgnC,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASknD,OAAQ14C,EAAMhnC,EAAO0D,IAAI,IACvD,MAEF,QACEsjC,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASmnD,OAAQ34C,EAAMhnC,EAAOkE,IAAI,IACvD,MAEF,QACE8iC,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASonD,OAAQ54C,EAAMhnC,EAAOmE,IAAI,IACvD,MAEF,QACEoG,QAAO,GACPy8B,EAAOhnC,EAAO6rC,cAGlB,MAEF,KAAK2W,EAAAC,MAAM4V,YAWT,GAVA6mB,GAAW,EACXl4C,EAAO3mC,KAAK2zE,kBACV5pC,EAAW2e,QACX0Z,GAAkB50D,EAAAmH,KAAKG,KACnBtH,EAAAmH,KAAKvR,IACLg/D,EAAc,GAKhBpiE,KAAK6uE,YAAY3vD,GAAE,KAAuB,CAE5C,GADIwP,EAAiB1uB,KAAK6uE,YAAYngD,eAGpC,GADInB,EAAWmB,EAAexB,eAAeykC,EAAAtkD,aAAagD,YAC5C,CACZs2B,EAAO3mC,KAAK4hF,qBAAqBr0D,EAAUwc,EAAW2e,QAAS/hB,EAAMoD,GACrE,MAOJ,OAJA/pC,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8oB,EAAWl/B,OAENlL,EAAO6rC,cAGhB,OAAQxrC,KAAK6uE,YAAYr4D,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEmwB,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASqnD,OAAQ74C,EAAMhnC,EAAOyD,IAAI,IACvD,MAEF,OACA,OACEujC,EAAOhnC,EAAOknC,OACZ7mC,KAAKyU,QAAQc,SACTq8C,EAAAz5B,SAASsnD,OACT7tB,EAAAz5B,SAASqnD,OACb74C,EACA3mC,KAAK6uE,YAAYpb,YAAY9zD,IAE/B,MAEF,OACA,OACEgnC,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASsnD,OAAQ94C,EAAMhnC,EAAO0D,IAAI,IACvD,MAEF,QACEsjC,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASunD,OAAQ/4C,EAAMhnC,EAAOkE,IAAI,IACvD,MAEF,QACE8iC,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASwnD,OAAQh5C,EAAMhnC,EAAOmE,IAAI,IACvD,MAEF,QACEoG,QAAO,GACPy8B,EAAOhnC,EAAO6rC,cAGlB,MAEF,KAAK2W,EAAAC,MAAMmW,YAUT,GATA5xB,EAAO3mC,KAAK2zE,kBACV5pC,EAAW2e,QACX0Z,GAAkB50D,EAAAmH,KAAKG,KACnBtH,EAAAmH,KAAKvR,IACLg/D,EAAc,GAKhBpiE,KAAK6uE,YAAY3vD,GAAE,KAErB,GADIwP,EAAiB1uB,KAAK6uE,YAAYngD,eAGpC,GADInB,EAAWmB,EAAexB,eAAeykC,EAAAtkD,aAAaiD,KAC5C,CACZq2B,EAAO3mC,KAAK4hF,qBAAqBr0D,EAAUwc,EAAW2e,QAAS/hB,EAAMoD,GACrE,MAMNpD,EAAO3mC,KAAKwqF,eAAe7jD,EAAM3mC,KAAK6uE,aACtC7uE,KAAK6uE,YAAcrhE,EAAAmH,KAAK/Q,KACxB,MAEF,KAAKu+C,EAAAC,MAAMoW,MAYT,GAXA7xB,EAAO3mC,KAAK2zE,kBACV5pC,EAAW2e,QACX0Z,GAAkB50D,EAAAmH,KAAKG,KACnBtH,EAAAmH,KAAKvR,IACLg/D,EAAeljD,GAAE,GACf1R,EAAAmH,KAAKtR,IACL++D,EAAc,GAKlBpiE,KAAK6uE,YAAY3vD,GAAE,KAAuB,CAC5C,IAAIwP,EAEEnB,EADN,GADImB,EAAiB1uB,KAAK6uE,YAAYngD,eAGpC,GADInB,EAAWmB,EAAexB,eAAeykC,EAAAtkD,aAAakD,aAC5C,CACZo2B,EAAO3mC,KAAK4hF,qBAAqBr0D,EAAUwc,EAAW2e,QAAS/hB,EAAMoD,GACrE,MAOJ,OAJA/pC,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8oB,EAAWl/B,OAENlL,EAAO6rC,cAShB,OAPE7E,EAAO3mC,KAAK28E,kBAAkBh2C,EAC5B3mC,KAAK6uE,YAAa7uE,KAAK6uE,YAAY2R,SACnC,GAAO,EACPz2C,EAAW2e,SAIP1oD,KAAK6uE,YAAYr4D,MACvB,OACA,OACA,OACA,OACA,OACA,OACA,QACEmwB,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAAS6oD,OAAQr6C,EAAMhnC,EAAOyD,KAAK,IACxD,MAEF,OACA,OACEujC,EAAOhnC,EAAOknC,OACZ7mC,KAAKyU,QAAQc,SACTq8C,EAAAz5B,SAAS8oD,OACTrvB,EAAAz5B,SAAS6oD,OACbr6C,EACA3mC,KAAK6uE,YAAYnb,eAAe/zD,IAElC,MAEF,OACA,OACEgnC,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAAS8oD,OAAQt6C,EAAMhnC,EAAO0D,KAAK,GAAI,IAC5D,MAEF,QACE6G,QAAO,GACPy8B,EAAOhnC,EAAO6rC,cAGlB,MAEF,KAAK2W,EAAAC,MAAMuU,OAKT,OAJA32D,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8oB,EAAWl/B,OAENlL,EAAO6rC,cAEhB,QAEE,OADAthC,QAAO,GACAvK,EAAO6rC,cAGlB,IAAKqzC,EAAU,OAAOl4C,EACtB,IAAIv0B,EAAWpS,KAAKoS,SAChBgb,EAAShb,EAASkwD,kBAAkBv4B,EAAW2e,QAAS1oD,KAAKiwE,aACjE,OAAK7iD,EACEptB,KAAK2hF,eACVv0D,EACAuZ,EACAoD,EAAW2e,QACXt2C,EAAS8tD,sBACT9tD,EAAS+tD,yBACTiC,GAAkB50D,EAAAmH,KAAKG,MAPLnV,EAAO6rC,eAY7BkjC,EAAAzsE,UAAA26E,uBAAA,SAAuBj2C,EAAqB9nB,GAC1C,IAAIlf,EAASK,KAAKL,OACdwqB,EAAOnqB,KAAKiwE,YAChB,OAAQpxD,EAAKrI,MACX,OACM2T,EAAK0gD,YAAYlkC,EAAM9nB,KACzB8nB,EAAO3mC,KAAKyU,QAAQW,WAAU,GAC1BzV,EAAO8mC,MAAMmrB,EAAA/+B,QAAQ43D,cAAe9jD,GACpChnC,EAAOknC,OAAO+qB,EAAAz5B,SAAS60C,OACrBrtE,EAAOknC,OAAO+qB,EAAAz5B,SAAS40C,OACrBpmC,EACAhnC,EAAOyD,IAAI,KAEbzD,EAAOyD,IAAI,MAGnB,MAEF,OACM+mB,EAAK0gD,YAAYlkC,EAAM9nB,KACzB8nB,EAAO3mC,KAAKyU,QAAQW,WAAU,GAC1BzV,EAAO8mC,MAAMmrB,EAAA/+B,QAAQ63D,eAAgB/jD,GACrChnC,EAAOknC,OAAO+qB,EAAAz5B,SAAS60C,OACrBrtE,EAAOknC,OAAO+qB,EAAAz5B,SAAS40C,OACrBpmC,EACAhnC,EAAOyD,IAAI,KAEbzD,EAAOyD,IAAI,MAGnB,MAEF,OACM+mB,EAAK0gD,YAAYlkC,EAAM9nB,KACzB8nB,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAAS20C,OAC5BnmC,EACAhnC,EAAOyD,IAAI,OAGf,MAEF,OACM+mB,EAAK0gD,YAAYlkC,EAAM9nB,KACzB8nB,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAAS20C,OAC5BnmC,EACAhnC,EAAOyD,IAAI,SAGf,MAEF,QACM+mB,EAAK0gD,YAAYlkC,EAAM9nB,KAEzB8nB,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASwyC,MAC5BhkC,EACAhnC,EAAOyD,IAAI,KAMnB,OAAOujC,GAIT+nC,EAAAzsE,UAAA42E,iBAAA,SAAiBlyC,EAAqB97B,GACpC,IAAIu8D,EAAiBpnE,KAAKiwE,YAAY7I,eAClC37D,EAASZ,EAAMY,OACfA,EAAOof,eAAiB,IAAGpf,EAAOof,eAAiB7qB,KAAKL,OAAO02C,iBAAiB5qC,EAAOC,iBAC3Fb,EAAM+f,aAAe+b,EACrBygC,EAAex+C,eAAepc,KAAK3B,IAMrC6jE,EAAAzsE,UAAAuoF,eAAA,SAAe7jD,EAAqB9nB,GAClC,IAAIlf,EAASK,KAAKL,OAClB,OAAQkf,EAAKrI,MACX,OACA,OACA,OACA,OACA,QACEmwB,EAAO3mC,KAAK48E,uBAAuBj2C,EAAM9nB,GAG3C,OACA,OACE,OAAOlf,EAAO8mC,MAAMmrB,EAAA/+B,QAAQy3C,OAAQ3jC,GAEtC,OACA,OACE,OAAOhnC,EAAO8mC,MAAMmrB,EAAA/+B,QAAQ03C,OAAQ5jC,GAEtC,OAAyB3mC,KAAKovE,oBAAoB76D,IAAIoyB,KAAOA,EAAO3mC,KAAKsiF,gBAAgB37C,IACzF,OACE,OAAOhnC,EAAO8mC,MAAmB,IAAb5nB,EAAK8sB,KAAaimB,EAAA/+B,QAAQ03C,OAAS3Y,EAAA/+B,QAAQy3C,OAAQ3jC,GAEzE,QACE,OAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAAS8yC,MAAOtkC,EAAMhnC,EAAOkE,IAAI,IAExD,QACE,OAAOlE,EAAOknC,OAAO+qB,EAAAz5B,SAAS+yC,MAAOvkC,EAAMhnC,EAAOmE,IAAI,IAExD,QAEE,OADAoG,QAAO,GACAvK,EAAOyD,IAAI,KAMxBsrE,EAAAzsE,UAAAo3E,cAAA,SAAc1yC,EAAqB9nB,GACjC,IAAIlf,EAASK,KAAKL,OAClB,OAAQkf,EAAKrI,MACX,OACA,OACA,OACA,OACEmwB,EAAO3mC,KAAK48E,uBAAuBj2C,EAAM9nB,GAG3C,QACA,OACA,OACE,OAAO8nB,EAET,OACA,OACE,OAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASyyC,MAAOjkC,EAAMhnC,EAAO0D,IAAI,IAExD,OAAyBrD,KAAKovE,oBAAoB76D,IAAIoyB,KAAOA,EAAO3mC,KAAKsiF,gBAAgB37C,IACzF,OACE,OAAoB,IAAb9nB,EAAK8sB,KACRhsC,EAAOknC,OAAO+qB,EAAAz5B,SAASyyC,MAAOjkC,EAAMhnC,EAAO0D,IAAI,IAC/CsjC,EAEN,QACE,OAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASgzC,MAAOxkC,EAAMhnC,EAAOkE,IAAI,IAExD,QACE,OAAOlE,EAAOknC,OAAO+qB,EAAAz5B,SAASizC,MAAOzkC,EAAMhnC,EAAOmE,IAAI,IAExD,QAEE,OADAoG,QAAO,GACAvK,EAAOyD,IAAI,KAMxBsrE,EAAAzsE,UAAAyzE,eAAA,SACEhjE,GAGA,IAAI8S,EAAUxlB,KAAKwlB,QACnBtb,OAAOwI,EAAc8S,SAAWA,GAChC,IAAI7lB,EAASK,KAAKL,OACd8U,EAAUzU,KAAKyU,QACnBzU,KAAK6uE,YAAcn8D,EAAcmM,KACjC,IAAIpC,EAAgB+I,EAAQ/I,cAE5B,OADAzc,KAAK60E,gBAAgBp4D,GACd9c,EAAOa,KAAKic,EAActK,aAAc,CAC7CsC,EAAQc,SACJ5V,EAAO0D,IAAIqP,EAAcyZ,qBACzBxsB,EAAOyD,IAAIsP,EAAcyZ,qBAC7BxsB,EAAOyD,IACLsP,EAAcyI,aAAaw2C,EAAA9gD,eAAe0K,WACtC,EACA7I,EAAcG,KAEnB4B,EAAQ29D,iBAIb1D,EAAAzsE,UAAA0zE,wBAAA,SACEjjE,EACAsiE,gBAAA,IAAAA,MAAA,IAEA,IAAIt2D,EAAUhM,EAAcgM,QAC5B,IAAKA,EAAS,MAAO,GAErB,IAAI/e,EAASK,KAAKL,OACdwqB,EAAOnqB,KAAKiwE,YACZqE,EAAWnqD,EAAKjL,GAAE,MAClByrE,EAAiBrW,EACjBpqE,OAAOigB,EAAKi6C,YAAY92D,EAAAtK,cAAckC,QAAQyiB,MAC9C,EACAyqD,EAAiBpyE,KAAKyU,QAAQ29D,mBAElC,IAAmB,IAAA3rD,EAAA3O,EAAA4G,EAAQtB,UAAQY,EAAAyI,EAAAzO,QAAAgG,EAAA/F,KAAA+F,EAAAyI,EAAAzO,OAAE,CAAhC,IAAIkG,EAAMF,EAAA1c,MACb,GACE4c,EAAO1H,MAAQm7C,EAAA/gD,YAAY4N,OAC3BN,EAAOjK,QAAUvB,EAFnB,CAKA,IAAIgb,EAAexP,EAAQhU,QAAQwjB,EAAMlM,MAAMlU,EAAAjL,YAAYgd,QAC3D,IAAI8mD,EAAYz4C,EAAM7O,KAClBikE,EAAkB3c,EAAU5S,eAC5BmgB,EAAkBhmD,EAAMzrB,UAAUyxE,gBACtC,GAAIA,EAAiB,CACnB,IAAIF,EAAWxzE,KAAK2zE,kBAAkBD,EAAiBvN,EACrD,IAEEA,EAAU8L,YAAcjyE,KAAKovE,oBAAoB76D,IAAIi/D,KACvDA,EAAWxzE,KAAKkyE,WAAWsB,IAE7BwB,EAAMxoE,KACJ7M,EAAO4mC,MAAM4/B,EAAUlU,SACrBtyD,EAAO0nC,UAAUsjD,EAAgBvY,GACjCoB,EACAsP,EACAp1D,EAAMrC,mBAGL,CACL,IAAIF,EAAiBuC,EAAMzrB,UAAUkpB,eACrC6pD,EAAMxoE,KACJ7M,EAAO4mC,MAAM4/B,EAAUlU,SACrBtyD,EAAO0nC,UAAUsjD,EAAgBvY,GACjCjnD,GAAkB,EACdxrB,EAAO0nC,UACLitC,EACIpqE,OAAOigB,EAAKi6C,YAAY12C,EAAM9sB,OAAO+mB,MACrC,EAAIwD,EACR23D,GAEF3c,EAAU3S,aAAa7zD,GAC3BmjF,EACAp1D,EAAMrC,mHAKd,OAAO2pD,GAGTtG,EAAAzsE,UAAA2oF,oBAAA,SACEjkD,EACAj0B,GAEA,IAAI/S,EAASK,KAAKL,OACdwqB,EAAOnqB,KAAKiwE,YACZ4a,EAAS1gE,EAAK09C,aAAar6D,EAAAmH,KAAKvR,KAChC0nF,EAASnrF,EAAOgoC,KAAK,GAAG,EAC1BhoC,EAAOknC,OAAO+qB,EAAAz5B,SAASqnD,OACrB74C,EACAhnC,EAAOyD,IAAIpD,KAAKwlB,QAAQmxD,oBAE1B/kB,EAAAriC,WAAWrpB,KAETsjC,EAAQ,cAAgB92B,EAAc9R,KAAO,IAAMupB,EAAKg/C,iBACxD4hB,EAA8B,GAmBlC,OAlBAA,EAAWv+E,KACT7M,EAAOmqC,KACLnqC,EAAOgqC,GAAGH,EACR7pC,EAAOknC,OAAO+qB,EAAAz5B,SAASsyC,MACrB9qE,EAAO4nC,UAAUsjD,EAAOljE,MAAOmjE,GAC/BnrF,EAAOyD,IAAIsP,EAAcG,KAE3BlT,EAAOyD,IAAI,MAMjB2nF,EAAWv+E,KACT7M,EAAOyD,IAAI,IAEb+mB,EAAKm+C,cAAcuiB,GACnB1gE,EAAKk/C,gBACE1pE,EAAO4pC,MAAMC,EAAOuhD,EAAYn5B,EAAAriC,WAAWrpB,MAEtDwoE,EAz/QA,CAA8BnhE,EAAAX,mBA6/Q9B,SAASonE,EACPr7D,EACArE,GAQA,GALAk6D,EAA8Bl6D,EAAYzJ,MAAMY,OAAOwkD,WAEvDwe,EAA+B9c,EAAA/qC,mBAC7BjO,EAAQ/X,KAAM+X,EAAQ1E,OAAQ0E,EAAQuG,GAAG5R,EAAAjL,YAAYwiB,WAAW,GAE7DlM,EAAQwC,aAAaw2C,EAAA9gD,eAAe+T,UAAzC,CAEA,IAAIY,EAAU7M,EAAQ6M,QAClBnF,EAAYnW,OAAOuD,EAAAwX,cAAcxX,EAAAe,cAAcoW,SAAUtQ,EAAY6L,aACrE+jC,EAAO7jC,EAAUuC,UACrB,GAAIshC,GAAQA,EAAKj4C,OAAQ,CACvB,IAAIsC,EAAM21C,EAAK,GAGX31C,EAAIiI,MAAQ/I,EAAAgJ,SAASqM,SAA+BvU,EAAKwU,aAAetV,EAAAuV,YAAYC,QACtFwrD,EAAyDlgE,EAAKjN,MAC1D4iD,EAAKj4C,QAAU,KACjBsC,EAAM21C,EAAK,IACH1tC,MAAQ/I,EAAAgJ,SAASqM,SAA+BvU,EAAKwU,aAAetV,EAAAuV,YAAYC,QACtFurD,EAA8BC,EAC9BA,EAAyDlgE,EAAKjN,MAC1D4iD,EAAKj4C,OAAS,GAChBuZ,EAAQrY,MACNI,EAAAhD,eAAegZ,+BACflD,EAAUxV,MAAO,IAAKq5C,EAAKj4C,OAAOT,aAItCga,EAAQrY,MACNI,EAAAhD,eAAe+Y,wBACf/U,EAAI1D,SAKV2a,EAAQrY,MACNI,EAAAhD,eAAe+Y,wBACf/U,EAAI1D,YAIR2a,EAAQrY,MACNI,EAAAhD,eAAeg6E,wCACflkE,EAAUxV,MAAO,IAAK,MAS5B,SAAgBmrE,EAAQr2E,EAAgBq1E,EAAwBn2D,GAC9D,IAAI5S,EAAS+oE,EAAM/oE,OACnB,OAAc,GAAVA,EAAoBtM,EAAO4qC,MACjB,GAAVt+B,EAAoB+oE,EAAM,GACvBr1E,EAAO4pC,MAAM,KAAMyrC,EACxBn2D,GAAQ+yC,EAAAriC,WAAWy7D,KACfp5B,EAAA7a,kBAAkBi+B,EAAM/oE,EAAS,IACjC4S,GA7jRKnf,EAAAgvE,WAsjRbhvE,EAAAs2E,yFC1zRA,SAAYzrE,GACVA,IAAA,uDACAA,IAAA,+CACAA,IAAA,qCACAA,IAAA,mHACAA,IAAA,6LACAA,IAAA,6EACAA,IAAA,yFACAA,IAAA,uEACAA,IAAA,qEACAA,IAAA,uEACAA,IAAA,qIACAA,IAAA,mGACAA,IAAA,yEACAA,IAAA,+FACAA,IAAA,yFACAA,IAAA,mEACAA,IAAA,+CACAA,IAAA,mFACAA,IAAA,+FACAA,IAAA,mHACAA,IAAA,yFACAA,IAAA,uJACAA,IAAA,mFACAA,IAAA,6FACAA,IAAA,+FACAA,IAAA,iGACAA,IAAA,2DACAA,IAAA,iIACAA,IAAA,yDACAA,IAAA,gEACAA,IAAA,gDACAA,IAAA,gCACAA,IAAA,0FACAA,IAAA,8DACAA,IAAA,0CACAA,IAAA,4GACAA,IAAA,gHACAA,IAAA,0HACAA,IAAA,sGACAA,IAAA,0GACAA,IAAA,wEACAA,IAAA,gFACAA,IAAA,gGACAA,IAAA,sGACAA,IAAA,gHACAA,IAAA,oFACAA,IAAA,4EACAA,IAAA,8HACAA,IAAA,8HACAA,IAAA,wFACAA,IAAA,gHACAA,IAAA,gFACAA,IAAA,oKACAA,IAAA,kLACAA,IAAA,8HACAA,IAAA,gDACAA,IAAA,oCACAA,IAAA,gJACAA,IAAA,4CACAA,IAAA,8FACAA,IAAA,oGACAA,IAAA,sCACAA,IAAA,8DACAA,IAAA,sDACAA,IAAA,4CACAA,IAAA,4DACAA,IAAA,kIACAA,IAAA,wIACAA,IAAA,sDACAA,IAAA,wDACAA,IAAA,oEACAA,IAAA,kDACAA,IAAA,wFACAA,IAAA,wFACAA,IAAA,gHACAA,IAAA,oDACAA,IAAA,kDACAA,IAAA,0HACAA,IAAA,gKACAA,IAAA,kFACAA,IAAA,oEACAA,IAAA,kKACAA,IAAA,kJACAA,IAAA,0IACAA,IAAA,oFACAA,IAAA,sIACAA,IAAA,sDACAA,IAAA,8CACAA,IAAA,4EACAA,IAAA,4FACAA,IAAA,oDACAA,IAAA,8EACAA,IAAA,kFACAA,IAAA,sGACAA,IAAA,0GACAA,IAAA,oMACAA,IAAA,gFACAA,IAAA,sNACAA,IAAA,0JACAA,IAAA,sIACAA,IAAA,4LACAA,IAAA,sLACAA,IAAA,oGACAA,IAAA,gIACAA,IAAA,8HACAA,IAAA,oGACAA,IAAA,oFACAA,IAAA,wKACAA,IAAA,kHACAA,IAAA,4EACAA,IAAA,4KACAA,IAAA,sMACAA,IAAA,0DACAA,IAAA,8FACAA,IAAA,4JACAA,IAAA,gIACAA,IAAA,wDACAA,IAAA,gJACAA,IAAA,gJACAA,IAAA,sGACAA,IAAA,sEACAA,IAAA,wFACAA,IAAA,gFACAA,IAAA,sQACAA,IAAA,8KACAA,IAAA,kLACAA,IAAA,kFACAA,IAAA,0IACAA,IAAA,kDACAA,IAAA,0CACAA,IAAA,wFACAA,IAAA,4HACAA,IAAA,6KACAA,IAAA,2MAtIF,CAAY7K,EAAA6K,iBAAA7K,EAAA6K,eAAc,KA0I1B7K,EAAA8K,uBAAA,SAAuCG,GACrC,OAAQA,GACN,KAAK,IAAK,MAAO,2BACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,oBACjB,KAAK,IAAK,MAAO,iEACjB,KAAK,IAAK,MAAO,sGACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,oDACjB,KAAK,IAAK,MAAO,uCACjB,KAAK,IAAK,MAAO,kCACjB,KAAK,IAAK,MAAO,mCACjB,KAAK,IAAK,MAAO,kEACjB,KAAK,IAAK,MAAO,iDACjB,KAAK,IAAK,MAAO,oCACjB,KAAK,IAAK,MAAO,uDACjB,KAAK,IAAK,MAAO,gDACjB,KAAK,IAAK,MAAO,qCACjB,KAAK,IAAK,MAAO,uBACjB,KAAK,IAAK,MAAO,6CACjB,KAAK,IAAK,MAAO,+CACjB,KAAK,IAAK,MAAO,6DACjB,KAAK,IAAK,MAAO,gDACjB,KAAK,IAAK,MAAO,iFACjB,KAAK,IAAK,MAAO,yCACjB,KAAK,IAAK,MAAO,8CACjB,KAAK,IAAK,MAAO,+CACjB,KAAK,IAAK,MAAO,2DACjB,KAAK,IAAK,MAAO,gCACjB,KAAK,IAAK,MAAO,iEACjB,KAAK,IAAK,MAAO,8BACjB,KAAK,KAAM,MAAO,+BAClB,KAAK,KAAM,MAAO,uBAClB,KAAK,KAAM,MAAO,kBAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,oBAClB,KAAK,KAAM,MAAO,qDAClB,KAAK,KAAM,MAAO,uDAClB,KAAK,KAAM,MAAO,4DAClB,KAAK,KAAM,MAAO,kDAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,sCAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,+CAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,qCAClB,KAAK,KAAM,MAAO,8DAClB,KAAK,KAAM,MAAO,8DAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,gEAClB,KAAK,KAAM,MAAO,uBAClB,KAAK,KAAM,MAAO,iBAClB,KAAK,KAAM,MAAO,2EAClB,KAAK,KAAM,MAAO,yBAClB,KAAK,KAAM,MAAO,8CAClB,KAAK,KAAM,MAAO,iDAClB,KAAK,KAAM,MAAO,kBAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,qBAClB,KAAK,KAAM,MAAO,gCAClB,KAAK,KAAM,MAAO,iEAClB,KAAK,KAAM,MAAO,qEAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,2BAClB,KAAK,KAAM,MAAO,iCAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,yDAClB,KAAK,KAAM,MAAO,yBAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,4DAClB,KAAK,KAAM,MAAO,+EAClB,KAAK,KAAM,MAAO,wCAClB,KAAK,KAAM,MAAO,iCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,4EAClB,KAAK,KAAM,MAAO,wEAClB,KAAK,KAAM,MAAO,yCAClB,KAAK,KAAM,MAAO,kEAClB,KAAK,KAAM,MAAO,8BAClB,KAAK,KAAM,MAAO,0BAClB,KAAK,KAAM,MAAO,6CAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,6BAClB,KAAK,KAAM,MAAO,8CAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,mDAClB,KAAK,KAAM,MAAO,qDAClB,KAAK,KAAM,MAAO,iGAClB,KAAK,KAAM,MAAO,+CAClB,KAAK,KAAM,MAAO,+GAClB,KAAK,KAAM,MAAO,8EAClB,KAAK,KAAM,MAAO,oEAClB,KAAK,KAAM,MAAO,6FAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,6DAClB,KAAK,KAAM,MAAO,iEAClB,KAAK,KAAM,MAAO,gEAClB,KAAK,KAAM,MAAO,oDAClB,KAAK,KAAM,MAAO,yCAClB,KAAK,KAAM,MAAO,mFAClB,KAAK,KAAM,MAAO,wDAClB,KAAK,KAAM,MAAO,qCAClB,KAAK,KAAM,MAAO,yFAClB,KAAK,KAAM,MAAO,kGAClB,KAAK,KAAM,MAAO,oCAClB,KAAK,KAAM,MAAO,sDAClB,KAAK,KAAM,MAAO,+EAClB,KAAK,KAAM,MAAO,mEAClB,KAAK,KAAM,MAAO,6BAClB,KAAK,KAAM,MAAO,2EAClB,KAAK,KAAM,MAAO,uEAClB,KAAK,KAAM,MAAO,sDAClB,KAAK,KAAM,MAAO,uCAClB,KAAK,KAAM,MAAO,gDAClB,KAAK,KAAM,MAAO,4CAClB,KAAK,KAAM,MAAO,mIAClB,KAAK,KAAM,MAAO,0FAClB,KAAK,KAAM,MAAO,4FAClB,KAAK,KAAM,MAAO,gDAClB,KAAK,KAAM,MAAO,oEAClB,KAAK,KAAM,MAAO,4BAClB,KAAK,KAAM,MAAO,wBAClB,KAAK,KAAM,MAAO,2CAClB,KAAK,KAAM,MAAO,6DAClB,KAAK,MAAO,MAAO,wFACnB,KAAK,MAAO,MAAO,uGACnB,QAAS,MAAO,mkBCrRnB,IAoFgB85D,EApFhBwmB,EAAA9qF,EAAA,IAODoN,EAAApN,EAAA,GAIAsN,EAAAtN,EAAA,GAUAqN,EAAArN,EAAA,GAOAyxD,EAAAzxD,EAAA,GAsBAwxD,EAAAxxD,EAAA,GASAwN,EAAAxN,EAAA,IAKAuN,EAAAvN,EAAA,GAIAmN,EAAAnN,EAAA,GAMAwJ,EAAAxJ,EAAA,GAubA,SAAgBgkF,EAEd+G,EAEAjpF,EAEA+pB,EAEAkb,EAEAk7B,EAEAmD,EAEA4lB,QAAA,IAAAA,OAAA,GAEA,IAAIxrF,EAASurF,EAASvrF,OAUlByrF,GAAY,EAEhB,OAAQnpF,EAAUkQ,cAIhB,KAAKsyD,EAAe4mB,UAClB,IAAIxsE,EAAOysE,EAAqBJ,EAAUl/D,EAAekb,EAAUq+B,GAEnE,OADA2lB,EAASrc,YAAcrhE,EAAAmH,KAAK/Q,KACvBib,EACEA,EAAKK,GAAE,KAAwBL,EAAKK,GAAE,KACzCvf,EAAOyD,IAAI,GACXzD,EAAOyD,IAAI,GAHGzD,EAAO6rC,cAK3B,KAAKi5B,EAAe8mB,QACd1sE,EAAOysE,EAAqBJ,EAAUl/D,EAAekb,EAAUq+B,GAEnE,OADA2lB,EAASrc,YAAcrhE,EAAAmH,KAAK/Q,KACvBib,EACEA,EAAKK,GAAE,GACVvf,EAAOyD,IAAI,GACXzD,EAAOyD,IAAI,GAHGzD,EAAO6rC,cAK3B,KAAKi5B,EAAe+mB,UACd3sE,EAAOysE,EAAqBJ,EAAUl/D,EAAekb,EAAUq+B,GAEnE,OADA2lB,EAASrc,YAAcrhE,EAAAmH,KAAK/Q,KACvBib,EACEA,GAAQrR,EAAAmH,KAAK/Q,KAChBjE,EAAOyD,IAAI,GACXzD,EAAOyD,IAAI,GAHGzD,EAAO6rC,cAK3B,KAAKi5B,EAAegnB,SACd5sE,EAAOysE,EAAqBJ,EAAUl/D,EAAekb,EAAUq+B,GAEnE,OADA2lB,EAASrc,YAAcrhE,EAAAmH,KAAK/Q,KACvBib,EACEA,EAAKK,GAAE,GACVvf,EAAOyD,IAAI,GACXzD,EAAOyD,IAAI,GAHGzD,EAAO6rC,cAK3B,KAAKi5B,EAAeinB,YACd7sE,EAAOysE,EAAqBJ,EAAUl/D,EAAekb,EAAUq+B,GAEnE,OADA2lB,EAASrc,YAAcrhE,EAAAmH,KAAK/Q,KACvBib,EACEA,EAAKK,GAAE,KACVvf,EAAOyD,IAAI,GACXzD,EAAOyD,IAAI,GAHGzD,EAAO6rC,cAK3B,KAAKi5B,EAAeknB,SACd9sE,EAAOysE,EAAqBJ,EAAUl/D,EAAekb,EAAUq+B,GAEnE,GADA2lB,EAASrc,YAAcrhE,EAAAmH,KAAK/Q,MACvBib,EAAM,OAAOlf,EAAO6rC,cAEzB,GADIqnB,EAAYh0C,EAAK6P,eACN,CACb,IAAI3U,EAAiBmxE,EAAS1lE,QAAQzL,eACtC,GAAIA,GAAkB84C,EAAU1lC,eAAepT,GAAiB,OAAOpa,EAAOyD,IAAI,GAEpF,OAAOzD,EAAOyD,IAAI,GAEpB,KAAKqhE,EAAemnB,QACd/sE,EAAOysE,EAAqBJ,EAAUl/D,EAAekb,EAAUq+B,GAEnE,GADA2lB,EAASrc,YAAcrhE,EAAAmH,KAAK/Q,MACvBib,EAAM,OAAOlf,EAAO6rC,cAEzB,KADI9c,GAAiB7P,EAAK6P,gBACL,OAAO/uB,EAAOyD,IAAI,GACvC,IAAIsf,EAAiBgM,GAAezsB,UACpC,OAAOtC,EAAOyD,IAAIsf,EAAemJ,QAAQq/D,EAAS1lE,QAAQrJ,gBAAkB,EAAI,GAElF,KAAKsoD,EAAeonB,YACdhtE,EAAOysE,EAAqBJ,EAAUl/D,EAAekb,EAAUq+B,GAEnE,OADA2lB,EAASrc,YAAcrhE,EAAAmH,KAAK/Q,KACvBib,GACD6P,GAAiB7P,EAAK6P,gBAEnB/uB,EAAOyD,IAAIsrB,GAAem9D,YAAc,EAAI,GADvBlsF,EAAOyD,IAAI,GAFrBzD,EAAO6rC,cAK3B,KAAKi5B,EAAeqnB,WACdjtE,EAAOysE,EAAqBJ,EAAUl/D,EAAekb,EAAUq+B,GAEnE,OADA2lB,EAASrc,YAAcrhE,EAAAmH,KAAK/Q,KACvBib,EACElf,EAAOyD,IAAIyb,EAAKszC,mBAAqB,EAAI,GAD9BxyD,EAAO6rC,cAG3B,KAAKi5B,EAAerhB,WACdvkC,EAAOysE,EAAqBJ,EAAUl/D,EAAekb,EAAUq+B,GAEnE,OADA2lB,EAASrc,YAAcrhE,EAAAmH,KAAK/Q,KACvBib,EACElf,EAAOyD,IAAIyb,EAAKK,GAAE,KAAuB,EAAI,GADlCvf,EAAO6rC,cAG3B,KAAKi5B,EAAesnB,UAElB,GADAb,EAASrc,YAAcrhE,EAAAmH,KAAK/Q,KAE1BooF,EAAgBhgE,EAAeu5C,EAAYtjE,GAC3CgqF,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GAC3C,OAAOvrF,EAAO6rC,cAChB,IAAI7yB,EAAUuyE,EAAS94E,SAASkwD,kBAC9Bp7B,EAAS,GACTgkD,EAASjb,YACTziE,EAAAmH,KAAKG,KACLpH,EAAAsyD,WAAWksB,SAEb,OAAOvsF,EAAOyD,IAAIuV,EAAU,EAAI,GAElC,KAAK8rD,EAAe0nB,WAElB,GADAjB,EAASrc,YAAcrhE,EAAAmH,KAAK/Q,KAE1BooF,EAAgBhgE,EAAeu5C,EAAYtjE,GAC3CgqF,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GAC3C,OAAOvrF,EAAO6rC,cAChB,IAAI7E,EAAOukD,EAASzR,4BAA4BvyC,EAAS,GAAI15B,EAAAmH,KAAKvR,KAElE,OADA8nF,EAASrc,YAAcrhE,EAAAmH,KAAK/Q,KACrBjE,EAAOyD,IAAIwuD,EAAA9a,gBAAgBnQ,IAASirB,EAAApiC,aAAaolB,MAAQ,EAAI,GAEtE,KAAK6vB,EAAewN,UACdpzD,EAAOysE,EAAqBJ,EAAUl/D,EAAekb,EAAUq+B,GAEnE,OADA2lB,EAASrc,YAAcrhE,EAAAmH,KAAK/Q,KACvBib,EACElf,EAAOyD,IAAIyb,EAAKozD,UAAY,EAAI,GADrBtyE,EAAO6rC,cAG3B,KAAKi5B,EAAe2nB,OAElB,GADAlB,EAASrc,YAAcqc,EAASz2E,QAAQI,UAEtCw3E,EAAkBrgE,EAAeu5C,EAAY2lB,GAC7Ce,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GAC3C,OAAOvrF,EAAO6rC,cAChB,IAAIymB,EAAoBjmC,EAAe,GAAGimC,SACtCtrB,OAAI,EAkBR,OAjBIukD,EAASz2E,QAAQc,SAEf6sD,EAAeljD,GAAE,IAAuBkjD,EAAez2B,MAAQ,IACjEu/C,EAASrc,YAAcrhE,EAAAmH,KAAKlR,IAC5BkjC,EAAOhnC,EAAOyD,IAAI6uD,IAElBtrB,EAAOhnC,EAAO0D,IAAI4uD,EAAU,GAI1BmQ,EAAeljD,GAAE,IAA8C,IAAvBkjD,EAAez2B,MACzDu/C,EAASrc,YAAcrhE,EAAAmH,KAAKjR,IAC5BijC,EAAOhnC,EAAO0D,IAAI4uD,EAAU,IAE5BtrB,EAAOhnC,EAAOyD,IAAI6uD,GAGftrB,EAET,KAAK89B,EAAe6nB,QAElB,GADApB,EAASrc,YAAcqc,EAASz2E,QAAQI,UAEtCw3E,EAAkBrgE,EAAeu5C,EAAY2lB,GAC7Ce,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GAC3C,OAAOvrF,EAAO6rC,cACZymB,EAAoBjmC,EAAe,GAAGimC,SAC1C/nD,OAAOP,EAAAJ,WAAW0oD,IAClB,IAAI82B,EAAYwD,IAASt6B,GACrBtrB,OAAI,EAkBR,OAjBIukD,EAASz2E,QAAQc,SAEf6sD,EAAeljD,GAAE,IAAuBkjD,EAAez2B,MAAQ,IACjEu/C,EAASrc,YAAcrhE,EAAAmH,KAAKlR,IAC5BkjC,EAAOhnC,EAAOyD,IAAI2lF,IAElBpiD,EAAOhnC,EAAO0D,IAAI0lF,EAAW,GAI3B3mB,EAAeljD,GAAE,IAA8C,IAAvBkjD,EAAez2B,MACzDu/C,EAASrc,YAAcrhE,EAAAmH,KAAKjR,IAC5BijC,EAAOhnC,EAAO0D,IAAI0lF,EAAW,IAE7BpiD,EAAOhnC,EAAOyD,IAAI2lF,GAGfpiD,EAET,KAAK89B,EAAej3C,SAElB,GADA09D,EAASrc,YAAcqc,EAASz2E,QAAQI,UAEtCw3E,EAAkBrgE,EAAeu5C,EAAY2lB,GAC7CsB,EAAkBtlD,EAAU,EAAG,EAAGq+B,EAAY2lB,GAC9C,OAAOvrF,EAAO6rC,cAChB,IAAIqnB,EACJ,KADIA,EAAY7mC,EAAe,GAAG0C,gBAMhC,OAJAw8D,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEN9sF,EAAO6rC,cAEhB,IAAI/4B,OAAM,EACV,GAAIy0B,EAASj7B,OAAQ,CACnB,GACEi7B,EAAS,GAAG1wB,MAAQ/I,EAAAgJ,SAASqM,SACTokB,EAAS,GAAInkB,aAAetV,EAAAuV,YAAYC,OAM5D,OAJAioE,EAAS/9E,MACPI,EAAAhD,eAAe+Y,wBACf4jB,EAAS,GAAGr8B,OAEPlL,EAAO6rC,cAEhB,IAAI/d,EAAsCyZ,EAAS,GAAI5lC,MACnDosB,EAAQmlC,EAAUn0C,QAAUm0C,EAAUn0C,QAAQxd,IAAIusB,GAAa,KACnE,IAAMC,GAASA,EAAMlX,MAAQm7C,EAAA/gD,YAAY4N,MAKvC,OAJA0sE,EAAS/9E,MACPI,EAAAhD,eAAemiF,yBACfxlD,EAAS,GAAGr8B,MAAOgoD,EAAU1gD,aAAcsb,GAEtC9tB,EAAO6rC,cAEhB/4B,EAAiBib,EAAOrC,kBAExB5Y,EAASogD,EAAU1mC,oBAErB,OAAI++D,EAASz2E,QAAQc,SAEf6sD,EAAeljD,GAAE,IAAuBkjD,EAAez2B,MAAQ,IACjEu/C,EAASrc,YAAcrhE,EAAAmH,KAAKlR,IACrB9D,EAAOyD,IAAIqP,IAEX9S,EAAO0D,IAAIoP,GAIhB2vD,EAAeljD,GAAE,IAA8C,IAAvBkjD,EAAez2B,MACzDu/C,EAASrc,YAAcrhE,EAAAmH,KAAKjR,IACrB/D,EAAO0D,IAAIoP,IAEX9S,EAAOyD,IAAIqP,GAOxB,KAAKgyD,EAAehS,IACpB,KAAKgS,EAAe8nB,IACpB,KAAK9nB,EAAekoB,OAClB,GACEC,EAAkB5gE,EAAeu5C,EAAY2lB,GAAU,GACvDe,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GAC3C,OAAOvrF,EAAO6rC,cAChB,IAAIzgC,EAAOihB,EACPk/D,EAASvX,kBAAkBzsC,EAAS,GAAIlb,EAAc,GAAI,GAC1Dk/D,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAKvR,IAAG,GAEpD,IADIyb,EAAOqsE,EAASrc,aACX3vD,GAAE,KAKT,OAJAgsE,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEN9sF,EAAO6rC,cAEhB,IAAI9E,GAAe,EACnB,OAAQzkC,EAAUkQ,cAChB,KAAKsyD,EAAehS,IAClB,OAAQ5zC,EAAKrI,MACX,QACA,OACA,OACA,OACA,OACA,OACA,OAAqBkwB,EAAKkrB,EAAA/+B,QAAQw6C,OAAQ,MAC1C,OACA,OACE3mC,EAAKwkD,EAASz2E,QAAQc,SAClBq8C,EAAA/+B,QAAQg6D,OACRj7B,EAAA/+B,QAAQw6C,OACZ,MAEF,OACA,OAAqB3mC,EAAKkrB,EAAA/+B,QAAQg6D,OAEpC,MAEF,KAAKpoB,EAAe8nB,IAClB,OAAQ1tE,EAAKrI,MACX,QACA,OACA,OACA,OACA,OACA,OACA,OAAqBkwB,EAAKkrB,EAAA/+B,QAAQy6C,OAAQ,MAC1C,OACA,OACE5mC,EAAKwkD,EAASz2E,QAAQc,SAClBq8C,EAAA/+B,QAAQi6D,OACRl7B,EAAA/+B,QAAQy6C,OACZ,MAEF,OACA,OAAqB5mC,EAAKkrB,EAAA/+B,QAAQi6D,OAEpC,MAEF,KAAKroB,EAAekoB,OAClB,OAAQzB,EAASrc,YAAYr4D,MAC3B,QACA,OACA,OACA,OACA,OACA,OACA,OAAqBkwB,EAAKkrB,EAAA/+B,QAAQ06C,UAAW,MAC7C,OACA,OACE7mC,EAAKwkD,EAASz2E,QAAQc,SAClBq8C,EAAA/+B,QAAQk6D,UACRn7B,EAAA/+B,QAAQ06C,UACZ,MAEF,OACA,OAAqB7mC,EAAKkrB,EAAA/+B,QAAQk6D,WAKxC,OAAW,GAAPrmD,GACFwkD,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEN9sF,EAAO6rC,eAET7rC,EAAO8mC,MAAMC,EAAI37B,GAE1B,KAAK05D,EAAeuoB,KAClB,GACEJ,EAAkB5gE,EAAeu5C,EAAY2lB,GAAU,GACvDe,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GAC3C,OAAOvrF,EAAO6rC,cACZzgC,EAAOihB,EACPk/D,EAASvX,kBAAkBzsC,EAAS,GAAIlb,EAAc,GAAI,GAC1Dk/D,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAKvR,IAAG,GAEpD,IADIyb,EAAOqsE,EAASrc,aACX3vD,GAAE,KAKT,OAJAgsE,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEN9sF,EAAO6rC,cAEhB,IAAIxgC,EAAOkgF,EAASvX,kBAAkBzsC,EAAS,GAAIroB,EAAI,GACnD8nB,OAAI,EACR,OAAQ9nB,EAAKrI,MACX,OACA,OACA,OACA,OACA,QACEmwB,EAAOukD,EAAStO,uBACdj9E,EAAOknC,OAAO+qB,EAAAz5B,SAAS80D,QAASliF,EAAMC,GACtC6T,GAIJ,OACA,OACE8nB,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAAS80D,QAASliF,EAAMC,GAC7C,MAEF,OACA,OACE27B,EAAOhnC,EAAOknC,OACZqkD,EAASz2E,QAAQc,SACbq8C,EAAAz5B,SAAS+0D,QACTt7B,EAAAz5B,SAAS80D,QACbliF,EAAMC,GAER,MAEF,OACA,OACE27B,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAAS+0D,QAASniF,EAAMC,GAC7C,MAEF,QACEkgF,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEb9lD,EAAOhnC,EAAO6rC,cAIlB,OAAO7E,EAET,KAAK89B,EAAe0oB,KAClB,GACEP,EAAkB5gE,EAAeu5C,EAAY2lB,GAAU,GACvDe,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GAC3C,OAAOvrF,EAAO6rC,cACZzgC,EAAOihB,EACPk/D,EAASvX,kBAAkBzsC,EAAS,GAAIlb,EAAc,GAAI,GAC1Dk/D,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAKvR,IAAG,GAEpD,IADIyb,EAAOqsE,EAASrc,aACX3vD,GAAE,KAKT,OAJAgsE,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEN9sF,EAAO6rC,cAEZxgC,EAAOkgF,EAASvX,kBAAkBzsC,EAAS,GAAIroB,EAAI,GACnD8nB,OAAI,EACR,OAAQ9nB,EAAKrI,MACX,OACA,OACA,OACA,OACA,QACEmwB,EAAOukD,EAAStO,uBACdj9E,EAAOknC,OAAO+qB,EAAAz5B,SAASi1D,QAASriF,EAAMC,GACtC6T,GAEF,MAEF,OACA,OACE8nB,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASi1D,QAASriF,EAAMC,GAC7C,MAEF,OACA,OACE27B,EAAOhnC,EAAOknC,OACZqkD,EAASz2E,QAAQc,SACbq8C,EAAAz5B,SAASk1D,QACTz7B,EAAAz5B,SAASi1D,QACbriF,EAAMC,GAER,MAEF,OACA,OACE27B,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAASk1D,QAAStiF,EAAMC,GAC7C,MAEF,QACEkgF,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEb9lD,EAAOhnC,EAAO6rC,cAIlB,OAAO7E,EAET,KAAK89B,EAAe6oB,IAClB,GACEV,EAAkB5gE,EAAeu5C,EAAY2lB,GAAU,GACvDe,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GAC3C,OAAOvrF,EAAO6rC,cACZzgC,EAAOihB,EACPk/D,EAASvX,kBAAkBzsC,EAAS,GAAIlb,EAAc,GAAI,GAC1Dk/D,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAK7Q,IAAG,GAEpD,IADI+a,EAAOqsE,EAASrc,aACX3vD,GAAE,KAKT,OAJAgsE,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEN9sF,EAAO6rC,cAEZ7E,OAAI,EACR,OAAQ9nB,EAAKrI,MACX,OACA,OACA,OACE,IAGI+2E,GAHApjE,EAAO+gE,EAASjb,aAGEpI,aAAar6D,EAAAmH,KAAKvR,KACpCoqF,EAAkBrjE,EAAKo+C,oBAAoB/6D,EAAAmH,KAAKvR,KAAKukB,MACrD8lE,EAAkBF,EAAW5lE,MAGjCgf,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAAS6oD,OAC5BrhF,EAAOknC,OAAO+qB,EAAAz5B,SAASw8C,OACrBh1E,EAAO4nC,UACLimD,EACA7tF,EAAOknC,OAAO+qB,EAAAz5B,SAAS60C,OACrBrtE,EAAO4nC,UAAUkmD,EAAiB1iF,GAClCpL,EAAOyD,IAAI,MAGfzD,EAAO0nC,UAAUomD,EAAiB77B,EAAAriC,WAAWrpB,MAE/CvG,EAAO0nC,UAAUmmD,EAAiB57B,EAAAriC,WAAWrpB,MAG/CikB,EAAKm+C,cAAcilB,GACnB,MAEF,OACE,IAAI94E,EAAUy2E,EAASz2E,QACnB0V,EAAO+gE,EAASjb,YAChByd,EAASj5E,EAAQc,SAEjBg4E,EAAapjE,EAAK09C,aAAapzD,EAAQI,WACvC24E,EAAkBrjE,EAAKo+C,oBAAoB9zD,EAAQI,WAAW8S,MAC9D8lE,EAAkBF,EAAW5lE,MAEjCgf,EAAOhnC,EAAOknC,OAAO6mD,EAAS97B,EAAAz5B,SAAS8oD,OAASrvB,EAAAz5B,SAAS6oD,OACvDrhF,EAAOknC,OAAO6mD,EAAS97B,EAAAz5B,SAASknD,OAASztB,EAAAz5B,SAASw8C,OAChDh1E,EAAO4nC,UACLimD,EACA7tF,EAAOknC,OAAO6mD,EAAS97B,EAAAz5B,SAASwoD,OAAS/uB,EAAAz5B,SAAS60C,OAChDrtE,EAAO4nC,UAAUkmD,EAAiB1iF,GAClC2iF,EAAS/tF,EAAO0D,IAAI,IAAM1D,EAAOyD,IAAI,MAGzCzD,EAAO0nC,UAAUomD,EAAiBh5E,EAAQ29D,iBAE5CzyE,EAAO0nC,UAAUmmD,EAAiB/4E,EAAQ29D,iBAG5CjoD,EAAKm+C,cAAcilB,GACnB,MAEF,OAGMA,GAFApjE,EAAO+gE,EAASjb,aAEEpI,aAAar6D,EAAAmH,KAAKtR,KACpCmqF,EAAkBrjE,EAAKo+C,oBAAoB/6D,EAAAmH,KAAKtR,KAAKskB,MACrD8lE,EAAkBF,EAAW5lE,MAGjCgf,EAAOhnC,EAAOknC,OAAO+qB,EAAAz5B,SAAS8oD,OAC5BthF,EAAOknC,OAAO+qB,EAAAz5B,SAASknD,OACrB1/E,EAAO4nC,UACLimD,EACA7tF,EAAOknC,OAAO+qB,EAAAz5B,SAASwoD,OACrBhhF,EAAO4nC,UAAUkmD,EAAiB1iF,GAClCpL,EAAO0D,IAAI,MAGf1D,EAAO0nC,UAAUomD,EAAiB77B,EAAAriC,WAAWppB,MAE/CxG,EAAO0nC,UAAUmmD,EAAiB57B,EAAAriC,WAAWppB,MAG/CgkB,EAAKm+C,cAAcilB,GACnB,MAEF,OACA,OACA,OACA,OACA,OACA,QACE5mD,EAAO57B,EACP,MAEF,QACE47B,EAAOhnC,EAAO8mC,MAAMmrB,EAAA/+B,QAAQ86D,OAAQ5iF,GACpC,MAEF,QACE47B,EAAOhnC,EAAO8mC,MAAMmrB,EAAA/+B,QAAQ+6D,OAAQ7iF,GACpC,MAEF,QACEmgF,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEb9lD,EAAOhnC,EAAO6rC,cAIlB,OAAO7E,EAET,KAAK89B,EAAe0F,IAClB,GACEyiB,EAAkB5gE,EAAeu5C,EAAY2lB,GAAU,GACvDe,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GAC3C,OAAOvrF,EAAO6rC,cACZzgC,EAAOihB,EACPk/D,EAASvX,kBAAkBzsC,EAAS,GAAIlb,EAAc,GAAI,GAC1Dk/D,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAK7Q,IAAG,GAEpD,IADI+a,EAAOqsE,EAASrc,aACX3vD,GAAE,KAKT,OAJAgsE,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEN9sF,EAAO6rC,cAEZxgC,EAAOkgF,EAASvX,kBAAkBzsC,EAAS,GAAIroB,EAAM,GACrD6nB,OAAE,EACN,OAAQ7nB,EAAKrI,MACX,OACA,OACA,OAAqBkwB,EAAKkrB,EAAAz5B,SAAS8zC,MAAO,MAC1C,OACA,OACA,OACA,QAAsBvlC,EAAKkrB,EAAAz5B,SAAS+zC,MAAO,MAC3C,OAAqBxlC,EAAKkrB,EAAAz5B,SAASg0C,MAAO,MAC1C,OAAqBzlC,EAAKkrB,EAAAz5B,SAASi0C,MAAO,MAC1C,OACE1lC,EAAKwkD,EAASz2E,QAAQc,SAClBq8C,EAAAz5B,SAASg0C,MACTva,EAAAz5B,SAAS8zC,MACb,MAEF,OACEvlC,EAAKwkD,EAASz2E,QAAQc,SAClBq8C,EAAAz5B,SAASi0C,MACTxa,EAAAz5B,SAAS+zC,MACb,MAEF,QACE,OAAOvsE,EAAOknC,OAAO+qB,EAAAz5B,SAAS01D,OAAQ9iF,EAAMC,GAE9C,QACE,OAAOrL,EAAOknC,OAAO+qB,EAAAz5B,SAAS21D,OAAQ/iF,EAAMC,GAE9C,QAKE,OAJAkgF,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEN9sF,EAAO6rC,cAGdrhB,EAAO+gE,EAASjb,YAApB,IACIkC,EAAatzD,EAAK00C,eAClBw6B,EAAa5jE,EAAK09C,aAAahpD,GACnCsL,EAAKi+C,aAAa2lB,EAAWpmE,MAAOha,EAAAk5D,WAAWiE,SAC3CyiB,EAAapjE,EAAKo+C,oBAAoB1pD,GAG1C,OAFAsL,EAAKi+C,aAAamlB,EAAW5lE,MAAOha,EAAAk5D,WAAWiE,SAC/C3gD,EAAKm+C,cAAcylB,GACZpuF,EAAOgrC,OACZhrC,EAAO4nC,UAAUwmD,EAAWpmE,MAAO5c,GACnCpL,EAAO4nC,UAAUgmD,EAAW5lE,MAAO3c,GACnCrL,EAAOknC,OAAOH,EACZ/mC,EAAO0nC,UAAU0mD,EAAWpmE,MAAOwqD,GACnCxyE,EAAO0nC,UAAUkmD,EAAW5lE,MAAOwqD,KAIzC,KAAK1N,EAAeupB,IAClB,GACEpB,EAAkB5gE,EAAeu5C,EAAY2lB,GAAU,GACvDe,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GAC3C,OAAOvrF,EAAO6rC,cACZzgC,EAAOihB,EACPk/D,EAASvX,kBAAkBzsC,EAAS,GAAIlb,EAAc,GAAI,GAC1Dk/D,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAK7Q,IAAG,GAEpD,IADI+a,EAAOqsE,EAASrc,aACX3vD,GAAE,KAKT,OAJAgsE,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEN9sF,EAAO6rC,cAEZxgC,EAAOkgF,EAASvX,kBAAkBzsC,EAAS,GAAIroB,EAAM,GACrD6nB,OAAE,EACN,OAAQ7nB,EAAKrI,MACX,OACA,OACA,OAAqBkwB,EAAKkrB,EAAAz5B,SAASkzC,MAAO,MAC1C,OACA,OACA,OACA,QAAsB3kC,EAAKkrB,EAAAz5B,SAASmzC,MAAO,MAC3C,OAAsB5kC,EAAKkrB,EAAAz5B,SAASozC,MAAO,MAC3C,OAAsB7kC,EAAKkrB,EAAAz5B,SAASqzC,MAAO,MAC3C,OACE9kC,EAAKwkD,EAASz2E,QAAQc,SAClBq8C,EAAAz5B,SAASozC,MACT3Z,EAAAz5B,SAASkzC,MACb,MAEF,OACE3kC,EAAKwkD,EAASz2E,QAAQc,SAClBq8C,EAAAz5B,SAASqzC,MACT5Z,EAAAz5B,SAASmzC,MACb,MAEF,QACE,OAAO3rE,EAAOknC,OAAO+qB,EAAAz5B,SAAS81D,OAAQljF,EAAMC,GAE9C,QACE,OAAOrL,EAAOknC,OAAO+qB,EAAAz5B,SAAS+1D,OAAQnjF,EAAMC,GAE9C,QAKE,OAJAkgF,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEN9sF,EAAO6rC,cAGdrhB,EAAO+gE,EAASjb,YAChBkC,EAAatzD,EAAK00C,eAClBw6B,EAAa5jE,EAAK09C,aAAahpD,GACnCsL,EAAKi+C,aAAa2lB,EAAWpmE,MAAOha,EAAAk5D,WAAWiE,SAC3CyiB,EAAapjE,EAAKo+C,oBAAoB1pD,GAG1C,OAFAsL,EAAKi+C,aAAamlB,EAAW5lE,MAAOha,EAAAk5D,WAAWiE,SAC/C3gD,EAAKm+C,cAAcylB,GACZpuF,EAAOgrC,OACZhrC,EAAO4nC,UAAUwmD,EAAWpmE,MAAO5c,GACnCpL,EAAO4nC,UAAUgmD,EAAW5lE,MAAO3c,GACnCrL,EAAOknC,OAAOH,EACZ/mC,EAAO0nC,UAAU0mD,EAAWpmE,MAAOwqD,GACnCxyE,EAAO0nC,UAAUkmD,EAAW5lE,MAAOwqD,KAIzC,KAAK1N,EAAevS,KACpB,KAAKuS,EAAe0pB,MAClB,GACEvB,EAAkB5gE,EAAeu5C,EAAY2lB,GAAU,GACvDe,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GAC3C,OAAOvrF,EAAO6rC,cACZzgC,EAAOihB,EACPk/D,EAASvX,kBAAkBzsC,EAAS,GAAIlb,EAAc,GAAE,GACxDk/D,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAK7Q,IAAG,GAEpD,IADI+a,EAAOqsE,EAASrc,aACX3vD,GAAE,KAKT,OAJAgsE,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEN9sF,EAAO6rC,cAEZ9E,OAAE,EACN,OAAQ7nB,EAAKrI,MACX,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QAAoB,OAAOzL,EAC3B,QACE27B,EAAKzkC,EAAUkQ,cAAgBsyD,EAAevS,KAC1CN,EAAA/+B,QAAQu7D,QACRx8B,EAAA/+B,QAAQw7D,SACZ,MAEF,QACE3nD,EAAKzkC,EAAUkQ,cAAgBsyD,EAAevS,KAC1CN,EAAA/+B,QAAQy7D,QACR18B,EAAA/+B,QAAQ07D,SACZ,MAEF,QAKE,OAJArD,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEN9sF,EAAO6rC,cAGlB,OAAO7rC,EAAO8mC,MAAMC,EAAI37B,GAE1B,KAAK05D,EAAe+pB,SAClB,GACE5B,EAAkB5gE,EAAeu5C,EAAY2lB,GAAU,GACvDe,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GAC3C,OAAOvrF,EAAO6rC,cACZzgC,EAAOihB,EACPk/D,EAASvX,kBAAkBzsC,EAAS,GAAIlb,EAAc,GAAE,GACxDk/D,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAK7Q,IAAG,GAEpD,IADI+a,EAAOqsE,EAASrc,aACX3vD,GAAE,KAKT,OAJAgsE,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEN9sF,EAAO6rC,cAEZxgC,EAAOkgF,EAASvX,kBAAkBzsC,EAAS,GAAIroB,EAAI,GACnD6nB,OAAE,EACN,OAAQ7nB,EAAKrI,MAEX,QAAqBkwB,EAAKkrB,EAAAz5B,SAASs2D,YAAa,MAChD,QAAqB/nD,EAAKkrB,EAAAz5B,SAASu2D,YAAa,MAChD,QAKE,OAJAxD,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEN9sF,EAAO6rC,cAGlB,OAAO7rC,EAAOknC,OAAOH,EAAI37B,EAAMC,GAEjC,KAAKy5D,EAAekqB,QAClB,GACE/B,EAAkB5gE,EAAeu5C,EAAY2lB,GAAU,GACvDe,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GAC3C,OAAOvrF,EAAO6rC,cACZzgC,EAAOihB,EACPk/D,EAASvX,kBAAkBzsC,EAAS,GAAIlb,EAAc,GAAE,GACxDk/D,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAK7Q,IAAG,GAEpD,IADI+a,EAAOqsE,EAASrc,aACX3vD,GAAE,KAKT,OAJAgsE,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEN9sF,EAAO6rC,cAEZ7E,OAAI,EACR,OAAQ9nB,EAAKrI,MACX,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QACEmwB,EAAO57B,EACP,MAEF,QACE47B,EAAOhnC,EAAO8mC,MAAMmrB,EAAA/+B,QAAQ+7D,WAAY7jF,GACxC,MAEF,QACE47B,EAAOhnC,EAAO8mC,MAAMmrB,EAAA/+B,QAAQg8D,WAAY9jF,GACxC,MAEF,QACEmgF,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEb9lD,EAAOhnC,EAAO6rC,cAIlB,OAAO7E,EAET,KAAK89B,EAAeqqB,YAClB,GACEzC,EAAkBrgE,EAAeu5C,EAAY2lB,GAAU,GACvDe,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GAC3C,OAAOvrF,EAAO6rC,cAEhB,IADI3sB,EAAOmN,EAAe,IACjB9M,GAAE,KAMT,OALAgsE,EAASrc,YAAchwD,EACvBqsE,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEN9sF,EAAO6rC,cAEZ7E,OAAI,EACR,OAAQ9nB,EAAKrI,MACX,OACA,OACMzL,EAAOmgF,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAK9Q,IAAG,GAC3D8iC,EAAOhnC,EAAO8mC,MAAMmrB,EAAA/+B,QAAQk8D,eAAgBhkF,GAC5C,MAEF,OACA,OACMA,EAAOmgF,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAK7Q,IAAG,GAC3D6iC,EAAOhnC,EAAO8mC,MAAMmrB,EAAA/+B,QAAQm8D,eAAgBjkF,GAC5C,MAEF,OACA,OACMA,EAAOmgF,EAASvX,kBAAkBzsC,EAAS,GAC7CgkD,EAASz2E,QAAQc,SACb/H,EAAAmH,KAAK7Q,IACL0J,EAAAmH,KAAK9Q,IAAG,GAGd8iC,EAAOhnC,EAAO8mC,MACZykD,EAASz2E,QAAQc,SACbq8C,EAAA/+B,QAAQm8D,eACRp9B,EAAA/+B,QAAQk8D,eACZhkF,GAEF,MAEF,QACMA,EAAOmgF,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAKvR,IAAG,GAC3DujC,EAAOhnC,EAAO8mC,MAAMmrB,EAAA/+B,QAAQo8D,eAAgBlkF,GAC5C,MAEF,QACMA,EAAOmgF,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAKtR,IAAG,GAC3DsjC,EAAOhnC,EAAO8mC,MAAMmrB,EAAA/+B,QAAQq8D,eAAgBnkF,GAC5C,MAEF,QACEmgF,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEb9lD,EAAOhnC,EAAO6rC,cAKlB,OADA0/C,EAASrc,YAAchwD,EAChB8nB,EAET,KAAK89B,EAAe0qB,KAClB,GACEvC,EAAkB5gE,EAAeu5C,EAAY2lB,GAAU,GACvDe,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GAC3C,OAAOvrF,EAAO6rC,cACZzgC,EAAOihB,EACPk/D,EAASvX,kBAAkBzsC,EAAS,GAAIlb,EAAc,GAAE,GACxDk/D,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAK7Q,IAAG,GAEpD,IADI+a,EAAOqsE,EAASrc,aACX3vD,GAAE,KAMT,OALAgsE,EAASrc,YAAchwD,EACvBqsE,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEN9sF,EAAO6rC,cAEZ7E,OAAI,EACR,OAAQ9nB,EAAKrI,MACX,QACEmwB,EAAOhnC,EAAO8mC,MAAMmrB,EAAA/+B,QAAQu8D,QAASrkF,GACrC,MAEF,QACE47B,EAAOhnC,EAAO8mC,MAAMmrB,EAAA/+B,QAAQw8D,QAAStkF,GACrC,MAEF,QACEmgF,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEb9lD,EAAOhnC,EAAO6rC,cAIlB,OAAO7E,EAET,KAAK89B,EAAe6qB,MAClB,GACE1C,EAAkB5gE,EAAeu5C,EAAY2lB,GAAU,GACvDe,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GAC3C,OAAOvrF,EAAO6rC,cACZzgC,EAAOihB,EACPk/D,EAASvX,kBAAkBzsC,EAAS,GAAIlb,EAAc,GAAE,GACxDk/D,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAK7Q,IAAG,GAEpD,IADI+a,EAAOqsE,EAASrc,aACX3vD,GAAE,KAKT,OAJAgsE,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAW16D,OAENlL,EAAO6rC,cAEZ7E,OAAI,EACR,OAAQ9nB,EAAKrI,MACX,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QACEmwB,EAAO57B,EACP,MAGF,QACE47B,EAAOhnC,EAAO8mC,MAAMmrB,EAAA/+B,QAAQ08D,SAAUxkF,GACtC,MAEF,QACE47B,EAAOhnC,EAAO8mC,MAAMmrB,EAAA/+B,QAAQ28D,SAAUzkF,GACtC,MAEF,QACEmgF,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEb9lD,EAAOhnC,EAAO6rC,cAIlB,OAAO7E,EAKT,KAAK89B,EAAe98B,KAClB,GACE0kD,EAAkBrgE,EAAeu5C,EAAY2lB,GAAU,GACvDsB,EAAkBtlD,EAAU,EAAG,EAAGq+B,EAAY2lB,GAC9C,OAAOvrF,EAAO6rC,cAChB,IACIikD,GADA5wE,EAAOmN,EAAe,IAEnB9M,GAAE,IACPkjD,EAAeljD,GAAE,IACjBkjD,EAAez2B,KAAO9sB,EAAK8sB,KACzBy2B,EAAiBvjD,EACjB9T,EAAOmgF,EAASvX,kBAAkBzsC,EAAS,GAC7CgkD,EAASz2E,QAAQI,UAAS,GAK5B,IADI66E,GADAzI,GAAc//C,EAASj7B,SACI,EAAI0jF,EAAwBzoD,EAAS,GAAIgkD,GAAY,GACpE,EAEd,OADAA,EAASrc,YAAc4gB,EAChB9vF,EAAO6rC,cAEhB,IAAIokD,OAAQ,EACRC,EAAehxE,EAAKozC,SACxB,GAAmB,GAAfg1B,GAAkB,CAEpB,IADA2I,EAAWD,EAAwBzoD,EAAS,GAAIgkD,IACjC,EAEb,OADAA,EAASrc,YAAc4gB,EAChB9vF,EAAO6rC,cAEhB,GAAIokD,EAAWC,EAMb,OALA3E,EAAS/9E,MACPI,EAAAhD,eAAeulF,6CACf5oD,EAAS,GAAGr8B,MAAO,YAAa,IAAKglF,EAAarkF,YAEpD0/E,EAASrc,YAAc4gB,EAChB9vF,EAAO6rC,cAEhB,IAAK7hC,EAAAJ,WAAWqmF,GAMd,OALA1E,EAAS/9E,MACPI,EAAAhD,eAAewlF,0BACf7oD,EAAS,GAAGr8B,MAAO,aAErBqgF,EAASrc,YAAc4gB,EAChB9vF,EAAO6rC,mBAGhBokD,EAAWC,EAGb,OADA3E,EAASrc,YAAc4gB,EAChB9vF,EAAOgoC,KACZ9oB,EAAKozC,SACLpzC,EAAKK,GAAG,GACRnU,EACA0kF,EAAQl8B,eACRm8B,EACAE,GAGJ,KAAKnrB,EAAel+B,MAElB,GADA2kD,EAASrc,YAAcrhE,EAAAmH,KAAKG,KAE1Bu3E,EAAkBrgE,EAAeu5C,EAAY2lB,GAC7CsB,EAAkBtlD,EAAU,EAAG,EAAGq+B,EAAY2lB,GAC9C,OAAOvrF,EAAO6rC,cACZ3sB,EAAOmN,EAAe,GACtBjhB,EAAOmgF,EAASvX,kBAAkBzsC,EAAS,GAC7CgkD,EAASz2E,QAAQI,UAAS,GAGxB7J,EAAOmgF,EACPD,EAASvX,kBAAkBzsC,EAAS,GAClCk7B,EAAc,GAGhB8oB,EAASvX,kBACPzsC,EAAS,GACTroB,EACAA,EAAKK,GAAE,GACJ,EACA,GAfT,IAiBI8wE,EAAS9E,EAASrc,YAgBtB,GAdEhwD,EAAKK,GAAE,MAEJ8wE,EAAO9wE,GAAE,IACV8wE,EAAOrkD,KAAO9sB,EAAK8sB,QAGrB3gC,EAAOkgF,EAASvO,kBAAkB3xE,EAChCglF,EAAQnxE,GACR,GAAO,EACPqoB,EAAS,IAEX8oD,EAASnxE,IAEP6wE,EAAYxoD,EAASj7B,QAAU,EAAI0jF,EAAwBzoD,EAAS,GAAIgkD,GAAY,GACxE,EAEd,OADAA,EAASrc,YAAcrhE,EAAAmH,KAAKG,KACrBnV,EAAO6rC,cAEZokD,OAAQ,EACRC,EAAehxE,EAAKozC,SACxB,GAAuB,GAAnB/qB,EAASj7B,OAAa,CAExB,IADA2jF,EAAWD,EAAwBzoD,EAAS,GAAIgkD,IACjC,EAEb,OADAA,EAASrc,YAAcrhE,EAAAmH,KAAKG,KACrBnV,EAAO6rC,cAEhB,GAAIokD,EAAWC,EAMb,OALA3E,EAAS/9E,MACPI,EAAAhD,eAAeulF,6CACf5oD,EAAS,GAAGr8B,MAAO,YAAa,IAAKglF,EAAarkF,YAEpD0/E,EAASrc,YAAcrhE,EAAAmH,KAAKG,KACrBnV,EAAO6rC,cAEhB,IAAK7hC,EAAAJ,WAAWqmF,GAMd,OALA1E,EAAS/9E,MACPI,EAAAhD,eAAewlF,0BACf7oD,EAAS,GAAGr8B,MAAO,aAErBqgF,EAASrc,YAAcrhE,EAAAmH,KAAKG,KACrBnV,EAAO6rC,mBAGhBokD,EAAWC,EAGb,OADA3E,EAASrc,YAAcrhE,EAAAmH,KAAKG,KACrBnV,EAAO4mC,MAAM1nB,EAAKozC,SAAUlnD,EAAMC,EAAMglF,EAAOz8B,eAAgBm8B,EAAWE,GAKnF,KAAKnrB,EAAev8B,YAClB,IAAKgjD,EAASz2E,QAAQW,WAAU,IAAmB,MACnD,GACEi3E,EAAkBrgE,EAAeu5C,EAAY2lB,GAAU,GACvDsB,EAAkBtlD,EAAU,EAAG,EAAGq+B,EAAY2lB,GAC9C,OAAOvrF,EAAO6rC,cAEZikD,GADA5wE,EAAOmN,EAAe,IAEnB9M,GAAE,IACPkjD,EAAeljD,GAAE,IACjBkjD,EAAez2B,KAAO9sB,EAAK8sB,KACzBy2B,EAAiBvjD,EACrB,IAAKA,EAAKK,GAAE,GAMV,OALAgsE,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEbvB,EAASrc,YAAc4gB,EAChB9vF,EAAO6rC,cAEZzgC,EAAOmgF,EAASvX,kBAAkBzsC,EAAS,GAC7CgkD,EAASz2E,QAAQI,UAAS,GAI5B,OADI66E,EAA+B,GAAnBxoD,EAASj7B,OAAc0jF,EAAwBzoD,EAAS,GAAIgkD,GAAY,GACxE,GACdA,EAASrc,YAAc4gB,EAChB9vF,EAAO6rC,gBAEhB0/C,EAASrc,YAAc4gB,EAChB9vF,EAAOuoC,YACZrpB,EAAKozC,SACLlnD,EACA0kF,EAAQl8B,eACRm8B,IAGJ,KAAKjrB,EAAer8B,aAClB,IAAK8iD,EAASz2E,QAAQW,WAAU,IAAmB,MAEnD,GADA81E,EAASrc,YAAcrhE,EAAAmH,KAAKG,KAE1Bu3E,EAAkBrgE,EAAeu5C,EAAY2lB,GAC7CsB,EAAkBtlD,EAAU,EAAG,EAAGq+B,EAAY2lB,GAC9C,OAAOvrF,EAAO6rC,cAEhB,KADI3sB,EAAOmN,EAAe,IAChB9M,GAAE,IAAuBL,EAAK8sB,KAAO,EAK7C,OAJAu/C,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEN9sF,EAAO6rC,cAEZzgC,EAAOmgF,EAASvX,kBAAkBzsC,EAAS,GAC7CgkD,EAASz2E,QAAQI,UAAS,GAGxB7J,EAAOmgF,EACPD,EAASvX,kBACPzsC,EAAS,GACTk7B,EAAc,GAGhB8oB,EAASvX,kBACPzsC,EAAS,GACTroB,EACAA,EAAKK,GAAE,GACJ,EACA,GAEL8wE,EAAS9E,EAASrc,YAgBtB,OAdEhwD,EAAKK,GAAE,MAEJ8wE,EAAO9wE,GAAE,IACV8wE,EAAOrkD,KAAO9sB,EAAK8sB,QAGrB3gC,EAAOkgF,EAASvO,kBAAkB3xE,EAChCglF,EAAQnxE,GACR,GAAO,EACPqoB,EAAS,IAEX8oD,EAASnxE,IAEP6wE,EAA+B,GAAnBxoD,EAASj7B,OAAc0jF,EAAwBzoD,EAAS,GAAIgkD,GAAY,GACxE,GACdA,EAASrc,YAAcrhE,EAAAmH,KAAKG,KACrBnV,EAAO6rC,gBAEhB0/C,EAASrc,YAAcrhE,EAAAmH,KAAKG,KACrBnV,EAAOyoC,aAAavpB,EAAKozC,SAAUlnD,EAAMC,EAAMglF,EAAOz8B,eAAgBm8B,IAE/E,KAAKjrB,EAAewrB,WACpB,KAAKxrB,EAAeyrB,WACpB,KAAKzrB,EAAe0rB,WACpB,KAAK1rB,EAAe2rB,UACpB,KAAK3rB,EAAe4rB,WACpB,KAAK5rB,EAAe6rB,YAClB,IAAKpF,EAASz2E,QAAQW,WAAU,IAAmB,MACnD,GACEi3E,EAAkBrgE,EAAeu5C,EAAY2lB,GAAU,GACvDsB,EAAkBtlD,EAAU,EAAG,EAAGq+B,EAAY2lB,GAC9C,OAAOvrF,EAAO6rC,cAEhB,KADI3sB,EAAOmN,EAAe,IAChB9M,GAAE,IAAuBL,EAAK8sB,KAAO,EAK7C,OAJAu/C,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEN9sF,EAAO6rC,cAEZzgC,EAAOmgF,EAASvX,kBAAkBzsC,EAAS,GAC7CgkD,EAASz2E,QAAQI,UAAS,GAGxB7J,EAAOmgF,EACPD,EAASvX,kBAAkBzsC,EAAS,GAClCk7B,EAAc,GAGhB8oB,EAASvX,kBACPzsC,EAAS,GACTroB,EACAA,EAAKK,GAAE,GACJ,EACA,GAEL8wE,EAAS9E,EAASrc,YAgBtB,GAdEhwD,EAAKK,GAAE,MAEJ8wE,EAAO9wE,GAAE,IACV8wE,EAAOrkD,KAAO9sB,EAAK8sB,QAGrB3gC,EAAOkgF,EAASvO,kBAAkB3xE,EAChCglF,EAAQnxE,GACR,GAAO,EACPqoB,EAAS,IAEX8oD,EAASnxE,IAEP6wE,EAA+B,GAAnBxoD,EAASj7B,OAAc0jF,EAAwBzoD,EAAS,GAAIgkD,GAAY,GACxE,EAEd,OADAA,EAASrc,YAAcmhB,EAChBrwF,EAAO6rC,cAEZ9E,OAAE,EACN,OAAQzkC,EAAUkQ,cAChB,QAASjI,QAAO,GAChB,KAAKu6D,EAAewrB,WAAevpD,EAAKkrB,EAAA7vB,YAAYwuD,IAAM,MAC1D,KAAK9rB,EAAeyrB,WAAexpD,EAAKkrB,EAAA7vB,YAAYyuD,IAAM,MAC1D,KAAK/rB,EAAe0rB,WAAezpD,EAAKkrB,EAAA7vB,YAAY0uD,IAAM,MAC1D,KAAKhsB,EAAe2rB,UAAe1pD,EAAKkrB,EAAA7vB,YAAY2uD,GAAM,MAC1D,KAAKjsB,EAAe4rB,WAAe3pD,EAAKkrB,EAAA7vB,YAAY4uD,IAAM,MAC1D,KAAKlsB,EAAe6rB,YAAe5pD,EAAKkrB,EAAA7vB,YAAY6uD,KAGtD,OADA1F,EAASrc,YAAcmhB,EAChBrwF,EAAO2oC,WACZ5B,EAAI7nB,EAAKozC,SAAUy9B,EAAW3kF,EAAMC,EAAMglF,EAAOz8B,gBAGrD,KAAKkR,EAAej8B,eAClB,IAAK0iD,EAASz2E,QAAQW,WAAU,IAAmB,MACnD,GACEi3E,EAAkBrgE,EAAeu5C,EAAY2lB,GAAU,GACvDsB,EAAkBtlD,EAAU,EAAG,EAAGq+B,EAAY2lB,GAC9C,OAAOvrF,EAAO6rC,cAEhB,KADI3sB,EAAOmN,EAAe,IAChB9M,GAAE,IAAuBL,EAAK8sB,KAAO,EAK7C,OAJAu/C,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEN9sF,EAAO6rC,cAEZzgC,EAAOmgF,EAASvX,kBAAkBzsC,EAAS,GAC7CgkD,EAASz2E,QAAQI,UAAS,GAGxB7J,EAAOmgF,EACPD,EAASvX,kBAAkBzsC,EAAS,GAClCk7B,EAAc,GAGhB8oB,EAASvX,kBACPzsC,EAAS,GACTroB,EACAA,EAAKK,GAAE,GACJ,EACA,GAEL8wE,EAAS9E,EAASrc,YAhBtB,IAwCI6gB,EAvBAzkF,GAAOigF,EAASvX,kBAAkBzsC,EAAS,GAC7C8oD,EAAM,GAuBR,OAnBEnxE,EAAKK,GAAE,MAEJ8wE,EAAO9wE,GAAE,IACV8wE,EAAOrkD,KAAO9sB,EAAK8sB,QAGrB3gC,EAAOkgF,EAASvO,kBAAkB3xE,EAChCglF,EAAQnxE,GACR,GAAO,EACPqoB,EAAS,IAEXj8B,GAAOigF,EAASvO,kBAAkB1xE,GAChC+kF,EAAQnxE,GACR,GAAO,EACPqoB,EAAS,IAEX8oD,EAASnxE,IAEP6wE,EAA+B,GAAnBxoD,EAASj7B,OAAc0jF,EAAwBzoD,EAAS,GAAIgkD,GAAY,GACxE,GACdA,EAASrc,YAAcmhB,EAChBrwF,EAAO6rC,gBAEhB0/C,EAASrc,YAAcmhB,EAChBrwF,EAAO6oC,eACZ3pB,EAAKozC,SAAUy9B,EAAW3kF,EAAMC,EAAMC,GAAM+kF,EAAOz8B,iBAGvD,KAAKkR,EAAe77B,YAClB,IAAKsiD,EAASz2E,QAAQW,WAAU,IAAmB,MAEnD,GADA81E,EAASrc,YAAcrhE,EAAAmH,KAAKvR,IAE1BipF,EAAkBrgE,EAAeu5C,EAAY2lB,GAC7Ce,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GAC3C,OAAOvrF,EAAO6rC,cAEhB,KADI3sB,EAAOmN,EAAe,IAChB9M,GAAE,IAAuBL,EAAK8sB,KAAO,GAK7C,OAJAu/C,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEN9sF,EAAO6rC,cAEZzgC,EAAOmgF,EAASvX,kBAAkBzsC,EAAS,GAC7CgkD,EAASz2E,QAAQI,UAAS,GAGxB7J,EAAOkgF,EAASvX,kBAAkBzsC,EAAS,GAAIroB,EAAI,GAGnD5T,GAAOigF,EAASvX,kBAAkBzsC,EAAS,GAC7C15B,EAAAmH,KAAKtR,IAAG,GAIV,OADA6nF,EAASrc,YAAcrhE,EAAAmH,KAAKvR,IACrBzD,EAAOipC,YAAY79B,EAAMC,EAAMC,GAAM4T,EAAK00C,gBAEnD,KAAKkR,EAAez7B,cAClB,IAAKkiD,EAASz2E,QAAQW,WAAU,IAAmB,MAEnD,GADA81E,EAASrc,YAAcrhE,EAAAmH,KAAKvR,IAE1B4oF,EAAgBhgE,EAAeu5C,EAAYtjE,GAC3CgqF,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GAC3C,OAAOvrF,EAAO6rC,cACZzgC,EAAOmgF,EAASvX,kBAAkBzsC,EAAS,GAC7CgkD,EAASz2E,QAAQI,UAAS,GAGxB7J,EAAOkgF,EAASvX,kBAAkBzsC,EAAS,GAC7C15B,EAAAmH,KAAKvR,IAAG,GAIV,OADA8nF,EAASrc,YAAcrhE,EAAAmH,KAAKvR,IACrBzD,EAAOqpC,cAAcj+B,EAAMC,GAKpC,KAAKy5D,EAAe95B,OAClB,GACEiiD,EAAkB5gE,EAAeu5C,EAAY2lB,GAAU,GACvDe,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GAC3C,OAAOvrF,EAAO6rC,cACZzgC,EAAOihB,EACPk/D,EAASvX,kBAAkBzsC,EAAS,GAAIlb,EAAc,GAAE,GACxDk/D,EAASzR,4BAA4BvyC,EAAS,GAAI15B,EAAAmH,KAAKvR,KAE3D,KADIyb,EAAOqsE,EAASrc,aACVrtD,MAAM,KAKd,OAJA0pE,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEN9sF,EAAO6rC,cAEZxgC,EAAOkgF,EAASvX,kBAAkBzsC,EAAS,GAAIroB,EAAI,GACnD5T,GAAOigF,EAAS7R,cAClB6R,EAASzR,4BAA4BvyC,EAAS,GAAI15B,EAAAmH,KAAK/Q,MACvDsnF,EAASrc,aAGX,OADAqc,EAASrc,YAAchwD,EAChBlf,EAAOgrC,OAAO5/B,EAAMC,EAAMC,IAEnC,KAAKw5D,EAAej5B,YAQlB,OAPIxf,GACFk/D,EAAS/9E,MACPI,EAAAhD,eAAe02D,sBACfsE,EAAWknB,mBAAoBxqF,EAAUkQ,cAG7C85E,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GACpCvrF,EAAO6rC,cAKhB,KAAKi5B,EAAeosB,YAElB,OADA3F,EAASrc,YAAcrhE,EAAAmH,KAAKvR,IAE1B4oF,EAAgBhgE,EAAeu5C,EAAYtjE,GAC3CgqF,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GACpCvrF,EAAO6rC,cACT7rC,EAAOsnC,KAAK2qB,EAAAhwB,OAAOkvD,YAE5B,KAAKrsB,EAAessB,YAElB,OADA7F,EAASrc,YAAcrhE,EAAAmH,KAAKvR,IAE1B4oF,EAAgBhgE,EAAeu5C,EAAYtjE,GAC3CgqF,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GACpCvrF,EAAO6rC,cACT7rC,EAAOsnC,KAAK2qB,EAAAhwB,OAAOovD,WAAY,KAAM,CAC1C9F,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAKvR,IAAG,KAGpD,KAAKqhE,EAAe/4B,YAElB,GADAw/C,EAASrc,YAAcrhE,EAAAmH,KAAKG,KAE1Bk3E,EAAgBhgE,EAAeu5C,EAAYtjE,GAC3CgqF,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GAC3C,OAAOvrF,EAAO6rC,cAChB,IAAK0/C,EAASz2E,QAAQW,WAAU,GAAuB,CACrD,IAAIkT,GAAW4iE,EAAS94E,SAASyL,gBAAgB5b,EAAW,MAE5D,OADAipF,EAASrc,YAAcrhE,EAAAmH,KAAKG,KACvBwT,GACE4iE,EAAS5H,kBAAkBh7D,GAAU4e,EAAUq+B,GADhC5lE,EAAO6rC,cAG/B,IAAI32B,GAAYq2E,EAASz2E,QAAQI,UAC7B9J,EAAOmgF,EAASvX,kBAAkBzsC,EAAS,GAAIryB,GAAS,GACxD7J,EAAOkgF,EAASvX,kBAAkBzsC,EAAS,GAAIryB,GAAS,GACxD5J,GAAOigF,EAASvX,kBAAkBzsC,EAAS,GAAIryB,GAAS,GAE5D,OADAq2E,EAASrc,YAAcrhE,EAAAmH,KAAKG,KACrBnV,EAAO+rC,YAAY3gC,EAAMC,EAAMC,IAExC,KAAKw5D,EAAe54B,YAElB,GADAq/C,EAASrc,YAAcrhE,EAAAmH,KAAKG,KAE1Bk3E,EAAgBhgE,EAAeu5C,EAAYtjE,GAC3CgqF,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GAC3C,OAAOvrF,EAAO6rC,cAChB,IAAK0/C,EAASz2E,QAAQW,WAAU,GAAuB,CACjDkT,GAAW4iE,EAAS94E,SAASyL,gBAAgB5b,EAAW,MAE5D,OADAipF,EAASrc,YAAcrhE,EAAAmH,KAAKG,KACvBwT,GACE4iE,EAAS5H,kBAAkBh7D,GAAU4e,EAAUq+B,GADhC5lE,EAAO6rC,cAG3B32B,GAAYq2E,EAASz2E,QAAQI,UAC7B9J,EAAOmgF,EAASvX,kBAAkBzsC,EAAS,GAAIryB,GAAS,GACxD7J,EAAOkgF,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAKpR,GAAE,GACtD0H,GAAOigF,EAASvX,kBAAkBzsC,EAAS,GAAIryB,GAAS,GAE5D,OADAq2E,EAASrc,YAAcrhE,EAAAmH,KAAKG,KACrBnV,EAAOksC,YAAY9gC,EAAMC,EAAMC,IAKxC,KAAKw5D,EAAev/B,WAClB,GACEmnD,EAAkBrgE,EAAeu5C,EAAY2lB,GAAU,GACvDe,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GAC3C,OAAOvrF,EAAO6rC,cAChB,IAAI0Z,GAASl5B,EAAe,GAExByhD,IADA1iE,EAAOmgF,EAASzR,4BAA4BvyC,EAAS,GAAIge,IAC9CgmC,EAASrc,aAExB,OADAqc,EAASrc,YAAc3pB,GACnBuoB,GAAS9hC,MAAQuZ,GAAOvZ,MAC1Bu/C,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAW16D,OAENlL,EAAO6rC,eAETzgC,EAET,KAAK05D,EAAev6D,OAClB,GACE0iF,EAAkB5gE,EAAeu5C,EAAY2lB,GAC7CsB,EAAkBtlD,EAAU,EAAG,EAAGq+B,EAAY2lB,GAM9C,OAJIl/D,IACF9hB,OAAO8hB,EAAc/f,QACrBi/E,EAASrc,YAAc7iD,EAAc,GAAGomC,iBAEnCzyD,EAAO6rC,cAEZzgC,EAAOihB,EACPk/D,EAASvX,kBAAkBzsC,EAAS,GAAIlb,EAAc,GAAI,GAC1Dk/D,EAASzR,4BAA4BvyC,EAAS,GAAI15B,EAAAmH,KAAK/Q,KAAI,GAC3Dib,EAAOqsE,EAASrc,YAIpB,GAHAqc,EAASrc,YAAchwD,EAAKuzC,gBAGxB84B,EAASz2E,QAAQiB,SACnB,OAAI0sD,GAAkB50D,EAAAmH,KAAKG,MACzBo2E,EAASrc,YAAcrhE,EAAAmH,KAAKG,KACrBnV,EAAO4qC,OAETx/B,EAIT,IAAI7C,GAAQmzE,EAAa6P,EAA6B,GAAnBhkD,EAASj7B,OAAci7B,EAAS,GAAK,KAAMq+B,GAC9E2lB,EAASrc,YAAchwD,EAAKuzC,gBACxBzrB,OAAI,EACR,GAAIy7B,GAAkB50D,EAAAmH,KAAKG,KAEzB,OADAo2E,EAASrc,YAAcrhE,EAAAmH,KAAKG,KACpB+J,EAAKrI,MACX,OACA,OACA,OACA,OACA,OACA,OACA,QACEmwB,EAAOhnC,EAAOwqC,GACZxqC,EAAO8mC,MAAMmrB,EAAA/+B,QAAQy3C,OAAQv/D,GAC7B7C,IAEF,MAEF,OACA,OACEy+B,EAAOhnC,EAAOwqC,GACZxqC,EAAO8mC,MAAMmrB,EAAA/+B,QAAQ03C,OAAQx/D,GAC7B7C,IAEF,MAEF,OACA,OACEy+B,EAAOhnC,EAAOwqC,GACZxqC,EAAO8mC,MACLykD,EAASz2E,QAAQc,SACbq8C,EAAA/+B,QAAQ03C,OACR3Y,EAAA/+B,QAAQy3C,OACZv/D,GAEF7C,IAEF,MAGF,QACEy+B,EAAOhnC,EAAOwqC,GACZxqC,EAAOknC,OAAO+qB,EAAAz5B,SAAS8yC,MACrBlgE,EACApL,EAAOkE,IAAI,IAEbqE,IAEF,MAEF,QACEy+B,EAAOhnC,EAAOwqC,GACZxqC,EAAOknC,OAAO+qB,EAAAz5B,SAAS+yC,MACrBngE,EACApL,EAAOmE,IAAI,IAEboE,IAEF,MAEF,QACEgjF,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEb9lD,EAAOz+B,QAMX,OADAgjF,EAASrc,YAAchwD,EAAKuzC,gBACpB84B,EAASrc,YAAYr4D,MAC3B,OACA,OACA,OACA,OACA,OACA,OACA,QACE,IACI+jE,IADApwD,EAAO+gE,EAASjb,aACC1H,oBAAoB1pD,GACzCsL,EAAKi+C,aAAamS,GAAU5yD,MAAOha,EAAAk5D,WAAWiE,SAC9CnkC,EAAOhnC,EAAOwqC,GACZxqC,EAAO4nC,UAAUgzC,GAAU5yD,MAAO5c,GAClCpL,EAAO0nC,UAAUkzC,GAAU5yD,MAAOiqC,EAAAriC,WAAWrpB,KAC7CgC,IAEF,MAEF,OACA,OACMqyE,GAAY2Q,EAASjb,YAAY1H,oBAAoB/6D,EAAAmH,KAAKtR,KAC9DsjC,EAAOhnC,EAAOwqC,GACZxqC,EAAO8mC,MAAMmrB,EAAA/+B,QAAQ03C,OACnB5qE,EAAO4nC,UAAUgzC,GAAU5yD,MAAO5c,IAEpC7C,GACAvI,EAAO0nC,UAAUkzC,GAAU5yD,MAAOiqC,EAAAriC,WAAWppB,MAE/C,MAEF,OACA,OACMo0E,GAAY2Q,EAASjb,YAAY1H,oBAAoB2iB,EAASz2E,QAAQI,WAC1E8xB,EAAOhnC,EAAOwqC,GACZxqC,EAAO8mC,MACLykD,EAASz2E,QAAQc,SACbq8C,EAAA/+B,QAAQ03C,OACR3Y,EAAA/+B,QAAQy3C,OACZ3qE,EAAO4nC,UAAUgzC,GAAU5yD,MAAO5c,IAEpC7C,GACAvI,EAAO0nC,UAAUkzC,GAAU5yD,MAAOujE,EAASz2E,QAAQ29D,iBAErD,MAEF,QACMmI,GAAY2Q,EAASjb,YAAY1H,oBAAoB/6D,EAAAmH,KAAK9Q,KAC9D8iC,EAAOhnC,EAAOwqC,GACZxqC,EAAOknC,OAAO+qB,EAAAz5B,SAAS8yC,MACrBtrE,EAAO4nC,UAAUgzC,GAAU5yD,MAAO5c,GAClCpL,EAAOkE,IAAI,IAEbqE,GACAvI,EAAO0nC,UAAUkzC,GAAU5yD,MAAOiqC,EAAAriC,WAAW5oB,MAE/C,MAEF,QACM4zE,GAAY2Q,EAASjb,YAAY1H,oBAAoB/6D,EAAAmH,KAAK7Q,KAC9D6iC,EAAOhnC,EAAOwqC,GACZxqC,EAAOknC,OAAO+qB,EAAAz5B,SAAS+yC,MACrBvrE,EAAO4nC,UAAUgzC,GAAU5yD,MAAO5c,GAClCpL,EAAOmE,IAAI,IAEboE,GACAvI,EAAO0nC,UAAUkzC,GAAU5yD,MAAOiqC,EAAAriC,WAAW3oB,MAE/C,MAEF,QACEskF,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEb9lD,EAAOz+B,GAKb,OAAOy+B,EAET,KAAK89B,EAAep3C,UAClB,GACE2+D,EAAgBhgE,EAAeu5C,EAAYtjE,GAC3CgqF,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GAC3C,OAAOvrF,EAAO6rC,cAChB,IACIylD,IADA9mE,EAAO+gE,EAASjb,aACQ/wD,GAAE,OAC9BiL,EAAKjY,IAAG,OAEJy0B,EAAOukD,EAASvX,kBAAkBzsC,EAAS,GAAIk7B,GAEnD,OADK6uB,IAAkB9mE,EAAKxE,MAAK,OAC1BghB,EAET,KAAK89B,EAAeysB,YAAa9F,GAAY,EAC7C,KAAK3mB,EAAep5B,cAClB,GACEuhD,EAAkB5gE,EAAeu5C,EAAY2lB,GAAU,GACvDsB,EAAkBtlD,EAAU,EAAG9jC,IAAIoxC,UAAW+wB,EAAY2lB,GAC1D,OAAOvrF,EAAO6rC,cAChB,IAAIL,GAAanf,EAAgBA,EAAc,GAAKo2C,EAEhD+uB,IADApmF,EAAOmgF,EAASzR,4BAA4BvyC,EAAS,GAAI15B,EAAAmH,KAAKlR,KACnDynF,EAASrc,aACxB,KACEsiB,IAAY3jF,EAAAmH,KAAKlR,KACJ,GAAb0tF,GAAS36E,MAAwB26E,GAASh/B,oBAM1C,OAJA+4B,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfimB,EAAS,GAAGr8B,OAEPlL,EAAO6rC,cAOhB,IALA,IAAIy7C,GAAc//C,EAASj7B,OAAS,EAChCmlF,GAAe,IAAIrqF,MAAqBkgF,IACxC1E,GAAmBp3C,GAAWooB,eAC9BxpC,GAAiB,IAAIhjB,MAAYkgF,IACjCoK,GAAmB,IAAItqF,MAAkBkgF,IACpC5mF,GAAI,EAAGA,GAAI4mF,KAAe5mF,GAAG,CACpC+wF,GAAa/wF,IAAK6qF,EAASzR,4BAA4BvyC,EAAS,EAAI7mC,IAAImN,EAAAmH,KAAKvR,KAC7E,IAAIkuF,GAAcpG,EAASrc,YAC3B9kD,GAAe1pB,IAAKixF,GACpBD,GAAiBhxF,IAAKixF,GAAY/9B,eAEpC,IAAIjoB,GAAW99B,EAAA2Y,UAAU2uC,oBAAoB/qC,GAAgBohB,IACzDyC,GAAUjuC,EAAO+lC,2BAA2B68C,GAAkB8O,IAGlE,GAFKzjD,KAASA,GAAUjuC,EAAOwlC,gBAAgBmG,GAAUi3C,GAAkB8O,KAC3EnG,EAASrc,YAAc1jC,GACnBigD,EAAW,CAEb,GAAIx5B,EAAA9a,gBAAgB/rC,EAAOpL,EAAO4yC,qBAAqBxnC,KAAU6mD,EAAApiC,aAAaolB,MAAO,CACnF1qC,OAAO0nD,EAAA7a,kBAAkBhsC,IAAS6mD,EAAAriC,WAAWrpB,KAC7C,IAAIyhB,GAAQiqC,EAAA5a,iBAAiBjsC,GACzBikE,GAAgBkc,EAASlc,cAC7B,GAAIrnD,IAAS,GAAKA,GAAQqnD,GAAc/iE,OACtC,OAAOtM,EAAOa,KAAKwuE,GAAcrnD,IAAQypE,GAAc7O,IAO3D,OAJA2I,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfimB,EAAS,GAAGr8B,OAEPlL,EAAO6rC,cAIhB,OAAO7rC,EAAO0rC,cAActgC,EAAMqmF,GAAc9lD,IAElD,KAAKm5B,EAAe8sB,YAClB,GACElF,EAAkBrgE,EAAeu5C,EAAY2lB,GAAU,GACvD,OAAOvrF,EAAO6rC,cAChB,IAAI94B,GAAgBsZ,EAAe,GAAG0C,eACtC,OAAKhc,IAOLw4E,EAASrc,YAAcn8D,GAAcmM,KAC9BqsE,EAAS1B,mBAAmB92E,GAAew0B,EAAQ,EAAwBq+B,KAPhF2lB,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEN9sF,EAAO6rC,eAQlB,KAAKi5B,EAAex6D,MAMlB,OALA+hF,EAAgBhgE,EAAeu5C,EAAYtjE,GAC3CipF,EAAS/9E,MACPI,EAAAhD,eAAeinF,eACfjsB,EAAW16D,OAAQq8B,EAASj7B,OAASi7B,EAAS,GAAKq+B,GAAY16D,MAAMW,YAEhE7L,EAAO6rC,cAEhB,KAAKi5B,EAAez6D,QAMlB,OALAgiF,EAAgBhgE,EAAeu5C,EAAYtjE,GAC3CipF,EAASj+E,QACPM,EAAAhD,eAAeinF,eACfjsB,EAAW16D,OAAQq8B,EAASj7B,OAASi7B,EAAS,GAAKq+B,GAAY16D,MAAMW,YAEhE7L,EAAO4qC,MAEhB,KAAKk6B,EAAe16D,KAMlB,OALAiiF,EAAgBhgE,EAAeu5C,EAAYtjE,GAC3CipF,EAASn+E,KACPQ,EAAAhD,eAAeinF,eACfjsB,EAAW16D,OAAQq8B,EAASj7B,OAASi7B,EAAS,GAAKq+B,GAAY16D,MAAMW,YAEhE7L,EAAO4qC,MAKhB,KAAKk6B,EAAevhE,GAClB,OACE8oF,EAAgBhgE,EAAeu5C,EAAYtjE,GAC3CgqF,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,IAE3CA,EAASrc,YAAcrhE,EAAAmH,KAAKzR,GACrBvD,EAAO6rC,eAET0/C,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAKzR,GAAE,GAExD,KAAKuhE,EAAethE,IAClB,OACE6oF,EAAgBhgE,EAAeu5C,EAAYtjE,GAC3CgqF,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,IAE3CA,EAASrc,YAAcrhE,EAAAmH,KAAKxR,IACrBxD,EAAO6rC,eAET0/C,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAKxR,IAAG,GAEzD,KAAKshE,EAAerhE,IAClB,OACE4oF,EAAgBhgE,EAAeu5C,EAAYtjE,GAC3CgqF,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,IAE3CA,EAASrc,YAAcrhE,EAAAmH,KAAKvR,IACrBzD,EAAO6rC,eAET0/C,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAKvR,IAAG,GAEzD,KAAKqhE,EAAephE,IAClB,OACE2oF,EAAgBhgE,EAAeu5C,EAAYtjE,GAC3CgqF,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,IAE3CA,EAASrc,YAAcrhE,EAAAmH,KAAKtR,IACrB1D,EAAO6rC,eAET0/C,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAKtR,IAAG,GAEzD,KAAKohE,EAAenhE,MAClB,IAAIsR,GAAYs2E,EAASz2E,QAAQG,UACjC,OACEo3E,EAAgBhgE,EAAeu5C,EAAYtjE,GAC3CgqF,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,IAE3CA,EAASrc,YAAcj6D,GAChBjV,EAAO6rC,eAET0/C,EAASvX,kBAAkBzsC,EAAS,GAAItyB,GAAS,GAE1D,KAAK6vD,EAAelhE,GAClB,OACEyoF,EAAgBhgE,EAAeu5C,EAAYtjE,GAC3CgqF,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,IAE3CA,EAASrc,YAAcrhE,EAAAmH,KAAKpR,GACrB5D,EAAO6rC,eAET0/C,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAKpR,GAAE,GAExD,KAAKkhE,EAAejhE,IAClB,OACEwoF,EAAgBhgE,EAAeu5C,EAAYtjE,GAC3CgqF,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,IAE3CA,EAASrc,YAAcrhE,EAAAmH,KAAKnR,IACrB7D,EAAO6rC,eAET0/C,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAKnR,IAAG,GAEzD,KAAKihE,EAAehhE,IAClB,OACEuoF,EAAgBhgE,EAAeu5C,EAAYtjE,GAC3CgqF,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,IAE3CA,EAASrc,YAAcrhE,EAAAmH,KAAKlR,IACrB9D,EAAO6rC,eAET0/C,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAKlR,IAAG,GAEzD,KAAKghE,EAAe/gE,IAClB,OACEsoF,EAAgBhgE,EAAeu5C,EAAYtjE,GAC3CgqF,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,IAE3CA,EAASrc,YAAcrhE,EAAAmH,KAAKjR,IACrB/D,EAAO6rC,eAET0/C,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAKjR,IAAG,GAEzD,KAAK+gE,EAAe9gE,MACdkR,GAAYq2E,EAASz2E,QAAQI,UACjC,OACEm3E,EAAgBhgE,EAAeu5C,EAAYtjE,GAC3CgqF,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,IAE3CA,EAASrc,YAAch6D,GAChBlV,EAAO6rC,eAET0/C,EAASvX,kBAAkBzsC,EAAS,GAAIryB,GAAS,GAE1D,KAAK4vD,EAAe7gE,KAClB,OACEooF,EAAgBhgE,EAAeu5C,EAAYtjE,GAC3CgqF,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,IAE3CA,EAASrc,YAAcrhE,EAAAmH,KAAK/Q,KACrBjE,EAAO6rC,eAET0/C,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAK/Q,KAAI,GAE1D,KAAK6gE,EAAe5gE,IAClB,OACEmoF,EAAgBhgE,EAAeu5C,EAAYtjE,GAC3CgqF,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,IAE3CA,EAASrc,YAAcrhE,EAAAmH,KAAK9Q,IACrBlE,EAAO6rC,eAET0/C,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAK9Q,IAAG,GAEzD,KAAK4gE,EAAe3gE,IAClB,OACEkoF,EAAgBhgE,EAAeu5C,EAAYtjE,GAC3CgqF,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,IAE3CA,EAASrc,YAAcrhE,EAAAmH,KAAK7Q,IACrBnE,EAAO6rC,eAET0/C,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAK7Q,IAAG,GAKzD,KAAK2gE,EAAe1gE,KACpB,KAAK0gE,EAAezgE,MAClB,IAAKknF,EAASz2E,QAAQW,WAAU,GAAgB,MAChD,GACE42E,EAAgBhgE,EAAeu5C,EAAYtjE,GAC3CgqF,EAAkB/kD,EAAU,GAAIq+B,EAAY2lB,GAG5C,OADAA,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAO6rC,cAEhB,IAAIlF,GAAQ,IAAI3+B,WAAW,IAC3B,IAAStH,GAAI,EAAGA,GAAI,KAAMA,GAAG,CAE3B,GADIiB,GAAQ4lC,EAAS7mC,IACV,CACLsmC,EAAOukD,EAAS34C,qBAAqBjxC,GAAOkM,EAAAmH,KAAKzR,GAAE,GACvD,GAAI0uD,EAAA9a,gBAAgBnQ,IAASirB,EAAApiC,aAAaolB,MAMxC,OALAs2C,EAAS/9E,MACPI,EAAAhD,eAAeknF,2CACfnwF,GAAMuJ,OAERqgF,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAO6rC,cAEhBthC,OAAO0nD,EAAA7a,kBAAkBpQ,IAASirB,EAAAriC,WAAWrpB,KAC7CyD,EAAAkkB,QAAQ+jC,EAAA5a,iBAAiBrQ,GAAOL,GAAOjmC,KAI3C,OADA6qF,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAOoE,KAAKuiC,IAErB,KAAKm+B,EAAevgE,MAClB,IAAKgnF,EAASz2E,QAAQW,WAAU,GAAgB,MAChD,GACE42E,EAAgBhgE,EAAeu5C,EAAYtjE,GAC3CgqF,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GAG3C,OADAA,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAO6rC,cAGhB,IADIlF,GAAQ,IAAI3+B,WAAW,IAClBtH,GAAI,EAAGA,GAAI,IAAKA,GAAG,CAE1B,GADIiB,GAAQ4lC,EAAS7mC,IACV,CACLsmC,EAAOukD,EAAS34C,qBAAqBjxC,GAAOkM,EAAAmH,KAAKxR,IAAG,GACxD,GAAIyuD,EAAA9a,gBAAgBnQ,IAASirB,EAAApiC,aAAaolB,MAMxC,OALAs2C,EAAS/9E,MACPI,EAAAhD,eAAeknF,2CACfnwF,GAAMuJ,OAERqgF,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAO6rC,cAEhBthC,OAAO0nD,EAAA7a,kBAAkBpQ,IAASirB,EAAAriC,WAAWrpB,KAC7CyD,EAAAmkB,SAAS8jC,EAAA5a,iBAAiBrQ,GAAOL,GAAOjmC,IAAK,IAIjD,OADA6qF,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAOoE,KAAKuiC,IAErB,KAAKm+B,EAAergE,MAClB,IAAK8mF,EAASz2E,QAAQW,WAAU,GAAgB,MAChD,GACE42E,EAAgBhgE,EAAeu5C,EAAYtjE,GAC3CgqF,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GAG3C,OADAA,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAO6rC,cAGhB,IADIlF,GAAQ,IAAI3+B,WAAW,IAClBtH,GAAI,EAAGA,GAAI,IAAKA,GAAG,CAE1B,GADIiB,GAAQ4lC,EAAS7mC,IACV,CACLsmC,EAAOukD,EAAS34C,qBAAqBjxC,GAAOkM,EAAAmH,KAAKvR,IAAG,GACxD,GAAIwuD,EAAA9a,gBAAgBnQ,IAASirB,EAAApiC,aAAaolB,MAMxC,OALAs2C,EAAS/9E,MACPI,EAAAhD,eAAeknF,2CACfnwF,GAAMuJ,OAERqgF,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAO6rC,cAEhBthC,OAAO0nD,EAAA7a,kBAAkBpQ,IAASirB,EAAAriC,WAAWrpB,KAC7CyD,EAAAiJ,SAASg/C,EAAA5a,iBAAiBrQ,GAAOL,GAAOjmC,IAAK,IAIjD,OADA6qF,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAOoE,KAAKuiC,IAErB,KAAKm+B,EAAengE,MAClB,IAAK4mF,EAASz2E,QAAQW,WAAU,GAAgB,MAChD,GACE42E,EAAgBhgE,EAAeu5C,EAAYtjE,GAC3CgqF,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GAG3C,OADAA,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAO6rC,cAGhB,IADIlF,GAAQ,IAAI3+B,WAAW,IAClBtH,GAAI,EAAGA,GAAI,IAAKA,GAAG,CAE1B,GADIiB,GAAQ4lC,EAAS7mC,IACV,CACLsmC,EAAOukD,EAAS34C,qBAAqBjxC,GAAOkM,EAAAmH,KAAKtR,IAAG,GACxD,GAAIuuD,EAAA9a,gBAAgBnQ,IAASirB,EAAApiC,aAAaolB,MAMxC,OALAs2C,EAAS/9E,MACPI,EAAAhD,eAAeknF,2CACfnwF,GAAMuJ,OAERqgF,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAO6rC,cAEhBthC,OAAO0nD,EAAA7a,kBAAkBpQ,IAASirB,EAAAriC,WAAWppB,KAC7C,IAAIurF,GAAMrxF,IAAK,EACfsJ,EAAAiJ,SAASg/C,EAAA3a,oBAAoBtQ,GAAOL,GAAOorD,IAC3C/nF,EAAAiJ,SAASg/C,EAAA1a,qBAAqBvQ,GAAOL,GAAOorD,GAAM,IAItD,OADAxG,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAOoE,KAAKuiC,IAErB,KAAKm+B,EAAejgE,MAClB,IAAK0mF,EAASz2E,QAAQW,WAAU,GAAgB,MAChD,GACE42E,EAAgBhgE,EAAeu5C,EAAYtjE,GAC3CgqF,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GAG3C,OADAA,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAO6rC,cAGhB,IADIlF,GAAQ,IAAI3+B,WAAW,IAClBtH,GAAI,EAAGA,GAAI,IAAKA,GAAG,CAE1B,GADIiB,GAAQ4lC,EAAS7mC,IACV,CACLsmC,EAAOukD,EAAS34C,qBAAqBjxC,GAAOkM,EAAAmH,KAAK9Q,IAAG,GACxD,GAAI+tD,EAAA9a,gBAAgBnQ,IAASirB,EAAApiC,aAAaolB,MAMxC,OALAs2C,EAAS/9E,MACPI,EAAAhD,eAAeknF,2CACfnwF,GAAMuJ,OAERqgF,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAO6rC,cAEhBthC,OAAO0nD,EAAA7a,kBAAkBpQ,IAASirB,EAAAriC,WAAW5oB,KAC7CgD,EAAAokB,SAAS6jC,EAAAza,iBAAiBxQ,GAAOL,GAAOjmC,IAAK,IAIjD,OADA6qF,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAOoE,KAAKuiC,IAErB,KAAKm+B,EAAehgE,MAClB,IAAKymF,EAASz2E,QAAQW,WAAU,GAAgB,MAChD,GACE42E,EAAgBhgE,EAAeu5C,EAAYtjE,GAC3CgqF,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GAG3C,OADAA,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAO6rC,cAGhB,IADIlF,GAAQ,IAAI3+B,WAAW,IAClBtH,GAAI,EAAGA,GAAI,IAAKA,GAAG,CAC1B,IAAIiB,GACJ,GADIA,GAAQ4lC,EAAS7mC,IACV,CACLsmC,EAAOukD,EAAS34C,qBAAqBjxC,GAAOkM,EAAAmH,KAAK7Q,IAAG,GACxD,GAAI8tD,EAAA9a,gBAAgBnQ,IAASirB,EAAApiC,aAAaolB,MAMxC,OALAs2C,EAAS/9E,MACPI,EAAAhD,eAAeknF,2CACfnwF,GAAMuJ,OAERqgF,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAO6rC,cAEhBthC,OAAO0nD,EAAA7a,kBAAkBpQ,IAASirB,EAAAriC,WAAW3oB,KAC7C+C,EAAAqkB,SAAS4jC,EAAAxa,iBAAiBzQ,GAAOL,GAAOjmC,IAAK,IAIjD,OADA6qF,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAOoE,KAAKuiC,IAErB,KAAKm+B,EAAektB,WAClB,IAAKzG,EAASz2E,QAAQW,WAAU,GAAgB,MAChD,GACEi3E,EAAkBrgE,EAAeu5C,EAAY2lB,GAC7Ce,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GAG3C,OADAA,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAO6rC,cAGhB,IADI3sB,EAAOmN,EAAe,IACjB9M,GAAE,KAMT,OALAgsE,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEbvB,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAO6rC,cAEZ9E,OAAE,EACN,OAAQ7nB,EAAKrI,MACX,OACA,OAAqBkwB,EAAKkrB,EAAA/+B,QAAQ++D,cAAe,MACjD,OACA,OAAqBlrD,EAAKkrB,EAAA/+B,QAAQg/D,cAAe,MACjD,OACA,OAAqBnrD,EAAKkrB,EAAA/+B,QAAQi/D,cAAe,MACjD,OACA,OAAqBprD,EAAKkrB,EAAA/+B,QAAQk/D,cAAe,MACjD,OACA,OACErrD,EAAKwkD,EAASz2E,QAAQc,SAClBq8C,EAAA/+B,QAAQk/D,cACRngC,EAAA/+B,QAAQi/D,cACZ,MAEF,QAAqBprD,EAAKkrB,EAAA/+B,QAAQm/D,cAAe,MACjD,QAAqBtrD,EAAKkrB,EAAA/+B,QAAQo/D,cAAe,MACjD,QAME,OALA/G,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEbvB,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAO6rC,cAGdzgC,EAAOmgF,EAASvX,kBAAkBzsC,EAAS,GAAIroB,EAAI,GAEvD,OADAqsE,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAO8mC,MAAMC,EAAI37B,GAE1B,KAAK05D,EAAeytB,kBAClB,IAAKhH,EAASz2E,QAAQW,WAAU,GAAgB,MAChD,GACEi3E,EAAkBrgE,EAAeu5C,EAAY2lB,GAAU,GACvDe,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GAC3C,OAAOvrF,EAAO6rC,cAEhB,IADI3sB,EAAOmN,EAAe,IACjB9M,GAAE,KAMT,OALAgsE,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEbvB,EAASrc,YAAchwD,EAChBlf,EAAO6rC,cAEZ9E,OAAE,EACN,OAAQ7nB,EAAKrI,MACX,OAAqBkwB,EAAKkrB,EAAAtvB,cAAc6vD,qBAAsB,MAC9D,OAAqBzrD,EAAKkrB,EAAAtvB,cAAc8vD,qBAAsB,MAC9D,OAAqB1rD,EAAKkrB,EAAAtvB,cAAc+vD,qBAAsB,MAC9D,OAAqB3rD,EAAKkrB,EAAAtvB,cAAcgwD,qBAAsB,MAC9D,OACA,OAAqB5rD,EAAKkrB,EAAAtvB,cAAciwD,oBAAqB,MAC7D,OACA,OAAqB7rD,EAAKkrB,EAAAtvB,cAAckwD,oBAAqB,MAC7D,OACA,OACE9rD,EAAKwkD,EAASz2E,QAAQc,SAClBq8C,EAAAtvB,cAAckwD,oBACd5gC,EAAAtvB,cAAciwD,oBAClB,MAEF,QAAqB7rD,EAAKkrB,EAAAtvB,cAAcmwD,oBAAqB,MAC7D,QAAqB/rD,EAAKkrB,EAAAtvB,cAAcowD,oBAAqB,MAC7D,QAME,OALAxH,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEbvB,EAASrc,YAAchwD,EAChBlf,EAAO6rC,cAGdzgC,EAAOmgF,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAK5Q,KAAI,GACxDiH,EAAOkgF,EAAS34C,qBAAqBrL,EAAS,GAAI15B,EAAAmH,KAAKpR,GAAE,GAE7D,GADA2nF,EAASrc,YAAchwD,EACnB+yC,EAAA9a,gBAAgB9rC,IAAS4mD,EAAApiC,aAAaolB,MAKxC,OAJAs2C,EAAS/9E,MACPI,EAAAhD,eAAeknF,2CACfvqD,EAAS,GAAGr8B,OAEPlL,EAAO6rC,cAEhBthC,OAAO0nD,EAAA7a,kBAAkB/rC,IAAS4mD,EAAAriC,WAAWrpB,KAC7C,IAAIysF,GAAU,GAAK9zE,EAAKozC,SAAY,EAEpC,OADIhmB,GAAM2lB,EAAA5a,iBAAiBhsC,IACjB,GAAKihC,GAAM0mD,IACnBzH,EAAS/9E,MACPI,EAAAhD,eAAeulF,6CACf5oD,EAAS,GAAGr8B,MAAO,aAAc,IAAK8nF,GAAOnnF,YAExC7L,EAAO6rC,eAET7rC,EAAOosC,aAAarF,EAAI37B,EAAMkhC,IAEvC,KAAKw4B,EAAemuB,kBAClB,IAAK1H,EAASz2E,QAAQW,WAAU,GAAgB,MAChD,GACEi3E,EAAkBrgE,EAAeu5C,EAAY2lB,GAC7Ce,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GAG3C,OADAA,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAO6rC,cAGhB,IADI3sB,EAAOmN,EAAe,IACjB9M,GAAE,KAMT,OALAgsE,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEbvB,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAO6rC,cAEZ9E,OAAE,EACN,OAAQ7nB,EAAKrI,MACX,OACA,OAAqBkwB,EAAKkrB,EAAA7uB,cAAc8vD,oBAAqB,MAC7D,OACA,OAAqBnsD,EAAKkrB,EAAA7uB,cAAc+vD,oBAAqB,MAC7D,OACA,OAAqBpsD,EAAKkrB,EAAA7uB,cAAcgwD,oBAAqB,MAC7D,OACA,OAAqBrsD,EAAKkrB,EAAA7uB,cAAciwD,oBAAqB,MAC7D,OACA,OACEtsD,EAAKwkD,EAASz2E,QAAQc,SAClBq8C,EAAA7uB,cAAciwD,oBACdphC,EAAA7uB,cAAcgwD,oBAClB,MAEF,QAAqBrsD,EAAKkrB,EAAA7uB,cAAckwD,oBAAqB,MAC7D,QAAqBvsD,EAAKkrB,EAAA7uB,cAAcmwD,oBAAqB,MAC7D,QAME,OALAhI,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEbvB,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAO6rC,cAGdzgC,EAAOmgF,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAK5Q,KAAI,GACxDiH,EAAOkgF,EAAS34C,qBAAqBrL,EAAS,GAAI15B,EAAAmH,KAAKpR,GAAE,GAC7D,GAAIquD,EAAA9a,gBAAgB9rC,IAAS4mD,EAAApiC,aAAaolB,MAMxC,OALAs2C,EAAS/9E,MACPI,EAAAhD,eAAeknF,2CACfvqD,EAAS,GAAGr8B,OAEdqgF,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAO6rC,cAEhBthC,OAAO0nD,EAAA7a,kBAAkB/rC,IAAS4mD,EAAAriC,WAAWrpB,KACzCysF,GAAU,GAAK9zE,EAAKozC,SAAY,EAEpC,IADIhmB,GAAM2lB,EAAA5a,iBAAiBhsC,IACjB,GAAKihC,GAAM0mD,GAKnB,OAJAzH,EAAS/9E,MACPI,EAAAhD,eAAeulF,6CACf5oD,EAAS,GAAGr8B,MAAO,aAAc,IAAK8nF,GAAOnnF,YAExC7L,EAAO6rC,cAEZvgC,GAAOigF,EAASvX,kBAAkBzsC,EAAS,GAAIroB,EAAI,GAEvD,OADAqsE,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAOwsC,aAAazF,EAAI37B,EAAMkhC,GAAKhhC,IAE5C,KAAKw5D,EAAe0uB,aAClB,IAAKjI,EAASz2E,QAAQW,WAAU,GAAgB,MAChD,GACEi3E,EAAkBrgE,EAAeu5C,EAAY2lB,GAG7C,OADAA,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAO6rC,cAGhB,IADI3sB,EAAOmN,EAAe,IACjB9M,GAAE,KAMT,OALAgsE,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEbvB,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAO6rC,cAEhB,IAAI4nD,GAAYv0E,EAAKozC,SACjBohC,GAAY,GAAKD,GAErB,GADAlpF,OAAOmhF,UAAUgI,KAAc1pF,EAAAJ,WAAW8pF,KAExCpH,EAAkB/kD,EAAU,EAAImsD,GAAW9tB,EAAY2lB,GAGvD,OADAA,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAO6rC,cAEhB,OAAQ3sB,EAAKrI,MACX,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QACA,QAAmB,MACnB,QAME,OALA00E,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEbvB,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAO6rC,cAGdzgC,EAAOmgF,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAK5Q,KAAI,GACxDiH,EAAOkgF,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAK5Q,KAAI,GAD5D,IAEIyoC,GAAO,IAAI7kC,WAAW,IAE1B,IADIgrF,IAAUU,IAAa,GAAK,EACvBhzF,GAAI,EAAGA,GAAIgzF,KAAahzF,GAAG,CAClC,IAWI4rC,GAXAyc,GAAUxhB,EAAS,EAAI7mC,IACvBizF,GAAOpI,EAAS34C,qBAAqBmW,GAASl7C,EAAAmH,KAAKpR,GAAE,GACzD,GAAIquD,EAAA9a,gBAAgBw8C,KAAS1hC,EAAApiC,aAAaolB,MAMxC,OALAs2C,EAAS/9E,MACPI,EAAAhD,eAAeknF,2CACf/oC,GAAQ79C,OAEVqgF,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAO6rC,cAIhB,GAFAthC,OAAO0nD,EAAA7a,kBAAkBu8C,KAAS1hC,EAAAriC,WAAWrpB,MACzC+lC,GAAM2lB,EAAA5a,iBAAiBs8C,KACjB,GAAKrnD,GAAM0mD,GAMnB,OALAzH,EAAS/9E,MACPI,EAAAhD,eAAeulF,6CACfpnC,GAAQ79C,MAAO,aAAc,IAAK8nF,GAAOnnF,YAE3C0/E,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAO6rC,cAEhB,OAAQ4nD,IACN,KAAK,EACHzpF,EAAAkkB,QAAQoe,GAAKO,GAAMnsC,IACnB,MAEF,KAAK,EACH,IAAIkzF,GAAOlzF,IAAK,EACZmzF,GAAOvnD,IAAO,EAClBtiC,EAAAkkB,QAAQ2lE,GAAUhnD,GAAM+mD,IACxB5pF,EAAAkkB,QAAQ2lE,GAAO,EAAGhnD,GAAM+mD,GAAO,GAC/B,MAEF,KAAK,EACCA,GAAOlzF,IAAK,EACZmzF,GAAOvnD,IAAO,EAClBtiC,EAAAkkB,QAAQ2lE,GAAUhnD,GAAM+mD,IACxB5pF,EAAAkkB,QAAQ2lE,GAAO,EAAGhnD,GAAM+mD,GAAO,GAC/B5pF,EAAAkkB,QAAQ2lE,GAAO,EAAGhnD,GAAM+mD,GAAO,GAC/B5pF,EAAAkkB,QAAQ2lE,GAAO,EAAGhnD,GAAM+mD,GAAO,GAC/B,MAEF,KAAK,EACCA,GAAOlzF,IAAK,EACZmzF,GAAOvnD,IAAO,EAClBtiC,EAAAkkB,QAAQ2lE,GAAUhnD,GAAM+mD,IACxB5pF,EAAAkkB,QAAQ2lE,GAAO,EAAGhnD,GAAM+mD,GAAO,GAC/B5pF,EAAAkkB,QAAQ2lE,GAAO,EAAGhnD,GAAM+mD,GAAO,GAC/B5pF,EAAAkkB,QAAQ2lE,GAAO,EAAGhnD,GAAM+mD,GAAO,GAC/B5pF,EAAAkkB,QAAQ2lE,GAAO,EAAGhnD,GAAM+mD,GAAO,GAC/B5pF,EAAAkkB,QAAQ2lE,GAAO,EAAGhnD,GAAM+mD,GAAO,GAC/B5pF,EAAAkkB,QAAQ2lE,GAAO,EAAGhnD,GAAM+mD,GAAO,GAC/B5pF,EAAAkkB,QAAQ2lE,GAAO,EAAGhnD,GAAM+mD,GAAO,GAC/B,MAEF,QAASrpF,QAAO,IAIpB,OADAghF,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAO0sC,aAAathC,EAAMC,EAAMwhC,IAEzC,KAAKi4B,EAAegvB,SACpB,KAAKhvB,EAAeivB,SACpB,KAAKjvB,EAAekvB,SACpB,KAAKlvB,EAAemvB,SACpB,KAAKnvB,EAAeovB,kBACpB,KAAKpvB,EAAeqvB,kBACpB,KAAKrvB,EAAesvB,SACpB,KAAKtvB,EAAeuvB,SACpB,KAAKvvB,EAAewvB,QACpB,KAAKxvB,EAAeyvB,QACpB,KAAKzvB,EAAe0vB,QACpB,KAAK1vB,EAAe2vB,QACpB,KAAK3vB,EAAe4vB,QACpB,KAAK5vB,EAAe6vB,QAClB,IAAKpJ,EAASz2E,QAAQW,WAAU,GAAgB,MAChD,GACEi3E,EAAkBrgE,EAAeu5C,EAAY2lB,GAC7Ce,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GAG3C,OADAA,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAO6rC,cAGhB,IADI3sB,EAAOmN,EAAe,IACjB9M,GAAE,KAMT,OALAgsE,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEbvB,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAO6rC,cAEZ9E,GAAgB,EACpB,OAAQzkC,EAAUkQ,cAChB,KAAKsyD,EAAegvB,SAClB,OAAQ50E,EAAKrI,MACX,OACA,OAAqBkwB,EAAKkrB,EAAAz5B,SAASo8D,YAAa,MAChD,OACA,OAAqB7tD,EAAKkrB,EAAAz5B,SAASq8D,YAAa,MAChD,OACA,OAAqB9tD,EAAKkrB,EAAAz5B,SAASs8D,YAAa,MAChD,OACA,OAAqB/tD,EAAKkrB,EAAAz5B,SAASu8D,YAAa,MAChD,OACA,OACEhuD,EAAKwkD,EAASz2E,QAAQc,SAClBq8C,EAAAz5B,SAASu8D,YACT9iC,EAAAz5B,SAASs8D,YACb,MAEF,QAAqB/tD,EAAKkrB,EAAAz5B,SAASw8D,YAAa,MAChD,QAAqBjuD,EAAKkrB,EAAAz5B,SAASy8D,YAErC,MAEF,KAAKnwB,EAAeivB,SAClB,OAAQ70E,EAAKrI,MACX,OACA,OAAqBkwB,EAAKkrB,EAAAz5B,SAAS08D,YAAa,MAChD,OACA,OAAqBnuD,EAAKkrB,EAAAz5B,SAAS28D,YAAa,MAChD,OACA,OAAqBpuD,EAAKkrB,EAAAz5B,SAAS48D,YAAa,MAChD,OACA,OAAqBruD,EAAKkrB,EAAAz5B,SAAS68D,YAAa,MAChD,OACA,OACEtuD,EAAKwkD,EAASz2E,QAAQc,SAClBq8C,EAAAz5B,SAAS68D,YACTpjC,EAAAz5B,SAAS48D,YACb,MAEF,QAAqBruD,EAAKkrB,EAAAz5B,SAAS88D,YAAa,MAChD,QAAqBvuD,EAAKkrB,EAAAz5B,SAAS+8D,YAErC,MAEF,KAAKzwB,EAAekvB,SAClB,OAAQ90E,EAAKrI,MACX,OACA,OAAqBkwB,EAAKkrB,EAAAz5B,SAASg9D,YAAa,MAChD,OACA,OAAqBzuD,EAAKkrB,EAAAz5B,SAASi9D,YAAa,MAChD,OACA,OAAqB1uD,EAAKkrB,EAAAz5B,SAASk9D,YAAa,MAChD,QAAqB3uD,EAAKkrB,EAAAz5B,SAASm9D,YAAa,MAChD,QAAqB5uD,EAAKkrB,EAAAz5B,SAASo9D,YAAa,MAChD,OACA,OACOrK,EAASz2E,QAAQc,WAAUmxB,EAAKkrB,EAAAz5B,SAASk9D,aAIlD,MAEF,KAAK5wB,EAAemvB,SAClB,OAAQ/0E,EAAKrI,MACX,QAAqBkwB,EAAKkrB,EAAAz5B,SAASq9D,YAAa,MAChD,QAAqB9uD,EAAKkrB,EAAAz5B,SAASs9D,YAErC,MAEF,KAAKhxB,EAAeovB,kBAClB,OAAQh1E,EAAKrI,MACX,OAAqBkwB,EAAKkrB,EAAAz5B,SAASu9D,gBAAiB,MACpD,OAAqBhvD,EAAKkrB,EAAAz5B,SAASw9D,gBAAiB,MACpD,OAAqBjvD,EAAKkrB,EAAAz5B,SAASy9D,gBAAiB,MACpD,OAAqBlvD,EAAKkrB,EAAAz5B,SAAS09D,gBAErC,MAEF,KAAKpxB,EAAeqvB,kBAClB,OAAQj1E,EAAKrI,MACX,OAAqBkwB,EAAKkrB,EAAAz5B,SAAS29D,gBAAiB,MACpD,OAAqBpvD,EAAKkrB,EAAAz5B,SAAS49D,gBAAiB,MACpD,OAAqBrvD,EAAKkrB,EAAAz5B,SAAS69D,gBAAiB,MACpD,OAAqBtvD,EAAKkrB,EAAAz5B,SAAS89D,gBAErC,MAEF,KAAKxxB,EAAesvB,SAClB,OAAQl1E,EAAKrI,MACX,QAAqBkwB,EAAKkrB,EAAAz5B,SAAS+9D,YAAa,MAChD,QAAqBxvD,EAAKkrB,EAAAz5B,SAASg+D,YAErC,MAEF,KAAK1xB,EAAeuvB,SAClB,OAAQn1E,EAAKrI,MACX,QAAqBkwB,EAAKkrB,EAAAz5B,SAASi+D,YAAa,MAChD,QAAqB1vD,EAAKkrB,EAAAz5B,SAASk+D,YAErC,MAEF,KAAK5xB,EAAewvB,QAClB,OAAQp1E,EAAKrI,MACX,OACA,OAAqBkwB,EAAKkrB,EAAAz5B,SAAS8mD,WAAY,MAC/C,OACA,OAAqBv4C,EAAKkrB,EAAAz5B,SAASm+D,WAAY,MAC/C,OACA,OAAqB5vD,EAAKkrB,EAAAz5B,SAASo+D,WAAY,MAC/C,QAAqB7vD,EAAKkrB,EAAAz5B,SAASq+D,WAAY,MAC/C,QAAqB9vD,EAAKkrB,EAAAz5B,SAASs+D,WAAY,MAC/C,OACA,OACOvL,EAASz2E,QAAQc,WAAUmxB,EAAKkrB,EAAAz5B,SAASo+D,YAIlD,MAEF,KAAK9xB,EAAeyvB,QAClB,OAAQr1E,EAAKrI,MACX,OACA,OAAqBkwB,EAAKkrB,EAAAz5B,SAASgnD,WAAY,MAC/C,OACA,OAAqBz4C,EAAKkrB,EAAAz5B,SAASu+D,WAAY,MAC/C,OACA,OAAqBhwD,EAAKkrB,EAAAz5B,SAASw+D,WAAY,MAC/C,QAAqBjwD,EAAKkrB,EAAAz5B,SAASy+D,WAAY,MAC/C,QAAqBlwD,EAAKkrB,EAAAz5B,SAAS0+D,WAAY,MAC/C,OACA,OACO3L,EAASz2E,QAAQc,WAAUmxB,EAAKkrB,EAAAz5B,SAASw+D,YAIlD,MAEF,KAAKlyB,EAAe0vB,QAClB,OAAQt1E,EAAKrI,MACX,OAAqBkwB,EAAKkrB,EAAAz5B,SAAS2+D,YAAa,MAChD,OAAqBpwD,EAAKkrB,EAAAz5B,SAAS4+D,YAAa,MAChD,OAAqBrwD,EAAKkrB,EAAAz5B,SAAS6+D,YAAa,MAChD,OAAqBtwD,EAAKkrB,EAAAz5B,SAAS8+D,YAAa,MAChD,OAAqBvwD,EAAKkrB,EAAAz5B,SAAS++D,YAAa,MAChD,OAAqBxwD,EAAKkrB,EAAAz5B,SAASg/D,YAAa,MAChD,QAAqBzwD,EAAKkrB,EAAAz5B,SAASi/D,WAAY,MAC/C,QAAqB1wD,EAAKkrB,EAAAz5B,SAASk/D,WAAY,MAC/C,OACA,OACOnM,EAASz2E,QAAQc,WACpBmxB,EAAc,GAAT7nB,EAAKrI,KACNo7C,EAAAz5B,SAAS++D,YACTtlC,EAAAz5B,SAASg/D,aAKnB,MAEF,KAAK1yB,EAAe2vB,QAClB,OAAQv1E,EAAKrI,MACX,OAAqBkwB,EAAKkrB,EAAAz5B,SAASm/D,YAAa,MAChD,OAAqB5wD,EAAKkrB,EAAAz5B,SAASo/D,YAAa,MAChD,OAAqB7wD,EAAKkrB,EAAAz5B,SAASq/D,YAAa,MAChD,OAAqB9wD,EAAKkrB,EAAAz5B,SAASs/D,YAAa,MAChD,OAAqB/wD,EAAKkrB,EAAAz5B,SAASu/D,YAAa,MAChD,OAAqBhxD,EAAKkrB,EAAAz5B,SAASw/D,YAAa,MAChD,QAAqBjxD,EAAKkrB,EAAAz5B,SAASy/D,WAAY,MAC/C,QAAqBlxD,EAAKkrB,EAAAz5B,SAAS0/D,WAAY,MAC/C,OACA,OACO3M,EAASz2E,QAAQc,WACpBmxB,EAAc,GAAT7nB,EAAKrI,KACNo7C,EAAAz5B,SAASu/D,YACT9lC,EAAAz5B,SAASw/D,aAKnB,MAEF,KAAKlzB,EAAe4vB,QAClB,OAAQx1E,EAAKrI,MACX,OAAqBkwB,EAAKkrB,EAAAz5B,SAAS2/D,YAAa,MAChD,OAAqBpxD,EAAKkrB,EAAAz5B,SAAS4/D,YAAa,MAChD,OAAqBrxD,EAAKkrB,EAAAz5B,SAAS6/D,YAAa,MAChD,OAAqBtxD,EAAKkrB,EAAAz5B,SAAS8/D,YAAa,MAChD,OAAqBvxD,EAAKkrB,EAAAz5B,SAAS+/D,YAAa,MAChD,OAAqBxxD,EAAKkrB,EAAAz5B,SAASggE,YAAa,MAChD,QAAqBzxD,EAAKkrB,EAAAz5B,SAASigE,WAAY,MAC/C,QAAqB1xD,EAAKkrB,EAAAz5B,SAASkgE,WAAY,MAC/C,OACA,OACOnN,EAASz2E,QAAQc,WACpBmxB,EAAc,GAAT7nB,EAAKrI,KACNo7C,EAAAz5B,SAAS+/D,YACTtmC,EAAAz5B,SAASggE,aAKnB,MAEF,KAAK1zB,EAAe6vB,QAClB,OAAQz1E,EAAKrI,MACX,OAAqBkwB,EAAKkrB,EAAAz5B,SAASmgE,YAAa,MAChD,OAAqB5xD,EAAKkrB,EAAAz5B,SAASogE,YAAa,MAChD,OAAqB7xD,EAAKkrB,EAAAz5B,SAASqgE,YAAa,MAChD,OAAqB9xD,EAAKkrB,EAAAz5B,SAASsgE,YAAa,MAChD,OAAqB/xD,EAAKkrB,EAAAz5B,SAASugE,YAAa,MAChD,OAAqBhyD,EAAKkrB,EAAAz5B,SAASwgE,YAAa,MAChD,QAAqBjyD,EAAKkrB,EAAAz5B,SAASygE,WAAY,MAC/C,QAAqBlyD,EAAKkrB,EAAAz5B,SAAS0gE,WAAY,MAC/C,OACA,OACO3N,EAASz2E,QAAQc,WACpBmxB,EAAc,GAAT7nB,EAAKrI,KACNo7C,EAAAz5B,SAASugE,YACT9mC,EAAAz5B,SAASwgE,cAQvB,IAAW,GAAPjyD,EAMF,OALAwkD,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEbvB,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAO6rC,cAEZzgC,EAAOmgF,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAK5Q,KAAI,GACxDiH,EAAOkgF,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAK5Q,KAAI,GAE5D,OADAmnF,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAOknC,OAAOH,EAAI37B,EAAMC,GAEjC,KAAKy5D,EAAeq0B,SACpB,KAAKr0B,EAAes0B,SACpB,KAAKt0B,EAAeu0B,UACpB,KAAKv0B,EAAew0B,aACpB,KAAKx0B,EAAey0B,WAClB,IAAKhO,EAASz2E,QAAQW,WAAU,GAAgB,MAChD,GACEi3E,EAAkBrgE,EAAeu5C,EAAY2lB,GAC7Ce,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GAG3C,OADAA,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAO6rC,cAGhB,IADI3sB,EAAOmN,EAAe,IACjB9M,GAAE,KAMT,OALAgsE,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAW16D,OAEbqgF,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAO6rC,cAEZ9E,GAAe,EACnB,OAAQzkC,EAAUkQ,cAChB,KAAKsyD,EAAeq0B,SAClB,OAAQj6E,EAAKrI,MACX,OACA,OAAqBkwB,EAAKkrB,EAAA/+B,QAAQsmE,YAAa,MAC/C,OACA,OAAqBzyD,EAAKkrB,EAAA/+B,QAAQumE,YAAa,MAC/C,OACA,OAAqB1yD,EAAKkrB,EAAA/+B,QAAQwmE,YAAa,MAC/C,OACA,OAAqB3yD,EAAKkrB,EAAA/+B,QAAQymE,YAAa,MAC/C,OACA,OACE5yD,EAAKwkD,EAASz2E,QAAQc,SAClBq8C,EAAA/+B,QAAQymE,YACR1nC,EAAA/+B,QAAQwmE,YACZ,MAEF,QAAqB3yD,EAAKkrB,EAAA/+B,QAAQ0mE,YAAa,MAC/C,QAAqB7yD,EAAKkrB,EAAA/+B,QAAQ2mE,YAEpC,MAEF,KAAK/0B,EAAes0B,SAClB,OAAQl6E,EAAKrI,MACX,QAAqBkwB,EAAKkrB,EAAA/+B,QAAQ4mE,YAAa,MAC/C,QAAqB/yD,EAAKkrB,EAAA/+B,QAAQ6mE,YAEpC,MAEF,KAAKj1B,EAAeu0B,UAClB,OAAQn6E,EAAKrI,MACX,QAAqBkwB,EAAKkrB,EAAA/+B,QAAQ8mE,aAAc,MAChD,QAAqBjzD,EAAKkrB,EAAA/+B,QAAQ+mE,aAEpC,MAEF,KAAKn1B,EAAew0B,aAClB,OAAQp6E,EAAKrI,MACX,OAAqBkwB,EAAKkrB,EAAA/+B,QAAQgnE,2BAA4B,MAC9D,OAAqBnzD,EAAKkrB,EAAA/+B,QAAQinE,2BAA4B,MAC9D,OAAqBpzD,EAAKkrB,EAAA/+B,QAAQknE,2BAA4B,MAC9D,OAAqBrzD,EAAKkrB,EAAA/+B,QAAQmnE,2BAEpC,MAEF,KAAKv1B,EAAey0B,WAClB,OAAQr6E,EAAKrI,MACX,OAAqBkwB,EAAKkrB,EAAA/+B,QAAQonE,4BAA6B,MAC/D,OAAqBvzD,EAAKkrB,EAAA/+B,QAAQqnE,4BAA6B,MAC/D,OAAqBxzD,EAAKkrB,EAAA/+B,QAAQsnE,4BAA6B,MAC/D,OAAqBzzD,EAAKkrB,EAAA/+B,QAAQunE,6BAKxC,IAAW,GAAP1zD,EAMF,OALAwkD,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEbvB,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAO6rC,cAEZzgC,EAAOmgF,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAK5Q,KAAI,GAE5D,OADAmnF,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAO8mC,MAAMC,EAAI37B,GAE1B,KAAK05D,EAAe41B,SACpB,KAAK51B,EAAe61B,SAClB,IAAKpP,EAASz2E,QAAQW,WAAU,GAAgB,MAChD,GACEi3E,EAAkBrgE,EAAeu5C,EAAY2lB,GAC7Ce,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GAG3C,OADAA,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAO6rC,cAGhB,IADI3sB,EAAOmN,EAAe,IACjB9M,GAAE,KAMT,OALAgsE,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEbvB,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAO6rC,cAEZ9E,GAAmB,EACvB,OAAQzkC,EAAUkQ,cAChB,KAAKsyD,EAAe41B,SAClB,OAAQx7E,EAAKrI,MACX,OACA,OAAqBkwB,EAAKkrB,EAAAtuB,YAAYi3D,YAAa,MACnD,OACA,OAAqB7zD,EAAKkrB,EAAAtuB,YAAYk3D,YAAa,MACnD,OACA,OAAqB9zD,EAAKkrB,EAAAtuB,YAAYm3D,YAAa,MACnD,OACA,OAAqB/zD,EAAKkrB,EAAAtuB,YAAYo3D,YAAa,MACnD,OACA,OACEh0D,EAAKwkD,EAASz2E,QAAQc,SAClBq8C,EAAAtuB,YAAYo3D,YACZ9oC,EAAAtuB,YAAYm3D,YAIpB,MAEF,KAAKh2B,EAAe61B,SAClB,OAAQz7E,EAAKrI,MACX,OAAqBkwB,EAAKkrB,EAAAtuB,YAAYq3D,aAAc,MACpD,OAAqBj0D,EAAKkrB,EAAAtuB,YAAYs3D,aAAc,MACpD,OAAqBl0D,EAAKkrB,EAAAtuB,YAAYu3D,aAAc,MACpD,OAAqBn0D,EAAKkrB,EAAAtuB,YAAYw3D,aAAc,MACpD,OAAqBp0D,EAAKkrB,EAAAtuB,YAAYy3D,aAAc,MACpD,OAAqBr0D,EAAKkrB,EAAAtuB,YAAY03D,aAAc,MACpD,OAAqBt0D,EAAKkrB,EAAAtuB,YAAY23D,aAAc,MACpD,OAAqBv0D,EAAKkrB,EAAAtuB,YAAY43D,aAAc,MACpD,OACEx0D,EAAKwkD,EAASz2E,QAAQc,SAClBq8C,EAAAtuB,YAAY23D,aACZrpC,EAAAtuB,YAAYy3D,aAChB,MAEF,OACEr0D,EAAKwkD,EAASz2E,QAAQc,SAClBq8C,EAAAtuB,YAAY43D,aACZtpC,EAAAtuB,YAAY03D,cAOxB,IAAW,GAAPt0D,EAMF,OALAwkD,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAW16D,OAEbqgF,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAO6rC,cAEZzgC,EAAOmgF,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAK5Q,KAAI,GACxDiH,EAAOkgF,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAKvR,IAAG,GAE3D,OADA8nF,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAOktC,WAAWnG,EAAI37B,EAAMC,GAErC,KAAKy5D,EAAe02B,SACpB,KAAK12B,EAAe22B,QACpB,KAAK32B,EAAe42B,SAClB,IAAKnQ,EAASz2E,QAAQW,WAAU,GAAgB,MAChD,GACE42E,EAAgBhgE,EAAeu5C,EAAYtjE,GAC3CgqF,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GAG3C,OADAA,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAO6rC,cAEZ9E,GAAgB,EACpB,OAAQzkC,EAAUkQ,cAChB,QAASjI,QAAO,GAChB,KAAKu6D,EAAe02B,SAAYz0D,EAAKkrB,EAAAz5B,SAASmjE,UAAW,MACzD,KAAK72B,EAAe22B,QAAY10D,EAAKkrB,EAAAz5B,SAASojE,SAAU,MACxD,KAAK92B,EAAe42B,SAAY30D,EAAKkrB,EAAAz5B,SAASqjE,UAE5CzwF,EAAOmgF,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAK5Q,KAAI,GACxDiH,EAAOkgF,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAK5Q,KAAI,GAC5D,OAAOpE,EAAOknC,OAAOH,EAAI37B,EAAMC,GAEjC,KAAKy5D,EAAeg3B,SAClB,IAAKvQ,EAASz2E,QAAQW,WAAU,GAAgB,MAChD,GACE42E,EAAgBhgE,EAAeu5C,EAAYtjE,GAC3CgqF,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GAG3C,OADAA,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAO6rC,cAEZzgC,EAAOmgF,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAK5Q,KAAI,GAC5D,OAAOpE,EAAO8mC,MAAMmrB,EAAA/+B,QAAQ6oE,UAAW3wF,GAEzC,KAAK05D,EAAek3B,eAClB,IAAKzQ,EAASz2E,QAAQW,WAAU,GAAgB,MAChD,GACE42E,EAAgBhgE,EAAeu5C,EAAYtjE,GAC3CgqF,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GAG3C,OADAA,EAASrc,YAAcrhE,EAAAmH,KAAK5Q,KACrBpE,EAAO6rC,cAEZzgC,EAAOmgF,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAK5Q,KAAI,GACxDiH,EAAOkgF,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAK5Q,KAAI,GACxDkH,GAAOigF,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAK5Q,KAAI,GAC5D,OAAOpE,EAAO+sC,eAAe3hC,EAAMC,EAAMC,IAE3C,KAAKw5D,EAAem3B,cACpB,KAAKn3B,EAAeo3B,cAClB,IAAK3Q,EAASz2E,QAAQW,WAAU,GAAgB,MAChD,GACEi3E,EAAkBrgE,EAAeu5C,EAAY2lB,GAC7Ce,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GAG3C,OADAA,EAASrc,YAAcrhE,EAAAmH,KAAK/Q,KACrBjE,EAAO6rC,cAGhB,IADI3sB,EAAOmN,EAAe,IACjB9M,GAAE,KAKT,OAJAgsE,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEN9sF,EAAO6rC,cAEZ9E,GAAe,EACnB,OAAQzkC,EAAUkQ,cAChB,QAASjI,QAAO,GAChB,KAAKu6D,EAAem3B,cAClB,OAAQ/8E,EAAKrI,MACX,OACA,OAAqBkwB,EAAKkrB,EAAA/+B,QAAQqsD,gBAAiB,MACnD,OACA,OAAqBx4C,EAAKkrB,EAAA/+B,QAAQipE,gBAAiB,MACnD,OACA,OAAqBp1D,EAAKkrB,EAAA/+B,QAAQkpE,gBAAiB,MACnD,OACA,OAAqBr1D,EAAKkrB,EAAA/+B,QAAQmpE,gBAAiB,MACnD,OACA,OACEt1D,EAAKwkD,EAASz2E,QAAQc,SAClBq8C,EAAA/+B,QAAQmpE,gBACRpqC,EAAA/+B,QAAQkpE,gBAIhB,MAEF,KAAKt3B,EAAeo3B,cAClB,OAAQh9E,EAAKrI,MACX,OACA,OAAqBkwB,EAAKkrB,EAAA/+B,QAAQmsD,gBAAiB,MACnD,OACA,OAAqBt4C,EAAKkrB,EAAA/+B,QAAQopE,gBAAiB,MACnD,OACA,OAAqBv1D,EAAKkrB,EAAA/+B,QAAQqpE,gBAAiB,MACnD,OACA,OAAqBx1D,EAAKkrB,EAAA/+B,QAAQspE,gBAAiB,MACnD,OACA,OACEz1D,EAAKwkD,EAASz2E,QAAQc,SAClBq8C,EAAA/+B,QAAQspE,gBACRvqC,EAAA/+B,QAAQqpE,iBAOpB,IAAW,GAAPx1D,EAMF,OALAwkD,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAWknB,oBAEbvB,EAASrc,YAAcrhE,EAAAmH,KAAK/Q,KACrBjE,EAAO6rC,cAEZzgC,EAAOmgF,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAK5Q,KAAI,GAE5D,OADAmnF,EAASrc,YAAcrhE,EAAAmH,KAAK/Q,KACrBjE,EAAO8mC,MAAMC,EAAI37B,GAK1B,KAAK05D,EAAe23B,KAClB,IAGI1tE,GAHA7P,EAAOysE,EAAqBJ,EAAUl/D,EAAekb,EAAUq+B,GAEnE,OADA2lB,EAASrc,YAAcrhE,EAAAmH,KAAKlR,IACvBob,IACD6P,GAAiB7P,EAAK6P,iBACHA,GAAevT,aAAaw2C,EAAA9gD,eAAe0K,YAChE2vE,EAAS/9E,MACPI,EAAAhD,eAAe0W,wBACfskD,EAAW16D,OAENlL,EAAO6rC,eAET7rC,EAAOyD,IAAIsrB,GAAe7b,IATflT,EAAO6rC,cAW3B,KAAKi5B,EAAe43B,cAClB,GACErQ,EAAgBhgE,EAAeu5C,EAAYtjE,GAC3CgqF,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GAG3C,OADAA,EAASrc,YAAcrhE,EAAAmH,KAAKG,KACrBnV,EAAO6rC,cAEZzgC,EAAOmgF,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAKlR,IAAG,GAG3D,OAFAynF,EAAS/b,iBAAe,EACxB+b,EAASrc,YAAcrhE,EAAAmH,KAAKG,KACrBnV,EAAOa,KAAKikE,EAAe43B,cAAe,CAAEtxF,GAAQ6mD,EAAAriC,WAAWyY,MAExE,KAAKy8B,EAAe63B,cAClB,GACEtQ,EAAgBhgE,EAAeu5C,EAAYtjE,GAC3CgqF,EAAkB/kD,EAAU,EAAGq+B,EAAY2lB,GAG3C,OADAA,EAASrc,YAAcrhE,EAAAmH,KAAKG,KACrBnV,EAAO6rC,cAEZzgC,EAAOmgF,EAASvX,kBAAkBzsC,EAAS,GAAIgkD,EAASz2E,QAAQI,UAAS,GACzE7J,EAAOkgF,EAASvX,kBAAkBzsC,EAAS,GAAI15B,EAAAmH,KAAKlR,IAAG,GAG3D,OAFAynF,EAAS/b,iBAAe,EACxB+b,EAASrc,YAAcrhE,EAAAmH,KAAKG,KACrBnV,EAAOa,KAAKikE,EAAe63B,cAAe,CAAEvxF,EAAMC,GAAQ4mD,EAAAriC,WAAWyY,MAO9E,OADIrB,EAmBR,SACEukD,EACAjpF,EACAilC,EACAq+B,GAGA,OAAQtjE,EAAUkQ,cAOhB,KAAKsyD,EAAe83B,QAAS,OAAOC,EAAS/3B,EAAehS,IAAKy4B,EAAU19E,EAAAmH,KAAKvR,IAAK8jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GACzG,KAAKd,EAAeg4B,QAAS,OAAOD,EAAS/3B,EAAehS,IAAKy4B,EAAU19E,EAAAmH,KAAKtR,IAAK6jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GACzG,KAAKd,EAAei4B,QAAS,OAAOF,EAAS/3B,EAAe8nB,IAAKrB,EAAU19E,EAAAmH,KAAKvR,IAAK8jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GACzG,KAAKd,EAAek4B,QAAS,OAAOH,EAAS/3B,EAAe8nB,IAAKrB,EAAU19E,EAAAmH,KAAKtR,IAAK6jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GACzG,KAAKd,EAAem4B,WAAY,OAAOJ,EAAS/3B,EAAekoB,OAAQzB,EAAU19E,EAAAmH,KAAKvR,IAAK8jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAC/G,KAAKd,EAAeo4B,WAAY,OAAOL,EAAS/3B,EAAekoB,OAAQzB,EAAU19E,EAAAmH,KAAKtR,IAAK6jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAC/G,KAAKd,EAAeq4B,SAAU,OAAON,EAAS/3B,EAAeuoB,KAAM9B,EAAU19E,EAAAmH,KAAKvR,IAAK8jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAC3G,KAAKd,EAAes4B,SAAU,OAAOP,EAAS/3B,EAAeuoB,KAAM9B,EAAU19E,EAAAmH,KAAKtR,IAAK6jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAC3G,KAAKd,EAAeu4B,SAAU,OAAOR,EAAS/3B,EAAe0oB,KAAMjC,EAAU19E,EAAAmH,KAAKvR,IAAK8jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAC3G,KAAKd,EAAew4B,SAAU,OAAOT,EAAS/3B,EAAe0oB,KAAMjC,EAAU19E,EAAAmH,KAAKtR,IAAK6jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAC3G,KAAKd,EAAey4B,QAAS,OAAOV,EAAS/3B,EAAe6oB,IAAKpC,EAAU19E,EAAAmH,KAAK9Q,IAAKqjC,EAAU15B,EAAAmH,KAAK9Q,IAAK0hE,GACzG,KAAKd,EAAe04B,QAAS,OAAOX,EAAS/3B,EAAe6oB,IAAKpC,EAAU19E,EAAAmH,KAAK7Q,IAAKojC,EAAU15B,EAAAmH,KAAK7Q,IAAKyhE,GACzG,KAAKd,EAAe24B,QAAS,OAAOZ,EAAS/3B,EAAe0F,IAAK+gB,EAAU19E,EAAAmH,KAAK9Q,IAAKqjC,EAAU15B,EAAAmH,KAAK9Q,IAAK0hE,GACzG,KAAKd,EAAe44B,QAAS,OAAOb,EAAS/3B,EAAe0F,IAAK+gB,EAAU19E,EAAAmH,KAAK7Q,IAAKojC,EAAU15B,EAAAmH,KAAK7Q,IAAKyhE,GACzG,KAAKd,EAAe64B,QAAS,OAAOd,EAAS/3B,EAAeupB,IAAK9C,EAAU19E,EAAAmH,KAAK9Q,IAAKqjC,EAAU15B,EAAAmH,KAAK9Q,IAAK0hE,GACzG,KAAKd,EAAe84B,QAAS,OAAOf,EAAS/3B,EAAeupB,IAAK9C,EAAU19E,EAAAmH,KAAK7Q,IAAKojC,EAAU15B,EAAAmH,KAAK7Q,IAAKyhE,GACzG,KAAKd,EAAe+4B,SAAU,OAAOhB,EAAS/3B,EAAevS,KAAMg5B,EAAU19E,EAAAmH,KAAK9Q,IAAKqjC,EAAU15B,EAAAmH,KAAK9Q,IAAK0hE,GAC3G,KAAKd,EAAeg5B,SAAU,OAAOjB,EAAS/3B,EAAevS,KAAMg5B,EAAU19E,EAAAmH,KAAK7Q,IAAKojC,EAAU15B,EAAAmH,KAAK7Q,IAAKyhE,GAC3G,KAAKd,EAAei5B,UAAW,OAAOlB,EAAS/3B,EAAe0pB,MAAOjD,EAAU19E,EAAAmH,KAAK9Q,IAAKqjC,EAAU15B,EAAAmH,KAAK9Q,IAAK0hE,GAC7G,KAAKd,EAAek5B,UAAW,OAAOnB,EAAS/3B,EAAe0pB,MAAOjD,EAAU19E,EAAAmH,KAAK7Q,IAAKojC,EAAU15B,EAAAmH,KAAK7Q,IAAKyhE,GAC7G,KAAKd,EAAem5B,aAAc,OAAOpB,EAAS/3B,EAAe+pB,SAAUtD,EAAU19E,EAAAmH,KAAK9Q,IAAKqjC,EAAU15B,EAAAmH,KAAK9Q,IAAK0hE,GACnH,KAAKd,EAAeo5B,aAAc,OAAOrB,EAAS/3B,EAAe+pB,SAAUtD,EAAU19E,EAAAmH,KAAK7Q,IAAKojC,EAAU15B,EAAAmH,KAAK7Q,IAAKyhE,GACnH,KAAKd,EAAeq5B,YAAa,OAAOtB,EAAS/3B,EAAekqB,QAASzD,EAAU19E,EAAAmH,KAAK9Q,IAAKqjC,EAAU15B,EAAAmH,KAAK9Q,IAAK0hE,GACjH,KAAKd,EAAes5B,YAAa,OAAOvB,EAAS/3B,EAAekqB,QAASzD,EAAU19E,EAAAmH,KAAK7Q,IAAKojC,EAAU15B,EAAAmH,KAAK7Q,IAAKyhE,GACjH,KAAKd,EAAeu5B,oBAAqB,OAAOxB,EAAS/3B,EAAeqqB,YAAa5D,EAAU19E,EAAAmH,KAAKvR,IAAK8jC,EAAU15B,EAAAmH,KAAK9Q,IAAK0hE,GAC7H,KAAKd,EAAew5B,oBAAqB,OAAOzB,EAAS/3B,EAAeqqB,YAAa5D,EAAU19E,EAAAmH,KAAKtR,IAAK6jC,EAAU15B,EAAAmH,KAAK7Q,IAAKyhE,GAC7H,KAAKd,EAAey5B,oBAAqB,OAAO1B,EAAS/3B,EAAeqqB,YAAa5D,EAAU19E,EAAAmH,KAAK9Q,IAAKqjC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAC7H,KAAKd,EAAe05B,oBAAqB,OAAO3B,EAAS/3B,EAAeqqB,YAAa5D,EAAU19E,EAAAmH,KAAK7Q,IAAKojC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAC7H,KAAKd,EAAe25B,SAAU,OAAO5B,EAAS/3B,EAAe0qB,KAAMjE,EAAU19E,EAAAmH,KAAK9Q,IAAKqjC,EAAU15B,EAAAmH,KAAK9Q,IAAK0hE,GAC3G,KAAKd,EAAe45B,SAAU,OAAO7B,EAAS/3B,EAAe0qB,KAAMjE,EAAU19E,EAAAmH,KAAK7Q,IAAKojC,EAAU15B,EAAAmH,KAAK7Q,IAAKyhE,GAC3G,KAAKd,EAAe65B,UAAW,OAAO9B,EAAS/3B,EAAe6qB,MAAOpE,EAAU19E,EAAAmH,KAAK9Q,IAAKqjC,EAAU15B,EAAAmH,KAAK9Q,IAAK0hE,GAC7G,KAAKd,EAAe85B,UAAW,OAAO/B,EAAS/3B,EAAe6qB,MAAOpE,EAAU19E,EAAAmH,KAAK7Q,IAAKojC,EAAU15B,EAAAmH,KAAK7Q,IAAKyhE,GAC7G,KAAKd,EAAe+5B,YAAa,OAAOhC,EAAS/3B,EAAe98B,KAAMujD,EAAU19E,EAAAmH,KAAKzR,GAAIgkC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAC7G,KAAKd,EAAeg6B,YAAa,OAAOjC,EAAS/3B,EAAe98B,KAAMujD,EAAU19E,EAAAmH,KAAKpR,GAAI2jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAC7G,KAAKd,EAAei6B,aAAc,OAAOlC,EAAS/3B,EAAe98B,KAAMujD,EAAU19E,EAAAmH,KAAKxR,IAAK+jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAC/G,KAAKd,EAAek6B,aAAc,OAAOnC,EAAS/3B,EAAe98B,KAAMujD,EAAU19E,EAAAmH,KAAKnR,IAAK0jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAC/G,KAAKd,EAAem6B,SAAU,OAAOpC,EAAS/3B,EAAe98B,KAAMujD,EAAU19E,EAAAmH,KAAKvR,IAAK8jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAC3G,KAAKd,EAAeo6B,YAAa,OAAOrC,EAAS/3B,EAAe98B,KAAMujD,EAAU19E,EAAAmH,KAAKzR,GAAIgkC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAC7G,KAAKd,EAAeq6B,YAAa,OAAOtC,EAAS/3B,EAAe98B,KAAMujD,EAAU19E,EAAAmH,KAAKpR,GAAI2jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAC7G,KAAKd,EAAes6B,aAAc,OAAOvC,EAAS/3B,EAAe98B,KAAMujD,EAAU19E,EAAAmH,KAAKxR,IAAK+jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAC/G,KAAKd,EAAeu6B,aAAc,OAAOxC,EAAS/3B,EAAe98B,KAAMujD,EAAU19E,EAAAmH,KAAKnR,IAAK0jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAC/G,KAAKd,EAAew6B,aAAc,OAAOzC,EAAS/3B,EAAe98B,KAAMujD,EAAU19E,EAAAmH,KAAKvR,IAAK8jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAC/G,KAAKd,EAAey6B,aAAc,OAAO1C,EAAS/3B,EAAe98B,KAAMujD,EAAU19E,EAAAmH,KAAKlR,IAAKyjC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAC/G,KAAKd,EAAe06B,SAAU,OAAO3C,EAAS/3B,EAAe98B,KAAMujD,EAAU19E,EAAAmH,KAAKtR,IAAK6jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAC3G,KAAKd,EAAe26B,SAAU,OAAO5C,EAAS/3B,EAAe98B,KAAMujD,EAAU19E,EAAAmH,KAAK9Q,IAAKqjC,EAAU15B,EAAAmH,KAAK9Q,IAAK0hE,GAC3G,KAAKd,EAAe46B,SAAU,OAAO7C,EAAS/3B,EAAe98B,KAAMujD,EAAU19E,EAAAmH,KAAK7Q,IAAKojC,EAAU15B,EAAAmH,KAAK7Q,IAAKyhE,GAC3G,KAAKd,EAAe66B,WAAY,OAAO9C,EAAS/3B,EAAel+B,MAAO2kD,EAAU19E,EAAAmH,KAAKzR,GAAIgkC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAC7G,KAAKd,EAAe86B,YAAa,OAAO/C,EAAS/3B,EAAel+B,MAAO2kD,EAAU19E,EAAAmH,KAAKxR,IAAK+jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAC/G,KAAKd,EAAe+6B,UAAW,OAAOhD,EAAS/3B,EAAel+B,MAAO2kD,EAAU19E,EAAAmH,KAAKvR,IAAK8jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAC7G,KAAKd,EAAeg7B,WAAY,OAAOjD,EAAS/3B,EAAel+B,MAAO2kD,EAAU19E,EAAAmH,KAAKzR,GAAIgkC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAC7G,KAAKd,EAAei7B,YAAa,OAAOlD,EAAS/3B,EAAel+B,MAAO2kD,EAAU19E,EAAAmH,KAAKxR,IAAK+jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAC/G,KAAKd,EAAek7B,YAAa,OAAOnD,EAAS/3B,EAAel+B,MAAO2kD,EAAU19E,EAAAmH,KAAKvR,IAAK8jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAC/G,KAAKd,EAAem7B,UAAW,OAAOpD,EAAS/3B,EAAel+B,MAAO2kD,EAAU19E,EAAAmH,KAAKtR,IAAK6jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAC7G,KAAKd,EAAeo7B,UAAW,OAAOrD,EAAS/3B,EAAel+B,MAAO2kD,EAAU19E,EAAAmH,KAAK9Q,IAAKqjC,EAAU15B,EAAAmH,KAAK9Q,IAAK0hE,GAC7G,KAAKd,EAAeq7B,UAAW,OAAOtD,EAAS/3B,EAAel+B,MAAO2kD,EAAU19E,EAAAmH,KAAK7Q,IAAKojC,EAAU15B,EAAAmH,KAAK7Q,IAAKyhE,GAE/G,GAAI2lB,EAASz2E,QAAQW,WAAU,IAC7B,OAAQnT,EAAUkQ,cAEhB,KAAKsyD,EAAes7B,mBAAoB,OAAOvD,EAAS/3B,EAAev8B,YAAagjD,EAAU19E,EAAAmH,KAAKpR,GAAI2jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAC3H,KAAKd,EAAeu7B,oBAAqB,OAAOxD,EAAS/3B,EAAev8B,YAAagjD,EAAU19E,EAAAmH,KAAKnR,IAAK0jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAC7H,KAAKd,EAAew7B,gBAAiB,OAAOzD,EAAS/3B,EAAev8B,YAAagjD,EAAU19E,EAAAmH,KAAKvR,IAAK8jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GACzH,KAAKd,EAAey7B,mBAAoB,OAAO1D,EAAS/3B,EAAev8B,YAAagjD,EAAU19E,EAAAmH,KAAKpR,GAAI2jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAC3H,KAAKd,EAAe07B,oBAAqB,OAAO3D,EAAS/3B,EAAev8B,YAAagjD,EAAU19E,EAAAmH,KAAKnR,IAAK0jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAC7H,KAAKd,EAAe27B,oBAAqB,OAAO5D,EAAS/3B,EAAev8B,YAAagjD,EAAU19E,EAAAmH,KAAKlR,IAAKyjC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAC7H,KAAKd,EAAe47B,gBAAiB,OAAO7D,EAAS/3B,EAAev8B,YAAagjD,EAAU19E,EAAAmH,KAAKtR,IAAK6jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAEzH,KAAKd,EAAe67B,kBAAmB,OAAO9D,EAAS/3B,EAAer8B,aAAc8iD,EAAU19E,EAAAmH,KAAKpR,GAAI2jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAC3H,KAAKd,EAAe87B,mBAAoB,OAAO/D,EAAS/3B,EAAer8B,aAAc8iD,EAAU19E,EAAAmH,KAAKnR,IAAK0jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAC7H,KAAKd,EAAe+7B,iBAAkB,OAAOhE,EAAS/3B,EAAer8B,aAAc8iD,EAAU19E,EAAAmH,KAAKvR,IAAK8jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAC3H,KAAKd,EAAeg8B,kBAAmB,OAAOjE,EAAS/3B,EAAer8B,aAAc8iD,EAAU19E,EAAAmH,KAAKpR,GAAI2jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAC3H,KAAKd,EAAei8B,mBAAoB,OAAOlE,EAAS/3B,EAAer8B,aAAc8iD,EAAU19E,EAAAmH,KAAKnR,IAAK0jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAC7H,KAAKd,EAAek8B,mBAAoB,OAAOnE,EAAS/3B,EAAer8B,aAAc8iD,EAAU19E,EAAAmH,KAAKlR,IAAKyjC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAC7H,KAAKd,EAAem8B,iBAAkB,OAAOpE,EAAS/3B,EAAer8B,aAAc8iD,EAAU19E,EAAAmH,KAAKtR,IAAK6jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAE3H,KAAKd,EAAeo8B,sBAAuB,OAAOrE,EAAS/3B,EAAewrB,WAAY/E,EAAU19E,EAAAmH,KAAKpR,GAAI2jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAC7H,KAAKd,EAAeq8B,uBAAwB,OAAOtE,EAAS/3B,EAAewrB,WAAY/E,EAAU19E,EAAAmH,KAAKnR,IAAK0jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAC/H,KAAKd,EAAes8B,mBAAoB,OAAOvE,EAAS/3B,EAAewrB,WAAY/E,EAAU19E,EAAAmH,KAAKvR,IAAK8jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAC3H,KAAKd,EAAeu8B,sBAAuB,OAAOxE,EAAS/3B,EAAewrB,WAAY/E,EAAU19E,EAAAmH,KAAKpR,GAAI2jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAC7H,KAAKd,EAAew8B,uBAAwB,OAAOzE,EAAS/3B,EAAewrB,WAAY/E,EAAU19E,EAAAmH,KAAKnR,IAAK0jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAC/H,KAAKd,EAAey8B,uBAAwB,OAAO1E,EAAS/3B,EAAewrB,WAAY/E,EAAU19E,EAAAmH,KAAKlR,IAAKyjC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAC/H,KAAKd,EAAe08B,mBAAoB,OAAO3E,EAAS/3B,EAAewrB,WAAY/E,EAAU19E,EAAAmH,KAAKtR,IAAK6jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAE3H,KAAKd,EAAe28B,sBAAuB,OAAO5E,EAAS/3B,EAAeyrB,WAAYhF,EAAU19E,EAAAmH,KAAKpR,GAAI2jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAC7H,KAAKd,EAAe48B,uBAAwB,OAAO7E,EAAS/3B,EAAeyrB,WAAYhF,EAAU19E,EAAAmH,KAAKnR,IAAK0jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAC/H,KAAKd,EAAe68B,mBAAoB,OAAO9E,EAAS/3B,EAAeyrB,WAAYhF,EAAU19E,EAAAmH,KAAKvR,IAAK8jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAC3H,KAAKd,EAAe88B,sBAAuB,OAAO/E,EAAS/3B,EAAeyrB,WAAYhF,EAAU19E,EAAAmH,KAAKpR,GAAI2jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAC7H,KAAKd,EAAe+8B,uBAAwB,OAAOhF,EAAS/3B,EAAeyrB,WAAYhF,EAAU19E,EAAAmH,KAAKnR,IAAK0jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAC/H,KAAKd,EAAeg9B,uBAAwB,OAAOjF,EAAS/3B,EAAeyrB,WAAYhF,EAAU19E,EAAAmH,KAAKlR,IAAKyjC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAC/H,KAAKd,EAAei9B,mBAAoB,OAAOlF,EAAS/3B,EAAeyrB,WAAYhF,EAAU19E,EAAAmH,KAAKtR,IAAK6jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAE3H,KAAKd,EAAek9B,sBAAuB,OAAOnF,EAAS/3B,EAAe0rB,WAAYjF,EAAU19E,EAAAmH,KAAKpR,GAAI2jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAC7H,KAAKd,EAAem9B,uBAAwB,OAAOpF,EAAS/3B,EAAe0rB,WAAYjF,EAAU19E,EAAAmH,KAAKnR,IAAK0jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAC/H,KAAKd,EAAeo9B,mBAAoB,OAAOrF,EAAS/3B,EAAe0rB,WAAYjF,EAAU19E,EAAAmH,KAAKvR,IAAK8jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAC3H,KAAKd,EAAeq9B,sBAAuB,OAAOtF,EAAS/3B,EAAe0rB,WAAYjF,EAAU19E,EAAAmH,KAAKpR,GAAI2jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAC7H,KAAKd,EAAes9B,uBAAwB,OAAOvF,EAAS/3B,EAAe0rB,WAAYjF,EAAU19E,EAAAmH,KAAKnR,IAAK0jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAC/H,KAAKd,EAAeu9B,uBAAwB,OAAOxF,EAAS/3B,EAAe0rB,WAAYjF,EAAU19E,EAAAmH,KAAKlR,IAAKyjC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAC/H,KAAKd,EAAew9B,mBAAoB,OAAOzF,EAAS/3B,EAAe0rB,WAAYjF,EAAU19E,EAAAmH,KAAKtR,IAAK6jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAE3H,KAAKd,EAAey9B,qBAAsB,OAAO1F,EAAS/3B,EAAe2rB,UAAWlF,EAAU19E,EAAAmH,KAAKpR,GAAI2jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAC3H,KAAKd,EAAe09B,sBAAuB,OAAO3F,EAAS/3B,EAAe2rB,UAAWlF,EAAU19E,EAAAmH,KAAKnR,IAAK0jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAC7H,KAAKd,EAAe29B,kBAAmB,OAAO5F,EAAS/3B,EAAe2rB,UAAWlF,EAAU19E,EAAAmH,KAAKvR,IAAK8jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GACzH,KAAKd,EAAe49B,qBAAsB,OAAO7F,EAAS/3B,EAAe2rB,UAAWlF,EAAU19E,EAAAmH,KAAKpR,GAAI2jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAC3H,KAAKd,EAAe69B,sBAAuB,OAAO9F,EAAS/3B,EAAe2rB,UAAWlF,EAAU19E,EAAAmH,KAAKnR,IAAK0jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAC7H,KAAKd,EAAe89B,sBAAuB,OAAO/F,EAAS/3B,EAAe2rB,UAAWlF,EAAU19E,EAAAmH,KAAKlR,IAAKyjC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAC7H,KAAKd,EAAe+9B,kBAAmB,OAAOhG,EAAS/3B,EAAe2rB,UAAWlF,EAAU19E,EAAAmH,KAAKtR,IAAK6jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAEzH,KAAKd,EAAeg+B,sBAAuB,OAAOjG,EAAS/3B,EAAe4rB,WAAYnF,EAAU19E,EAAAmH,KAAKpR,GAAI2jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAC7H,KAAKd,EAAei+B,uBAAwB,OAAOlG,EAAS/3B,EAAe4rB,WAAYnF,EAAU19E,EAAAmH,KAAKnR,IAAK0jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAC/H,KAAKd,EAAek+B,mBAAoB,OAAOnG,EAAS/3B,EAAe4rB,WAAYnF,EAAU19E,EAAAmH,KAAKvR,IAAK8jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAC3H,KAAKd,EAAem+B,sBAAuB,OAAOpG,EAAS/3B,EAAe4rB,WAAYnF,EAAU19E,EAAAmH,KAAKpR,GAAI2jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAC7H,KAAKd,EAAeo+B,uBAAwB,OAAOrG,EAAS/3B,EAAe4rB,WAAYnF,EAAU19E,EAAAmH,KAAKnR,IAAK0jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAC/H,KAAKd,EAAeq+B,uBAAwB,OAAOtG,EAAS/3B,EAAe4rB,WAAYnF,EAAU19E,EAAAmH,KAAKlR,IAAKyjC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAC/H,KAAKd,EAAes+B,mBAAoB,OAAOvG,EAAS/3B,EAAe4rB,WAAYnF,EAAU19E,EAAAmH,KAAKtR,IAAK6jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAE3H,KAAKd,EAAeu+B,uBAAwB,OAAOxG,EAAS/3B,EAAe6rB,YAAapF,EAAU19E,EAAAmH,KAAKpR,GAAI2jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAC/H,KAAKd,EAAew+B,wBAAyB,OAAOzG,EAAS/3B,EAAe6rB,YAAapF,EAAU19E,EAAAmH,KAAKnR,IAAK0jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GACjI,KAAKd,EAAey+B,oBAAqB,OAAO1G,EAAS/3B,EAAe6rB,YAAapF,EAAU19E,EAAAmH,KAAKvR,IAAK8jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAC7H,KAAKd,EAAe0+B,uBAAwB,OAAO3G,EAAS/3B,EAAe6rB,YAAapF,EAAU19E,EAAAmH,KAAKpR,GAAI2jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAC/H,KAAKd,EAAe2+B,wBAAyB,OAAO5G,EAAS/3B,EAAe6rB,YAAapF,EAAU19E,EAAAmH,KAAKnR,IAAK0jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GACjI,KAAKd,EAAe4+B,wBAAyB,OAAO7G,EAAS/3B,EAAe6rB,YAAapF,EAAU19E,EAAAmH,KAAKlR,IAAKyjC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GACjI,KAAKd,EAAe6+B,oBAAqB,OAAO9G,EAAS/3B,EAAe6rB,YAAapF,EAAU19E,EAAAmH,KAAKtR,IAAK6jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAE7H,KAAKd,EAAe8+B,0BAA2B,OAAO/G,EAAS/3B,EAAej8B,eAAgB0iD,EAAU19E,EAAAmH,KAAKpR,GAAI2jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GACrI,KAAKd,EAAe++B,2BAA4B,OAAOhH,EAAS/3B,EAAej8B,eAAgB0iD,EAAU19E,EAAAmH,KAAKnR,IAAK0jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GACvI,KAAKd,EAAeg/B,uBAAwB,OAAOjH,EAAS/3B,EAAej8B,eAAgB0iD,EAAU19E,EAAAmH,KAAKvR,IAAK8jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GACnI,KAAKd,EAAei/B,0BAA2B,OAAOlH,EAAS/3B,EAAej8B,eAAgB0iD,EAAU19E,EAAAmH,KAAKpR,GAAI2jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GACrI,KAAKd,EAAek/B,2BAA4B,OAAOnH,EAAS/3B,EAAej8B,eAAgB0iD,EAAU19E,EAAAmH,KAAKnR,IAAK0jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GACvI,KAAKd,EAAem/B,2BAA4B,OAAOpH,EAAS/3B,EAAej8B,eAAgB0iD,EAAU19E,EAAAmH,KAAKlR,IAAKyjC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GACvI,KAAKd,EAAeo/B,uBAAwB,OAAOrH,EAAS/3B,EAAej8B,eAAgB0iD,EAAU19E,EAAAmH,KAAKtR,IAAK6jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAEnI,KAAKd,EAAeq/B,SAAU,OAAOtH,EAAS/3B,EAAe77B,YAAasiD,EAAU19E,EAAAmH,KAAKvR,IAAK8jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAClH,KAAKd,EAAes/B,SAAU,OAAOvH,EAAS/3B,EAAe77B,YAAasiD,EAAU19E,EAAAmH,KAAKtR,IAAK6jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAGtH,GAAI2lB,EAASz2E,QAAQW,WAAU,GAC7B,OAAQnT,EAAUkQ,cAEhB,KAAKsyD,EAAeu/B,UAAW,OAAOxH,EAAS/3B,EAAe98B,KAAMujD,EAAU19E,EAAAmH,KAAK5Q,KAAMmjC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAC9G,KAAKd,EAAew/B,WAAY,OAAOzH,EAAS/3B,EAAel+B,MAAO2kD,EAAU19E,EAAAmH,KAAK5Q,KAAMmjC,EAAU15B,EAAAmH,KAAKG,KAAMywD,GAEhH,KAAKd,EAAey/B,YAAa,OAAO1H,EAAS/3B,EAAektB,WAAYzG,EAAU19E,EAAAmH,KAAKzR,GAAIgkC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACpH,KAAKd,EAAe0/B,qBAAsB,OAAO3H,EAAS/3B,EAAeytB,kBAAmBhH,EAAU19E,EAAAmH,KAAKzR,GAAIgkC,EAAU15B,EAAAmH,KAAKzR,GAAIqiE,GAClI,KAAKd,EAAe2/B,qBAAsB,OAAO5H,EAAS/3B,EAAeytB,kBAAmBhH,EAAU19E,EAAAmH,KAAKpR,GAAI2jC,EAAU15B,EAAAmH,KAAKpR,GAAIgiE,GAClI,KAAKd,EAAe4/B,mBAAoB,OAAO7H,EAAS/3B,EAAemuB,kBAAmB1H,EAAU19E,EAAAmH,KAAKzR,GAAIgkC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAClI,KAAKd,EAAe6/B,UAAW,OAAO9H,EAAS/3B,EAAegvB,SAAUvI,EAAU19E,EAAAmH,KAAKzR,GAAIgkC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAChH,KAAKd,EAAe8/B,UAAW,OAAO/H,EAAS/3B,EAAeivB,SAAUxI,EAAU19E,EAAAmH,KAAKzR,GAAIgkC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAChH,KAAKd,EAAe+/B,UAAW,OAAOhI,EAAS/3B,EAAekvB,SAAUzI,EAAU19E,EAAAmH,KAAKzR,GAAIgkC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAChH,KAAKd,EAAeggC,UAAW,OAAOjI,EAAS/3B,EAAeq0B,SAAU5N,EAAU19E,EAAAmH,KAAKzR,GAAIgkC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAChH,KAAKd,EAAeigC,qBAAsB,OAAOlI,EAAS/3B,EAAeovB,kBAAmB3I,EAAU19E,EAAAmH,KAAKzR,GAAIgkC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACpI,KAAKd,EAAekgC,qBAAsB,OAAOnI,EAAS/3B,EAAeovB,kBAAmB3I,EAAU19E,EAAAmH,KAAKpR,GAAI2jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACpI,KAAKd,EAAemgC,qBAAsB,OAAOpI,EAAS/3B,EAAeqvB,kBAAmB5I,EAAU19E,EAAAmH,KAAKzR,GAAIgkC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACpI,KAAKd,EAAeogC,qBAAsB,OAAOrI,EAAS/3B,EAAeqvB,kBAAmB5I,EAAU19E,EAAAmH,KAAKpR,GAAI2jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACpI,KAAKd,EAAeqgC,UAAW,OAAOtI,EAAS/3B,EAAe41B,SAAUnP,EAAU19E,EAAAmH,KAAKzR,GAAIgkC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAChH,KAAKd,EAAesgC,YAAa,OAAOvI,EAAS/3B,EAAe61B,SAAUpP,EAAU19E,EAAAmH,KAAKzR,GAAIgkC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAClH,KAAKd,EAAeugC,YAAa,OAAOxI,EAAS/3B,EAAe61B,SAAUpP,EAAU19E,EAAAmH,KAAKpR,GAAI2jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAClH,KAAKd,EAAewgC,eAAgB,OAAOzI,EAAS/3B,EAAem3B,cAAe1Q,EAAU19E,EAAAmH,KAAKzR,GAAIgkC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GACzH,KAAKd,EAAeygC,eAAgB,OAAO1I,EAAS/3B,EAAeo3B,cAAe3Q,EAAU19E,EAAAmH,KAAKzR,GAAIgkC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GACzH,KAAKd,EAAe0gC,SAAU,OAAO3I,EAAS/3B,EAAewvB,QAAS/I,EAAU19E,EAAAmH,KAAKzR,GAAIgkC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAC9G,KAAKd,EAAe2gC,SAAU,OAAO5I,EAAS/3B,EAAeyvB,QAAShJ,EAAU19E,EAAAmH,KAAKzR,GAAIgkC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAC9G,KAAKd,EAAe4gC,WAAY,OAAO7I,EAAS/3B,EAAe0vB,QAASjJ,EAAU19E,EAAAmH,KAAKzR,GAAIgkC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAChH,KAAKd,EAAe6gC,WAAY,OAAO9I,EAAS/3B,EAAe0vB,QAASjJ,EAAU19E,EAAAmH,KAAKpR,GAAI2jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAChH,KAAKd,EAAe8gC,WAAY,OAAO/I,EAAS/3B,EAAe2vB,QAASlJ,EAAU19E,EAAAmH,KAAKzR,GAAIgkC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAChH,KAAKd,EAAe+gC,WAAY,OAAOhJ,EAAS/3B,EAAe2vB,QAASlJ,EAAU19E,EAAAmH,KAAKpR,GAAI2jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAChH,KAAKd,EAAeghC,WAAY,OAAOjJ,EAAS/3B,EAAe4vB,QAASnJ,EAAU19E,EAAAmH,KAAKzR,GAAIgkC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAChH,KAAKd,EAAeihC,WAAY,OAAOlJ,EAAS/3B,EAAe4vB,QAASnJ,EAAU19E,EAAAmH,KAAKpR,GAAI2jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAChH,KAAKd,EAAekhC,WAAY,OAAOnJ,EAAS/3B,EAAe6vB,QAASpJ,EAAU19E,EAAAmH,KAAKzR,GAAIgkC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAChH,KAAKd,EAAemhC,WAAY,OAAOpJ,EAAS/3B,EAAe6vB,QAASpJ,EAAU19E,EAAAmH,KAAKpR,GAAI2jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAEhH,KAAKd,EAAeohC,YAAa,OAAOrJ,EAAS/3B,EAAektB,WAAYzG,EAAU19E,EAAAmH,KAAKxR,IAAK+jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACrH,KAAKd,EAAeqhC,qBAAsB,OAAOtJ,EAAS/3B,EAAeytB,kBAAmBhH,EAAU19E,EAAAmH,KAAKxR,IAAK+jC,EAAU15B,EAAAmH,KAAKxR,IAAKoiE,GACpI,KAAKd,EAAeshC,qBAAsB,OAAOvJ,EAAS/3B,EAAeytB,kBAAmBhH,EAAU19E,EAAAmH,KAAKnR,IAAK0jC,EAAU15B,EAAAmH,KAAKnR,IAAK+hE,GACpI,KAAKd,EAAeuhC,mBAAoB,OAAOxJ,EAAS/3B,EAAemuB,kBAAmB1H,EAAU19E,EAAAmH,KAAKxR,IAAK+jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACnI,KAAKd,EAAewhC,UAAW,OAAOzJ,EAAS/3B,EAAegvB,SAAUvI,EAAU19E,EAAAmH,KAAKxR,IAAK+jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAeyhC,UAAW,OAAO1J,EAAS/3B,EAAeivB,SAAUxI,EAAU19E,EAAAmH,KAAKxR,IAAK+jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAe0hC,UAAW,OAAO3J,EAAS/3B,EAAekvB,SAAUzI,EAAU19E,EAAAmH,KAAKxR,IAAK+jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAe2hC,UAAW,OAAO5J,EAAS/3B,EAAeq0B,SAAU5N,EAAU19E,EAAAmH,KAAKxR,IAAK+jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAe4hC,qBAAsB,OAAO7J,EAAS/3B,EAAeovB,kBAAmB3I,EAAU19E,EAAAmH,KAAKxR,IAAK+jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACrI,KAAKd,EAAe6hC,qBAAsB,OAAO9J,EAAS/3B,EAAeovB,kBAAmB3I,EAAU19E,EAAAmH,KAAKnR,IAAK0jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACrI,KAAKd,EAAe8hC,qBAAsB,OAAO/J,EAAS/3B,EAAeqvB,kBAAmB5I,EAAU19E,EAAAmH,KAAKxR,IAAK+jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACrI,KAAKd,EAAe+hC,qBAAsB,OAAOhK,EAAS/3B,EAAeqvB,kBAAmB5I,EAAU19E,EAAAmH,KAAKnR,IAAK0jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACrI,KAAKd,EAAegiC,UAAW,OAAOjK,EAAS/3B,EAAe41B,SAAUnP,EAAU19E,EAAAmH,KAAKxR,IAAK+jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAeiiC,YAAa,OAAOlK,EAAS/3B,EAAe61B,SAAUpP,EAAU19E,EAAAmH,KAAKxR,IAAK+jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACnH,KAAKd,EAAekiC,YAAa,OAAOnK,EAAS/3B,EAAe61B,SAAUpP,EAAU19E,EAAAmH,KAAKnR,IAAK0jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACnH,KAAKd,EAAemiC,eAAgB,OAAOpK,EAAS/3B,EAAem3B,cAAe1Q,EAAU19E,EAAAmH,KAAKxR,IAAK+jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAC1H,KAAKd,EAAeoiC,eAAgB,OAAOrK,EAAS/3B,EAAeo3B,cAAe3Q,EAAU19E,EAAAmH,KAAKxR,IAAK+jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAC1H,KAAKd,EAAeqiC,SAAU,OAAOtK,EAAS/3B,EAAewvB,QAAS/I,EAAU19E,EAAAmH,KAAKxR,IAAK+jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAC/G,KAAKd,EAAesiC,SAAU,OAAOvK,EAAS/3B,EAAeyvB,QAAShJ,EAAU19E,EAAAmH,KAAKxR,IAAK+jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAC/G,KAAKd,EAAeuiC,WAAY,OAAOxK,EAAS/3B,EAAe0vB,QAASjJ,EAAU19E,EAAAmH,KAAKxR,IAAK+jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAewiC,WAAY,OAAOzK,EAAS/3B,EAAe0vB,QAASjJ,EAAU19E,EAAAmH,KAAKnR,IAAK0jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAeyiC,WAAY,OAAO1K,EAAS/3B,EAAe2vB,QAASlJ,EAAU19E,EAAAmH,KAAKxR,IAAK+jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAe0iC,WAAY,OAAO3K,EAAS/3B,EAAe2vB,QAASlJ,EAAU19E,EAAAmH,KAAKnR,IAAK0jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAe2iC,WAAY,OAAO5K,EAAS/3B,EAAe4vB,QAASnJ,EAAU19E,EAAAmH,KAAKxR,IAAK+jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAe4iC,WAAY,OAAO7K,EAAS/3B,EAAe4vB,QAASnJ,EAAU19E,EAAAmH,KAAKnR,IAAK0jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAe6iC,WAAY,OAAO9K,EAAS/3B,EAAe6vB,QAASpJ,EAAU19E,EAAAmH,KAAKxR,IAAK+jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAe8iC,WAAY,OAAO/K,EAAS/3B,EAAe6vB,QAASpJ,EAAU19E,EAAAmH,KAAKnR,IAAK0jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAEjH,KAAKd,EAAe+iC,YAAa,OAAOhL,EAAS/3B,EAAektB,WAAYzG,EAAU19E,EAAAmH,KAAKvR,IAAK8jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACrH,KAAKd,EAAegjC,mBAAoB,OAAOjL,EAAS/3B,EAAeytB,kBAAmBhH,EAAU19E,EAAAmH,KAAKvR,IAAK8jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAClI,KAAKd,EAAeijC,mBAAoB,OAAOlL,EAAS/3B,EAAemuB,kBAAmB1H,EAAU19E,EAAAmH,KAAKvR,IAAK8jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACnI,KAAKd,EAAekjC,UAAW,OAAOnL,EAAS/3B,EAAegvB,SAAUvI,EAAU19E,EAAAmH,KAAKvR,IAAK8jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAemjC,UAAW,OAAOpL,EAAS/3B,EAAeivB,SAAUxI,EAAU19E,EAAAmH,KAAKvR,IAAK8jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAeojC,UAAW,OAAOrL,EAAS/3B,EAAekvB,SAAUzI,EAAU19E,EAAAmH,KAAKvR,IAAK8jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAeqjC,UAAW,OAAOtL,EAAS/3B,EAAeq0B,SAAU5N,EAAU19E,EAAAmH,KAAKvR,IAAK8jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAesjC,UAAW,OAAOvL,EAAS/3B,EAAe41B,SAAUnP,EAAU19E,EAAAmH,KAAKvR,IAAK8jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAeujC,YAAa,OAAOxL,EAAS/3B,EAAe61B,SAAUpP,EAAU19E,EAAAmH,KAAKvR,IAAK8jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACnH,KAAKd,EAAewjC,YAAa,OAAOzL,EAAS/3B,EAAe61B,SAAUpP,EAAU19E,EAAAmH,KAAKlR,IAAKyjC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACnH,KAAKd,EAAeyjC,eAAgB,OAAO1L,EAAS/3B,EAAem3B,cAAe1Q,EAAU19E,EAAAmH,KAAKvR,IAAK8jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAC1H,KAAKd,EAAe0jC,eAAgB,OAAO3L,EAAS/3B,EAAeo3B,cAAe3Q,EAAU19E,EAAAmH,KAAKvR,IAAK8jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAC1H,KAAKd,EAAe2jC,SAAU,OAAO5L,EAAS/3B,EAAewvB,QAAS/I,EAAU19E,EAAAmH,KAAKvR,IAAK8jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAC/G,KAAKd,EAAe4jC,SAAU,OAAO7L,EAAS/3B,EAAeyvB,QAAShJ,EAAU19E,EAAAmH,KAAKvR,IAAK8jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAC/G,KAAKd,EAAe6jC,WAAY,OAAO9L,EAAS/3B,EAAe0vB,QAASjJ,EAAU19E,EAAAmH,KAAKvR,IAAK8jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAe8jC,WAAY,OAAO/L,EAAS/3B,EAAe0vB,QAASjJ,EAAU19E,EAAAmH,KAAKlR,IAAKyjC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAe+jC,WAAY,OAAOhM,EAAS/3B,EAAe2vB,QAASlJ,EAAU19E,EAAAmH,KAAKvR,IAAK8jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAegkC,WAAY,OAAOjM,EAAS/3B,EAAe2vB,QAASlJ,EAAU19E,EAAAmH,KAAKlR,IAAKyjC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAeikC,WAAY,OAAOlM,EAAS/3B,EAAe4vB,QAASnJ,EAAU19E,EAAAmH,KAAKvR,IAAK8jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAekkC,WAAY,OAAOnM,EAAS/3B,EAAe4vB,QAASnJ,EAAU19E,EAAAmH,KAAKlR,IAAKyjC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAemkC,WAAY,OAAOpM,EAAS/3B,EAAe6vB,QAASpJ,EAAU19E,EAAAmH,KAAKvR,IAAK8jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAeokC,WAAY,OAAOrM,EAAS/3B,EAAe6vB,QAASpJ,EAAU19E,EAAAmH,KAAKlR,IAAKyjC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAeqkC,wBAAyB,OAAOtM,EAAS/3B,EAAey0B,WAAYhO,EAAU19E,EAAAmH,KAAKvR,IAAK8jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjI,KAAKd,EAAeskC,wBAAyB,OAAOvM,EAAS/3B,EAAey0B,WAAYhO,EAAU19E,EAAAmH,KAAKlR,IAAKyjC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAEjI,KAAKd,EAAeukC,YAAa,OAAOxM,EAAS/3B,EAAektB,WAAYzG,EAAU19E,EAAAmH,KAAKtR,IAAK6jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACrH,KAAKd,EAAewkC,mBAAoB,OAAOzM,EAAS/3B,EAAeytB,kBAAmBhH,EAAU19E,EAAAmH,KAAKtR,IAAK6jC,EAAU15B,EAAAmH,KAAKtR,IAAKkiE,GAClI,KAAKd,EAAeykC,mBAAoB,OAAO1M,EAAS/3B,EAAemuB,kBAAmB1H,EAAU19E,EAAAmH,KAAKtR,IAAK6jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACnI,KAAKd,EAAe0kC,UAAW,OAAO3M,EAAS/3B,EAAegvB,SAAUvI,EAAU19E,EAAAmH,KAAKtR,IAAK6jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAe2kC,UAAW,OAAO5M,EAAS/3B,EAAeivB,SAAUxI,EAAU19E,EAAAmH,KAAKtR,IAAK6jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAe4kC,UAAW,OAAO7M,EAAS/3B,EAAeq0B,SAAU5N,EAAU19E,EAAAmH,KAAKtR,IAAK6jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAe6kC,UAAW,OAAO9M,EAAS/3B,EAAe41B,SAAUnP,EAAU19E,EAAAmH,KAAKtR,IAAK6jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAe8kC,YAAa,OAAO/M,EAAS/3B,EAAe61B,SAAUpP,EAAU19E,EAAAmH,KAAKtR,IAAK6jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACnH,KAAKd,EAAe+kC,YAAa,OAAOhN,EAAS/3B,EAAe61B,SAAUpP,EAAU19E,EAAAmH,KAAKjR,IAAKwjC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACnH,KAAKd,EAAeglC,eAAgB,OAAOjN,EAAS/3B,EAAem3B,cAAe1Q,EAAU19E,EAAAmH,KAAKtR,IAAK6jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAC1H,KAAKd,EAAeilC,eAAgB,OAAOlN,EAAS/3B,EAAeo3B,cAAe3Q,EAAU19E,EAAAmH,KAAKtR,IAAK6jC,EAAU15B,EAAAmH,KAAKvR,IAAKmiE,GAC1H,KAAKd,EAAeklC,wBAAyB,OAAOnN,EAAS/3B,EAAey0B,WAAYhO,EAAU19E,EAAAmH,KAAKtR,IAAK6jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjI,KAAKd,EAAemlC,wBAAyB,OAAOpN,EAAS/3B,EAAey0B,WAAYhO,EAAU19E,EAAAmH,KAAKjR,IAAKwjC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAEjI,KAAKd,EAAeolC,YAAa,OAAOrN,EAAS/3B,EAAektB,WAAYzG,EAAU19E,EAAAmH,KAAK9Q,IAAKqjC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACrH,KAAKd,EAAeqlC,mBAAoB,OAAOtN,EAAS/3B,EAAeytB,kBAAmBhH,EAAU19E,EAAAmH,KAAK9Q,IAAKqjC,EAAU15B,EAAAmH,KAAK9Q,IAAK0hE,GAClI,KAAKd,EAAeslC,mBAAoB,OAAOvN,EAAS/3B,EAAemuB,kBAAmB1H,EAAU19E,EAAAmH,KAAK9Q,IAAKqjC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACnI,KAAKd,EAAeulC,UAAW,OAAOxN,EAAS/3B,EAAegvB,SAAUvI,EAAU19E,EAAAmH,KAAK9Q,IAAKqjC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAewlC,UAAW,OAAOzN,EAAS/3B,EAAeivB,SAAUxI,EAAU19E,EAAAmH,KAAK9Q,IAAKqjC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAeylC,UAAW,OAAO1N,EAAS/3B,EAAekvB,SAAUzI,EAAU19E,EAAAmH,KAAK9Q,IAAKqjC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAe0lC,UAAW,OAAO3N,EAAS/3B,EAAemvB,SAAU1I,EAAU19E,EAAAmH,KAAK9Q,IAAKqjC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAe2lC,UAAW,OAAO5N,EAAS/3B,EAAeq0B,SAAU5N,EAAU19E,EAAAmH,KAAK9Q,IAAKqjC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAe4lC,UAAW,OAAO7N,EAAS/3B,EAAesvB,SAAU7I,EAAU19E,EAAAmH,KAAK9Q,IAAKqjC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAe6lC,UAAW,OAAO9N,EAAS/3B,EAAeuvB,SAAU9I,EAAU19E,EAAAmH,KAAK9Q,IAAKqjC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAe8lC,UAAW,OAAO/N,EAAS/3B,EAAes0B,SAAU7N,EAAU19E,EAAAmH,KAAK9Q,IAAKqjC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAe+lC,WAAY,OAAOhO,EAAS/3B,EAAeu0B,UAAW9N,EAAU19E,EAAAmH,KAAK9Q,IAAKqjC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACnH,KAAKd,EAAegmC,SAAU,OAAOjO,EAAS/3B,EAAewvB,QAAS/I,EAAU19E,EAAAmH,KAAK9Q,IAAKqjC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAC/G,KAAKd,EAAeimC,SAAU,OAAOlO,EAAS/3B,EAAeyvB,QAAShJ,EAAU19E,EAAAmH,KAAK9Q,IAAKqjC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAC/G,KAAKd,EAAekmC,SAAU,OAAOnO,EAAS/3B,EAAe0vB,QAASjJ,EAAU19E,EAAAmH,KAAK9Q,IAAKqjC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAC/G,KAAKd,EAAemmC,SAAU,OAAOpO,EAAS/3B,EAAe2vB,QAASlJ,EAAU19E,EAAAmH,KAAK9Q,IAAKqjC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAC/G,KAAKd,EAAeomC,SAAU,OAAOrO,EAAS/3B,EAAe4vB,QAASnJ,EAAU19E,EAAAmH,KAAK9Q,IAAKqjC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAC/G,KAAKd,EAAeqmC,SAAU,OAAOtO,EAAS/3B,EAAe6vB,QAASpJ,EAAU19E,EAAAmH,KAAK9Q,IAAKqjC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAC/G,KAAKd,EAAesmC,sBAAuB,OAAOvO,EAAS/3B,EAAew0B,aAAc/N,EAAU19E,EAAAmH,KAAKvR,IAAK8jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjI,KAAKd,EAAeumC,sBAAuB,OAAOxO,EAAS/3B,EAAew0B,aAAc/N,EAAU19E,EAAAmH,KAAKlR,IAAKyjC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAEjI,KAAKd,EAAewmC,YAAa,OAAOzO,EAAS/3B,EAAektB,WAAYzG,EAAU19E,EAAAmH,KAAK7Q,IAAKojC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACrH,KAAKd,EAAeymC,mBAAoB,OAAO1O,EAAS/3B,EAAeytB,kBAAmBhH,EAAU19E,EAAAmH,KAAK7Q,IAAKojC,EAAU15B,EAAAmH,KAAK7Q,IAAKyhE,GAClI,KAAKd,EAAe0mC,mBAAoB,OAAO3O,EAAS/3B,EAAemuB,kBAAmB1H,EAAU19E,EAAAmH,KAAK7Q,IAAKojC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACnI,KAAKd,EAAe2mC,UAAW,OAAO5O,EAAS/3B,EAAegvB,SAAUvI,EAAU19E,EAAAmH,KAAK7Q,IAAKojC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAe4mC,UAAW,OAAO7O,EAAS/3B,EAAeivB,SAAUxI,EAAU19E,EAAAmH,KAAK7Q,IAAKojC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAe6mC,UAAW,OAAO9O,EAAS/3B,EAAekvB,SAAUzI,EAAU19E,EAAAmH,KAAK7Q,IAAKojC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAe8mC,UAAW,OAAO/O,EAAS/3B,EAAemvB,SAAU1I,EAAU19E,EAAAmH,KAAK7Q,IAAKojC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAe+mC,UAAW,OAAOhP,EAAS/3B,EAAeq0B,SAAU5N,EAAU19E,EAAAmH,KAAK7Q,IAAKojC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAegnC,UAAW,OAAOjP,EAAS/3B,EAAesvB,SAAU7I,EAAU19E,EAAAmH,KAAK7Q,IAAKojC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAeinC,UAAW,OAAOlP,EAAS/3B,EAAeuvB,SAAU9I,EAAU19E,EAAAmH,KAAK7Q,IAAKojC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAeknC,UAAW,OAAOnP,EAAS/3B,EAAes0B,SAAU7N,EAAU19E,EAAAmH,KAAK7Q,IAAKojC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjH,KAAKd,EAAemnC,WAAY,OAAOpP,EAAS/3B,EAAeu0B,UAAW9N,EAAU19E,EAAAmH,KAAK7Q,IAAKojC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACnH,KAAKd,EAAeonC,SAAU,OAAOrP,EAAS/3B,EAAewvB,QAAS/I,EAAU19E,EAAAmH,KAAK7Q,IAAKojC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAC/G,KAAKd,EAAeqnC,SAAU,OAAOtP,EAAS/3B,EAAeyvB,QAAShJ,EAAU19E,EAAAmH,KAAK7Q,IAAKojC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAC/G,KAAKd,EAAesnC,SAAU,OAAOvP,EAAS/3B,EAAe0vB,QAASjJ,EAAU19E,EAAAmH,KAAK7Q,IAAKojC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAC/G,KAAKd,EAAeunC,SAAU,OAAOxP,EAAS/3B,EAAe2vB,QAASlJ,EAAU19E,EAAAmH,KAAK7Q,IAAKojC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAC/G,KAAKd,EAAewnC,SAAU,OAAOzP,EAAS/3B,EAAe4vB,QAASnJ,EAAU19E,EAAAmH,KAAK7Q,IAAKojC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAC/G,KAAKd,EAAeynC,SAAU,OAAO1P,EAAS/3B,EAAe6vB,QAASpJ,EAAU19E,EAAAmH,KAAK7Q,IAAKojC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAC/G,KAAKd,EAAe0nC,sBAAuB,OAAO3P,EAAS/3B,EAAew0B,aAAc/N,EAAU19E,EAAAmH,KAAKtR,IAAK6jC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GACjI,KAAKd,EAAe2nC,sBAAuB,OAAO5P,EAAS/3B,EAAew0B,aAAc/N,EAAU19E,EAAAmH,KAAKjR,IAAKwjC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAEjI,KAAKd,EAAe4nC,cAAe,OAAO7P,EAAS/3B,EAAe0uB,aAAcjI,EAAU19E,EAAAmH,KAAKzR,GAAIgkC,EAAU15B,EAAAmH,KAAK5Q,KAAMwhE,GAI5H,OAAO,EA3TM+mC,CAAYphB,EAAUjpF,EAAWilC,EAAUq+B,KAEhDv5C,GACFk/D,EAAS/9E,MACPI,EAAAhD,eAAe02D,sBACfsE,EAAWknB,mBAAoBxqF,EAAUkQ,cAGtCw0B,IAGXukD,EAAS/9E,MACPI,EAAAhD,eAAek3D,mBACf8D,EAAWx7B,WAAWl/B,MAAO5I,EAAUkQ,cAElCxS,EAAO6rC,eAgThB,SAASgxD,EACP57F,EACAsqF,EACA3pB,EACAr6B,EACAk7B,EACAmD,GAEAr7D,OAAOghF,EAAS1lE,QAAQnU,eAAekD,IAAI3T,IAC3C,IAAIqB,EAAYipF,EAAS1lE,QAAQnU,eAAenQ,IAAIN,GAEpD,OADAsJ,OAAOjI,EAAUuU,MAAQm7C,EAAA/gD,YAAYgN,oBAC9BumE,EACL+G,EACmBjpF,EACnB,CAAEs/D,GACFr6B,EACAk7B,EACAmD,GACY,GAKhB,SAAgB8V,EACd6P,EACAtgF,EACA26D,GAEA,IAAI//C,EAAU0lE,EAAS1lE,QACnB7lB,EAASurF,EAASvrF,OAElBoa,EAAiBmxE,EAAS1lE,QAAQzL,eACtC,IAAKA,EAAgB,OAAOpa,EAAO6rC,cAEnC,IAGI+gE,EAHAhwF,EAAgBiJ,EAAQjJ,cAC5B,IAAMA,IAAiB2uE,EAASrW,gBAAgBt4D,GAAiB,OAAO5c,EAAO6rC,cAQ7E+gE,EALc,OAAZ3hG,EAKWsgF,EAASvX,kBAAkB/oE,EAASmP,EAAe8E,KAAM,IAEzD9E,EAAe8E,KAAK20C,aAAa7zD,GAGhD,IAAI6sG,EAActhB,EAAS3U,mBAAmBhR,EAAW16D,MAAMY,OAAOC,gBAGtE,OADAw/E,EAASrc,YAAcrhE,EAAAmH,KAAKG,KACrBnV,EAAO4pC,MAAM,KAAM,CACxB5pC,EAAOa,KACL+b,EAAcpK,aAAc,CAC1Bo6F,EACAC,EACA7sG,EAAOyD,IAAImiE,EAAW16D,MAAMc,MAC5BhM,EAAOyD,IAAImiE,EAAW16D,MAAMe,SAE9BgmD,EAAAriC,WAAWyY,MAEbroC,EAAO6rC,gBAuLX,SAASihE,EAAmB5tF,GAC1B,IAAI9L,EAAQ,IAA+B,GAAK8L,EAAKkqE,WAKrD,OAJIlqE,EAAKK,GAAE,KAAoBnM,GAAK,MAChC8L,EAAKK,GAAE,KAAmBnM,GAAK,MAC/B8L,EAAKK,GAAE,OAAsBnM,GAAK,MAClC8L,EAAKozD,YAAWl/D,GAAK,MAClBA,EAAK,GA2Dd,SAASu4E,EACPJ,EACAl/D,EACAkb,EACAq+B,GAEA,GAAuB,GAAnBr+B,EAASj7B,OACX,OAAK+f,GAAyC,GAAxBA,EAAc/f,OAO7B+f,EAAc,IANnBk/D,EAAS/9E,MACPI,EAAAhD,eAAe+2D,oCACfiE,EAAWknB,mBAAoB,IAAKzgE,EAAgBA,EAAc/f,OAAOT,SAAS,IAAM,KAEnF,MAIX,GAAuB,GAAnB07B,EAASj7B,OAAa,CACxB,GAAI+f,EACF,GAA4B,GAAxBA,EAAc/f,OAChBi/E,EAASvX,kBAAkBzsC,EAAS,GAAIlb,EAAc,GAAE,OACnD,CACL,GAAIA,EAAc/f,OAKhB,OAJAi/E,EAAS/9E,MACPI,EAAAhD,eAAe+2D,oCACfiE,EAAWknB,mBAAoB,IAAKzgE,EAAc/f,OAAOT,SAAS,KAE7D,KAET0/E,EAASzR,4BAA4BvyC,EAAS,GAAI15B,EAAAmH,KAAKvR,UAGzD8nF,EAASzR,4BAA4BvyC,EAAS,GAAI15B,EAAAmH,KAAKvR,KAEzD,OAAO8nF,EAASrc,YAYlB,OAVI7iD,GAAiBA,EAAc/f,OAAS,GAC1Ci/E,EAAS/9E,MACPI,EAAAhD,eAAe+2D,oCACfiE,EAAWknB,mBAAoB,IAAKzgE,EAAc/f,OAAOT,SAAS,KAGtE0/E,EAAS/9E,MACPI,EAAAhD,eAAegZ,+BACfgiD,EAAWmnC,eAAgB,IAAKxlE,EAASj7B,OAAOT,SAAS,KAEpD,KAIT,SAASmkF,EAAwB5lD,EAAwBmhD,GACvD,IAAIvkD,EACArlC,EA6BJ,OA5BI4pF,EAASz2E,QAAQc,UACnBoxB,EAAOukD,EAAS34C,qBAAqBxI,EAAYv8B,EAAAmH,KAAK49C,QAAO,IAE3DX,EAAA9a,gBAAgBnQ,IAASirB,EAAApiC,aAAaolB,OACtCgd,EAAA7a,kBAAkBpQ,IAASirB,EAAAriC,WAAWppB,KACR,GAA9ByrD,EAAA1a,qBAAqBvQ,KACpBrlC,EAAQswD,EAAA3a,oBAAoBtQ,IAAS,KAEtCukD,EAAS/9E,MACPI,EAAAhD,eAAeknF,2CACf1nD,EAAWl/B,OAEbvJ,GAAS,KAGXqlC,EAAOukD,EAAS34C,qBAAqBxI,EAAYv8B,EAAAmH,KAAK69C,QAAO,IAE3DZ,EAAA9a,gBAAgBnQ,IAASirB,EAAApiC,aAAaolB,OACtCgd,EAAA7a,kBAAkBpQ,IAASirB,EAAAriC,WAAWrpB,MACrC5E,EAAQswD,EAAA5a,iBAAiBrQ,IAAS,KAEnCukD,EAAS/9E,MACPI,EAAAhD,eAAeknF,2CACf1nD,EAAWl/B,OAEbvJ,GAAS,IAGNA,EAIT,SAAS+qF,EACPrgE,EACAu5C,EACA2lB,EACAyhB,GAEA,QAFA,IAAAA,OAAA,GAEI3gF,EAAe,CACjB,IAAIe,EAAmBf,EAAc/f,OACrC,GAAwB,GAApB8gB,EAAuB,OAAO,EAClC7iB,OAAO6iB,GACH4/E,IAAuBzhB,EAASrc,YAAc7iD,EAAc,IAChEk/D,EAAS/9E,MACPI,EAAAhD,eAAe+2D,oCACfiE,EAAWknB,mBAAoB,IAAK1/D,EAAiBvhB,iBAGvD0/E,EAAS/9E,MACPI,EAAAhD,eAAe+2D,oCACfiE,EAAW16D,MAAO,IAAK,KAG3B,OAAO,EAIT,SAAS+hF,EACP5gE,EACAu5C,EACA2lB,EACAyhB,GAEA,QAFA,IAAAA,OAAA,GAEI3gF,EAAe,CACjB,IAAIe,EAAmBf,EAAc/f,OACrC,OAAwB,GAApB8gB,EAA8B,GAClC7iB,OAAO6iB,GACH4/E,IAAuBzhB,EAASrc,YAAc7iD,EAAc,IAChEk/D,EAAS/9E,MACPI,EAAAhD,eAAe+2D,oCACfiE,EAAWknB,mBAAoB,IAAK1/D,EAAiBvhB,YAEhD,GAET,OAAO,EAIT,SAASwgF,EACPhgE,EACAu5C,EACAtjE,GAEA,OAAI+pB,GACF/pB,EAAUujB,QAAQrY,MAChBI,EAAAhD,eAAe02D,sBACfsE,EAAWknB,mBAAoBxqF,EAAUkQ,cAEpC,GAEF,EAIT,SAAS85E,EACP/kD,EACAuB,EACA88B,EACA2lB,GAEA,OAAIhkD,EAASj7B,QAAUw8B,GACrByiD,EAAS/9E,MACPI,EAAAhD,eAAegZ,+BACfgiD,EAAW16D,MAAO49B,EAASj9B,WAAY07B,EAASj7B,OAAOT,YAElD,GAEF,EAIT,SAASghF,EACPtlD,EACA0lE,EACAC,EACAtnC,EACA2lB,GAEA,IAAIjE,EAAc//C,EAASj7B,OAC3B,OAAIg7E,EAAc2lB,GAChB1hB,EAAS/9E,MACPI,EAAAhD,eAAeg6E,wCACfhf,EAAW16D,MAAO+hG,EAAgBphG,WAAYy7E,EAAYz7E,YAErD,GACEy7E,EAAc4lB,GACvB3hB,EAAS/9E,MACPI,EAAAhD,eAAegZ,+BACfgiD,EAAW16D,MAAOgiG,EAAgBrhG,WAAYy7E,EAAYz7E,YAErD,GAEF,GAxtIT,SAAiBi5D,GAEFA,EAAA4mB,UAAY,0BACZ5mB,EAAA8mB,QAAU,wBACV9mB,EAAA+mB,UAAY,0BACZ/mB,EAAAgnB,SAAW,yBACXhnB,EAAAinB,YAAc,4BACdjnB,EAAAknB,SAAW,yBACXlnB,EAAAmnB,QAAU,wBACVnnB,EAAAonB,YAAc,4BACdpnB,EAAAqnB,WAAa,2BACbrnB,EAAArhB,WAAa,2BACbqhB,EAAAsnB,UAAY,0BACZtnB,EAAA0nB,WAAa,2BACb1nB,EAAAwN,UAAY,0BAEZxN,EAAAhS,IAAM,oBACNgS,EAAA8nB,IAAM,oBACN9nB,EAAAkoB,OAAS,uBACTloB,EAAAuoB,KAAO,qBACPvoB,EAAA0oB,KAAO,qBACP1oB,EAAA6oB,IAAM,oBACN7oB,EAAA0F,IAAM,oBACN1F,EAAAupB,IAAM,oBACNvpB,EAAAvS,KAAO,qBACPuS,EAAA0pB,MAAQ,sBACR1pB,EAAA+pB,SAAW,yBACX/pB,EAAAkqB,QAAU,wBACVlqB,EAAAqqB,YAAc,4BACdrqB,EAAA0qB,KAAO,qBACP1qB,EAAA6qB,MAAQ,sBACR7qB,EAAA98B,KAAO,qBACP88B,EAAAl+B,MAAQ,sBACRk+B,EAAAv8B,YAAc,4BACdu8B,EAAAr8B,aAAe,6BACfq8B,EAAAwrB,WAAa,2BACbxrB,EAAAyrB,WAAa,2BACbzrB,EAAA0rB,WAAa,2BACb1rB,EAAA2rB,UAAY,0BACZ3rB,EAAA4rB,WAAa,2BACb5rB,EAAA6rB,YAAc,4BACd7rB,EAAAj8B,eAAiB,+BACjBi8B,EAAA77B,YAAc,4BACd67B,EAAAz7B,cAAgB,8BAEhBy7B,EAAA2nB,OAAS,uBACT3nB,EAAA6nB,QAAU,wBACV7nB,EAAAj3C,SAAW,yBACXi3C,EAAA95B,OAAS,uBACT85B,EAAAj5B,YAAc,4BACdi5B,EAAAv/B,WAAa,2BACbu/B,EAAAv6D,OAAS,uBACTu6D,EAAAp3C,UAAY,0BACZo3C,EAAAysB,YAAc,4BACdzsB,EAAAp5B,cAAgB,8BAChBo5B,EAAA8sB,YAAc,4BACd9sB,EAAA23B,KAAO,qBAEP33B,EAAAvhE,GAAK,mBACLuhE,EAAAthE,IAAM,oBACNshE,EAAArhE,IAAM,oBACNqhE,EAAAphE,IAAM,oBACNohE,EAAAnhE,MAAQ,sBACRmhE,EAAAlhE,GAAK,mBACLkhE,EAAAjhE,IAAM,oBACNihE,EAAAhhE,IAAM,oBACNghE,EAAA/gE,IAAM,oBACN+gE,EAAA9gE,MAAQ,sBACR8gE,EAAA7gE,KAAO,qBACP6gE,EAAA5gE,IAAM,oBACN4gE,EAAA3gE,IAAM,oBACN2gE,EAAA1gE,KAAO,qBACP0gE,EAAA//D,MAAQ,qBAER+/D,EAAA83B,QAAU,wBACV93B,EAAAg4B,QAAU,wBACVh4B,EAAAi4B,QAAU,wBACVj4B,EAAAk4B,QAAU,wBACVl4B,EAAAm4B,WAAa,2BACbn4B,EAAAo4B,WAAa,2BACbp4B,EAAAq4B,SAAW,yBACXr4B,EAAAs4B,SAAW,yBACXt4B,EAAAu4B,SAAW,yBACXv4B,EAAAw4B,SAAW,yBAEXx4B,EAAAy4B,QAAU,wBACVz4B,EAAA04B,QAAU,wBACV14B,EAAA24B,QAAU,wBACV34B,EAAA44B,QAAU,wBACV54B,EAAA64B,QAAU,wBACV74B,EAAA84B,QAAU,wBACV94B,EAAA+4B,SAAW,yBACX/4B,EAAAg5B,SAAW,yBACXh5B,EAAAi5B,UAAY,0BACZj5B,EAAAk5B,UAAY,0BACZl5B,EAAAm5B,aAAe,6BACfn5B,EAAAo5B,aAAe,6BACfp5B,EAAAq5B,YAAc,4BACdr5B,EAAAs5B,YAAc,4BACdt5B,EAAAu5B,oBAAsB,oCACtBv5B,EAAAw5B,oBAAsB,oCACtBx5B,EAAAy5B,oBAAsB,oCACtBz5B,EAAA05B,oBAAsB,oCACtB15B,EAAA25B,SAAW,yBACX35B,EAAA45B,SAAW,yBACX55B,EAAA65B,UAAY,0BACZ75B,EAAA85B,UAAY,0BAEZ95B,EAAA+5B,YAAc,4BACd/5B,EAAAg6B,YAAc,4BACdh6B,EAAAi6B,aAAe,6BACfj6B,EAAAk6B,aAAe,6BACfl6B,EAAAm6B,SAAW,yBACXn6B,EAAAo6B,YAAc,4BACdp6B,EAAAq6B,YAAc,4BACdr6B,EAAAs6B,aAAe,6BACft6B,EAAAu6B,aAAe,6BACfv6B,EAAAw6B,aAAe,6BACfx6B,EAAAy6B,aAAe,6BACfz6B,EAAA06B,SAAW,yBACX16B,EAAA26B,SAAW,yBACX36B,EAAA46B,SAAW,yBACX56B,EAAA66B,WAAa,2BACb76B,EAAA86B,YAAc,4BACd96B,EAAA+6B,UAAY,0BACZ/6B,EAAAg7B,WAAa,2BACbh7B,EAAAi7B,YAAc,4BACdj7B,EAAAk7B,YAAc,4BACdl7B,EAAAm7B,UAAY,0BACZn7B,EAAAo7B,UAAY,0BACZp7B,EAAAq7B,UAAY,0BAEZr7B,EAAAs7B,mBAAqB,mCACrBt7B,EAAAu7B,oBAAsB,oCACtBv7B,EAAAw7B,gBAAkB,gCAClBx7B,EAAAy7B,mBAAqB,mCACrBz7B,EAAA07B,oBAAsB,oCACtB17B,EAAA27B,oBAAsB,oCACtB37B,EAAA47B,gBAAkB,gCAClB57B,EAAA67B,kBAAoB,kCACpB77B,EAAA87B,mBAAqB,mCACrB97B,EAAA+7B,iBAAmB,iCACnB/7B,EAAAg8B,kBAAoB,kCACpBh8B,EAAAi8B,mBAAqB,mCACrBj8B,EAAAk8B,mBAAqB,mCACrBl8B,EAAAm8B,iBAAmB,iCACnBn8B,EAAAo8B,sBAAwB,sCACxBp8B,EAAAq8B,uBAAyB,uCACzBr8B,EAAAs8B,mBAAqB,mCACrBt8B,EAAAu8B,sBAAwB,sCACxBv8B,EAAAw8B,uBAAyB,uCACzBx8B,EAAAy8B,uBAAyB,uCACzBz8B,EAAA08B,mBAAqB,mCACrB18B,EAAA28B,sBAAwB,sCACxB38B,EAAA48B,uBAAyB,uCACzB58B,EAAA68B,mBAAqB,mCACrB78B,EAAA88B,sBAAwB,sCACxB98B,EAAA+8B,uBAAyB,uCACzB/8B,EAAAg9B,uBAAyB,uCACzBh9B,EAAAi9B,mBAAqB,mCACrBj9B,EAAAk9B,sBAAwB,sCACxBl9B,EAAAm9B,uBAAyB,uCACzBn9B,EAAAo9B,mBAAqB,mCACrBp9B,EAAAq9B,sBAAwB,sCACxBr9B,EAAAs9B,uBAAyB,uCACzBt9B,EAAAu9B,uBAAyB,uCACzBv9B,EAAAw9B,mBAAqB,mCACrBx9B,EAAAy9B,qBAAuB,qCACvBz9B,EAAA09B,sBAAwB,sCACxB19B,EAAA29B,kBAAoB,kCACpB39B,EAAA49B,qBAAuB,qCACvB59B,EAAA69B,sBAAwB,sCACxB79B,EAAA89B,sBAAwB,sCACxB99B,EAAA+9B,kBAAoB,kCACpB/9B,EAAAg+B,sBAAwB,sCACxBh+B,EAAAi+B,uBAAyB,uCACzBj+B,EAAAk+B,mBAAqB,mCACrBl+B,EAAAm+B,sBAAwB,sCACxBn+B,EAAAo+B,uBAAyB,uCACzBp+B,EAAAq+B,uBAAyB,uCACzBr+B,EAAAs+B,mBAAqB,mCACrBt+B,EAAAu+B,uBAAyB,uCACzBv+B,EAAAw+B,wBAA0B,wCAC1Bx+B,EAAAy+B,oBAAsB,oCACtBz+B,EAAA0+B,uBAAyB,uCACzB1+B,EAAA2+B,wBAA0B,wCAC1B3+B,EAAA4+B,wBAA0B,wCAC1B5+B,EAAA6+B,oBAAsB,oCACtB7+B,EAAA8+B,0BAA4B,0CAC5B9+B,EAAA++B,2BAA6B,2CAC7B/+B,EAAAg/B,uBAAyB,uCACzBh/B,EAAAi/B,0BAA4B,0CAC5Bj/B,EAAAk/B,2BAA6B,2CAC7Bl/B,EAAAm/B,2BAA6B,2CAC7Bn/B,EAAAo/B,uBAAyB,uCACzBp/B,EAAAq/B,SAAW,yBACXr/B,EAAAs/B,SAAW,yBAEXt/B,EAAAktB,WAAa,2BACbltB,EAAAytB,kBAAoB,kCACpBztB,EAAAmuB,kBAAoB,kCACpBnuB,EAAA0uB,aAAe,6BACf1uB,EAAAu/B,UAAY,0BACZv/B,EAAAw/B,WAAa,2BACbx/B,EAAAgvB,SAAW,yBACXhvB,EAAAivB,SAAW,yBACXjvB,EAAAkvB,SAAW,yBACXlvB,EAAAmvB,SAAW,yBACXnvB,EAAAq0B,SAAW,yBACXr0B,EAAAovB,kBAAoB,kCACpBpvB,EAAAqvB,kBAAoB,kCACpBrvB,EAAA41B,SAAW,yBACX51B,EAAA61B,SAAW,yBACX71B,EAAA02B,SAAW,yBACX12B,EAAA22B,QAAU,wBACV32B,EAAA42B,SAAW,yBACX52B,EAAAg3B,SAAW,yBACXh3B,EAAAk3B,eAAiB,+BACjBl3B,EAAAm3B,cAAgB,8BAChBn3B,EAAAo3B,cAAgB,8BAChBp3B,EAAAsvB,SAAW,yBACXtvB,EAAAuvB,SAAW,yBACXvvB,EAAAs0B,SAAW,yBACXt0B,EAAAu0B,UAAY,0BACZv0B,EAAAwvB,QAAU,wBACVxvB,EAAAyvB,QAAU,wBACVzvB,EAAA0vB,QAAU,wBACV1vB,EAAA2vB,QAAU,wBACV3vB,EAAA4vB,QAAU,wBACV5vB,EAAA6vB,QAAU,wBACV7vB,EAAAw0B,aAAe,6BACfx0B,EAAAy0B,WAAa,2BAEbz0B,EAAAzgE,MAAQ,sBACRygE,EAAAvgE,MAAQ,sBACRugE,EAAArgE,MAAQ,sBACRqgE,EAAAngE,MAAQ,sBACRmgE,EAAAjgE,MAAQ,sBACRigE,EAAAhgE,MAAQ,sBAERggE,EAAAy/B,YAAc,4BACdz/B,EAAA0/B,qBAAuB,qCACvB1/B,EAAA2/B,qBAAuB,qCACvB3/B,EAAA4/B,mBAAqB,mCACrB5/B,EAAA6/B,UAAY,0BACZ7/B,EAAA8/B,UAAY,0BACZ9/B,EAAA+/B,UAAY,0BACZ//B,EAAAggC,UAAY,0BACZhgC,EAAAigC,qBAAuB,qCACvBjgC,EAAAkgC,qBAAuB,qCACvBlgC,EAAAmgC,qBAAuB,qCACvBngC,EAAAogC,qBAAuB,qCACvBpgC,EAAAqgC,UAAY,0BACZrgC,EAAAsgC,YAAc,4BACdtgC,EAAAugC,YAAc,4BACdvgC,EAAAwgC,eAAiB,+BACjBxgC,EAAAygC,eAAiB,+BACjBzgC,EAAA0gC,SAAW,yBACX1gC,EAAA2gC,SAAW,yBACX3gC,EAAA4gC,WAAa,2BACb5gC,EAAA6gC,WAAa,2BACb7gC,EAAA8gC,WAAa,2BACb9gC,EAAA+gC,WAAa,2BACb/gC,EAAAghC,WAAa,2BACbhhC,EAAAihC,WAAa,2BACbjhC,EAAAkhC,WAAa,2BACblhC,EAAAmhC,WAAa,2BAEbnhC,EAAAohC,YAAc,4BACdphC,EAAAqhC,qBAAuB,qCACvBrhC,EAAAshC,qBAAuB,qCACvBthC,EAAAuhC,mBAAqB,mCACrBvhC,EAAAwhC,UAAY,0BACZxhC,EAAAyhC,UAAY,0BACZzhC,EAAA0hC,UAAY,0BACZ1hC,EAAA2hC,UAAY,0BACZ3hC,EAAA4hC,qBAAuB,qCACvB5hC,EAAA6hC,qBAAuB,qCACvB7hC,EAAA8hC,qBAAuB,qCACvB9hC,EAAA+hC,qBAAuB,qCACvB/hC,EAAAgiC,UAAY,0BACZhiC,EAAAiiC,YAAc,4BACdjiC,EAAAkiC,YAAc,4BACdliC,EAAAmiC,eAAiB,+BACjBniC,EAAAoiC,eAAiB,+BACjBpiC,EAAAqiC,SAAW,yBACXriC,EAAAsiC,SAAW,yBACXtiC,EAAAuiC,WAAa,2BACbviC,EAAAwiC,WAAa,2BACbxiC,EAAAyiC,WAAa,2BACbziC,EAAA0iC,WAAa,2BACb1iC,EAAA2iC,WAAa,2BACb3iC,EAAA4iC,WAAa,2BACb5iC,EAAA6iC,WAAa,2BACb7iC,EAAA8iC,WAAa,2BAEb9iC,EAAA+iC,YAAc,4BACd/iC,EAAAgjC,mBAAqB,mCACrBhjC,EAAAijC,mBAAqB,mCACrBjjC,EAAAkjC,UAAY,0BACZljC,EAAAmjC,UAAY,0BACZnjC,EAAAojC,UAAY,0BACZpjC,EAAAqjC,UAAY,0BACZrjC,EAAAsjC,UAAY,0BACZtjC,EAAAujC,YAAc,4BACdvjC,EAAAwjC,YAAc,4BACdxjC,EAAAyjC,eAAiB,+BACjBzjC,EAAA0jC,eAAiB,+BACjB1jC,EAAA2jC,SAAW,yBACX3jC,EAAA4jC,SAAW,yBACX5jC,EAAA6jC,WAAa,2BACb7jC,EAAA8jC,WAAa,2BACb9jC,EAAA+jC,WAAa,2BACb/jC,EAAAgkC,WAAa,2BACbhkC,EAAAikC,WAAa,2BACbjkC,EAAAkkC,WAAa,2BACblkC,EAAAmkC,WAAa,2BACbnkC,EAAAokC,WAAa,2BACbpkC,EAAAqkC,wBAA0B,wCAC1BrkC,EAAAskC,wBAA0B,wCAE1BtkC,EAAAukC,YAAc,4BACdvkC,EAAAwkC,mBAAqB,mCACrBxkC,EAAAykC,mBAAqB,mCACrBzkC,EAAA0kC,UAAY,0BACZ1kC,EAAA2kC,UAAY,0BACZ3kC,EAAA4kC,UAAY,0BACZ5kC,EAAA6kC,UAAY,0BACZ7kC,EAAA8kC,YAAc,4BACd9kC,EAAA+kC,YAAc,4BACd/kC,EAAAglC,eAAiB,+BACjBhlC,EAAAilC,eAAiB,+BACjBjlC,EAAAklC,wBAA0B,wCAC1BllC,EAAAmlC,wBAA0B,wCAE1BnlC,EAAAolC,YAAc,4BACdplC,EAAAqlC,mBAAqB,mCACrBrlC,EAAAslC,mBAAqB,mCACrBtlC,EAAAulC,UAAY,0BACZvlC,EAAAwlC,UAAY,0BACZxlC,EAAAylC,UAAY,0BACZzlC,EAAA0lC,UAAY,0BACZ1lC,EAAA2lC,UAAY,0BACZ3lC,EAAA4lC,UAAY,0BACZ5lC,EAAA6lC,UAAY,0BACZ7lC,EAAA8lC,UAAY,0BACZ9lC,EAAA+lC,WAAa,2BACb/lC,EAAAgmC,SAAW,yBACXhmC,EAAAimC,SAAW,yBACXjmC,EAAAkmC,SAAW,yBACXlmC,EAAAmmC,SAAW,yBACXnmC,EAAAomC,SAAW,yBACXpmC,EAAAqmC,SAAW,yBACXrmC,EAAAsmC,sBAAwB,sCACxBtmC,EAAAumC,sBAAwB,sCAExBvmC,EAAAwmC,YAAc,4BACdxmC,EAAAymC,mBAAqB,mCACrBzmC,EAAA0mC,mBAAqB,mCACrB1mC,EAAA2mC,UAAY,0BACZ3mC,EAAA4mC,UAAY,0BACZ5mC,EAAA6mC,UAAY,0BACZ7mC,EAAA8mC,UAAY,0BACZ9mC,EAAA+mC,UAAY,0BACZ/mC,EAAAgnC,UAAY,0BACZhnC,EAAAinC,UAAY,0BACZjnC,EAAAknC,UAAY,0BACZlnC,EAAAmnC,WAAa,2BACbnnC,EAAAonC,SAAW,yBACXpnC,EAAAqnC,SAAW,yBACXrnC,EAAAsnC,SAAW,yBACXtnC,EAAAunC,SAAW,yBACXvnC,EAAAwnC,SAAW,yBACXxnC,EAAAynC,SAAW,yBACXznC,EAAA0nC,sBAAwB,sCACxB1nC,EAAA2nC,sBAAwB,sCAExB3nC,EAAA4nC,cAAgB,8BAGhB5nC,EAAA0L,UAAY,wBACZ1L,EAAA2L,UAAY,sBACZ3L,EAAA43B,cAAgB,0BAChB53B,EAAA63B,cAAgB,0BAGhB73B,EAAAx6D,MAAQ,yBACRw6D,EAAAz6D,QAAU,2BACVy6D,EAAA16D,KAAO,wBAGP06D,EAAAosB,YAAc,0BACdpsB,EAAAssB,YAAc,0BACdtsB,EAAA/4B,YAAc,0BACd+4B,EAAA54B,YAAc,0BACd44B,EAAAqoC,gBAAkB,8BAClBroC,EAAAsoC,YAAc,0BACdtoC,EAAAuoC,aAAe,2BAGfvoC,EAAAwoC,mBAAqB,kCACrBxoC,EAAAyoC,cAAgB,6BAChBzoC,EAAA0oC,iBAAmB,6BACnB1oC,EAAA2oC,mBAAqB,+BACrB3oC,EAAA4oC,iBAAmB,6BACnB5oC,EAAA6oC,gBAAkB,4BAClB7oC,EAAA8oC,kBAAoB,8BAGpB9oC,EAAAl9D,UAAY,4BACZk9D,EAAA98D,WAAa,6BACb88D,EAAAj9D,WAAa,6BACbi9D,EAAA58D,YAAc,8BACd48D,EAAAh9D,WAAa,6BACbg9D,EAAA38D,YAAc,8BACd28D,EAAA/8D,WAAa,6BACb+8D,EAAA18D,YAAc,8BACd08D,EAAA78D,kBAAoB,oCACpB68D,EAAAz8D,aAAe,+BACfy8D,EAAAx8D,aAAe,+BAGfw8D,EAAA+Q,QAAU,eACV/Q,EAAAyhB,KAAO,YACPzhB,EAAA4hB,QAAU,eACV5hB,EAAA+oC,aAAe,oBAza9B,CAAiB/oC,EAAA/kE,EAAA+kE,iBAAA/kE,EAAA+kE,eAAc,KA6a/B/kE,EAAAykF,cAq1GAzkF,EAAA27E,eA2CA37E,EAAAixE,oBAAA,SAAoCua,WAC9BvrF,EAASurF,EAASvrF,OAClB4nF,EAAQ,IAAIxgF,MACZ6mC,EAAUs9C,EAASxa,mBAAmB,CAAEljE,EAAAmH,KAAKlR,KAAO+J,EAAAmH,KAAKG,MACzDs9D,EAAiB8Y,EAASz2E,QAAQ29D,eAClCn1D,EAAgB/S,OAAOghF,EAAS1lE,QAAQvI,eAE5CiuE,EAASrW,gBAAgB53D,OAEzB,IAAoB,IAAAwJ,EAAA3O,EAAAozE,EAAS1lE,QAAQnU,eAAe+L,UAAQY,EAAAyI,EAAAzO,QAAAgG,EAAA/F,KAAA+F,EAAAyI,EAAAzO,OAAE,CAAzD,IAAIW,EAAOqF,EAAA1c,MACd,GAAIqX,EAAQnC,MAAQm7C,EAAA/gD,YAAYiQ,OAAhC,CACA,IAAImqD,EAAiBryD,EACjB+V,EAAiBs8C,EAAOnsD,KAAK6P,eACjC,GACEs8C,EAAO9rD,GAAG5R,EAAAjL,YAAYsvE,WACH,OAAnBjjD,IACCA,EAAevT,aAAaw2C,EAAA9gD,eAAe0K,WAE5C,GAAIyvD,EAAO9rD,GAAG5R,EAAAjL,YAAYglB,SAAU,CAClC,IAAI/lB,EAAQ0pE,EAAO5jD,sBACf6oB,QAAQ3uC,IAAU4uC,SAAS5uC,KAC7BimF,EAAM/6E,KACJ7M,EAAOa,KAAKyc,EAAc9K,aAAc,CACtC+4E,EAASz2E,QAAQc,SACb5V,EAAO0D,IAAI4sC,QAAQ3uC,GAAQ4uC,SAAS5uC,IACpC3B,EAAOyD,IAAI6sC,QAAQ3uC,KACtBswD,EAAAriC,WAAWyY,YAIlBu/C,EAAM/6E,KACJ7M,EAAOwqC,GACLxqC,EAAO4nC,UAAU,EACf5nC,EAAO8nC,WAAWujC,EAAO74D,aAAcigE,IAEzCzyE,EAAOa,KAAKyc,EAAc9K,aAAc,CACtCxS,EAAO0nC,UAAU,EAAG+qC,GACpBzyE,EAAO0nC,UAAU,EAAGuqB,EAAAriC,WAAWrpB,MAC9B0rD,EAAAriC,WAAWyY,2GAMxBroC,EAAO0tC,YAAYo3B,EAAe43B,cAAezuD,EAAS,CAAEwkC,GAC1DmV,EAAMt7E,OACFtM,EAAO4pC,MAAM,KAAMg+C,GACnB5nF,EAAO4qC,QAKf7qC,EAAAkxE,oBAAA,SAAoCsa,mBAC9B1lE,EAAU0lE,EAAS1lE,QACnB7lB,EAASurF,EAASvrF,OAClBkV,EAAY2Q,EAAQ/Q,QAAQI,UAC5Bu9D,EAAiBv9D,EAAU0+C,eAC3Bk6C,EAAiB54F,EAAUo9C,SAC3By7C,EAAQxiB,EAASxa,mBAAmB,CAAE77D,EAAWrH,EAAAmH,KAAKvR,KAAOoK,EAAAmH,KAAKG,MAClErD,EAAiB+T,EAAQ/T,eACzBwL,EAAgB/S,OAAOsb,EAAQvI,eAC/B0wF,EAAS,IAAI5mG,MACbo1C,EAAWyV,EAAAxd,SAASzyC,OAAOhC,GAE3BiuG,EAAQzxD,EAASQ,mBACnBh9C,EAAO4qC,MACP5qC,EAAOgoC,KAAK8lE,GAAgB,EAC1Br7B,GAAkBxgB,EAAAriC,WAAWppB,IACzBxG,EAAOknC,OAAO+qB,EAAAz5B,SAASsnD,OACrB9/E,EAAO0nC,UAAU,EAAG+qC,GACpBzyE,EAAO0D,IAAI,IAEb1D,EAAOknC,OAAO+qB,EAAAz5B,SAASqnD,OACrB7/E,EAAO0nC,UAAU,EAAG+qC,GACpBzyE,EAAOyD,IAAI,IAEjBwuD,EAAAriC,WAAWrpB,IACX,IAIA2nG,EAAS,MACb,IAA2B,IAAAC,EAAAh2F,EAAArG,GAAcs8F,EAAAD,EAAA91F,QAAA+1F,EAAA91F,KAAA81F,EAAAD,EAAA91F,OAAE,CAAlC,IAAAiG,EAAA9F,EAAA41F,EAAAzsG,MAAA,GAACuR,EAAAoL,EAAA,GAAIqK,EAAArK,EAAA,GACZ/T,OAAOoe,EAASzJ,KAAKozD,WACrB/nE,OAAO2I,GAAMg7F,KAEb,IAAIG,OAAS,EAGb,GAAI1lF,EAAS2lF,sBAAwBD,EAAY1lF,EAAS7O,aAAa,iBAAkB,CACvFvP,OAAO8jG,EAAUx3F,MAAQm7C,EAAA/gD,YAAYgN,oBACrC,IAAIswF,EAAY1oF,EAAQpT,SAASyL,gBAAmCmwF,EAAW,MAC3EzkE,OAAK,EACT,GAAK2kE,GAAchjB,EAASrW,gBAAgBq5B,GAIrC,CACL,IAAIC,EAAWD,EAAUl6F,UACzB9J,OACoC,GAAlCikG,EAASpkF,eAAe9d,QACxBkiG,EAASpkF,eAAe,IAAMvc,EAAAmH,KAAKlR,KACnC0qG,EAAShjE,YAAc39B,EAAAmH,KAAKG,MAC5Bq5F,EAASrkF,UAAYxB,EAASzJ,MAEhC,IAAIuvF,EAAWzuG,EAAOa,KAAK0tG,EAAU/7F,aAAc,CACjDxS,EAAO0nC,UAAU,EAAG+qC,GACpBzyE,EAAO0nC,UAAU,EAAGuqB,EAAAriC,WAAWrpB,MAC9B0rD,EAAAriC,WAAWyY,MACduB,EAAQ4S,EAASE,SACf/zB,EAAS2D,KACLmiF,EACAzuG,EAAO4pC,MAAM,KAAM,CACjB6kE,EACAzuG,EAAO8qC,iBApBflB,EAAQ4S,EAASE,SACf18C,EAAO6rC,eAuBX2Q,EAASU,mBAAmB+wD,EAAOrkE,EAAO,CAAE12B,IAC5C86F,EAAOnhG,KAAK+8B,OAGP,CAEL,IAAI5+B,EAAO,IAAI5D,MACX2X,EAAU4J,EAAS5J,QACvB,GAAIA,MACF,IAAmB,IAAAC,EAAA7G,EAAA4G,EAAQtB,UAAQwB,EAAAD,EAAA3G,QAAA4G,EAAA3G,KAAA2G,EAAAD,EAAA3G,OAAE,CAAhC,IAAIkG,EAAMU,EAAAtd,MACb,GAAI4c,EAAO1H,MAAQm7C,EAAA/gD,YAAY4N,OACjBN,EAAQjK,SAAWqU,GACLpK,EAAQW,KAClBozD,UAAW,CACvB,IAAIo8B,EAAsBnwF,EAAQmN,aAClCnhB,OAAOmkG,GAAe,GACtB1jG,EAAK6B,KAEH7M,EAAOwqC,GACLxqC,EAAO4nC,UAAU,EACf5nC,EAAOgoC,KAAK8lE,GAAgB,EAC1B9tG,EAAO0nC,UAAU,EAAG+qC,GACpBA,EAAgBi8B,IAGpB1uG,EAAOa,KAAKyc,EAAc9K,aAAc,CACtCxS,EAAO0nC,UAAU,EAAG+qC,GACpBzyE,EAAO0nC,UAAU,EAAGuqB,EAAAriC,WAAWrpB,MAC9B0rD,EAAAriC,WAAWyY,2GAQvB1f,EAAS2D,MAAMthB,EAAK6B,KAAK7M,EAAO8qC,UACjClB,EAAQ4S,EAASE,SACnB4uC,EAAAjV,QAAQr2E,EAAQgL,EAAMinD,EAAAriC,WAAWyY,OAEnCmU,EAASU,mBAAmB+wD,EAAOrkE,EAAO,CAAE12B,IAC5C86F,EAAOnhG,KAAK+8B,0GAGhB,IAA2B,IAAA+kE,EAAAx2F,EAAArG,GAAc88F,EAAAD,EAAAt2F,QAAAu2F,EAAAt2F,KAAAs2F,EAAAD,EAAAt2F,OAAE,CAAlC,IAAAE,EAAAC,EAAAo2F,EAAAjtG,MAAA,GACH2qB,GADIpZ,EAAAqF,EAAA,IAAIoQ,EAAApQ,EAAA,IACQ+T,MAChBA,GACFkwB,EAASI,UAAUoxD,EAAO96F,GAAK86F,EAAO1hF,EAAKpZ,uGAG/C86F,EAAOnhG,KACL2vC,EAASE,SACP18C,EAAO6rC,gBAGX2Q,EAASU,mBAAmB+wD,EAAOD,EAAOA,EAAO1hG,OAAS,GAAI,IAC9Di/E,EAASrW,gBAAgB53D,GACzBtd,EAAO0tC,YAAYo3B,EAAe63B,cAAeoR,EAAO,CAAEt7B,GAAkBj2B,EAASa,iBAAiB4wD,EAAO,KAa/GluG,EAAAmxE,YAAA,SAA4Bqa,WACtB1lE,EAAU0lE,EAAS1lE,QACnB7lB,EAASurF,EAASvrF,OAClB8R,EAAiB+T,EAAQ/T,eACzB0pE,EAAQ1pE,EAAek6B,KACvBA,EAAO,EAAI,EAAIwvC,EACf18B,EAAO,IAAI92C,WAAWgkC,GAC1BhiC,EAAAiJ,SAASuoE,EAAO18B,EAAM,GACtB,IAAIizC,EAAM,EACNtjE,EAAc5I,EAAQxL,wBACtBw0F,EAAepgF,EAAYnsB,UAC3Bka,EAAiBqJ,EAAQrJ,eACzBE,EAAemJ,EAAQnJ,aACvBC,EAAekJ,EAAQlJ,aACvBuxF,EAAS,MACb,IAA2B,IAAAY,EAAA32F,EAAArG,GAAci9F,EAAAD,EAAAz2F,QAAA02F,EAAAz2F,KAAAy2F,EAAAD,EAAAz2F,OAAE,CAAlC,IAAAyO,EAAAtO,EAAAu2F,EAAAptG,MAAA,GAACuR,EAAA4T,EAAA,GAAI6B,EAAA7B,EAAA,GACZvc,OAAO2I,GAAMg7F,KACb,IAAI96F,EAAuB,EAE3B,GADIuV,EAASqmF,YAAW57F,GAAK,IACzBuV,IAAa8F,GAAe9F,EAASuD,QAAQ2iF,GAAe,CAC9D,IAAIziD,EAAYzjC,EAAS6F,oBACzBpb,GAAK,EACDuV,EAASuD,QAAQ1P,KAAiBpJ,GAAK,GAC3CA,GAAS,GAA8B05F,EAAmB1gD,QACrD,GAAIzjC,EAASuD,QAAQxP,GAAe,CACzC,IAAI2P,EAAgB9hB,OAAOoe,EAAS2F,mBAAmB5R,IACvDnS,OAA+B,GAAxB8hB,EAAc/f,QACrB8G,GAAK,EACLA,GAAS,GAA8B05F,EAAmBzgF,EAAc,SAC/D1D,EAASuD,QAAQvP,KACtB0P,EAAgB9hB,OAAOoe,EAAS2F,mBAAmB3R,IACvDpS,OAA+B,GAAxB8hB,EAAc/f,QACrB8G,GAAK,EACLA,GAAS,MAA4B05F,EAAmBzgF,EAAc,IACtEjZ,GAAS,GAA8B05F,EAAmBzgF,EAAc,KAE1EriB,EAAAiJ,SAASG,EAAO0rC,EAAMizC,GAAMA,GAAO,EACnCppE,EAASiE,UAAYxZ,EACrB,IAAIkZ,EAAO3D,EAAS2D,KACpBtiB,EAAAiJ,SAASqZ,EAAOA,EAAKpZ,GAAK,EAAG4rC,EAAMizC,GAAMA,GAAO,oGAElDxnF,OAAOwnF,GAAO/lD,GACd,IAAI92B,EAAY2Q,EAAQ/Q,QAAQI,UAC5BuvB,EAAU8mD,EAAS7U,iBAAiB53B,GACxC,GAAsB,GAAlB5pC,EAAU82B,KAAW,CACvB,IAAIl5B,EAAS2xB,EAAQ3xB,OACrB9S,EAAOqtC,UAAUy3B,EAAe2L,UAAWxe,EAAAriC,WAAWppB,KAAK,EAAOxG,EAAO0D,IAAI4sC,QAAQx9B,GAASy9B,SAASz9B,UAEvG9S,EAAOqtC,UAAUy3B,EAAe2L,UAAWxe,EAAAriC,WAAWrpB,KAAK,EAAOvG,EAAOyD,IAAI6sC,QAAQ7L,EAAQ3xB,0FC7mIjG,IAAAm/C,EAAAzxD,EAAA,GAwDAyuG,EAAA,WAWE,SAAAA,IAHA5uG,KAAA+L,KAAiB,GACjB/L,KAAA6uG,WAAkB,EAmyBpB,OA1yBSD,EAAAE,UAAP,SAAiBnvG,GACf,IAAIovG,EAAa,IAAIH,EAErB,OADAG,EAAWD,UAAUnvG,GACdovG,EAAWnvC,UASpBgvC,EAAA3sG,UAAA6sG,UAAA,SAAUnvG,GACR,MAAM,IAAIuc,MAAM,oBAGlB0yF,EAAA3sG,UAAA+sG,kBAAA,SAAkBp+D,GAChB,IAAIhwC,EAAOgxD,EAAAjW,gBAAgB/K,IAAS,IAAM5wC,KAAK6uG,WAAWrjG,SAAS,IAC/Duc,EAAO6pC,EAAAlW,gBAAgB9K,GAC3B5wC,KAAKwM,KAAK,aACVxM,KAAKwM,KAAK5L,GACVZ,KAAKwM,KAAK,KACT,IAAK,IAAInM,EAAW,EAAG8V,EAAWy7C,EAAA/V,sBAAsBjL,GAAOvwC,EAAI8V,IAAK9V,EACnEA,EAAI,GAAGL,KAAKwM,KAAK,MACrBxM,KAAKwM,KAAK,KACVxM,KAAKwM,KAAKnM,EAAEmL,SAAS,KACrBxL,KAAKwM,KAAK,MACVxM,KAAKwM,KAAKyiG,EAAiBr9C,EAAA7V,qBAAqBnL,EAAMvwC,KAExDL,KAAKwM,KAAK,OACVxM,KAAKwM,KAAKyiG,EAAiBr9C,EAAA3V,sBAAsBrL,KACjD5wC,KAAKwM,KAAK,KACNolD,EAAA9a,gBAAgB/uB,IAAS6pC,EAAApiC,aAAa8uB,OACxCt+C,KAAKwM,KAAK,OAEZxM,KAAKkvG,oBAAoBnnF,GACrB6pC,EAAA9a,gBAAgB/uB,IAAS6pC,EAAApiC,aAAa8uB,OACxCt+C,KAAKwM,KAAK,WAEVxM,KAAK6uG,YAGTD,EAAA3sG,UAAAitG,oBAAA,SAAoBvoE,GAClB,IAGIwoE,EACAtqG,EACAxE,EAAU8V,EALVtD,EAAK++C,EAAA9a,gBAAgBnQ,GACrB9nB,EAAO+yC,EAAA7a,kBAAkBpQ,GAM7B,OAAQ9zB,GACN,KAAK++C,EAAApiC,aAAa8uB,MAOhB,IANqC,OAAhCz5C,EAAS+sD,EAAA9Y,aAAanS,MACzB3mC,KAAKwM,KAAK3H,GACV7E,KAAKwM,KAAK,OAEZxM,KAAKwM,KAAK,OACV2J,EAAIy7C,EAAA5Y,mBAAmBrS,GAClBtmC,EAAI,EAAGA,EAAI8V,IAAK9V,EACnBL,KAAKkvG,oBAAoBt9C,EAAA1Y,cAAcvS,EAAMtmC,IAG/C,YADAL,KAAKwM,KAAK,OAGZ,KAAKolD,EAAApiC,aAAakvB,GAiBhB,YAhBI7/B,GAAQ+yC,EAAAriC,WAAWyY,MACrBhoC,KAAKwM,KAAK,QACVxM,KAAKkvG,oBAAoBt9C,EAAAxY,eAAezS,IACxC3mC,KAAKwM,KAAK,MACVxM,KAAKkvG,oBAAoBt9C,EAAAtY,UAAU3S,KAC/BwoE,EAASv9C,EAAApY,WAAW7S,MACtB3mC,KAAKwM,KAAK,UACVxM,KAAKkvG,oBAAoBC,MAG3BnvG,KAAKkvG,oBAAoBt9C,EAAAxY,eAAezS,IACxC3mC,KAAKwM,KAAK,OACVxM,KAAKkvG,oBAAoBt9C,EAAAtY,UAAU3S,IACnC3mC,KAAKwM,KAAK,OACVxM,KAAKkvG,oBAAoBt9C,EAAApY,WAAW7S,MAIxC,KAAKirB,EAAApiC,aAAamvB,KACoB,OAA/B95C,EAAS+sD,EAAAlY,YAAY/S,MACxB3mC,KAAKwM,KAAK3H,GACV7E,KAAKwM,KAAK,OAEZxM,KAAKwM,KAAK,OACVxM,KAAKkvG,oBAAoBt9C,EAAAhY,YAAYjT,IACrC3mC,KAAKwM,KAAK,gBAEZ,KAAKolD,EAAApiC,aAAa6uB,MAahB,OAZI8wD,EAASv9C,EAAA5X,kBAAkBrT,MAC7B3mC,KAAKwM,KAAK,QACVxM,KAAKkvG,oBAAoBC,GACzBnvG,KAAKwM,KAAK,YAEyB,OAAhC3H,EAAS+sD,EAAA9X,aAAanT,KACzB3mC,KAAKwM,KAAK,UACVxM,KAAKwM,KAAK3H,GACV7E,KAAKwM,KAAK,QAEVxM,KAAKwM,KAAK,aAId,KAAKolD,EAAApiC,aAAaovB,OAClB,KAAKgT,EAAApiC,aAAasvB,KAClB,KAAK8S,EAAApiC,aAAauvB,aAChB,MAAM,IAAI7iC,MAAM,mBAElB,KAAK01C,EAAApiC,aAAa0lB,SAGhB,OAFAl1C,KAAKwM,KAAK,UACVxM,KAAKwM,KAAKolD,EAAAva,iBAAiB1Q,GAAMn7B,SAAS,KAG5C,KAAKomD,EAAApiC,aAAa0vB,SAKhB,OAJAl/C,KAAKwM,KAAK,KACVxM,KAAKwM,KAAKolD,EAAAta,iBAAiB3Q,GAAMn7B,SAAS,KAC1CxL,KAAKwM,KAAK,YACVxM,KAAKkvG,oBAAoBt9C,EAAApa,iBAAiB7Q,IAG5C,KAAKirB,EAAApiC,aAAa4lB,UAClB,KAAKwc,EAAApiC,aAAa2vB,UAChB,MAAM,IAAIjjC,MAAM,mBAElB,KAAK01C,EAAApiC,aAAa+lB,KAQhB,OAPAv1C,KAAKwM,KAAK,SACVxM,KAAKwM,KAAKyiG,EAAiBpwF,IAC3B7e,KAAKwM,KAAK,MACVxM,KAAKwM,KAAKolD,EAAAzZ,cAAcxR,GAAMn7B,SAAS,KACvCxL,KAAKwM,KAAK,OACVxM,KAAKkvG,oBAAoBt9C,EAAAxZ,WAAWzR,SACpC3mC,KAAKwM,KAAK,KAGZ,KAAKolD,EAAApiC,aAAa6vB,MAUhB,OATAr/C,KAAKwM,KAAK,UACVxM,KAAKwM,KAAKyiG,EAAiBpwF,IAC3B7e,KAAKwM,KAAK,MACVxM,KAAKwM,KAAKolD,EAAApZ,eAAe7R,GAAMn7B,SAAS,KACxCxL,KAAKwM,KAAK,OACVxM,KAAKkvG,oBAAoBt9C,EAAAlZ,YAAY/R,IACrC3mC,KAAKwM,KAAK,MACVxM,KAAKkvG,oBAAoBt9C,EAAAhZ,cAAcjS,SACvC3mC,KAAKwM,KAAK,KAGZ,KAAKolD,EAAApiC,aAAaolB,MAChB,OAAQ/1B,GACN,KAAK+yC,EAAAriC,WAAWrpB,IAEd,YADAlG,KAAKwM,KAAKolD,EAAA5a,iBAAiBrQ,GAAMn7B,SAAS,KAG5C,KAAKomD,EAAAriC,WAAWppB,IASd,YARAnG,KAAKwM,KACH4iG,cACE95F,QACEs8C,EAAA3a,oBAAoBtQ,GACpBirB,EAAA1a,qBAAqBvQ,MAM7B,KAAKirB,EAAAriC,WAAW5oB,IAEd,YADA3G,KAAKwM,KAAKolD,EAAAza,iBAAiBxQ,GAAMn7B,SAAS,KAG5C,KAAKomD,EAAAriC,WAAW3oB,IAEd,YADA5G,KAAKwM,KAAKolD,EAAAxa,iBAAiBzQ,GAAMn7B,SAAS,KAI9C,MAEF,KAAKomD,EAAApiC,aAAasmB,MAChB,OAAQ8b,EAAA5Z,WAAWrR,IACjB,KAAKirB,EAAA/+B,QAAQw6C,OAIX,OAHArtE,KAAKwM,KAAK,aACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,SACvC3mC,KAAKwM,KAAK,KAGZ,KAAKolD,EAAA/+B,QAAQy6C,OAIX,OAHAttE,KAAKwM,KAAK,aACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,SACvC3mC,KAAKwM,KAAK,KAGZ,KAAKolD,EAAA/+B,QAAQ06C,UAIX,OAHAvtE,KAAKwM,KAAK,gBACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,SACvC3mC,KAAKwM,KAAK,KAGZ,KAAKolD,EAAA/+B,QAAQy3D,OACb,KAAK14B,EAAA/+B,QAAQ03D,OAGX,OAFAvqF,KAAKwM,KAAK,UACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQ86D,OAIX,OAHA3tF,KAAKwM,KAAK,aACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,SACvC3mC,KAAKwM,KAAK,KAGZ,KAAKolD,EAAA/+B,QAAQu7D,QAIX,OAHApuF,KAAKwM,KAAK,cACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,SACvC3mC,KAAKwM,KAAK,KAGZ,KAAKolD,EAAA/+B,QAAQw7D,SAIX,OAHAruF,KAAKwM,KAAK,eACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,SACvC3mC,KAAKwM,KAAK,KAGZ,KAAKolD,EAAA/+B,QAAQ08D,SAIX,OAHAvvF,KAAKwM,KAAK,eACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,SACvC3mC,KAAKwM,KAAK,KAGZ,KAAKolD,EAAA/+B,QAAQ+7D,WAIX,OAHA5uF,KAAKwM,KAAK,iBACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,SACvC3mC,KAAKwM,KAAK,KAGZ,KAAKolD,EAAA/+B,QAAQu8D,QAIX,OAHApvF,KAAKwM,KAAK,cACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,SACvC3mC,KAAKwM,KAAK,KAGZ,KAAKolD,EAAA/+B,QAAQy3C,OACb,KAAK1Y,EAAA/+B,QAAQ03C,OAGX,OAFAvqE,KAAKwM,KAAK,UACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQg6D,OAIX,OAHA7sF,KAAKwM,KAAK,aACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,SACvC3mC,KAAKwM,KAAK,KAGZ,KAAKolD,EAAA/+B,QAAQi6D,OAIX,OAHA9sF,KAAKwM,KAAK,aACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,SACvC3mC,KAAKwM,KAAK,KAGZ,KAAKolD,EAAA/+B,QAAQk6D,UAIX,OAHA/sF,KAAKwM,KAAK,gBACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,SACvC3mC,KAAKwM,KAAK,KAGZ,KAAKolD,EAAA/+B,QAAQ+6D,OAIX,OAHA5tF,KAAKwM,KAAK,aACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,SACvC3mC,KAAKwM,KAAK,KAGZ,KAAKolD,EAAA/+B,QAAQy7D,QAIX,OAHAtuF,KAAKwM,KAAK,cACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,SACvC3mC,KAAKwM,KAAK,KAGZ,KAAKolD,EAAA/+B,QAAQ07D,SAIX,OAHAvuF,KAAKwM,KAAK,eACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,SACvC3mC,KAAKwM,KAAK,KAGZ,KAAKolD,EAAA/+B,QAAQ28D,SAIX,OAHAxvF,KAAKwM,KAAK,eACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,SACvC3mC,KAAKwM,KAAK,KAGZ,KAAKolD,EAAA/+B,QAAQg8D,WAIX,OAHA7uF,KAAKwM,KAAK,iBACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,SACvC3mC,KAAKwM,KAAK,KAGZ,KAAKolD,EAAA/+B,QAAQw8D,QAIX,OAHArvF,KAAKwM,KAAK,cACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,SACvC3mC,KAAKwM,KAAK,KAGZ,KAAKolD,EAAA/+B,QAAQsrD,UAGX,OAFAn+E,KAAKwM,KAAK,cACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQurD,UAGX,OAFAp+E,KAAKwM,KAAK,mBACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQqrD,QAKb,KAAKtsB,EAAA/+B,QAAQsqD,cAGX,OAFAn9E,KAAKwM,KAAK,cACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQqqD,cAGX,OAFAl9E,KAAKwM,KAAK,cACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQwqD,cAGX,OAFAr9E,KAAKwM,KAAK,mBACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQuqD,cAGX,OAFAp9E,KAAKwM,KAAK,mBACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQ0qD,cAGX,OAFAv9E,KAAKwM,KAAK,cACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQyqD,cAGX,OAFAt9E,KAAKwM,KAAK,cACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQ4qD,cAGX,OAFAz9E,KAAKwM,KAAK,mBACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQ2qD,cAGX,OAFAx9E,KAAKwM,KAAK,mBACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQk8D,eAIX,OAHA/uF,KAAKwM,KAAK,yBACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,SACvC3mC,KAAKwM,KAAK,KAGZ,KAAKolD,EAAA/+B,QAAQm8D,eAIX,OAHAhvF,KAAKwM,KAAK,yBACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,SACvC3mC,KAAKwM,KAAK,KAGZ,KAAKolD,EAAA/+B,QAAQ+qD,gBAGX,OAFA59E,KAAKwM,KAAK,cACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQmrD,gBAGX,OAFAh+E,KAAKwM,KAAK,cACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQgrD,gBAGX,OAFA79E,KAAKwM,KAAK,mBACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQorD,gBAGX,OAFAj+E,KAAKwM,KAAK,mBACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQ6qD,gBAGX,OAFA19E,KAAKwM,KAAK,cACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQirD,gBAGX,OAFA99E,KAAKwM,KAAK,cACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQ8qD,gBAGX,OAFA39E,KAAKwM,KAAK,mBACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQkrD,gBAGX,OAFA/9E,KAAKwM,KAAK,mBACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQmqD,WAGX,OAFAh9E,KAAKwM,KAAK,cACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQoqD,UAGX,OAFAj9E,KAAKwM,KAAK,cACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,IAGzC,KAAKirB,EAAA/+B,QAAQo8D,eAIX,OAHAjvF,KAAKwM,KAAK,yBACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,SACvC3mC,KAAKwM,KAAK,KAGZ,KAAKolD,EAAA/+B,QAAQq8D,eAIX,OAHAlvF,KAAKwM,KAAK,yBACVxM,KAAKkvG,oBAAoBt9C,EAAA3Z,cAActR,SACvC3mC,KAAKwM,KAAK,KAId,MAEF,KAAKolD,EAAApiC,aAAaymB,OAChB,OAAQ2b,EAAA/Z,YAAYlR,IAClB,KAAKirB,EAAAz5B,SAASw8C,OACd,KAAK/iB,EAAAz5B,SAASknD,OACd,KAAKztB,EAAAz5B,SAASmnD,OACd,KAAK1tB,EAAAz5B,SAASonD,OAIZ,OAHAv/E,KAAKkvG,oBAAoBt9C,EAAA9Z,cAAcnR,IACvC3mC,KAAKwM,KAAK,YACVxM,KAAKkvG,oBAAoBt9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAASqnD,OACd,KAAK5tB,EAAAz5B,SAASsnD,OACd,KAAK7tB,EAAAz5B,SAASunD,OACd,KAAK9tB,EAAAz5B,SAASwnD,OAIZ,OAHA3/E,KAAKkvG,oBAAoBt9C,EAAA9Z,cAAcnR,IACvC3mC,KAAKwM,KAAK,YACVxM,KAAKkvG,oBAAoBt9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAAS00C,OACd,KAAKjb,EAAAz5B,SAASynD,OACd,KAAKhuB,EAAAz5B,SAAS0nD,OACd,KAAKjuB,EAAAz5B,SAAS2nD,OAIZ,OAHA9/E,KAAKkvG,oBAAoBt9C,EAAA9Z,cAAcnR,IACvC3mC,KAAKwM,KAAK,YACVxM,KAAKkvG,oBAAoBt9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAAS8nD,OACd,KAAKruB,EAAAz5B,SAAS+nD,OACd,KAAKtuB,EAAAz5B,SAASioD,OACd,KAAKxuB,EAAAz5B,SAASkoD,OAIZ,OAHArgF,KAAKkvG,oBAAoBt9C,EAAA9Z,cAAcnR,IACvC3mC,KAAKwM,KAAK,YACVxM,KAAKkvG,oBAAoBt9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAAS+0C,OAMZ,OALAltE,KAAKwM,KAAK,eACVxM,KAAKkvG,oBAAoBt9C,EAAA9Z,cAAcnR,IACvC3mC,KAAKwM,KAAK,YACVxM,KAAKkvG,oBAAoBt9C,EAAA7Z,eAAepR,SACxC3mC,KAAKwM,KAAK,KAGZ,KAAKolD,EAAAz5B,SAASg1C,OACd,KAAKvb,EAAAz5B,SAASmoD,OAIZ,OAHAtgF,KAAKkvG,oBAAoBt9C,EAAA9Z,cAAcnR,IACvC3mC,KAAKwM,KAAK,YACVxM,KAAKkvG,oBAAoBt9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAASi1C,OAMZ,OALAptE,KAAKwM,KAAK,eACVxM,KAAKkvG,oBAAoBt9C,EAAA9Z,cAAcnR,IACvC3mC,KAAKwM,KAAK,YACVxM,KAAKkvG,oBAAoBt9C,EAAA7Z,eAAepR,SACxC3mC,KAAKwM,KAAK,KAGZ,KAAKolD,EAAAz5B,SAAS20C,OACd,KAAKlb,EAAAz5B,SAAS0oD,OAIZ,OAHA7gF,KAAKkvG,oBAAoBt9C,EAAA9Z,cAAcnR,IACvC3mC,KAAKwM,KAAK,YACVxM,KAAKkvG,oBAAoBt9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAAS2oD,MACd,KAAKlvB,EAAAz5B,SAAS4oD,MAIZ,OAHA/gF,KAAKkvG,oBAAoBt9C,EAAA9Z,cAAcnR,IACvC3mC,KAAKwM,KAAK,YACVxM,KAAKkvG,oBAAoBt9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAAS6oD,OACd,KAAKpvB,EAAAz5B,SAAS8oD,OAIZ,OAHAjhF,KAAKkvG,oBAAoBt9C,EAAA9Z,cAAcnR,IACvC3mC,KAAKwM,KAAK,YACVxM,KAAKkvG,oBAAoBt9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAAS40C,OACd,KAAKnb,EAAAz5B,SAASsoD,OAIZ,OAHAzgF,KAAKkvG,oBAAoBt9C,EAAA9Z,cAAcnR,IACvC3mC,KAAKwM,KAAK,aACVxM,KAAKkvG,oBAAoBt9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAAS80C,OACd,KAAKrb,EAAAz5B,SAASyoD,OAIZ,OAHA5gF,KAAKkvG,oBAAoBt9C,EAAA9Z,cAAcnR,IACvC3mC,KAAKwM,KAAK,cACVxM,KAAKkvG,oBAAoBt9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAAS60C,OACd,KAAKpb,EAAAz5B,SAASwoD,OAIZ,OAHA3gF,KAAKkvG,oBAAoBt9C,EAAA9Z,cAAcnR,IACvC3mC,KAAKwM,KAAK,aACVxM,KAAKkvG,oBAAoBt9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAAS80D,QAMZ,OALAjtF,KAAKwM,KAAK,cACVxM,KAAKkvG,oBAAoBt9C,EAAA9Z,cAAcnR,IACvC3mC,KAAKwM,KAAK,MACVxM,KAAKkvG,oBAAoBt9C,EAAA7Z,eAAepR,SACxC3mC,KAAKwM,KAAK,KAGZ,KAAKolD,EAAAz5B,SAASi1D,QAMZ,OALAptF,KAAKwM,KAAK,cACVxM,KAAKkvG,oBAAoBt9C,EAAA9Z,cAAcnR,IACvC3mC,KAAKwM,KAAK,MACVxM,KAAKkvG,oBAAoBt9C,EAAA7Z,eAAepR,SACxC3mC,KAAKwM,KAAK,KAGZ,KAAKolD,EAAAz5B,SAASsyC,MACd,KAAK7Y,EAAAz5B,SAASuyC,MACd,KAAK9Y,EAAAz5B,SAAS8yC,MACd,KAAKrZ,EAAAz5B,SAAS+yC,MAIZ,OAHAlrE,KAAKkvG,oBAAoBt9C,EAAA9Z,cAAcnR,IACvC3mC,KAAKwM,KAAK,aACVxM,KAAKkvG,oBAAoBt9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAASwyC,MACd,KAAK/Y,EAAAz5B,SAASyyC,MACd,KAAKhZ,EAAAz5B,SAASgzC,MACd,KAAKvZ,EAAAz5B,SAASizC,MAIZ,OAHAprE,KAAKkvG,oBAAoBt9C,EAAA9Z,cAAcnR,IACvC3mC,KAAKwM,KAAK,aACVxM,KAAKkvG,oBAAoBt9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAASkzC,MACd,KAAKzZ,EAAAz5B,SAASozC,MACd,KAAK3Z,EAAAz5B,SAASszC,MACd,KAAK7Z,EAAAz5B,SAASuzC,MAIZ,OAHA1rE,KAAKkvG,oBAAoBt9C,EAAA9Z,cAAcnR,IACvC3mC,KAAKwM,KAAK,YACVxM,KAAKkvG,oBAAoBt9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAASmzC,MAKZ,OAJAtrE,KAAKwM,KAAK,SACVxM,KAAKkvG,oBAAoBt9C,EAAA9Z,cAAcnR,IACvC3mC,KAAKwM,KAAK,iBACVxM,KAAKkvG,oBAAoBt9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAASwzC,MACd,KAAK/Z,EAAAz5B,SAAS0zC,MACd,KAAKja,EAAAz5B,SAAS4zC,MACd,KAAKna,EAAAz5B,SAAS6zC,MAIZ,OAHAhsE,KAAKkvG,oBAAoBt9C,EAAA9Z,cAAcnR,IACvC3mC,KAAKwM,KAAK,aACVxM,KAAKkvG,oBAAoBt9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAASyzC,MAKZ,OAJA5rE,KAAKwM,KAAK,SACVxM,KAAKkvG,oBAAoBt9C,EAAA9Z,cAAcnR,IACvC3mC,KAAKwM,KAAK,kBACVxM,KAAKkvG,oBAAoBt9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAAS8zC,MACd,KAAKra,EAAAz5B,SAASg0C,MACd,KAAKva,EAAAz5B,SAASk0C,MACd,KAAKza,EAAAz5B,SAASm0C,MAIZ,OAHAtsE,KAAKkvG,oBAAoBt9C,EAAA9Z,cAAcnR,IACvC3mC,KAAKwM,KAAK,YACVxM,KAAKkvG,oBAAoBt9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAAS+zC,MAKZ,OAJAlsE,KAAKwM,KAAK,SACVxM,KAAKkvG,oBAAoBt9C,EAAA9Z,cAAcnR,IACvC3mC,KAAKwM,KAAK,iBACVxM,KAAKkvG,oBAAoBt9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAASo0C,MACd,KAAK3a,EAAAz5B,SAASs0C,MACd,KAAK7a,EAAAz5B,SAASw0C,MACd,KAAK/a,EAAAz5B,SAASy0C,MAIZ,OAHA5sE,KAAKkvG,oBAAoBt9C,EAAA9Z,cAAcnR,IACvC3mC,KAAKwM,KAAK,aACVxM,KAAKkvG,oBAAoBt9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAASq0C,MAKZ,OAJAxsE,KAAKwM,KAAK,SACVxM,KAAKkvG,oBAAoBt9C,EAAA9Z,cAAcnR,IACvC3mC,KAAKwM,KAAK,kBACVxM,KAAKkvG,oBAAoBt9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAASgoD,OAKZ,OAJAngF,KAAKwM,KAAK,SACVxM,KAAKkvG,oBAAoBt9C,EAAA9Z,cAAcnR,IACvC3mC,KAAKwM,KAAK,iBACVxM,KAAKkvG,oBAAoBt9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAASooD,OAKZ,OAJAvgF,KAAKwM,KAAK,SACVxM,KAAKkvG,oBAAoBt9C,EAAA9Z,cAAcnR,IACvC3mC,KAAKwM,KAAK,iBACVxM,KAAKkvG,oBAAoBt9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAAS+0D,QAMZ,OALAltF,KAAKwM,KAAK,cACVxM,KAAKkvG,oBAAoBt9C,EAAA9Z,cAAcnR,IACvC3mC,KAAKwM,KAAK,MACVxM,KAAKkvG,oBAAoBt9C,EAAA7Z,eAAepR,SACxC3mC,KAAKwM,KAAK,KAGZ,KAAKolD,EAAAz5B,SAASk1D,QAMZ,OALArtF,KAAKwM,KAAK,cACVxM,KAAKkvG,oBAAoBt9C,EAAA9Z,cAAcnR,IACvC3mC,KAAKwM,KAAK,MACVxM,KAAKkvG,oBAAoBt9C,EAAA7Z,eAAepR,SACxC3mC,KAAKwM,KAAK,KAGZ,KAAKolD,EAAAz5B,SAASqzC,MAKZ,OAJAxrE,KAAKwM,KAAK,SACVxM,KAAKkvG,oBAAoBt9C,EAAA9Z,cAAcnR,IACvC3mC,KAAKwM,KAAK,iBACVxM,KAAKkvG,oBAAoBt9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAAS2zC,MAKZ,OAJA9rE,KAAKwM,KAAK,SACVxM,KAAKkvG,oBAAoBt9C,EAAA9Z,cAAcnR,IACvC3mC,KAAKwM,KAAK,kBACVxM,KAAKkvG,oBAAoBt9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAASi0C,MAKZ,OAJApsE,KAAKwM,KAAK,SACVxM,KAAKkvG,oBAAoBt9C,EAAA9Z,cAAcnR,IACvC3mC,KAAKwM,KAAK,iBACVxM,KAAKkvG,oBAAoBt9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAASu0C,MAKZ,OAJA1sE,KAAKwM,KAAK,SACVxM,KAAKkvG,oBAAoBt9C,EAAA9Z,cAAcnR,IACvC3mC,KAAKwM,KAAK,kBACVxM,KAAKkvG,oBAAoBt9C,EAAA7Z,eAAepR,IAG1C,KAAKirB,EAAAz5B,SAASs2D,YAMZ,OALAzuF,KAAKwM,KAAK,kBACVxM,KAAKkvG,oBAAoBt9C,EAAA9Z,cAAcnR,IACvC3mC,KAAKwM,KAAK,MACVxM,KAAKkvG,oBAAoBt9C,EAAA7Z,eAAepR,SACxC3mC,KAAKwM,KAAK,KAGZ,KAAKolD,EAAAz5B,SAAS81D,OAMZ,OALAjuF,KAAKwM,KAAK,aACVxM,KAAKkvG,oBAAoBt9C,EAAA9Z,cAAcnR,IACvC3mC,KAAKwM,KAAK,MACVxM,KAAKkvG,oBAAoBt9C,EAAA7Z,eAAepR,SACxC3mC,KAAKwM,KAAK,KAGZ,KAAKolD,EAAAz5B,SAAS01D,OAMZ,OALA7tF,KAAKwM,KAAK,aACVxM,KAAKkvG,oBAAoBt9C,EAAA9Z,cAAcnR,IACvC3mC,KAAKwM,KAAK,MACVxM,KAAKkvG,oBAAoBt9C,EAAA7Z,eAAepR,SACxC3mC,KAAKwM,KAAK,KAGZ,KAAKolD,EAAAz5B,SAASu2D,YAMZ,OALA1uF,KAAKwM,KAAK,kBACVxM,KAAKkvG,oBAAoBt9C,EAAA9Z,cAAcnR,IACvC3mC,KAAKwM,KAAK,MACVxM,KAAKkvG,oBAAoBt9C,EAAA7Z,eAAepR,SACxC3mC,KAAKwM,KAAK,KAGZ,KAAKolD,EAAAz5B,SAAS+1D,OAMZ,OALAluF,KAAKwM,KAAK,aACVxM,KAAKkvG,oBAAoBt9C,EAAA9Z,cAAcnR,IACvC3mC,KAAKwM,KAAK,MACVxM,KAAKkvG,oBAAoBt9C,EAAA7Z,eAAepR,SACxC3mC,KAAKwM,KAAK,KAGZ,KAAKolD,EAAAz5B,SAAS21D,OAMZ,OALA9tF,KAAKwM,KAAK,aACVxM,KAAKkvG,oBAAoBt9C,EAAA9Z,cAAcnR,IACvC3mC,KAAKwM,KAAK,MACVxM,KAAKkvG,oBAAoBt9C,EAAA7Z,eAAepR,SACxC3mC,KAAKwM,KAAK,KAId,OAEF,KAAKolD,EAAApiC,aAAauyB,OAUhB,OATA/hD,KAAKwM,KAAK,WACVxM,KAAKwM,KAAKyiG,EAAiBpwF,IAC3B7e,KAAKwM,KAAK,MACVxM,KAAKkvG,oBAAoBt9C,EAAA1X,cAAcvT,IACvC3mC,KAAKwM,KAAK,MACVxM,KAAKkvG,oBAAoBt9C,EAAAxX,cAAczT,IACvC3mC,KAAKwM,KAAK,MACVxM,KAAKkvG,oBAAoBt9C,EAAAtX,mBAAmB3T,SAC5C3mC,KAAKwM,KAAK,KAGZ,KAAKolD,EAAApiC,aAAawyB,KAGhB,OAFAhiD,KAAKkvG,oBAAoBt9C,EAAApX,aAAa7T,SACtC3mC,KAAKwM,KAAK,OAGZ,KAAKolD,EAAApiC,aAAa4uB,OAQhB,aAPI+wD,EAASv9C,EAAAlX,eAAe/T,KAC1B3mC,KAAKwM,KAAK,WACVxM,KAAKkvG,oBAAoBC,GACzBnvG,KAAKwM,KAAK,QAEVxM,KAAKwM,KAAK,cAId,KAAKolD,EAAApiC,aAAayyB,KAChB,OAAQ2P,EAAA1W,UAAUvU,IAChB,KAAKirB,EAAAhwB,OAAOkvD,WAEV,YADA9wF,KAAKwM,KAAK,iBAGZ,KAAKolD,EAAAhwB,OAAOovD,WAIV,OAHAhxF,KAAKwM,KAAK,gBACVxM,KAAKkvG,oBAAoBt9C,EAAAtW,eAAe3U,EAAM,SAC9C3mC,KAAKwM,KAAK,KAId,MAEF,KAAKolD,EAAApiC,aAAa0yB,IAEhB,YADAliD,KAAKwM,KAAK,OAGZ,KAAKolD,EAAApiC,aAAa2uB,YAEhB,YADAn+C,KAAKwM,KAAK,iBAGZ,KAAKolD,EAAApiC,aAAaiwB,cAClB,KAAKmS,EAAApiC,aAAa8vB,UAClB,KAAKsS,EAAApiC,aAAaqwB,WAClB,KAAK+R,EAAApiC,aAAaywB,cAEpB,MAAM,IAAI/jC,MAAM,oBAGV0yF,EAAA3sG,UAAAuK,KAAR,SAAaT,GAEX/L,KAAK+L,KAAKS,KAAKT,IAGjB6iG,EAAA3sG,UAAA29D,OAAA,WACE,IAAInsB,EAAMzzC,KAAK+L,KAAKU,KAAK,IAEzB,OADAzM,KAAK+L,KAAO,GACL0nC,GAEXm7D,EA5yBA,GA8yBA,SAASK,EAAiBpwF,GACxB,OAAQA,GACN,KAAK+yC,EAAAriC,WAAWyY,KAAM,MAAO,OAC7B,KAAK4pB,EAAAriC,WAAWrpB,IAAK,MAAO,MAC5B,KAAK0rD,EAAAriC,WAAWppB,IAAK,MAAO,MAC5B,KAAKyrD,EAAAriC,WAAW5oB,IAAK,MAAO,MAC5B,KAAKirD,EAAAriC,WAAW3oB,IAAK,MAAO,MAC5B,KAAKgrD,EAAAriC,WAAW1oB,KAAM,MAAO,OAC7B,KAAK+qD,EAAAriC,WAAW4uB,YAAa,MAAM,IAAIjiC,MAAM,oBAC7C,KAAK01C,EAAAriC,WAAWy7D,KAAM,MAAM,IAAI9uE,MAAM,aACtC,QAAS,MAAM,IAAIA,MAAM,oBAxzBhBxc,EAAAkvG,u5BCxDZ,IAAAthG,EAAAnN,EAAA,GAIDwxD,EAAAxxD,EAAA,GAyBAwJ,EAAAxJ,EAAA,GAKAkvG,EAAA,WAUE,SAAAA,EAAY7pF,EAAkB8pF,QAAA,IAAAA,OAAA,GAH9BtvG,KAAAuvG,KAA4B,IAAIroG,IAI9BlH,KAAKwlB,QAAUA,EACfxlB,KAAKsvG,eA6GT,OAzGED,EAAAptG,UAAAutG,KAAA,uBACE,IAAiB,IAAA/oF,EAAA3O,EAAA9X,KAAKwlB,QAAQpU,YAAYgM,UAAQY,EAAAyI,EAAAzO,QAAAgG,EAAA/F,KAAA+F,EAAAyI,EAAAzO,OAAE,CAA/C,IAAI5B,EAAI4H,EAAA1c,MACP8U,EAAK3K,OAAO6R,SAAStd,KAAKyvG,UAAUr5F,uGAK5Ci5F,EAAAptG,UAAAwtG,UAAA,SAAUr5F,eACJsI,EAAUtI,EAAK1W,QACnB,GAAIgf,MACF,IAA2B,IAAAwyD,EAAAp5D,EAAA4G,GAAOyyD,EAAAD,EAAAl5D,QAAAm5D,EAAAl5D,KAAAk5D,EAAAD,EAAAl5D,OAAA,CAAzB,IAAAgG,EAAA7F,EAAAg5D,EAAA7vE,MAAA,GAACV,EAAAod,EAAA,GAAME,EAAAF,EAAA,GAAoBhe,KAAK0vG,aAAa9uG,EAAMsd,qGAE9D,IAAI9F,EAAchC,EAAKgC,YACvB,GAAIA,MACF,IAAuB,IAAA06D,EAAAh7D,EAAAM,GAAW26D,EAAAD,EAAA96D,QAAA+6D,EAAA96D,KAAA86D,EAAAD,EAAA96D,OAAA,CAA7B,IAAIK,EAAU06D,EAAAzxE,MAAiBtB,KAAKyvG,UAAUp3F,uGAKvDg3F,EAAAptG,UAAAytG,aAAA,SAAa9uG,EAAc+X,GACzB,IAAIA,EAAQuG,GAAG5R,EAAAjL,YAAYm0D,UAAax2D,KAAKsvG,eAA7C,CACA,IAAIC,EAAOvvG,KAAKuvG,KAChB,GAAIA,EAAKh7F,IAAIoE,GACX3Y,KAAK2vG,WAAW/uG,EAAM+X,EAAiB42F,EAAKruG,IAAIyX,SAIlD,OADA42F,EAAKr9F,IAAIyG,EAAS/X,GACV+X,EAAQnC,MACd,KAAKm7C,EAAA/gD,YAAYiQ,OACXlI,EAAQuG,GAAG5R,EAAAjL,YAAYsvE,WAAW3xE,KAAK4vG,YAAYhvG,EAAc+X,GACrE,MAEF,KAAKg5C,EAAA/gD,YAAYmW,KACXpO,EAAQuG,GAAG5R,EAAAjL,YAAYsvE,WAAW3xE,KAAK6vG,UAAUjvG,EAAY+X,GACjE,MAEF,KAAKg5C,EAAA/gD,YAAYgN,mBACf5d,KAAK8vG,uBAAuBlvG,EAAyB+X,GACrD,MAEF,KAAKg5C,EAAA/gD,YAAYuJ,gBACfna,KAAK+vG,oBAAoBnvG,EAAsB+X,GAC/C,MAEF,KAAKg5C,EAAA/gD,YAAY4N,MACH7F,EAASuG,GAAG5R,EAAAjL,YAAYsvE,WAAW3xE,KAAKgwG,WAAWpvG,EAAa+X,GAC5E,MAEF,KAAKg5C,EAAA/gD,YAAYuN,mBACfne,KAAKiwG,uBAAuBrvG,EAAyB+X,GACrD,MAEF,KAAKg5C,EAAA/gD,YAAY0N,SACf,IAAI4xF,EAAiBv3F,EACjB9X,EAASqvG,EAAK1kF,eACd3qB,GAAQb,KAAKmwG,cAAcvvG,EAAMC,GACrC,IAAI0wE,EAAS2+B,EAAKzkF,eACd8lD,GAAQvxE,KAAKmwG,cAAcvvG,EAAM2wE,GACrC,MAEF,KAAK5f,EAAA/gD,YAAYkW,WA+bvB,SAASspF,EAAkBz3F,mBACzB,IAAI+F,EAAU/F,EAAQ+F,QACtB,GAAIA,MACF,IAAmB,IAAAT,EAAAnG,EAAA4G,EAAQtB,UAAQuB,EAAAV,EAAAjG,QAAA2G,EAAA1G,KAAA0G,EAAAV,EAAAjG,OAAE,CAAhC,IAAIkG,EAAMS,EAAArd,MACb,OAAQ4c,EAAO1H,MACb,KAAKm7C,EAAA/gD,YAAYgN,mBACf,IAAIiK,EAAgC3J,EAAQ2J,UAC5C,GAAIA,MACF,IAAqB,IAAAjJ,EAAA9G,EAAA+P,EAAUzK,UAAQlF,EAAA0G,EAAA5G,QAAAE,EAAAD,KAAAC,EAAA0G,EAAA5G,OAAE,CAApC,IAAIsQ,EAAQpQ,EAAA5W,MACf,GAAIgnB,EAASpJ,GAAG5R,EAAAjL,YAAYsvE,UAAW,OAAO,oGAGlD,MAEF,KAAKhgB,EAAA/gD,YAAYuJ,gBACf,IAAI0N,EAA6B3J,EAAQ2J,UACzC,GAAIA,MACF,IAAqB,IAAA3O,EAAApB,EAAA+P,EAAUzK,UAAQ/D,EAAAH,EAAAlB,QAAAqB,EAAApB,KAAAoB,EAAAH,EAAAlB,OAAE,CAApC,IAAIsQ,EAAQjP,EAAA/X,MACf,GAAIgnB,EAASpJ,GAAG5R,EAAAjL,YAAYsvE,UAAW,OAAO,oGAGlD,MAEF,QACE,GAAIzzD,EAAOgB,GAAG5R,EAAAjL,YAAYsvE,WAAay+B,EAAkBlyF,GAAS,OAAO,qGAMjF,OAAO,GA5dGkyF,CAAkBz3F,IAAU3Y,KAAKqwG,eAAezvG,EAAM+X,GAC1D,MAEF,KAAKg5C,EAAA/gD,YAAY+V,eAAgB,MACjC,QAASzc,QAAO,MAIZmlG,EAAAptG,UAAA6tG,uBAAR,SAA+BlvG,EAAc+X,WACvCkP,EAAYlP,EAAQkP,UACxB,GAAIA,MACF,IAAqB,IAAApB,EAAA3O,EAAA+P,EAAUzK,UAAQY,EAAAyI,EAAAzO,QAAAgG,EAAA/F,KAAA+F,EAAAyI,EAAAzO,OAAE,CAApC,IAAIsQ,EAAQtK,EAAA1c,MACXgnB,EAASpJ,GAAG5R,EAAAjL,YAAYsvE,WAAW3xE,KAAKmwG,cAAcvvG,EAAgB0nB,uGAKxE+mF,EAAAptG,UAAA8tG,oBAAR,SAA4BnvG,EAAc+X,WACpCkP,EAAYlP,EAAQkP,UACxB,GAAIA,MACF,IAAqB,IAAApB,EAAA3O,EAAA+P,EAAUzK,UAAQY,EAAAyI,EAAAzO,QAAAgG,EAAA/F,KAAA+F,EAAAyI,EAAAzO,OAAE,CAApC,IAAIsQ,EAAQtK,EAAA1c,MACXgnB,EAASpJ,GAAG5R,EAAAjL,YAAYsvE,WAAW3xE,KAAKswG,WAAW1vG,EAAa0nB,uGAKlE+mF,EAAAptG,UAAAguG,uBAAR,SAA+BrvG,EAAc+X,GAO3CzO,QAAO,IAWXmlG,EAzHA,GA4HAkB,EAAA,SAAAx/F,GAWE,SAAAw/F,EAAY/qF,EAAkB8pF,QAAA,IAAAA,OAAA,GAA9B,IAAAt+F,EACED,EAAAvQ,KAAAR,KAAMwlB,EAAS8pF,IAAetvG,YALxBgR,EAAA1E,GAAe,GACf0E,EAAAw/F,YAAmB,IAuK7B,OA/KgCl+F,EAAAi+F,EAAAx/F,GAGvBw/F,EAAAE,MAAP,SAAajrF,GACX,OAAO,IAAI+qF,EAAW/qF,GAASirF,SAWjCF,EAAAtuG,UAAA2tG,YAAA,SAAYhvG,EAAc+X,GACxB,IAAIrM,EAAKtM,KAAKsM,GACVkvE,EAAU7iE,EAAQuG,GAAG5R,EAAAjL,YAAYglB,SAMrC,GALA1d,EAAA+mG,OAAOpkG,EAAItM,KAAKwwG,aACZh1B,GAASlvE,EAAGE,KAAK,UACrBF,EAAGE,KAAKxM,KAAK2wG,aAAah4F,EAAQkG,OAClCvS,EAAGE,KAAK,KACRF,EAAGE,KAAK5L,GACJ46E,EACF,OAAQ7iE,EAAQuO,mBACd,OACE5a,EAAGE,KAAK,OACRF,EAAGE,KAAK4iG,cAAcz2F,EAAQyO,uBAC9B,MAEF,OACE9a,EAAGE,KAAK,OACRF,EAAGE,KAAKmM,EAAQ2O,mBAAmB9b,YACnC,MAEF,QAAStB,QAAO,GAGpBoC,EAAGE,KAAK,QAGV+jG,EAAAtuG,UAAA4tG,UAAA,SAAUjvG,EAAc+X,eAClBrM,EAAKtM,KAAKsM,GACd3C,EAAA+mG,OAAOpkG,EAAItM,KAAKwwG,eAChBlkG,EAAGE,KAAK,cACRF,EAAGE,KAAK5L,GACR0L,EAAGE,KAAK,QACR,IAAIkS,EAAU/F,EAAQ+F,QACtB,GAAIA,EAAS,KACX,IAA2B,IAAAkyF,EAAA94F,EAAA4G,GAAOmyF,EAAAD,EAAA54F,QAAA64F,EAAA54F,KAAA44F,EAAAD,EAAA54F,OAAE,CAA3B,IAAAgG,EAAA7F,EAAA04F,EAAAvvG,MAAA,GAACwvG,EAAA9yF,EAAA,GACR,IADcE,EAAAF,EAAA,IACHxH,MAAQm7C,EAAA/gD,YAAY2W,UAAW,CACxC,IAAIi0D,EAAsBt9D,EAAQgB,GAAG5R,EAAAjL,YAAYglB,SACjD1d,EAAA+mG,OAAOpkG,EAAItM,KAAKwwG,aACZh1B,EAASlvE,EAAGE,KAAK,UAChBF,EAAGE,KAAK,aACbF,EAAGE,KAAK,kBACRF,EAAGE,KAAKskG,GACJt1B,IACFlvE,EAAGE,KAAK,OACRtC,OAA4C,GAAzBgU,EAAQgJ,mBAC3B5a,EAAGE,KAAKyjC,QAAoB/xB,EAAQkJ,sBAAsB5b,SAAS,MAErEc,EAAGE,KAAK,8GAGZ,IAAmB,IAAAyR,EAAAnG,EAAA4G,EAAQtB,UAAQuB,EAAAV,EAAAjG,QAAA2G,EAAA1G,KAAA0G,EAAAV,EAAAjG,OAAE,CAAhC,IAAIkG,KAAMS,EAAArd,OACFkV,MAAQm7C,EAAA/gD,YAAY2W,WAAWvnB,KAAK0vG,aAAaxxF,EAAOtd,KAAMsd,sGAG7EvU,EAAA+mG,OAAOpkG,IAAMtM,KAAKwwG,aAClBlkG,EAAGE,KAAK,QAGV+jG,EAAAtuG,UAAAkuG,cAAA,SAAcvvG,EAAc+X,WACtBrM,EAAKtM,KAAKsM,GACV0H,EAAY2E,EAAQ3E,UACxBrK,EAAA+mG,OAAOpkG,EAAItM,KAAKwwG,aAChBlkG,EAAGE,KAAKxM,KAAK2wG,aAAa38F,EAAUm3B,aACpC7+B,EAAGE,KAAK,KACRF,EAAGE,KAAK5L,GACR0L,EAAGE,KAAK,KAIR,IAHA,IAAIq3C,EAAa7vC,EAAU+V,eACvB0qC,EAAgB5Q,EAAW53C,OAEtB5L,EAAI,EAAGA,EAAIo0D,IAAiBp0D,EAC/BA,GAAGiM,EAAGE,KAAK,MAEfF,EAAGE,KAAKxM,KAAK2wG,aAAa9sD,EAAWxjD,KACrCiM,EAAGE,KAAK,KACRF,EAAGE,KAAKwH,EAAUkW,iBAAiB7pB,IAErCiM,EAAGE,KAAK,QACR,IAAIkS,EAAU/F,EAAQ+F,QACtB,GAAIA,GAAWA,EAAQitB,KAAM,CAC3BhiC,EAAA+mG,OAAOpkG,EAAItM,KAAKwwG,aAChBlkG,EAAGE,KAAK,cACRF,EAAGE,KAAKmM,EAAQ/X,MAChB0L,EAAGE,KAAK,YACR,IAAmB,IAAAia,EAAA3O,EAAA4G,EAAQtB,UAAQY,EAAAyI,EAAAzO,QAAAgG,EAAA/F,KAAA+F,EAAAyI,EAAAzO,OAAA,CAA9B,IAAIkG,EAAMF,EAAA1c,MAAsBtB,KAAK0vG,aAAaxxF,EAAOtd,KAAMsd,qGACpEvU,EAAA+mG,OAAOpkG,IAAMtM,KAAKwwG,aAClBlkG,EAAGE,KAAK,SAIZ+jG,EAAAtuG,UAAAquG,WAAA,SAAW1vG,EAAc+X,GACvB,IAAIrM,EAAKtM,KAAKsM,GACd3C,EAAA+mG,OAAOpkG,EAAItM,KAAKwwG,eAChBlkG,EAAGE,KAAK,cACRF,EAAGE,KAAK5L,GACR0L,EAAGE,KAAK,QAER7C,EAAA+mG,OAAOpkG,IAAMtM,KAAKwwG,aAClBlkG,EAAGE,KAAK,QAGV+jG,EAAAtuG,UAAA8uG,eAAA,SAAenwG,EAAc+X,GAC3B3Y,KAAKswG,WAAW1vG,EAAM+X,IAGxB43F,EAAAtuG,UAAA+tG,WAAA,SAAWpvG,EAAc+X,KAIzB43F,EAAAtuG,UAAAouG,eAAA,SAAezvG,EAAc+X,WACvBrM,EAAKtM,KAAKsM,GACd3C,EAAA+mG,OAAOpkG,EAAItM,KAAKwwG,eAChBlkG,EAAGE,KAAK,cACRF,EAAGE,KAAK5L,GACR0L,EAAGE,KAAK,QACR,IAAIkS,EAAU/F,EAAQ+F,QACtB,GAAIA,MACF,IAAmB,IAAA+H,EAAA3O,EAAA4G,EAAQtB,UAAQY,EAAAyI,EAAAzO,QAAAgG,EAAA/F,KAAA+F,EAAAyI,EAAAzO,OAAA,CAA9B,IAAIkG,EAAMF,EAAA1c,MAAsBtB,KAAK0vG,aAAaxxF,EAAOtd,KAAMsd,qGAEtEvU,EAAA+mG,OAAOpkG,IAAMtM,KAAKwwG,aAClBlkG,EAAGE,KAAK,QAGV+jG,EAAAtuG,UAAA0tG,WAAA,SAAW/uG,EAAc+X,EAAkB2sE,KAI3CirB,EAAAtuG,UAAA0uG,aAAA,SAAa9xF,GACX,OAAQA,EAAKrI,MACX,OAAkB,MAAO,OACzB,OAAmB,MAAO,QAC1B,OAAmB,MAAO,OAC1B,OAAmB,MAAO,YAC1B,OAAqB,OAAOxW,KAAKwlB,QAAQ/Q,QAAQc,SAAW,YAAc,OAC1E,OAAkB,MAAO,QACzB,OAAmB,MAAO,iBAC1B,OAAmB,MAAO,gBAE1B,OAAmB,MAAO,qBAC1B,OAAqB,OAAOvV,KAAKwlB,QAAQ/Q,QAAQc,SAAW,qBAAuB,gBAEnF,QAAoB,MAAO,UAC3B,QAAmB,MAAO,qBAC1B,QAAmB,MAAO,sBAC1B,QAAoB,MAAO,OAC3B,QAEE,OADArL,QAAO,GACA,KAKbqmG,EAAAtuG,UAAAwuG,MAAA,WACE,IAAInkG,EAAKtM,KAAKsM,GAMd,OALAA,EAAGE,KAAK,4BACNxM,KAAKwwG,YACPxwG,KAAKwvG,SACHxvG,KAAKwwG,YACPlkG,EAAGE,KAAK,OACDF,EAAGG,KAAK,KAEnB8jG,EA/KA,CAAgClB,GAAnB3vG,EAAA6wG,aAkLb,IAAAS,EAAA,SAAAjgG,GAYE,SAAAigG,EAAYxrF,EAAkB8pF,QAAA,IAAAA,OAAA,GAA9B,IAAAt+F,EACED,EAAAvQ,KAAAR,KAAMwlB,EAAS8pF,IAAetvG,YANxBgR,EAAA1E,GAAe,GACf0E,EAAAw/F,YAAmB,EACnBx/F,EAAAigG,QAAuB,IAAIhqG,MA+MrC,OAxNgCqL,EAAA0+F,EAAAjgG,GAGvBigG,EAAAP,MAAP,SAAajrF,GACX,OAAO,IAAIwrF,EAAWxrF,GAASirF,SAYjCO,EAAA/uG,UAAA2tG,YAAA,SAAYhvG,EAAc+X,GACxB,IAAIrM,EAAKtM,KAAKsM,GACVkvE,EAAU7iE,EAAQuG,GAAG5R,EAAAjL,YAAYglB,SACrC1d,EAAA+mG,OAAOpkG,EAAItM,KAAKwwG,aACZ73F,EAAQuG,GAAG5R,EAAAjL,YAAYyf,QACrB05D,EAASlvE,EAAGE,KAAK,oBAChBF,EAAGE,KAAK,WAETgvE,EAASlvE,EAAGE,KAAK,iBAChBF,EAAGE,KAAK,eAEfF,EAAGE,KAAK5L,GACR0L,EAAGE,KAAK,MACRF,EAAGE,KAAKxM,KAAK2wG,aAAah4F,EAAQkG,OAClCvS,EAAGE,KAAK,OACRxM,KAAKqwG,eAAezvG,EAAM+X,IAG5Bq4F,EAAA/uG,UAAA4tG,UAAA,SAAUjvG,EAAc+X,WAClBrM,EAAKtM,KAAKsM,GACd3C,EAAA+mG,OAAOpkG,EAAItM,KAAKwwG,eAChBlkG,EAAGE,KAAK,gBACRF,EAAGE,KAAK5L,GACR0L,EAAGE,KAAK,QACR,IAAIkS,EAAU/F,EAAQ+F,QACtB,GAAIA,EAAS,CACX,IAAIwyF,EAAaxyF,EAAQitB,SACzB,IAA2B,IAAAwlE,EAAAr5F,EAAA4G,GAAO0yF,EAAAD,EAAAn5F,QAAAo5F,EAAAn5F,KAAAm5F,EAAAD,EAAAn5F,OAAE,CAA3B,IAAAyO,EAAAtO,EAAAi5F,EAAA9vG,MAAA,GAAC+vG,EAAA5qF,EAAA,GAAMvI,EAAAuI,EAAA,GACVvI,EAAO1H,MAAQm7C,EAAA/gD,YAAY2W,YAC7B5d,EAAA+mG,OAAOpkG,EAAItM,KAAKwwG,aAChBlkG,EAAGE,KAAK6kG,GACJnzF,EAAOgB,GAAG5R,EAAAjL,YAAYglB,WACxB/a,EAAGE,KAAK,OACRtC,OAA4C,GAAzBgU,EAAQgJ,mBAC3B5a,EAAGE,KAAKyjC,QAAoB/xB,EAAQkJ,sBAAsB5b,SAAS,MAErEc,EAAGE,KAAK,SACN0kG,qGAGFA,GAAYlxG,KAAKqwG,eAAezvG,EAAM+X,GAE5ChP,EAAA+mG,OAAOpkG,IAAMtM,KAAKwwG,aAClBlkG,EAAGE,KAAK,QAGVwkG,EAAA/uG,UAAAkuG,cAAA,SAAcvvG,EAAc+X,GAC1B,IAAIA,EAAQ6I,MAAMlU,EAAAjL,YAAYm0D,QAAUlpD,EAAAjL,YAAYqf,KAApD,CACA,IAAIpV,EAAKtM,KAAKsM,GACV0H,EAAY2E,EAAQ3E,UAIxB,GAHArK,EAAA+mG,OAAOpkG,EAAItM,KAAKwwG,aACZ73F,EAAQuG,GAAG5R,EAAAjL,YAAYo0D,YAAYnqD,EAAGE,KAAK,cAC3CmM,EAAQuG,GAAG5R,EAAAjL,YAAYyf,SAASxV,EAAGE,KAAK,WACxCmM,EAAQuG,GAAG5R,EAAAjL,YAAYof,KAMzB,OALAnV,EAAGE,KAAK,QACRF,EAAGE,KAAK5L,GACR0L,EAAGE,KAAK,QACRF,EAAGE,KAAKxM,KAAK2wG,aAAa38F,EAAUm3B,kBACpC7+B,EAAGE,KAAK,OAGHmM,EAAQ6I,MAAMlU,EAAAjL,YAAYyf,OAASxU,EAAAjL,YAAYwiB,WAAWvY,EAAGE,KAAK,oBACvEF,EAAGE,KAAK5L,GAEV0L,EAAGE,KAAK,KAIR,IAHA,IAAIq3C,EAAa7vC,EAAU+V,eACvB0qC,EAAgB5Q,EAAW53C,OAEtB5L,EAAI,EAAGA,EAAIo0D,IAAiBp0D,EAC/BA,GAAGiM,EAAGE,KAAK,MAEfF,EAAGE,KAAKwH,EAAUkW,iBAAiB7pB,IACnCiM,EAAGE,KAAK,MACRF,EAAGE,KAAKxM,KAAK2wG,aAAa9sD,EAAWxjD,KAEnCsY,EAAQ6I,MAAMlU,EAAAjL,YAAYmgB,YAAclV,EAAAjL,YAAYqf,KACtDpV,EAAGE,KAAK,MAERF,EAAGE,KAAK,OACRF,EAAGE,KAAKxM,KAAK2wG,aAAa38F,EAAUm3B,cAEtC7+B,EAAGE,KAAK,OACRxM,KAAKqwG,eAAezvG,EAAM+X,KAG5Bq4F,EAAA/uG,UAAAquG,WAAA,SAAW1vG,EAAc+X,eACnBrM,EAAKtM,KAAKsM,GACVglG,EAAc34F,EAAQnC,MAAQm7C,EAAA/gD,YAAYsb,UAC9CviB,EAAA+mG,OAAOpkG,EAAItM,KAAKwwG,eACZc,EACFhlG,EAAGE,KAAK,sBAEJmM,EAAQuG,GAAG5R,EAAAjL,YAAY+f,WAAW9V,EAAGE,KAAK,aAC9CF,EAAGE,KAAK,kBAEVF,EAAGE,KAAK5L,GAMR0L,EAAGE,KAAK,QACR,IAAI2pE,EAAgBx9D,EAAQ1W,UAAUyc,QACtC,GAAIy3D,MACF,IAAmB,IAAAn4D,EAAAlG,EAAAq+D,EAAc/4D,UAAQa,EAAAD,EAAAhG,QAAAiG,EAAAhG,KAAAgG,EAAAD,EAAAhG,OAAA,CAApC,IAAIkG,EAAMD,EAAA3c,MAA4BtB,KAAK0vG,aAAaxxF,EAAOtd,KAAMsd,qGAE5E,IAAIH,EAAkBpF,EAAQ+F,QAC9B,GAAIX,MACF,IAAmB,IAAAY,EAAA7G,EAAAiG,EAAgBX,UAAQwB,EAAAD,EAAA3G,QAAA4G,EAAA3G,KAAA2G,EAAAD,EAAA3G,OAAA,CAAlCkG,EAAMU,EAAAtd,MAA8BtB,KAAK0vG,aAAaxxF,EAAOtd,KAAMsd,qGAE9EvU,EAAA+mG,OAAOpkG,IAAMtM,KAAKwwG,aAClBlkG,EAAGE,KAAK,QAGVwkG,EAAA/uG,UAAA8uG,eAAA,SAAenwG,EAAc+X,GAC3B3Y,KAAKswG,WAAW1vG,EAAM+X,IAGxBq4F,EAAA/uG,UAAA+tG,WAAA,SAAWpvG,EAAc+X,GACvB,IAAIA,EAAQuG,GAAG5R,EAAAjL,YAAYm0D,SAA3B,CACA,IAAIlqD,EAAKtM,KAAKsM,GACd3C,EAAA+mG,OAAOpkG,EAAItM,KAAKwwG,aACZ73F,EAAQuG,GAAG5R,EAAAjL,YAAYo0D,YAAYnqD,EAAGE,KAAK,cAC3CmM,EAAQuG,GAAG5R,EAAAjL,YAAYyf,SAASxV,EAAGE,KAAK,WACxCmM,EAAQuG,GAAG5R,EAAAjL,YAAY2f,WAAW1V,EAAGE,KAAK,aAC9CF,EAAGE,KAAK5L,GACR0L,EAAGE,KAAK,MACRF,EAAGE,KAAKxM,KAAK2wG,aAAah4F,EAAQkG,OAClCvS,EAAGE,KAAK,SAGVwkG,EAAA/uG,UAAAouG,eAAA,SAAezvG,EAAc+X,WACvB+F,EAAU/F,EAAQ+F,QACtB,GAAIA,GAAWA,EAAQitB,KAAM,CAC3B,IAAIr/B,EAAKtM,KAAKsM,GACd3C,EAAA+mG,OAAOpkG,EAAItM,KAAKwwG,eAChBlkG,EAAGE,KAAK,qBACRF,EAAGE,KAAK5L,GACR0L,EAAGE,KAAK,YACR,IAAmB,IAAAia,EAAA3O,EAAA4G,EAAQtB,UAAQY,EAAAyI,EAAAzO,QAAAgG,EAAA/F,KAAA+F,EAAAyI,EAAAzO,OAAA,CAA9B,IAAIkG,EAAMF,EAAA1c,MAAsBtB,KAAK0vG,aAAaxxF,EAAOtd,KAAMsd,qGACpEvU,EAAA+mG,OAAOpkG,IAAMtM,KAAKwwG,aAClBlkG,EAAGE,KAAK,SAIZwkG,EAAA/uG,UAAA0tG,WAAA,SAAW/uG,EAAc+X,EAAkB2sE,GACzC,IAAIh5E,EAAKtM,KAAKsM,GACd3C,EAAA+mG,OAAOpkG,EAAItM,KAAKwwG,aAChBlkG,EAAGE,KAAK,iBACRF,EAAGE,KAAK5L,GACR0L,EAAGE,KAAK,cACRF,EAAGE,KAAK84E,GACRh5E,EAAGE,KAAK,QAGVwkG,EAAA/uG,UAAA0uG,aAAA,SAAa9xF,GACX,OAAQA,EAAKrI,MACX,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAC1B,OAAqB,OAAOxW,KAAKwlB,QAAQ/Q,QAAQc,SAAW,MAAQ,MACpE,OAAkB,MAAO,KACzB,OAAmB,MAAO,MAC1B,OAAmB,MAAO,MAE1B,OAAmB,MAAO,MAC1B,OAAqB,OAAOvV,KAAKwlB,QAAQ/Q,QAAQc,SAAW,MAAQ,MAEpE,QAAoB,MAAO,OAC3B,QAAmB,MAAO,MAC1B,QAAmB,MAAO,MAC1B,QAAoB,MAAO,OAC3B,QAAoB,MAAO,OAC3B,QAEE,OADArL,QAAO,GACA,QAKb8mG,EAAA/uG,UAAAwuG,MAAA,WACE,IAAInkG,EAAKtM,KAAKsM,GAgBd,OAfAA,EAAGE,KAAK,+BACRF,EAAGE,KAAK,yBACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,yBACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACRF,EAAGE,KAAK,0BACNxM,KAAKwwG,YACPxwG,KAAKwvG,SACHxvG,KAAKwwG,YACPlkG,EAAGE,KAAK,OACRF,EAAGE,KAAK,8BACDxM,KAAKsM,GAAGG,KAAK,KAExBukG,EAxNA,CAAgC3B,GAAnB3vG,EAAAsxG,4aChVb,IAAA1jG,EAAAnN,EAAA,GAMAwxD,EAAAxxD,EAAA,GAIAgiD,EAAAhiD,EAAA,GAQAoN,EAAApN,EAAA,GAKAwJ,EAAAxJ,EAAA,GAIAsN,EAAAtN,EAAA,GA2DAoxG,EAAA,SAAAxgG,GAcE,SAAAwgG,IAAA,IAAAvgG,EACED,EAAAvQ,KAAAR,OAAOA,YAVTgR,EAAAwgG,QAAoB,IAAIzqG,MAExBiK,EAAAygG,QAAuB,IAAIxqG,IAE3B+J,EAAA0gG,QAAuB,IAAIzqG,IAE3B+J,EAAA+oD,UAAmC,KAye3B/oD,EAAA2gG,8BAAqC,EAwdrC3gG,EAAA4gG,oBAAuC,KA57B7C5gG,EAAKwU,QAAU,IAAImsC,EAAA7gD,QAAQE,EAAKnE,eA4rHpC,OA5sH4ByF,EAAAi/F,EAAAxgG,GAoB1BwgG,EAAAtvG,UAAA4vG,UAAA,SACE9lG,EACAqY,EACA9G,GAEA,IAAI5R,EAAiB/B,EAAAsgD,cAAc7lC,GAC/BH,EAAexW,EAAA28C,mBAAmB1+C,GAGtC,IAAI1L,KAAK0xG,QAAQn9F,IAAI0P,GAArB,CACAjkB,KAAK0xG,QAAQ38F,IAAIkP,GACjBjkB,KAAKyxG,QAAQ18F,IAAIkP,GAGjB,IAAIxY,EAAS,IAAIgC,EAAAoE,OACfnG,EACAK,EACAuR,EACI7P,EAAAqE,WAAWo+C,MACX9rC,EAAK8lC,WAAW58C,EAAAxK,iBAAmBshB,EAAK0tF,QAAQxkG,EAAAhL,eAAgBgL,EAAAxK,eAAemJ,QAAU,EACvFwB,EAAAqE,WAAWC,QACXtE,EAAAqE,WAAW4jD,SAEflwC,EAAUxlB,KAAKwlB,QACnBA,EAAQvU,QAAQzE,KAAKf,GAGrB,IAAIsmG,EAAK,IAAI5vD,EAAAuX,UAAUjuD,EAAQ+Z,EAAQ3Y,aACvCklG,EAAGh4C,UAAY/5D,KAAK+5D,UACpBtuD,EAAOmkD,UAAYmiD,EAEnB,IADA,IAAI17F,EAAa5K,EAAO4K,YAChB07F,EAAGr1C,KAAKva,EAAAC,MAAM+Z,YAAY,CAChC,IAAI5lD,EAAYvW,KAAKgyG,uBAAuBD,EAAI,MAC5Cx7F,GAAWF,EAAW7J,KAAK+J,GAEjCw7F,EAAGnyC,WAIL2xC,EAAAtvG,UAAA+vG,uBAAA,SACED,EACAhyB,QAAA,IAAAA,MAAA,MAOA,IALA,IAAIhtE,EAAQzF,EAAAjL,YAAY2Q,KACpBi/F,GAAiB,EAGjB9xF,EAAqC,KAClC4xF,EAAGr1C,KAAKva,EAAAC,MAAMqZ,KAAK,CACpBw2C,EAAW,IAAGA,EAAWF,EAAGp4C,UAChC,IAAIt5C,EAAYrgB,KAAKkyG,eAAeH,GAC/B1xF,EAIAF,EACAA,EAAW3T,KAAK6T,GADJF,EAAa,CAACE,GAH7BrgB,KAAKmyG,cAAcJ,GAQvB,IAAIK,EAAmB,EACnBC,EAAiB,EACjBC,EAAoB,EACpBC,EAAkB,EAClBR,EAAGr1C,KAAKva,EAAAC,MAAMntC,UACZg9F,EAAW,IAAGA,EAAWF,EAAGp4C,UAChC5mD,GAASzF,EAAAjL,YAAY4S,OACrBm9F,EAAcL,EAAGp4C,SACjB04C,EAAYN,EAAGhiD,IACXgiD,EAAGr1C,KAAKva,EAAAC,MAAMsT,WAChB48C,EAAeP,EAAGp4C,SAClB44C,EAAaR,EAAGhiD,MAIpB,IAAIyiD,EAAoB,EACpBC,EAAkB,EAClBC,EAAgC,MAAb3yB,GAAqBA,EAAU7gE,GAAG5R,EAAAjL,YAAYsiB,SACjEotF,EAAGr1C,KAAKva,EAAAC,MAAM98B,SACZotF,EACF1yG,KAAKmN,MACHI,EAAAhD,eAAeooG,gEACfZ,EAAGlnG,UAGDonG,EAAW,IAAGA,EAAWF,EAAGp4C,UAChC64C,EAAeP,EACfQ,EAAaV,EAAGhiD,IAChBh9C,GAASzF,EAAAjL,YAAYijB,QAAUhY,EAAAjL,YAAYsiB,SAEpC+tF,IACT3/F,GAASzF,EAAAjL,YAAYsiB,SAIvB,IAAIpO,EAA8B,KAG9Bq8F,EAAQb,EAAG31C,OAEf,OADI61C,EAAW,IAAGA,EAAWF,EAAGl4C,cACxB+4C,GACN,KAAKzwD,EAAAC,MAAM/iC,MACT0yF,EAAG/5F,OACHjF,GAASzF,EAAAjL,YAAYgd,MAEnB9I,EADEw7F,EAAGr1C,KAAKva,EAAAC,MAAMr7B,MACJ/mB,KAAK6yG,UAAUd,EAAIh/F,EAAOoN,EAAY8xF,GAEtCjyG,KAAK8yG,cAAcf,EAAIh/F,EAAOoN,EAAY8xF,GAExD9xF,EAAa,KACb,MAEF,KAAKgiC,EAAAC,MAAMgU,IAAKrjD,GAASzF,EAAAjL,YAAY+zD,IACrC,KAAKjU,EAAAC,MAAMwU,IACTm7C,EAAG/5F,OACHzB,EAAYvW,KAAK8yG,cAAcf,EAAIh/F,EAAOoN,EAAY8xF,GACtD9xF,EAAa,KACb,MAEF,KAAKgiC,EAAAC,MAAMr7B,KACTgrF,EAAG/5F,OACHzB,EAAYvW,KAAK6yG,UAAUd,EAAIh/F,EAAOoN,EAAY8xF,GAClD9xF,EAAa,KACb,MAEF,KAAKgiC,EAAAC,MAAM7jC,SACTwzF,EAAG/5F,OACHzB,EAAYvW,KAAK+yG,cAAchB,EAAIh/F,EAAOoN,EAAY8xF,GACtD9xF,EAAa,KACb,MAEF,KAAKgiC,EAAAC,MAAMhgC,SACT,IAAIw6C,EAAQm1C,EAAGp1C,OAEf,GADAo1C,EAAG/5F,QACE+5F,EAAGr1C,KAAKva,EAAAC,MAAM3jC,OAAQ,CACzBszF,EAAG/0C,MAAMJ,GACTrmD,EAAYvW,KAAKgzG,eAAejB,GAAI,GACpC,MAEAA,EAAGh1C,QAAQH,GAEb7pD,GAASzF,EAAAjL,YAAY+f,SAGvB,KAAK+/B,EAAAC,MAAM3jC,MACX,KAAK0jC,EAAAC,MAAMl2B,UACT6lF,EAAG/5F,OACHzB,EAAYvW,KAAKizG,sBAAsBlB,EAAIh/F,EAAOoN,EAAY8xF,GAC9D9xF,EAAa,KACb,MAEF,KAAKgiC,EAAAC,MAAMt7B,UACL81C,EAAQm1C,EAAGp1C,OACfo1C,EAAG/5F,OACC+5F,EAAG31C,MAAK,EAAOja,EAAA+S,mBAAmB8G,SAAW7Z,EAAAC,MAAMM,YACrDqvD,EAAGh1C,QAAQH,GACXrmD,EAAYvW,KAAKkzG,eAAenB,EAAIh/F,EAAOoN,EAAY8xF,GACvD9xF,EAAa,OAEb4xF,EAAG/0C,MAAMJ,GACTrmD,EAAYvW,KAAKgzG,eAAejB,GAAI,IAEtC,MAEF,KAAK5vD,EAAAC,MAAMvrC,OACTk7F,EAAG/5F,OAGDzB,GAFFxD,GAASzF,EAAAjL,YAAYwU,QACTvJ,EAAAjL,YAAY4S,OACVjV,KAAKmzG,kBAAkBpB,EAAIE,GAE3BjyG,KAAKozG,YAAYrB,GAE/B,MAEF,KAAK5vD,EAAAC,MAAMwL,KACLgP,EAAQm1C,EAAGp1C,OACfo1C,EAAG/5F,OACC+5F,EAAG31C,MAAK,EAAOja,EAAA+S,mBAAmB8G,SAAW7Z,EAAAC,MAAMM,YACrDqvD,EAAGh1C,QAAQH,GACXrmD,EAAYvW,KAAKqzG,qBAAqBtB,EAAIh/F,EAAOoN,EAAY8xF,GAC7D9xF,EAAa,OAEb4xF,EAAG/0C,MAAMJ,GACTrmD,EAAYvW,KAAKgzG,eAAejB,GAAI,IAEtC,MAEF,QAGMh/F,EAAQzF,EAAAjL,YAAY4S,OAClBs9F,GAAcR,EAAGt1C,eAAeta,EAAA+S,mBAAmB8G,SACjDy2C,GACFzyG,KAAKmN,MACHI,EAAAhD,eAAe+oG,2CACfvB,EAAGlnG,MAAM2nG,EAAcC,IAG3Bl8F,EAAYvW,KAAKuzG,wBAAwBxB,EAAIE,EAAUK,EAAcC,GACrED,EAAeC,EAAa,GAE5Bh8F,EAAYvW,KAAKwzG,YAAYzB,EAAIE,EAA2C,IAAhCl/F,EAAQzF,EAAAjL,YAAYijB,WAK9D+sF,GACFryG,KAAKmN,MACHI,EAAAhD,eAAekpG,gCACf1B,EAAGlnG,MAAMunG,EAAaC,GAAY,UAGlCI,GACFzyG,KAAKmN,MACHI,EAAAhD,eAAekpG,gCACf1B,EAAGlnG,MAAM2nG,EAAcC,GAAa,WAGnC1yB,IACHxpE,EAAYvW,KAAKgzG,eAAejB,GAAI,KAQ5C,GAAI5xF,EACF,IAAK,IAAI9f,EAAI,EAAG8V,EAAIgK,EAAWlU,OAAQ5L,EAAI8V,IAAK9V,EAC9CL,KAAKmN,MACHI,EAAAhD,eAAempG,8BACfvzF,EAAW9f,GAAGwK,OAMpB,GAAI0nG,GAA4B,OAAdh8F,EAChB,OAAQA,EAAUC,MAChB,KAAK/I,EAAAgJ,SAASU,gBACd,KAAK1J,EAAAgJ,SAASY,oBACd,KAAK5J,EAAAgJ,SAASQ,iBACd,KAAKxJ,EAAAgJ,SAASc,qBACd,KAAK9J,EAAAgJ,SAASgB,qBACZ,OAAOhK,EAAAwF,KAAKo3C,6BAAmD9zC,EAAWw7F,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAElG,QACE/vD,KAAKmN,MACHI,EAAAhD,eAAekpG,gCACf1B,EAAGlnG,MAAMynG,EAAcC,GAAa,WAK5C,OAAOh8F,GAITg7F,EAAAtvG,UAAA0xG,SAAA,WACE,IAAInC,EAAUxxG,KAAKwxG,QACnB,OAAOA,EAAQvlG,OAASulG,EAAQ1kE,QAAU,MAI5CykE,EAAAtvG,UAAA29D,OAAA,WACE,GAAI5/D,KAAKwxG,QAAQvlG,OAAQ,MAAM,IAAIiQ,MAAM,wBAIzC,OAAOlc,KAAKwlB,SAId+rF,EAAAtvG,UAAA2xG,UAAA,SACE7B,EACA8B,EACAC,QADA,IAAAD,OAAA,QACA,IAAAC,OAAA,GAIA,IAGIj1F,EAHAm4C,EAAQ+6C,EAAG/5F,OACXi6F,EAAWF,EAAGp4C,SAKlB,GAAI3C,GAAS7U,EAAAC,MAAMiY,UAAW,CAG5B,IAAI05C,EAAsBhC,EAAGr1C,KAAKva,EAAAC,MAAMiY,WAEpCrmD,EAAYhU,KAAKg0G,kBAAkBjC,GACvC,GAAI/9F,EAAW,CACb,GAAI+/F,EAAqB,CACvB,IAAKhC,EAAGr1C,KAAKva,EAAAC,MAAMkY,YAKjB,OAJAt6D,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,KAEP,KAET,IAAKknG,EAAGr1C,KAAKva,EAAAC,MAAMiW,KAKjB,OAJAr4D,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,KAEP,KAEJknG,EAAGr1C,KAAKva,EAAAC,MAAME,OACjBtiD,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,QAGhBmJ,EAAUovC,YAAa,EAEzB,OAAOpvC,EACF,GAAI+/F,GAAuB/zG,KAAK2xG,6BAKrC,OAJA3xG,KAAKmN,MACHI,EAAAhD,eAAe0pG,iBACflC,EAAGlnG,SAEE,KAIT,IAAIgpG,EAoBF,OAJA7zG,KAAKmN,MACHI,EAAAhD,eAAe0pG,iBACflC,EAAGlnG,SAEE,KAnBP,IAAIqpG,EAAYl0G,KAAK4zG,UAAU7B,GAAI,EAAO+B,GAC1C,IAAKI,EAAW,OAAO,KACvB,IAAKnC,EAAGr1C,KAAKva,EAAAC,MAAMkY,YAOjB,OANKw5C,GACH9zG,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,MAAMknG,EAAGhiD,KAAM,KAGf,MAETlxC,EAAOq1F,GACFrpG,MAAMqB,MAAQ+lG,EACnBpzF,EAAKhU,MAAMsB,IAAM4lG,EAAGhiD,SAUjB,GAAIiH,GAAS7U,EAAAC,MAAMoP,KACxB3yC,EAAOpR,EAAAwF,KAAKU,WACVlG,EAAAwF,KAAKW,qBAAqB,OAAQm+F,EAAGlnG,SAAU,IAAI,EAAOknG,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,WAI7E,GAAIiH,GAAS7U,EAAAC,MAAMkN,KACxBzwC,EAAOpR,EAAAwF,KAAKU,WACVlG,EAAAwF,KAAKW,qBAAqB,OAAQm+F,EAAGlnG,SAAU,IAAI,EAAOknG,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,WAI7E,GAAIiH,GAAS7U,EAAAC,MAAMG,MAAQyU,GAAS7U,EAAAC,MAAMI,MAC/C3jC,EAAOpR,EAAAwF,KAAKU,WACVlG,EAAAwF,KAAKW,qBAAqB,OAAQm+F,EAAGlnG,SAAU,IAAI,EAAOknG,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,WAI7E,GAAIiH,GAAS7U,EAAAC,MAAM+X,cACxB43C,EAAGl+D,aACHh1B,EAAOpR,EAAAwF,KAAKU,WACVlG,EAAAwF,KAAKW,qBAAqB,SAAUm+F,EAAGlnG,SAAU,IAAI,EAAOknG,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,UAI/E,IAAIiH,GAAS7U,EAAAC,MAAMM,WA6DxB,OANKoxD,GACH9zG,KAAKmN,MACHI,EAAAhD,eAAe4pG,oBACfpC,EAAGlnG,SAGA,KAtDP,IANA,IAAI+nG,EAAQnlG,EAAAwF,KAAKW,qBAAqBm+F,EAAG90C,iBAAkB80C,EAAGlnG,SAC1D6a,EAAUktF,EACV/uD,EAAgC,KAChCuwD,GAAW,EAGRrC,EAAGr1C,KAAKva,EAAAC,MAAMqY,MAAM,CACzB,IAAIs3C,EAAGr1C,KAAKva,EAAAC,MAAMM,YAShB,OAJA1iD,KAAKmN,MACHI,EAAAhD,eAAe4pG,oBACfpC,EAAGlnG,MAAMknG,EAAGhiD,MAEP,KARP,IAAI/3C,EAAOvK,EAAAwF,KAAKW,qBAAqBm+F,EAAG90C,iBAAkB80C,EAAGlnG,SAC7D6a,EAAQ1N,KAAOA,EACf0N,EAAU1N,EAWd,GAAI+5F,EAAGr1C,KAAKva,EAAAC,MAAM+U,UAAW,CAC3B,EAAG,CACD,IAAIk9C,EAAYr0G,KAAK4zG,UAAU7B,GAAI,EAAM+B,GACzC,IAAKO,EAAW,OAAO,KAClBxwD,EACAA,EAAWr3C,KAAe6nG,GADdxwD,EAAa,CAAWwwD,SAElCtC,EAAGr1C,KAAKva,EAAAC,MAAM0M,QACvB,IAAKijD,EAAGr1C,KAAKva,EAAAC,MAAMgV,aAOjB,OANK08C,GACH9zG,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,MAAMknG,EAAGhiD,KAAM,KAGf,KAIX,KAAOgiD,EAAGr1C,KAAKva,EAAAC,MAAMiW,MAAM,CACzB,IAAI05C,EAAGr1C,KAAKva,EAAAC,MAAME,MAShB,OANKwxD,GACH9zG,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,MAAMknG,EAAGhiD,KAAM,QAGf,KARPqkD,GAAW,EAWfv1F,EAAOpR,EAAAwF,KAAKU,WAAWi/F,EAAO/uD,GAAc,GAAIuwD,EAAUrC,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAWlF,KAAOgiD,EAAGr1C,KAAKva,EAAAC,MAAMiZ,cAAc,CACjC,IAAIi5C,EAAevC,EAAGp4C,SACtB,IAAKo4C,EAAGr1C,KAAKva,EAAAC,MAAMkZ,cAOjB,OANKw4C,GACH9zG,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,KAGT,KAET,IAAI0pG,EAAexC,EAAGlnG,MAAMypG,EAAcvC,EAAGhiD,KAGzCqkD,GAAW,EACf,GAAIrC,EAAGr1C,KAAKva,EAAAC,MAAMiW,KAAM,CACtB,IAAI05C,EAAGr1C,KAAKva,EAAAC,MAAME,MAShB,OANKwxD,GACH9zG,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,QAGT,KARPupG,GAAW,EAiBf,GANAv1F,EAAOpR,EAAAwF,KAAKU,WACVlG,EAAAwF,KAAKW,qBAAqB,QAAS2gG,GACnC,CAAE11F,GACFu1F,EACArC,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAEpBqkD,EAAU,MAGhB,OAAOv1F,GAOT0yF,EAAAtvG,UAAA+xG,kBAAA,SACEjC,GAKA,IAuGI5mE,EAvGAyxB,EAAQm1C,EAAGp1C,OACXs1C,EAAWF,EAAGp4C,SACd9V,EAAqC,KACrC/5B,EAA4B,KAC5B0qF,GAAoB,EAExB,GAAIzC,EAAGr1C,KAAKva,EAAAC,MAAMkY,YAChBk6C,GAAc,EACdzC,EAAGh1C,QAAQH,GACX/Y,EAAa,OAER,CACL2wD,GAAc,EACd,EAAG,CACD,IAAIh+F,EAAO/I,EAAAqgD,cAAc4H,QAMzB,GALIq8C,EAAGr1C,KAAKva,EAAAC,MAAM8U,eAChBs9C,GAAc,EACdzC,EAAGh1C,QAAQH,GACXpmD,EAAO/I,EAAAqgD,cAAc4S,MAEnBqxC,EAAGr1C,KAAKva,EAAAC,MAAMkN,MAAO,CACvB,IAAIyiD,EAAGr1C,KAAKva,EAAAC,MAAM6Y,OAiBhB,OAFA82C,EAAG/0C,MAAMJ,GACT58D,KAAK2xG,8BAA+B,EAC7B,KAhBP6C,GAAc,EACdzC,EAAGh1C,QAAQH,GACX,IAAIr7D,EAAIvB,KAAK4zG,UAAU7B,GAAI,GAC3B,IAAKxwG,EAAG,OAAO,KACf,GAAIA,EAAEiV,MAAQ/I,EAAAgJ,SAASm3C,KAMrB,OALA5tD,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf1f,EAAEsJ,OAEJ7K,KAAK2xG,8BAA+B,EAC7B,KAET7nF,EAAqBvoB,MAMlB,KAAIwwG,EAAGt1C,iBA8CZ,OATI+3C,EACFx0G,KAAKmN,MACHI,EAAAhD,eAAe4pG,oBACfpC,EAAGlnG,SAGLknG,EAAG/0C,MAAMJ,GAEX58D,KAAK2xG,6BAA+B6C,EAC7B,KA7CP,IAAI5zG,EAAO6M,EAAAwF,KAAKE,2BAA2B4+F,EAAG90C,iBAAkB80C,EAAGlnG,MAAMknG,EAAGp4C,SAAUo4C,EAAGhiD,MAazF,GAZIgiD,EAAGr1C,KAAKva,EAAAC,MAAMgZ,YAChBo5C,GAAc,EACdzC,EAAGh1C,QAAQH,GACPpmD,GAAQ/I,EAAAqgD,cAAc4S,KACxB1gE,KAAKmN,MACHI,EAAAhD,eAAekqG,oCACf1C,EAAGlnG,SAGL2L,EAAO/I,EAAAqgD,cAAc4mD,UAGrB3C,EAAGr1C,KAAKva,EAAAC,MAAM6Y,OAAQ,CACxBu5C,GAAc,EACdzC,EAAGh1C,QAAQH,GACX,IAAI/9C,EAAO7e,KAAK4zG,UAAU7B,GAC1B,IAAKlzF,EAEH,OADA7e,KAAK2xG,6BAA+B6C,EAC7B,KAET,IAAIG,EAAQ,IAAIlnG,EAAAk2C,cAChBgxD,EAAM/wD,cAAgBptC,EACtBm+F,EAAM/zG,KAAOA,EACb+zG,EAAM91F,KAAOA,EACRglC,EACAA,EAAWr3C,KAAKmoG,GADJ9wD,EAAa,CAAE8wD,QAG5BH,GACFx0G,KAAKmN,MACHI,EAAAhD,eAAeq2D,cACfmxC,EAAGlnG,gBAgBJknG,EAAGr1C,KAAKva,EAAAC,MAAM0M,QACvB,IAAKijD,EAAGr1C,KAAKva,EAAAC,MAAMkY,YAUjB,OATIk6C,EACFx0G,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,KAGdknG,EAAG/0C,MAAMJ,GAEX58D,KAAK2xG,6BAA+B6C,EAC7B,KAKX,OAAIzC,EAAGr1C,KAAKva,EAAAC,MAAM+Y,qBAChBq5C,GAAc,EACdzC,EAAGh1C,QAAQH,IACXzxB,EAAanrC,KAAK4zG,UAAU7B,KAiB9B/xG,KAAK2xG,8BAA+B,EAC7BlkG,EAAAwF,KAAKS,gBACVmwC,GAAc,GACd1Y,EACArhB,GACA,EACAioF,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,QArBpB/vD,KAAK2xG,6BAA+B6C,EAC7B,QAGLA,EACFx0G,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,MAGdknG,EAAG/0C,MAAMJ,GAEX58D,KAAK2xG,6BAA+B6C,EAC7B,OAcXjD,EAAAtvG,UAAAiwG,eAAA,SACEH,GAKA,IAAIE,EAAWF,EAAGp4C,SAClB,GAAIo4C,EAAGt1C,iBAAkB,CAGvB,IAFA,IAAI77D,EAAOmxG,EAAG90C,iBACVlzB,EAAyBt8B,EAAAwF,KAAKE,2BAA2BvS,EAAMmxG,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAClFgiD,EAAGr1C,KAAKva,EAAAC,MAAMqY,MAAM,CACzB,IAAIs3C,EAAGt1C,iBAYL,OAJAz8D,KAAKmN,MACHI,EAAAhD,eAAe4pG,oBACfpC,EAAGlnG,SAEE,KAXPjK,EAAOmxG,EAAG90C,iBACVlzB,EAAat8B,EAAAwF,KAAKs0C,+BAChBxd,EACAt8B,EAAAwF,KAAKE,2BAA2BvS,EAAMmxG,EAAGlnG,SACzCknG,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAU5B,IAAI7L,OAAI,EACR,IAAI6tD,EAAGr1C,KAAKva,EAAAC,MAAMiY,WAMhB,OAAO5sD,EAAAwF,KAAKgxC,gBAAgBla,EAAY,KAAMgoE,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAJpE,GADA7L,EAAOlkD,KAAK40G,eAAe7C,GAEzB,OAAOtkG,EAAAwF,KAAKgxC,gBAAgBla,EAAYma,EAAM6tD,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,WAMxE/vD,KAAKmN,MACHI,EAAAhD,eAAe4pG,oBACfpC,EAAGlnG,SAGP,OAAO,MAGT0mG,EAAAtvG,UAAA6wG,cAAA,SACEf,EACAh/F,EACAoN,EACA8xF,GAKA,IAAIvzF,EAAU,IAAI3X,MAClB,EAAG,CACD,IAAImX,EAASle,KAAK60G,yBAAyB9C,EAAIh/F,EAAOoN,GACtD,IAAKjC,EAAQ,OAAO,KACpBQ,EAAQlS,KAA0B0R,SAC3B6zF,EAAGr1C,KAAKva,EAAAC,MAAM0M,QAEvB,IAAIrb,EAAMhmC,EAAAwF,KAAKk6C,wBAAwBzuC,EAASyB,EAAY4xF,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAElF,OADAgiD,EAAGr1C,KAAKva,EAAAC,MAAM8Y,WACPznB,GAGT89D,EAAAtvG,UAAA4yG,yBAAA,SACE9C,EACA+C,EACAC,GAKA,IAAKhD,EAAGt1C,iBAKN,OAJAz8D,KAAKmN,MACHI,EAAAhD,eAAe4pG,oBACfpC,EAAGlnG,SAEE,KAET,IAAIwI,EAAa5F,EAAAwF,KAAKE,2BAA2B4+F,EAAG90C,iBAAkB80C,EAAGlnG,SACrEkI,EAAQ+hG,EACR/C,EAAGr1C,KAAKva,EAAAC,MAAMmW,eAChBxlD,GAASzF,EAAAjL,YAAY2yG,qBAGvB,IAAIn2F,EAA8B,KAC9BkzF,EAAGr1C,KAAKva,EAAAC,MAAM6Y,SAChBp8C,EAAO7e,KAAK4zG,UAAU7B,IAGxB,IAAI5qF,EAAiC,KACrC,GAAI4qF,EAAGr1C,KAAKva,EAAAC,MAAMuW,SAQhB,GAPI5lD,EAAQzF,EAAAjL,YAAYsiB,SACtB3kB,KAAKmN,MACHI,EAAAhD,eAAe0qG,iDACflD,EAAGlnG,WAGPsc,EAAcnnB,KAAKk1G,gBAAgBnD,EAAI,IACrB,OAAO,UAErBh/F,EAAQzF,EAAAjL,YAAYgd,MAChBtM,EAAQzF,EAAAjL,YAAYsiB,SACxB3kB,KAAKmN,MACHI,EAAAhD,eAAekxE,wCACfpoE,EAAWxI,OAGLgU,GACV7e,KAAKmN,MACHI,EAAAhD,eAAeq2D,cACfmxC,EAAGlnG,MAAMknG,EAAGhiD,MAIlB,IAAIllD,EAAQs3C,EAAA1mC,MAAMhP,KAAK4G,EAAWxI,MAAOknG,EAAGlnG,SAM5C,OALKkI,EAAQzF,EAAAjL,YAAY2yG,qBAAwB7tF,GAC/CnnB,KAAKmN,MACHI,EAAAhD,eAAe4qG,iEACftqG,GAEG4C,EAAAwF,KAAKC,0BACVG,EACAwL,EACAsI,EACA4tF,EACAhiG,EACAlI,IAIJ0mG,EAAAtvG,UAAA4wG,UAAA,SACEd,EACAh/F,EACAoN,EACA8xF,GAKA,GAAIF,EAAG/5F,QAAUmqC,EAAAC,MAAMM,WAKrB,OAJA1iD,KAAKmN,MACHI,EAAAhD,eAAe4pG,oBACfpC,EAAGlnG,SAEE,KAET,IAAIwI,EAAa5F,EAAAwF,KAAKE,2BAA2B4+F,EAAG90C,iBAAkB80C,EAAGlnG,SACzE,GAAIknG,EAAG/5F,QAAUmqC,EAAAC,MAAMmZ,UAKrB,OAJAv7D,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,KAEP,KAGT,IADA,IAAI6T,EAAU,IAAI3X,OACVgrG,EAAGr1C,KAAKva,EAAAC,MAAMoZ,aAAa,CACjC,IAAIt9C,EAASle,KAAKo1G,eAAerD,EAAIzkG,EAAAjL,YAAY2Q,MACjD,IAAKkL,EAAQ,OAAO,KAEpB,GADAQ,EAAQlS,KAA2B0R,IAC9B6zF,EAAGr1C,KAAKva,EAAAC,MAAM0M,OAAQ,CACzB,GAAIijD,EAAGr1C,KAAKva,EAAAC,MAAMoZ,YAChB,MAMA,OAJAx7D,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,KAEP,MAIb,IAAI4oC,EAAMhmC,EAAAwF,KAAKy2C,sBACbr2C,EACAqL,EACAyB,EACApN,EACAg/F,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAGxB,OADAgiD,EAAGr1C,KAAKva,EAAAC,MAAM8Y,WACPznB,GAGT89D,EAAAtvG,UAAAmzG,eAAA,SACErD,EACA+C,GAKA,IAAK/C,EAAGt1C,iBAKN,OAJAz8D,KAAKmN,MACHI,EAAAhD,eAAe4pG,oBACfpC,EAAGlnG,SAEE,KAET,IAAIwI,EAAa5F,EAAAwF,KAAKE,2BAA2B4+F,EAAG90C,iBAAkB80C,EAAGlnG,SACrEvJ,EAA2B,KAC/B,OAAIywG,EAAGr1C,KAAKva,EAAAC,MAAMuW,WAChBr3D,EAAQtB,KAAKk1G,gBAAgBnD,EAAI,IACd,KAEdtkG,EAAAwF,KAAK22C,2BACVv2C,EACA/R,EACAwzG,EACA3yD,EAAA1mC,MAAMhP,KAAK4G,EAAWxI,MAAOknG,EAAGlnG,WAIpC0mG,EAAAtvG,UAAAozG,YAAA,SACEtD,GAKA,IAAIprE,EAA0B,KAC9B,GACEorE,EAAG31C,MAAK,IAASja,EAAAC,MAAM8Y,WACvB62C,EAAGn4C,WAAazX,EAAAC,MAAMoZ,aACrBu2C,EAAGj4C,sBAEEnzB,EAAO3mC,KAAKk1G,gBAAgBnD,IAAM,OAAO,KAGjD,IAAIt+D,EAAMhmC,EAAAwF,KAAKm5C,sBAAsBzlB,EAAMorE,EAAGlnG,SAE9C,OADAknG,EAAGr1C,KAAKva,EAAAC,MAAM8Y,WACPznB,GAGT89D,EAAAtvG,UAAAqzG,oBAAA,SACEvD,GAOA,IAFA,IAAIlrF,EAA6C,KAC7C0uF,GAAe,GACXxD,EAAGr1C,KAAKva,EAAAC,MAAMgV,cAAc,CAClC,IAAIo+C,EAAgBx1G,KAAKy1G,mBAAmB1D,GAC5C,IAAKyD,EAAe,OAAO,KAY3B,GAXkC,OAA9BA,EAAcjyD,YAChBgyD,GAAe,EACNA,IACTv1G,KAAKmN,MACHI,EAAAhD,eAAemrG,iEACfF,EAAc3qG,OAEhB2qG,EAAcjyD,YAAc,MAEzB18B,EACAA,EAAera,KAAKgpG,GADJ3uF,EAAiB,CAAE2uF,IAEnCzD,EAAGr1C,KAAKva,EAAAC,MAAM0M,OAAQ,CACzB,GAAIijD,EAAGr1C,KAAKva,EAAAC,MAAMgV,aAChB,MAMA,OAJAp3D,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,KAEP,MAUb,OANMgc,GAAkBA,EAAe5a,QACrCjM,KAAKmN,MACHI,EAAAhD,eAAeorG,oCACf5D,EAAGlnG,SAGAgc,GAGT0qF,EAAAtvG,UAAAwzG,mBAAA,SACE1D,GAKA,GAAIA,EAAG/5F,QAAUmqC,EAAAC,MAAMM,WAAY,CACjC,IAAIrvC,EAAa5F,EAAAwF,KAAKE,2BACpB4+F,EAAG90C,iBACH80C,EAAGlnG,SAEDqW,EAA+B,KACnC,GAAI6wF,EAAGr1C,KAAKva,EAAAC,MAAMyT,SAAU,CAE1B,KADIt0D,EAAIvB,KAAK4zG,UAAU7B,IACf,OAAO,KACf,GAAIxwG,EAAEiV,MAAQ/I,EAAAgJ,SAASm3C,KAKrB,OAJA5tD,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf1f,EAAEsJ,OAEG,KAETqW,EAAwB3f,EAE1B,IAAIgiD,EAA+B,KACnC,GAAIwuD,EAAGr1C,KAAKva,EAAAC,MAAMuW,QAAS,CACzB,IAAIp3D,EACJ,KADIA,EAAIvB,KAAK4zG,UAAU7B,IACf,OAAO,KACf,GAAIxwG,EAAEiV,MAAQ/I,EAAAgJ,SAASm3C,KAKrB,OAJA5tD,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf1f,EAAEsJ,OAEG,KAET04C,EAAwBhiD,EAE1B,OAAOkM,EAAAwF,KAAKqwC,oBACVjwC,EACA6N,EACAqiC,EACApB,EAAA1mC,MAAMhP,KAAK4G,EAAWxI,MAAOknG,EAAGlnG,UAQpC,OALE7K,KAAKmN,MACHI,EAAAhD,eAAe4pG,oBACfpC,EAAGlnG,SAGA,MAKT0mG,EAAAtvG,UAAA2zG,gBAAA,SACE7D,EACA8D,QAAA,IAAAA,OAAA,GAKA,IAAIhyD,EAAa,IAAI98C,MACjB+uG,EAAiC,KACjCP,GAAe,EACfQ,GAAe,EACfjsF,EAAkC,KAItC,GADA9pB,KAAK4xG,oBAAsB,KACvBG,EAAGr1C,KAAKva,EAAAC,MAAMkN,MAAO,CACvB,IAAIyiD,EAAGr1C,KAAKva,EAAAC,MAAM6Y,OAgBhB,OAJAj7D,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,KAEP,KAdP,KADAif,EAAW9pB,KAAK4zG,UAAU7B,IACX,OAAO,KAgBxB,GAfMjoF,EAAStT,MAAQ/I,EAAAgJ,SAASm3C,KAC5B5tD,KAAK4xG,oBAAgC9nF,EAErC9pB,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf6I,EAASjf,QAUVknG,EAAGr1C,KAAKva,EAAAC,MAAM0M,OACjB,OAAIijD,EAAGr1C,KAAKva,EAAAC,MAAMkY,YACTzW,GAEP7jD,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,KAEP,MAKb,MAAQknG,EAAGr1C,KAAKva,EAAAC,MAAMkY,aAAa,CACjC,IAAIq6C,EAAQ30G,KAAKg2G,eAAejE,EAAI8D,GACpC,IAAKlB,EAAO,OAAO,KAQnB,OAPImB,IAAaC,IACf/1G,KAAKmN,MACHI,EAAAhD,eAAe0rG,kDACfH,EAASl1G,KAAKiK,OAEhBkrG,GAAe,GAETpB,EAAM/wD,eACZ,QACM2xD,GACFv1G,KAAKmN,MACHI,EAAAhD,eAAe2rG,yDACfvB,EAAM/zG,KAAKiK,OAGf,MAEF,KAAK4C,EAAAqgD,cAAc4mD,SACjBa,GAAe,EACf,MAEF,KAAK9nG,EAAAqgD,cAAc4S,KACjBo1C,EAAWnB,EAKf,GADA9wD,EAAWr3C,KAAKmoG,IACX5C,EAAGr1C,KAAKva,EAAAC,MAAM0M,OAAQ,CACzB,GAAIijD,EAAGr1C,KAAKva,EAAAC,MAAMkY,YAChB,MAMA,OAJAt6D,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,KAEP,MAIb,OAAOg5C,GAGT0tD,EAAAtvG,UAAA+zG,eAAA,SACEjE,EACA8D,QAAA,IAAAA,OAAA,GAKA,IAAIM,GAAS,EACTC,GAAa,EACbC,EAA2B,KAC3BC,EAA2BhpG,EAAAjL,YAAY2Q,KAC3C,GAAI6iG,IACE9D,EAAGr1C,KAAKva,EAAAC,MAAMsU,SAChB2/C,EAAatE,EAAGlnG,QAChByrG,GAAehpG,EAAAjL,YAAYq0D,QAClBq7C,EAAGr1C,KAAKva,EAAAC,MAAMqU,YACvB4/C,EAAatE,EAAGlnG,QAChByrG,GAAehpG,EAAAjL,YAAYo0D,WAClBs7C,EAAGr1C,KAAKva,EAAAC,MAAMoU,WACvB6/C,EAAatE,EAAGlnG,QAChByrG,GAAehpG,EAAAjL,YAAYm0D,SAEzBu7C,EAAG31C,QAAUja,EAAAC,MAAMpgC,UAAU,CAC/B,IAAI46C,EAAQm1C,EAAGp1C,OACfo1C,EAAG/5F,OACC+5F,EAAG31C,QAAUja,EAAAC,MAAM6Y,OACrB82C,EAAGh1C,QAAQH,GACNy5C,IAAYA,EAAatE,EAAGlnG,SACjCyrG,GAAehpG,EAAAjL,YAAY2f,UAE3B+vF,EAAG/0C,MAAMJ,GAef,GAXIm1C,EAAGr1C,KAAKva,EAAAC,MAAM8U,eACZo/C,EACFt2G,KAAKmN,MACHI,EAAAhD,eAAegsG,+DACfxE,EAAGlnG,SAGLwrG,EAAatE,EAAGlnG,QAElBsrG,GAAS,GAEPpE,EAAGt1C,iBAAkB,CAClB05C,IAAQE,EAAatE,EAAGlnG,SAC7B,IAAIwI,EAAa5F,EAAAwF,KAAKE,2BAA2B4+F,EAAG90C,iBAAkB80C,EAAGlnG,SACrEgU,EAA8B,KASlC,IARIu3F,EAAarE,EAAGr1C,KAAKva,EAAAC,MAAMgZ,YACzB+6C,GACFn2G,KAAKmN,MACHI,EAAAhD,eAAekqG,oCACfphG,EAAWxI,OAIbknG,EAAGr1C,KAAKva,EAAAC,MAAM6Y,QAEhB,KADAp8C,EAAO7e,KAAK4zG,UAAU7B,IACX,OAAO,UAElBlzF,EAAOpR,EAAAwF,KAAKM,kBAAkBw+F,EAAGlnG,MAAMknG,EAAGhiD,MAE5C,IAAI5oC,EAAiC,KACrC,GAAI4qF,EAAGr1C,KAAKva,EAAAC,MAAMuW,UACZw9C,GACFn2G,KAAKmN,MACHI,EAAAhD,eAAeisG,4CACfnjG,EAAWxI,OAGXurG,EACFp2G,KAAKmN,MACHI,EAAAhD,eAAeksG,oDACfpjG,EAAWxI,OAGburG,GAAa,IAEfjvF,EAAcnnB,KAAKk1G,gBAAgBnD,EAAI,KACrB,OAAO,KAE3B,IAAI4C,EAAQlnG,EAAAwF,KAAKywC,gBACfrwC,EACAwL,EACAsI,EACAgvF,EACI1oG,EAAAqgD,cAAc4S,KACd01C,EACE3oG,EAAAqgD,cAAc4mD,SACdjnG,EAAAqgD,cAAc4H,QACpBvT,EAAA1mC,MAAMhP,KAAY4pG,EAAYtE,EAAGlnG,UAGnC,OADA8pG,EAAM5hG,OAASujG,EACR3B,EAOT,OALE30G,KAAKmN,MACHI,EAAAhD,eAAe4pG,oBACfpC,EAAGlnG,SAGA,MAGT0mG,EAAAtvG,UAAA8wG,cAAA,SACEhB,EACAh/F,EACAoN,EACA8xF,GAUA,IAAKF,EAAGt1C,iBAKN,OAJAz8D,KAAKmN,MACHI,EAAAhD,eAAe4pG,oBACfpC,EAAGlnG,MAAMknG,EAAGhiD,MAEP,KAGT,IAAInvD,EAAO6M,EAAAwF,KAAKE,2BAA2B4+F,EAAG90C,iBAAkB80C,EAAGlnG,SAC/D6rG,GAAuB,EAEvB7vF,EAA6C,KACjD,GAAIkrF,EAAGr1C,KAAKva,EAAAC,MAAM+U,UAAW,CAG3B,GAFAu/C,EAAiB3E,EAAGp4C,WACpB9yC,EAAiB7mB,KAAKs1G,oBAAoBvD,IACrB,OAAO,KAC5Bh/F,GAASzF,EAAAjL,YAAY6S,QAGvB,IAAK68F,EAAGr1C,KAAKva,EAAAC,MAAMiY,WAKjB,OAJAr6D,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,MAAMknG,EAAGhiD,KAAM,KAEb,KAGL2mD,EAAiB,IACnBA,EAAiB3E,EAAGp4C,UAGtB,IAAI9V,EAAa7jD,KAAK41G,gBAAgB7D,GACtC,IAAKluD,EAAY,OAAO,KACxB,IAAI/5B,EAAW9pB,KAAK4xG,oBAEhB+E,EAAwC,IAA5B5jG,EAAQzF,EAAAjL,YAAYqf,KAChCi1F,IACuB,GAArB9yD,EAAW53C,QACbjM,KAAKmN,MACHI,EAAAhD,eAAeqsG,+CACfh2G,EAAKiK,OAGLg5C,EAAW53C,QAAU43C,EAAW,GAAG18B,aACrCnnB,KAAKmN,MACHI,EAAAhD,eAAessG,oDACfj2G,EAAKiK,QAKPkI,EAAQzF,EAAAjL,YAAYof,KAClBoiC,EAAW53C,QACbjM,KAAKmN,MACHI,EAAAhD,eAAeusG,sCACfl2G,EAAKiK,OAKX,IAAIsgC,EAAoC,KACxC,GAAI4mE,EAAGr1C,KAAKva,EAAAC,MAAM6Y,UAChB9vB,EAAanrC,KAAK4zG,UAAU7B,GAAI,EAAM4E,IACrB,OAAO,KAGrBxrE,IACHA,EAAa19B,EAAAwF,KAAKM,kBAChBw+F,EAAGlnG,MAAMknG,EAAGhiD,MAET4mD,GACH32G,KAAKmN,MACHI,EAAAhD,eAAeq2D,cACfz1B,EAAWtgC,QAKjB,IAAImJ,EAAYvG,EAAAwF,KAAKS,gBACnBmwC,EACA1Y,EACArhB,GACA,EACAioF,EAAGlnG,MAAM6rG,EAAgB3E,EAAGhiD,MAG1BhoC,EAAyB,KAC7B,GAAIgqF,EAAGr1C,KAAKva,EAAAC,MAAMmZ,YAShB,GARIxoD,EAAQzF,EAAAjL,YAAYsiB,SACtB3kB,KAAKmN,MACHI,EAAAhD,eAAewrE,yDACfg8B,EAAGlnG,WAIPkd,EAAO/nB,KAAK+2G,oBAAoBhF,GAAI,IACzB,OAAO,UACPh/F,EAAQzF,EAAAjL,YAAYsiB,SAC/B3kB,KAAKmN,MACHI,EAAAhD,eAAe0rE,gFACf87B,EAAGlnG,MAAMknG,EAAGhiD,MAIhB,IAAItc,EAAMhmC,EAAAwF,KAAKQ,0BACb7S,EACAimB,EACA7S,EACA+T,EACA5H,EACApN,EAAK,EAELg/F,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAGxB,OADAgiD,EAAGr1C,KAAKva,EAAAC,MAAM8Y,WACPznB,GAGT89D,EAAAtvG,UAAA+0G,wBAAA,SAAwBjF,GACtB,IACInxG,EADAqxG,EAAWF,EAAGp4C,SAEd3xC,EAAS,EAOb,GAAI+pF,EAAG/6C,OAAS7U,EAAAC,MAAM7jC,UAMpB,GAJE3d,EADEmxG,EAAGt1C,iBACEhvD,EAAAwF,KAAKE,2BAA2B4+F,EAAG90C,iBAAkB80C,EAAGlnG,SAExD4C,EAAAwF,KAAK2xC,gCAAgCmtD,EAAGlnG,MAAMknG,EAAGhiD,OAErDgiD,EAAGr1C,KAAKva,EAAAC,MAAMiY,WAKjB,OAJAr6D,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,MAAMknG,EAAGhiD,KAAM,KAEb,UAQT/nC,EAAS,EACT9d,OAAO6nG,EAAG/6C,OAAS7U,EAAAC,MAAMiY,WACzBz5D,EAAO6M,EAAAwF,KAAK2xC,gCAAgCmtD,EAAGlnG,MAAMknG,EAAGp4C,WAK1D,IAAI+8C,EAAiB3E,EAAGhiD,IACpBlM,EAAa7jD,KAAK41G,gBAAgB7D,GACtC,OAAKluD,EAEE7jD,KAAKi3G,8BAA8BlF,EAAInxG,EAAMijD,EAAY77B,EAAWiqF,EAAUyE,GAF7D,MAKlBnF,EAAAtvG,UAAAg1G,8BAAR,SACElF,EACAnxG,EACAijD,EACA77B,EACAiqF,EACAyE,QADA,IAAAzE,OAAiB,QACjB,IAAAyE,OAAuB,GAEnBzE,EAAW,IAAGA,EAAWrxG,EAAKiK,MAAMqB,OACpCwqG,EAAiB,IAAGA,EAAiBzE,GAEzC,IAAI9mE,EAAoC,KACxC,GAAa,GAATnjB,GAAuC+pF,EAAGr1C,KAAKva,EAAAC,MAAM6Y,QAEvD,KADA9vB,EAAanrC,KAAK4zG,UAAU7B,IACX,OAAO,UAExB5mE,EAAa19B,EAAAwF,KAAKM,kBAAkBw+F,EAAGlnG,MAAMknG,EAAGhiD,MAGlD,GAAI/nC,IACG+pF,EAAGr1C,KAAKva,EAAAC,MAAM+Y,oBAKjB,OAJAn7D,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,MAAMknG,EAAGhiD,KAAM,MAEb,KAIX,IAAI/7C,EAAYvG,EAAAwF,KAAKS,gBACnBmwC,EACA1Y,EACA,MACA,EACA4mE,EAAGlnG,MAAM6rG,EAAgB3E,EAAGhiD,MAG1BhoC,EAAyB,KAC7B,GAAIC,EACF,GAAI+pF,EAAGr1C,KAAKva,EAAAC,MAAMmZ,WAChBxzC,EAAO/nB,KAAK+2G,oBAAoBhF,GAAI,OAC/B,CACL,IAAImF,EAAiBl3G,KAAKk1G,gBAAgBnD,EAAI,GAC1CmF,IAAgBnvF,EAAOta,EAAAwF,KAAK03C,0BAA0BusD,QAEvD,CACL,IAAKnF,EAAGr1C,KAAKva,EAAAC,MAAMmZ,WAKjB,OAJAv7D,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,MAAMknG,EAAGhiD,KAAM,KAEb,KAEThoC,EAAO/nB,KAAK+2G,oBAAoBhF,GAAI,GAEtC,IAAKhqF,EAAM,OAAO,KAElB,IAAIzT,EAAc7G,EAAAwF,KAAKQ,0BACrB7S,EACA,KACAoT,EACA+T,EACA,KACAza,EAAAjL,YAAY2Q,KACZgV,EACA+pF,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAExB,OAAOtiD,EAAAwF,KAAKuzC,yBAAyBlyC,IAGvCi9F,EAAAtvG,UAAAgxG,sBAAA,SACElB,EACAh/F,EACAoN,EACA8xF,GAUA,IAAIX,EAAcS,EAAG/6C,OAAS7U,EAAAC,MAAMl2B,UAEpC,IAAK6lF,EAAGt1C,iBAKN,OAJAz8D,KAAKmN,MACHI,EAAAhD,eAAe4pG,oBACfpC,EAAGlnG,SAEE,KAGT,IAAIwI,EAAa5F,EAAAwF,KAAKE,2BACpB4+F,EAAG90C,iBACH80C,EAAGlnG,SAGDgc,EAA6C,KACjD,GAAIkrF,EAAGr1C,KAAKva,EAAAC,MAAM+U,UAAW,CAE3B,KADAtwC,EAAiB7mB,KAAKs1G,oBAAoBvD,IACrB,OAAO,KAC5Bh/F,GAASzF,EAAAjL,YAAY6S,QAGvB,IAAIgM,EAA+B,KACnC,GAAI6wF,EAAGr1C,KAAKva,EAAAC,MAAMyT,SAAU,CAC1B,IAAIt0D,EAAIvB,KAAK4zG,UAAU7B,GACvB,IAAKxwG,EAAG,OAAO,KACf,GAAIA,EAAEiV,MAAQ/I,EAAAgJ,SAASm3C,KAKrB,OAJA5tD,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf1f,EAAEsJ,OAEG,KAETqW,EAAwB3f,EAG1B,IAAIuf,EAAqC,KACzC,GAAIixF,EAAGr1C,KAAKva,EAAAC,MAAM4T,YAAa,CACzBs7C,GACFtxG,KAAKmN,MACHI,EAAAhD,eAAe4sG,oDACfpF,EAAGlnG,SAGP,EAAG,CACD,IAAIgU,EAAO7e,KAAK4zG,UAAU7B,GAC1B,IAAKlzF,EAAM,OAAO,KACbyyF,IACExwF,EACAA,EAAgBtU,KAAeqS,GADdiC,EAAkB,CAAWjC,UAG9CkzF,EAAGr1C,KAAKva,EAAAC,MAAM0M,QAGzB,IAAKijD,EAAGr1C,KAAKva,EAAAC,MAAMmZ,WAKjB,OAJAv7D,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,KAEP,KAGT,IACIyJ,EADAoK,EAAU,IAAI3X,MAyBlB,GAvBIuqG,GACFpnG,QAAQ4W,GACRxM,EAAc7G,EAAAwF,KAAKo4C,2BACjBh4C,EACAwT,EACA3F,EACAxC,EACAyB,EACApN,EACAg/F,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,OAGxBz7C,EAAc7G,EAAAwF,KAAKi2C,uBACjB71C,EACAwT,EACA3F,EACAJ,EACApC,EACAyB,EACApN,EACAg/F,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,OAGrBgiD,EAAGr1C,KAAKva,EAAAC,MAAMoZ,YACjB,EAAG,CACD,IAAIt9C,EAASle,KAAKo3G,iBAAiBrF,EAAIz9F,GACvC,GAAI4J,EAAQQ,EAAQlS,KAA2B0R,QAG7C,GADAle,KAAKmyG,cAAcJ,GACfA,EAAGr1C,KAAKva,EAAAC,MAAM+Z,WAKhB,OAJAn8D,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,KAEP,YAGHknG,EAAGr1C,KAAKva,EAAAC,MAAMoZ,aAG1B,OADAlnD,EAAYzJ,MAAMsB,IAAM4lG,EAAGhiD,IACpBz7C,GAGTi9F,EAAAtvG,UAAAo1G,qBAAA,SAAqBtF,GAInB,IACInxG,EADAqxG,EAAWF,EAAGp4C,SASlB,GALE/4D,EADEmxG,EAAGt1C,iBACEhvD,EAAAwF,KAAKE,2BAA2B4+F,EAAG90C,iBAAkB80C,EAAGlnG,SAExD4C,EAAAwF,KAAK2xC,gCAAgCmtD,EAAGlnG,MAAMknG,EAAGhiD,OAGrDgiD,EAAGr1C,KAAKva,EAAAC,MAAMmZ,WAKjB,OAJAv7D,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,MAAMknG,EAAGhiD,KAAM,KAEb,KAGT,IAAIrxC,EAAU,IAAI3X,MACduN,EAAc7G,EAAAwF,KAAKi2C,uBACrBtoD,EACA,GACA,KACA,KACA8d,EACA,KACApR,EAAAjL,YAAY2Q,KACZ++F,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAExB,IAAKgiD,EAAGr1C,KAAKva,EAAAC,MAAMoZ,YACjB,EAAG,CACD,IAAIt9C,EAASle,KAAKo3G,iBAAiBrF,EAAIz9F,GACvC,GAAI4J,EAAQQ,EAAQlS,KAA2B0R,QAG7C,GADAle,KAAKmyG,cAAcJ,GACfA,EAAGr1C,KAAKva,EAAAC,MAAM+Z,WAKhB,OAJAn8D,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,KAEP,YAGHknG,EAAGr1C,KAAKva,EAAAC,MAAMoZ,aAG1B,OADAlnD,EAAYzJ,MAAMsB,IAAM4lG,EAAGhiD,IACpBtiD,EAAAwF,KAAKyyC,sBAAsBpxC,IAGpCi9F,EAAAtvG,UAAAm1G,iBAAA,SACErF,EACA99F,GAUA,IAAIg+F,EAAWF,EAAGhiD,IACduhD,EAAcr9F,EAAOuC,MAAQ/I,EAAAgJ,SAASc,qBAEtC4I,EAAqC,KACzC,GAAI4xF,EAAGr1C,KAAKva,EAAAC,MAAMqZ,IAAK,CACrB,EAAG,CACD,IAAIp7C,EAAYrgB,KAAKkyG,eAAeH,GACpC,IAAK1xF,EAAW,MACXF,EACAA,EAAW3T,KAAoB6T,GADnBF,EAAa,CAAgBE,SAEvC0xF,EAAGr1C,KAAKva,EAAAC,MAAMqZ,KACnBt7C,GAAcmxF,GAChBtxG,KAAKmN,MACHI,EAAAhD,eAAempG,8BACfvxD,EAAA1mC,MAAMhP,KAAK0T,EAAW,GAAGtV,MAAOsV,EAAWA,EAAWlU,OAAS,GAAGpB,QAMxE,IAAIkI,EAAQkB,EAAOlB,MAAQzF,EAAAjL,YAAYsiB,QAGnC2sF,IAAav+F,GAASzF,EAAAjL,YAAYi1G,SAEtC,IAAIC,EAAc,EACdC,EAAY,EACZzF,EAAGr1C,KAAKva,EAAAC,MAAMsU,SACZ46C,GACFtxG,KAAKmN,MACHI,EAAAhD,eAAekpG,gCACf1B,EAAGlnG,QAAS,UAGhBkI,GAASzF,EAAAjL,YAAYq0D,OACrB6gD,EAAcxF,EAAGp4C,SACjB69C,EAAYzF,EAAGhiD,KACNgiD,EAAGr1C,KAAKva,EAAAC,MAAMoU,UACnB86C,GACFtxG,KAAKmN,MACHI,EAAAhD,eAAekpG,gCACf1B,EAAGlnG,QAAS,WAGhBkI,GAASzF,EAAAjL,YAAYm0D,QACrB+gD,EAAcxF,EAAGp4C,SACjB69C,EAAYzF,EAAGhiD,KACNgiD,EAAGr1C,KAAKva,EAAAC,MAAMqU,aACnB66C,GACFtxG,KAAKmN,MACHI,EAAAhD,eAAekpG,gCACf1B,EAAGlnG,QAAS,aAGhBkI,GAASzF,EAAAjL,YAAYo0D,UACrB8gD,EAAcxF,EAAGp4C,SACjB69C,EAAYzF,EAAGhiD,KAGjB,IAAI0nD,EAAc,EACdC,EAAY,EACZC,EAAgB,EAChBC,EAAc,EACd7F,EAAGr1C,KAAKva,EAAAC,MAAMtgC,SACZwvF,GACFtxG,KAAKmN,MACHI,EAAAhD,eAAekpG,gCACf1B,EAAGlnG,QAAS,UAGhBkI,GAASzF,EAAAjL,YAAYyf,OACrB21F,EAAc1F,EAAGp4C,SACjB+9C,EAAY3F,EAAGhiD,MAEfh9C,GAASzF,EAAAjL,YAAYwiB,SACjBktF,EAAGr1C,KAAKva,EAAAC,MAAMhgC,YACZkvF,GACFtxG,KAAKmN,MACHI,EAAAhD,eAAekpG,gCACf1B,EAAGlnG,QAAS,YAGhBkI,GAASzF,EAAAjL,YAAY+f,SACrBu1F,EAAgB5F,EAAGp4C,SACnBi+C,EAAc7F,EAAGhiD,KAEf97C,EAAOlB,MAAQzF,EAAAjL,YAAY6S,UAASnC,GAASzF,EAAAjL,YAAYw1G,kBAG/D,IAAIC,EAAqB,EACrBC,EAAmB,EACnBhG,EAAGr1C,KAAKva,EAAAC,MAAMpgC,YAChBjP,GAASzF,EAAAjL,YAAY2f,SACrB81F,EAAgB/F,EAAGp4C,SACnBo+C,EAAchG,EAAGhiD,KAInB,IA+DInvD,EA/DAg8D,EAAQm1C,EAAGp1C,OACXk5C,GAAgB,EAChBjyF,GAAW,EAGX+yF,GAAW,EACXhmE,EAAgB,EAChBqnE,EAAc,EAyDlB,GAxDK1G,IACCS,EAAGr1C,KAAKva,EAAAC,MAAM3gC,KACZswF,EAAG31C,MAAK,EAAMja,EAAA+S,mBAAmB8G,SAAW7Z,EAAAC,MAAMM,YAAeqvD,EAAGj4C,mBAYtEi4C,EAAG/0C,MAAMJ,IAXT7pD,GAASzF,EAAAjL,YAAYof,IACrBmC,GAAW,EACX+sB,EAAWohE,EAAGp4C,SACdq+C,EAASjG,EAAGhiD,IACRh9C,EAAQzF,EAAAjL,YAAY2f,UACtBhiB,KAAKmN,MACHI,EAAAhD,eAAekpG,gCACf1B,EAAGlnG,MAAMitG,EAAeC,GAAc,aAMnChG,EAAGr1C,KAAKva,EAAAC,MAAM1gC,KACnBqwF,EAAG31C,MAAK,EAAMja,EAAA+S,mBAAmB8G,SAAW7Z,EAAAC,MAAMM,YAAeqvD,EAAGj4C,mBAYtEi4C,EAAG/0C,MAAMJ,IAXT7pD,GAASzF,EAAAjL,YAAYqf,IACrBi1F,GAAW,EACXhmE,EAAWohE,EAAGp4C,SACdq+C,EAASjG,EAAGhiD,IACRh9C,EAAQzF,EAAAjL,YAAY2f,UACtBhiB,KAAKmN,MACHI,EAAAhD,eAAekpG,gCACf1B,EAAGlnG,MAAMitG,EAAeC,GAAc,aAMnChG,EAAGr1C,KAAKva,EAAAC,MAAM5/B,eAEvBqzF,GAAgB,GADhB9iG,GAASzF,EAAAjL,YAAYmgB,aAETlV,EAAAjL,YAAYyf,QACtB9hB,KAAKmN,MACHI,EAAAhD,eAAekpG,gCACf1B,EAAGlnG,MAAM4sG,EAAaC,GAAY,UAGlC3kG,EAAQzF,EAAAjL,YAAY+f,UACtBpiB,KAAKmN,MACHI,EAAAhD,eAAekpG,gCACf1B,EAAGlnG,MAAM8sG,EAAeC,GAAc,YAGtC7kG,EAAQzF,EAAAjL,YAAY2f,UACtBhiB,KAAKmN,MACHI,EAAAhD,eAAekpG,gCACf1B,EAAGlnG,MAAMitG,EAAeC,GAAc,cAO1ClC,EACFj1G,EAAO6M,EAAAwF,KAAK8yC,4BAA4BgsD,EAAGlnG,aACtC,CACL,IAAM+Y,IAAY+yF,GAAa5E,EAAGr1C,KAAKva,EAAAC,MAAMiZ,aAAc,CAErDtoD,EAAQzF,EAAAjL,YAAYq0D,OACtB12D,KAAKmN,MACHI,EAAAhD,eAAekpG,gCACf1B,EAAGlnG,MAAM0sG,EAAaC,GAAY,UAE3BzkG,EAAQzF,EAAAjL,YAAYo0D,UAC7Bz2D,KAAKmN,MACHI,EAAAhD,eAAekpG,gCACf1B,EAAGlnG,MAAM0sG,EAAaC,GAAY,aAE3BzkG,EAAQzF,EAAAjL,YAAYm0D,SAC7Bx2D,KAAKmN,MACHI,EAAAhD,eAAekpG,gCACf1B,EAAGlnG,MAAM0sG,EAAaC,GAAY,aAGlCzkG,EAAQzF,EAAAjL,YAAYyf,QACtB9hB,KAAKmN,MACHI,EAAAhD,eAAekpG,gCACf1B,EAAGlnG,MAAM4sG,EAAaC,GAAY,UAGlC3kG,EAAQzF,EAAAjL,YAAY+f,UACtBpiB,KAAKmN,MACHI,EAAAhD,eAAekpG,gCACf1B,EAAGlnG,MAAM8sG,EAAeC,GAAc,YAGtC7kG,EAAQzF,EAAAjL,YAAY2f,UACtBhiB,KAAKmN,MACHI,EAAAhD,eAAekpG,gCACf1B,EAAGlnG,MAAMitG,EAAeC,GAAc,YAG1C,IAAIE,EAAWj4G,KAAKk4G,+BAA+BnG,EAAI5xF,GACvD,OAAK83F,GACLlG,EAAGr1C,KAAKva,EAAAC,MAAM8Y,WACP+8C,GAFe,KAIxB,IAAKlG,EAAGt1C,iBAKN,OAJAz8D,KAAKmN,MACHI,EAAAhD,eAAe4pG,oBACfpC,EAAGlnG,SAEE,KAETjK,EAAO6M,EAAAwF,KAAKE,2BAA2B4+F,EAAG90C,iBAAkB80C,EAAGlnG,SAEjE,IAAIgc,EAA6C,KACjD,GAAIkrF,EAAGr1C,KAAKva,EAAAC,MAAM+U,UAAW,CAC3B,IAAIghD,EAAsBpG,EAAGp4C,SAE7B,KADA9yC,EAAiB7mB,KAAKs1G,oBAAoBvD,IACrB,OAAO,KACxB8D,EACF71G,KAAKmN,MACHI,EAAAhD,eAAe6tG,2DACfrG,EAAGlnG,MAAMstG,EAAqBpG,EAAGhiD,MAE1BnsC,GAAY+yF,EACrB32G,KAAKmN,MACHI,EAAAhD,eAAe8tG,wCACftG,EAAGlnG,MAAMstG,EAAqBpG,EAAGhiD,MAGnCh9C,GAASzF,EAAAjL,YAAY6S,QAKzB,GAAI68F,EAAGr1C,KAAKva,EAAAC,MAAMiY,WAAY,CAC5B,IAAIq8C,EAAiB3E,EAAGp4C,SACpB9V,EAAa7jD,KAAK41G,gBAAgB7D,EAAI8D,GAC1C,IAAKhyD,EAAY,OAAO,KACxB,IAAI/5B,EAAW9pB,KAAK4xG,oBACpB,GAAIiE,EACF,IAAK,IAAIx1G,EAAI,EAAG8V,EAAI0tC,EAAW53C,OAAQ5L,EAAI8V,IAAK9V,EAAG,CACjD,IAAIg0G,EAAYxwD,EAAWxjD,GAC3B,GAAIg0G,EAAU7yF,MACZlU,EAAAjL,YAAYq0D,OACZppD,EAAAjL,YAAYo0D,UACZnpD,EAAAjL,YAAYm0D,QACZlpD,EAAAjL,YAAY2f,UACX,CACD,IAAIgsC,EAA2BvgD,EAAAwF,KAAKs4C,uBAClC8oD,EAAUzzG,KACVyzG,EAAUx1F,KACV,KACA,KACAw1F,EAAUthG,MAAQzF,EAAAjL,YAAYwiB,SAC9BwvF,EAAUxpG,OAEZmjD,EAAyB7iC,eAAiB9qB,EAC1Cg0G,EAAUrmD,yBAA2BA,EACrC/5C,EAAOyK,QAAQlS,KAAKwhD,SAGfpqC,EACLigC,EAAW53C,QACbjM,KAAKmN,MACHI,EAAAhD,eAAeusG,sCACfl2G,EAAKiK,OAGA8rG,IACgB,GAArB9yD,EAAW53C,QACbjM,KAAKmN,MACHI,EAAAhD,eAAeqsG,+CACfh2G,EAAKiK,OAGLg5C,EAAW53C,QAAU43C,EAAW,GAAG18B,aACrCnnB,KAAKmN,MACHI,EAAAhD,eAAessG,oDACfj2G,EAAKiK,QAKX,IAAIsgC,EAAoC,KACxC,GAAI4mE,EAAGr1C,KAAKva,EAAAC,MAAM6Y,QAahB,GAZIr6D,EAAK4V,MAAQ/I,EAAAgJ,SAAS+L,YACxBxiB,KAAKmN,MACHI,EAAAhD,eAAe+tG,2DACfvG,EAAGlnG,SAEI8rG,GACT32G,KAAKmN,MACHI,EAAAhD,eAAeguG,oDACfxG,EAAGlnG,WAGPsgC,EAAanrC,KAAK4zG,UAAU7B,EAAInxG,EAAK4V,MAAQ/I,EAAAgJ,SAAS+L,aAAem0F,IACpD,OAAO,UAExBxrE,EAAa19B,EAAAwF,KAAKM,kBAAkBw+F,EAAGlnG,MAAMknG,EAAGhiD,MAC3C4mD,GAAY/1G,EAAK4V,MAAQ/I,EAAAgJ,SAAS+L,aACrCxiB,KAAKmN,MACHI,EAAAhD,eAAeq2D,cACfz1B,EAAWtgC,OAKjB,IAAImJ,EAAYvG,EAAAwF,KAAKS,gBACnBmwC,EACA1Y,EACArhB,GACA,EACAioF,EAAGlnG,MAAM6rG,EAAgB3E,EAAGhiD,MAG1BhoC,EAAyB,KAC7B,GAAIgqF,EAAGr1C,KAAKva,EAAAC,MAAMmZ,YAahB,GAZIxoD,EAAQzF,EAAAjL,YAAYsiB,QACtB3kB,KAAKmN,MACHI,EAAAhD,eAAewrE,yDACfg8B,EAAGlnG,SAEIkI,EAAQzF,EAAAjL,YAAY+f,UAC7BpiB,KAAKmN,MACHI,EAAAhD,eAAeiuG,qEACfzG,EAAGlnG,QAASjK,EAAKmL,QAGrBgc,EAAO/nB,KAAK+2G,oBAAoBhF,GAAI,IACzB,OAAO,UACPh/F,EAAQzF,EAAAjL,YAAYsiB,SAAa2sF,GAC5CtxG,KAAKmN,MACHI,EAAAhD,eAAe0rE,gFACf87B,EAAGlnG,SAIP,IAAI4tG,EAAYhrG,EAAAwF,KAAKg5C,wBACnBrrD,EACAimB,EACA7S,EACA+T,EACA5H,EACApN,EACAg/F,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAGxB,OADAgiD,EAAGr1C,KAAKva,EAAAC,MAAM8Y,WACPu9C,EAEF,GAAI5C,EACT71G,KAAKmN,MACHI,EAAAhD,eAAemuG,sCACf93G,EAAKiK,WAGF,KAAI+Y,IAAY+yF,EAOhB,CACD5jG,EAAQzF,EAAAjL,YAAY+f,UACtBpiB,KAAKmN,MACHI,EAAAhD,eAAekpG,gCACf1B,EAAGlnG,MAAM8sG,EAAeC,GAAc,YAItC7kG,EAAQzF,EAAAjL,YAAYof,KACtBzhB,KAAKmN,MACHI,EAAAhD,eAAekpG,gCACf1B,EAAGlnG,MAnRW,EACF,GAkRgB,OAI5BkI,EAAQzF,EAAAjL,YAAYqf,KACtB1hB,KAAKmN,MACHI,EAAAhD,eAAekpG,gCACf1B,EAAGlnG,MAAM8lC,EAAUqnE,GAAS,OAIhC,IAAIn5F,EAA8B,KAUlC,GATIkzF,EAAGr1C,KAAKva,EAAAC,MAAMgZ,WAChBp7D,KAAKmN,MACHI,EAAAhD,eAAeouG,sCACf5G,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAGtBgiD,EAAGr1C,KAAKva,EAAAC,MAAMmW,eAChBxlD,GAASzF,EAAAjL,YAAY2yG,qBAEnBjD,EAAGr1C,KAAKva,EAAAC,MAAM6Y,QAEhB,KADAp8C,EAAO7e,KAAK4zG,UAAU7B,IACX,OAAO,UAElB/xG,KAAKmN,MACHI,EAAAhD,eAAeq2D,cACfmxC,EAAGlnG,SAGP,IAAIsc,EAAiC,KACrC,GAAI4qF,EAAGr1C,KAAKva,EAAAC,MAAMuW,WAChBxxC,EAAcnnB,KAAKk1G,gBAAgBnD,IACjB,OAAO,KAE3B,IAAIlnG,EAAQknG,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,KAC7Bh9C,EAAQzF,EAAAjL,YAAY2yG,sBAA0BjiG,EAAQzF,EAAAjL,YAAYyf,QAAWwvF,GAAenqF,IAC/FnnB,KAAKmN,MACHI,EAAAhD,eAAe4qG,iEACftqG,GAGJ,IAAI+tG,EAAWnrG,EAAAwF,KAAKs4C,uBAClB3qD,EACAie,EACAsI,EACAhH,EACApN,EACAlI,GAGF,OADAknG,EAAGr1C,KAAKva,EAAAC,MAAM8Y,WACP09C,EApEP54G,KAAKmN,MACHI,EAAAhD,eAAe0rE,gFACfr1E,EAAKiK,OAoET,OAAO,MAGT0mG,EAAAtvG,UAAAi2G,+BAAA,SAA+BnG,EAAe5xF,GAIxCA,GAAcA,EAAWlU,QAC3BjM,KAAKmN,MACHI,EAAAhD,eAAempG,8BACfvxD,EAAA1mC,MAAMhP,KAAK0T,EAAW,GAAGtV,MAAOsV,EAAWA,EAAWlU,OAAS,GAAGpB,QAItE,IAAIqB,EAAQ6lG,EAAGp4C,SACf,GAAIo4C,EAAGt1C,iBAEL,GAAU,OADDs1C,EAAG90C,iBAEV,GAAI80C,EAAGr1C,KAAKva,EAAAC,MAAM6Y,OAAQ,CACxB,IAAInP,EAAU9rD,KAAK4zG,UAAU7B,GAC7B,IAAKjmD,EAAS,OAAO,KACrB,GAAIA,EAAQt1C,MAAQ/I,EAAAgJ,SAASm3C,KAK3B,OAJA5tD,KAAKmN,MACHI,EAAAhD,eAAeq2D,cACfmxC,EAAGlnG,SAEE,KAET,GAAIknG,EAAGr1C,KAAKva,EAAAC,MAAMkZ,cAAe,CAC/B,GAAIy2C,EAAGr1C,KAAKva,EAAAC,MAAM6Y,OAAQ,CACxB,IAAIlP,EAAY/rD,KAAK4zG,UAAU7B,GAC/B,OAAKhmD,EACEt+C,EAAAwF,KAAK44C,gCAA0CC,EAASC,EAAWgmD,EAAGlnG,MAAMqB,EAAO6lG,EAAGhiD,MADtE,KAGvB/vD,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,UAIhB7K,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,UAIhB7K,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,UAIhB7K,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,YAIhB7K,KAAKmN,MACHI,EAAAhD,eAAe4pG,oBACfpC,EAAGlnG,SAGP,OAAO,MAGT0mG,EAAAtvG,UAAAixG,eAAA,SACEnB,EACAh/F,EACAoN,EACA8xF,GAKA,GAAIF,EAAGt1C,iBAAkB,CACvB,IAAIppD,EAAa5F,EAAAwF,KAAKE,2BAA2B4+F,EAAG90C,iBAAkB80C,EAAGlnG,SACzE,GAAIknG,EAAGr1C,KAAKva,EAAAC,MAAMmZ,WAAY,CAS5B,IARA,IAAI78C,EAAU,IAAI3X,MACduN,EAAc7G,EAAAwF,KAAKa,2BACrBT,EACAqL,EACAyB,EACApN,EACAg/F,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,OAEhBgiD,EAAGr1C,KAAKva,EAAAC,MAAMoZ,aAAa,CACjC,IAAIt9C,EAASle,KAAKgyG,uBAAuBD,EAAIz9F,GAC7C,GAAI4J,EAAQQ,EAAQlS,KAAK0R,QAGvB,GADAle,KAAKmyG,cAAcJ,GACfA,EAAGr1C,KAAKva,EAAAC,MAAM+Z,WAKhB,OAJAn8D,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,KAEP,KAMb,OAFAyJ,EAAYzJ,MAAMsB,IAAM4lG,EAAGhiD,IAC3BgiD,EAAGr1C,KAAKva,EAAAC,MAAM8Y,WACP5mD,EAEPtU,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,UAIhB7K,KAAKmN,MACHI,EAAAhD,eAAe4pG,oBACfpC,EAAGlnG,SAGP,OAAO,MAGT0mG,EAAAtvG,UAAAuxG,YAAA,SACEzB,EACAE,EACAloD,GAKA,IAAI3lC,EAAuC,KAC3C,GAAI2tF,EAAGr1C,KAAKva,EAAAC,MAAMmZ,WAAY,CAE5B,IADA,IAAI78C,EAAU,IAAI3X,OACVgrG,EAAGr1C,KAAKva,EAAAC,MAAMoZ,aAAa,CACjC,IAAIt9C,EAASle,KAAK64G,kBAAkB9G,GACpC,IAAK7zF,EAAQ,OAAO,KAEpB,GADAQ,EAAQlS,KAAK0R,IACR6zF,EAAGr1C,KAAKva,EAAAC,MAAM0M,OAAQ,CACzB,GAAIijD,EAAGr1C,KAAKva,EAAAC,MAAMoZ,YAChB,MAMA,OAJAx7D,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,KAEP,MAIb,GAAIknG,EAAGr1C,KAAKva,EAAAC,MAAM2T,MAAO,CACvB,IAAIg8C,EAAGr1C,KAAKva,EAAAC,MAAM+X,eAOhB,OAJAn6D,KAAKmN,MACHI,EAAAhD,eAAe+Y,wBACfyuF,EAAGlnG,SAEE,KANPuZ,EAAO3W,EAAAwF,KAAKg1C,8BAA8B8pD,EAAGl+D,aAAck+D,EAAGlnG,SAgBlE,OALqB,QADjBoZ,GADAwvB,EAAMhmC,EAAAwF,KAAK62C,sBAAsBprC,EAAS0F,EAAM2lC,EAAWgoD,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,OAC9D9rC,eACOjkB,KAAKyxG,QAAQl9F,IAAI0P,KAC7CjkB,KAAKwxG,QAAQhlG,KAAKyX,GAClBjkB,KAAKyxG,QAAQ18F,IAAIkP,IAEnB8tF,EAAGr1C,KAAKva,EAAAC,MAAM8Y,WACPznB,EACF,GAAIs+D,EAAGr1C,KAAKva,EAAAC,MAAMwV,UACvB,GAAIm6C,EAAGr1C,KAAKva,EAAAC,MAAM2T,MAAO,CACvB,GAAIg8C,EAAGr1C,KAAKva,EAAAC,MAAM+X,eAAgB,CAChC/1C,EAAO3W,EAAAwF,KAAKg1C,8BAA8B8pD,EAAGl+D,aAAck+D,EAAGlnG,SAC9D,IAAI4oC,EAAMhmC,EAAAwF,KAAK62C,sBAAsB,KAAM1lC,EAAM2lC,EAAWgoD,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAC9E9rC,EAAe/Z,OAAOupC,EAAIxvB,cAC1BxY,EAASsmG,EAAGtmG,OAQhB,OAPKA,EAAOokD,cAAapkD,EAAOokD,YAAc,IAAI5oD,KAClDwE,EAAOokD,YAAY96C,IAAIkP,GAClBjkB,KAAKyxG,QAAQl9F,IAAI0P,KACpBjkB,KAAKwxG,QAAQhlG,KAAKyX,GAClBjkB,KAAKyxG,QAAQ18F,IAAIkP,IAEnB8tF,EAAGr1C,KAAKva,EAAAC,MAAM8Y,WACPznB,EAEPzzC,KAAKmN,MACHI,EAAAhD,eAAe+Y,wBACfyuF,EAAGlnG,cAIP7K,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,aAIhB7K,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,KAGhB,OAAO,MAGT0mG,EAAAtvG,UAAA42G,kBAAA,SACE9G,GAKA,GAAIA,EAAGt1C,iBAAkB,CACvB,IAAIppD,EAAa5F,EAAAwF,KAAKE,2BAA2B4+F,EAAG90C,iBAAkB80C,EAAGlnG,SACrEiuG,EAA4C,KAChD,GAAI/G,EAAGr1C,KAAKva,EAAAC,MAAMgT,IAAK,CACrB,IAAI28C,EAAGt1C,eAAeta,EAAA+S,mBAAmB6G,QAOvC,OAJA/7D,KAAKmN,MACHI,EAAAhD,eAAe4pG,oBACfpC,EAAGlnG,SAEE,KANPiuG,EAAerrG,EAAAwF,KAAKE,2BAA2B4+F,EAAG90C,iBAAkB80C,EAAGlnG,SAS3E,OAAO4C,EAAAwF,KAAKw3C,mBACVp3C,EACAylG,EACAA,EACI32D,EAAA1mC,MAAMhP,KAAK4G,EAAWxI,MAAOiuG,EAAajuG,OAC1CwI,EAAWxI,OAQnB,OALE7K,KAAKmN,MACHI,EAAAhD,eAAe4pG,oBACfpC,EAAGlnG,SAGA,MAGT0mG,EAAAtvG,UAAAsxG,wBAAA,SACExB,EACAE,EACAK,EACAC,GAKA,IAAI3xG,EAAOmxG,EAAG90C,iBACVpyD,EAAQknG,EAAGlnG,QACX4oC,EAAMhmC,EAAAwF,KAAK62C,sBAAsB,CACnCr8C,EAAAwF,KAAKw3C,mBACHh9C,EAAAwF,KAAKE,2BAA2BvS,EAAMiK,GACtC4C,EAAAwF,KAAKE,2BAA2B,UAAW4+F,EAAGlnG,MAAMynG,EAAcC,IAClE1nG,IAED,MAAM,EAAOknG,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAEtC,OADAgiD,EAAGr1C,KAAKva,EAAAC,MAAM8Y,WACPznB,GAGT89D,EAAAtvG,UAAAmxG,YAAA,SACErB,GAOA,IAAIE,EAAWF,EAAGp4C,SACdj7C,EAAsC,KACtC+F,EAA6C,KAC7Cs0F,GAAW,EACf,GAAIhH,EAAGr1C,KAAKva,EAAAC,MAAMmZ,WAEhB,IADA78C,EAAU,IAAI3X,OACNgrG,EAAGr1C,KAAKva,EAAAC,MAAMoZ,aAAa,CACjC,IAAIt9C,EAASle,KAAKg5G,uBAAuBjH,GACzC,IAAK7zF,EAAQ,OAAO,KAEpB,GADAQ,EAAQlS,KAAK0R,IACR6zF,EAAGr1C,KAAKva,EAAAC,MAAM0M,OAAQ,CACzB,GAAIijD,EAAGr1C,KAAKva,EAAAC,MAAMoZ,YAChB,MAMA,OAJAx7D,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,KAEP,WAIR,GAAIknG,EAAGr1C,KAAKva,EAAAC,MAAMwV,UAAW,CAClC,IAAIm6C,EAAGr1C,KAAKva,EAAAC,MAAMgT,IAehB,OAJAp1D,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,MAEP,KAdP,IAAIknG,EAAGt1C,iBAOL,OAJAz8D,KAAKmN,MACHI,EAAAhD,eAAe4pG,oBACfpC,EAAGlnG,SAEE,KANP4Z,EAAgBhX,EAAAwF,KAAKE,2BAA2B4+F,EAAG90C,iBAAkB80C,EAAGlnG,cAevE,GAAIknG,EAAGr1C,KAAKva,EAAAC,MAAMM,WAAYP,EAAA+S,mBAAmB8G,QAAS,CAC/D,IAAIp7D,EAAOmxG,EAAG90C,iBACVpyD,EAAQknG,EAAGlnG,QAQf,GAPA6T,EAAU,CACRjR,EAAAwF,KAAKk4C,wBACH19C,EAAAwF,KAAKE,2BAA2B,UAAWtI,GAC3C4C,EAAAwF,KAAKE,2BAA2BvS,EAAMiK,GACtCA,IAGAknG,EAAGr1C,KAAKva,EAAAC,MAAM0M,OAMhB,OAJA9uD,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8wF,EAAGlnG,SAEE,UAGTkuG,GAAW,EAGb,GAAIA,GAAYhH,EAAGr1C,KAAKva,EAAAC,MAAM2T,MAAO,CACnC,GAAIg8C,EAAGr1C,KAAKva,EAAAC,MAAM+X,eAAgB,CAChC,IAAI/1C,EAAO3W,EAAAwF,KAAKg1C,8BAA8B8pD,EAAGl+D,aAAck+D,EAAGlnG,SAC9D4oC,OAAG,EACHhvB,GACFva,QAAQwU,GACR+0B,EAAMhmC,EAAAwF,KAAKi4C,kCAAkCzmC,EAAeL,EAAM2tF,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,OAExFtc,EAAMhmC,EAAAwF,KAAK83C,sBAAsBrsC,EAAS0F,EAAM2tF,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAExE,IAAI9rC,EAAewvB,EAAIxvB,aAMvB,OALKjkB,KAAKyxG,QAAQl9F,IAAI0P,KACpBjkB,KAAKwxG,QAAQhlG,KAAKyX,GAClBjkB,KAAKyxG,QAAQ18F,IAAIkP,IAEnB8tF,EAAGr1C,KAAKva,EAAAC,MAAM8Y,WACPznB,EAEPzzC,KAAKmN,MACHI,EAAAhD,eAAe+Y,wBACfyuF,EAAGlnG,cAIP7K,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,QAGhB,OAAO,MAGT0mG,EAAAtvG,UAAA+2G,uBAAA,SACEjH,GAKA,GAAIA,EAAGt1C,eAAeta,EAAA+S,mBAAmB6G,QAAS,CAChD,IAAI1oD,EAAa5F,EAAAwF,KAAKE,2BAA2B4+F,EAAG90C,iBAAkB80C,EAAGlnG,SACrEiuG,EAA4C,KAChD,GAAI/G,EAAGr1C,KAAKva,EAAAC,MAAMgT,IAAK,CACrB,IAAI28C,EAAGt1C,iBAOL,OAJAz8D,KAAKmN,MACHI,EAAAhD,eAAe4pG,oBACfpC,EAAGlnG,SAEE,KANPiuG,EAAerrG,EAAAwF,KAAKE,2BAA2B4+F,EAAG90C,iBAAkB80C,EAAGlnG,SAS3E,OAAO4C,EAAAwF,KAAKk4C,wBACV93C,EACAylG,EACAA,EACI32D,EAAA1mC,MAAMhP,KAAK4G,EAAWxI,MAAOiuG,EAAajuG,OAC1CwI,EAAWxI,OAQnB,OALE7K,KAAKmN,MACHI,EAAAhD,eAAe4pG,oBACfpC,EAAGlnG,SAGA,MAGT0mG,EAAAtvG,UAAAkxG,kBAAA,SACEpB,EACAE,GAKA,GAAIF,EAAGt1C,iBAAkB,CACvB,IAAIq8C,EAAerrG,EAAAwF,KAAKE,2BAA2B4+F,EAAG90C,iBAAkB80C,EAAGlnG,SAC3E,GAAIknG,EAAGr1C,KAAKva,EAAAC,MAAMuW,QAAS,CACzB,GAAIo5C,EAAGt1C,iBAAkB,CACvB,IAAIppD,EAAa5F,EAAAwF,KAAKE,2BAA2B4+F,EAAG90C,iBAAkB80C,EAAGlnG,SACrE4oC,EAAMhmC,EAAAwF,KAAKs3C,4BAA4Bl3C,EAAYylG,EAAc/G,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAE3F,OADAgiD,EAAGr1C,KAAKva,EAAAC,MAAM8Y,WACPznB,EAEPzzC,KAAKmN,MACHI,EAAAhD,eAAe4pG,oBACfpC,EAAGlnG,cAIP7K,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,UAIhB7K,KAAKmN,MACHI,EAAAhD,eAAe4pG,oBACfpC,EAAGlnG,SAGP,OAAO,MAGT0mG,EAAAtvG,UAAA+wG,eAAA,SACEjB,EACAkH,QAAA,IAAAA,OAAA,GAKA,IAAIr8C,EAAQm1C,EAAGp1C,OAEXpmD,EAA8B,KAClC,OAFYw7F,EAAG/5F,QAGb,KAAKmqC,EAAAC,MAAMkO,MACT/5C,EAAYvW,KAAKk5G,WAAWnH,GAC5B,MAEF,KAAK5vD,EAAAC,MAAM/iC,MACT9I,EAAYvW,KAAK8yG,cAAcf,EAAIzkG,EAAAjL,YAAYgd,MAAO,KAAM0yF,EAAGp4C,UAC/D,MAEF,KAAKxX,EAAAC,MAAMmO,SACTh6C,EAAYvW,KAAKm5G,cAAcpH,GAC/B,MAEF,KAAK5vD,EAAAC,MAAMoO,GACTj6C,EAAYvW,KAAKo5G,iBAAiBrH,GAClC,MAEF,KAAK5vD,EAAAC,MAAMyO,IACTt6C,EAAYvW,KAAKq5G,kBAAkBtH,GACnC,MAEF,KAAK5vD,EAAAC,MAAM4O,GACTz6C,EAAYvW,KAAKs5G,iBAAiBvH,GAClC,MAEF,KAAK5vD,EAAAC,MAAMgU,IACT7/C,EAAYvW,KAAK8yG,cAAcf,EAAIzkG,EAAAjL,YAAY+zD,IAAK,KAAM27C,EAAGp4C,UAC7D,MAEF,KAAKxX,EAAAC,MAAMwU,IACTrgD,EAAYvW,KAAK8yG,cAAcf,EAAIzkG,EAAAjL,YAAY2Q,KAAM,KAAM++F,EAAGp4C,UAC9D,MAEF,KAAKxX,EAAAC,MAAMmZ,UACThlD,EAAYvW,KAAK+2G,oBAAoBhF,EAAIkH,GACzC,MAEF,KAAK92D,EAAAC,MAAM8O,OACL+nD,GACFj5G,KAAKmN,MACHI,EAAAhD,eAAegvG,2DACfxH,EAAGlnG,SAGP0L,EAAYvW,KAAKq1G,YAAYtD,GAC7B,MAEF,KAAK5vD,EAAAC,MAAM8Y,UACT,OAAOztD,EAAAwF,KAAKu2C,qBAAqBuoD,EAAGlnG,MAAMknG,EAAGp4C,WAE/C,KAAKxX,EAAAC,MAAMgP,OACT76C,EAAYvW,KAAKw5G,qBAAqBzH,GACtC,MAEF,KAAK5vD,EAAAC,MAAMiP,MACT96C,EAAYvW,KAAKy5G,oBAAoB1H,GACrC,MAEF,KAAK5vD,EAAAC,MAAMkP,IACT/6C,EAAYvW,KAAK05G,kBAAkB3H,GACnC,MAEF,KAAK5vD,EAAAC,MAAMoP,KACTj7C,EAAYvW,KAAK25G,mBAAmB5H,GACpC,MAEF,KAAK5vD,EAAAC,MAAMqP,MACTl7C,EAAYvW,KAAK45G,oBAAoB7H,GACrC,MAEF,KAAK5vD,EAAAC,MAAMwL,KACT,GAAImkD,EAAG31C,MAAK,EAAOja,EAAA+S,mBAAmB8G,SAAW7Z,EAAAC,MAAMM,WAAY,CACjEnsC,EAAYvW,KAAKqzG,qBAAqBtB,EAAIzkG,EAAAjL,YAAY2Q,KAAM,KAAM++F,EAAGp4C,UACrE,MAIJ,QACEo4C,EAAG/0C,MAAMJ,GACTrmD,EAAYvW,KAAK65G,yBAAyB9H,GAU9C,OANKx7F,EAIHw7F,EAAGh1C,QAAQH,IAHXm1C,EAAG/0C,MAAMJ,GACT58D,KAAKmyG,cAAcJ,IAIdx7F,GAGTg7F,EAAAtvG,UAAA80G,oBAAA,SACEhF,EACAkH,GAOA,IAFA,IAAIhH,EAAWF,EAAGp4C,SACdtjD,EAAa,IAAItP,OACbgrG,EAAGr1C,KAAKva,EAAAC,MAAMoZ,aAAa,CACjC,IAAIoB,EAAQm1C,EAAGp1C,OACXpmD,EAAYvW,KAAKgzG,eAAejB,EAAIkH,GACxC,GAAK1iG,EAKHw7F,EAAGh1C,QAAQH,GACXvmD,EAAW7J,KAAK+J,OANF,CACd,GAAIw7F,EAAG/6C,OAAS7U,EAAAC,MAAM+Z,UAAW,OAAO,KACxC41C,EAAG/0C,MAAMJ,GACT58D,KAAKmyG,cAAcJ,IAMvB,IAAIt+D,EAAMhmC,EAAAwF,KAAK61C,qBAAqBzyC,EAAY07F,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAEtE,OADAgiD,EAAGr1C,KAAKva,EAAAC,MAAM8Y,WACPznB,GAGT89D,EAAAtvG,UAAAi3G,WAAA,SACEnH,GAKA,IAAI1+F,EAA0C,KAC1C0+F,EAAG31C,MAAK,IAASja,EAAAC,MAAMM,YAAeqvD,EAAGj4C,qBAC3Ci4C,EAAG/5F,KAAKmqC,EAAA+S,mBAAmB8G,QAC3B3oD,EAAa5F,EAAAwF,KAAKE,2BAA2B4+F,EAAG90C,iBAAkB80C,EAAGlnG,UAEvE,IAAI4oC,EAAMhmC,EAAAwF,KAAK+1C,qBAAqB31C,EAAY0+F,EAAGlnG,SAEnD,OADAknG,EAAGr1C,KAAKva,EAAAC,MAAM8Y,WACPznB,GAGT89D,EAAAtvG,UAAAk3G,cAAA,SACEpH,GAKA,IAAI1+F,EAA0C,KAC1C0+F,EAAG31C,MAAK,IAASja,EAAAC,MAAMM,YAAeqvD,EAAGj4C,qBAC3Ci4C,EAAG/5F,KAAKmqC,EAAA+S,mBAAmB8G,QAC3B3oD,EAAa5F,EAAAwF,KAAKE,2BAA2B4+F,EAAG90C,iBAAkB80C,EAAGlnG,UAEvE,IAAI4oC,EAAMhmC,EAAAwF,KAAKm2C,wBAAwB/1C,EAAY0+F,EAAGlnG,SAEtD,OADAknG,EAAGr1C,KAAKva,EAAAC,MAAM8Y,WACPznB,GAGT89D,EAAAtvG,UAAAm3G,iBAAA,SACErH,GAKA,IAAIE,EAAWF,EAAGp4C,SACdpjD,EAAYvW,KAAKgzG,eAAejB,GACpC,IAAKx7F,EAAW,OAAO,KAEvB,GAAIw7F,EAAGr1C,KAAKva,EAAAC,MAAMqP,OAEhB,GAAIsgD,EAAGr1C,KAAKva,EAAAC,MAAMiY,WAAY,CAC5B,IAAIzwB,EAAY5pC,KAAKk1G,gBAAgBnD,GACrC,IAAKnoE,EAAW,OAAO,KAEvB,GAAImoE,EAAGr1C,KAAKva,EAAAC,MAAMkY,YAAa,CAC7B,IAAI7mB,EAAMhmC,EAAAwF,KAAKq2C,kBAA6B/yC,EAAuBqzB,EAAWmoE,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAEpG,OADAgiD,EAAGr1C,KAAKva,EAAAC,MAAM8Y,WACPznB,EAEPzzC,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,UAIhB7K,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,UAIhB7K,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,SAGhB,OAAO,MAGT0mG,EAAAtvG,UAAA43G,yBAAA,SACE9H,GAKA,IAAIprE,EAAO3mC,KAAKk1G,gBAAgBnD,GAChC,IAAKprE,EAAM,OAAO,KAElB,IAAI8M,EAAMhmC,EAAAwF,KAAK03C,0BAA0BhkB,GAEzC,OADAorE,EAAGr1C,KAAKva,EAAAC,MAAM8Y,WACPznB,GAGT89D,EAAAtvG,UAAAo3G,kBAAA,SACEtH,GAKA,IAAIE,EAAWF,EAAGp4C,SAElB,GAAIo4C,EAAGr1C,KAAKva,EAAAC,MAAMiY,WAAY,CAC5B,IAAIlzC,EAAgC,KAEpC,GAAI4qF,EAAGr1C,KAAKva,EAAAC,MAAM/iC,OAChB8H,EAAcnnB,KAAK8yG,cAAcf,EAAIzkG,EAAAjL,YAAYgd,MAAO,KAAM0yF,EAAGp4C,eAC5D,GAAIo4C,EAAGr1C,KAAKva,EAAAC,MAAMgU,KACvBjvC,EAAcnnB,KAAK8yG,cAAcf,EAAIzkG,EAAAjL,YAAY+zD,IAAK,KAAM27C,EAAGp4C,eAC1D,GAAIo4C,EAAGr1C,KAAKva,EAAAC,MAAMwU,KACvBzvC,EAAcnnB,KAAK8yG,cAAcf,EAAIzkG,EAAAjL,YAAY2Q,KAAM,KAAM++F,EAAGp4C,eAE3D,IAAKo4C,EAAGr1C,KAAKva,EAAAC,MAAM8Y,cACxB/zC,EAAcnnB,KAAK65G,yBAAyB9H,IAC1B,OAAO,KAG3B,GAAIA,EAAG/6C,OAAS7U,EAAAC,MAAM8Y,UAAW,CAC/B,IAAItxB,EAAwC,KAC5C,IAAKmoE,EAAGr1C,KAAKva,EAAAC,MAAM8Y,cACjBtxB,EAAY5pC,KAAK65G,yBAAyB9H,IAC1B,OAAO,KAGzB,GAAIA,EAAG/6C,OAAS7U,EAAAC,MAAM8Y,UAAW,CAC/B,IAAIxP,EAAiC,KACrC,IAAKqmD,EAAGr1C,KAAKva,EAAAC,MAAMkY,YAAa,CAE9B,KADA5O,EAAc1rD,KAAKk1G,gBAAgBnD,IACjB,OAAO,KAEzB,IAAKA,EAAGr1C,KAAKva,EAAAC,MAAMkY,YAKjB,OAJAt6D,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,KAEP,KAIX,IAAI0L,EAAYvW,KAAKgzG,eAAejB,GACpC,OAAKx7F,EAEE9I,EAAAwF,KAAKw4C,mBACVtkC,EACAyiB,EACIA,EAAUG,WACV,KACJ2hB,EACAn1C,EACAw7F,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MATD,KAavB/vD,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,UAIhB7K,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,UAIhB7K,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,KAGhB,OAAO,MAGT0mG,EAAAtvG,UAAAq3G,iBAAA,SACEvH,GAKA,IAAIE,EAAWF,EAAGp4C,SAClB,GAAIo4C,EAAGr1C,KAAKva,EAAAC,MAAMiY,WAAY,CAC5B,IAAIzwB,EAAY5pC,KAAKk1G,gBAAgBnD,GACrC,IAAKnoE,EAAW,OAAO,KACvB,GAAImoE,EAAGr1C,KAAKva,EAAAC,MAAMkY,YAAa,CAC7B,IAAI/jD,EAAYvW,KAAKgzG,eAAejB,GACpC,IAAKx7F,EAAW,OAAO,KACvB,IAAIujG,EAAkC,KACtC,OAAI/H,EAAGr1C,KAAKva,EAAAC,MAAMwT,SAChBkkD,EAAgB95G,KAAKgzG,eAAejB,IACT,KAEtBtkG,EAAAwF,KAAK43C,kBACVjhB,EACArzB,EACAujG,EACA/H,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAGxB/vD,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,UAIhB7K,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,KAGhB,OAAO,MAGT0mG,EAAAtvG,UAAAu3G,qBAAA,SACEzH,GAKA,IAAIE,EAAWF,EAAGp4C,SAClB,GAAIo4C,EAAGr1C,KAAKva,EAAAC,MAAMiY,WAAY,CAC5B,IAAIzwB,EAAY5pC,KAAKk1G,gBAAgBnD,GACrC,IAAKnoE,EAAW,OAAO,KACvB,GAAImoE,EAAGr1C,KAAKva,EAAAC,MAAMkY,YAAa,CAC7B,GAAIy3C,EAAGr1C,KAAKva,EAAAC,MAAMmZ,WAAY,CAE5B,IADA,IAAIhP,EAAQ,IAAIxlD,OACRgrG,EAAGr1C,KAAKva,EAAAC,MAAMoZ,aAAa,CACjC,IAAIu+C,EAAQ/5G,KAAKg6G,gBAAgBjI,GACjC,IAAKgI,EAAO,OAAO,KACnBxtD,EAAM//C,KAAiButG,GAEzB,IAAItmE,EAAMhmC,EAAAwF,KAAKq5C,sBAAsB1iB,EAAW2iB,EAAOwlD,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAE7E,OADAgiD,EAAGr1C,KAAKva,EAAAC,MAAM8Y,WACPznB,EAEPzzC,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,UAIhB7K,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,UAIhB7K,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,KAGhB,OAAO,MAGT0mG,EAAAtvG,UAAA+3G,gBAAA,SACEjI,GAGA,IACI17F,EACAE,EAFA07F,EAAWF,EAAGp4C,SAMlB,GAAIo4C,EAAGr1C,KAAKva,EAAAC,MAAMmT,MAAO,CACvB,IAAI/rB,EAAQxpC,KAAKk1G,gBAAgBnD,GACjC,IAAKvoE,EAAO,OAAO,KACnB,GAAIuoE,EAAGr1C,KAAKva,EAAAC,MAAM6Y,OAAQ,CAExB,IADA5kD,EAAa,IAAItP,MACVgrG,EAAG31C,QAAUja,EAAAC,MAAMmT,MAAQw8C,EAAGn4C,WAAazX,EAAAC,MAAMsT,SAAWq8C,EAAGn4C,WAAazX,EAAAC,MAAMoZ,YAAY,CAEnG,KADAjlD,EAAYvW,KAAKgzG,eAAejB,IAChB,OAAO,KACvB17F,EAAW7J,KAAK+J,GAElB,OAAO9I,EAAAwF,KAAKw5C,iBAAiBjjB,EAAOnzB,EAAY07F,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAEtE/vD,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,UAMX,GAAIknG,EAAGr1C,KAAKva,EAAAC,MAAMsT,SAAU,CACjC,GAAIq8C,EAAGr1C,KAAKva,EAAAC,MAAM6Y,OAAQ,CAExB,IADA5kD,EAAa,IAAItP,MACVgrG,EAAG31C,QAAUja,EAAAC,MAAMmT,MAAQw8C,EAAGn4C,WAAazX,EAAAC,MAAMsT,SAAWq8C,EAAGn4C,WAAazX,EAAAC,MAAMoZ,YAAY,CAEnG,KADAjlD,EAAYvW,KAAKgzG,eAAejB,IAChB,OAAO,KACvB17F,EAAW7J,KAAK+J,GAElB,OAAO9I,EAAAwF,KAAKw5C,iBAAiB,KAAMp2C,EAAY07F,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAErE/vD,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,UAIhB7K,KAAKmN,MACHI,EAAAhD,eAAe0vG,0BACflI,EAAGlnG,SAGP,OAAO,MAGT0mG,EAAAtvG,UAAAw3G,oBAAA,SACE1H,GAKA,IAAIE,EAAWF,EAAGp4C,SACd5vB,EAAa/pC,KAAKk1G,gBAAgBnD,GACtC,IAAKhoE,EAAY,OAAO,KACxB,IAAI0J,EAAMhmC,EAAAwF,KAAK05C,qBAAiC5iB,EAAYgoE,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAElF,OADAgiD,EAAGr1C,KAAKva,EAAAC,MAAM8Y,WACPznB,GAGT89D,EAAAtvG,UAAAy3G,kBAAA,SACE3H,GAQA,IACI5tD,EADA8tD,EAAWF,EAAGp4C,SAElB,GAAIo4C,EAAGr1C,KAAKva,EAAAC,MAAMmZ,WAAY,CAE5B,IADA,IAAIllD,EAAa,IAAItP,OACbgrG,EAAGr1C,KAAKva,EAAAC,MAAMoZ,aAAa,CAEjC,KADArX,EAAOnkD,KAAKgzG,eAAejB,IAChB,OAAO,KAClB17F,EAAW7J,KAAgB23C,GAE7B,IAAI2I,EAA6C,KAC7CC,EAAsC,KACtCC,EAAwC,KAC5C,GAAI+kD,EAAGr1C,KAAKva,EAAAC,MAAMoT,OAAQ,CACxB,IAAKu8C,EAAGr1C,KAAKva,EAAAC,MAAMiY,WAKjB,OAJAr6D,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,KAEP,KAET,IAAKknG,EAAGt1C,iBAKN,OAJAz8D,KAAKmN,MACHI,EAAAhD,eAAe4pG,oBACfpC,EAAGlnG,SAEE,KAGT,GADAiiD,EAAgBr/C,EAAAwF,KAAKE,2BAA2B4+F,EAAG90C,iBAAkB80C,EAAGlnG,UACnEknG,EAAGr1C,KAAKva,EAAAC,MAAMkY,YAKjB,OAJAt6D,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,KAEP,KAET,IAAKknG,EAAGr1C,KAAKva,EAAAC,MAAMmZ,WAKjB,OAJAv7D,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,KAEP,KAGT,IADAkiD,EAAkB,IACVglD,EAAGr1C,KAAKva,EAAAC,MAAMoZ,aAAa,CAEjC,KADArX,EAAOnkD,KAAKgzG,eAAejB,IAChB,OAAO,KAClBhlD,EAAgBvgD,KAAgB23C,IAGpC,GAAI4tD,EAAGr1C,KAAKva,EAAAC,MAAM0T,SAAU,CAC1B,IAAKi8C,EAAGr1C,KAAKva,EAAAC,MAAMmZ,WAKjB,OAJAv7D,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,KAEP,KAGT,IADAmiD,EAAoB,IACZ+kD,EAAGr1C,KAAKva,EAAAC,MAAMoZ,aAAa,CAEjC,KADArX,EAAOnkD,KAAKgzG,eAAejB,IAChB,OAAO,KAClB/kD,EAAkBxgD,KAAgB23C,IAGtC,IAAM4I,IAAmBC,EAKvB,OAJAhtD,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,SAEP,KAET,IAAI4oC,EAAMhmC,EAAAwF,KAAK45C,mBACbx2C,EACAy2C,EACAC,EACAC,EACA+kD,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAGxB,OADAgiD,EAAGr1C,KAAKva,EAAAC,MAAM8Y,WACPznB,EAOT,OALEzzC,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,KAGT,MAGT0mG,EAAAtvG,UAAAoxG,qBAAA,SACEtB,EACAh/F,EACAoN,EACA8xF,GAKA,GAAIF,EAAGt1C,iBAAkB,CACvB,IAAI77D,EAAO6M,EAAAwF,KAAKE,2BAA2B4+F,EAAG90C,iBAAkB80C,EAAGlnG,SAC/Dgc,EAA6C,KACjD,GAAIkrF,EAAGr1C,KAAKva,EAAAC,MAAM+U,UAAW,CAE3B,KADAtwC,EAAiB7mB,KAAKs1G,oBAAoBvD,IACrB,OAAO,KAC5Bh/F,GAASzF,EAAAjL,YAAY6S,QAEvB,GAAI68F,EAAGr1C,KAAKva,EAAAC,MAAMuW,QAAS,CACzB,IAAI95C,EAAO7e,KAAK4zG,UAAU7B,GAC1B,IAAKlzF,EAAM,OAAO,KAClB,IAAI40B,EAAMhmC,EAAAwF,KAAKK,sBACb1S,EACAimB,EACAhI,EACAsB,EACApN,EACAg/F,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAGxB,OADAgiD,EAAGr1C,KAAKva,EAAAC,MAAM8Y,WACPznB,EAEPzzC,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,UAIhB7K,KAAKmN,MACHI,EAAAhD,eAAe4pG,oBACfpC,EAAGlnG,SAGP,OAAO,MAGT0mG,EAAAtvG,UAAA03G,mBAAA,SACE5H,GAKA,IAAIE,EAAWF,EAAGp4C,SACd5vB,EAAa/pC,KAAKk1G,gBAAgBnD,EAAE,IACxC,IAAKhoE,EAAY,OAAO,KACxB,IAAI0J,EAAMhmC,EAAAwF,KAAKq6C,oBAAoBvjB,EAAYgoE,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAErE,OADAgiD,EAAGr1C,KAAKva,EAAAC,MAAM8Y,WACPznB,GAGT89D,EAAAtvG,UAAA23G,oBAAA,SACE7H,GAKA,IAAIE,EAAWF,EAAGp4C,SAClB,GAAIo4C,EAAGr1C,KAAKva,EAAAC,MAAMiY,WAAY,CAC5B,IAAItwB,EAAa/pC,KAAKk1G,gBAAgBnD,GACtC,IAAKhoE,EAAY,OAAO,KACxB,GAAIgoE,EAAGr1C,KAAKva,EAAAC,MAAMkY,YAAa,CAC7B,IAAI/jD,EAAYvW,KAAKgzG,eAAejB,GACpC,IAAKx7F,EAAW,OAAO,KACvB,IAAIk9B,EAAMhmC,EAAAwF,KAAKu6C,qBAAqBzjB,EAAYxzB,EAAWw7F,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAEjF,OADAgiD,EAAGr1C,KAAKva,EAAAC,MAAM8Y,WACPznB,EAEPzzC,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,UAIhB7K,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,KAGhB,OAAO,MAMT0mG,EAAAtvG,UAAAi4G,qBAAA,SACEnI,GAGA,IAAI/6C,EAAQ+6C,EAAG/5F,KAAKmqC,EAAA+S,mBAAmB8G,QACnCi2C,EAAWF,EAAGp4C,SACdwgD,EA4sBR,SAAkC3jG,GAChC,OAAQA,GACN,KAAK2rC,EAAAC,MAAM8U,YAAa,SACxB,KAAK/U,EAAAC,MAAM0U,MAAO,SAClB,KAAK3U,EAAAC,MAAMmW,YACX,KAAKpW,EAAAC,MAAMoW,MACX,KAAKrW,EAAAC,MAAMlyC,KACX,KAAKiyC,EAAAC,MAAMhyC,MACX,KAAK+xC,EAAAC,MAAM2V,UACX,KAAK5V,EAAAC,MAAM4V,YACX,KAAK7V,EAAAC,MAAMuU,OACX,KAAKxU,EAAAC,MAAMoP,KACX,KAAKrP,EAAAC,MAAMuT,OAAQ,UACnB,KAAKxT,EAAAC,MAAM8M,IAAK,UAElB,SA3tBmBkrD,CAAyBpjD,GAC1C,GAAc,GAAVmjD,EAA+B,CACjC,IAAIzxD,OAAO,EAKX,OAAIsO,GAAS7U,EAAAC,MAAM8M,KACjBxG,EAAU1oD,KAAKk1G,gBAAgBnD,EAAE,KAE7BrpD,EAAQlyC,MAAQ/I,EAAAgJ,SAASmsC,KACpBn1C,EAAAwF,KAAK8zC,oBACO2B,EAAS3e,WACT2e,EAAS18B,cACT08B,EAAS9lC,UAC1BmvF,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,OAGxB/vD,KAAKmN,MACHI,EAAAhD,eAAe0W,wBACf8wF,EAAGlnG,SAGA,MAdc,MAgBrB69C,EAAU1oD,KAAKk1G,gBAAgBnD,EAAIoI,KAKjCnjD,GAAS7U,EAAAC,MAAM2V,WAAaf,GAAS7U,EAAAC,MAAM4V,aAE3CtP,EAAQlyC,MAAQ/I,EAAAgJ,SAASisC,YACzBgG,EAAQlyC,MAAQ/I,EAAAgJ,SAASosC,eACzB6F,EAAQlyC,MAAQ/I,EAAAgJ,SAASssC,gBAEzB/iD,KAAKmN,MACHI,EAAAhD,eAAe8vG,0FACf3xD,EAAQ79C,OAIP4C,EAAAwF,KAAK21C,4BAA4BoO,EAAOtO,EAASqpD,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,OAhBvD,KAmBzB,IAAIppB,EAA0B,KAC9B,OAAQqwB,GAEN,KAAK7U,EAAAC,MAAME,KAAM,OAAO70C,EAAAwF,KAAKg0C,qBAAqB8qD,EAAGlnG,SACrD,KAAKs3C,EAAAC,MAAMG,KAAM,OAAO90C,EAAAwF,KAAKs1C,qBAAqBwpD,EAAGlnG,SACrD,KAAKs3C,EAAAC,MAAMI,MAAO,OAAO/0C,EAAAwF,KAAKmzC,sBAAsB2rD,EAAGlnG,SAIvD,KAAKs3C,EAAAC,MAAMiY,UAGT,GAAI03C,EAAGr1C,KAAKva,EAAAC,MAAMkY,YAChB,OAAOt6D,KAAKi3G,8BACVlF,EACAtkG,EAAAwF,KAAK2xC,gCAAgCmtD,EAAGlnG,MAAMonG,IAC9C,GAAE,GAIN,IAAIr1C,EAAQm1C,EAAGp1C,OACX29C,GAAQ,EACZ,GACE,OAAQvI,EAAG/5F,KAAKmqC,EAAA+S,mBAAmB8G,SAGjC,KAAK7Z,EAAAC,MAAM8U,YAET,OADA66C,EAAG/0C,MAAMJ,GACF58D,KAAKg3G,wBAAwBjF,GAGtC,KAAK5vD,EAAAC,MAAMM,WAET,OADAqvD,EAAG90C,iBACK80C,EAAG/5F,QAGT,KAAKmqC,EAAAC,MAAMkY,WACT,IACGy3C,EAAGr1C,KAAKva,EAAAC,MAAM6Y,SACd82C,EAAGr1C,KAAKva,EAAAC,MAAM+Y,oBACf,CACAm/C,GAAQ,EACR,MAKJ,KAAKn4D,EAAAC,MAAM6Y,MAET,OADA82C,EAAG/0C,MAAMJ,GACF58D,KAAKg3G,wBAAwBjF,GAGtC,KAAK5vD,EAAAC,MAAMgZ,SACT,GACE22C,EAAGr1C,KAAKva,EAAAC,MAAM6Y,QACd82C,EAAGr1C,KAAKva,EAAAC,MAAM0M,QACdijD,EAAGr1C,KAAKva,EAAAC,MAAMkY,YAGd,OADAy3C,EAAG/0C,MAAMJ,GACF58D,KAAKg3G,wBAAwBjF,GAEtCuI,GAAQ,EACR,MAEF,KAAKn4D,EAAAC,MAAM0M,MACT,MAIF,QACEwrD,GAAQ,EAIZ,MAGF,QACEA,GAAQ,SAILA,GAKT,OAJAvI,EAAG/0C,MAAMJ,IAGTj2B,EAAO3mC,KAAKk1G,gBAAgBnD,IAEvBA,EAAGr1C,KAAKva,EAAAC,MAAMkY,YAOZ7sD,EAAAwF,KAAKo0C,8BAA8B1gB,EAAMorE,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,OANpE/vD,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,KAEP,MANS,KAWpB,KAAKs3C,EAAAC,MAAMiZ,YAET,IADA,IAAItW,EAAqB,IAAIh+C,OACrBgrG,EAAGr1C,KAAKva,EAAAC,MAAMkZ,eAAe,CACnC,GAAIy2C,EAAG31C,QAAUja,EAAAC,MAAM0M,MACrBnoB,EAAO,UAGP,KADAA,EAAO3mC,KAAKk1G,gBAAgBnD,EAAI,IACrB,OAAO,KAGpB,GADAhtD,EAAmBv4C,KAAKm6B,IACnBorE,EAAGr1C,KAAKva,EAAAC,MAAM0M,OAAQ,CACzB,GAAIijD,EAAGr1C,KAAKva,EAAAC,MAAMkZ,cAChB,MAMA,OAJAt7D,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,KAEP,MAIb,OAAO4C,EAAAwF,KAAK4xC,6BAA6BE,EAAoBgtD,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAGrF,KAAK5N,EAAAC,MAAMmZ,UAKT,IAJA,IAAIg/C,EAAWxI,EAAGp4C,SACd7uB,EAAQ,IAAI/jC,MACZqW,EAAS,IAAIrW,MACbnG,OAAI,GACAmxG,EAAGr1C,KAAKva,EAAAC,MAAMoZ,aAAa,CACjC,GAAKu2C,EAAGt1C,iBAWN77D,EAAO6M,EAAAwF,KAAKE,2BAA2B4+F,EAAG90C,iBAAkB80C,EAAGlnG,aAXvC,CACxB,IAAKknG,EAAGr1C,KAAKva,EAAAC,MAAM+X,eAKjB,OAJAn6D,KAAKmN,MACHI,EAAAhD,eAAe4pG,oBACfpC,EAAGlnG,SAEE,MAETjK,EAAO6M,EAAAwF,KAAKE,2BAA2B4+F,EAAGl+D,aAAck+D,EAAGlnG,UACtD45C,UAAW,EAKlB,GADA3Z,EAAMt+B,KAAK5L,GACPmxG,EAAGr1C,KAAKva,EAAAC,MAAM6Y,OAAQ,CACxB,IAAI35D,EAAQtB,KAAKk1G,gBAAgBnD,EAAI,GACrC,IAAKzwG,EAAO,OAAO,KACnB8b,EAAO5Q,KAAKlL,OACP,IAAKV,EAAK6jD,SAOf,OAJAzkD,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,KAEP,KANPuS,EAAO5Q,KAAK5L,GAQd,IAAKmxG,EAAGr1C,KAAKva,EAAAC,MAAM0M,OAAQ,CACzB,GAAIijD,EAAGr1C,KAAKva,EAAAC,MAAMoZ,YAChB,MAMA,OAJAx7D,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,KAEP,MAIb,OAAO4C,EAAAwF,KAAKk0C,8BAA8Brc,EAAO1tB,EAAQ20F,EAAGlnG,MAAM0vG,EAAUxI,EAAGhiD,MAGjF,KAAK5N,EAAAC,MAAM+U,SACT,IAAIjS,EAASllD,KAAK4zG,UAAU7B,GAC5B,OAAK7sD,EACA6sD,EAAGr1C,KAAKva,EAAAC,MAAMgV,cAOnBzwB,EAAO3mC,KAAKk1G,gBAAgBnD,EAAE,KAEvBtkG,EAAAwF,KAAK+xC,0BACVv3C,EAAAkhD,cAAc0vB,OACd13C,EACAue,EACA6sD,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MALN,MAPhB/vD,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,KAEP,MANW,KAiBtB,KAAKs3C,EAAAC,MAAMM,WACT,IAAIrvC,EAAa5F,EAAAwF,KAAKE,2BAA2B4+F,EAAG90C,iBAAkB80C,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAC5F,OAAIgiD,EAAG31C,MAAK,IAASja,EAAAC,MAAM+Y,oBAAuB42C,EAAGj4C,mBAiB9CzmD,EAhBErT,KAAKi3G,8BACVlF,EACAtkG,EAAAwF,KAAK2xC,gCAAgCmtD,EAAGlnG,MAAMonG,IAC9C,CACExkG,EAAAwF,KAAKywC,gBACHrwC,EACA5F,EAAAwF,KAAKM,kBAAkBF,EAAWxI,MAAMw7D,OACxC,KACA54D,EAAAqgD,cAAc4H,QACdriD,EAAWxI,QAEd,EAEDonG,GAKN,KAAK9vD,EAAAC,MAAMkN,KACT,OAAO7hD,EAAAwF,KAAKo1C,qBAAqB0pD,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAEzD,KAAK5N,EAAAC,MAAM5/B,YACT,OAAO/U,EAAAwF,KAAK8yC,4BAA4BgsD,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAEhE,KAAK5N,EAAAC,MAAMY,MAOT,OANI+uD,EAAG31C,QAAUja,EAAAC,MAAMqY,KAAOs3C,EAAGn4C,WAAazX,EAAAC,MAAMiY,WAClDr6D,KAAKmN,MACHI,EAAAhD,eAAeiwG,6DACfzI,EAAGlnG,SAGA4C,EAAAwF,KAAKk1C,sBAAsB4pD,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAE1D,KAAK5N,EAAAC,MAAM+X,cACT,OAAO1sD,EAAAwF,KAAKg1C,8BAA8B8pD,EAAGl+D,aAAck+D,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAEnF,KAAK5N,EAAAC,MAAM4Y,eACT,OAAOvtD,EAAAwF,KAAK4zC,+BAA+BkrD,EAAGj0C,cAAei0C,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAErF,KAAK5N,EAAAC,MAAMoY,aACT,OAAO/sD,EAAAwF,KAAKqzC,6BAA6ByrD,EAAG5yC,YAAa4yC,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAIjF,KAAK5N,EAAAC,MAAMyV,MACT,IAAI4iD,EAAgB1I,EAAGt0C,oBACvB,OAAKs0C,EAAGr1C,KAAKva,EAAAC,MAAMyV,OAOZpqD,EAAAwF,KAAKw0C,8BACVgzD,EACA1I,EAAGn0C,kBACHm0C,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,OATtB/vD,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,KAEP,MAQX,KAAKs3C,EAAAC,MAAM7jC,SACT,OAAOve,KAAKg3G,wBAAwBjF,GAEtC,KAAK5vD,EAAAC,MAAM3jC,MACT,OAAOze,KAAKq3G,qBAAqBtF,GAEnC,QAYE,OAXI/6C,GAAS7U,EAAAC,MAAM+Z,UACjBn8D,KAAKmN,MACHI,EAAAhD,eAAe8yD,uBACf00C,EAAGlnG,MAAMonG,IAGXjyG,KAAKmN,MACHI,EAAAhD,eAAemwG,oBACf3I,EAAGlnG,SAGA,OAKb0mG,EAAAtvG,UAAA04G,qCAAA,SACE5I,GAKA,IAAIn1C,EAAQm1C,EAAGp1C,OACf,IAAKo1C,EAAGr1C,KAAKva,EAAAC,MAAM+U,UAAW,OAAO,KACrC,IAAInrC,EAAyC,KAC7C,EAAG,CACD,GAAI+lF,EAAG31C,SAAWja,EAAAC,MAAMgV,YACtB,MAEF,IAAIv4C,EAAO7e,KAAK4zG,UAAU7B,GAAI,GAAM,GACpC,IAAKlzF,EAEH,OADAkzF,EAAG/0C,MAAMJ,GACF,KAEJ5wC,EACAA,EAAcxf,KAAKqS,GADJmN,EAAgB,CAAEnN,SAE/BkzF,EAAGr1C,KAAKva,EAAAC,MAAM0M,QACvB,OAAIijD,EAAGr1C,KAAKva,EAAAC,MAAMgV,cAAgB26C,EAAGr1C,KAAKva,EAAAC,MAAMiY,WACvCruC,GAET+lF,EAAG/0C,MAAMJ,GACF,OAGT20C,EAAAtvG,UAAA2yG,eAAA,SACE7C,GAMA,IADA,IAAI7tD,EAAO,IAAIn9C,OACPgrG,EAAGr1C,KAAKva,EAAAC,MAAMkY,aAAa,CACjC,IAAI3zB,EAAO3mC,KAAKk1G,gBAAgBnD,EAAI,GACpC,IAAKprE,EAAM,OAAO,KAElB,GADAud,EAAK13C,KAAKm6B,IACLorE,EAAGr1C,KAAKva,EAAAC,MAAM0M,OAAQ,CACzB,GAAIijD,EAAGr1C,KAAKva,EAAAC,MAAMkY,YAChB,MAMA,OAJAt6D,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,KAEP,MAIb,OAAOq5C,GAGTqtD,EAAAtvG,UAAAizG,gBAAA,SACEnD,EACAoI,QAAA,IAAAA,MAAA,GAEAjwG,OAAiB,GAAViwG,GAEP,IAAIxzE,EAAO3mC,KAAKk6G,qBAAqBnI,GACrC,IAAKprE,EAAM,OAAO,KAOlB,IAJA,IACIqwB,EAEA4jD,EAHA3I,GAFJtrE,EAAO3mC,KAAK66G,yBAAyB9I,EAAIprE,IAErB97B,MAAMqB,MAEtB8L,EAA0B,MAG3B4iG,EAAiBE,EAAoB9jD,EAAQ+6C,EAAG31C,UAAY+9C,GAC7D,CAEA,OADApI,EAAG/5F,OACKg/C,GAEN,KAAK7U,EAAAC,MAAMgT,GACT,IAAIlQ,EAASllD,KAAK4zG,UAAU7B,GAC5B,IAAK7sD,EAAQ,OAAO,KACpBve,EAAOl5B,EAAAwF,KAAK+xC,0BACVv3C,EAAAkhD,cAAcyG,GACdzuB,EACAue,EACA6sD,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAExB,MAEF,KAAK5N,EAAAC,MAAMmW,YACT5xB,EAAOl5B,EAAAwF,KAAK+xC,0BACVv3C,EAAAkhD,cAAcqV,QACdr9B,EACA,KACAorE,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAExB,MAGF,KAAK5N,EAAAC,MAAM4M,WACT,IAAIrI,EAAS3mD,KAAK4zG,UAAU7B,GAC5B,IAAKprD,EAAQ,OAAO,KACpBhgB,EAAOl5B,EAAAwF,KAAKyzC,2BACV/f,EACAggB,EACAorD,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAExB,MAGF,KAAK5N,EAAAC,MAAMiZ,YAET,KADArjD,EAAOhY,KAAKk1G,gBAAgBnD,IACjB,OAAO,KAClB,IAAKA,EAAGr1C,KAAKva,EAAAC,MAAMkZ,cAKjB,OAJAt7D,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,KAEP,KAET87B,EAAOl5B,EAAAwF,KAAKgzC,8BACVtf,EACA3uB,EACA+5F,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAExB,MAGF,KAAK5N,EAAAC,MAAM2V,UACX,KAAK5V,EAAAC,MAAM4V,YAEPrxB,EAAKnwB,MAAQ/I,EAAAgJ,SAASisC,YACtB/b,EAAKnwB,MAAQ/I,EAAAgJ,SAASosC,eACtBlc,EAAKnwB,MAAQ/I,EAAAgJ,SAASssC,gBAEtB/iD,KAAKmN,MACHI,EAAAhD,eAAe8vG,0FACf1zE,EAAK97B,OAGT87B,EAAOl5B,EAAAwF,KAAKw1C,6BACVuO,EACArwB,EACAorE,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAExB,MAGF,KAAK5N,EAAAC,MAAMgZ,SACT,IAAItT,EAAS9nD,KAAKk1G,gBAAgBnD,GAClC,IAAKjqD,EAAQ,OAAO,KACpB,IAAKiqD,EAAGr1C,KAAKva,EAAAC,MAAM6Y,OAKjB,OAJAj7D,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,KAEP,KAET,IAAIk9C,EAAS/nD,KAAKk1G,gBAAgBnD,EAAIoI,EAAU,EAC5C,EACD,GAEH,IAAKpyD,EAAQ,OAAO,KACpBphB,EAAOl5B,EAAAwF,KAAK40C,wBACVlhB,EACAmhB,EACAC,EACAgqD,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAExB,MAGF,KAAK5N,EAAAC,MAAM0M,MACT,IAAIisD,EAA2B,CAAEp0E,GACjC,EAAG,CAED,KADAA,EAAO3mC,KAAKk1G,gBAAgBnD,EAAI,IACrB,OAAO,KAClBgJ,EAAWvuG,KAAKm6B,SACTorE,EAAGr1C,KAAKva,EAAAC,MAAM0M,QACvBnoB,EAAOl5B,EAAAwF,KAAK2yC,sBAAsBm1D,EAAYhJ,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MACpE,MAEF,QAGE,GAAIiH,GAAS7U,EAAAC,MAAMqY,IAAK,CACtB,GAAIs3C,EAAGt1C,iBACLzkD,EAAOvK,EAAAwF,KAAKE,2BAA2B4+F,EAAG90C,iBAAkB80C,EAAGlnG,cAO/D,KALAmN,EAAOhY,KAAKk1G,gBAAgBnD,EAC1BiJ,EAAmBhkD,GACf4jD,EACAA,EAAiB,IAEZ,OAAO,KAEpB,GAAI5iG,EAAKxB,MAAQ/I,EAAAgJ,SAASisC,WACxB/b,EAAOl5B,EAAAwF,KAAKs0C,+BACV5gB,EACsB3uB,EACtB+5F,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,UAEnB,IAAI/3C,EAAKxB,MAAQ/I,EAAAgJ,SAASmsC,KAQ/B,OAJA5iD,KAAKmN,MACHI,EAAAhD,eAAe4pG,oBACfn8F,EAAKnN,OAEA,KANP,KADA87B,EAAO3mC,KAAKi7G,iBAAiBlJ,EAAIE,EAAUtrE,EAAsB3uB,IACtD,OAAO,UAUf,CAML,KALAA,EAAOhY,KAAKk1G,gBAAgBnD,EAC1BiJ,EAAmBhkD,GACf4jD,EACAA,EAAiB,IAEZ,OAAO,KAClBj0E,EAAOl5B,EAAAwF,KAAKmyC,uBAAuB4R,EAAOrwB,EAAM3uB,EAAM+5F,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,OAKlFppB,EAAO3mC,KAAK66G,yBAAyB9I,EAAIprE,GAE3C,OAAOA,GAGD4qE,EAAAtvG,UAAAg5G,iBAAR,SACElJ,EACAE,EACAtrE,EACAnmC,GAEA,IAAI06G,EAAS16G,EAAKupC,WAClB,OAAQmxE,EAAO1kG,MACb,KAAK/I,EAAAgJ,SAASisC,WACZliD,EAAKupC,WAAat8B,EAAAwF,KAAKs0C,+BACrB5gB,EACsBu0E,EACtBnJ,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,MAExB,MAEF,KAAKtiD,EAAAgJ,SAASmsC,KACZ,IAAIu4D,EAAQn7G,KAAKi7G,iBAAiBlJ,EAAIE,EAAUtrE,EAAsBu0E,GACtE,IAAKC,EAAO,OAAO,KACnB36G,EAAKupC,WAAaoxE,EAClB36G,EAAKqK,MAAQknG,EAAGlnG,MAAMonG,EAAUF,EAAGhiD,KACnC,MAEF,QAKE,OAJA/vD,KAAKmN,MACHI,EAAAhD,eAAe4pG,oBACf3zG,EAAKqK,OAEA,KAGX,OAAOrK,GAGD+wG,EAAAtvG,UAAA44G,yBAAR,SACE9I,EACAprE,GAEA,GAAIl5B,EAAAg1C,eAAe9b,EAAKnwB,MAEtB,IADA,IAAIwV,EAAyC,KAE3C+lF,EAAGr1C,KAAKva,EAAAC,MAAMiY,YAEd5sD,EAAAw1C,sBAAsBtc,EAAKnwB,OAA6E,QAAnEwV,EAAgBhsB,KAAK26G,qCAAqC5I,KAC/F,CACA,IAAI7tD,EAAOlkD,KAAK40G,eAAe7C,GAC/B,IAAK7tD,EAAM,MACXvd,EAAOl5B,EAAAwF,KAAKsyC,qBACV5e,EACA3a,EACAk4B,EACA6tD,EAAGlnG,MAAM87B,EAAK97B,MAAMqB,MAAO6lG,EAAGhiD,MAIpC,OAAOppB,GAIT4qE,EAAAtvG,UAAAkwG,cAAA,SAAcJ,GAGZ,IAFAA,EAAG31C,MAAK,GACJ21C,EAAGj4C,oBAAoBi4C,EAAG/5F,SAC3B,CACD,IAAI4hD,EAAYm4C,EAAG31C,MAAK,GACxB,GACExC,GAAazX,EAAAC,MAAM+Z,WACnBvC,GAAazX,EAAAC,MAAM8Y,UACnB,CACA62C,EAAG/5F,OACH,MAEF,GAAI+5F,EAAGj4C,mBAAoB,MAC3B,OAAQi4C,EAAG/5F,QACT,KAAKmqC,EAAAC,MAAMM,WACTqvD,EAAG90C,iBACH,MAEF,KAAK9a,EAAAC,MAAM+X,cACT43C,EAAGl+D,aACH,MAEF,KAAKsO,EAAAC,MAAM4Y,eACT+2C,EAAGj0C,cACH,MAEF,KAAK3b,EAAAC,MAAMoY,aACTu3C,EAAG5yC,YACH,MAEF,KAAKhd,EAAAC,MAAMmZ,UACTv7D,KAAKo7G,UAAUrJ,MAQvBR,EAAAtvG,UAAAm5G,UAAA,SAAUrJ,GAER,IAAIsJ,EAAQ,EACRf,GAAQ,EACZ,GACE,OAAQvI,EAAG/5F,QACT,KAAKmqC,EAAAC,MAAM+Z,UACTn8D,KAAKmN,MACHI,EAAAhD,eAAeuwD,YACfi3C,EAAGlnG,QAAS,KAEdyvG,GAAQ,EACR,MAEF,KAAKn4D,EAAAC,MAAMmZ,YACP8/C,EACF,MAEF,KAAKl5D,EAAAC,MAAMoZ,aACP6/C,IACUf,GAAQ,GACpB,MAEF,KAAKn4D,EAAAC,MAAMM,WACTqvD,EAAG90C,iBACH,MAEF,KAAK9a,EAAAC,MAAM+X,cACT43C,EAAGl+D,aACH,MAEF,KAAKsO,EAAAC,MAAM4Y,eACT+2C,EAAGj0C,cACH,MAEF,KAAK3b,EAAAC,MAAMoY,aACTu3C,EAAG5yC,mBAIAm7C,IAEb/I,EA5sHA,CAA4BhkG,EAAAX,mBA4vH5B,SAASkuG,EAAoBtkG,GAC3B,OAAQA,GACN,KAAK2rC,EAAAC,MAAM0M,MAAO,SAClB,KAAK3M,EAAAC,MAAMuW,OACX,KAAKxW,EAAAC,MAAMwW,YACX,KAAKzW,EAAAC,MAAMyW,aACX,KAAK1W,EAAAC,MAAM2W,yBACX,KAAK5W,EAAAC,MAAM0W,gBACX,KAAK3W,EAAAC,MAAM4W,aACX,KAAK7W,EAAAC,MAAM6W,eACX,KAAK9W,EAAAC,MAAM8W,yBACX,KAAK/W,EAAAC,MAAM+W,+BACX,KAAKhX,EAAAC,MAAMgX,2CACX,KAAKjX,EAAAC,MAAMiX,iBACX,KAAKlX,EAAAC,MAAMmX,aACX,KAAKpX,EAAAC,MAAMkX,WAAY,SACvB,KAAKnX,EAAAC,MAAMgZ,SAAU,SACrB,KAAKjZ,EAAAC,MAAMsW,QAAS,SACpB,KAAKvW,EAAAC,MAAMqW,oBAAqB,SAChC,KAAKtW,EAAAC,MAAMiW,IAAK,SAChB,KAAKlW,EAAAC,MAAMkW,MAAO,SAClB,KAAKnW,EAAAC,MAAMgW,UAAW,UACtB,KAAKjW,EAAAC,MAAMmV,cACX,KAAKpV,EAAAC,MAAMoV,mBACX,KAAKrV,EAAAC,MAAMqV,qBACX,KAAKtV,EAAAC,MAAMsV,0BAA2B,UACtC,KAAKvV,EAAAC,MAAMgT,GACX,KAAKjT,EAAAC,MAAM6T,GACX,KAAK9T,EAAAC,MAAM4M,WACX,KAAK7M,EAAAC,MAAM+U,SACX,KAAKhV,EAAAC,MAAMgV,YACX,KAAKjV,EAAAC,MAAMiV,gBACX,KAAKlV,EAAAC,MAAMkV,mBAAoB,UAC/B,KAAKnV,EAAAC,MAAM6V,kBACX,KAAK9V,EAAAC,MAAM8V,wBACX,KAAK/V,EAAAC,MAAM+V,oCAAqC,UAChD,KAAKhW,EAAAC,MAAMlyC,KACX,KAAKiyC,EAAAC,MAAMhyC,MAAO,UAClB,KAAK+xC,EAAAC,MAAMwV,SACX,KAAKzV,EAAAC,MAAMyV,MACX,KAAK1V,EAAAC,MAAM0V,QAAS,UACpB,KAAK3V,EAAAC,MAAMuV,kBAAmB,UAC9B,KAAKxV,EAAAC,MAAM2V,UACX,KAAK5V,EAAAC,MAAM4V,YAAa,UACxB,KAAK7V,EAAAC,MAAMqY,IACX,KAAKtY,EAAAC,MAAM8M,IACX,KAAK/M,EAAAC,MAAMiZ,YACX,KAAKlZ,EAAAC,MAAMmW,YAAa,UAE1B,SAIF,SAASyiD,EAAmBxkG,GAC1B,OAAQA,GACN,KAAK2rC,EAAAC,MAAMuW,OACX,KAAKxW,EAAAC,MAAMwW,YACX,KAAKzW,EAAAC,MAAMyW,aACX,KAAK1W,EAAAC,MAAM2W,yBACX,KAAK5W,EAAAC,MAAM0W,gBACX,KAAK3W,EAAAC,MAAM4W,aACX,KAAK7W,EAAAC,MAAM6W,eACX,KAAK9W,EAAAC,MAAM8W,yBACX,KAAK/W,EAAAC,MAAM+W,+BACX,KAAKhX,EAAAC,MAAMgX,2CACX,KAAKjX,EAAAC,MAAMiX,iBACX,KAAKlX,EAAAC,MAAMmX,aACX,KAAKpX,EAAAC,MAAMkX,WACX,KAAKnX,EAAAC,MAAMgZ,SACX,KAAKjZ,EAAAC,MAAMuV,kBAAmB,OAAO,EACrC,QAAS,OAAO,GAl0HPj4D,EAAA6xG,SA+sHb,SAAkB+J,GAChBA,IAAA,eACAA,IAAA,iBACAA,IAAA,mBACAA,IAAA,iBACAA,IAAA,2BACAA,IAAA,6BACAA,IAAA,2BACAA,IAAA,6BACAA,IAAA,2BACAA,IAAA,6BACAA,IAAA,8BACAA,IAAA,wBACAA,IAAA,4BACAA,IAAA,kBACAA,IAAA,wBACAA,IAAA,oCACAA,IAAA,kCACAA,IAAA,gCACAA,IAAA,kCACAA,IAAA,gBACAA,IAAA,gCACAA,IAAA,wBAtBF,CAAkB57G,EAAA47G,aAAA57G,EAAA47G,WAAU,2HClyH5Bn7G,EAAA,IACAA,EAAA,IACAA,EAAA,IACAA,EAAA,IAEA,IAAAyxD,EAAAzxD,EAAA,GAEAyxD,EAAAvtB,OAAOpiC,UAAU6xC,OAAS,WACxB,OAAOynE,SAASC,WAAWx7G,KAAK6oB,KAAK4yF,eAGvC7pD,EAAAvtB,OAAOpiC,UAAU8xC,QAAU,WACzB,OAAOwnE,SAASC,WAAWx7G,KAAK6oB,KAAK6yF,+BCpBvC,SAAAv8F,GAEA,MAAAo8F,EAAAp8F,EAAAw8F,UAAoCx7G,EAAQ,IAG5C,QAAAyB,KAFAud,EAAAo8F,WAEAA,GACA35G,EAAAsoD,WAAA,cAAAtoD,EAAAsoD,WAAA,gBAAA/qC,EAAAvd,GAAA25G,EAAA35G,IAKAud,EAAAy8F,kBAAAL,EAAAM,QACA18F,EAAA28F,cAAAP,EAAAQ,MACA58F,EAAA68F,cAAAT,EAAAU,SACA98F,EAAA+8F,QAAA,SAAAr0E,EAAA0V,GAAqCg+D,EAAAY,OAAAt0E,GAAA0V,GACrCp+B,EAAAi9F,OAAA,SAAAv0E,GAA+B,OAAA0zE,EAAAY,OAAAt0E,qCCf/BloC,EAAAD,QAAAO,oBCAA,SAAAkf,GAEA,IAAAk9F,EAAA,oBAAAt8C,qBAAA,IAAA5gD,MAAApf,KAEAs8G,EAAAh3G,WAAA,EACAg3G,EAAA92G,eAAA,EACA82G,EAAA72G,gBAAA,EACA62G,EAAA52G,mBAAA,EACA42G,EAAA32G,iBAAA,EACA22G,EAAA12G,4BAAA,EACA02G,EAAAz2G,4BAAA,EACAy2G,EAAAx2G,yBAAA,EACAw2G,EAAAv2G,kBAAA,EACAu2G,EAAAt2G,qBAAA,EAEA,IAAAa,EAAA,IAAAqB,aAAA,GACAzB,EAAA,IAAAsB,YAAAlB,EAAA4L,QA2IA,SAAA8pG,IACApgG,MAAAqgG,kBACArgG,MAAAqgG,kBAAAv8G,KAAAs8G,GAEAt8G,KAAAopE,MAAAppE,KAAAY,KAAA,KAAAZ,KAAA4K,QAAA,UAAAsR,OAAAktD,MAWA,SAAAozC,EAAA5xG,GACA5K,KAAA4K,WAAA,mBACAsR,MAAAqgG,kBACArgG,MAAAqgG,kBAAAv8G,KAAAw8G,GAEAx8G,KAAAopE,MAAAppE,KAAAY,KAAA,KAAAZ,KAAA4K,QAAA,UAAAsR,OAAAktD,MA7JAroE,OAAA07G,iBACAJ,EAAA,YAAA/6G,GAA0C,OAAAA,GAAA,QAC1C,CACAksE,UAAA,CAAgBlsE,OAAA,IAAAo7G,UAAA,GAChBloE,UAAA,CAAgBlzC,MAAA,IAAAo7G,UAAA,KAGhB37G,OAAA07G,iBACAJ,EAAA,aAAA/6G,GAA4C,OAAAA,GAAA,QAC5C,CACAksE,UAAA,CAAgBlsE,OAAA,MAAAo7G,UAAA,GAChBloE,UAAA,CAAgBlzC,MAAA,MAAAo7G,UAAA,KAGhB37G,OAAA07G,iBACAJ,EAAA,IAAAA,EAAA,eAAA/6G,GAAmE,SAAAA,GACnE,CACAksE,UAAA,CAAgBlsE,OAAA,WAAAo7G,UAAA,GAChBloE,UAAA,CAAgBlzC,MAAA,WAAAo7G,UAAA,KAGhB37G,OAAA07G,iBACAJ,EAAA,YAAA/6G,GAA0C,WAAAA,GAC1C,CACAksE,UAAA,CAAgBlsE,MAAA,EAAAo7G,UAAA,GAChBloE,UAAA,CAAgBlzC,MAAA,IAAAo7G,UAAA,KAGhB37G,OAAA07G,iBACAJ,EAAA,aAAA/6G,GAA4C,aAAAA,GAC5C,CACAksE,UAAA,CAAgBlsE,MAAA,EAAAo7G,UAAA,GAChBloE,UAAA,CAAgBlzC,MAAA,MAAAo7G,UAAA,KAGhB37G,OAAA07G,iBACAJ,EAAA,IAAAA,EAAA,eAAA/6G,GAAmE,OAAAA,IAAA,GACnE,CACAksE,UAAA,CAAgBlsE,MAAA,EAAAo7G,UAAA,GAChBloE,UAAA,CAAgBlzC,MAAA,WAAAo7G,UAAA,KAGhB37G,OAAA07G,iBACAJ,EAAA,cAAA/6G,GAA8C,QAAAA,GAC9C,CACAksE,UAAA,CAAgBlsE,OAAA,EAAAo7G,UAAA,GAChBloE,UAAA,CAAgBlzC,OAAA,EAAAo7G,UAAA,KAGhB37G,OAAA07G,iBACAJ,EAAA,aAAA/6G,GAA4C,OAAA+F,KAAAs1G,OAAAr7G,IAC5C,CACAs7G,QAAA,CAAgBt7G,MAAA+F,KAAAs1G,OAAA,cAAAD,UAAA,GAChBlvC,UAAA,CAAgBlsE,MAAA+F,KAAAs1G,OAAA,eAAAD,UAAA,GAChBloE,UAAA,CAAgBlzC,MAAA+F,KAAAs1G,OAAA,cAAAD,UAAA,GAChBG,iBAAA,CAAwBv7G,MAAA+F,KAAAs1G,OAAA,gBAAAD,UAAA,GACxBI,iBAAA,CAAwBx7G,OAAA,SAAAo7G,UAAA,GACxBK,iBAAA,CAAwBz7G,MAAA,SAAAo7G,UAAA,KAGxB37G,OAAA07G,iBACAJ,EAAA,aAAA/6G,GAA4C,OAAAA,GAC5C,CACAs7G,QAAA,CAAgBt7G,MAAA,sBAAAo7G,UAAA,GAChBlvC,UAAA,CAAgBlsE,MAAA,OAAAo7G,UAAA,GAChBloE,UAAA,CAAgBlzC,MAAA,uBAAAo7G,UAAA,GAChBG,iBAAA,CAAwBv7G,MAAA,wBAAAo7G,UAAA,GACxBI,iBAAA,CAAwBx7G,OAAA,iBAAAo7G,UAAA,GACxBK,iBAAA,CAAwBz7G,MAAA,iBAAAo7G,UAAA,KAGxBL,EAAA,IAAAh1G,KAAA21G,MAEAX,EAAA,aAAA/6G,GACA,IAAAZ,EAAA2G,KAAA21G,MAAA17G,MACA,OAAAA,EAAA,GAAAZ,KAGA27G,EAAA,gBAAA/6G,GAGA,kBADAA,GAAA,WADAA,OAAA,gBACAA,IAAA,eACAA,IAAA,oBAGA+6G,EAAA,cAAA/6G,EAAAwrC,GAEA,OAAAxrC,IADAwrC,GAAA,IACAxrC,IAAA,GAAAwrC,GAGAuvE,EAAA,cAAA/6G,EAAAwrC,GAEA,OAAAxrC,KADAwrC,GAAA,IACAxrC,GAAA,GAAAwrC,GAGAuvE,EAAA,IAAAh1G,KAAAimF,IAEA+uB,EAAA,IAAAh1G,KAAA8iE,IAEAkyC,EAAA,IAAAh1G,KAAA2mF,IAEAquB,EAAA,KAAAh1G,KAAA6qD,KAEAmqD,EAAA,MAAAh1G,KAAA8mF,MAGAkuB,EAAA,iBAAA/6G,GACA,WAAA+F,KAAAimF,IAAAhsF,EAAA+F,KAAAioF,MAAAhuF,IACA,EAAA+F,KAAA41G,MAAA,GAAA37G,GAEA+F,KAAA41G,MAAA37G,IAGA+6G,EAAA,gBAAAjyE,EAAAC,EAAAT,GACA,OAAAA,EAAAQ,EAAAC,GAGAgyE,EAAA,KAAAh1G,KAAA8nF,KAEAktB,EAAA,MAAAh1G,KAAAioF,MAEA+sB,EAAA,kBAAA7yG,EAAA0zG,GACA,OAAA71G,KAAAimF,IAAA9jF,GAAAnC,KAAA81G,KAAAD,IAGAb,EAAA,eAAA/6G,GACA,IAAAk4D,EAAAl4D,GAAA,WACAm4D,GAAA,SAAAn4D,IAAA,EAIA,OAFAk4D,GADAl4D,EAAAk4D,EAAAC,IACA,WACAA,GAAA,MAAAn4D,IAAA,KAIA+6G,EAAA,iBAAA/6G,GACA,OAAAA,GAAA,QAAAA,GAAA,iBAAAA,GAUAg7G,EAAAr6G,UAAAlB,OAAAY,OAAAua,MAAAja,WACAq6G,EAAAr6G,UAAArB,KAAA,mBACA07G,EAAAr6G,UAAA2I,QAAA,cAEAyxG,EAAA,uBACA,UAAAC,GAWAE,EAAAv6G,UAAAlB,OAAAY,OAAAua,MAAAja,WACAu6G,EAAAv6G,UAAArB,KAAA,iBAEAy7G,EAAA,gBAAAe,EAAAxyG,GACA,GAAAwyG,EAAA,OAAAA,EACA,UAAAZ,EAAA5xG,IAGAyxG,EAAA,oBAAA/6G,GACA,OAAAA,GAGA+6G,EAAA,kBAAAroE,EAAAqpE,GACA,SAAAC,SAAAtpE,OAAAupE,IAGAz2G,OAAA,uBAAAk3C,GACA,OAAAl3C,OAAA02D,aAAAx3C,MAAAlf,OAAAk3C,IAGAl3C,OAAA,wBAAAk3C,GACA,OAAAl3C,OAAA02G,cAAAx3F,MAAAlf,OAAAk3C,IAGAq+D,EAAA,UAAAoB,OAAApyB,UAEAgxB,EAAA,iBAAA9tG,GACA,uBAAAA,GAGA8tG,EAAA,oBAAA9tG,GACA,UAGA8tG,EAAA,qBAAA9tG,GACA,uBAAAA,GAAA,iBAAAA,GAGA8tG,EAAA,oBAAA9tG,GACA,yBAAAA,GAGA8tG,EAAA,kBAAA9tG,GACA,uBAAAA,gBAAAzH,QAGAu1G,EAAA,QAAAt1G,MAAA6kF,QACAywB,EAAA,qBAAA11E,GACA,OAAAA,GACA,iBAAAA,GACA,iBAAAA,EAAA16B,QACA06B,EAAA16B,QAAA,GACA5E,KAAAioF,MAAA3oD,EAAA16B,UAAA06B,EAAA16B,QAGAlF,MAAApF,OAAA,SAAA+7G,GACA,IAAA1/D,EAAA,IAAAj3C,MAAA22G,GAEA,OADA1/D,EAAA/xC,OAAA,EACA+xC,GAGAq+D,EAAA,mBAAA11E,GACA,gBAAAA,GAGA01E,EAAA,oBAAA11E,GACA,UAGA01E,EAAA,mBAAA11E,GACA,OAAAA,GAGA01E,EAAA,cAAA7yG,EAAA0zG,GACA,OAAA1zG,EAAA0zG,GAGAb,EAAA,eAAA7yG,EAAA0zG,GACA,OAAA71G,KAAAs1G,OAAAnzG,EAAA0zG,IAGAb,EAAA,OAAAh1G,KAEAtG,OAAA07G,iBAAAJ,EAAA,QACAsB,WAAA,CAAer8G,MAAA,EAAAo7G,UAAA,GACfkB,WAAA,CAAet8G,MAAA,EAAAo7G,UAAA,GACfmB,QAAA,CACAv8G,MAAA,SAAAkI,GACiB,OAAjB5C,EAAA,GAAA4C,EAAiBs0G,QAAAt3G,EAAA,QAAAgD,QAGjBu0G,OAAA,CACAz8G,MAAA,SAAAkI,GACAxJ,KAAA29G,WAAAt2G,KAAA22G,IAAAx0G,GACAxJ,KAAA49G,WAAAv2G,KAAA42G,IAAAz0G,OAKA6yG,EAAA,aACA,IAAA6B,EAAA,IAAAv2G,WAAA,GACAw2G,EAAA,EACA,OACAv5E,SAAAy3E,EAAA,4BAAA1wE,GACA,KAAAA,KAAA,YACA,GAAAwyE,EAAAxyE,EAAAuyE,EAAAjyG,OAAA,CACA,IAAAmyG,EAAAF,GACAA,EAAA,IAAAv2G,WAAAN,KAAA8iE,IAAA,MAAA+zC,EAAAjyG,OAAA0/B,EAAA,EAAAuyE,EAAAjyG,UACAiG,IAAAksG,GAEA,IAAAv2E,EAAAs2E,EAEA,OADA,GAAAA,GAAAxyE,KAAAwyE,EAAA,KAAAA,IACAt2E,GAEAw2E,KAAAhC,EAAA,wBAAArtF,EAAA1tB,EAAAqqC,GACAuyE,EAAAG,KAAA/8G,EAAA0tB,IAAA2c,IAEApjC,KAAA8zG,EAAA,wBAAAx0E,KACAy2E,KAAAjC,EAAA,wBAAArtF,EAAAD,EAAA4c,GACAuyE,EAAAK,WAAAvvF,EAAAD,IAAA4c,IAEAqxB,MAAAq/C,EAAA,2BACA6B,EAAA,IAAAv2G,WAAA,GACAw2G,EAAA,KAxBA,GA6BA9B,EAAA,MAAAA,EAAA,kBAAAx0E,EAAAvmC,EAAAmR,GACAyrG,MAAA,EAAAr2E,IAAA,EAAAp1B,IAAAnR,GAGA+6G,EAAA,KAAAA,EAAA,iBAAAx0E,EAAAp1B,GACA,OAAAyrG,MAAA,EAAAr2E,IAAA,EAAAp1B,KAGA4pG,EAAA,2DC1TA,SAAAl9F,GAAA,MAAAvY,EAAA,IAAAqB,aAAA,GACAtB,EAAA,IAAAqB,aAAApB,EAAA4L,QACAtM,EAAA,IAAAuB,WAAAb,EAAA4L,QAEA2M,EAAAq/F,WAAA,SAAAl9G,GAEA,OADAqF,EAAA,GAAArF,EACA4E,EAAA,IAGAiZ,EAAAs/F,WAAA,SAAAn9G,GAEA,OADA4E,EAAA,GAAA5E,EACAqF,EAAA,IAGAwY,EAAAu/F,WAAA,SAAAp9G,GAEA,OADAsF,EAAA,GAAAtF,EACAgU,QAAApP,EAAA,GAAAA,EAAA,KAGAiZ,EAAAw/F,WAAA,SAAAr9G,GAGA,OAFA4E,EAAA,GAAA+pC,QAAA3uC,GACA4E,EAAA,GAAAgqC,SAAA5uC,GACAsF,EAAA,wCCtBA,SAAAuY,GAAA,MAAAy/F,EAAAz/F,EAAAy/F,MAA4Bz+G,EAAQ,IAEpCgf,EAAA+kD,SAAA06C,EAAAC,KAEA1/F,EAAA2/F,QAAAF,EAAAG,IAEA5/F,EAAA7J,QAAA,SAAA0pG,EAAAC,GACA,OAAAL,EAAAM,SAAAF,EAAAC,IAGA9/F,EAAA8wB,QAAA,SAAA3uC,GACA,OAAAA,EAAA69G,KAGAhgG,EAAA+wB,SAAA,SAAA5uC,GACA,OAAAA,EAAA89G,MAGAjgG,EAAAo/C,QAAA,SAAAz3B,EAAAC,GACA,OAAAD,EAAA/xB,IAAAgyB,IAGA5nB,EAAA8kD,QAAA,SAAAn9B,EAAAC,GACA,OAAAD,EAAAu4E,IAAAt4E,IAGA5nB,EAAA0/C,QAAA,SAAA/3B,EAAAC,GACA,OAAAD,EAAAw4E,IAAAv4E,IAGA5nB,EAAAogG,QAAA,SAAAz4E,EAAAC,GACA,OAAAD,EAAA04E,IAAAz4E,IAGA5nB,EAAAsgG,UAAA,SAAA34E,EAAAC,GACA,OAAAD,EAAA44E,aAAAF,IAAAz4E,EAAA24E,cAAAC,YAGAxgG,EAAAygG,QAAA,SAAA94E,EAAAC,GACA,OAAAD,EAAA1+B,IAAA2+B,IAGA5nB,EAAA0gG,UAAA,SAAA/4E,EAAAC,GACA,OAAAD,EAAA44E,aAAAt3G,IAAA2+B,EAAA24E,cAAAC,YAGAxgG,EAAA2gG,QAAA,SAAAh5E,EAAAC,GACA,OAAAD,EAAAi5E,IAAAh5E,IAGA5nB,EAAA6gG,OAAA,SAAAl5E,EAAAC,GACA,OAAAD,EAAAm5E,GAAAl5E,IAGA5nB,EAAA+gG,QAAA,SAAAp5E,EAAAC,GACA,OAAAD,EAAAq5E,IAAAp5E,IAGA5nB,EAAAq/C,QAAA,SAAA13B,EAAAC,GACA,OAAAD,EAAAs5E,IAAAr5E,IAGA5nB,EAAAkhG,QAAA,SAAAv5E,EAAAC,GACA,OAAAD,EAAAw5E,IAAAv5E,IAGA5nB,EAAA6xD,UAAA,SAAAlqC,EAAAC,GACA,OAAAD,EAAAy5E,KAAAx5E,IAGA5nB,EAAAqhG,QAAA,SAAAl/G,GACA,OAAAA,EAAAm/G,OAGAthG,EAAAuhG,OAAA,SAAA55E,EAAAC,GACA,OAAAD,EAAA65E,GAAA55E,IAGA5nB,EAAAyhG,OAAA,SAAA95E,EAAAC,GACA,OAAAD,EAAA+5E,GAAA95E,IAGA5nB,EAAA2xD,UAAA,SAAAxvE,EAAAg1E,GACApsE,OAAAosE,GAAA,IAAAA,IAAA,IACA,IAAA9pC,EAAAoyE,EAAAkC,QAAAxqC,EAAA,GACA,OAAAh1E,EAAAyT,IAAAy3B,GAAAuzE,IAAAvzE,EAAAi0E,QAGAthG,EAAA6jD,UAAA,SAAA1hE,GACA,WAAAA,EAAA89G,MAAA99G,EAAA69G,KAAA,GAAA79G,EAAA69G,KAAAj8G,GAAAsxC,YACA,IAAAlzC,EAAA89G,MAAA99G,EAAA69G,KAAAj8G,GAAAsqE,WAAAlsE,EAAA69G,IAAA,GAGAhgG,EAAA+jD,WAAA,SAAA5hE,GACA,WAAAA,EAAA89G,MAAA99G,EAAA69G,KAAA,GAAA79G,EAAA69G,KAAAh8G,IAAAqxC,YACA,IAAAlzC,EAAA89G,MAAA99G,EAAA69G,KAAAh8G,IAAAqqE,WAAAlsE,EAAA69G,IAAA,GAGAhgG,EAAAikD,WAAA,SAAA9hE,GACA,WAAAA,EAAA89G,MAAA99G,EAAA69G,KAAA,IACA,IAAA79G,EAAA89G,MAAA99G,EAAA69G,IAAA,GAGAhgG,EAAA8jD,UAAA,SAAA3hE,GACA,WAAAA,EAAA89G,MAAA99G,EAAA69G,KAAA,GAAA79G,EAAA69G,KAAA57G,GAAAixC,WAGAr1B,EAAAgkD,WAAA,SAAA7hE,GACA,WAAAA,EAAA89G,MAAA99G,EAAA69G,KAAA,GAAA79G,EAAA69G,KAAA37G,IAAAgxC,WAGAr1B,EAAAkkD,WAAA,SAAA/hE,GACA,WAAAA,EAAA89G,MAGAjgG,EAAAmkD,YAAA,SAAAhiE,GACA,WAAAA,EAAA89G,OAAA,IAAA99G,EAAA69G,KAAA,IAAA79G,EAAA69G,MAGA,MAAA4B,EAAAnC,EAAAoC,WAAAn9G,IAAAi5G,kBACAmE,EAAArC,EAAAoC,WAAAn9G,IAAAk5G,kBAEA59F,EAAA+hG,WAAA,SAAA5/G,GACA,OAAAA,EAAA6/G,IAAAJ,IAAAz/G,EAAA8/G,IAAAH,IAGA,MAAAI,EAAAzC,EAAAoC,WAAAl9G,IAAAg5G,kBACAwE,EAAA1C,EAAAoC,WAAAl9G,IAAAi5G,kBAEA59F,EAAAoiG,WAAA,SAAAjgH,GACA,OAAAA,EAAA6/G,IAAAE,IAAA//G,EAAA8/G,IAAAE,IAGAniG,EAAAmpE,WAAA,SAAAhnF,GACA,OAAA6d,EAAA9X,KAAAs1G,OAAAr7G,EAAAkgH,aAGAriG,EAAAopE,WAAA,SAAAjnF,GACA,OAAAA,EAAAkgH,YAGAriG,EAAAiwF,cAAA,SAAA9tG,EAAAmgH,GACA,OAAAA,EAAAngH,EAAAo+G,aAAAp+G,GAAAkK,SAAA,sCC9IA7L,EAAAD,QAAAk/G,EAKA,IAAA8C,EAAA,KAEA,IACAA,EAAA,IAAAC,YAAAC,SAAA,IAAAD,YAAAt9E,OAAA,IAAA18B,WAAA,CACA,m2BACA,IAASjI,QACR,MAAAogE,IAcD,SAAA8+C,EAAAO,EAAAC,EAAAqC,GAMAzhH,KAAAm/G,IAAA,EAAAA,EAMAn/G,KAAAo/G,KAAA,EAAAA,EAMAp/G,KAAAyhH,aAoCA,SAAAI,EAAAC,GACA,YAAAA,KAAA,YAXAlD,EAAA38G,UAAA8/G,WAEAhhH,OAAAC,eAAA49G,EAAA38G,UAAA,cAAqDX,OAAA,IAkBrDs9G,EAAAiD,SAOA,IAAAG,EAAA,GAOAC,EAAA,GAQA,SAAAnB,EAAAx/G,EAAAmgH,GACA,IAAAK,EAAAI,EAAAC,EACA,OAAAV,GAEAU,EAAA,IADA7gH,KAAA,IACAA,EAAA,OACA4gH,EAAAD,EAAA3gH,IAEA4gH,GAEAJ,EAAA5C,EAAA59G,GAAA,EAAAA,GAAA,WACA6gH,IACAF,EAAA3gH,GAAAwgH,GACAA,IAGAK,GAAA,MADA7gH,GAAA,IACAA,EAAA,OACA4gH,EAAAF,EAAA1gH,IAEA4gH,GAEAJ,EAAA5C,EAAA59G,IAAA,WACA6gH,IACAH,EAAA1gH,GAAAwgH,GACAA,GAmBA,SAAAd,EAAA1/G,EAAAmgH,GACA,GAAAW,MAAA9gH,GACA,OAAAmgH,EAAAY,EAAAxD,EACA,GAAA4C,EAAA,CACA,GAAAngH,EAAA,EACA,OAAA+gH,EACA,GAAA/gH,GAAAghH,EACA,OAAAC,MACK,CACL,GAAAjhH,IAAAkhH,EACA,OAAAh1C,EACA,GAAAlsE,EAAA,GAAAkhH,EACA,OAAAhuE,EAEA,OAAAlzC,EAAA,EACA0/G,GAAA1/G,EAAAmgH,GAAAgB,MACAvD,EAAA59G,EAAAohH,EAAA,EAAAphH,EAAAohH,EAAA,EAAAjB,GAmBA,SAAAvC,EAAAyD,EAAAC,EAAAnB,GACA,WAAA7C,EAAA+D,EAAAC,EAAAnB,GA5CA7C,EAAAkC,UAkCAlC,EAAAoC,aAsBApC,EAAAM,WASA,IAAA2D,EAAAx7G,KAAAc,IASA,SAAA26G,EAAA9uE,EAAAytE,EAAApE,GACA,OAAArpE,EAAA/nC,OACA,MAAAiQ,MAAA,gBACA,WAAA83B,GAAA,aAAAA,GAAA,cAAAA,GAAA,cAAAA,EACA,OAAA6qE,EASA,GARA,iBAAA4C,GAEApE,EAAAoE,EACAA,GAAA,GAEAA,OAEApE,KAAA,IACA,MAAAA,EACA,MAAA0F,WAAA,SAEA,IAAA5gH,EACA,IAAAA,EAAA6xC,EAAA89D,QAAA,QACA,MAAA51F,MAAA,mBACA,OAAA/Z,EACA,OAAA2gH,EAAA9uE,EAAAznC,UAAA,GAAAk1G,EAAApE,GAAAoF,MAQA,IAHA,IAAAO,EAAAhC,EAAA6B,EAAAxF,EAAA,IAEAj4E,EAAAy5E,EACAx+G,EAAA,EAAmBA,EAAA2zC,EAAA/nC,OAAgB5L,GAAA,GACnC,IAAAsrC,EAAAtkC,KAAA2mF,IAAA,EAAAh6C,EAAA/nC,OAAA5L,GACAiB,EAAAg8G,SAAAtpE,EAAAznC,UAAAlM,IAAAsrC,GAAA0xE,GACA,GAAA1xE,EAAA,GACA,IAAAs3E,EAAAjC,EAAA6B,EAAAxF,EAAA1xE,IACAvG,IAAAk6E,IAAA2D,GAAAluG,IAAAisG,EAAA1/G,SAGA8jC,GADAA,IAAAk6E,IAAA0D,IACAjuG,IAAAisG,EAAA1/G,IAIA,OADA8jC,EAAAq8E,WACAr8E,EAoBA,SAAA89E,EAAA3lE,EAAAkkE,GACA,uBAAAlkE,EACAyjE,EAAAzjE,EAAAkkE,GACA,iBAAAlkE,EACAulE,EAAAvlE,EAAAkkE,GAEAvC,EAAA3hE,EAAA4hE,IAAA5hE,EAAA6hE,KAAA,kBAAAqC,IAAAlkE,EAAAkkE,UAfA7C,EAAAkE,aAyBAlE,EAAAsE,YAUA,IAcAR,EAAAS,WAOAb,EAAAI,IAOAF,EAAAF,EAAA,EAOAc,EAAAtC,EA5BA,OAkCAjC,EAAAiC,EAAA,GAMAlC,EAAAC,OAMA,IAAAwD,EAAAvB,EAAA,MAMAlC,EAAAyD,QAMA,IAAAtD,EAAA+B,EAAA,GAMAlC,EAAAG,MAMA,IAAAsE,EAAAvC,EAAA,MAMAlC,EAAAyE,OAMA,IAAAC,EAAAxC,GAAA,GAMAlC,EAAA0E,UAMA,IAAA9uE,EAAA0qE,GAAA,iBAMAN,EAAApqE,YAMA,IAAA+tE,EAAArD,GAAA,SAMAN,EAAA2D,qBAMA,IAAA/0C,EAAA0xC,EAAA,kBAMAN,EAAApxC,YAMA,IAAA+1C,EAAA3E,EAAA38G,UAMAshH,EAAAC,MAAA,WACA,OAAAxjH,KAAAyhH,SAAAzhH,KAAAm/G,MAAA,EAAAn/G,KAAAm/G,KAOAoE,EAAA/B,SAAA,WACA,OAAAxhH,KAAAyhH,UACAzhH,KAAAo/G,OAAA,GAAAsD,GAAA1iH,KAAAm/G,MAAA,GACAn/G,KAAAo/G,KAAAsD,GAAA1iH,KAAAm/G,MAAA,IAUAoE,EAAA/3G,SAAA,SAAA6xG,GAEA,IADAA,KAAA,IACA,MAAAA,EACA,MAAA0F,WAAA,SACA,GAAA/iH,KAAAyjH,SACA,UACA,GAAAzjH,KAAA0jH,aAAA,CACA,GAAA1jH,KAAA2gH,GAAAnzC,GAAA,CAGA,IAAAm2C,EAAA3C,EAAA3D,GACAmC,EAAAx/G,KAAAw/G,IAAAmE,GACAC,EAAApE,EAAAF,IAAAqE,GAAAtE,IAAAr/G,MACA,OAAAw/G,EAAAh0G,SAAA6xG,GAAAuG,EAAAJ,QAAAh4G,SAAA6xG,GAEA,UAAAr9G,KAAAyiH,MAAAj3G,SAAA6xG,GAQA,IAHA,IAAA2F,EAAAhC,EAAA6B,EAAAxF,EAAA,GAAAr9G,KAAAyhH,UACAoC,EAAA7jH,KACAolC,EAAA,KACA,CACA,IAAA0+E,EAAAD,EAAArE,IAAAwD,GAEAe,GADAF,EAAAxE,IAAAyE,EAAAxE,IAAA0D,IAAAQ,UAAA,GACAh4G,SAAA6xG,GAEA,IADAwG,EAAAC,GACAL,SACA,OAAAM,EAAA3+E,EAEA,KAAA2+E,EAAA93G,OAAA,GACA83G,EAAA,IAAAA,EACA3+E,EAAA,GAAA2+E,EAAA3+E,IASAm+E,EAAAS,YAAA,WACA,OAAAhkH,KAAAo/G,MAOAmE,EAAAU,oBAAA,WACA,OAAAjkH,KAAAo/G,OAAA,GAOAmE,EAAAW,WAAA,WACA,OAAAlkH,KAAAm/G,KAOAoE,EAAAY,mBAAA,WACA,OAAAnkH,KAAAm/G,MAAA,GAOAoE,EAAAa,cAAA,WACA,GAAApkH,KAAA0jH,aACA,OAAA1jH,KAAA2gH,GAAAnzC,GAAA,GAAAxtE,KAAAyiH,MAAA2B,gBAEA,IADA,IAAA7mE,EAAA,GAAAv9C,KAAAo/G,KAAAp/G,KAAAo/G,KAAAp/G,KAAAm/G,IACAkF,EAAA,GAAsBA,EAAA,GACtB,IAAA9mE,EAAA,GAAA8mE,GAD+BA,KAG/B,UAAArkH,KAAAo/G,KAAAiF,EAAA,GAAAA,EAAA,GAOAd,EAAAE,OAAA,WACA,WAAAzjH,KAAAo/G,MAAA,IAAAp/G,KAAAm/G,KAOAoE,EAAAe,IAAAf,EAAAE,OAMAF,EAAAG,WAAA,WACA,OAAA1jH,KAAAyhH,UAAAzhH,KAAAo/G,KAAA,GAOAmE,EAAAgB,WAAA,WACA,OAAAvkH,KAAAyhH,UAAAzhH,KAAAo/G,MAAA,GAOAmE,EAAAiB,MAAA,WACA,aAAAxkH,KAAAm/G,MAOAoE,EAAAkB,OAAA,WACA,aAAAzkH,KAAAm/G,MAQAoE,EAAAmB,OAAA,SAAAl2F,GAGA,OAFAqzF,EAAArzF,KACAA,EAAA00F,EAAA10F,KACAxuB,KAAAyhH,WAAAjzF,EAAAizF,UAAAzhH,KAAAo/G,OAAA,OAAA5wF,EAAA4wF,OAAA,SAEAp/G,KAAAo/G,OAAA5wF,EAAA4wF,MAAAp/G,KAAAm/G,MAAA3wF,EAAA2wF,MASAoE,EAAA5C,GAAA4C,EAAAmB,OAOAnB,EAAAoB,UAAA,SAAAn2F,GACA,OAAAxuB,KAAA2gH,GAAAnyF,IASA+0F,EAAAqB,IAAArB,EAAAoB,UAQApB,EAAA1C,GAAA0C,EAAAoB,UAOApB,EAAAsB,SAAA,SAAAr2F,GACA,OAAAxuB,KAAA8kH,KAAAt2F,GAAA,GASA+0F,EAAAwB,GAAAxB,EAAAsB,SAOAtB,EAAAyB,gBAAA,SAAAx2F,GACA,OAAAxuB,KAAA8kH,KAAAt2F,IAAA,GASA+0F,EAAAnC,IAAAmC,EAAAyB,gBAQAzB,EAAA0B,GAAA1B,EAAAyB,gBAOAzB,EAAA2B,YAAA,SAAA12F,GACA,OAAAxuB,KAAA8kH,KAAAt2F,GAAA,GASA+0F,EAAA4B,GAAA5B,EAAA2B,YAOA3B,EAAA6B,mBAAA,SAAA52F,GACA,OAAAxuB,KAAA8kH,KAAAt2F,IAAA,GASA+0F,EAAApC,IAAAoC,EAAA6B,mBAQA7B,EAAA8B,GAAA9B,EAAA6B,mBAQA7B,EAAA+B,QAAA,SAAA92F,GAGA,GAFAqzF,EAAArzF,KACAA,EAAA00F,EAAA10F,IACAxuB,KAAA2gH,GAAAnyF,GACA,SACA,IAAA+2F,EAAAvlH,KAAA0jH,aACA8B,EAAAh3F,EAAAk1F,aACA,OAAA6B,IAAAC,GACA,GACAD,GAAAC,EACA,EAEAxlH,KAAAyhH,SAGAjzF,EAAA4wF,OAAA,EAAAp/G,KAAAo/G,OAAA,GAAA5wF,EAAA4wF,OAAAp/G,KAAAo/G,MAAA5wF,EAAA2wF,MAAA,EAAAn/G,KAAAm/G,MAAA,OAFAn/G,KAAAq/G,IAAA7wF,GAAAk1F,cAAA,KAYAH,EAAAuB,KAAAvB,EAAA+B,QAMA/B,EAAAkC,OAAA,WACA,OAAAzlH,KAAAyhH,UAAAzhH,KAAA2gH,GAAAnzC,GACAA,EACAxtE,KAAAygH,MAAA1rG,IAAAgqG,IAQAwE,EAAAd,IAAAc,EAAAkC,OAOAlC,EAAAxuG,IAAA,SAAA2wG,GACA7D,EAAA6D,KACAA,EAAAxC,EAAAwC,IAIA,IAAAC,EAAA3lH,KAAAo/G,OAAA,GACAwG,EAAA,MAAA5lH,KAAAo/G,KACAyG,EAAA7lH,KAAAm/G,MAAA,GACA2G,EAAA,MAAA9lH,KAAAm/G,IAEA4G,EAAAL,EAAAtG,OAAA,GACA4G,EAAA,MAAAN,EAAAtG,KACA6G,EAAAP,EAAAvG,MAAA,GAGA+G,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAYA,OAVAD,IADAC,GAAAP,GAHA,MAAAJ,EAAAvG,QAIA,GAGAgH,IADAC,GAAAP,EAAAI,KACA,GAGAC,IADAC,GAAAP,EAAAI,KACA,GAEAE,GAAAP,EAAAI,EAEA7G,GANAkH,GAAA,QAMA,IATAC,GAAA,QAQAH,GAAA,QACA,IAHAC,GAAA,OAGAnmH,KAAAyhH,WAQA8B,EAAA+C,SAAA,SAAAC,GAGA,OAFA1E,EAAA0E,KACAA,EAAArD,EAAAqD,IACAvmH,KAAA+U,IAAAwxG,EAAA9D,QASAc,EAAAlE,IAAAkE,EAAA+C,SAOA/C,EAAAiD,SAAA,SAAAC,GACA,GAAAzmH,KAAAyjH,SACA,OAAA5E,EAKA,GAJAgD,EAAA4E,KACAA,EAAAvD,EAAAuD,IAGA/E,EAKA,OAAAxC,EAJAwC,EAAApC,IAAAt/G,KAAAm/G,IACAn/G,KAAAo/G,KACAqH,EAAAtH,IACAsH,EAAArH,MACAsC,EAAAgF,WAAA1mH,KAAAyhH,UAGA,GAAAgF,EAAAhD,SACA,OAAA5E,EACA,GAAA7+G,KAAA2gH,GAAAnzC,GACA,OAAAi5C,EAAAjC,QAAAh3C,EAAAqxC,EACA,GAAA4H,EAAA9F,GAAAnzC,GACA,OAAAxtE,KAAAwkH,QAAAh3C,EAAAqxC,EAEA,GAAA7+G,KAAA0jH,aACA,OAAA+C,EAAA/C,aACA1jH,KAAAyiH,MAAAnD,IAAAmH,EAAAhE,OAEAziH,KAAAyiH,MAAAnD,IAAAmH,GAAAhE,MACK,GAAAgE,EAAA/C,aACL,OAAA1jH,KAAAs/G,IAAAmH,EAAAhE,aAGA,GAAAziH,KAAA+kH,GAAA3B,IAAAqD,EAAA1B,GAAA3B,GACA,OAAApC,EAAAhhH,KAAAwhH,WAAAiF,EAAAjF,WAAAxhH,KAAAyhH,UAKA,IAAAkE,EAAA3lH,KAAAo/G,OAAA,GACAwG,EAAA,MAAA5lH,KAAAo/G,KACAyG,EAAA7lH,KAAAm/G,MAAA,GACA2G,EAAA,MAAA9lH,KAAAm/G,IAEA4G,EAAAU,EAAArH,OAAA,GACA4G,EAAA,MAAAS,EAAArH,KACA6G,EAAAQ,EAAAtH,MAAA,GACAwH,EAAA,MAAAF,EAAAtH,IAEA+G,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAqBA,OAnBAD,IADAC,GAAAP,EAAAa,KACA,GAGAR,IADAC,GAAAP,EAAAc,KACA,GACAP,GAAA,MAEAD,IADAC,GAAAN,EAAAG,KACA,GAGAC,IADAC,GAAAP,EAAAe,KACA,GACAR,GAAA,MAEAD,IADAC,GAAAN,EAAAI,KACA,GACAE,GAAA,MAEAD,IADAC,GAAAL,EAAAE,KACA,GAEAE,GAAAP,EAAAgB,EAAAf,EAAAK,EAAAJ,EAAAG,EAAAF,EAAAC,EAEA7G,GAZAkH,GAAA,QAYA,IAlBAC,GAAA,QAiBAH,GAAA,QACA,IAHAC,GAAA,OAGAnmH,KAAAyhH,WASA8B,EAAAjE,IAAAiE,EAAAiD,SAQAjD,EAAAqD,OAAA,SAAAC,GAGA,GAFAhF,EAAAgF,KACAA,EAAA3D,EAAA2D,IACAA,EAAApD,SACA,MAAAvnG,MAAA,oBAaA,IAWA4qG,EAAAjD,EAAAkD,EArBA,GAAArF,EAIA,OAAA1hH,KAAAyhH,WACA,aAAAzhH,KAAAo/G,OACA,IAAAyH,EAAA1H,MAAA,IAAA0H,EAAAzH,KAUAF,GANAl/G,KAAAyhH,SAAAC,EAAAsF,MAAAtF,EAAAuF,OACAjnH,KAAAm/G,IACAn/G,KAAAo/G,KACAyH,EAAA1H,IACA0H,EAAAzH,MAEAsC,EAAAgF,WAAA1mH,KAAAyhH,UARAzhH,KAWA,GAAAA,KAAAyjH,SACA,OAAAzjH,KAAAyhH,SAAAY,EAAAxD,EAEA,GAAA7+G,KAAAyhH,SA6BK,CAKL,GAFAoF,EAAApF,WACAoF,IAAAnH,cACAmH,EAAA1B,GAAAnlH,MACA,OAAAqiH,EACA,GAAAwE,EAAA1B,GAAAnlH,KAAAugH,KAAA,IACA,OAAA8C,EACA0D,EAAA1E,MAtCA,CAGA,GAAAriH,KAAA2gH,GAAAnzC,GACA,OAAAq5C,EAAAlG,GAAA5B,IAAA8H,EAAAlG,GAAA2C,GACA91C,EACAq5C,EAAAlG,GAAAnzC,GACAuxC,GAIA+H,EADA9mH,KAAAsgH,IAAA,GACAd,IAAAqH,GAAAzG,IAAA,IACAO,GAAA9B,GACAgI,EAAAnD,aAAA3E,EAAAuE,GAEAO,EAAA7jH,KAAAq/G,IAAAwH,EAAAvH,IAAAwH,IACAC,EAAAD,EAAA/xG,IAAA8uG,EAAArE,IAAAqH,KAIS,GAAAA,EAAAlG,GAAAnzC,GACT,OAAAxtE,KAAAyhH,SAAAY,EAAAxD,EACA,GAAA7+G,KAAA0jH,aACA,OAAAmD,EAAAnD,aACA1jH,KAAAyiH,MAAAjD,IAAAqH,EAAApE,OACAziH,KAAAyiH,MAAAjD,IAAAqH,GAAApE,MACS,GAAAoE,EAAAnD,aACT,OAAA1jH,KAAAw/G,IAAAqH,EAAApE,aACAsE,EAAAlI,EAmBA,IADAgF,EAAA7jH,KACA6jH,EAAA1C,IAAA0F,IAAA,CAGAC,EAAAz/G,KAAA8iE,IAAA,EAAA9iE,KAAA8mF,MAAA01B,EAAArC,WAAAqF,EAAArF,aAWA,IAPA,IAAA0F,EAAA7/G,KAAA6qD,KAAA7qD,KAAA8/G,IAAAL,GAAAz/G,KAAA+/G,KACAC,EAAAH,GAAA,KAAArE,EAAA,EAAAqE,EAAA,IAIAI,EAAAtG,EAAA8F,GACAS,EAAAD,EAAAhI,IAAAuH,GACAU,EAAA7D,cAAA6D,EAAApC,GAAAtB,IAGA0D,GADAD,EAAAtG,EADA8F,GAAAO,EACArnH,KAAAyhH,WACAnC,IAAAuH,GAKAS,EAAA7D,WACA6D,EAAAvI,GAEAgI,IAAAhyG,IAAAuyG,GACAzD,IAAAxE,IAAAkI,GAEA,OAAAR,GASAxD,EAAA/D,IAAA+D,EAAAqD,OAOArD,EAAAiE,OAAA,SAAAX,GAKA,OAJAhF,EAAAgF,KACAA,EAAA3D,EAAA2D,IAGAnF,EAOAxC,GANAl/G,KAAAyhH,SAAAC,EAAA+F,MAAA/F,EAAAgG,OACA1nH,KAAAm/G,IACAn/G,KAAAo/G,KACAyH,EAAA1H,IACA0H,EAAAzH,MAEAsC,EAAAgF,WAAA1mH,KAAAyhH,UAGAzhH,KAAAq/G,IAAAr/G,KAAAw/G,IAAAqH,GAAAvH,IAAAuH,KASAtD,EAAAn7G,IAAAm7G,EAAAiE,OAQAjE,EAAAM,IAAAN,EAAAiE,OAMAjE,EAAA9C,IAAA,WACA,OAAAvB,GAAAl/G,KAAAm/G,KAAAn/G,KAAAo/G,KAAAp/G,KAAAyhH,WAQA8B,EAAAxD,IAAA,SAAAvxF,GAGA,OAFAqzF,EAAArzF,KACAA,EAAA00F,EAAA10F,IACA0wF,EAAAl/G,KAAAm/G,IAAA3wF,EAAA2wF,IAAAn/G,KAAAo/G,KAAA5wF,EAAA4wF,KAAAp/G,KAAAyhH,WAQA8B,EAAAtD,GAAA,SAAAzxF,GAGA,OAFAqzF,EAAArzF,KACAA,EAAA00F,EAAA10F,IACA0wF,EAAAl/G,KAAAm/G,IAAA3wF,EAAA2wF,IAAAn/G,KAAAo/G,KAAA5wF,EAAA4wF,KAAAp/G,KAAAyhH,WAQA8B,EAAApD,IAAA,SAAA3xF,GAGA,OAFAqzF,EAAArzF,KACAA,EAAA00F,EAAA10F,IACA0wF,EAAAl/G,KAAAm/G,IAAA3wF,EAAA2wF,IAAAn/G,KAAAo/G,KAAA5wF,EAAA4wF,KAAAp/G,KAAAyhH,WAQA8B,EAAAoE,UAAA,SAAAC,GAGA,OAFA/F,EAAA+F,KACAA,IAAApE,SACA,IAAAoE,GAAA,IACA5nH,KACA4nH,EAAA,GACA1I,EAAAl/G,KAAAm/G,KAAAyI,EAAA5nH,KAAAo/G,MAAAwI,EAAA5nH,KAAAm/G,MAAA,GAAAyI,EAAA5nH,KAAAyhH,UAEAvC,EAAA,EAAAl/G,KAAAm/G,KAAAyI,EAAA,GAAA5nH,KAAAyhH,WASA8B,EAAAnD,IAAAmD,EAAAoE,UAOApE,EAAAsE,WAAA,SAAAD,GAGA,OAFA/F,EAAA+F,KACAA,IAAApE,SACA,IAAAoE,GAAA,IACA5nH,KACA4nH,EAAA,GACA1I,EAAAl/G,KAAAm/G,MAAAyI,EAAA5nH,KAAAo/G,MAAA,GAAAwI,EAAA5nH,KAAAo/G,MAAAwI,EAAA5nH,KAAAyhH,UAEAvC,EAAAl/G,KAAAo/G,MAAAwI,EAAA,GAAA5nH,KAAAo/G,MAAA,OAAAp/G,KAAAyhH,WASA8B,EAAAjD,IAAAiD,EAAAsE,WAOAtE,EAAAuE,mBAAA,SAAAF,GAIA,GAHA/F,EAAA+F,KACAA,IAAApE,SAEA,KADAoE,GAAA,IAEA,OAAA5nH,KAEA,IAAAo/G,EAAAp/G,KAAAo/G,KACA,OAAAwI,EAAA,GAEA1I,EADAl/G,KAAAm/G,MACAyI,EAAAxI,GAAA,GAAAwI,EAAAxI,IAAAwI,EAAA5nH,KAAAyhH,UAEAvC,EADS,KAAA0I,EACTxI,EAEAA,IAAAwI,EAAA,GAFA,EAAA5nH,KAAAyhH,WAYA8B,EAAAhD,KAAAgD,EAAAuE,mBAQAvE,EAAAwE,MAAAxE,EAAAuE,mBAMAvE,EAAA5D,SAAA,WACA,OAAA3/G,KAAAyhH,SAEAvC,EAAAl/G,KAAAm/G,IAAAn/G,KAAAo/G,MAAA,GADAp/G,MAQAujH,EAAA7D,WAAA,WACA,OAAA1/G,KAAAyhH,SACAzhH,KACAk/G,EAAAl/G,KAAAm/G,IAAAn/G,KAAAo/G,MAAA,IAQAmE,EAAAyE,QAAA,SAAA/C,GACA,OAAAA,EAAAjlH,KAAAioH,YAAAjoH,KAAAkoH,aAOA3E,EAAA0E,UAAA,WACA,IAAAhJ,EAAAj/G,KAAAo/G,KACAJ,EAAAh/G,KAAAm/G,IACA,OACA,IAAAH,EACAA,IAAA,MACAA,IAAA,OACAA,IAAA,GACA,IAAAC,EACAA,IAAA,MACAA,IAAA,OACAA,IAAA,KAQAsE,EAAA2E,UAAA,WACA,IAAAjJ,EAAAj/G,KAAAo/G,KACAJ,EAAAh/G,KAAAm/G,IACA,OACAF,IAAA,GACAA,IAAA,OACAA,IAAA,MACA,IAAAA,EACAD,IAAA,GACAA,IAAA,OACAA,IAAA,MACA,IAAAA,IAWAJ,EAAAuJ,UAAA,SAAA7hF,EAAAm7E,EAAAwD,GACA,OAAAA,EAAArG,EAAAwJ,YAAA9hF,EAAAm7E,GAAA7C,EAAAyJ,YAAA/hF,EAAAm7E,IASA7C,EAAAwJ,YAAA,SAAA9hF,EAAAm7E,GACA,WAAA7C,EACAt4E,EAAA,GACAA,EAAA,MACAA,EAAA,OACAA,EAAA,OACAA,EAAA,GACAA,EAAA,MACAA,EAAA,OACAA,EAAA,OACAm7E,IAUA7C,EAAAyJ,YAAA,SAAA/hF,EAAAm7E,GACA,WAAA7C,EACAt4E,EAAA,OACAA,EAAA,OACAA,EAAA,MACAA,EAAA,GACAA,EAAA,OACAA,EAAA,OACAA,EAAA,MACAA,EAAA,GACAm7E,mFCryCA,SAAkBz4G,GAEhBA,IAAA,eAEAA,IAAA,mCAEAA,IAAA,mCAEAA,IAAA,6BAEAA,IAAA,eAEAA,IAAA,sBAZF,CAAkBtJ,EAAAsJ,UAAAtJ,EAAAsJ,QAAO,oFCAzB,SAAYE,GAEVA,IAAA,mBAEAA,IAAA,mBAEAA,IAAA,WANF,CAAYxJ,EAAAwJ,SAAAxJ,EAAAwJ,OAAM,qbCalB,IAAAE,EAAA,oBAAAA,KAKA,OALaA,EAAQk/G,EAAA,CADpBC,WACYn/G,GAAb,GAAa1J,EAAA0J,WAQb,SAAkBC,GAEhBA,IAAA,eAEAA,IAAA,qCAEAA,IAAA,iBAEAA,IAAA,aAEAA,IAAA,aAEAA,IAAA,sBAEAA,IAAA,kCAEAA,IAAA,kCAEAA,IAAA,mCAEAA,IAAA,mCAEAA,IAAA,mCAEAA,IAAA,kCAEAA,IAAA,gCAEAA,IAAA,sCAEAA,IAAA,oCAEAA,IAAA,iCAEAA,IAAA,iCAEAA,IAAA,iCAEAA,IAAA,kCAEAA,IAAA,kCAEAA,IAAA,gCAEAA,IAAA,+BAEAA,IAAA,qCAEAA,IAAA,mCAhDF,CAAkB3J,EAAA2J,gBAAA3J,EAAA2J,cAAa,oVClB/B,IAAA4hF,EAAA9qF,EAAA,IACAqoH,EAAAroH,EAAA,IACAsoH,EAAAtoH,EAAA,IACAoN,EAAApN,EAAA,GA4BoCT,EAAAgpH,iBA5BYn7G,EAAAb,wBAEhD,IAAAi8G,EAAAxoH,EAAA,IAIAT,EAAAmyG,UAAA,SAA0B9lG,EAAcqY,EAAc9G,EACpDsrG,GAIA,YALoD,IAAAtrG,OAAA,QACpD,IAAAsrG,MAAA,MAEKA,IAAQA,EAAS,IAAID,EAAApX,QAC1BqX,EAAO/W,UAAU9lG,EAAMqY,EAAM9G,GACtBsrG,GAITlpH,EAAAi0G,SAAA,SAAyBiV,GACvB,OAAOA,EAAOjV,YAIhBj0G,EAAAmpH,eAAA,SAA+BD,GAC7B,IAAIpjG,EAAUojG,EAAOpjG,QACrB,OAAOA,EAAQtU,kBAAoBsU,EAAQ3Y,YAAYZ,OACnDuZ,EAAQ3Y,YAAY2Y,EAAQtU,qBAC5B,MAONxR,EAAAopH,OAAA,SAAuBl+G,GACrB,OAAOA,EAAQd,UAAYyD,EAAA9D,mBAAmBM,MAIhDrK,EAAAqpH,UAAA,SAA0Bn+G,GACxB,OAAOA,EAAQd,UAAYyD,EAAA9D,mBAAmBO,SAIhDtK,EAAAspH,QAAA,SAAwBp+G,GACtB,OAAOA,EAAQd,UAAYyD,EAAA9D,mBAAmBQ,OAIhDvK,EAAAupH,cAAA,WACE,OAAO,IAAIh+B,EAAAjd,SAIbtuE,EAAAwpH,UAAA,SAA0Bz0G,EAAkB2Y,GAC1C3Y,EAAQ2Y,OAASA,GAInB1tB,EAAAypH,YAAA,SAA4B10G,EAAkBiB,GAC5CjB,EAAQiB,SAAWA,GAIrBhW,EAAA0pH,gBAAA,SAAgC30G,EAAkBw5D,GAChDx5D,EAAQw5D,aAAeA,GAIzBvuE,EAAA2pH,gBAAA,SAAgC50G,EAAkBy5D,GAChDz5D,EAAQy5D,aAAeA,GAIzBxuE,EAAA4pH,eAAA,SAA+B70G,EAAkB05D,GAC/C15D,EAAQ05D,YAAcA,GAIxBzuE,EAAA6pH,aAAA,SAA6B90G,EAAkBgW,GAC7ChW,EAAQgW,UAAYA,GAItB/qB,EAAA8pH,cAAA,SAA8B/0G,EAAkBkB,GAC9ClB,EAAQkB,WAAaA,GAIvBjW,EAAA+pH,eAAA,SAA+Bh1G,EAAkB7T,EAAcmb,GAC7D,IAAIJ,EAAgBlH,EAAQkH,cACvBA,IAAelH,EAAQkH,cAAgBA,EAAgB,IAAIzU,KAChEyU,EAAczJ,IAAItR,EAAMmb,IAIbrc,EAAAgqH,uBAAsB,EAEtBhqH,EAAAiqH,uBAAsB,EAEtBjqH,EAAAkqH,oBAAmB,EAEnBlqH,EAAAmqH,aAAY,EAEZnqH,EAAAoqH,gBAAe,GAG5BpqH,EAAAqqH,cAAA,SAA8Bt1G,EAAkB45D,GAC9C55D,EAAQ25D,UAAYC,GAItB3uE,EAAAsqH,sBAAA,SAAsCv1G,EAAkBw1G,EAAoBC,GAC1Ez1G,EAAQmB,kBAAoBq0G,EAC5Bx1G,EAAQoB,gBAAkBq0G,GAI5BxqH,EAAAyqH,cAAA,SAA8BvB,GAC5B,OAAOA,EAAOhpD,UAIhBlgE,EAAA0qH,eAAA,SAA+B5kG,EAAkB/Q,GAC/C,YAD+C,IAAAA,MAAA,MACxC,IAAIw2E,EAAAvc,SAASlpD,EAAS/Q,GAASq7D,WAIxCpwE,EAAA2qH,gBAAA,SAAgC1qH,GAC9B,IAAIovG,EAAa,IAAIyZ,EAAA5Z,WAErB,OADAG,EAAWD,UAAUnvG,GACdovG,EAAWnvC,UAIpBlgE,EAAA4qH,SAAA,SAAyB9kG,GACvB,OAAOijG,EAAAlY,WAAWE,MAAMjrF,IAI1B9lB,EAAA6qH,SAAA,SAAyB/kG,GACvB,OAAOijG,EAAAzX,WAAWP,MAAMjrF,IAI1B9lB,EAAA8qH,UAAA,SAA0BhlG,mBACpBlZ,EAAK,IAAIvF,MACbuF,EAAGE,KAAK,yBACR,IAAgB,IAAAyR,EAAAnG,EAAA0N,EAAQ/T,eAAe2L,UAAQuB,EAAAV,EAAAjG,QAAA2G,EAAA1G,KAAA0G,EAAAV,EAAAjG,OAAE,CAA5C,IAAIyyG,EAAG9rG,EAAArd,MACVgL,EAAGE,KAAK,SACRF,EAAGE,KAAKi+G,EAAIt4G,cACZ7F,EAAGE,KAAK,0GAEVF,EAAGE,KAAK,2BACR,IAAgB,IAAAoS,EAAA9G,EAAA0N,EAAQ/T,eAAe2L,UAAQlF,EAAA0G,EAAA5G,QAAAE,EAAAD,KAAAC,EAAA0G,EAAA5G,OAAE,CAA5C,IACCiU,GADGw+F,EAAGvyG,EAAA5W,OACK2qB,KACf3f,EAAGE,KAAK,QACRF,EAAGE,KAAKyf,EAAOA,EAAKpZ,GAAGrH,WAAa,KACpCc,EAAGE,KAAK,yGAEVF,EAAGE,KAAK,4BACR,IAAgB,IAAA0M,EAAApB,EAAA0N,EAAQ/T,eAAe2L,UAAQ/D,EAAAH,EAAAlB,QAAAqB,EAAApB,KAAAoB,EAAAH,EAAAlB,OAAtCyyG,EAAGpxG,EAAA/X,MACVgL,EAAGE,KAAK,QACRF,EAAGE,KAAKi+G,EAAIl+F,UAAU/gB,YACtBc,EAAGE,KAAK,wGAGV,OADAF,EAAGE,KAAK,YACDF,EAAGG,KAAK,KAIjB,IAAAa,EAAAnN,EAAA,GAAST,EAAAoD,eAAAwK,EAAAxK,eAGTwG,EAAAnJ,EAAA,IAEAmJ,EAAAnJ,EAAA,IACAmJ,EAAAnJ,EAAA,KACAmJ,EAAAnJ,EAAA,KACAmJ,EAAAnJ,EAAA,KACAmJ,EAAAnJ,EAAA,KACAmJ,EAAAnJ,EAAA,IACAmJ,EAAAnJ,EAAA,KACAmJ,EAAAnJ,EAAA,IACAmJ,EAAAnJ,EAAA,KACAmJ,EAAAnJ,EAAA,IACAmJ,EAAAnJ,EAAA,IACAmJ,EAAAnJ,EAAA,IACAmJ,EAAAnJ,EAAA,IACAmJ,EAAAnJ,EAAA,mFChMAT,EAAAgrH,SAAA,SAAyBC,EAAUhjG,GAEjC,OADAzd,OAAOyd,GAAS,GAAKA,EAAQ,IACtBi5F,OACLd,QACE6K,EACAnsD,QACEsgD,QACAxpG,QAAQqS,KAGZu8C,WAKJxkE,EAAAkrH,UAAA,SAA0BD,EAAUhjG,EAAYkjG,GAE9C,OADA3gH,OAAOyd,GAAS,GAAKA,EAAQ,IACtBkjG,EACH7K,OACE2K,EACAnsD,QACEsgD,QACAxpG,QAAQqS,KAGZm4F,QACE6K,EACAnK,QACEhiD,QACEsgD,QACAxpG,QAAQqS,sFC9BpB,SAAkBmjG,GAEhBA,IAAA,eACAA,IAAA,wBACAA,IAAA,oCACAA,IAAA,oCACAA,IAAA,8CACAA,IAAA,yBAEAA,IAAA,kBACAA,IAAA,yCACAA,IAAA,sBACAA,IAAA,sBACAA,IAAA,wBACAA,IAAA,wBACAA,IAAA,wCACAA,IAAA,sCACAA,IAAA,oCACAA,IAAA,gCACAA,IAAA,0CACAA,IAAA,4BACAA,IAAA,4BACAA,IAAA,sCACAA,IAAA,8CACAA,IAAA,2CACAA,IAAA,4CACAA,IAAA,oBAEAA,IAAA,UAEAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YACAA,IAAA,YAEAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WACAA,IAAA,WAEAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UACAA,IAAA,UAEAA,IAAA,0BACAA,IAAA,wBACAA,IAAA,YACAA,IAAA,0BACAA,IAAA,wBACAA,IAAA,eACAA,IAAA,kBACAA,IAAA,6BACAA,IAAA,gCACAA,IAAA,4BACAA,IAAA,kBACAA,IAAA,kBACAA,IAAA,oBACAA,IAAA,cACAA,IAAA,8BACAA,IAAA,oBACAA,IAAA,8BACAA,IAAA,8BACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,kBACAA,IAAA,2BACAA,IAAA,8BACAA,IAAA,0BACAA,IAAA,sBACAA,IAAA,gBACAA,IAAA,wBACAA,IAAA,0BACAA,IAAA,8BACAA,IAAA,kBACAA,IAAA,mBAEAA,IAAA,yBACAA,IAAA,wBACAA,IAAA,qCACAA,IAAA,aACAA,IAAA,8BAnIF,CAAkBprH,EAAAorH,WAAAprH,EAAAorH,SAAQ,KAuI1BprH,EAAA0M,YAAA,SAA4B1L,GAC1B,OAAQA,GACN,QACA,QACA,UACA,UACE,OAAO,EAET,QACE,OAAO,IAMbhB,EAAAu8D,aAAA,SAA6Bv7D,GAC3B,OAAQA,GACN,QACA,OACA,QACA,QACA,SACA,SACA,UACA,UACA,UACA,WACA,WACE,OAAO,EAET,QACE,OAAOA,GAAC,MAAuBA,GAAC,OAMtChB,EAAA66D,eAAA,SAA+B75D,GAC7B,OAAOA,GAAC,IAAmBA,GAAC,IAI9BhB,EAAAw+D,aAAA,SAA6Bx9D,GAC3B,OAAOA,GAAC,IAAmBA,GAAC,IAI9BhB,EAAAg8D,kBAAA,SAAkCh7D,GAChC,OAAOA,GAAC,IAAkBA,GAAC,KACpBA,GAAC,IAAkBA,GAAC,IACnB,IAADA,GACC,IAADA,GACAA,EAAI,QAmLqBiK,EAnLYjK,GAoL9B,GAAKiK,EAAO,QACnBogH,EAAmBpgH,EAAaqgH,GAFzC,IAAkCrgH,GA/KlCjL,EAAAi8D,mBAAA,SAAmCj7D,GACjC,OAAOA,GAAC,IAAkBA,GAAC,KAI7BhB,EAAAm8D,iBAAA,SAAiCn7D,GAC/B,OAAOA,GAAC,IAAkBA,GAAC,KACpBA,GAAC,IAAkBA,GAAC,IACpBA,GAAC,IAAmBA,GAAC,IACpB,IAADA,GACC,IAADA,GACAA,EAAI,QAyKoBiK,EAzKYjK,GA0K7B,GAAKiK,EAAO,QACnBogH,EAAmBpgH,EAAasgH,GAFzC,IAAiCtgH,GArKjC,IAAMqgH,EAAgC,CACpC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAG1D,SAASF,EAAmBpgH,EAAWggH,GACrC,GAAIhgH,EAAOggH,EAAI,GAAI,OAAO,EAO1B,IALA,IAEIO,EACAC,EAHAnM,EAAK,EACLC,EAAK0L,EAAI1+G,OAIN+yG,EAAK,EAAIC,GAAI,CAIlB,GAHAiM,EAAMlM,GAAOC,EAAKD,GAAO,IAEzBmM,EAASR,EADTO,GAAc,EAANA,KAEMvgH,GAAQA,GAAQggH,EAAIO,EAAM,GACtC,OAAO,EAELvgH,EAAOwgH,EACTlM,EAAKiM,EAELlM,EAAKkM,EAAM,EAGf,OAAO,ikBC9WTxrH,EAAA0rH,UAAA,SAA6BjmG,GAC3B,QAD2B,IAAAA,MAAA,MACvBA,EAAU,CAEZ,IADA,IAAIkmG,EAAS,IAAItkH,MAASoe,EAASlZ,QAC1B5L,EAAI,EAAG8V,EAAIgP,EAASlZ,OAAQ5L,EAAI8V,IAAK9V,EAAGgtB,UAAUg+F,EAAOhrH,GAAK8kB,EAAS9kB,IAChF,OAAOgrH,EAET,OAAO,IAAItkH,OAGbrH,EAAA4rH,QAAA,SAA2BnmG,WACzB,QADyB,IAAAA,MAAA,MACrBA,EAAU,CACZ,IAAIkmG,EAAS,IAAIpkH,QACjB,IAAc,IAAAskH,EAAAzzG,EAAAqN,GAAQqmG,EAAAD,EAAAvzG,QAAAwzG,EAAAvzG,KAAAuzG,EAAAD,EAAAvzG,OAAA,CAAjB,IAAIyzG,EAACD,EAAAlqH,MAAc+pH,EAAOt2G,IAAI02G,qGACnC,OAAOJ,EAET,OAAO,IAAIpkH,KAGbvH,EAAA0hE,QAAA,SAA6Bj8C,EAAkCumG,wBAAlC,IAAAvmG,MAAA,WAAkC,IAAAumG,MAAA,MAC7D,IAAIL,EAAS,IAAInkH,IACjB,GAAIie,EAAU,KACZ,IAAmB,IAAAwmG,EAAA7zG,EAAAqN,GAAQymG,EAAAD,EAAA3zG,QAAA4zG,EAAA3zG,KAAA2zG,EAAAD,EAAA3zG,OAAA,CAAlB,IAAAiG,EAAA9F,EAAAyzG,EAAAtqH,MAAA,GAAC6U,EAAA8H,EAAA,GAAGwtG,EAAAxtG,EAAA,GAAgBotG,EAAOn5G,IAAIiE,EAAGs1G,qGAC3C,GAAIC,MAAW,IAAmB,IAAAG,EAAA/zG,EAAA4zG,GAASI,EAAAD,EAAA7zG,QAAA8zG,EAAA7zG,KAAA6zG,EAAAD,EAAA7zG,OAAA,CAAnB,IAAA2G,EAAAxG,EAAA2zG,EAAAxqH,MAAA,GAAC6U,EAAAwI,EAAA,GAAG8sG,EAAA9sG,EAAA,GAAiB0sG,EAAOn5G,IAAIiE,EAAGs1G,2GACtD,GAAIC,MACT,IAAmB,IAAAK,EAAAj0G,EAAA4zG,GAASM,EAAAD,EAAA/zG,QAAAg0G,EAAA/zG,KAAA+zG,EAAAD,EAAA/zG,OAAA,CAAnB,IAAA4G,EAAAzG,EAAA6zG,EAAA1qH,MAAA,GAAC6U,EAAAyI,EAAA,GAAG6sG,EAAA7sG,EAAA,GAAiBysG,EAAOn5G,IAAIiE,EAAGs1G,qGAE9C,OAAOJ,kFCpBT,IAAA/9G,EAAAnN,EAAA,GAIM8rH,EAAS,GAMf,SAAgBhiE,EAAc7lC,GAK5B,IAJA,IAiBIiiD,EAjBAtW,EAAM,EACN/jD,EAAMoY,EAAKnY,OAGR8jD,EAAM,EAAI/jD,GACK,IAApBoY,EAAK/X,WAAW0jD,IAChB3rC,EAAK/X,WAAW0jD,EAAM,IAAMk8D,GAE5Bl8D,GAAO,EAUT,KAPIA,EAAM,GAAK/jD,EAAMoY,EAAKnY,UACxBmY,EAAOA,EAAK7X,UAAUwjD,EAAK/jD,GAC3BA,GAAO+jD,EACPA,EAAM,GAIDA,EAAM,EAAI/jD,GAAK,CAIpB,GAHAq6D,GAAQ,EAINjiD,EAAK/X,WAAW0jD,IAAQk8D,GACA,IAAxB7nG,EAAK/X,WAAW0jD,EAAM,GACtB,CAGA,IADAsW,EAAQtW,EAAM,GAAK/jD,IAEjB+jD,EAAM,EAAI/jD,GACVoY,EAAK/X,WAAW0jD,EAAM,IAAMk8D,EAC5B,CACA7nG,EAAOiiD,EACHjiD,EAAK7X,UAAU,EAAGwjD,GAClB3rC,EAAK7X,UAAU,EAAGwjD,GAAO3rC,EAAK7X,UAAUwjD,EAAM,GAClD/jD,GAAO,EACP,SAKF,IADAq6D,EAAQtW,EAAM,GAAK/jD,IACkB,IAAxBoY,EAAK/X,WAAW0jD,EAAM,IACjCA,EAAM,EAAI/jD,GACc,IAAxBoY,EAAK/X,WAAW0jD,EAAM,IACtB3rC,EAAK/X,WAAW0jD,EAAM,IAAMk8D,EAC5B,CAGA,IADA,IAAIC,EAAOn8D,IACFm8D,GAAQ,GACf,GAAI9nG,EAAK/X,WAAW6/G,IAASD,EAAW,CAClCl8D,EAAMm8D,GAAQ,GACS,IAAzB9nG,EAAK/X,WAAW6/G,EAAO,IACE,IAAzB9nG,EAAK/X,WAAW6/G,EAAO,KAEvB9nG,EAAOiiD,EACHjiD,EAAK7X,UAAU,EAAG2/G,GAClB9nG,EAAK7X,UAAU,EAAG2/G,GAAQ9nG,EAAK7X,UAAUwjD,EAAM,GACnD/jD,GAAO+jD,EAAM,EAAIm8D,EACjBn8D,EAAMm8D,EAAO,GAEf,MAKJ,GAAIA,EAAO,GAAKn8D,EAAM,IACT,GAAPA,GACgB,IAAlB3rC,EAAK/X,WAAW,IACE,IAAlB+X,EAAK/X,WAAW,IAChB,CAEAL,GADAoY,EAAOA,EAAK7X,UAAUwjD,EAAM,IACjB9jD,OACX,WAKR8jD,IAEF,OAAO/jD,EAAM,EAAIoY,EAAO,IAc1B,SAAgB+nG,EAAQzgH,GACtB,IAAIqkD,EAAMrkD,EAAeO,OACzB,GAAI8jD,GAAO,EAAG,CACZ,GAAW,GAAPA,EAAU,MAAO,IACrB,GAAIrkD,EAAeW,WAAW,IAAM4/G,EAClC,OAAOvgH,EAGX,OAASqkD,EAAM,GACb,GAAIrkD,EAAeW,WAAW0jD,IAAQk8D,EACpC,OAAOvgH,EAAea,UAAU,EAAGwjD,GAGvC,MAAO,IA3GTrwD,EAAAuqD,gBAoFAvqD,EAAAyqD,YAAA,SAA4Bz+C,EAAwB0gH,GAClD,OAAI1gH,EAAew+C,WAAW,QACrBx+C,EAEFu+C,EACLkiE,EAAQC,GAAU9+G,EAAAhL,eAAiBoJ,IAKvChM,EAAAysH,yFC5GA,IAAME,EAAW,KACXC,EAAW,OACXC,EAAW,WAGjB7sH,EAAAgxG,OAAA,SAAuBpkG,EAAc2kC,GACnC,KAAOA,GAAS,GACd3kC,EAAGE,KAAK+/G,GACRt7E,GAAS,EAEPA,GAAS,IACX3kC,EAAGE,KAAK8/G,GACRr7E,GAAS,GAEPA,GACF3kC,EAAGE,KAAK6/G,kCCQZ,SAAgBG,EAAQh6G,EAAoBC,GAC1C,OAAOD,EAAOC,GACPD,EAAOC,EAAS,IAAM,EACtBD,EAAOC,EAAS,IAAM,GACtBD,EAAOC,EAAS,IAAM,GAI/B,SAAgBG,EAAStR,EAAYkR,EAAoBC,GACvDD,EAAOC,GAAcnR,EACrBkR,EAAOC,EAAS,GAAKnR,IAAU,EAC/BkR,EAAOC,EAAS,GAAKnR,IAAU,GAC/BkR,EAAOC,EAAS,GAAKnR,IAAU,GAIjC,SAAgBmrH,EAAQj6G,EAAoBC,GAC1C,IAAIusG,EAAKwN,EAAQh6G,EAAQC,GACrBwsG,EAAKuN,EAAQh6G,EAAQC,EAAS,GAClC,OAAO6C,QAAQ0pG,EAAIC,oDAzCrBv/G,EAAAgtH,OAAA,SAAuBl6G,EAAoBC,GACzC,OAAOD,EAAOC,IAIhB/S,EAAAmuB,QAAA,SAAwBvsB,EAAYkR,EAAoBC,GACtDD,EAAOC,GAAUnR,GAInB5B,EAAAitH,QAAA,SAAwBn6G,EAAoBC,GAC1C,OAAOD,EAAOC,GACPD,EAAOC,EAAS,IAAM,GAI/B/S,EAAAouB,SAAA,SAAyBxsB,EAAYkR,EAAoBC,GACvDD,EAAOC,GAAcnR,EACrBkR,EAAOC,EAAS,GAAKnR,IAAU,GAIjC5B,EAAA8sH,UAQA9sH,EAAAkT,WAQAlT,EAAA+sH,UAOA/sH,EAAAu3E,SAAA,SAAyB31E,EAAYkR,EAAoBC,GACvDG,EAASq9B,QAAQ3uC,GAAQkR,EAAQC,GACjCG,EAASs9B,SAAS5uC,GAAQkR,EAAQC,EAAS,IAI7C/S,EAAAktH,QAAA,SAAwBp6G,EAAoBC,GAC1C,OAAOgsG,WAAW+N,EAAQh6G,EAAQC,KAIpC/S,EAAAquB,SAAA,SAAyBzsB,EAAYkR,EAAoBC,GACvDG,EAAS4rG,WAAWl9G,GAAQkR,EAAQC,IAItC/S,EAAAmtH,QAAA,SAAwBr6G,EAAoBC,GAC1C,OAAOksG,WAAW8N,EAAQj6G,EAAQC,KAIpC/S,EAAAsuB,SAAA,SAAyB1sB,EAAYkR,EAAoBC,GACvD,IAAIq6G,EAAWpO,WAAWp9G,GAC1BsR,EAASq9B,QAAQ68E,GAAWt6G,EAAQC,GACpCG,EAASs9B,SAAS48E,GAAWt6G,EAAQC,EAAS","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__20__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is the main function. */\n  MAIN = 1 << 27,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n\n/** Common compiler symbols. */\nexport namespace CommonSymbols {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_FEATURE_MUTABLE_GLOBAL = \"ASC_FEATURE_MUTABLE_GLOBAL\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const FixedArray = \"FixedArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  // runtime\n  export const abort = \"abort\";\n  export const pow = \"pow\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const retain = \"__retain\";\n  export const release = \"__release\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const allocArray = \"__allocArray\";\n}\n\n// shared\nexport { Feature } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./bitset\";\nexport * from \"./charcode\";\nexport * from \"./collections\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak, CharCode\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(range.source.normalizedPath);\n      sb.push(\"(\");\n      sb.push(range.line.toString(10));\n      sb.push(\",\");\n      sb.push(range.column.toString(10));\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  CommonSymbols,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  Range,\n  DecoratorNode,\n  DecoratorKind,\n  SignatureNode,\n  TypeParameterNode,\n  CommonTypeNode,\n  TypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  decoratorNameToKind,\n  findDecorator,\n  ExportDefaultStatement\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\n/** Returns the operator kind represented by the specified decorator and string argument. */\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n  assert(arg.length);\n  switch (decoratorKind) {\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.OPENBRACKET: {\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n          break;\n        }\n        case CharCode.OPENBRACE: {\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n          break;\n        }\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.ADD;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.SUB;\n          break;\n        }\n        case CharCode.ASTERISK: {\n          if (arg == \"*\") return OperatorKind.MUL;\n          if (arg == \"**\") return OperatorKind.POW;\n          break;\n        }\n        case CharCode.SLASH: {\n          if (arg == \"/\") return OperatorKind.DIV;\n          break;\n        }\n        case CharCode.PERCENT: {\n          if (arg == \"%\") return OperatorKind.REM;\n          break;\n        }\n        case CharCode.AMPERSAND: {\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\n          break;\n        }\n        case CharCode.BAR: {\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\n          break;\n        }\n        case CharCode.CARET: {\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n          break;\n        }\n        case CharCode.EQUALS: {\n          if (arg == \"==\") return OperatorKind.EQ;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!=\") return OperatorKind.NE;\n          break;\n        }\n        case CharCode.GREATERTHAN: {\n          if (arg == \">\") return OperatorKind.GT;\n          if (arg == \">=\") return OperatorKind.GE;\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n          break;\n        }\n        case CharCode.LESSTHAN: {\n          if (arg == \"<\") return OperatorKind.LT;\n          if (arg == \"<=\") return OperatorKind.LE;\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_PREFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.PLUS;\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.MINUS;\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!\") return OperatorKind.NOT;\n          break;\n        }\n        case CharCode.TILDE: {\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_POSTFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n          break;\n        }\n      }\n      break;\n    }\n  }\n  return OperatorKind.INVALID;\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n  /** Explicitly annotated start function. */\n  explicitStartFunction: FunctionPrototype | null = null;\n\n  // lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes backing basic types like `i32`. */\n  typeClasses: Map<TypeKind,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n\n  // standard references\n\n  /** ArrayBufferView reference. */\n  arrayBufferViewInstance: Class;\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype;\n  /** Set prototype reference. */\n  setPrototype: ClassPrototype;\n  /** Map prototype reference. */\n  mapPrototype: ClassPrototype;\n  /** Fixed array prototype reference. */\n  fixedArrayPrototype: ClassPrototype;\n  /** Int8Array prototype. */\n  i8ArrayPrototype: ClassPrototype;\n  /** Int16Array prototype. */\n  i16ArrayPrototype: ClassPrototype;\n  /** Int32Array prototype. */\n  i32ArrayPrototype: ClassPrototype;\n  /** Int64Array prototype. */\n  i64ArrayPrototype: ClassPrototype;\n  /** Uint8Array prototype. */\n  u8ArrayPrototype: ClassPrototype;\n  /** Uint8ClampedArray prototype. */\n  u8ClampedArrayPrototype: ClassPrototype;\n  /** Uint16Array prototype. */\n  u16ArrayPrototype: ClassPrototype;\n  /** Uint32Array prototype. */\n  u32ArrayPrototype: ClassPrototype;\n  /** Uint64Array prototype. */\n  u64ArrayPrototype: ClassPrototype;\n  /** Float32Array prototype. */\n  f32ArrayPrototype: ClassPrototype;\n  /** Float64Array prototype. */\n  f64ArrayPrototype: ClassPrototype;\n  /** String instance reference. */\n  stringInstance: Class;\n  /** Abort function reference, if present. */\n  abortInstance: Function;\n\n  // runtime references\n\n  /** RT `__alloc(size: usize, id: u32): usize` */\n  allocInstance: Function;\n  /** RT `__realloc(ref: usize, newSize: usize): usize` */\n  reallocInstance: Function;\n  /** RT `__free(ref: usize): void` */\n  freeInstance: Function;\n  /** RT `__retain(ref: usize): usize` */\n  retainInstance: Function;\n  /** RT `__release(ref: usize): void` */\n  releaseInstance: Function;\n  /** RT `__collect(): void` */\n  collectInstance: Function;\n  /** RT `__visit(ref: usize, cookie: u32): void` */\n  visitInstance: Function;\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\n  typeinfoInstance: Function;\n  /** RT `__instanceof(ref: usize, superId: u32): bool` */\n  instanceofInstance: Function;\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\n  allocArrayInstance: Function;\n\n  /** Next class id. */\n  nextClassId: u32 = 0;\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY);\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.resolver = new Resolver(this);\n  }\n\n  /** Writes a common runtime header to the specified buffer. */\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, classInstance: Class, payloadSize: u32): void {\n    // BLOCK {\n    //   mmInfo: usize // WASM64 TODO\n    //   gcInfo: u32\n    //   rtId: u32\n    //   rtSize: u32\n    // }\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\n    writeI32(payloadSize, buffer, offset);\n    writeI32(1, buffer, offset + 4); // RC=1\n    writeI32(classInstance.id, buffer, offset + 8);\n    writeI32(payloadSize, buffer, offset + 12);\n  }\n\n  /** Gets the size of a runtime header. */\n  get runtimeHeaderSize(): i32 {\n    return 16;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, null, null, flags, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null,\n      Node.createOmittedType(range),\n      null, flags, range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: SignatureNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null,\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createSignature([],\n        Node.createType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\n          null, false, range\n        ),\n        null, false, range)\n      ),\n      null, null, flags, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      [], null, flags, range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    assert(elementsByDeclaration.has(declaration));\n    return elementsByDeclaration.get(declaration)!;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // register native types\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\n    this.registerNativeType(CommonSymbols.void_, Type.void);\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\n      CommonSymbols.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonSymbols.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonSymbols.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_MUTABLE_GLOBAL, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    for (let [file, exportsStar] of queuedExportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = exportsStar[i];\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            queuedImport.localIdentifier.text,\n            element,\n            true // isImport\n          );\n        } else {\n          // FIXME: file not found is not reported if this happens?\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = queuedImport.localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile\n            ),\n            true // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [file, exports] of queuedExports) {\n      for (let [exportName, queuedExport] of exports) {\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.nextClassId == 0);\n    this.arrayBufferInstance = this.requireClass(CommonSymbols.ArrayBuffer);\n    assert(this.arrayBufferInstance.id == 0);\n    this.stringInstance = this.requireClass(CommonSymbols.String);\n    assert(this.stringInstance.id == 1);\n    this.arrayBufferViewInstance = this.requireClass(CommonSymbols.ArrayBufferView);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerNativeTypeClass(TypeKind.I8, CommonSymbols.I8);\n    this.registerNativeTypeClass(TypeKind.I16, CommonSymbols.I16);\n    this.registerNativeTypeClass(TypeKind.I32, CommonSymbols.I32);\n    this.registerNativeTypeClass(TypeKind.I64, CommonSymbols.I64);\n    this.registerNativeTypeClass(TypeKind.ISIZE, CommonSymbols.Isize);\n    this.registerNativeTypeClass(TypeKind.U8, CommonSymbols.U8);\n    this.registerNativeTypeClass(TypeKind.U16, CommonSymbols.U16);\n    this.registerNativeTypeClass(TypeKind.U32, CommonSymbols.U32);\n    this.registerNativeTypeClass(TypeKind.U64, CommonSymbols.U64);\n    this.registerNativeTypeClass(TypeKind.USIZE, CommonSymbols.Usize);\n    this.registerNativeTypeClass(TypeKind.BOOL, CommonSymbols.Bool);\n    this.registerNativeTypeClass(TypeKind.F32, CommonSymbols.F32);\n    this.registerNativeTypeClass(TypeKind.F64, CommonSymbols.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeTypeClass(TypeKind.V128, CommonSymbols.V128);\n\n    // register views but don't instantiate them yet\n    this.i8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    this.i16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    this.i32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    this.i64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ClampedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    this.u16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    this.u32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    this.u64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    this.f32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    this.f64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float64Array, ElementKind.CLASS_PROTOTYPE);\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\n          this.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\n          );\n        }\n        if (\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n        ) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n          );\n        }\n        thisPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          extendsNode.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let firstChar = name.charCodeAt(0);\n          if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n            this.registerConstantInteger(alias, Type.i32, i64_new(parseI32(name, 10)));\n          } else {\n            let elementsByName = this.elementsByName;\n            let element = elementsByName.get(name);\n            if (element) {\n              if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\n              elementsByName.set(alias, element);\n            }\n            else throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // register stdlib components\n    this.arrayPrototype = <ClassPrototype>this.require(CommonSymbols.Array, ElementKind.CLASS_PROTOTYPE);\n    this.fixedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.FixedArray, ElementKind.CLASS_PROTOTYPE);\n    this.setPrototype = <ClassPrototype>this.require(CommonSymbols.Set, ElementKind.CLASS_PROTOTYPE);\n    this.mapPrototype = <ClassPrototype>this.require(CommonSymbols.Map, ElementKind.CLASS_PROTOTYPE);\n    this.abortInstance = this.requireFunction(CommonSymbols.abort);\n    this.allocInstance = this.requireFunction(CommonSymbols.alloc);\n    this.reallocInstance = this.requireFunction(CommonSymbols.realloc);\n    this.freeInstance = this.requireFunction(CommonSymbols.free);\n    this.retainInstance = this.requireFunction(CommonSymbols.retain);\n    this.releaseInstance = this.requireFunction(CommonSymbols.release);\n    this.collectInstance = this.requireFunction(CommonSymbols.collect);\n    this.typeinfoInstance = this.requireFunction(CommonSymbols.typeinfo);\n    this.instanceofInstance = this.requireFunction(CommonSymbols.instanceof_);\n    this.visitInstance = this.requireFunction(CommonSymbols.visit);\n    this.allocArrayInstance = this.requireFunction(CommonSymbols.allocArray);\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    for (let file of this.filesByName.values()) {\n      let exports = file.exports;\n      if (!(file.source.isEntry && exports)) continue;\n      for (let element of exports.values()) this.markModuleExport(element);\n    }\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookupGlobal(name);\n    if (!element) throw new Error(\"missing \" + name);\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\n    return element;\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  private requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Requires that a non-generic global function is present and returns it. */\n  private requireFunction(name: string): Function {\n    var prototype = this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    {\n      let members = element.members;\n      if (members) for (let member of members.values()) this.markModuleExport(member);\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerNativeTypeClass(typeKind: TypeKind, className: string): void {\n    assert(!this.typeClasses.has(typeKind));\n    var element = this.lookupGlobal(className);\n    if (element) {\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      let classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n      if (classElement) this.typeClasses.set(typeKind, classElement);\n    }\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let actual = elementsByName.get(name)!;\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (actual !== element) {\n        let merged = tryMerge(elementsByName.get(name)!, element);\n        if (!merged) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, name\n          );\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name);\n    return null;\n  }\n\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\n  requireGlobal(name: string): Element {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name)!;\n    throw new Error(\"missing global\");\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n         ? filesByName.get(foreignPath)!\n         : filesByName.has(foreignPathAlt)\n         ? filesByName.get(foreignPathAlt)!\n         : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = fileQueuedExports.get(foreignName)!;\n          if (queuedExport.foreignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExport.foreignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = decoratorNameToKind(decorator.name);\n        let flag = decoratorKindToFlag(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.SEALED |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      // cannot implement interfaces when unmanaged\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n      } else if (numImplementsTypes) {\n        // remember classes that implement interfaces\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning( // TODO: not yet supported\n            DiagnosticCode.Operation_not_supported,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(element);\n      }\n    }\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators,\n          (declaration.is(CommonFlags.READONLY)\n            ? DecoratorFlags.INLINE\n            : DecoratorFlags.NONE\n          ) | DecoratorFlags.LAZY | DecoratorFlags.UNSAFE\n        ),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, DecoratorFlags.UNSAFE)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let kind = operatorKindFromDecorator(\n                  decorator.decoratorKind,\n                  (<StringLiteralExpression>firstArg).value\n                );\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode.Operation_not_supported,\n                    firstArg.range\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(10)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name)!;\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name);\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = assert(statement.internalPath); // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else if (exports.has(\"default\")) {\n        this.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          declaration.name.range, \"default\"\n        )\n        return;\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\n      queuedImports.push(new QueuedImport(\n        parent,\n        statement.namespaceName,\n        null, // indicates import *\n        statement.internalPath,\n        statement.internalPath + INDEX_SUFFIX\n      ));\n    } else {\n      // import \"./foo\"\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, true);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      if (parent.kind == ElementKind.FILE && (<File>parent).source.isEntry) {\n        validDecorators |= DecoratorFlags.START;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    if (element.hasDecorator(DecoratorFlags.START)) {\n      if (this.explicitStartFunction) {\n        this.error(\n          DiagnosticCode.Module_cannot_have_multiple_start_functions,\n          assert(findDecorator(DecoratorKind.START, declaration.decorators)).range\n        );\n      } else this.explicitStartFunction = element;\n    }\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): Namespace | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // retain original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is the explicit start function. */\n  START = 1 << 10,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 11\n}\n\n/** Translates a decorator kind to the respective decorator flag. */\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\n  switch (kind) {\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n    case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n    case DecoratorKind.START: return DecoratorFlags.START;\n    case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n    default: return DecoratorFlags.NONE;\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\n    while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members && members.has(name)) return members.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let actual = members.get(name)!;\n      if (actual.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(actual, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return ElementKind[this.kind] + \":\" + this.internalName;\n  }\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.isLibrary) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports && exports.has(name)) return exports.get(name)!;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element): Namespace {\n    var ns = new Namespace(\n      name,\n      parent,\n      this.program.makeNativeNamespaceDeclaration(name)\n    );\n    var exports = this.exports;\n    if (exports) {\n      for (let [memberName, member] of exports) {\n        ns.add(memberName, member);\n      }\n    }\n    return ns;\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): CommonTypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): CommonTypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: I64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).value;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated signature node. */\n  get signatureNode(): SignatureNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n  /** Counting id of autorelease variables. */\n  nextAutoreleaseId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    this.type = Type.u32.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (this.is(CommonFlags.INSTANCE)) {\n        let local = new Local(\n          CommonSymbols.this_,\n          localIndex++,\n          assert(signature.thisType),\n          this\n        );\n        this.localsByName.set(CommonSymbols.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration || this.program.makeNativeVariableDeclaration(localName)\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return locals.get(name);\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program,\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      __s = \"sig:\" + signature.toSignatureString(),\n      __s,\n      program,\n      program.nativeFile\n    );\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = Type.u32.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): CommonTypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      prototype.program.makeNativeVariableDeclaration(\n        prototype.name,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE\n      )\n    );\n    this.prototype = prototype;\n    registerConcreteElement(this.program, this);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): TypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): TypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    do if (current === basePtototype) return true;\n    while (current = current.basePrototype);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let merged = tryMerge(instanceMembers.get(name)!, element);\n      if (!merged) {\n        this.program.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          element.identifierNode.range, element.identifierNode.text\n        );\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\nconst enum AcyclicState {\n  UNKNOWN,\n  ACYCLIC,\n  NOT_ACYCLIC\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Remembers acyclic state. */\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY &&\n        (<Property>lengthField).getterInstance !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    /** Base class, if derived. */\n    base: Class | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(program.options.usizeType.asClass(this));\n    this.base = base;\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters && typeParameters.length) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\n    var field = this.lookupInSelf(name);\n    if (field && field.kind == ElementKind.FIELD) {\n      let offset = baseOffset + (<Field>field).memoryOffset;\n      switch ((<Field>field).type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          assert(!this.program.options.isWasm64); // TODO\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F32: {\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do if (current.prototype === extendedPrototype) return current.typeArguments;\n    while (current = current.base);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    switch (current.prototype) {\n      case program.i8ArrayPrototype: return Type.i8;\n      case program.i16ArrayPrototype: return Type.i16;\n      case program.i32ArrayPrototype: return Type.i32;\n      case program.i64ArrayPrototype: return Type.i64;\n      case program.u8ArrayPrototype:\n      case program.u8ClampedArrayPrototype: return Type.u8;\n      case program.u16ArrayPrototype: return Type.u16;\n      case program.u32ArrayPrototype: return Type.u32;\n      case program.u64ArrayPrototype: return Type.u64;\n      case program.f32ArrayPrototype: return Type.f32;\n      case program.f64ArrayPrototype: return Type.f64;\n      case program.arrayPrototype: return assert(this.getTypeArgumentsTo(program.arrayPrototype))[0];\n      default: assert(false);\n    }\n    return Type.void;\n  }\n\n  /** Tests if this class is inherently acyclic. */\n  get isAcyclic(): bool {\n    var acyclic = this._acyclic;\n    if (acyclic == AcyclicState.UNKNOWN) {\n      let hasCycle = this.cyclesTo(this);\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\n    }\n    return acyclic == AcyclicState.ACYCLIC;\n  }\n\n  /** Tests if this class potentially forms a reference cycle to another one. */\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\n    //\n    // - scalars\n    // - references to classes that are both acyclic and final (here: Java); and\n    // - arrays (in our case: also sets, maps) of either of the above\n    //\n    // Our implementation, however, treats all objects that do not reference themselves directly\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\n\n    if (except.has(this)) return false;\n    except.add(this); // don't recurse indefinitely\n\n    // Find out if any field references 'other' directly or indirectly\n    var current: Class | null;\n    var members = this.members;\n    if (members) {\n      for (let member of members.values()) {\n        if (\n          member.kind == ElementKind.FIELD &&\n          (current = (<Field>member).type.classReference) !== null &&\n          (\n            current === other ||\n            current.cyclesTo(other, except)\n          )\n        ) return true;\n      }\n    }\n\n    // Do the same for non-field data\n    var basePrototype: ClassPrototype | null;\n\n    // Array<T->other?>\n    if ((basePrototype = this.program.arrayPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Set<K->other?>\n    } else if ((basePrototype = this.program.setPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Map<K->other?,V->other?>\n    } else if ((basePrototype = this.program.mapPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 2);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n      if (\n        (current = typeArguments[1].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n    }\n    return false;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype { // FIXME\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    nameInclTypeParameters: string,\n    prototype: InterfacePrototype,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      base,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  assert(!newer.members);\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    for (let [memberName, member] of srcMembers) {\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport { Target } from \"./common\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\nexport enum NativeType {\n  None = _BinaryenTypeNone(),\n  I32  = _BinaryenTypeInt32(),\n  I64  = _BinaryenTypeInt64(),\n  F32  = _BinaryenTypeFloat32(),\n  F64  = _BinaryenTypeFloat64(),\n  V128 = _BinaryenTypeVec128(),\n  Unreachable = _BinaryenTypeUnreachable(),\n  Auto = _BinaryenTypeAuto()\n}\n\nexport enum FeatureFlags {\n  Atomics = _BinaryenFeatureAtomics(),\n  MutableGloabls = _BinaryenFeatureMutableGlobals(),\n  NontrappingFPToInt = _BinaryenFeatureNontrappingFPToInt(),\n  SIMD128 = _BinaryenFeatureSIMD128(),\n  BulkMemory = _BinaryenFeatureBulkMemory(),\n  SignExt = _BinaryenFeatureSignExt(),\n  ExceptionHandling = _BinaryenFeatureExceptionHandling()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  LocalGet = _BinaryenLocalGetId(),\n  LocalSet = _BinaryenLocalSetId(),\n  GlobalGet = _BinaryenGlobalGetId(),\n  GlobalSet = _BinaryenGlobalSetId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicNotify = _BinaryenAtomicNotifyId(),\n  SIMDExtract = _BinaryenSIMDExtractId(),\n  SIMDReplace = _BinaryenSIMDReplaceId(),\n  SIMDShuffle = _BinaryenSIMDShuffleId(),\n  SIMDBitselect = _BinaryenSIMDBitselectId(),\n  SIMDShift = _BinaryenSIMDShiftId(),\n  MemoryInit = _BinaryenMemoryInitId(),\n  DataDrop = _BinaryenDataDropId(),\n  MemoryCopy = _BinaryenMemoryCopyId(),\n  MemoryFill = _BinaryenMemoryFillId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64(),\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n\n  // see: https://github.com/WebAssembly/simd\n  SplatVecI8x16 = _BinaryenSplatVecI8x16(),\n  SplatVecI16x8 = _BinaryenSplatVecI16x8(),\n  SplatVecI32x4 = _BinaryenSplatVecI32x4(),\n  SplatVecI64x2 = _BinaryenSplatVecI64x2(),\n  SplatVecF32x4 = _BinaryenSplatVecF32x4(),\n  SplatVecF64x2 = _BinaryenSplatVecF64x2(),\n  NotVec128 = _BinaryenNotVec128(),\n  NegVecI8x16 = _BinaryenNegVecI8x16(),\n  AnyTrueVecI8x16 = _BinaryenAnyTrueVecI8x16(),\n  AllTrueVecI8x16 = _BinaryenAllTrueVecI8x16(),\n  NegVecI16x8 = _BinaryenNegVecI16x8(),\n  AnyTrueVecI16x8 = _BinaryenAnyTrueVecI16x8(),\n  AllTrueVecI16x8 = _BinaryenAllTrueVecI16x8(),\n  NegVecI32x4 = _BinaryenNegVecI32x4(),\n  AnyTrueVecI32x4 = _BinaryenAnyTrueVecI32x4(),\n  AllTrueVecI32x4 = _BinaryenAllTrueVecI32x4(),\n  NegVecI64x2 = _BinaryenNegVecI64x2(),\n  AnyTrueVecI64x2 = _BinaryenAnyTrueVecI64x2(),\n  AllTrueVecI64x2 = _BinaryenAllTrueVecI64x2(),\n  AbsVecF32x4 = _BinaryenAbsVecF32x4(),\n  NegVecF32x4 = _BinaryenNegVecF32x4(),\n  SqrtVecF32x4 = _BinaryenSqrtVecF32x4(),\n  AbsVecF64x2 = _BinaryenAbsVecF64x2(),\n  NegVecF64x2 = _BinaryenNegVecF64x2(),\n  SqrtVecF64x2 = _BinaryenSqrtVecF64x2(),\n  TruncSatSVecF32x4ToVecI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\n  TruncSatUVecF32x4ToVecI32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\n  TruncSatSVecF64x2ToVecI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\n  TruncSatUVecF64x2ToVecI64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\n  ConvertSVecI32x4ToVecF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\n  ConvertUVecI32x4ToVecF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\n  ConvertSVecI64x2ToVecF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\n  ConvertUVecI64x2ToVecF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2()\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64(),\n\n  // see: https://github.com/WebAssembly/simd\n  EqVecI8x16 = _BinaryenEqVecI8x16(),\n  NeVecI8x16 = _BinaryenNeVecI8x16(),\n  LtSVecI8x16 = _BinaryenLtSVecI8x16(),\n  LtUVecI8x16 = _BinaryenLtUVecI8x16(),\n  LeSVecI8x16 = _BinaryenLeSVecI8x16(),\n  LeUVecI8x16 = _BinaryenLeUVecI8x16(),\n  GtSVecI8x16 = _BinaryenGtSVecI8x16(),\n  GtUVecI8x16 = _BinaryenGtUVecI8x16(),\n  GeSVecI8x16 = _BinaryenGeSVecI8x16(),\n  GeUVecI8x16 = _BinaryenGeUVecI8x16(),\n  EqVecI16x8 = _BinaryenEqVecI16x8(),\n  NeVecI16x8 = _BinaryenNeVecI16x8(),\n  LtSVecI16x8 = _BinaryenLtSVecI16x8(),\n  LtUVecI16x8 = _BinaryenLtUVecI16x8(),\n  LeSVecI16x8 = _BinaryenLeSVecI16x8(),\n  LeUVecI16x8 = _BinaryenLeUVecI16x8(),\n  GtSVecI16x8 = _BinaryenGtSVecI16x8(),\n  GtUVecI16x8 = _BinaryenGtUVecI16x8(),\n  GeSVecI16x8 = _BinaryenGeSVecI16x8(),\n  GeUVecI16x8 = _BinaryenGeUVecI16x8(),\n  EqVecI32x4 = _BinaryenEqVecI32x4(),\n  NeVecI32x4 = _BinaryenNeVecI32x4(),\n  LtSVecI32x4 = _BinaryenLtSVecI32x4(),\n  LtUVecI32x4 = _BinaryenLtUVecI32x4(),\n  LeSVecI32x4 = _BinaryenLeSVecI32x4(),\n  LeUVecI32x4 = _BinaryenLeUVecI32x4(),\n  GtSVecI32x4 = _BinaryenGtSVecI32x4(),\n  GtUVecI32x4 = _BinaryenGtUVecI32x4(),\n  GeSVecI32x4 = _BinaryenGeSVecI32x4(),\n  GeUVecI32x4 = _BinaryenGeUVecI32x4(),\n  EqVecF32x4 = _BinaryenEqVecF32x4(),\n  NeVecF32x4 = _BinaryenNeVecF32x4(),\n  LtVecF32x4 = _BinaryenLtVecF32x4(),\n  LeVecF32x4 = _BinaryenLeVecF32x4(),\n  GtVecF32x4 = _BinaryenGtVecF32x4(),\n  GeVecF32x4 = _BinaryenGeVecF32x4(),\n  EqVecF64x2 = _BinaryenEqVecF64x2(),\n  NeVecF64x2 = _BinaryenNeVecF64x2(),\n  LtVecF64x2 = _BinaryenLtVecF64x2(),\n  LeVecF64x2 = _BinaryenLeVecF64x2(),\n  GtVecF64x2 = _BinaryenGtVecF64x2(),\n  GeVecF64x2 = _BinaryenGeVecF64x2(),\n  AndVec128 = _BinaryenAndVec128(),\n  OrVec128 = _BinaryenOrVec128(),\n  XorVec128 = _BinaryenXorVec128(),\n  AddVecI8x16 = _BinaryenAddVecI8x16(),\n  AddSatSVecI8x16 = _BinaryenAddSatSVecI8x16(),\n  AddSatUVecI8x16 = _BinaryenAddSatUVecI8x16(),\n  SubVecI8x16 = _BinaryenSubVecI8x16(),\n  SubSatSVecI8x16 = _BinaryenSubSatSVecI8x16(),\n  SubSatUVecI8x16 = _BinaryenSubSatUVecI8x16(),\n  MulVecI8x16 = _BinaryenMulVecI8x16(),\n  AddVecI16x8 = _BinaryenAddVecI16x8(),\n  AddSatSVecI16x8 = _BinaryenAddSatSVecI16x8(),\n  AddSatUVecI16x8 = _BinaryenAddSatUVecI16x8(),\n  SubVecI16x8 = _BinaryenSubVecI16x8(),\n  SubSatSVecI16x8 = _BinaryenSubSatSVecI16x8(),\n  SubSatUVecI16x8 = _BinaryenSubSatUVecI16x8(),\n  MulVecI16x8 = _BinaryenMulVecI16x8(),\n  AddVecI32x4 = _BinaryenAddVecI32x4(),\n  SubVecI32x4 = _BinaryenSubVecI32x4(),\n  MulVecI32x4 = _BinaryenMulVecI32x4(),\n  AddVecI64x2 = _BinaryenAddVecI64x2(),\n  SubVecI64x2 = _BinaryenSubVecI64x2(),\n  AddVecF32x4 = _BinaryenAddVecF32x4(),\n  SubVecF32x4 = _BinaryenSubVecF32x4(),\n  MulVecF32x4 = _BinaryenMulVecF32x4(),\n  DivVecF32x4 = _BinaryenDivVecF32x4(),\n  MinVecF32x4 = _BinaryenMinVecF32x4(),\n  MaxVecF32x4 = _BinaryenMaxVecF32x4(),\n  AddVecF64x2 = _BinaryenAddVecF64x2(),\n  SubVecF64x2 = _BinaryenSubVecF64x2(),\n  MulVecF64x2 = _BinaryenMulVecF64x2(),\n  DivVecF64x2 = _BinaryenDivVecF64x2(),\n  MinVecF64x2 = _BinaryenMinVecF64x2(),\n  MaxVecF64x2 = _BinaryenMaxVecF64x2()\n}\n\nexport enum HostOp {\n  MemorySize = _BinaryenMemorySize(),\n  MemoryGrow = _BinaryenMemoryGrow(),\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneSVecI8x16 = _BinaryenExtractLaneSVecI8x16(),\n  ExtractLaneUVecI8x16 = _BinaryenExtractLaneUVecI8x16(),\n  ExtractLaneSVecI16x8 = _BinaryenExtractLaneSVecI16x8(),\n  ExtractLaneUVecI16x8 = _BinaryenExtractLaneUVecI16x8(),\n  ExtractLaneVecI32x4 = _BinaryenExtractLaneVecI32x4(),\n  ExtractLaneVecI64x2 = _BinaryenExtractLaneVecI64x2(),\n  ExtractLaneVecF32x4 = _BinaryenExtractLaneVecF32x4(),\n  ExtractLaneVecF64x2 = _BinaryenExtractLaneVecF64x2(),\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneVecI8x16 = _BinaryenReplaceLaneVecI8x16(),\n  ReplaceLaneVecI16x8 = _BinaryenReplaceLaneVecI16x8(),\n  ReplaceLaneVecI32x4 = _BinaryenReplaceLaneVecI32x4(),\n  ReplaceLaneVecI64x2 = _BinaryenReplaceLaneVecI64x2(),\n  ReplaceLaneVecF32x4 = _BinaryenReplaceLaneVecF32x4(),\n  ReplaceLaneVecF64x2 = _BinaryenReplaceLaneVecF64x2()\n}\n\nexport enum SIMDShiftOp {\n  ShlVecI8x16 = _BinaryenShlVecI8x16(),\n  ShrSVecI8x16 = _BinaryenShrSVecI8x16(),\n  ShrUVecI8x16 = _BinaryenShrUVecI8x16(),\n  ShlVecI16x8 = _BinaryenShlVecI16x8(),\n  ShrSVecI16x8 = _BinaryenShrSVecI16x8(),\n  ShrUVecI16x8 = _BinaryenShrUVecI16x8(),\n  ShlVecI32x4 = _BinaryenShlVecI32x4(),\n  ShrSVecI32x4 = _BinaryenShrSVecI32x4(),\n  ShrUVecI32x4 = _BinaryenShrUVecI32x4(),\n  ShlVecI64x2 = _BinaryenShlVecI64x2(),\n  ShrSVecI64x2 = _BinaryenShrSVecI64x2(),\n  ShrUVecI64x2 = _BinaryenShrUVecI64x2()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private lit: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.lit = memory.allocate(_BinaryenSizeofLiteral());\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.lit = memory.allocate(_BinaryenSizeofLiteral());\n      return module;\n    } finally {\n      memory.free(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunctionType(this.ref, cStr);\n  }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) store<u8>(out + i, bytes[i]);\n    _BinaryenLiteralVec128(out, out);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  host(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  local_get(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenLocalGet(this.ref, index, type);\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenLocalTee(this.ref, index, value);\n  }\n\n  global_get(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    if (type < NativeType.None || type > NativeType.V128) throw new Error(\"here: \" + type);\n    return _BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = this.allocStringCached(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(typeName);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  unreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return _BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    try {\n      return _BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  simd_bitselect(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    cond: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDBitselect(this.ref, vec1, vec2, cond);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    _BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n  }\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Array<i8>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocI32Array(offs);\n    var cArr4 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\n    } finally {\n      memory.free(cArr4);\n      memory.free(cArr3);\n      memory.free(cArr2);\n      memory.free(cArr1);\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\n    }\n  }\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[]\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  getOptimizeLevel(): i32 {\n    return _BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return _BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  getFeatures(): BinaryenFeatureFlags {\n    return _BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: BinaryenFeatureFlags): void {\n    _BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\n    var previousDebugInfo = _BinaryenGetDebugInfo();\n    _BinaryenSetOptimizeLevel(4);\n    _BinaryenSetShrinkLevel(0);\n    _BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = _BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      this.cachedPrecomputeNames = names = allocI32Array([ this.allocStringCached(\"precompute\") ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\n    expr = _BinaryenFunctionGetBody(func);\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\n    _BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(_BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) memory.free(cStr);\n      if (binaryPtr) memory.free(binaryPtr);\n      if (sourceMapPtr) memory.free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str == null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\n    this.cachedStrings = new Map();\n    memory.free(this.lit);\n    memory.free(this.cachedPrecomputeNames);\n    this.cachedPrecomputeNames = 0;\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n        switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.i32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.i64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.f32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.f64(_BinaryenConstGetValueF64(expr));\n          }\n          case NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return _BinaryenLocalGet(this.ref,\n          _BinaryenLocalGetGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = _BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGlobalGet(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return _BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return _BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return _BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return _BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenCallGetOperand(expr, index);\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\n// export function hasSideEffects(expr: ExpressionRef): bool {\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\n//     case ExpressionId.GetLocal:\n//     case ExpressionId.GetGlobal:\n//     case ExpressionId.Const:\n//     case ExpressionId.Nop:\n//     case ExpressionId.Unreachable: {\n//       return false;\n//     }\n//     case ExpressionId.Block: {\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n//       }\n//       return false;\n//     }\n//     case ExpressionId.If: {\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n//     }\n//     case ExpressionId.Unary: {\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\n//     }\n//     case ExpressionId.Binary: {\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\n//     }\n//     case ExpressionId.Drop: {\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\n//     }\n//     case ExpressionId.Select: {\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\n//     }\n//   }\n//   return true;\n// }\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = memory.allocate(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = memory.allocate(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (_BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\n\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n\n/** Traverses all expression members of an expression, calling the given visitor. */\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.Block: {\n      for (let i = 0, n = _BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n        visit(_BinaryenBlockGetChild(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      visit(_BinaryenIfGetCondition(expr), data);\n      visit(_BinaryenIfGetIfTrue(expr), data);\n      let ifFalse = _BinaryenIfGetIfFalse(expr);\n      if (ifFalse) visit(ifFalse, data);\n      break;\n    }\n    case ExpressionId.Loop: {\n      visit(_BinaryenLoopGetBody(expr), data);\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = _BinaryenBreakGetCondition(expr);\n      if (condition) visit(condition, data);\n      break;\n    }\n    case ExpressionId.Switch: {\n      visit(_BinaryenSwitchGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Call: {\n      for (let i = 0, n = _BinaryenCallGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenCallGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      for (let i = 0, n = _BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenCallIndirectGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      visit(_BinaryenLocalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      visit(_BinaryenGlobalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Load: {\n      visit(_BinaryenLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.Store: {\n      visit(_BinaryenStoreGetPtr(expr), data);\n      visit(_BinaryenStoreGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      visit(_BinaryenAtomicRMWGetPtr(expr), data);\n      visit(_BinaryenAtomicRMWGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      visit(_BinaryenAtomicCmpxchgGetPtr(expr), data);\n      visit(_BinaryenAtomicCmpxchgGetExpected(expr), data);\n      visit(_BinaryenAtomicCmpxchgGetReplacement(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      visit(_BinaryenAtomicWaitGetPtr(expr), data);\n      visit(_BinaryenAtomicWaitGetExpected(expr), data);\n      visit(_BinaryenAtomicWaitGetTimeout(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      visit(_BinaryenAtomicNotifyGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      visit(_BinaryenSIMDExtractGetVec(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      visit(_BinaryenSIMDReplaceGetVec(expr), data);\n      visit(_BinaryenSIMDReplaceGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      visit(_BinaryenSIMDShuffleGetLeft(expr), data);\n      visit(_BinaryenSIMDShuffleGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDBitselect: {\n      visit(_BinaryenSIMDBitselectGetLeft(expr), data);\n      visit(_BinaryenSIMDBitselectGetRight(expr), data);\n      visit(_BinaryenSIMDBitselectGetCond(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      visit(_BinaryenSIMDShiftGetVec(expr), data);\n      visit(_BinaryenSIMDShiftGetShift(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      visit(_BinaryenMemoryInitGetDest(expr), data);\n      visit(_BinaryenMemoryInitGetOffset(expr), data);\n      visit(_BinaryenMemoryInitGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      visit(_BinaryenMemoryCopyGetDest(expr), data);\n      visit(_BinaryenMemoryCopyGetSource(expr), data);\n      visit(_BinaryenMemoryCopyGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      visit(_BinaryenMemoryFillGetDest(expr), data);\n      visit(_BinaryenMemoryFillGetValue(expr), data);\n      visit(_BinaryenMemoryFillGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      visit(_BinaryenUnaryGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Binary: {\n      visit(_BinaryenBinaryGetLeft(expr), data);\n      visit(_BinaryenBinaryGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.Select: {\n      visit(_BinaryenSelectGetIfTrue(expr), data);\n      visit(_BinaryenSelectGetIfFalse(expr), data);\n      visit(_BinaryenSelectGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Drop: {\n      visit(_BinaryenDropGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Return: {\n      visit(_BinaryenReturnGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Host: {\n      for (let i = 0, n = _BinaryenHostGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenHostGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    default: assert(false);\n  }\n  return true;\n}\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  CommonSymbols,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  TYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n  SIGNATURE,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.ASSERTION: // if kind=NONNULL\n    case NodeKind.CALL:\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PARENTHESIZED:\n    case NodeKind.PROPERTYACCESS:\n    case NodeKind.SUPER: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n\n  // types\n\n  static createTypeName(\n    name: IdentifierExpression,\n    range: Range\n  ): TypeName {\n    var typeName = new TypeName();\n    typeName.range = range;\n    typeName.identifier = name;\n    typeName.next = null;\n    return typeName;\n  }\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\n  }\n\n  static createType(\n    name: TypeName,\n    typeArguments: CommonTypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): TypeNode {\n    var type = new TypeNode();\n    type.range = range;\n    type.name = name;\n    type.typeArguments = typeArguments;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): TypeNode {\n    return Node.createType(\n      Node.createSimpleTypeName(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: TypeNode | null,\n    defaultType: TypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.extendsType = extendsType;\n    elem.defaultType = defaultType;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: CommonTypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  static createSignature(\n    parameters: ParameterNode[],\n    returnType: CommonTypeNode,\n    explicitThisType: TypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): SignatureNode {\n    var sig = new SignatureNode();\n    sig.range = range;\n    sig.parameters = parameters;\n    sig.returnType = returnType;\n    sig.explicitThisType = explicitThisType;\n    sig.isNullable = isNullable;\n    return sig;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.arguments = args;\n    stmt.decoratorKind = decoratorNameToKind(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name; // TODO: extract from range\n    expr.symbol = name; // TODO: Symbol.for(name)\n    expr.isQuoted = isQuoted;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements;\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: CommonTypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression;\n    expr.toType = toType;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left;\n    expr.right = right;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions;\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.elementExpression = element;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: CommonTypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.isType = isType;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.property = property;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition;\n    expr.ifThen = ifThen;\n    expr.ifElse = ifElse;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: TypeNode | null, // can't be a function\n    implementsTypes: TypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.implementsTypes = implementsTypes;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement;\n    stmt.condition = condition;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.values = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.members = members;\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n          normalizedPath = LIBRARY_PREFIX + normalizedPath;\n        }\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    stmt.isDeclare = isDeclare;\n    return stmt;\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    var stmt = new ExportDefaultStatement();\n    stmt.declaration = declaration;\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.externalName = externalName;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.localName = name;\n    if (!externalName) externalName = name;\n    elem.exportedName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.ifTrue = ifTrue;\n    stmt.ifFalse = ifFalse;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls;\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) {\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else {\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.foreignName = foreignName;\n    if (!name) name = foreignName;\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: TypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.type = type;\n    stmt.initializer = initializer;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer;\n    stmt.condition = condition;\n    stmt.incrementor = incrementor;\n    stmt.statement = statement;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    stmt.arrowKind = arrowKind;\n    return stmt;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: TypeNode,\n    valueType: CommonTypeNode,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var elem = new IndexSignatureDeclaration();\n    elem.range = range;\n    elem.keyType = keyType;\n    elem.valueType = valueType;\n    return elem;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.cases = cases;\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label;\n    elem.statements = statements;\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    stmt.catchVariable = catchVariable;\n    stmt.catchStatements = catchStatements;\n    stmt.finallyStatements = finallyStatements;\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: CommonTypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.type = alias;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.declarations = declarations;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.statement = statement;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class CommonTypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  kind = NodeKind.TYPENAME;\n\n  /** Identifier of this part. */\n  identifier: IdentifierExpression;\n  /** Next part of the type name or `null` if this is the last part. */\n  next: TypeName | null;\n}\n\n/** Represents a type annotation. */\nexport class TypeNode extends CommonTypeNode {\n  kind = NodeKind.TYPE;\n\n  /** Type name. */\n  name: TypeName;\n  /** Type argument references. */\n  typeArguments: CommonTypeNode[] | null;\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: TypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: CommonTypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents a function signature. */\nexport class SignatureNode extends CommonTypeNode {\n  kind = NodeKind.SIGNATURE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: CommonTypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: TypeNode | null; // can't be a function\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  START,\n  UNSAFE\n}\n\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\n  // @global, @inline, @operator, @sealed, @unmanaged\n  if (name.kind == NodeKind.IDENTIFIER) {\n    let nameStr = (<IdentifierExpression>name).text;\n    assert(nameStr.length);\n    switch (nameStr.charCodeAt(0)) {\n      case CharCode.b: {\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n        break;\n      }\n      case CharCode.e: {\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n        break;\n      }\n      case CharCode.g: {\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n        break;\n      }\n      case CharCode.i: {\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\n        break;\n      }\n      case CharCode.l: {\n        if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n        break;\n      }\n      case CharCode.o: {\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n        break;\n      }\n      case CharCode.s: {\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n        if (nameStr == \"start\") return DecoratorKind.START;\n        break;\n      }\n      case CharCode.u: {\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n        if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n        break;\n      }\n    }\n  } else if (\n    name.kind == NodeKind.PROPERTYACCESS &&\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\n  ) {\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\n    assert(nameStr.length);\n    let propStr = (<PropertyAccessExpression>name).property.text;\n    assert(propStr.length);\n    // @operator.binary, @operator.prefix, @operator.postfix\n    if (nameStr == \"operator\") {\n      switch (propStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n          break;\n        }\n        case CharCode.p: {\n          switch (propStr) {\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n          }\n          break;\n        }\n      }\n    }\n  }\n  return DecoratorKind.CUSTOM;\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n  /** Symbol. */\n  symbol: string; // TODO: symbol\n  /** Whether quoted or not. */\n  isQuoted: bool;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS,\n  NONNULL\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: CommonTypeNode | null;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: CommonTypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n  symbol = CommonSymbols.constructor;\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: CommonTypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n  symbol = CommonSymbols.null_;\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n  symbol = CommonSymbols.super_;\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n  symbol = CommonSymbols.this_;\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n  symbol = CommonSymbols.true_;\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n  symbol = CommonSymbols.false_;\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** Default source. Usually imported from an entry file. */\n  DEFAULT,\n  /** Entry file. */\n  ENTRY,\n  /** Library file. */\n  LIBRARY\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Tests if this source is an entry file. */\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\n  /** Tests if this source is a stdlib file. */\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\n\n  /** Key type. */\n  keyType: TypeNode;\n  /** Value type. */\n  valueType: CommonTypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: CommonTypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Base class type being extended, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: TypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Local identifier. */\n  localName: IdentifierExpression;\n  /** Exported identifier. */\n  exportedName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a file export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n  /** Whether this is a declared export. */\n  isDeclare: bool;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  kind = NodeKind.EXPORTDEFAULT;\n\n  /** Declaration being exported as default. */\n  declaration: DeclarationStatement;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: SignatureNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n  /** Arrow function kind, if applicable. */\n  arrowKind: ArrowKind;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return Node.createFunctionDeclaration(\n      this.name,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.decorators,\n      this.flags,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  foreignName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: CommonTypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: CommonTypeNode): bool {\n  if (type.kind == NodeKind.TYPE) {\n    let name = (<TypeNode>type).name;\n    return !(name.next || name.identifier.text.length);\n  }\n  return false;\n}\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10\n}\n\nconst v128_zero = new Uint8Array(16);\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\n    else if (target.is(TypeFlags.REFERENCE)) return false;\n    if (this.is(TypeFlags.INTEGER)) {\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(): string {\n    if (this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.internalName + \" | null\"\n          : classReference.internalName;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString() + \") | null\"\n          : signatureReference.toString();\n      }\n      assert(false);\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      // same naming scheme as Binaryen\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"j\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"j\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"d\";\n      case TypeKind.V128: return \"V\";\n      case TypeKind.VOID: return \"v\";\n      default: assert(false);\n    }\n    return \"i\";\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n\n  /** Constructs a new signature. */\n  constructor(\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    sb.push(returnType.toSignatureString());\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    return \"FUNCSIG$\" + sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(\"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString());\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics || new Array();\n\n    var end = this.end;\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (isDecimalDigit(chr)) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < end) {\n                chr = text.charCodeAt(this.pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    while (\n      ++this.pos < end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var end = this.end;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c)) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos + 1 < end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.x:\n        case CharCode.X:\n        case CharCode.b:\n        case CharCode.B:\n        case CharCode.o:\n        case CharCode.O: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.e || c == CharCode.E) return false;\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.x:\n        case CharCode.X: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b:\n        case CharCode.B: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o:\n        case CharCode.O: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    var sepEnd = start;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.e || c == CharCode.E) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 65536) >>> 10) + 0xD800,\n        ((value32 - 65536) & 1023) + 0xDC00\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow\n} from \"./flow\";\n\nimport {\n  SignatureNode,\n  ParameterKind,\n  CommonTypeNode,\n  NodeKind,\n  TypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonSymbols\n} from \"./common\";\n\nimport {\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token\n} from \"./tokenizer\";\n\nimport {\n  BuiltinSymbols\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: CommonTypeNode,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n\n    // handle signature\n    if (node.kind == NodeKind.SIGNATURE) {\n      let explicitThisType = (<SignatureNode>node).explicitThisType;\n      let thisType: Type | null = null;\n      if (explicitThisType) {\n        thisType = this.resolveType(\n          explicitThisType,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!thisType) return null;\n      }\n      let parameterNodes = (<SignatureNode>node).parameters;\n      let numParameters = parameterNodes.length;\n      let parameterTypes = new Array<Type>(numParameters);\n      let parameterNames = new Array<string>(numParameters);\n      let requiredParameters = 0;\n      let hasRest = false;\n      for (let i = 0; i < numParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        switch (parameterNode.parameterKind) {\n          case ParameterKind.DEFAULT: {\n            requiredParameters = i + 1;\n            break;\n          }\n          case ParameterKind.REST: {\n            assert(i == numParameters);\n            hasRest = true;\n            break;\n          }\n        }\n        let parameterTypeNode = parameterNode.type;\n        if (isTypeOmitted(parameterTypeNode)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              parameterTypeNode.range\n            );\n          }\n          return null;\n        }\n        let parameterType = this.resolveType(\n          parameterTypeNode,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!parameterType) return null;\n        parameterTypes[i] = parameterType;\n        parameterNames[i] = parameterNode.name.text;\n      }\n      let returnTypeNode = (<SignatureNode>node).returnType;\n      if (isTypeOmitted(returnTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnTypeNode.range\n          );\n        }\n        return null;\n      }\n      let returnType: Type | null;\n      if (returnTypeNode) {\n        returnType = this.resolveType(\n          returnTypeNode,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!returnType) return null;\n      } else {\n        returnType = Type.void;\n      }\n      let signature = new Signature(parameterTypes, returnType, thisType);\n      signature.parameterNames = parameterNames;\n      signature.requiredParameters = requiredParameters;\n      signature.hasRest = hasRest;\n      return node.isNullable ? signature.type.asNullable() : signature.type;\n    }\n\n    // now dealing with TypeNode\n    assert(node.kind == NodeKind.TYPE);\n    var typeNode = <TypeNode>node;\n    var typeName = typeNode.name;\n    var typeArgumentNodes = typeNode.typeArguments;\n    var possiblyPlaceholder = !typeName.next;\n\n    // look up in contextual type arguments if possibly a placeholder\n    if (possiblyPlaceholder) {\n      if (contextualTypeArguments && contextualTypeArguments.has(typeName.identifier.text)) {\n        let type = contextualTypeArguments.get(typeName.identifier.text)!;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                node.range, type.toString()\n              );\n            }\n          }\n          return type.asNullable();\n        }\n        return type;\n      }\n    }\n\n    // look up in context\n    var element = this.resolveTypeName(typeName, context, reportMode);\n    if (!element) return null;\n\n    // use shadow type if present (i.e. namespace sharing a type)\n    if (element.shadowType) {\n      element = element.shadowType;\n\n    } else {\n      // handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, element.name\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // handle classes\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          context,\n          makeMap<string,Type>(contextualTypeArguments), // don't inherit\n          node\n        ); // reports\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n\n      // shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = (<TypeDefinition>element).type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                typeNode.name.range, typeName.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // handle special native type\n      if (possiblyPlaceholder && typeName.identifier.text == CommonSymbols.native) {\n        if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              typeNode.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n            );\n          }\n          return null;\n        }\n        let typeArgument = this.resolveType(\n          typeArgumentNodes[0],\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!typeArgument) return null;\n        switch (typeArgument.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: return Type.i32;\n          case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n          case TypeKind.I64: return Type.i64;\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: return Type.u32;\n          case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n          case TypeKind.U64: return Type.u64;\n          case TypeKind.F32: return Type.f32;\n          case TypeKind.F64: return Type.f64;\n          case TypeKind.V128: return Type.v128;\n          case TypeKind.VOID: return Type.void;\n          default: assert(false);\n        }\n      }\n\n      // resolve normally\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          context,\n          contextualTypeArguments = makeMap(contextualTypeArguments), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          typeNode.range, typeName.identifier.text\n        );\n        // recoverable\n      }\n      let type = this.resolveType(\n        (<TypeDefinition>element).typeNode,\n        element,\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (!type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              typeNode.name.range, typeName.identifier.text\n            );\n          }\n        } else {\n          return type.asNullable();\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        typeNode.name.range, typeName.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    typeName: TypeName,\n    /** Relative context. */\n    context: Element,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = context.lookup(typeName.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          typeName.range, typeName.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = typeName;\n    var next = typeName.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Actual type parameter nodes. */\n    typeParameters: TypeParameterNode[],\n    /** Type arguments provided. */\n    typeArgumentNodes: CommonTypeNode[] | null,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      this.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        argumentCount\n          ? Range.join(\n              (<TypeNode[]>typeArgumentNodes)[0].range,\n              (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n            )\n          : assert(alternativeReportNode).range,\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\n        argumentCount.toString(10)\n      );\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            (<TypeNode[]>typeArgumentNodes)[i],\n            context,\n            contextualTypeArguments,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            context,\n            contextualTypeArguments,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      contextualTypeArguments.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves an identifier to the program element it refers to. */\n  resolveIdentifier(\n    /** The expression to resolve. */\n    identifier: IdentifierExpression,\n    /** Optional flow to search for scoped locals. */\n    flow: Flow | null,\n    /** Optional context to search. */\n    context: Element | null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var name = identifier.text;\n    var element: Element | null;\n    if (flow) {\n      if (element = flow.lookup(name)) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return element;\n      }\n    }\n    if (context) {\n      if (element = context.lookup(name)) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return element;\n      }\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        identifier.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field. */\n  ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var typeNode = global.typeNode;\n    if (!typeNode) return false;\n    var type = this.resolveType( // reports\n      typeNode,\n      global.parent,\n      null,\n      reportMode\n    );\n    if (!type) return false;\n    global.setType(type);\n    return true;\n  }\n\n  /** Resolves a property access expression to the program element it refers to. */\n  resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    propertyAccess: PropertyAccessExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = propertyAccess.expression;\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = propertyAccess.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let typeClasses = this.program.typeClasses;\n          if (!type.is(TypeFlags.REFERENCE) && typeClasses.has(type.kind)) {\n            classReference = typeClasses.get(type.kind)!;\n          } else {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n            );\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static\n        let getterInstance = this.resolveFunction( // reports\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getterInstance) return null;\n        let classReference = getterInstance.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\n        let classReference = getterInstance.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.CLASS: { // property access on element access?\n        let elementExpression = this.currentElementExpression;\n        if (elementExpression) {\n          // let arrayType = this.program.determineBuiltinArrayType(<Class>target);\n          // if (!arrayType) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                elementExpression.range, (<Class>target).internalName\n              );\n              return null;\n            }\n            let arrayType = indexedGet.signature.returnType;\n          // }\n          if (!(target = arrayType.classReference)) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, arrayType.toString()\n            );\n            return null;\n          }\n        }\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        }\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          if (members && members.has(propertyName)) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members && members.has(propertyName)) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = null;\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      propertyAccess.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  /** Resolves an element access expression to the program element it refers to. */\n  resolveElementAccessExpression(\n    /** The expression to resolve. */\n    elementAccess: ElementAccessExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = elementAccess.expression;\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        if (target = type.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        // let arrayType = this.program.determineBuiltinArrayType(<Class>target);\n        // if (!arrayType) {\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n          if (!indexedGet) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                elementAccess.range, (<Class>target).internalName\n              );\n            }\n            return null;\n          }\n          let arrayType = indexedGet.signature.returnType;\n        // }\n        if (targetExpression.kind == NodeKind.ELEMENTACCESS) { // nested element access\n          if (target = arrayType.classReference) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = elementAccess.elementExpression;\n            return target;\n          }\n          return null;\n        }\n        this.currentThisExpression = targetExpression;\n        this.currentElementExpression = elementAccess.elementExpression;\n        return target;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        targetExpression.range\n      );\n    }\n    return null;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: I64,\n    /** Current contextual type. */\n    contextualType: Type\n  ): Type {\n    if (!contextualType.is(TypeFlags.REFERENCE)) {\n      // compile to contextualType if matching\n      switch (contextualType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n        case TypeKind.VOID: break; // best fitting below\n        default: assert(false);\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64;\n  }\n\n  /** Resolves any expression to the program element it refers to. */\n  resolveExpression(\n    /** The expression to resolve. */\n    expression: Expression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // simply skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(\n          <IdentifierExpression>expression,\n          flow, flow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      // TODO: everything else\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an assertion expression to the program element it refers to. */\n  resolveAssertionExpression(\n    /** The expression to resolve. */\n    expression: AssertionExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (expression.assertionKind == AssertionKind.NONNULL) {\n      return this.resolveExpression(\n        expression.expression,\n        flow,\n        contextualType,\n        reportMode\n      );\n    }\n    var type = this.resolveType(\n      assert(expression.toType), // must be set if not NONNULL\n      flow.actualFunction,\n      flow.contextualTypeArguments,\n      reportMode\n    );\n    if (!type) return null;\n    var element: Element | null = type.classReference;\n    if (!element) {\n      let signature = type.signatureReference;\n      if (!signature) return null;\n      element = signature.asFunctionTarget(this.program);\n    }\n    this.currentThisExpression = null;\n    this.currentElementExpression = null;\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to the program element it refers to. */\n  resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    expression: UnaryPrefixExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var operand = expression.operand;\n    // TODO: operator overloads\n    switch (expression.operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\n          let type = this.determineIntegerLiteralType(\n            i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value),\n            contextualType\n          );\n          let typeClasses = this.program.typeClasses;\n          return typeClasses.has(type.kind) ? typeClasses.get(type.kind)! : null;\n        }\n        return this.resolveExpression(\n          operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        return this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      case Token.EXCLAMATION: {\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(TypeKind.BOOL) ? typeClasses.get(TypeKind.BOOL)! : null;\n      }\n      case Token.TILDE: {\n        let resolvedOperand = this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n        if (!resolvedOperand) return null;\n        // TODO\n        break;\n      }\n      default: assert(false);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an unary postfix expression to the program element it refers to. */\n  resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    expression: UnaryPostfixExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // TODO: operator overloads\n    switch (expression.operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        return this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to the program element it refers to. */\n  resolveBinaryExpression(\n    /** The expression to resolve. */\n    expression: BinaryExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // TODO\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to the program element it refers to. */\n  resolveThisExpression(\n    /** The expression to resolve. */\n    expression: ThisExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      let thisLocal = flow.lookupLocal(CommonSymbols.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = flow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to the program element it refers to. */\n  resolveSuperExpression(\n    /** The expression to resolve. */\n    expression: SuperExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      let superLocal = flow.lookupLocal(CommonSymbols.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = flow.actualFunction.parent;\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a literal expression to the program element it refers to. */\n  resolveLiteralExpression(\n    /** The expression to resolve. */\n    expression: LiteralExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (expression.literalKind) {\n      case LiteralKind.INTEGER: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        let literalType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>expression).value,\n          contextualType\n        );\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\n      }\n      case LiteralKind.FLOAT: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        let literalType = contextualType == Type.f32 ? Type.f32 : Type.f64;\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\n      }\n      case LiteralKind.STRING: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        return this.program.stringInstance;\n      }\n      // TODO\n      // case LiteralKind.ARRAY:\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a call expression to the program element it refers to. */\n  resolveCallExpression(\n    /** The expression to resolve. */\n    expression: CallExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = expression.expression;\n    var target = this.resolveExpression( // reports\n      targetExpression,\n      flow,\n      contextualType,\n      reportMode\n    );\n    if (!target) return null;\n    if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      // `unchecked(expr: *): *` is special\n      if (\n        (<FunctionPrototype>target).internalName == BuiltinSymbols.unchecked &&\n        expression.arguments.length > 0\n      ) {\n        return this.resolveExpression(expression.arguments[0], flow, contextualType, reportMode);\n      }\n      // otherwise resolve normally\n      let instance = this.resolveFunctionInclTypeArguments(\n        <FunctionPrototype>target,\n        expression.typeArguments,\n        flow.actualFunction,\n        makeMap(flow.contextualTypeArguments), // don't inherit\n        expression,\n        reportMode\n      );\n      if (!instance) return null;\n      let returnType = instance.signature.returnType;\n      let classType = returnType.classReference;\n      if (classType) {\n        // reuse resolvedThisExpression (might be property access)\n        // reuse resolvedElementExpression (might be element access)\n        return classType;\n      } else {\n        let signature = returnType.signatureReference;\n        if (signature) {\n          let functionTarget = signature.asFunctionTarget(this.program);\n          // reuse resolvedThisExpression (might be property access)\n          // reuse resolvedElementExpression (might be element access)\n          return functionTarget;\n        }\n      }\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          targetExpression.range, target.internalName\n        );\n      }\n      return null;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!contextualTypeArguments.has(classTypeParameterName)) {\n            contextualTypeArguments.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.signatureNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        contextualTypeArguments.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!thisType) return null;\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          typeNode.range\n        );\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          typeNode.range\n        );\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      signature,\n      contextualTypeArguments\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArgumentNodes: CommonTypeNode[] | null,\n    /** Relative context. Type arguments are resolved from here. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classTypeArguments = (<Class>actualParent).typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            contextualTypeArguments.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        context,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        contextualTypeArguments.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes && typeParameterNodes.length));\n    }\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    var baseClass: Class | null = null;\n    if (basePrototype) {\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      baseClass = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(contextualTypeArguments), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!baseClass) return null;\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    prototype.setResolvedInstance(instanceKey, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      let baseMembers = baseClass.members;\n      if (baseMembers) {\n        let instanceMembers = instance.members;\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\n        for (let [baseMemberName, baseMember] of baseMembers) {\n          instanceMembers.set(baseMemberName, baseMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve instance members\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    if (instanceMemberPrototypes) {\n      for (let member of instanceMemberPrototypes.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            let instanceMembers = instance.members;\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\n            else if (instanceMembers.has(member.name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                (<FieldPrototype>member).identifierNode.range,\n                member.name\n              );\n              break;\n            }\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (baseClass) {\n                let baseMembers = baseClass.members;\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    (<FieldPrototype>member).identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(member.name, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\n            if (getterPrototype) {\n              let getterInstance = this.resolveFunction(\n                getterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (getterInstance) {\n                propertyInstance.getterInstance = getterInstance;\n                propertyInstance.setType(getterInstance.signature.returnType);\n              }\n            }\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\n            if (setterPrototype) {\n              let setterInstance = this.resolveFunction(\n                setterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (setterInstance) {\n                propertyInstance.setterInstance = setterInstance;\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\n                  assert(setterInstance.signature.parameterTypes.length == 1);\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\n                }\n              }\n            }\n            instance.add(propertyInstance.name, propertyInstance); // reports\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Link _own_ constructor if present\n    {\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\n      if (ctorPrototype && ctorPrototype.parent === instance) {\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n        let ctorInstance = this.resolveFunction(\n          <FunctionPrototype>ctorPrototype,\n          null,\n          instance.contextualTypeArguments,\n          reportMode\n        );\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      overloads.set(kind, operatorInstance);\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type argument nodes provided. */\n    typeArgumentNodes: CommonTypeNode[] | null,\n    /** Relative context. Type arguments are resolved from here. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        context,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n}\n","/**\n * A control flow analyzer.\n * @module flow\n *//***/\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  BinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  UnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue,\n  getCallOperand,\n  traverse\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow returns. */\n  RETURNS = 1 << 0,\n  /** This flow returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow throws. */\n  THROWS = 1 << 3,\n  /** This flow breaks. */\n  BREAKS = 1 << 4,\n  /** This flow continues. */\n  CONTINUES = 1 << 5,\n  /** This flow allocates. Constructors only. */\n  ALLOCATES = 1 << 6,\n  /** This flow calls super. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 8,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 9,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 10,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 11,\n  /** This flow conditionally allocates in a child flow. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 12,\n\n  // special\n\n  /** This is an inlining flow. */\n  INLINE_CONTEXT = 1 << 13,\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 14,\n\n  // masks\n\n  /** Any terminating flag. */\n  ANY_TERMINATING = FlowFlags.RETURNS\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES\n                  | FlowFlags.CALLS_SUPER,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 1,\n  /** Local is non-null. */\n  NONNULL = 1 << 2,\n  /** Local is read from. */\n  READFROM = 1 << 3,\n  /** Local is written to. */\n  WRITTENTO = 1 << 4,\n  /** Local is retained. */\n  RETAINED = 1 << 5,\n\n  /** Local is conditionally read from. */\n  CONDITIONALLY_READFROM = 1 << 6,\n  /** Local is conditionally written to. */\n  CONDITIONALLY_WRITTENTO = 1 << 7,\n  /** Local must be conditionally retained. */\n  CONDITIONALLY_RETAINED = 1 << 8,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = CONSTANT\n                  | WRAPPED\n                  | NONNULL\n                  | READFROM\n                  | WRITTENTO\n                  | RETAINED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = RETAINED\n                  | CONDITIONALLY_READFROM\n                  | CONDITIONALLY_WRITTENTO\n                  | CONDITIONALLY_RETAINED,\n\n  /** Any retained flag. */\n  ANY_RETAINED = RETAINED\n               | CONDITIONALLY_RETAINED\n}\nexport namespace LocalFlags {\n  export function join(left: LocalFlags, right: LocalFlags): LocalFlags {\n    return ((left & LocalFlags.ANY_CATEGORICAL) & (right & LocalFlags.ANY_CATEGORICAL))\n         |  (left & LocalFlags.ANY_CONDITIONAL) | (right & LocalFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** Flags indicating the current state of a field. */\nexport enum FieldFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Field is initialized. Relevant in constructors. */\n  INITIALIZED = 1 << 0,\n  /** Field is conditionally initialized. Relevant in constructors. */\n  CONDITIONALLY_INITIALIZED = 1 << 1,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = INITIALIZED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = CONDITIONALLY_INITIALIZED\n}\nexport namespace FieldFlags {\n  export function join(left: FieldFlags, right: FieldFlags): FieldFlags {\n    return ((left & FieldFlags.ANY_CATEGORICAL) & (right & FieldFlags.ANY_CATEGORICAL))\n         |  (left & FieldFlags.ANY_CONDITIONAL) | (right & FieldFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  parentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[];\n  /** Field flags. Relevant in constructors. */\n  fieldFlags: Map<string,FieldFlags> | null = null;\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(parentFunction: Function): Flow {\n    var flow = new Flow();\n    flow.parent = null;\n    flow.flags = FlowFlags.NONE;\n    flow.parentFunction = parentFunction;\n    flow.continueLabel = null;\n    flow.breakLabel = null;\n    flow.returnType = parentFunction.signature.returnType;\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\n    flow.localFlags = [];\n    flow.inlineFunction = null;\n    flow.inlineReturnLabel = null;\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = Flow.create(parentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\n    flow.returnType = inlineFunction.signature.returnType;\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\n    return flow;\n  }\n\n  private constructor() { }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    return this.inlineFunction || this.parentFunction;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.parentFunction = this.parentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.localFlags = this.localFlags.slice();\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps && temps.length) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps && temps.length) {\n        local = temps.pop();\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Gets a local that sticks around until this flow is exited, and then released. */\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    local.set(CommonFlags.SCOPED);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++), local);\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\n        break;\n      }\n      case NativeType.V128: {\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    this.freeTempLocal(local);\n    return local;\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals && scopedLocals.has(name)) return scopedLocals.get(name);\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          this.parentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            reportNode.range\n          );\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    var scope: Map<String,Local> | null;\n    do if ((scope = current.scopedLocals) && (scope.has(name))) return scope.get(name);\n    while (current = current.parent);\n    return this.parentFunction.localsByName.get(name);\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    this.localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    this.localFlags[index] = flags & ~flag;\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    return parentFunction.breakLabel = id.toString(10);\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString(10);\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.localFlags = other.localFlags; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n    var localFlags = other.localFlags;\n    for (let i = 0, k = localFlags.length; i < k; ++i) {\n      let flags = localFlags[i];\n      if (flags & LocalFlags.RETAINED) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETAINED);\n      if (flags & LocalFlags.READFROM) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_READFROM);\n      if (flags & LocalFlags.WRITTENTO) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_WRITTENTO);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.set(left.flags & right.flags & FlowFlags.ANY_CATEGORICAL);\n\n    // conditional flags set in at least one arm\n    this.set(left.flags & FlowFlags.ANY_CONDITIONAL);\n    this.set(right.flags & FlowFlags.ANY_CONDITIONAL);\n\n    // categorical local flags set in both arms / conditional local flags set in at least one arm\n    var leftLocalFlags = left.localFlags;\n    var numLeftLocalFlags = leftLocalFlags.length;\n    var rightLocalFlags = right.localFlags;\n    var numRightLocalFlags = rightLocalFlags.length;\n    var combinedFlags = new Array<LocalFlags>(max<i32>(numLeftLocalFlags, numRightLocalFlags));\n    for (let i = 0; i < numLeftLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        unchecked(leftLocalFlags[i]),\n        i < numRightLocalFlags\n          ? unchecked(rightLocalFlags[i])\n          : 0\n      );\n    }\n    for (let i = numLeftLocalFlags; i < numRightLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        0,\n        unchecked(rightLocalFlags[i])\n      );\n    }\n    this.localFlags = combinedFlags;\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.is(TypeFlags.NULLABLE)) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(expr: ExpressionRef): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        this.inheritNonnullIfTrue(getLocalSetValue(expr)); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr));\n            this.inheritNonnullIfTrue(getIfTrue(expr));\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr)); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Call: {\n        let name = getCallTarget(expr);\n        let program = this.parentFunction.program;\n        switch (name) {\n          case program.retainInstance.internalName: {\n            this.inheritNonnullIfTrue(getCallOperand(expr, 0));\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(expr: ExpressionRef): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr)); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          if (\n            (getExpressionType(ifTrue) == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\n            (getExpressionType(ifTrue) == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr));\n            this.inheritNonnullIfFalse(getIfFalse(expr));\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr))));\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow(assert((<Global>global).type), type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = instancesByName.get(instanceName)!;\n          assert(instance.kind == ElementKind.FUNCTION);\n          let returnType = (<Function>instance).signature.returnType;\n          return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    return \"Flow(\" + this.actualFunction + \")[\" + levels.toString() + \"]\";\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n\n/** Finds all indexes of locals used in the specified expression. */\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set()): Set<i32> {\n  traverse(expr, used, findUsedLocalsVisit);\n  return used;\n}\n\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.LocalGet: {\n      used.add(getLocalGetIndex(expr));\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      used.add(getLocalSetIndex(expr));\n      // fall-through for value\n    }\n    default: traverse(expr, used, findUsedLocalsVisit);\n  }\n}\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  BuiltinSymbols,\n  compileCall as compileBuiltinCall,\n  compileAbort,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  needsExplicitUnreachable,\n  getLocalGetIndex,\n  FeatureFlags,\n  isLocalTee,\n  getLocalSetIndex\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  CommonSymbols,\n  INDEX_SUFFIX,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  File,\n  mangleInternalName\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver, ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  TypeNode,\n  Range,\n  DecoratorKind,\n  AssertionKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  nodeIsConstantValue,\n  findDecorator,\n  isTypeOmitted,\n  ExportDefaultStatement\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap\n} from \"./util\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\n  sharedMemory: i32 = 0;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases. */\n  globalAliases: Map<string,string> | null = null;\n  /** Additional features to activate. */\n  features: Feature = Feature.NONE;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Requests or indicates compilation conditions of statements and expressions. */\nexport const enum ContextualFlags {\n  NONE = 0,\n\n  /** Implicit conversion required. */\n  IMPLICIT = 1 << 0,\n  /** Explicit conversion required. */\n  EXPLICIT = 1 << 1,\n  /** Small integer wrap required. */\n  WRAP = 1 << 2,\n\n  /** Value is known to be immediately dropped. */\n  WILL_DROP = 1 << 3,\n  /** Value is known to be immediately assigned to a retaining target.  */\n  SKIP_AUTORELEASE = 1 << 4,\n  /** Is the last statement in a function body. */\n  LAST_IN_BODY = 1 << 5,\n  /** Data can be compiled statically. */\n  STATIC_CAPABLE = 1 << 6\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires heap setup. */\n  HEAP = 1 << 0,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 1,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 2,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 3\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  resolver: Resolver;\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: string[] = [ \"null\" ];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    this.resolver = program.resolver;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n    var featureFlags: BinaryenFeatureFlags = 0;\n    if (this.options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (this.options.hasFeature(Feature.MUTABLE_GLOBAL)) featureFlags |= FeatureFlags.MutableGloabls;\n    // if (this.options.hasFeature(Feature.TRUNC_SAT)) featureFlags |= FeatureFlags.NontrappingFPToInt;\n    if (this.options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\n    if (this.options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (this.options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    // if (this.options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    this.module.setFeatures(featureFlags);\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature([], Type.void));\n    startFunctionInstance.internalName = \"start\";\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = startFunctionBody;\n\n    // add a mutable heap and rtti base dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    for (let file of files.values()) {\n      if (file.source.isEntry) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or called by main\n    var hasExplicitStart = program.explicitStartFunction !== null;\n    if (startFunctionBody.length || hasExplicitStart) {\n      let signature = startFunctionInstance.signature;\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.block(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!hasExplicitStart) module.setStart(funcRef);\n    }\n\n    // compile runtime features\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n    module.removeGlobal(BuiltinSymbols.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinSymbols.heap_base);\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\n      if (options.isWasm64) {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I64,\n          false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I32,\n          false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // set up memory\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\n    module.setMemory(\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n        : 0,\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      \"memory\",\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table\n    var functionTable = this.functionTable;\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.block(null, []));\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\n\n    // set up module exports\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.isEntry) this.ensureModuleExports(file);\n    }\n    return module;\n  }\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var members = file.exports;\n    if (members) for (let [name, member] of members) this.ensureModuleExport(name, member);\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.ensureModuleExports(exportsStar[i]);\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instances = (<FunctionPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instances = (<ClassPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getter = (<PropertyPrototype>element).getterPrototype;\n        let setter = (<PropertyPrototype>element).setterPrototype;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<Global>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!(<EnumValue>element).isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<EnumValue>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = (<Property>element).getterInstance;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterInstance;\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        this.ensureModuleFieldGetter(prefix + GETTER_PREFIX + name, <Field>element);\n        if (!element.is(CommonFlags.READONLY)) {\n          this.ensureModuleFieldSetter(prefix + SETTER_PREFIX + name, <Field>element);\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        // make the class name itself represent its runtime id\n        if (!(<Class>element).type.isUnmanaged) {\n          let module = this.module;\n          let internalName = (<Class>element).internalName;\n          module.addGlobal(internalName, NativeType.I32, false, module.i32((<Class>element).id));\n          module.addGlobalExport(internalName, prefix + name);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.NAMESPACE:\n      case ElementKind.FILE:\n      case ElementKind.TYPEDEFINITION: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (\n        element.kind == ElementKind.NAMESPACE ||\n        element.kind == ElementKind.FILE\n      ) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      }\n    }\n  }\n\n  /** Makes a function to get the value of a field of an exported class. */\n  private ensureModuleFieldGetter(name: string, field: Field): void {\n    var module = this.module;\n    var type = field.type;\n    var usizeType = this.options.usizeType;\n    var loadExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\n      module.local_get(0, usizeType.toNativeType()),\n      type.toNativeType(), field.memoryOffset\n    );\n    // a user-defined getter would return a retained value, so:\n    if (type.isManaged) loadExpr = this.makeRetain(loadExpr);\n    module.addFunction(\n      name,\n      this.ensureFunctionType(null, type, usizeType),\n      null,\n      loadExpr\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  /** Makes a function to set the value of a field of an exported class. */\n  private ensureModuleFieldSetter(name: string, field: Field): void {\n    var module = this.module;\n    var type = field.type;\n    var nativeType = type.toNativeType();\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = usizeType.toNativeType();\n    var valueExpr = module.local_get(1, nativeType);\n    if (type.isManaged) {\n      valueExpr = this.makeRetainRelease(\n        module.load(type.byteSize, false, // oldRef\n          module.local_get(0, nativeSizeType),\n          nativeType, field.memoryOffset\n        ),\n        valueExpr // newRef\n      );\n    }\n    module.addFunction(\n      name,\n      this.ensureFunctionType([ type ], Type.void, usizeType),\n      null,\n      module.store(\n        type.byteSize,\n        module.local_get(0, nativeSizeType),\n        valueExpr,\n        nativeType,\n        field.memoryOffset\n      )\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) {\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\n        }\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) {\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE: break;\n      default: assert(false, ElementKind[element.kind]);\n    }\n    if (compileMembers) this.compileMembers(element);\n  }\n\n  /** Compiles an element's members. */\n  compileMembers(element: Element): void {\n    var members = element.members;\n    if (members) for (let element of members.values()) this.compileElement(element);\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) for (let element of exports.values()) this.compileElement(element);\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) {\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = filesByName.get(normalizedPathWithoutExtension)!;\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = filesByName.get(pathWithIndex)!;\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.finishAutoreleases(flow, startFunctionBody);\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\n        varTypes,\n        startFunctionBody.length > 1\n          ? module.block(null, startFunctionBody)\n          : startFunctionBody[0]\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var initAutoreleaseSkipped: bool = false;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          return false;\n        }\n        global.setType(resolvedType);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.i32, // reports\n          ContextualFlags.WRAP | ContextualFlags.SKIP_AUTORELEASE\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      if (global.internalName == BuiltinSymbols.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (global.internalName == BuiltinSymbols.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      return true;\n    }\n\n    var type = global.type;\n    var nativeType = type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // Importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          global.declaration.range\n        );\n      }\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constant values (and constant\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          ContextualFlags.IMPLICIT | ContextualFlags.WRAP | ContextualFlags.SKIP_AUTORELEASE | ContextualFlags.STATIC_CAPABLE\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n      }\n\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) initializeInStart = true;\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      initExpr = type.toNativeZero(module);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, global.decoratorNodes)).range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, type.toNativeZero(module));\n      if (type.isManaged && !initAutoreleaseSkipped) initExpr = this.makeRetain(initExpr);\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueNode = val.valueNode;\n        val.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            ContextualFlags.IMPLICIT // autorelease is not applicable in i32 context\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            initExpr = module.precomputeExpression(initExpr);\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              (<EnumValue>member).identifierNode.range.atEnd\n            );\n          }\n          initExpr = module.binary(BinaryOp.AddI32,\n            module.global_get(previousValue.internalName, NativeType.I32),\n            module.i32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                member.declaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(val, initExpr, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n          }\n          val.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): Function | null {\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return null;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n\n      let expr = this.compileExpression((<ExpressionStatement>bodyNode).expression, returnType,\n        ContextualFlags.IMPLICIT\n      );\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n      if (!flow.isAny(FlowFlags.ANY_TERMINATING)) { // TODO: detect if returning an autorelease local?\n        let indexBefore = stmts.length;\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        let canOverflow = flow.canOverflow(expr, returnType);\n        let nonNull = flow.isNonnull(expr, returnType);\n        if (stmts.length > indexBefore) {\n          let temp = flow.getAndFreeTempLocal(returnType);\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\n        }\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS); // now is terminating\n      }\n    }\n\n    // make the main function call `start` implicitly, but only once\n    if (instance.prototype == this.program.explicitStartFunction) {\n      module.addGlobal(BuiltinSymbols.started, NativeType.I32, true, module.i32(0));\n      stmts.unshift(\n        module.if(\n          module.unary(\n            UnaryOp.EqzI32,\n            module.global_get(BuiltinSymbols.started, NativeType.I32)\n          ),\n          module.block(null, [\n            module.call(\"start\", null, NativeType.None),\n            module.global_set(BuiltinSymbols.started, module.i32(1))\n          ])\n        )\n      );\n    }\n\n    // make constructors return their instance pointer\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n\n      if (!flow.isAny(FlowFlags.ANY_TERMINATING)) {\n        let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\n        if (!flow.is(FlowFlags.ALLOCATES)) {\n          // {\n          //   if (!this) this = <ALLOC>\n          //   this.a = X\n          //   this.b = Y\n          // }\n          stmts.push(\n            module.if(\n              module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                module.local_get(thisLocal.index, nativeSizeType)\n              ),\n              module.local_set(thisLocal.index,\n                this.makeRetain(\n                  this.makeAllocation(<Class>classInstance)\n                ),\n              )\n            )\n          );\n          this.makeFieldInitialization(<Class>classInstance, stmts);\n        }\n        this.performAutoreleases(flow, stmts); // `this` is excluded anyway\n        this.finishAutoreleases(flow, stmts);\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL);\n      }\n\n      // check that super has been called if this is a derived class\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches return\n    } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.signatureNode.returnType.range\n      );\n    }\n\n    return stmts;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n\n    var previousType = this.currentType; // remember to retain it if compiling a function lazily\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          decorator.range\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      // retain each argument for as long as the function lives\n      let index = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n        ++index;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\n        let type = parameterTypes[i];\n        if (type.isManaged) {\n          stmts.push(\n            module.drop(\n              this.makeRetain(\n                module.local_get(index, type.toNativeType())\n              )\n            )\n          );\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\n        }\n      }\n\n      this.compileFunctionBody(instance, stmts);\n      if (!flow.isAny(FlowFlags.ANY_TERMINATING)) {\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n      }\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        flatten(module, stmts, instance.signature.returnType.toNativeType())\n      );\n\n    // imported function\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          instance.identifierNode.range\n        );\n      }\n\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\n\n      // create the import\n      funcRef = module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    return true;\n  }\n\n  // === Classes ==================================================================================\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(),\n                (<FunctionPrototype>element).identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let getter = (<PropertyPrototype>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [],\n                makeMap<string,Type>(),\n                getter.identifierNode\n              );\n            }\n            let setter = (<PropertyPrototype>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [],\n                makeMap<string,Type>(),\n                setter.identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(instance.contextualTypeArguments),\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD_PROTOTYPE: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterInstance;\n            if (getter) this.compileFunction(getter);\n            let setter = (<Property>element).setterInstance;\n            if (setter) this.compileFunction(setter);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var rtHeaderSize = program.runtimeHeaderSize;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = segments.get(stringValue)!; // reuse\n    } else {\n      let length = stringValue.length;\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\n      program.writeRuntimeHeader(buffer, 0, stringInstance, length << 1);\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buffer);\n      segments.set(stringValue, stringSegment);\n    }\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.i64(i64_low(ref), i64_high(ref));\n    } else {\n      assert(i64_is_u32(ref));\n      return this.module.i32(i64_low(ref));\n    }\n  }\n\n  ensureStaticArrayBuffer(elementType: Type, values: ExpressionRef[]): MemorySegment {\n    var program = this.program;\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\n    program.writeRuntimeHeader(buf, 0, bufferInstance, byteLength);\n    var pos = runtimeHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    assert(pos == buf.length);\n\n    return this.addMemorySegment(buf);\n  }\n\n  ensureStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\n    var program = this.program;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayInstanceSize = arrayInstance.currentMemoryOffset;\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\n    program.writeRuntimeHeader(buf, 0, arrayInstance, arrayInstanceSize);\n\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\n    assert(!program.options.isWasm64); // TODO\n    assert(arrayInstance.writeField(\"data\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataLength\", bufferLength, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\n\n    return this.addMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.internalName);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // === Statements ===============================================================================\n\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    if (statement.kind == NodeKind.EXPORTDEFAULT) {\n      statement = (<ExportDefaultStatement>statement).declaration;\n    }\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        assert(element.kind == ElementKind.ENUM);\n        if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let memberStatements = (<NamespaceDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          assert(element.kind == ElementKind.GLOBAL);\n          if (\n            !element.is(CommonFlags.AMBIENT) && // delay imports\n            !element.hasDecorator(DecoratorFlags.LAZY)\n          ) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        if ((<ExportStatement>statement).normalizedPath != null) {\n          this.compileFileByPath(\n            <string>(<ExportStatement>statement).normalizedPath,\n            <StringLiteralExpression>(<ExportStatement>statement).path\n          );\n        }\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.compileFileByPath(\n          (<ImportStatement>statement).normalizedPath,\n          (<ImportStatement>statement).path\n        );\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATUREDECLARATION:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  compileStatement(\n    statement: Statement,\n    contextualFlags: ContextualFlags = ContextualFlags.NONE\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement, contextualFlags);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement, contextualFlags);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement, contextualFlags);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement, contextualFlags);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement, contextualFlags);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement, contextualFlags);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement, contextualFlags);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement, contextualFlags);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, contextualFlags);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement, contextualFlags);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement, contextualFlags);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement, contextualFlags);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement, contextualFlags);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement, contextualFlags);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement, contextualFlags);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          statement.range\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(\n    statements: Statement[],\n    isBody: bool = false,\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i],\n        isBody && i == numStatements - 1\n          ? ContextualFlags.LAST_IN_BODY\n          : ContextualFlags.NONE\n      );\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(this.module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(\n    statement: BlockStatement,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    if (!innerFlow.isAny(FlowFlags.ANY_TERMINATING)) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow); // TODO: only if not terminated?\n    this.currentFlow = outerFlow;\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileBreakStatement(\n    statement: BreakStatement,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var current: Flow | null = flow.parent;\n    while (current && current.breakLabel === breakLabel) {\n      this.performAutoreleases(current, stmts, /* clearFlags */ false);\n      current = current.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(breakLabel));\n    flow.set(FlowFlags.BREAKS);\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileContinueStatement(\n    statement: ContinueStatement,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES);\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var current: Flow | null = flow.parent;\n    while (current && current.continueLabel === continueLabel) {\n      this.performAutoreleases(current, stmts, /* clearFlags */ false);\n      current = current.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(continueLabel));\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileDoStatement(\n    statement: DoStatement,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    var module = this.module;\n\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(\n        this.compileStatement(statement.statement)\n      );\n    }\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.i32),\n      this.currentType\n    );\n    // TODO: check if condition is always false and if so, omit it (just a block)\n\n    // Switch back to the parent flow\n    var terminated = innerFlow.isAny(FlowFlags.ANY_TERMINATING);\n    if (!terminated) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    outerFlow.inherit(innerFlow);\n\n    var block: ExpressionRef[] = [\n      module.loop(continueLabel,\n        terminated\n          ? flatten(module, stmts, NativeType.None) // skip trailing continue if unnecessary\n          : module.block(null, [\n              flatten(module, stmts, NativeType.None),\n              module.br(continueLabel, condExpr)\n            ], NativeType.None)\n      )\n    ];\n    if (terminated) block.push(module.unreachable());\n    return module.block(breakLabel, block);\n  }\n\n  compileEmptyStatement(\n    statement: EmptyStatement,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  compileExpressionStatement(\n    statement: ExpressionStatement,\n    contextualFlags: ContextualFlags,\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      contextualFlags | ContextualFlags.EXPLICIT | ContextualFlags.WILL_DROP\n    );\n  }\n\n  compileForStatement(\n    statement: ForStatement,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    // A for statement initiates a new branch with its own scoped variables\n    // possibly declared in its initializer, and break context.\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n    var repeatLabel = \"repeat|\" + label;\n\n    // Compile in correct order\n    var module = this.module;\n    var initExpr = statement.initializer\n      ? this.compileStatement(<Statement>statement.initializer)\n      : 0;\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = module.precomputeExpression(\n        this.makeIsTrueish(\n          this.compileExpressionRetainType(<Expression>statement.condition, Type.bool),\n          this.currentType\n        )\n      );\n      // check if the condition is always true\n      if (getExpressionId(condExpr) == ExpressionId.Const) {\n        assert(getExpressionType(condExpr) == NativeType.I32);\n        if (getConstValueI32(condExpr) != 0) alwaysTrue = true;\n        // TODO: could skip compilation if the condition is always false here, but beware that the\n        // initializer could still declare new 'var's that are used later on.\n      }\n    } else {\n      // omitted condition is always true\n      condExpr = module.i32(1);\n      alwaysTrue = true;\n    }\n    innerFlow.inheritNonnullIfTrue(condExpr);\n    var incrExpr = statement.incrementor\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void,\n          ContextualFlags.IMPLICIT | ContextualFlags.WILL_DROP\n        )\n      :  0;\n    var bodyStatement = statement.statement;\n    var stmts = new Array<ExpressionRef>();\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>bodyStatement).statements, false, stmts);\n    } else {\n      stmts.push(\n        this.compileStatement(bodyStatement)\n      );\n    }\n    if (!innerFlow.isAny(FlowFlags.ANY_TERMINATING)) this.performAutoreleases(innerFlow, stmts);\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var usesContinue = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\n    if (initExpr) breakBlock.push(initExpr);\n\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\n    if (usesContinue) {\n      stmts.unshift(\n        module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr))\n      );\n      repeatBlock.push(\n        module.block(continueLabel, stmts, NativeType.None)\n      );\n    } else { // can omit the 'continue' block\n      repeatBlock.push(\n        module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr))\n      );\n      for (let i = 0, k = stmts.length; i < k; ++i) {\n        repeatBlock.push(stmts[i]);\n      }\n    }\n    if (incrExpr) repeatBlock.push(incrExpr);\n    repeatBlock.push(\n      module.br(repeatLabel)\n    );\n\n    breakBlock.push(\n      module.loop(repeatLabel, module.block(null, repeatBlock, NativeType.None))\n    );\n\n    return module.block(breakLabel, breakBlock);\n  }\n\n  compileIfStatement(\n    statement: IfStatement,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n    var outerFlow = this.currentFlow;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpressionRetainType(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileStatement(ifTrue)\n        : ifFalse\n          ? this.compileStatement(ifFalse)\n          : module.nop();\n    }\n\n    // Each arm initiates a branch\n    var ifTrueStmts = new Array<ExpressionRef>();\n    var ifTrueFlow = outerFlow.fork();\n    this.currentFlow = ifTrueFlow;\n    ifTrueFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, ifTrueStmts);\n    } else {\n      ifTrueStmts.push(this.compileStatement(ifTrue));\n    }\n    if (!ifTrueFlow.isAny(FlowFlags.ANY_TERMINATING)) this.performAutoreleases(ifTrueFlow, ifTrueStmts);\n    ifTrueFlow.freeScopedLocals();\n    this.currentFlow = outerFlow;\n\n    if (ifFalse) {\n      let ifFalseFlow = outerFlow.fork();\n      this.currentFlow = ifFalseFlow;\n      ifFalseFlow.inheritNonnullIfFalse(condExpr);\n      let ifFalseStmts = new Array<ExpressionRef>();\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, ifFalseStmts);\n      } else {\n        ifFalseStmts.push(this.compileStatement(ifFalse));\n      }\n      if (!ifFalseFlow.isAny(FlowFlags.ANY_TERMINATING)) this.performAutoreleases(ifFalseFlow, ifFalseStmts);\n      ifFalseFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None),\n        flatten(module, ifFalseStmts, NativeType.None)\n      );\n    } else {\n      outerFlow.inheritConditional(ifTrueFlow);\n      if (ifTrueFlow.isAny(FlowFlags.ANY_TERMINATING)) {\n        outerFlow.inheritNonnullIfFalse(condExpr);\n      }\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None)\n      );\n    }\n    // TODO: Detect neglected condition\n    // if (!foo) {\n    //   foo = [notNull]\n    // }\n    // foo // is possibly null\n  }\n\n  compileReturnStatement(\n    statement: ReturnStatement,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS);\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      if (returnType == Type.void) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          valueExpression.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.unreachable();\n      }\n      let contextualFlags = ContextualFlags.IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) contextualFlags |= ContextualFlags.WRAP;\n      expr = this.compileExpression(valueExpression, returnType, contextualFlags | ContextualFlags.SKIP_AUTORELEASE);\n\n      // when returning a local, and it is already retained, skip the final set\n      // of retaining it as the return value and releasing it as a variable\n      if (!this.skippedAutoreleases.has(expr)) {\n        if (returnType.isManaged) {\n          if (getExpressionId(expr) == ExpressionId.LocalGet) {\n            if (flow.isAnyLocalFlag(getLocalGetIndex(expr), LocalFlags.ANY_RETAINED)) {\n              flow.unsetLocalFlag(getLocalGetIndex(expr), LocalFlags.ANY_RETAINED);\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n        }\n      }\n\n      // remember return states\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n      if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.unreachable();\n    }\n\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    this.finishAutoreleases(flow, stmts);\n\n    // Make sure that the return value is retained for the caller\n    if (returnType.isManaged && !this.skippedAutoreleases.has(expr)) expr = this.makeRetain(expr);\n\n    if (returnType != Type.void && stmts.length) {\n      let temp = flow.getAndFreeTempLocal(returnType);\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts.unshift(\n        module.local_set(temp.index, expr)\n      );\n      expr = module.local_get(temp.index, returnType.toNativeType());\n    }\n    flow.freeScopedLocals();\n\n    // If the last statement anyway, make it the block's return value\n    if ((contextualFlags & ContextualFlags.LAST_IN_BODY) != 0 && expr && returnType != Type.void) {\n      if (!stmts.length) return expr;\n      stmts.push(expr);\n      return module.block(null, stmts, returnType.toNativeType());\n    }\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\n      // stmts.push(module.createUnreachable());\n      return module.block(null, stmts);\n    }\n\n    // Otherwise emit a normal return\n    if (!stmts.length) return module.return(expr);\n    stmts.push(module.return(expr));\n    return module.block(null, stmts);\n  }\n\n  compileSwitchStatement(statement: SwitchStatement, contextualFlags: ContextualFlags): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        ContextualFlags.IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        ContextualFlags.IMPLICIT\n      )\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString(10) + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32,\n              ContextualFlags.IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\n    var alwaysReturns = true;\n    var alwaysReturnsWrapped = true;\n    var alwaysThrows = true;\n    var alwaysAllocates = true;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminated = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n          if (innerFlow.isAny(FlowFlags.ANY_TERMINATING)) {\n            terminated = true;\n            break;\n          }\n        }\n      }\n      stmts.length = count;\n      if (terminated || isLast) {\n        if (!innerFlow.is(FlowFlags.RETURNS)) alwaysReturns = false;\n        if (!innerFlow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\n        if (!innerFlow.is(FlowFlags.THROWS)) alwaysThrows = false;\n        if (!innerFlow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\n      }\n\n      // Switch back to the parent flow\n      if (!innerFlow.isAny(FlowFlags.ANY_TERMINATING)) this.performAutoreleases(innerFlow, stmts);\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) {\n      if (alwaysReturns) outerFlow.set(FlowFlags.RETURNS);\n      if (alwaysReturnsWrapped) outerFlow.set(FlowFlags.RETURNS_WRAPPED);\n      if (alwaysThrows) outerFlow.set(FlowFlags.THROWS);\n      if (alwaysAllocates) outerFlow.set(FlowFlags.ALLOCATES);\n    }\n    return currentBlock;\n  }\n\n  compileThrowStatement(\n    statement: ThrowStatement,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS);\n\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\n    flow.set(FlowFlags.RETURNS);\n\n    var stmts = new Array<ExpressionRef>();\n    this.finishAutoreleases(flow, stmts);\n\n    // TODO: requires exception-handling spec.\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).arguments;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(compileAbort(this, message, statement));\n\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileTryStatement(\n    statement: TryStatement,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  compileVariableStatement(statement: VariableStatement, contextualFlags: ContextualFlags): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      let initAutoreleaseSkipped = false;\n\n      // Resolve type if annotated\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression(declaration.initializer, type, // reports\n            ContextualFlags.IMPLICIT | ContextualFlags.SKIP_AUTORELEASE\n          );\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (declaration.initializer) {\n        initExpr = this.compileExpressionRetainType(declaration.initializer, Type.void,\n          ContextualFlags.SKIP_AUTORELEASE\n        ); // reports\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return module.unreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.unreachable();\n            }\n            scopedLocals.set(name, local);\n            isStatic = true;\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, declaration.name.text\n            );\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          if (flow.lookupLocal(name)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        let isManaged = type.isManaged;\n        if (initExpr) {\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n          if (isManaged) {\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\n            initializers.push(\n              module.local_set(local.index,\n                initAutoreleaseSkipped\n                  ? initExpr\n                  : this.makeRetain(initExpr)\n              )\n            );\n          } else {\n            initializers.push(\n              module.local_set(local.index, initExpr)\n            );\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\n            }\n          }\n        } else {\n          if (isManaged) {\n            // This is necessary because the first use (and assign) of the local could be taking place\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\n            // initialized but becomes released later on, whatever was stored before would be released.\n            // TODO: Detect this condition inside of a loop instead?\n            initializers.push(\n              module.local_set(local.index,\n                type.toNativeZero(module)\n              )\n            );\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    return initializers.length == 0\n      ? 0\n      : flatten(module, initializers, NativeType.None);\n  }\n\n  compileVoidStatement(statement: VoidStatement, contextualFlags: ContextualFlags): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      ContextualFlags.EXPLICIT | ContextualFlags.WILL_DROP\n    );\n  }\n\n  compileWhileStatement(statement: WhileStatement, contextualFlags: ContextualFlags): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // The condition does not yet initialize a branch\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpressionRetainType(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary loops if the condition is constant\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      if (!getConstValueI32(condExpr)) return module.nop();\n    }\n\n    // Statements initiate a new branch with its own break context\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n\n    innerFlow.inheritNonnullIfTrue(condExpr);\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(statement.statement));\n    }\n    var alwaysTrue = false; // TODO\n    var terminated = innerFlow.isAny(FlowFlags.ANY_TERMINATING);\n    if (!terminated) {\n      this.performAutoreleases(innerFlow, stmts);\n      stmts.push(module.br(continueLabel));\n    }\n    innerFlow.freeScopedLocals();\n\n    // Switch back to the parent flow\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n\n    return module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.if(condExpr,\n          flatten(module, stmts, NativeType.None)\n        )\n      )\n    ]);\n  }\n\n  // === Expressions ==============================================================================\n\n  /**\n   * Compiles the value of an inlined constant element.\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\n   *  is precomputed according to context.\n   */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !(contextualFlags & (ContextualFlags.IMPLICIT | ContextualFlags.EXPLICIT)) &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    contextualFlags: ContextualFlags = ContextualFlags.NONE\n  ): ExpressionRef {\n    this.currentType = contextualType;\n    var expr: ExpressionRef;\n    if (contextualType == Type.void) contextualFlags |= ContextualFlags.WILL_DROP;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, contextualFlags);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, contextualFlags);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, contextualFlags);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, contextualFlags);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, contextualFlags);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, contextualFlags);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, contextualFlags);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, contextualFlags);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, contextualFlags);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, contextualFlags);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileExpression((<ParenthesizedExpression>expression).expression, contextualType, contextualFlags);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, contextualFlags);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, contextualFlags);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, contextualFlags);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, contextualFlags);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        expr = this.module.unreachable();\n      }\n    }\n    // ensure conversion and wrapping in case the respective function doesn't on its own\n    var currentType = this.currentType;\n    var wrap = (contextualFlags & ContextualFlags.WRAP) != 0;\n    if (currentType != contextualType) {\n      if (contextualFlags & ContextualFlags.EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      } else if (contextualFlags & ContextualFlags.IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Compiles an expression while retaining the type, that is not void, it ultimately compiles to. */\n  compileExpressionRetainType(\n    expression: Expression,\n    contextualType: Type,\n    contextualFlags: ContextualFlags = ContextualFlags.NONE\n  ): ExpressionRef {\n    return this.compileExpression(expression,\n      contextualType == Type.void\n        ? Type.i32 // default to i32\n        : contextualType,\n      (contextualFlags & ~(ContextualFlags.IMPLICIT | ContextualFlags.EXPLICIT))\n    );\n  }\n\n  /** Compiles and precomputes an expression, possibly yielding a costant value. */\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    contextualFlags: ContextualFlags = ContextualFlags.NONE\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, contextualFlags)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit.*/\n    explicit: bool,\n    /** Whether the result should be wrapped, if a small integer. */\n    wrap: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    if (this.currentFlow.isNonnull(expr, fromType)) fromType = fromType.nonNullableType;\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        if (fromType.nonNullableType == toType) {\n          this.error(\n            DiagnosticCode.Object_is_possibly_null,\n            reportNode.range\n          ); // recoverable\n        } else {\n          this.error(\n            DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n            reportNode.range, fromType.toString(), toType.toString()\n          ); // recoverable\n        }\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n          wrap = false;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.unary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrap = false;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrap = false;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrap\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType,\n          contextualFlags | ContextualFlags.EXPLICIT\n        );\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpressionRetainType(expression.expression, contextualType);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          let module = this.module;\n          let flow = this.currentFlow;\n          let tempIndex = flow.getAndFreeTempLocal(type).index;\n          if (!flow.canOverflow(expr, type)) flow.setLocalFlag(tempIndex, LocalFlags.WRAPPED);\n          flow.setLocalFlag(tempIndex, LocalFlags.NONNULL);\n          expr = module.if(\n            module.local_tee(tempIndex, expr),\n            module.local_get(tempIndex, type.toNativeType()),\n            module.unreachable()\n          );\n        }\n        this.currentType = this.currentType.nonNullableType;\n        return expr;\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AllTrueVecI8x16,\n              module.binary(BinaryOp.EqVecI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AnyTrueVecI8x16,\n              module.binary(BinaryOp.NeVecI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, ContextualFlags.IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(leftExpr,\n            this.currentType, Type.f64,\n            false, false,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(right, Type.f64, ContextualFlags.IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.unreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        leftExpr = this.compileExpressionRetainType(left, contextualType, contextualFlags);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT | (contextualFlags & ~ContextualFlags.WILL_DROP));\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            this.makeIsTrueish(rightExpr, rightType),\n            module.i32(0)\n          );\n\n        // references must properly retain and release, with the same outcome independent of the branch taken\n        } else if (leftType.isManaged) {\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n          let temp = flow.getTempLocal(leftType);\n          leftExpr = module.local_tee(temp.index, leftExpr);\n\n          // instead of retaining left and releasing it again in right when right\n          // is taken, we can also just retain left if right is not taken\n          let retainLeftInElse = false;\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n            if (!leftAutoreleaseSkipped) {\n              retainLeftInElse = true;\n            } else {\n              rightExpr = this.makeRetain(rightExpr);\n              rightAutoreleaseSkipped = true;\n            }\n          } else if (!(contextualFlags & ContextualFlags.SKIP_AUTORELEASE)) { // otherwise keep right alive a little longer\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\n          }\n\n          let rightStmts = new Array<ExpressionRef>();\n          if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\n            rightStmts.unshift(\n              this.makeRelease(\n                module.local_get(temp.index, leftType.toNativeType())\n              )\n            );\n          }\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            rightExpr,\n            retainLeftInElse\n              ? this.makeRetain(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              : module.local_get(temp.index, leftType.toNativeType())\n          );\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n          if (temp) flow.freeTempLocal(temp);\n\n        // basic values can use more aggressive optimizations\n        } else {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, this.currentType),\n              rightExpr,\n              expr\n            );\n\n          // if not possible, tee left to a temp\n          } else {\n            let tempLocal = flow.getTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n              rightExpr,\n              module.local_get(tempLocal.index, leftType.toNativeType())\n            );\n          }\n        }\n        this.currentType = leftType;\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        leftExpr = this.compileExpressionRetainType(left, contextualType, contextualFlags);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT | contextualFlags);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            module.i32(1),\n            this.makeIsTrueish(rightExpr, rightType)\n          );\n\n        // references must properly retain and release, with the same outcome independent of the branch taken\n        } else if (leftType.isManaged) {\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n          let temp = flow.getTempLocal(leftType);\n          leftExpr = module.local_tee(temp.index, leftExpr);\n\n          // instead of retaining left and releasing it again in right when right\n          // is taken, we can also just retain left if right is not taken\n          let retainLeftInThen = false;\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n            if (!leftAutoreleaseSkipped) {\n              retainLeftInThen = true;\n            } else {\n              rightExpr = this.makeRetain(rightExpr);\n              rightAutoreleaseSkipped = true;\n            }\n          } else if (!(contextualFlags & ContextualFlags.SKIP_AUTORELEASE)) { // otherwise keep right alive a little longer\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\n          }\n\n          let rightStmts = new Array<ExpressionRef>();\n          if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\n            // TODO: usually, false'ish means left is null, but this might not hold\n            // once implicit conversion with strings is performed and left is \"\", so:\n            rightStmts.unshift(\n              this.makeRelease(\n                module.local_get(temp.index, leftType.toNativeType())\n              )\n            );\n          }\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            retainLeftInThen\n              ? this.makeRetain(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              : module.local_get(temp.index, leftType.toNativeType()),\n            rightExpr\n          );\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n          if (temp) flow.freeTempLocal(temp);\n\n        // basic values can use more aggressive optimizations\n        } else {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              expr,\n              rightExpr\n            );\n\n          // if not possible, tee left to a temp. local\n          } else {\n            let tempLocal = flow.getAndFreeTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n              module.local_get(tempLocal.index, leftType.toNativeType()),\n              rightExpr\n            );\n          }\n        }\n        this.currentType = leftType;\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = this.resolver.resolveExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr, // TODO: delay release above if possible?\n      left,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having retained locals that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, ContextualFlags.IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.resolveExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.LOCAL: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return this.module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        break;\n      }\n      case ElementKind.CLASS: {\n        if (elementExpression) { // indexed access\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          // if (isUnchecked) {\n          //   let arrayType = this.program.determineBuiltinArrayType(<Class>target);\n          //   if (arrayType) {\n          //     return compileBuiltinArraySet(\n          //       this,\n          //       <Class>target,\n          //       assert(this.resolver.currentThisExpression),\n          //       elementExpression,\n          //       valueExpression,\n          //       contextualType\n          //     );\n          //   }\n          // }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                expression.range, (<Class>target).internalName\n              );\n            } else {\n              this.error(\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n                expression.range, (<Class>target).internalName\n              );\n            }\n            return this.module.unreachable();\n          }\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n          targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    return this.makeAssignment(\n      target,\n      this.compileExpression(valueExpression, targetType, ContextualFlags.IMPLICIT | ContextualFlags.SKIP_AUTORELEASE),\n      expression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\n    // everything else must insert the skipped autorelease now. See (*)\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        if (flow.isLocalFlag((<Local>target).index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? (<Local>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(<Local>target, valueExpr, tee);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? (<Global>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(<Global>target, valueExpr, tee);\n      }\n      case ElementKind.FIELD: {\n        let initializerNode = (<Field>target).initializerNode;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, (<Field>target).internalName\n          );\n          return module.unreachable();\n        }\n        return this.makeFieldAssignment(<Field>target,\n          valueExpr,\n          this.compileExpressionRetainType(\n            assert(thisExpression),\n            // FIXME: explicit type (currently fails due to missing null checking)\n            this.options.usizeType\n          ),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return module.unreachable();\n        // call just the setter if the return value isn't of interest\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n        // otherwise call the setter first, then the getter\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!getterInstance) return module.unreachable();\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n          this.makeCallDirect(getterInstance, null, valueExpression) // sets currentType\n        ], nativeReturnType);\n      }\n      case ElementKind.PROPERTY: { // instance property\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        // call just the setter if the return value isn't of interest\n        if (!tee) {\n          let thisExpr = this.compileExpressionRetainType(\n            assert(thisExpression),\n            this.options.usizeType\n          );\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n        }\n        // otherwise call the setter first, then the getter\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        let thisExpr = this.compileExpressionRetainType(\n          assert(thisExpression),\n          this.options.usizeType\n        );\n        let tempLocal = flow.getAndFreeTempLocal(returnType);\n        let tempLocalIndex = tempLocal.index;\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ // set and remember the target\n            module.local_tee(tempLocalIndex, thisExpr),\n            valueExpr\n          ], valueExpression),\n          this.makeCallDirect(getterInstance, [ // get from remembered target\n            module.local_get(tempLocalIndex, nativeReturnType)\n          ], valueExpression)\n        ], nativeReturnType);\n      }\n      case ElementKind.CLASS: {\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        if (indexExpression) {\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              valueExpression.range, target.internalName\n            );\n            return module.unreachable();\n          }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              valueExpression.range, target.internalName\n            );\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n            return module.unreachable();\n          }\n          let targetType = (<Class>target).type;\n          let thisExpr = this.compileExpressionRetainType(\n            assert(thisExpression),\n            this.options.usizeType\n          );\n          let elementExpr = this.compileExpression(indexExpression, Type.i32, ContextualFlags.IMPLICIT);\n          if (tee) {\n            let tempLocalTarget = flow.getTempLocal(targetType);\n            let tempLocalElement = flow.getAndFreeTempLocal(this.currentType);\n            let returnType = indexedGet.signature.returnType;\n            flow.freeTempLocal(tempLocalTarget);\n            return module.block(null, [\n              this.makeCallDirect(indexedSet, [\n                module.local_tee(tempLocalTarget.index, thisExpr),\n                module.local_tee(tempLocalElement.index, elementExpr),\n                valueExpr\n              ], valueExpression),\n              this.makeCallDirect(indexedGet, [\n                module.local_get(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                module.local_get(tempLocalElement.index, tempLocalElement.type.toNativeType())\n              ], valueExpression)\n            ], returnType.toNativeType());\n          } else {\n            return this.makeCallDirect(indexedSet, [\n              thisExpr,\n              elementExpr,\n              valueExpr\n            ], valueExpression);\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      valueExpression.range\n    );\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** The local to assign to. */\n    local: Local,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var type = local.type;\n    assert(type != Type.void);\n    var flow = this.currentFlow;\n    var localIndex = local.index;\n\n    if (type.is(TypeFlags.NULLABLE)) {\n      if (flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.WRITTENTO);\n\n    if (type.isManaged) {\n      let module = this.module;\n      let nativeType = type.toNativeType();\n\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n        if (this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeSkippedRelease(\n            module.local_get(localIndex, nativeType), // oldRef\n            valueExpr // newRef\n          );\n          if (tee) { // TEE(local = __skippedRelease(local, value))\n            this.currentType = type;\n            return module.local_tee(localIndex, valueExpr);\n          } else { // local = __skippedRelease(local, value)\n            this.currentType = Type.void;\n            return module.local_set(localIndex, valueExpr);\n          }\n        } else {\n          valueExpr = this.makeRetainRelease(\n            module.local_get(localIndex, nativeType), // oldRef\n            valueExpr // newRef\n          );\n          if (tee) { // TEE(local = __retainRelease(local, value))\n            this.currentType = type;\n            return module.local_tee(localIndex, valueExpr);\n          } else { // local = __retainRelease(local, value)\n            this.currentType = Type.void;\n            return module.local_set(localIndex, valueExpr);\n          }\n        }\n      } else {\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\n        if (!this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeRetain(valueExpr);\n        if (tee) { // TEE(local = __retain(value, local))\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // local = __retain(value, local)\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      }\n    } else {\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n      }\n      if (tee) { // TEE(local = value)\n        this.currentType = type;\n        return this.module.local_tee(localIndex, valueExpr);\n      } else { // local = value\n        this.currentType = Type.void;\n        return this.module.local_set(localIndex, valueExpr);\n      }\n    }\n  }\n\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\n  private makeGlobalAssignment(\n    /** The global to assign to. */\n    global: Global,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var nativeType = type.toNativeType();\n\n    if (type.isManaged) {\n      if (this.skippedAutoreleases.has(valueExpr)) {\n        if (tee) { // (global = __skippedRelease(global, value)), global\n          this.currentType = type;\n          return module.block(null, [\n            module.global_set(global.internalName,\n              this.makeSkippedRelease(\n                module.global_get(global.internalName, nativeType), // oldRef\n                valueExpr // newRef\n              )\n            ),\n            module.global_get(global.internalName, nativeType)\n          ], nativeType);\n        } else { // global = __skippedRelease(global, value)\n          this.currentType = Type.void;\n          return module.global_set(global.internalName,\n            this.makeSkippedRelease(\n              module.global_get(global.internalName, nativeType), // oldRef\n              valueExpr // newRef\n            )\n          );\n        }\n      } else {\n        if (tee) { // (global = __retainRelease(global, value)), global\n          this.currentType = type;\n          return module.block(null, [\n            module.global_set(global.internalName,\n              this.makeRetainRelease(\n                module.global_get(global.internalName, nativeType), // oldRef\n                valueExpr // newRef\n              )\n            ),\n            module.global_get(global.internalName, nativeType)\n          ], nativeType);\n        } else { // global = __retainRelease(global, value)\n          this.currentType = Type.void;\n          return module.global_set(global.internalName,\n            this.makeRetainRelease(\n              module.global_get(global.internalName, nativeType), // oldRef\n              valueExpr // newRef\n            )\n          );\n        }\n      }\n    } else {\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n      if (tee) { // (global = value), global\n        this.currentType = type;\n        return module.block(null, [\n          module.global_set(global.internalName, valueExpr),\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = value\n        this.currentType = Type.void;\n        return module.global_set(global.internalName,\n          valueExpr\n        );\n      }\n    }\n  }\n\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\n  makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var nativeFieldType = fieldType.toNativeType();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n    var nativeThisType = thisType.toNativeType();\n\n    if (fieldType.isManaged && thisType.isManaged) {\n      let tempThis = flow.getTempLocal(thisType);\n      if (this.skippedAutoreleases.has(valueExpr)) {\n        if (tee) { // ((t1 = this).field = __skippedRelease(t1.field, t2 = value)), t2\n          let tempValue = flow.getAndFreeTempLocal(fieldType);\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n          flow.freeTempLocal(tempThis);\n          this.currentType = fieldType;\n          return module.block(null, [\n            module.store(fieldType.byteSize,\n              module.local_tee(tempThis.index, thisExpr),\n              this.makeSkippedRelease(\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                  module.local_get(tempThis.index, nativeThisType),\n                  nativeFieldType, field.memoryOffset\n                ),\n                module.local_tee(tempValue.index, valueExpr), // newRef\n              ),\n              nativeFieldType, field.memoryOffset\n            ),\n            module.local_get(tempValue.index, nativeFieldType)\n          ], nativeFieldType);\n        } else { // (t1 = this).field = __skippedRelease(t1.field, value)\n          flow.freeTempLocal(tempThis);\n          this.currentType = Type.void;\n          return module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeSkippedRelease(\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              valueExpr, // newRef\n            ),\n            nativeFieldType, field.memoryOffset\n          );\n        }\n      } else {\n        if (tee) { // ((t1 = this).field = __retainRelease(t1.field, t2 = value)), t2\n          let tempValue = flow.getAndFreeTempLocal(fieldType);\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n          flow.freeTempLocal(tempThis);\n          this.currentType = fieldType;\n          return module.block(null, [\n            module.store(fieldType.byteSize,\n              module.local_tee(tempThis.index, thisExpr),\n              this.makeRetainRelease(\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                  module.local_get(tempThis.index, nativeThisType),\n                  nativeFieldType, field.memoryOffset\n                ),\n                module.local_tee(tempValue.index, valueExpr) // newRef\n              ),\n              nativeFieldType, field.memoryOffset\n            ),\n            module.local_get(tempValue.index, nativeFieldType)\n          ], nativeFieldType);\n        } else { // (t1 = this).field = __retainRelease(t1.field, value)\n          flow.freeTempLocal(tempThis);\n          this.currentType = Type.void;\n          return module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeRetainRelease(\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              valueExpr // newRef\n            ),\n            nativeFieldType, field.memoryOffset\n          );\n        }\n      }\n    } else {\n      if (tee) { // (this.field = (t1 = value)), t1\n        let tempValue = flow.getAndFreeTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n        this.currentType = fieldType;\n        return module.block(null, [\n          module.store(fieldType.byteSize,\n            thisExpr,\n            module.local_tee(tempValue.index, valueExpr),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(tempValue.index, nativeFieldType)\n        ], nativeFieldType);\n      } else { // this.field = value\n        this.currentType = Type.void;\n        return module.store(fieldType.byteSize,\n          thisExpr,\n          valueExpr,\n          nativeFieldType, field.memoryOffset\n        );\n      }\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Contextual flags indicating contextual conditions. */\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let baseClassInstance = assert((<Class>classInstance).base);\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      // {\n      //   this = super(this || <ALLOC>, ...args)\n      //   this.a = X\n      //   this.b = Y\n      // }\n      let theCall = this.compileCallDirect(\n        this.ensureConstructor(baseClassInstance, expression),\n        expression.arguments,\n        expression,\n        module.if(\n          module.local_get(thisLocal.index, nativeSizeType),\n          module.local_get(thisLocal.index, nativeSizeType),\n          this.makeRetain(\n            this.makeAllocation(<Class>classInstance)\n          )\n        ),\n        ContextualFlags.SKIP_AUTORELEASE\n      );\n      assert(this.skippedAutoreleases.has(theCall)); // guaranteed\n      let stmts: ExpressionRef[] = [\n        module.local_set(thisLocal.index, theCall)\n      ];\n      this.makeFieldInitialization(<Class>classInstance, stmts);\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ALLOCATES |\n        FlowFlags.CONDITIONALLY_ALLOCATES\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.block(null, stmts);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.resolveExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n        let typeArguments = expression.typeArguments;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let instance: Function | null = null;\n\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n          if (!prototype.is(CommonFlags.GENERIC)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              expression.expression.range, prototype.internalName\n            );\n            return module.unreachable();\n          }\n          instance = this.resolver.resolveFunctionInclTypeArguments(\n            prototype,\n            typeArguments,\n            flow.actualFunction.parent, // relative to caller\n            makeMap<string,Type>(flow.contextualTypeArguments),\n            expression\n          );\n\n        // infer generic call if type arguments have been omitted\n        } else if (prototype.is(CommonFlags.GENERIC)) {\n          let inferredTypes = new Map<string,Type | null>();\n          let typeParameterNodes = assert(prototype.typeParameterNodes);\n          let numTypeParameters = typeParameterNodes.length;\n          for (let i = 0; i < numTypeParameters; ++i) {\n            inferredTypes.set(typeParameterNodes[i].name.text, null);\n          }\n          // let numInferred = 0;\n          let parameterNodes = prototype.signatureNode.parameters;\n          let numParameters = parameterNodes.length;\n          let argumentNodes = expression.arguments;\n          let numArguments = argumentNodes.length;\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\n          for (let i = 0; i < numParameters; ++i) {\n            let typeNode = parameterNodes[i].type;\n            let templateName = typeNode.kind == NodeKind.TYPE && !(<TypeNode>typeNode).name.next\n              ? (<TypeNode>typeNode).name.identifier.text\n              : null;\n            let argumentExpression = i < numArguments\n              ? argumentNodes[i]\n              : parameterNodes[i].initializer;\n            if (!argumentExpression) { // missing initializer -> too few arguments\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                expression.range, numParameters.toString(10), numArguments.toString(10)\n              );\n              return module.unreachable();\n            }\n            if (templateName !== null && inferredTypes.has(templateName)) {\n              let inferredType = inferredTypes.get(templateName);\n              if (inferredType) {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType);\n                let commonType: Type | null;\n                if (!(commonType = Type.commonDenominator(inferredType, this.currentType, true))) {\n                  if (!(commonType = Type.commonDenominator(inferredType, this.currentType, false))) {\n                    this.error(\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                      parameterNodes[i].type.range, this.currentType.toString(), inferredType.toString()\n                    );\n                    return module.unreachable();\n                  }\n                }\n                inferredType = commonType;\n              } else {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32);\n                inferredType = this.currentType;\n                // ++numInferred;\n              }\n              inferredTypes.set(templateName, inferredType);\n            } else {\n              let concreteType = this.resolver.resolveType(\n                parameterNodes[i].type,\n                flow.actualFunction,\n                flow.contextualTypeArguments\n              );\n              if (!concreteType) return module.unreachable();\n              argumentExprs[i] = this.compileExpression(argumentExpression, concreteType, ContextualFlags.IMPLICIT);\n            }\n          }\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let inferredType = assert(inferredTypes.get(typeParameterNodes[i].name.text)); // TODO\n            resolvedTypeArguments[i] = inferredType;\n          }\n          instance = this.resolver.resolveFunction(\n            prototype,\n            resolvedTypeArguments,\n            makeMap<string,Type>(flow.contextualTypeArguments)\n          );\n          if (!instance) return this.module.unreachable();\n          return this.makeCallDirect(instance, argumentExprs, expression, contextualType == Type.void);\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\n          // so inlining can be performed in `makeCallDirect` instead?\n\n        // otherwise resolve the non-generic call as usual\n        } else {\n          instance = this.resolver.resolveFunction(prototype, null);\n        }\n        if (!instance) return this.module.unreachable();\n\n        // compile 'this' expression if an instance method\n        let thisExpr: ExpressionRef = 0;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          thisExpr = this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType\n          );\n        }\n\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          thisExpr,\n          contextualFlags\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.i32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.local_get((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.global_get((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType\n          );\n          indexArg = module.load(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type, ContextualFlags.IMPLICIT);\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\n        if (!getterInstance) return module.unreachable();\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\n          this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType\n          )\n        );\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    var expr = compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n    if (!expr) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      return this.module.unreachable();\n    }\n    return expr;\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    contextualFlags: ContextualFlags = ContextualFlags.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n            ContextualFlags.IMPLICIT | ContextualFlags.SKIP_AUTORELEASE\n          );\n        }\n        // make the inlined call (is aware of autoreleases)\n        let expr = this.makeCallInline(instance, args, thisArg, (contextualFlags & ContextualFlags.WILL_DROP) != 0);\n        if (this.currentType.isManaged) {\n          if (!(contextualFlags & ContextualFlags.SKIP_AUTORELEASE)) {\n            expr = this.makeAutorelease(expr, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        ContextualFlags.IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    if (signature.returnType.isManaged) {\n      if (contextualFlags & ContextualFlags.WILL_DROP) {\n        // Skip autorelease and simply release\n        return this.makeCallDirect(instance, operands, reportNode, true);\n      } else if (contextualFlags & ContextualFlags.SKIP_AUTORELEASE) {\n        // Skip autorelease and remember\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\n        this.skippedAutoreleases.add(expr);\n        return expr;\n      } else {\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\n      }\n    }\n    return this.makeCallDirect(instance, operands, reportNode,\n      (contextualFlags & ContextualFlags.WILL_DROP) != 0\n    );\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      // inlining is aware of skipped autoreleases:\n      if (paramType.isManaged) {\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr);\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr)\n      );\n    }\n    if (thisArg) {\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, usedLocals);\n      // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg)\n      );\n      let baseInstance = (<Class>classInstance).base;\n      if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.signatureNode.parameters[i].initializer),\n        initType,\n        ContextualFlags.IMPLICIT\n      );\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      if (initType.isManaged) {\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n        body.push(\n          module.local_set(argumentLocal.index,\n            this.makeRetain(initExpr)\n          )\n        );\n      } else {\n        body.push(\n          module.local_set(argumentLocal.index, initExpr)\n        );\n      }\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // Free any new scoped locals and reset to the original flow\n    if (!flow.isAny(FlowFlags.ANY_TERMINATING)) {\n      this.performAutoreleases(flow, body);\n      this.finishAutoreleases(flow, body);\n    }\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      }\n    }\n    return expr;\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.signatureNode.parameters;\n    var returnType = originalSignature.returnType;\n    var thisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(originalParameterTypes, returnType, thisType);\n    trampolineSignature.requiredParameters = maxArguments;\n    trampolineSignature.parameterNames = originalSignature.parameterNames;\n    trampoline = new Function(\n      original.name + \"|trampoline\",\n      original.prototype,\n      trampolineSignature,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFlow = this.currentFlow;\n    var flow = trampoline.flow;\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(BuiltinSymbols.argc, NativeType.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(BuiltinSymbols.argc, NativeType.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.local_set(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            ContextualFlags.IMPLICIT\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      body = module.block(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n    }\n    assert(operandIndex == maxOperands);\n\n    var stmts: ExpressionRef[] = [ body ];\n    var theCall = module.call(originalName, forwardedOperands, returnType.toNativeType());\n    if (returnType != Type.void) {\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\n    } else {\n      stmts.push(theCall);\n      this.performAutoreleases(flow, stmts);\n    }\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      trampoline.internalName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        returnType,\n        thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.block(null, stmts, returnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        BuiltinSymbols.argc,\n        NativeType.I32,\n        true,\n        module.i32(0)\n      );\n    }\n    return BuiltinSymbols.argc;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(BuiltinSymbols.setargc,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.global_set(this.ensureArgcVar(),\n          module.local_get(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(BuiltinSymbols.setargc, \"__setargc\");\n    }\n    return BuiltinSymbols.setargc;\n  }\n\n  // <reference-counting>\n\n  /** Makes retain call, retaining the expression's value. */\n  makeRetain(expr: ExpressionRef): ExpressionRef {\n    var retainInstance = this.program.retainInstance;\n    this.compileFunction(retainInstance);\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\n  }\n\n  /** Makes a retainRelease call, retaining the new expression's value and releasing the old expression's value, in this order. */\n  makeRetainRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\n    // if ((t1=newExpr) != (t2=oldExpr)) {\n    //   __retain(t1);\n    //   __release(t2);\n    // }, t1\n    var module = this.module;\n    var flow = this.currentFlow;\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = this.options.nativeSizeType;\n    var temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\n    var temp2 = flow.getAndFreeTempLocal(usizeType);\n    flow.freeTempLocal(temp1);\n    return module.block(null, [\n      module.if(\n        module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n          module.local_tee(temp1.index, newExpr),\n          module.local_tee(temp2.index, oldExpr)\n        ),\n        module.block(null, [\n          module.drop(\n            this.makeRetain(module.local_get(temp1.index, nativeSizeType))\n          ),\n          this.makeRelease(module.local_get(temp2.index, nativeSizeType))\n        ])\n      ),\n      module.local_get(temp1.index, nativeSizeType)\n    ], nativeSizeType);\n  }\n\n  /** Makes a skippedRelease call, ignoring the new expression's value and releasing the old expression's value, in this order. */\n  makeSkippedRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\n    // TODO: this helper can be eliminated altogether if the current logic holds\n    // (t1=newExpr), __release(oldExpr), t1\n    var module = this.module;\n    var flow = this.currentFlow;\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = this.options.nativeSizeType;\n    var temp = flow.getAndFreeTempLocal(usizeType, findUsedLocals(oldExpr));\n    return module.block(null, [\n      module.local_set(temp.index, newExpr),\n      this.makeRelease(oldExpr),\n      module.local_get(temp.index, nativeSizeType)\n    ], nativeSizeType);\n  }\n\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\n  makeRelease(expr: ExpressionRef): ExpressionRef {\n    var releaseInstance = this.program.releaseInstance;\n    this.compileFunction(releaseInstance);\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\n  }\n\n  /** Makes an automatic release call at the end of the current flow. */\n  makeAutorelease(expr: ExpressionRef, flow: Flow = this.currentFlow): ExpressionRef {\n    return this.module.local_tee(flow.getAutoreleaseLocal(this.options.usizeType).index, expr);\n  }\n\n  /** Attempts to undo a final autorelease, returning the index of the previously retaining variable or -1 if not possible. */\n  undoAutorelease(expr: ExpressionRef, flow: Flow): i32 {\n    // NOTE: Can't remove the local.tee completely because it's already compiled\n    // and a child of something else. Preventing the final release however should\n    // make it optimize away.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: { // local.tee(__retain(expr))\n        if (isLocalTee(expr)) {\n          let index = getLocalSetIndex(expr);\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n            // Assumes that the expression actually belongs to the flow and that\n            // top-level autoreleases are never undone. While that's true, it's\n            // not necessary to check presence in scopedLocals.\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n            return index;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Block: { // { ..., local.tee(__retain(expr)) }\n        if (getBlockName(expr) === null) { // must not be a break target\n          let count = getBlockChildCount(expr);\n          if (count) {\n            return this.undoAutorelease(getBlockChild(expr, count - 1), flow);\n          }\n        }\n        break;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Attemps to move a final autorelease from one flow to a parent.\n   * It is crucial that from flow hasn't processed autoreleases yet because otherwise the final\n   * retain would have been written already.\n   */\n  moveAutorelease(expr: ExpressionRef, fromInnerFlow: Flow, toOuterFlow: Flow): ExpressionRef {\n    // NOTE: While this avoids an unnecessary set of retain and release, it cannot\n    // eliminate the now unnecessary temporary local.tee because it is already part of\n    // another expression in the tree. But optimizing should collapse locals again.\n    var index = this.undoAutorelease(expr, fromInnerFlow);\n    return ~index\n      ? this.makeAutorelease(expr, toOuterFlow) // undone, can skip the retain\n      : this.makeAutorelease(this.makeRetain(expr), toOuterFlow);\n  }\n\n  /** Performs any queued autoreleases in the specified flow. */\n  performAutoreleases(flow: Flow, stmts: ExpressionRef[], clearFlags: bool = true): void {\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      let module = this.module;\n      for (let local of scopedLocals.values()) {\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          let localIndex = local.index;\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n            if (clearFlags) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n            stmts.push(\n              this.makeRelease(\n                module.local_get(localIndex, local.type.toNativeType())\n              )\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /** Performs any queued autoreleases in the specified flow and returns the value. */\n  performAutoreleasesWithValue(\n    flow: Flow,\n    valueExpr: ExpressionRef,\n    valueType: Type,\n    stmts: ExpressionRef[] | null = null,\n    clearFlags: bool = true\n  ): ExpressionRef {\n    if (!stmts) stmts = new Array<ExpressionRef>();\n    stmts.push(\n      this.module.nop()\n    );\n    var lengthBefore = stmts.length;\n    this.performAutoreleases(flow, stmts, clearFlags);\n    if (stmts.length > lengthBefore) {\n      let nativeType = valueType.toNativeType();\n      let temp = flow.getAndFreeTempLocal(valueType);\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      let module = this.module;\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\n      stmts.push(\n        module.local_get(temp.index, nativeType) // append get\n      );\n      return module.block(null, stmts, nativeType);\n    } else if (stmts.length > 1) {\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\n      return this.module.block(null, stmts, valueType.toNativeType());\n    }\n    return valueExpr;\n  }\n\n  /** Finishes any queued top-level autoreleases in the actual function of the specified flow. */\n  finishAutoreleases(flow: Flow, stmts: ExpressionRef[]): void {\n    var module = this.module;\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      // traverse to the top-most flow containing the inlined function's\n      // locals as scoped locals and release these instead.\n      let parent: Flow | null;\n      while (parent = flow.parent) flow = parent;\n      this.performAutoreleases(flow, stmts, false);\n    } else {\n      for (let local of flow.parentFunction.localsByIndex) {\n        let localIndex = local.index;\n        if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n          flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n          stmts.push(\n            this.makeRelease(\n              module.local_get(localIndex, local.type.toNativeType())\n            )\n          );\n        }\n      }\n    }\n  }\n\n  // </reference-counting>\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false,\n    /** Skip the usual autorelease and manage this at the callsite instead. */\n    skipAutorelease: bool = false\n  ): ExpressionRef {\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      this.warning(\n        DiagnosticCode.TODO_Cannot_inline_inferred_calls_and_specific_internals_yet,\n        reportNode.range, instance.internalName\n      );\n    }\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.signatureNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          let resolved: Element | null;\n          if (\n            nodeIsConstantValue(initializer.kind) ||\n            (\n              (resolved = this.resolver.resolveExpression(initializer, instance.flow, parameterTypes[i])) &&\n              (\n                resolved.kind == ElementKind.GLOBAL\n                // resolved.kind == ElementKind.FUNCTION_TARGET\n              )\n            )\n          ) { // inline into the call\n            let previousFlow = this.currentFlow;\n            this.currentFlow = instance.flow;\n            operands.push(this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              ContextualFlags.IMPLICIT\n            ));\n            this.currentFlow = previousFlow;\n            continue;\n          }\n        }\n        operands.push(parameterTypes[i].toNativeZero(module));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant) {\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.unreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\n          this.currentType = returnType;\n          if (returnType.isManaged) {\n            if (immediatelyDropped) {\n              expr = this.makeRelease(expr);\n              this.currentType = Type.void;\n            } else if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          return module.block(null, [\n            module.global_set(this.ensureArgcVar(), module.i32(numArguments)),\n            expr\n          ], this.currentType.toNativeType());\n        }\n      }\n    }\n\n    // If the return value is of a reference type it has not yet been released but is in flight\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else if (!skipAutorelease) {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        ContextualFlags.IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    var expr = module.call_indirect(indexArg, operands, signature.toSignatureString());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return module.block(null, [\n      module.global_set(this.ensureArgcVar(), // might be calling a trampoline\n        module.i32(numArguments)\n      ),\n      expr\n    ], this.currentType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        ContextualFlags.IMPLICIT | ContextualFlags.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, contextualFlags);\n    return this.module.block(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    var target = this.resolver.resolveElementAccessExpression(\n      expression,\n      this.currentFlow,\n      contextualType\n    ); // reports\n    if (!target) return this.module.unreachable();\n    switch (target.kind) {\n      case ElementKind.CLASS: {\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT));\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.expression.range, (<Class>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        let thisArg = this.compileExpression(expression.expression, (<Class>target).type,\n          ContextualFlags.IMPLICIT\n        );\n        return this.compileCallDirect(indexedGet, [\n          expression.elementExpression\n        ], expression, thisArg, contextualFlags & (ContextualFlags.WILL_DROP | ContextualFlags.SKIP_AUTORELEASE));\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.signatureNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      let parameterNames = new Array<string>(numPresentParameters);\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        parameterNames[i] = parameterNode.name.text; // use actual name\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      let signature = new Signature(parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      signature.parameterNames = parameterNames;\n      instance = new Function(\n        prototype.name,\n        prototype,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.unreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.compileFunctionUsingTypeArguments(\n        prototype,\n        [],\n        contextualTypeArguments\n      );\n      if (!instance) return this.module.unreachable();\n      this.currentType = instance.signature.type;\n    }\n\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.unreachable()\n      : this.module.i32(index);\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = filesByName.get(internalPath)!;\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (!contextualType.classReference) {\n          this.currentType = options.usizeType;\n        }\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let nativeSizeType = this.options.nativeSizeType;\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // {\n              //   if (!this) this = <ALLOC>\n              //   this.a = X\n              //   this.b = Y\n              //   return this\n              // }\n              let stmts: ExpressionRef[] = [\n                module.if(\n                  module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                    module.local_get(thisLocal.index, nativeSizeType)\n                  ),\n                  module.local_set(thisLocal.index,\n                    this.makeRetain(\n                      this.makeAllocation(<Class>classInstance)\n                    )\n                  )\n                )\n              ];\n              this.makeFieldInitialization(<Class>classInstance, stmts);\n              stmts.push(\n                module.local_get(thisLocal.index, nativeSizeType)\n              );\n              this.currentType = thisLocal.type;\n              return module.block(null, stmts, nativeSizeType);\n            }\n          }\n          // if not a constructor, `this` type can differ\n          let thisType = assert(actualFunction.signature.thisType);\n          this.currentType = thisType;\n          return module.local_get(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let baseClassInstance = (<Class>classInstance).base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var target = this.resolver.resolveIdentifier( // reports\n      expression,\n      flow,\n      this.currentEnum || actualFunction\n    );\n    if (!target) return module.unreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, contextualFlags);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        if (type.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          type = type.nonNullableType;\n        }\n        this.currentType = type;\n        return this.module.local_get(localIndex, type.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.unreachable();\n        }\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, contextualFlags);\n        }\n        this.currentType = type;\n        return this.module.global_get((<Global>target).internalName, type.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.module.i32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return this.module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!(instance && this.compileFunction(instance))) return module.unreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.i32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway. also note that the code generated below must preserve side-effects of\n    // the LHS expression even when the result is a constant, i.e. return a block dropping `expr`.\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType);\n    var actualType = this.currentType;\n    var expectedType = this.resolver.resolveType(expression.isType, this.currentFlow.actualFunction);\n    this.currentType = Type.bool;\n    if (!expectedType) return module.unreachable();\n\n    // instanceof <basic> - must be exact\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        this.convertExpression(expr, actualType, Type.void, (contextualFlags & ContextualFlags.EXPLICIT) != 0, false, expression.expression),\n        module.i32(actualType == expectedType ? 1 : 0)\n      ], NativeType.I32);\n    }\n\n    // <basic> instanceof <reference> - always false\n    if (!actualType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        this.convertExpression(expr, actualType, Type.void, (contextualFlags & ContextualFlags.EXPLICIT) != 0,false, expression.expression),\n        module.i32(0)\n      ], NativeType.I32);\n    }\n\n    // both LHS and RHS are references now\n    var nativeSizeType = actualType.toNativeType();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          actualType.toNativeZero(module)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          return module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(tempLocal.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(tempLocal.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.block(null, [\n          this.convertExpression(expr, actualType, Type.void, (contextualFlags & ContextualFlags.EXPLICIT) != 0, false, expression.expression),\n          module.i32(1)\n        ], NativeType.I32);\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          return module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(tempLocal.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(tempLocal.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n        }\n      }\n    }\n\n    // false\n    return module.block(null, [\n      this.convertExpression(expr, actualType, Type.void, (contextualFlags & ContextualFlags.EXPLICIT) != 0, false, expression.expression),\n      module.i32(0)\n    ], NativeType.I32);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    contextualFlags: ContextualFlags,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        let classType = contextualType.classReference;\n        if (classType) {\n          if (classType.prototype == this.program.arrayPrototype) {\n            return this.compileArrayLiteral(\n              assert(classType.typeArguments)[0],\n              (<ArrayLiteralExpression>expression).elementExpressions,\n              false, // TODO: isConst?\n              contextualFlags,\n              expression\n            );\n          }\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.unreachable();\n  }\n\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    isConst: bool,\n    contextualFlags: ContextualFlags,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n    var program = this.program;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n    var arrayType = arrayInstance.type;\n    var flow = this.currentFlow;\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(arrayType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = true;\n    var nativeElementType = elementType.toNativeType();\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr = expression\n        ? module.precomputeExpression(\n            this.compileExpression(<Expression>expression, elementType,\n              ContextualFlags.IMPLICIT\n            )\n          )\n        : elementType.toNativeZero(module);\n      if (getExpressionId(expr) == ExpressionId.Const) {\n        assert(getExpressionType(expr) == nativeElementType);\n      } else {\n        isStatic = false;\n      }\n      values[i] = expr;\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let runtimeHeaderSize = program.runtimeHeaderSize;\n      let bufferSegment = this.ensureStaticArrayBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (contextualFlags & ContextualFlags.STATIC_CAPABLE) {\n        let arraySegment = this.ensureStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        // makeArray(length, alignLog2, classId, staticBuffer)\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], reportNode);\n        this.currentType = arrayType;\n        return this.makeAutorelease(this.makeRetain(expr));\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = makeArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(0)\n            : module.i32(0)\n        ], reportNode),\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStart = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStart.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, nativeArrayType),\n          nativeArrayType,\n          (<Field>dataStart).memoryOffset\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        valueExpr = this.makeRetain(valueExpr);\n      }\n      // store<T>(tempData, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempDataStart.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    this.currentType = arrayType;\n    return module.block(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var flow = this.currentFlow;\n    var tempLocal = flow.getAutoreleaseLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.store( // TODO: handle setters as well\n        type.byteSize,\n        this.module.local_get(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, ContextualFlags.IMPLICIT),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.local_set(\n      tempLocal.index,\n      this.makeRetain(\n        this.makeAllocation(classReference)\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.local_get(tempLocal.index, this.options.nativeSizeType);\n\n    this.currentType = classReference.type;\n    return module.block(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveExpression( // reports\n      expression.expression,\n      flow\n    );\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) contextualFlags |= ContextualFlags.WILL_DROP;\n    return this.compileInstantiate(classInstance, expression.arguments, contextualFlags, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // clone base constructor if a derived class\n    var baseClass = classInstance.base;\n    if (baseClass) {\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          // declaration is important, i.e. to access optional parameter initializers\n          (<FunctionDeclaration>baseCtor.declaration).clone()\n        ),\n        baseCtor.signature,\n        null\n      );\n\n    // otherwise make a default constructor\n    } else {\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n          )\n        ),\n        new Signature(null, classInstance.type, classInstance.type),\n        null\n      );\n    }\n\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    var flow = instance.flow;\n    this.currentFlow = flow;\n\n    // generate body\n    var signature = instance.signature;\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    stmts.push(\n      module.if(\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.local_get(0, nativeSizeType)\n        ),\n        module.local_set(0,\n          this.makeRetain(\n            this.makeAllocation(classInstance)\n          )\n        )\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.local_get(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\n      }\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\n      stmts.push(\n        module.local_set(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode)\n        )\n      );\n    }\n    this.makeFieldInitialization(classInstance, stmts);\n    var body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    // make the function\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes, body);\n    instance.finalize(module, funcRef);\n    return instance;\n  }\n\n  compileInstantiate(\n    /** Class to instantiate. */\n    classInstance: Class,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    contextualFlags: ContextualFlags,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    var expr = this.compileCallDirect( // no need for another autoreleased local\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.options.usizeType.toNativeZero(this.module),\n      contextualFlags\n    );\n    if (getExpressionType(expr) != NativeType.None) { // possibly IMM_DROPPED\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(propertyAccess);\n\n    var target = this.resolver.resolvePropertyAccessExpression(propertyAccess, flow, contextualType); // reports\n    if (!target) return module.unreachable();\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.unreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, contextualFlags);\n        }\n        this.currentType = globalType;\n        return module.global_get((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>theEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return module.i32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpressionRetainType(\n          assert(this.resolver.currentThisExpression),\n          this.options.usizeType\n        );\n        this.currentType = (<Field>target).type;\n        return module.load(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\n        if (getterPrototype) {\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\n          if (getter) return this.compileCallDirect(getter, [], propertyAccess, 0);\n        }\n        return module.unreachable();\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        return this.compileCallDirect(getterInstance, [], propertyAccess,\n          this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType\n          )\n        );\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          propertyAccess.range, (<FunctionPrototype>target).name\n        );\n        return module.unreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.unreachable();\n  }\n\n  compileTernaryExpression(\n    expression: TernaryExpression,\n    contextualType: Type,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var outerFlow = this.currentFlow;\n\n    var condExpr = this.module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpressionRetainType(expression.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileExpressionRetainType(ifThen, contextualType)\n        : this.compileExpressionRetainType(ifElse, contextualType);\n    }\n\n    var ifThenFlow = outerFlow.fork();\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, contextualFlags & ContextualFlags.SKIP_AUTORELEASE);\n    var ifThenType = this.currentType;\n    var IfThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\n\n    var ifElseFlow = outerFlow.fork();\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, contextualFlags & ContextualFlags.SKIP_AUTORELEASE);\n    var ifElseType = this.currentType;\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\n      );\n      this.currentType = contextualType;\n      return this.module.unreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType, commonType,\n      false, false,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType, commonType,\n      false, false,\n      ifElse\n    );\n    this.currentType = commonType;\n\n    if (IfThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\n      if (!IfThenAutoreleaseSkipped) {\n        ifThenExpr = this.makeRetain(ifThenExpr);\n        IfThenAutoreleaseSkipped = true;\n      } else {\n        ifElseExpr = this.makeRetain(ifElseExpr);\n        ifElseAutoreleaseSkipped = true;\n      }\n    } else if (!IfThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\n      // if (!(contextualFlags & ContextualFlags.SKIP_AUTORELEASE)) {\n        ifThenExpr = this.moveAutorelease(ifThenExpr, ifThenFlow, outerFlow);\n        ifElseExpr = this.moveAutorelease(ifElseExpr, ifElseFlow, outerFlow);\n      // }\n    }\n\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\n    ifThenFlow.freeScopedLocals();\n\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var expr = this.module.if(condExpr, ifThenExpr, ifElseExpr);\n    assert(IfThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\n    if (IfThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n    return expr;\n  }\n\n  compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ContextualFlags.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n                if (overload) {\n                  expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.unreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n                if (overload) {\n                  expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.unreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.resolveExpression(expression.operand, flow); // reports\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      this.currentType = Type.void;\n      if (!target) return module.unreachable();\n      return this.makeAssignment(\n        target,\n        expr,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    } else if (!target) {\n      return module.unreachable();\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ContextualFlags.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, ContextualFlags.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ContextualFlags.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ContextualFlags.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ContextualFlags.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ContextualFlags.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = this.makeIsFalseish(expr, this.currentType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          ContextualFlags.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        } else {\n          expr = this.convertExpression(expr,\n            this.currentType, this.currentType.intType,\n            false, false,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.resolveExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.unary(UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.unary(UnaryOp.EqzI64, expr);\n      }\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\n      case TypeKind.ISIZE: {\n        return module.unary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.EqF32, expr, module.f32(0));\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.EqF64, expr, module.f64(0));\n      }\n      default: {\n        assert(false);\n        return module.i32(1);\n      }\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.NeF32, expr, module.f32(0));\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.NeF64, expr, module.f64(0));\n      }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    var allocInstance = program.allocInstance;\n    this.compileFunction(allocInstance);\n    return module.call(allocInstance.internalName, [\n      options.isWasm64\n        ? module.i64(classInstance.currentMemoryOffset)\n        : module.i32(classInstance.currentMemoryOffset),\n      module.i32(\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\n          ? 0\n          : classInstance.id\n      )\n    ], options.nativeSizeType);\n  }\n\n  /** Makes the initializers for a class's fields. */\n  makeFieldInitialization(\n    classInstance: Class,\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return [];\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\n    var thisLocalIndex = isInline\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    for (let member of members.values()) {\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let initializerNode = field.prototype.initializerNode;\n      if (initializerNode) { // use initializer\n        let initExpr = this.compileExpression(initializerNode, fieldType, // reports\n          ContextualFlags.IMPLICIT | ContextualFlags.SKIP_AUTORELEASE\n        );\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\n          initExpr = this.makeRetain(initExpr);\n        }\n        stmts.push(\n          module.store(fieldType.byteSize,\n            module.local_get(thisLocalIndex, nativeSizeType),\n            initExpr,\n            nativeFieldType,\n            field.memoryOffset\n          )\n        );\n      } else {\n        let parameterIndex = field.prototype.parameterIndex;\n        stmts.push(\n          module.store(fieldType.byteSize,\n            module.local_get(thisLocalIndex, nativeSizeType),\n            parameterIndex >= 0 // initialized via parameter (here: a local)\n              ? module.local_get(\n                  isInline\n                    ? assert(flow.lookupLocal(field.name)).index\n                    : 1 + parameterIndex, // this is local 0\n                  nativeFieldType\n                )\n              : fieldType.toNativeZero(module),\n            nativeFieldType,\n            field.memoryOffset\n          )\n        );\n      }\n    }\n    return stmts;\n  }\n\n  makeInstanceOfClass(\n    expr: ExpressionRef,\n    classInstance: Class\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var idTemp = flow.getTempLocal(Type.i32);\n    var idExpr = module.load(4, false,\n      module.binary(BinaryOp.SubI32,\n        expr,\n        module.i32(this.program.runtimeHeaderSize)\n      ),\n      NativeType.I32\n    );\n    var label = \"instanceof_\" + classInstance.name + \"|\" + flow.pushBreakLabel();\n    var conditions: ExpressionRef[] = [];\n    conditions.push(\n      module.drop( // br_if returns the value too\n        module.br(label,\n          module.binary(BinaryOp.EqI32, // classId == class.id\n            module.local_tee(idTemp.index, idExpr),\n            module.i32(classInstance.id)\n          ),\n          module.i32(1) // ? true\n        )\n      )\n    );\n    // TODO: insert conditions for all possible subclasses (i.e. cat is also animal)\n    // TODO: simplify if there are none\n    conditions.push(\n      module.i32(0) // : false\n    );\n    flow.freeTempLocal(idTemp);\n    flow.popBreakLabel();\n    return module.block(label, conditions, NativeType.I32);\n  }\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n\n/** Flattens a series of expressions to a nop, a single statement or a block depending on statement count. */\nexport function flatten(module: Module, stmts: ExpressionRef[], type: NativeType): ExpressionRef {\n  var length = stmts.length;\n  if (length == 0) return module.nop(); // usually filtered out again\n  if (length == 1) return stmts[0];\n  return module.block(null, stmts,\n    type == NativeType.Auto\n      ? getExpressionType(stmts[length - 1])\n      : type\n  );\n}\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_present_to_use_0 = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Module_cannot_have_multiple_start_functions = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  TODO_Cannot_inline_inferred_calls_and_specific_internals_yet = 224,\n  Expression_is_never_null = 225,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be present to use '{0}'.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Module cannot have multiple start functions.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"TODO: Cannot inline inferred calls and specific internals yet.\";\n    case 225: return \"Expression is never 'null'.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  ContextualFlags,\n  RuntimeFeatures,\n  flatten\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression,\n  CallExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  Relooper,\n  RelooperBlockRef\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  Element\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Symbols of various compiler built-ins. */\nexport namespace BuiltinSymbols {\n  // std/builtins.ts\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const call_direct = \"~lib/builtins/call_direct\";\n  export const call_indirect = \"~lib/builtins/call_indirect\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n  export const void_ = \"~lib/builtins/void\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_u_xor = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_u_xor = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc = \"~lib/builtins/v128.trunc\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_s_f32x4_sat = \"~lib/builtins/i32x4.trunc_s_f32x4_sat\";\n  export const i32x4_trunc_u_f32x4_sat = \"~lib/builtins/i32x4.trunc_u_f32x4_sat\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_s_f64x2_sat = \"~lib/builtins/i64x2.trunc_s_f64x2_sat\";\n  export const i64x2_trunc_u_f64x2_sat = \"~lib/builtins/i64x2.trunc_u_f64x2_sat\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_s_i32x4 = \"~lib/builtins/f32x4.convert_s_i32x4\";\n  export const f32x4_convert_u_i32x4 = \"~lib/builtins/f32x4.convert_u_i32x4\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_s_i64x2 = \"~lib/builtins/f64x2.convert_s_i64x2\";\n  export const f64x2_convert_u_i64x2 = \"~lib/builtins/f64x2.convert_u_i64x2\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n\n  // internals\n  export const heap_base = \"~lib/heap/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  export const memory_allocate = \"~lib/memory/memory.allocate\";\n  export const memory_free = \"~lib/memory/memory.free\";\n  export const memory_reset = \"~lib/memory/memory.reset\";\n\n  // std/runtime.ts\n  export const runtime_instanceof = \"~lib/runtime/runtime.instanceof\";\n  export const runtime_flags = \"~lib/runtime/runtime.flags\";\n  export const runtime_allocate = \"~lib/util/runtime/allocate\";\n  export const runtime_reallocate = \"~lib/util/runtime/reallocate\";\n  export const runtime_register = \"~lib/util/runtime/register\";\n  export const runtime_discard = \"~lib/util/runtime/discard\";\n  export const runtime_makeArray = \"~lib/util/runtime/makeArray\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n\n  // compiler generated\n  export const started = \"~lib/started\";\n  export const argc = \"~lib/argc\";\n  export const setargc = \"~lib/setargc\";\n  export const capabilities = \"~lib/capabilities\";\n}\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  /* Compiler reference. */\n  compiler: Compiler,\n  /** Respective function prototype. */\n  prototype: FunctionPrototype,\n  /** Pre-resolved type arguments. */\n  typeArguments: Type[] | null,\n  /** Operand expressions. */\n  operands: Expression[],\n  /** Contextual type. */\n  contextualType: Type,\n  /** Respective call expression. */\n  reportNode: CallExpression,\n  /** Indicates that contextual type is ASM type. */\n  isAsm: bool = false\n): ExpressionRef {\n  var module = compiler.module;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\n  // search: createSelect\n\n  // NOTE that consolidation of individual instructions into a single case isn't exactly scientific\n  // below, but rather done to make this file easier to work with. If there was a general rule it'd\n  // most likely be \"three or more instructions that only differ in their actual opcode\".\n\n  var directize = false;\n\n  switch (prototype.internalName) {\n\n    // === Static type evaluation =================================================================\n\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isBoolean: { // isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type == Type.bool\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      let classType = type.classReference;\n      if (classType) {\n        let stringInstance = compiler.program.stringInstance;\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.i32(1);\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      let classReference = type.classReference;\n      if (!classReference) return module.i32(0);\n      let classPrototype = classReference.prototype;\n      return module.i32(classPrototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\n    }\n    case BuiltinSymbols.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      let classReference = type.classReference;\n      if (!classReference) return module.i32(0);\n      return module.i32(classReference.isArrayLike ? 1 : 0);\n    }\n    case BuiltinSymbols.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.signatureReference ? 1 : 0);\n    }\n    case BuiltinSymbols.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\n    }\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let element = compiler.resolver.resolveExpression(\n        operands[0],\n        compiler.currentFlow,\n        Type.void,\n        ReportMode.SWALLOW\n      );\n      return module.i32(element ? 1 : 0);\n    }\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.i32);\n      compiler.currentType = Type.bool;\n      return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case BuiltinSymbols.isManaged: { // isManaged<T>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.isManaged ? 1 : 0);\n    }\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      let expr: ExpressionRef;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          expr = module.i32(byteSize);\n        } else {\n          expr = module.i64(byteSize, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          expr = module.i64(byteSize, 0);\n        } else {\n          expr = module.i32(byteSize);\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      assert(isPowerOf2(byteSize));\n      let alignLog2 = ctz<i32>(byteSize);\n      let expr: ExpressionRef;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          expr = module.i32(alignLog2);\n        } else {\n          expr = module.i64(alignLog2, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          expr = module.i64(alignLog2, 0);\n        } else {\n          expr = module.i32(alignLog2);\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let classType = typeArguments![0].classReference;\n      if (!classType) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.unreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.unreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(offset);\n        } else {\n          return module.i64(offset);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(offset);\n        } else {\n          return module.i32(offset);\n        }\n      }\n    }\n\n    // === Math ===================================================================================\n\n    case BuiltinSymbols.clz: // any_bitcount<T?>(value: T) -> T\n    case BuiltinSymbols.ctz:\n    case BuiltinSymbols.popcnt: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT | ContextualFlags.WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, ContextualFlags.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.clz: {\n          switch (type.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.ClzI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.ClzI64\n                : UnaryOp.ClzI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.ClzI64; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.ctz: {\n          switch (type.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.CtzI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.CtzI64\n                : UnaryOp.CtzI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.CtzI64; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.popcnt: {\n          switch (compiler.currentType.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.PopcntI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.PopcntI64\n                : UnaryOp.PopcntI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.PopcntI64; break; }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT | ContextualFlags.WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, ContextualFlags.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ContextualFlags.IMPLICIT);\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          expr = compiler.ensureSmallIntegerWrap(\n            module.binary(BinaryOp.RotlI32, arg0, arg1),\n            type\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          expr = module.binary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.ISIZE: {\n          expr = module.binary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0, arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          expr = module.binary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr; // possibly overflows\n    }\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT | ContextualFlags.WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, ContextualFlags.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ContextualFlags.IMPLICIT);\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          expr = compiler.ensureSmallIntegerWrap(\n            module.binary(BinaryOp.RotrI32, arg0, arg1),\n            type\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          expr = module.binary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.ISIZE: {\n          expr = module.binary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0, arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          expr = module.binary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr; // possibly overflowws\n    }\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT | ContextualFlags.WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, ContextualFlags.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFlow;\n\n          // possibly overflows, e.g. abs<i8>(-128) == 128\n          let tempLocal1 = flow.getTempLocal(Type.i32);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i32).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          // (x + (x >> 31)) ^ (x >> 31)\n          expr = module.binary(BinaryOp.XorI32,\n            module.binary(BinaryOp.AddI32,\n              module.local_tee(\n                tempLocalIndex2,\n                module.binary(BinaryOp.ShrI32,\n                  module.local_tee(tempLocalIndex1, arg0),\n                  module.i32(31)\n                )\n              ),\n              module.local_get(tempLocalIndex1, NativeType.I32)\n            ),\n            module.local_get(tempLocalIndex2, NativeType.I32)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let options = compiler.options;\n          let flow = compiler.currentFlow;\n          let wasm64 = options.isWasm64;\n\n          let tempLocal1 = flow.getTempLocal(options.usizeType);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(options.usizeType).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          expr = module.binary(wasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n            module.binary(wasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n              module.local_tee(\n                tempLocalIndex2,\n                module.binary(wasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                  module.local_tee(tempLocalIndex1, arg0),\n                  wasm64 ? module.i64(63) : module.i32(31)\n                )\n              ),\n              module.local_get(tempLocalIndex1, options.nativeSizeType)\n            ),\n            module.local_get(tempLocalIndex2, options.nativeSizeType)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.I64: {\n          let flow = compiler.currentFlow;\n\n          let tempLocal1 = flow.getTempLocal(Type.i64);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i64).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          // (x + (x >> 63)) ^ (x >> 63)\n          expr = module.binary(BinaryOp.XorI64,\n            module.binary(BinaryOp.AddI64,\n              module.local_tee(\n                tempLocalIndex2,\n                module.binary(BinaryOp.ShrI64,\n                  module.local_tee(tempLocalIndex1, arg0),\n                  module.i64(63)\n                )\n              ),\n              module.local_get(tempLocalIndex1, NativeType.I64)\n            ),\n            module.local_get(tempLocalIndex2, NativeType.I64)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT | ContextualFlags.WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, ContextualFlags.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ContextualFlags.IMPLICIT | ContextualFlags.WRAP);\n      let op: BinaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n        case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n        case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n        case TypeKind.ISIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.GtI64\n            : BinaryOp.GtI32;\n          break;\n        }\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.GtU64\n            : BinaryOp.GtU32;\n          break;\n        }\n        case TypeKind.F32: {\n          return module.binary(BinaryOp.MaxF32, arg0, arg1);\n        }\n        case TypeKind.F64: {\n          return module.binary(BinaryOp.MaxF64, arg0, arg1);\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let tempLocal0 = flow.getTempLocal(type);\n      flow.setLocalFlag(tempLocal0.index, LocalFlags.WRAPPED);\n      let tempLocal1 = flow.getAndFreeTempLocal(type);\n      flow.setLocalFlag(tempLocal1.index, LocalFlags.WRAPPED);\n      flow.freeTempLocal(tempLocal0);\n      return module.select(\n        module.local_tee(tempLocal0.index, arg0),\n        module.local_tee(tempLocal1.index, arg1),\n        module.binary(op,\n          module.local_get(tempLocal0.index, nativeType),\n          module.local_get(tempLocal1.index, nativeType)\n        )\n      );\n    }\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT | ContextualFlags.WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, ContextualFlags.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ContextualFlags.IMPLICIT | ContextualFlags.WRAP);\n      let op: BinaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n        case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n        case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n        case TypeKind.ISIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.LtI64\n            : BinaryOp.LtI32;\n          break;\n        }\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.LtU64\n            : BinaryOp.LtU32;\n          break;\n        }\n        case TypeKind.F32: {\n          return module.binary(BinaryOp.MinF32, arg0, arg1);\n        }\n        case TypeKind.F64: {\n          return module.binary(BinaryOp.MinF64, arg0, arg1);\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let tempLocal0 = flow.getTempLocal(type);\n      flow.setLocalFlag(tempLocal0.index, LocalFlags.WRAPPED);\n      let tempLocal1 = flow.getAndFreeTempLocal(type);\n      flow.setLocalFlag(tempLocal1.index, LocalFlags.WRAPPED);\n      flow.freeTempLocal(tempLocal0);\n      return module.select(\n        module.local_tee(tempLocal0.index, arg0),\n        module.local_tee(tempLocal1.index, arg1),\n        module.binary(op,\n          module.local_get(tempLocal0.index, nativeType),\n          module.local_get(tempLocal1.index, nativeType)\n        )\n      );\n    }\n    case BuiltinSymbols.ceil: // any_rounding<T?>(value: T) -> T\n    case BuiltinSymbols.floor: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, ContextualFlags.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let op: UnaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: return arg0; // considered rounded\n        case TypeKind.F32: {\n          op = prototype.internalName == BuiltinSymbols.ceil\n            ? UnaryOp.CeilF32\n            : UnaryOp.FloorF32;\n          break;\n        }\n        case TypeKind.F64: {\n          op = prototype.internalName == BuiltinSymbols.ceil\n            ? UnaryOp.CeilF64\n            : UnaryOp.FloorF64;\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, ContextualFlags.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ContextualFlags.IMPLICIT);\n      let op: BinaryOp;\n      switch (type.kind) {\n        // TODO: does an integer version make sense?\n        case TypeKind.F32: { op = BinaryOp.CopysignF32; break; }\n        case TypeKind.F64: { op = BinaryOp.CopysignF64; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      return module.binary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, ContextualFlags.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.currentType = type;\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          let arg0 = compiler.compileExpression(operands[0], Type.f32, ContextualFlags.IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          let arg0 = compiler.compileExpression(operands[0], Type.f64, ContextualFlags.IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          let arg0 = compiler.compileExpression(operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32,\n            ContextualFlags.IMPLICIT\n          );\n          expr = module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          let arg0 = compiler.compileExpression(operands[0], Type.i32, ContextualFlags.IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          let arg0 = compiler.compileExpression(operands[0], Type.i64, ContextualFlags.IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      compiler.currentType = type;\n      return expr;\n    }\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, ContextualFlags.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.currentType = type;\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, ContextualFlags.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n\n    // === Memory access ==========================================================================\n\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        ContextualFlags.IMPLICIT\n      );\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = outType;\n      return module.load(\n        type.byteSize,\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        outType.toNativeType(),\n        immOffset,\n        immAlign\n      );\n    }\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        ContextualFlags.IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            ContextualFlags.IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? ContextualFlags.NONE // no need to convert to small int (but now might result in a float)\n              : ContextualFlags.IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (operands.length == 4) {\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[3].range, \"Alignment\"\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.void;\n      return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n    }\n\n    // === Atomics ================================================================================\n\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        ContextualFlags.IMPLICIT\n      );\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      compiler.currentType = outType;\n      return module.atomic_load(\n        type.byteSize,\n        arg0,\n        outType.toNativeType(),\n        immOffset\n      );\n    }\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        ContextualFlags.IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            ContextualFlags.IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? ContextualFlags.NONE // no need to convert to small int (but now might result in a float)\n              : ContextualFlags.IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n    }\n    case BuiltinSymbols.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\n    case BuiltinSymbols.atomic_sub:\n    case BuiltinSymbols.atomic_and:\n    case BuiltinSymbols.atomic_or:\n    case BuiltinSymbols.atomic_xor:\n    case BuiltinSymbols.atomic_xchg: {\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        ContextualFlags.IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            ContextualFlags.IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? ContextualFlags.NONE // no need to convert to small int (but now might result in a float)\n              : ContextualFlags.IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      let op: AtomicRMWOp;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.atomic_add:  { op = AtomicRMWOp.Add;  break; }\n        case BuiltinSymbols.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\n        case BuiltinSymbols.atomic_and:  { op = AtomicRMWOp.And;  break; }\n        case BuiltinSymbols.atomic_or:   { op = AtomicRMWOp.Or;   break; }\n        case BuiltinSymbols.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\n        case BuiltinSymbols.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\n      }\n      compiler.currentType = inType;\n      return module.atomic_rmw(\n        op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType()\n      );\n    }\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize): T\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        ContextualFlags.IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            ContextualFlags.IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? ContextualFlags.NONE // no need to convert to small int (but now might result in a float)\n              : ContextualFlags.IMPLICIT\n          );\n      let inType = compiler.currentType;\n      let arg2 = compiler.compileExpression(operands[2],\n        inType,\n        ContextualFlags.IMPLICIT\n      );\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        arg2 = compiler.convertExpression(arg2,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[2]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      compiler.currentType = inType;\n      return module.atomic_cmpxchg(\n        type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType()\n      );\n    }\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64): i32;\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        ContextualFlags.IMPLICIT\n      );\n      let arg1 = compiler.compileExpression(operands[1], type,\n        ContextualFlags.IMPLICIT\n      );\n      let arg2 = compiler.compileExpression(operands[2],\n        Type.i64,\n        ContextualFlags.IMPLICIT\n      );\n      compiler.currentType = Type.i32;\n      return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n    }\n    case BuiltinSymbols.atomic_notify: { // notify(ptr: usize, count: i32): i32;\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        ContextualFlags.IMPLICIT\n      );\n      let arg1 = compiler.compileExpression(operands[1],\n        Type.i32,\n        ContextualFlags.IMPLICIT\n      );\n      compiler.currentType = Type.i32;\n      return module.atomic_notify(arg0, arg1);\n    }\n\n    // === Control flow ===========================================================================\n\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT)\n        : compiler.compileExpressionRetainType(operands[0], Type.i32);\n      let type = compiler.currentType;\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ContextualFlags.IMPLICIT);\n      let arg2 = compiler.makeIsTrueish(\n        compiler.compileExpressionRetainType(operands[2], Type.bool),\n        compiler.currentType // ^\n      );\n      compiler.currentType = type;\n      return module.select(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      checkArgsRequired(operands, 0, reportNode, compiler);\n      return module.unreachable();\n    }\n\n    // === Memory =================================================================================\n\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemorySize);\n    }\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemoryGrow, null, [\n        compiler.compileExpression(operands[0], Type.i32, ContextualFlags.IMPLICIT)\n      ]);\n    }\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, ContextualFlags.IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], usizeType, ContextualFlags.IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, ContextualFlags.IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_copy(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, ContextualFlags.IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u8, ContextualFlags.IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, ContextualFlags.IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_fill(arg0, arg1, arg2);\n    }\n\n    // === Helpers ================================================================================\n\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let toType = typeArguments![0];\n      let arg0 = compiler.compileExpressionRetainType(operands[0], toType);\n      let fromType = compiler.currentType;\n      compiler.currentType = toType;\n      if (fromType.size != toType.size) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.unreachable();\n      }\n      return arg0;\n    }\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) {\n        if (typeArguments) {\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\n          compiler.currentType = typeArguments[0].nonNullableType;\n        }\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT | ContextualFlags.WRAP)\n        : compiler.compileExpressionRetainType(operands[0], Type.bool, ContextualFlags.WRAP);\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // return ifTrueish if assertions are disabled\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) { // simplify if dropped anyway\n          compiler.currentType = Type.void;\n          return module.nop();\n        }\n        return arg0;\n      }\n\n      // otherwise call abort if the assertion is false-ish\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n      compiler.currentType = type.nonNullableType;\n      let expr: ExpressionRef;\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        compiler.currentType = Type.void;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.if(\n              module.unary(UnaryOp.EqzI32, arg0),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.if(\n              module.unary(UnaryOp.EqzI64, arg0),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            expr = module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            expr = module.if(\n              module.binary(BinaryOp.EqF32,\n                arg0,\n                module.f32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.if(\n              module.binary(BinaryOp.EqF64,\n                arg0,\n                module.f64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          default: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.typeArgumentsRange\n            );\n            expr = abort;\n            break;\n          }\n        }\n      } else {\n        compiler.currentType = type.nonNullableType;\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            let flow = compiler.currentFlow;\n            let tempLocal = flow.getAndFreeTempLocal(type);\n            flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED); // arg0 is wrapped\n            expr = module.if(\n              module.local_tee(tempLocal.index, arg0),\n              module.local_get(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.i64);\n            expr = module.if(\n              module.unary(UnaryOp.EqzI64,\n                module.local_tee(tempLocal.index, arg0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(compiler.options.usizeType);\n            expr = module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.local_tee(tempLocal.index, arg0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f32);\n            expr = module.if(\n              module.binary(BinaryOp.EqF32,\n                module.local_tee(tempLocal.index, arg0),\n                module.f32(0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f64);\n            expr = module.if(\n              module.binary(BinaryOp.EqF64,\n                module.local_tee(tempLocal.index, arg0),\n                module.f64(0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, NativeType.F64)\n            );\n            break;\n          }\n          default: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.typeArgumentsRange\n            );\n            expr = abort;\n            break;\n          }\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.unchecked: { // unchecked(expr: *) -> *\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let flow = compiler.currentFlow;\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      // eliminate unnecessary tees by preferring contextualType(=void):\n      let expr = compiler.compileExpression(operands[0], contextualType);\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return expr;\n    }\n    case BuiltinSymbols.call_direct: directize = true;\n    case BuiltinSymbols.call_indirect: { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, i32.MAX_VALUE, reportNode, compiler)\n      ) return module.unreachable();\n      let returnType = typeArguments ? typeArguments[0] : contextualType;\n      let arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32);\n      let arg0Type = compiler.currentType;\n      if (!(\n        arg0Type == Type.u32 ||                                      // either plain index\n        arg0Type.kind == TypeKind.U32 && arg0Type.signatureReference // or function reference\n      )) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.unreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let nativeReturnType = returnType.toNativeType();\n      let parameterTypes = new Array<Type>(numOperands);\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32);\n        let operandType = compiler.currentType;\n        parameterTypes[i] = operandType;\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      let typeName = Signature.makeSignatureString(parameterTypes, returnType);\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      if (directize) {\n        // if the index expression is precomputable to a constant value, emit a direct call\n        if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n          assert(getExpressionType(arg0) == NativeType.I32);\n          let index = getConstValueI32(arg0);\n          let functionTable = compiler.functionTable;\n          if (index >= 0 && index < functionTable.length) {\n            return module.call(functionTable[index], operandExprs, nativeReturnType);\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.unreachable();\n      }\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.call_indirect(arg0, operandExprs, typeName);\n    }\n    case BuiltinSymbols.instantiate: { // instantiate<T!>(...args: *[]) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\n      ) return module.unreachable();\n      let classInstance = typeArguments![0].classReference;\n      if (!classInstance) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      compiler.currentType = classInstance.type;\n      return compiler.compileInstantiate(classInstance, operands, ContextualFlags.NONE, reportNode);\n    }\n\n    // === User-defined diagnostics ===============================================================\n\n    case BuiltinSymbols.ERROR: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.WARNING: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n    case BuiltinSymbols.INFO: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n\n    // === Portable type conversions ==============================================================\n\n    case BuiltinSymbols.i8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i8, ContextualFlags.EXPLICIT);\n    }\n    case BuiltinSymbols.i16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i16, ContextualFlags.EXPLICIT);\n    }\n    case BuiltinSymbols.i32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i32, ContextualFlags.EXPLICIT);\n    }\n    case BuiltinSymbols.i64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i64, ContextualFlags.EXPLICIT);\n    }\n    case BuiltinSymbols.isize: {\n      let isizeType = compiler.options.isizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = isizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], isizeType, ContextualFlags.EXPLICIT);\n    }\n    case BuiltinSymbols.u8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u8, ContextualFlags.EXPLICIT);\n    }\n    case BuiltinSymbols.u16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u16, ContextualFlags.EXPLICIT);\n    }\n    case BuiltinSymbols.u32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u32, ContextualFlags.EXPLICIT);\n    }\n    case BuiltinSymbols.u64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u64, ContextualFlags.EXPLICIT);\n    }\n    case BuiltinSymbols.usize: {\n      let usizeType = compiler.options.usizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], usizeType, ContextualFlags.EXPLICIT);\n    }\n    case BuiltinSymbols.bool: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.bool, ContextualFlags.EXPLICIT);\n    }\n    case BuiltinSymbols.f32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f32, ContextualFlags.EXPLICIT);\n    }\n    case BuiltinSymbols.f64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f64, ContextualFlags.EXPLICIT);\n    }\n\n    // === SIMD ===================================================================================\n\n    case BuiltinSymbols.v128: // alias for now\n    case BuiltinSymbols.i8x16: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 16, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 16; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i8, ContextualFlags.IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI8(getConstValueI32(expr), bytes, i);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i16x8: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 8, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 8; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i16, ContextualFlags.IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI16(getConstValueI32(expr), bytes, i << 1);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i32x4: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i32, ContextualFlags.IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI32(getConstValueI32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i64x2: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i64, ContextualFlags.IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I64);\n          let off = i << 3;\n          writeI32(getConstValueI64Low(expr), bytes, off);\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f32x4: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f32, ContextualFlags.IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F32);\n          writeF32(getConstValueF32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f64x2: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f64, ContextualFlags.IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F64);\n          writeF64(getConstValueF64(expr), bytes, i << 3);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.v128_splat: { // splat<T!>(x: T) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: UnaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8:  { op = UnaryOp.SplatVecI8x16; break; }\n        case TypeKind.I16:\n        case TypeKind.U16: { op = UnaryOp.SplatVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = UnaryOp.SplatVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = UnaryOp.SplatVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? UnaryOp.SplatVecI64x2\n            : UnaryOp.SplatVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = UnaryOp.SplatVecF32x4; break; }\n        case TypeKind.F64: { op = UnaryOp.SplatVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], type, ContextualFlags.IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = type;\n        return module.unreachable();\n      }\n      let op: SIMDExtractOp;\n      switch (type.kind) {\n        case TypeKind.I8:  { op = SIMDExtractOp.ExtractLaneSVecI8x16; break; }\n        case TypeKind.U8:  { op = SIMDExtractOp.ExtractLaneUVecI8x16; break; }\n        case TypeKind.I16: { op = SIMDExtractOp.ExtractLaneSVecI16x8; break; }\n        case TypeKind.U16: { op = SIMDExtractOp.ExtractLaneUVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = SIMDExtractOp.ExtractLaneVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = SIMDExtractOp.ExtractLaneVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? SIMDExtractOp.ExtractLaneVecI64x2\n            : SIMDExtractOp.ExtractLaneVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = SIMDExtractOp.ExtractLaneVecF32x4; break; }\n        case TypeKind.F64: { op = SIMDExtractOp.ExtractLaneVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = type;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, ContextualFlags.IMPLICIT);\n      compiler.currentType = type;\n      if (getExpressionId(arg1) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n        return module.unreachable();\n      }\n      assert(getExpressionType(arg1) == NativeType.I32);\n      let maxIdx = (16 / type.byteSize) - 1;\n      let idx = getConstValueI32(arg1);\n      if (idx < 0 || idx > maxIdx) {\n        compiler.error(\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n        );\n        return module.unreachable();\n      }\n      return module.simd_extract(op, arg0, idx);\n    }\n    case BuiltinSymbols.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: SIMDReplaceOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8:  { op = SIMDReplaceOp.ReplaceLaneVecI8x16; break; }\n        case TypeKind.I16:\n        case TypeKind.U16: { op = SIMDReplaceOp.ReplaceLaneVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = SIMDReplaceOp.ReplaceLaneVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = SIMDReplaceOp.ReplaceLaneVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? SIMDReplaceOp.ReplaceLaneVecI64x2\n            : SIMDReplaceOp.ReplaceLaneVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = SIMDReplaceOp.ReplaceLaneVecF32x4; break; }\n        case TypeKind.F64: { op = SIMDReplaceOp.ReplaceLaneVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, ContextualFlags.IMPLICIT);\n      if (getExpressionId(arg1) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(arg1) == NativeType.I32);\n      let maxIdx = (16 / type.byteSize) - 1;\n      let idx = getConstValueI32(arg1);\n      if (idx < 0 || idx > maxIdx) {\n        compiler.error(\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n        );\n        return module.unreachable();\n      }\n      let arg2 = compiler.compileExpression(operands[2], type, ContextualFlags.IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.simd_replace(op, arg0, idx, arg2);\n    }\n    case BuiltinSymbols.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let laneWidth = type.byteSize;\n      let laneCount = 16 / laneWidth;\n      assert(isInteger(laneCount) && isPowerOf2(laneCount));\n      if (\n        checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.F32:\n        case TypeKind.F64: break;\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ContextualFlags.IMPLICIT);\n      let mask = new Uint8Array(16);\n      let maxIdx = (laneCount << 1) - 1;\n      for (let i = 0; i < laneCount; ++i) {\n        let operand = operands[2 + i];\n        let argN = compiler.precomputeExpression(operand, Type.u8, ContextualFlags.IMPLICIT);\n        if (getExpressionId(argN) != ExpressionId.Const) {\n          compiler.error(\n            DiagnosticCode.Expression_must_be_a_compile_time_constant,\n            operand.range\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n        assert(getExpressionType(argN) == NativeType.I32);\n        let idx = getConstValueI32(argN);\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operand.range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n        switch (laneWidth) {\n          case 1: {\n            writeI8(idx, mask, i);\n            break;\n          }\n          case 2: {\n            let off8 = i << 1;\n            let idx8 = idx << 1;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            break;\n          }\n          case 4: {\n            let off8 = i << 2;\n            let idx8 = idx << 2;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            writeI8(idx8 + 2, mask, off8 + 2);\n            writeI8(idx8 + 3, mask, off8 + 3);\n            break;\n          }\n          case 8: {\n            let off8 = i << 3;\n            let idx8 = idx << 3;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            writeI8(idx8 + 2, mask, off8 + 2);\n            writeI8(idx8 + 3, mask, off8 + 3);\n            writeI8(idx8 + 4, mask, off8 + 4);\n            writeI8(idx8 + 5, mask, off8 + 5);\n            writeI8(idx8 + 6, mask, off8 + 6);\n            writeI8(idx8 + 7, mask, off8 + 7);\n            break;\n          }\n          default: assert(false);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.simd_shuffle(arg0, arg1, mask);\n    }\n    case BuiltinSymbols.v128_add: // any_binary<T!>(a: v128, b: v128) -> v128\n    case BuiltinSymbols.v128_sub:\n    case BuiltinSymbols.v128_mul:\n    case BuiltinSymbols.v128_div:\n    case BuiltinSymbols.v128_add_saturate:\n    case BuiltinSymbols.v128_sub_saturate:\n    case BuiltinSymbols.v128_min:\n    case BuiltinSymbols.v128_max:\n    case BuiltinSymbols.v128_eq:\n    case BuiltinSymbols.v128_ne:\n    case BuiltinSymbols.v128_lt:\n    case BuiltinSymbols.v128_le:\n    case BuiltinSymbols.v128_gt:\n    case BuiltinSymbols.v128_ge: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: BinaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_add: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.AddVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.AddVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.AddVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = BinaryOp.AddVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? BinaryOp.AddVecI64x2\n                : BinaryOp.AddVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = BinaryOp.AddVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.AddVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sub: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.SubVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.SubVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.SubVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = BinaryOp.SubVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? BinaryOp.SubVecI64x2\n                : BinaryOp.SubVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = BinaryOp.SubVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.SubVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_mul: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.MulVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.MulVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.MulVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.MulVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MulVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.MulVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_div: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.DivVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.DivVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_add_saturate: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.AddSatSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.AddSatUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.AddSatSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.AddSatUVecI16x8; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sub_saturate: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.SubSatSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.SubSatUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.SubSatSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.SubSatUVecI16x8; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_min: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.MinVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MinVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_max: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.MaxVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MaxVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_eq: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.EqVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.EqVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.EqVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.EqVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.EqVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.EqVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_ne: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.NeVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.NeVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.NeVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.NeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.NeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.NeVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_lt: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.LtSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.LtUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.LtSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.LtUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.LtSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.LtUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.LtVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.LtVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.LtSVecI32x4\n                  : BinaryOp.LtUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_le: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.LeSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.LeUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.LeSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.LeUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.LeSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.LeUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.LeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.LeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.LeSVecI32x4\n                  : BinaryOp.LeUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_gt: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.GtSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.GtUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.GtSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.GtUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.GtSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.GtUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.GtVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.GtVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.GtSVecI32x4\n                  : BinaryOp.GtUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_ge: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.GeSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.GeUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.GeSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.GeUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.GeSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.GeUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.GeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.GeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.GeSVecI32x4\n                  : BinaryOp.GeUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ContextualFlags.IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.binary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_neg: // any_unary<T!>(a: v128) -> v128\n    case BuiltinSymbols.v128_abs:\n    case BuiltinSymbols.v128_sqrt:\n    case BuiltinSymbols.v128_convert:\n    case BuiltinSymbols.v128_trunc: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_neg: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.NegVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.NegVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.NegVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.NegVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.NegVecI64x2\n                : UnaryOp.NegVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = UnaryOp.NegVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.NegVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_abs: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = UnaryOp.AbsVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.AbsVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sqrt: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = UnaryOp.SqrtVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.SqrtVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_convert: {\n          switch (type.kind) {\n            case TypeKind.I32: { op = UnaryOp.ConvertSVecI32x4ToVecF32x4; break; }\n            case TypeKind.U32: { op = UnaryOp.ConvertUVecI32x4ToVecF32x4; break; }\n            case TypeKind.I64: { op = UnaryOp.ConvertSVecI64x2ToVecF64x2; break; }\n            case TypeKind.U64: { op = UnaryOp.ConvertUVecI64x2ToVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_trunc: {\n          switch (type.kind) {\n            case TypeKind.I32: { op = UnaryOp.TruncSatSVecF32x4ToVecI32x4; break; }\n            case TypeKind.U32: { op = UnaryOp.TruncSatUVecF32x4ToVecI32x4; break; }\n            case TypeKind.I64: { op = UnaryOp.TruncSatSVecF64x2ToVecI64x2; break; }\n            case TypeKind.U64: { op = UnaryOp.TruncSatUVecF64x2ToVecI64x2; break; }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.v128_shl: // any_shift<T!>(a: v128, b: i32) -> v128\n    case BuiltinSymbols.v128_shr: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: SIMDShiftOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_shl: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = SIMDShiftOp.ShlVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = SIMDShiftOp.ShlVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = SIMDShiftOp.ShlVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = SIMDShiftOp.ShlVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShlVecI64x2\n                : SIMDShiftOp.ShlVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_shr: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = SIMDShiftOp.ShrSVecI8x16; break; }\n            case TypeKind.U8:  { op = SIMDShiftOp.ShrUVecI8x16; break; }\n            case TypeKind.I16: { op = SIMDShiftOp.ShrSVecI16x8; break; }\n            case TypeKind.U16: { op = SIMDShiftOp.ShrUVecI16x8; break; }\n            case TypeKind.I32: { op = SIMDShiftOp.ShrSVecI32x4; break; }\n            case TypeKind.U32: { op = SIMDShiftOp.ShrUVecI32x4; break; }\n            case TypeKind.I64: { op = SIMDShiftOp.ShrSVecI64x2; break; }\n            case TypeKind.U64: { op = SIMDShiftOp.ShrUVecI64x2; break; }\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShrSVecI64x2\n                : SIMDShiftOp.ShrSVecI32x4;\n              break;\n            }\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShrUVecI64x2\n                : SIMDShiftOp.ShrUVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, ContextualFlags.IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.simd_shift(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_and: // any_bitwise_binary(a: v128, b: v128) -> v128\n    case BuiltinSymbols.v128_or:\n    case BuiltinSymbols.v128_xor: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: BinaryOp = -1;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.v128_and: { op = BinaryOp.AndVec128; break; }\n        case BuiltinSymbols.v128_or:  { op = BinaryOp.OrVec128; break; }\n        case BuiltinSymbols.v128_xor: { op = BinaryOp.XorVec128; break; }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ContextualFlags.IMPLICIT);\n      return module.binary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_not: { // any_bitwise_unary(a: v128) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\n      return module.unary(UnaryOp.NotVec128, arg0);\n    }\n    case BuiltinSymbols.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ContextualFlags.IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, ContextualFlags.IMPLICIT);\n      return module.simd_bitselect(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.v128_any_true: // any_test<T!>(a: v128) -> bool\n    case BuiltinSymbols.v128_all_true: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.v128_any_true: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.AnyTrueVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.AnyTrueVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.AnyTrueVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.AnyTrueVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.AnyTrueVecI64x2\n                : UnaryOp.AnyTrueVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_all_true: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.AllTrueVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.AllTrueVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.AllTrueVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.AllTrueVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.AllTrueVecI64x2\n                : UnaryOp.AllTrueVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\n      compiler.currentType = Type.bool;\n      return module.unary(op, arg0);\n    }\n\n    // === Internal runtime =======================================================================\n\n    case BuiltinSymbols.idof: {\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.u32;\n      if (!type) return module.unreachable();\n      let classReference = type.classReference;\n      if (!classReference || classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.unreachable();\n      }\n      return module.i32(classReference.id);\n    }\n    case BuiltinSymbols.visit_globals: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler) // cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.u32, ContextualFlags.IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_globals, [ arg0 ], NativeType.None);\n    }\n    case BuiltinSymbols.visit_members: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler) // ref, cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, ContextualFlags.IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u32, ContextualFlags.IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_members, [ arg0, arg1 ], NativeType.None);\n    }\n  }\n\n  // try to defer inline asm to a concrete built-in\n  {\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\n    if (expr) {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      return expr;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Cannot_find_name_0,\n    reportNode.expression.range, prototype.internalName\n  );\n  return module.unreachable();\n}\n\n/** Tries to defer an inline-assembler-like call to a built-in function. */\nfunction tryDeferASM(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  reportNode: CallExpression\n): ExpressionRef {\n  /* tslint:disable:max-line-length */\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\n  }\n  if (compiler.options.hasFeature(Feature.THREADS)) {\n    switch (prototype.internalName) {\n\n      case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\n    }\n  }\n  if (compiler.options.hasFeature(Feature.SIMD)) {\n    switch (prototype.internalName) {\n\n      case BuiltinSymbols.v128_load: return deferASM(BuiltinSymbols.load, compiler, Type.v128, operands, Type.v128, reportNode);\n      case BuiltinSymbols.v128_store: return deferASM(BuiltinSymbols.store, compiler, Type.v128, operands, Type.void, reportNode);\n\n      case BuiltinSymbols.i8x16_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\n      case BuiltinSymbols.i8x16_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\n      case BuiltinSymbols.i8x16_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i8x16_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i8x16_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i16x8_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\n      case BuiltinSymbols.i16x8_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\n      case BuiltinSymbols.i16x8_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i16x8_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i16x8_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_trunc_s_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_trunc_u_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u32, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64x2_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64x2_trunc_s_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_trunc_u_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u64, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.f32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\n      case BuiltinSymbols.f32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_convert_s_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_convert_u_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.f64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\n      case BuiltinSymbols.f64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_convert_s_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_convert_u_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.v8x16_shuffle: return deferASM(BuiltinSymbols.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\n    }\n  }\n  /* tslint:enable:max-line-length */\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: CallExpression\n): ExpressionRef {\n  assert(compiler.program.elementsByName.has(name));\n  var prototype = compiler.program.elementsByName.get(name)!;\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(\n    compiler,\n    <FunctionPrototype>prototype,\n    [ typeArgument ],\n    operands,\n    contextualType,\n    reportNode,\n    /* isAsm */ true\n  );\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringInstance = compiler.program.stringInstance;\n  if (!stringInstance) return module.unreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.unreachable();\n\n  var messageArg: ExpressionRef;\n  if (message !== null) {\n    // The message argument works much like an arm of an IF that does not become executed if the\n    // assertion succeeds respectively is only being computed if the program actually crashes.\n    // Hence, let's make it so that the autorelease is skipped at the end of the current block,\n    // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\n    messageArg = compiler.compileExpression(message, stringInstance.type, ContextualFlags.IMPLICIT | ContextualFlags.SKIP_AUTORELEASE);\n  } else {\n    messageArg = stringInstance.type.toNativeZero(module);\n  }\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.block(null, [\n    module.call(\n      abortInstance.internalName, [\n        messageArg,\n        filenameArg,\n        module.i32(reportNode.range.line),\n        module.i32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.unreachable()\n  ]);\n}\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var typeRef = compiler.ensureFunctionType([ Type.u32 ], Type.void); // cookie\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  compiler.compileFunction(visitInstance);\n\n  for (let element of compiler.program.elementsByName.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let classReference = global.type.classReference;\n    if (\n      global.is(CommonFlags.COMPILED) &&\n      classReference !== null &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value))\n            ], NativeType.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, nativeSizeType)\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, nativeSizeType), // tempRef != null\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinSymbols.visit_globals, typeRef, [ nativeSizeType ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Compiles the `visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var nativeSizeSize = usizeType.byteSize;\n  var ftype = compiler.ensureFunctionType([ usizeType, Type.i32 ], Type.void); // ref, cookie\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  var blocks = new Array<RelooperBlockRef>();\n  var relooper = Relooper.create(module);\n\n  var outer = relooper.addBlockWithSwitch(\n    module.nop(),\n    module.load(nativeSizeSize, false,\n      nativeSizeType == NativeType.I64\n        ? module.binary(BinaryOp.SubI64,\n            module.local_get(0, nativeSizeType),\n            module.i64(8)\n          )\n        : module.binary(BinaryOp.SubI32,\n            module.local_get(0, nativeSizeType),\n            module.i32(8) // rtId is at -8\n          ),\n      NativeType.I32,\n      0\n    )\n  );\n\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(instance.type.isManaged);\n    assert(id == lastId++);\n\n    let visitImpl: Element | null;\n\n    // if a library element, check if it implements a custom traversal function\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\"))) {\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\n      let block: RelooperBlockRef;\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\n        block = relooper.addBlock(\n          module.unreachable()\n        );\n      } else {\n        let visitSig = visitFunc.signature;\n        assert(\n          visitSig.parameterTypes.length == 1 &&\n          visitSig.parameterTypes[0] == Type.u32 &&\n          visitSig.returnType == Type.void &&\n          visitSig.thisType == instance.type\n        );\n        let callExpr = module.call(visitFunc.internalName, [\n          module.local_get(0, nativeSizeType), // ref\n          module.local_get(1, NativeType.I32)  // cookie\n        ], NativeType.None);\n        block = relooper.addBlock(\n          instance.base\n            ? callExpr // branch will be added later\n            : module.block(null, [\n                callExpr,\n                module.return()\n              ])\n        );\n      }\n      relooper.addBranchForSwitch(outer, block, [ id ]);\n      blocks.push(block);\n\n    // otherwise generate one\n    } else {\n      // traverse references assigned to own fields\n      let code = new Array<ExpressionRef>();\n      let members = instance.members;\n      if (members) {\n        for (let member of members.values()) {\n          if (member.kind == ElementKind.FIELD) {\n            if ((<Field>member).parent === instance) {\n              let fieldType = (<Field>member).type;\n              if (fieldType.isManaged) {\n                let fieldOffset = (<Field>member).memoryOffset;\n                assert(fieldOffset >= 0);\n                code.push(\n                  // if ($2 = value) FIELDCLASS~traverse($2)\n                  module.if(\n                    module.local_tee(2,\n                      module.load(nativeSizeSize, false,\n                        module.local_get(0, nativeSizeType),\n                        nativeSizeType, fieldOffset\n                      )\n                    ),\n                    module.call(visitInstance.internalName, [\n                      module.local_get(2, nativeSizeType), // ref\n                      module.local_get(1, NativeType.I32)  // cookie\n                    ], NativeType.None)\n                  )\n                );\n              }\n            }\n          }\n        }\n      }\n      if (!instance.base) code.push(module.return());\n      let block = relooper.addBlock(\n        flatten(module, code, NativeType.None)\n      );\n      relooper.addBranchForSwitch(outer, block, [ id ]);\n      blocks.push(block);\n    }\n  }\n  for (let [id, instance] of managedClasses) {\n    let base = instance.base;\n    if (base) {\n      relooper.addBranch(blocks[id], blocks[base.id]);\n    }\n  }\n  blocks.push(\n    relooper.addBlock(\n      module.unreachable()\n    )\n  );\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\n  compiler.compileFunction(visitInstance);\n  module.addFunction(BuiltinSymbols.visit_members, ftype, [ nativeSizeType ], relooper.renderAndDispose(outer, 2));\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(id == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      if (instance.extends(arrayPrototype)) flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: CallExpression\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments) {\n      if (typeArguments.length == 1) {\n        compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT);\n      } else {\n        if (typeArguments.length) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n          );\n          return null;\n        }\n        compiler.compileExpressionRetainType(operands[0], Type.i32);\n      }\n    } else {\n      compiler.compileExpressionRetainType(operands[0], Type.i32);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, ContextualFlags.IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, ContextualFlags.IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  prototype: FunctionPrototype\n): i32 {\n  if (typeArguments) {\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(\n  operands: Expression[],\n  expected: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  if (operands.length != expected) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(\n  operands: Expression[],\n  expectedMinimum: i32,\n  expectedMaximum: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getLocalGetIndex,\n  getLocalSetIndex,\n  getLocalSetValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.LocalGet: {\n        this.push(\"$\");\n        this.push(getLocalGetIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.LocalSet: {\n        this.push(\"$\");\n        this.push(getLocalSetIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getLocalSetValue(expr));\n        return;\n      }\n      case ExpressionId.GlobalGet:\n      case ExpressionId.GlobalSet: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.MemorySize: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.MemoryGrow: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicNotify:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.V128: return \"v128\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\n import {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.isEntry) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var members = file.exports;\n    if (members) {\n      for (let [name, member] of members) this.visitElement(name, member);\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) this.visitFile(exportStar);\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (seen.has(element)) {\n      this.visitAlias(name, element, <string>seen.get(element));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(name, <Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        this.visitPropertyInstances(name, <PropertyPrototype>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterInstance;\n        if (getter) this.visitFunction(name, getter);\n        let setter = prop.setterInstance;\n        if (setter) this.visitFunction(name, setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, <Function>instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, <Class>instance);\n      }\n    }\n  }\n\n  private visitPropertyInstances(name: string, element: PropertyPrototype): void {\n    // var instances = element.instances;\n    // if (instances) {\n    //   for (let instance of instances.values()) {\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\n    //   }\n    // }\n    assert(false);\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n  private unknown: Set<string> = new Set();\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(name, element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(name); // 'get:funcName' internally\n      sb.push(\"(): \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\n      sb.push(name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"export class \");\n    }\n    sb.push(name);\n    // var base = element.base;\n    // if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n    //   sb.push(\" extends \");\n    //   sb.push(base.name); // TODO: fqn\n    // }\n    sb.push(\" {\\n\");\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      for (let member of staticMembers.values()) this.visitElement(member.name, member);\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      for (let member of instanceMembers.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\" = typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  CommonTypeNode,\n  TypeNode,\n  SignatureNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureDeclaration,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.ENTRY\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n          ? SourceKind.LIBRARY\n          : SourceKind.DEFAULT\n    );\n    var program = this.program;\n    program.sources.push(source);\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) statements.push(statement);\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    var defaultStart: i32 = 0;\n    var defaultEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift() : null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    // this.backlog = [];\n    // this.seenlog.clear();\n    // this.donelog.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): CommonTypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: CommonTypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseSignature(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n      let current = first;\n      let parameters: TypeNode[] | null = null;\n      let nullable = false;\n\n      // Identifier ('.' Identifier)+\n      while (tn.skip(Token.DOT)) {\n        if (tn.skip(Token.IDENTIFIER)) {\n          let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n          current.next = next;\n          current = next;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range(tn.pos)\n          );\n          return null;\n        }\n      }\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [<TypeNode>parameter];\n          else parameters.push(<TypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(first, parameters || [], nullable, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function signature, as used in type declarations. */\n  tryParseSignature(\n    tn: Tokenizer\n  ): SignatureNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: TypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.TYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <TypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: CommonTypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createSignature(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range);\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    var seenOptional = false;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      if (!typeParameters) typeParameters = [ typeParameter ];\n      else typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!(typeParameters && typeParameters.length)) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: TypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <TypeNode>t;\n      }\n      let defaultType: TypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <TypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: TypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: CommonTypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.TYPE) {\n          this.parseParametersThis = <TypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: CommonTypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: CommonTypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      CommonFlags.NONE,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: TypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.TYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <TypeNode>t;\n    }\n\n    var implementsTypes: TypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [<TypeNode>type];\n          else implementsTypes.push(<TypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = [<DecoratorNode>decorator];\n        else decorators.push(<DecoratorNode>decorator);\n      } while (tn.skip(Token.AT));\n      if (decorators && isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.skip(Token.READONLY)) {\n      flags |= CommonFlags.READONLY;\n      readonlyStart = tn.tokenPos;\n      readonlyEnd = tn.pos;\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\n        if (!retIndex) return null;\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier()) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createSignature(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: CommonTypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[] | null): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators && decorators.length) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.TYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              return Node.createIndexSignatureDeclaration(<TypeNode>keyType, valueType, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.backlog.push(internalPath);\n            this.seenlog.add(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          tn.range()\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.NONE) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    var expr: Expression | null = null;\n    switch (token) {\n\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                ParameterKind.DEFAULT,\n                identifier.range\n              )\n            ],\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return identifier;\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): CommonTypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments: CommonTypeNode[] | null = null;\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      if (!typeArguments) typeArguments = [ type ];\n      else typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\n\n    var startPos = expr.range.start;\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (tn.skipIdentifier()) {\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            } else {\n              next = this.parseExpression(tn,\n                isRightAssociative(token)\n                  ? nextPrecedence\n                  : nextPrecedence + 1\n              );\n              if (!next) return null;\n            }\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            next = this.parseExpression(tn,\n              isRightAssociative(token)\n                ? nextPrecedence\n                : nextPrecedence + 1\n            );\n            if (!next) return null;\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression\n  ): Expression {\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: CommonTypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) break;\n        expr = Node.createCallExpression( // is again callable\n          expr,\n          typeArguments,\n          args,\n          tn.range(expr.range.start, tn.pos)\n        );\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\n/// <reference path=\"./node.d.ts\" />\n\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\nimport \"../../../std/portable/index\";\nimport \"./float\";\nimport \"./i64\";\n\nimport { Module } from \"../../module\";\n\nModule.prototype.toText = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitStackIR();\n};\n\nModule.prototype.toAsmjs = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\nglobal.binaryen = binaryen;\n\nfor (var key in binaryen) {\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\n}\n\n// Utilize Binaryen's heap\n\nglobal.__memory_allocate = binaryen._malloc;\nglobal.__memory_free = binaryen._free;\nglobal.__memory_copy = binaryen._memmove;\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__20__;","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 2; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\n  return parseInt(str, undefined) | 0;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n}\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nArray.create = function(capacity) {\n  var arr = new Array(capacity);\n  arr.length = 0;\n  return arr;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  signbit: {\n    value: function signbit(x) {\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n    }\n  },\n  sincos: {\n    value: function sincos(x) {\n      this.sincos_sin = Math.sin(x);\n      this.sincos_cos = Math.cos(x);\n    }\n  }\n});\n\nglobalScope[\"memory\"] = (() => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n  return {\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\n      if (!(size >>>= 0)) return 0;\n      if (HEAP_OFFSET + size > HEAP.length) {\n        var oldHeap = HEAP;\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n        HEAP.set(oldHeap);\n      }\n      var ptr = HEAP_OFFSET;\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n      return ptr;\n    },\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\n      HEAP.fill(value, dest, dest + size);\n    },\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\n      HEAP.copyWithin(dest, src, src + size);\n    },\n    reset: globalScope[\"__memory_reset\"] || function reset() {\n      HEAP = new Uint8Array(0);\n      HEAP_OFFSET = 0;\n    }\n  };\n})();\n\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\n  HEAP[(ptr | 0) + (offset | 0)] = value;\n};\n\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\n  return HEAP[(ptr | 0) + (offset | 0)];\n};\n\nglobalScope[\"unmanaged\"] = function() {};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBAL = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 2, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 3, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 4 // see: https://github.com/WebAssembly/threads\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64,\n  /** Portable. */\n  JS\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags;\n  /** Base class id or `0` if none. */\n  base: u32;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `Set`. */\n  SET = 1 << 2,\n  /** Type is a `Map`. */\n  MAP = 1 << 3,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 4,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 5,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 6,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 7,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 8,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 9,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 10,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 11,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 12,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 13,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 14,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 15,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 16,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 17,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 18,\n  /** Value is a signed type. */\n  KEY_SIGNED = 1 << 19,\n  /** Value is a float type. */\n  KEY_FLOAT = 1 << 20,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 21,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 22\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { Decompiler } from \"./decompiler\";\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Parser } from \"./parser\";\nimport { Program } from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(name, alias);\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Builds a JSON file of a program's runtime type information. */\nexport function buildRTTI(program: Program): string {\n  var sb = new Array<string>();\n  sb.push(\"{\\n  \\\"names\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \\\"\");\n    sb.push(cls.internalName);\n    sb.push(\"\\\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"base\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    let base = cls.base;\n    sb.push(\"    \");\n    sb.push(base ? base.id.toString() : \"0\");\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"flags\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \");\n    sb.push(cls.rttiFlags.toString());\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ]\\n}\\n\");\n  return sb.join(\"\");\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n\n// Full API\nexport * from \"./ast\";\n// export * from \"./binary\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./decompiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnosticMessages.generated\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nexport * from \"./util\";\n","/** @module util *//***/\n\n/** Tests if the bit at the specified index is set within a 64-bit map. */\nexport function bitsetIs(map: I64, index: i32): bool {\n  assert(index >= 0 && index < 64);\n  return i64_ne(\n    i64_and(\n      map,\n      i64_shl(\n        i64_one,\n        i64_new(index)\n      )\n    ),\n    i64_zero\n  );\n}\n\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\n  assert(index >= 0 && index < 64);\n  return isSet\n    ? i64_or(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      )\n    : i64_and(\n        map,\n        i64_not(\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      );\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let cloned = new Array<V>(original.length);\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    for (let v of original) cloned.add(v);\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    for (let [k, v] of original) cloned.set(k, v);\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\n  } else if (overrides) {\n    for (let [k, v] of overrides) cloned.set(k, v);\n  }\n  return cloned;\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n"],"sourceRoot":""}