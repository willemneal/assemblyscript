{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/glue/binaryen.js","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__21__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","anyref","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","indexof","valueof","returnof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_MUTABLE_GLOBALS","ASC_FEATURE_NONTRAPPING_F2I","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","ASC_FEATURE_EXCEPTION_HANDLING","ASC_FEATURE_TAIL_CALLS","ASC_FEATURE_REFERENCE_TYPES","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","Anyref","String","Array","FixedArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","Error","abort","pow","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocArray","Feature","featureToString","Target","Typeinfo","TypeinfoFlags","x","DiagnosticCategory","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","showContext","diagnostics","withRange","emitDiagnostic","Token","Range","NodeKind","DecoratorKind","LiteralKind","SourceKind","kind","LITERAL","NULL","TRUE","FALSE","Node","typeName","TypeName","identifier","next","createTypeName","createIdentifierExpression","typeArguments","isNullable","type","NamedTypeNode","parameters","returnType","explicitThisType","FunctionTypeNode","createNamedType","createSimpleTypeName","extendsType","defaultType","elem","TypeParameterNode","initializer","ParameterNode","parameterKind","args","stmt","DecoratorNode","arguments","decoratorKind","fromNode","node","CommentNode","commentKind","isQuoted","expr","IdentifierExpression","symbol","elements","ArrayLiteralExpression","elementExpressions","assertionKind","expression","toType","AssertionExpression","operator","left","right","BinaryExpression","typeArgs","CallExpression","declaration","ClassExpression","expressions","CommaExpression","ConstructorExpression","element","ElementAccessExpression","elementExpression","FalseExpression","FloatLiteralExpression","FunctionExpression","isType","InstanceOfExpression","IntegerLiteralExpression","NewExpression","NullExpression","names","values","ObjectLiteralExpression","ParenthesizedExpression","PropertyAccessExpression","pattern","flags","RegexpLiteralExpression","patternFlags","condition","ifThen","ifElse","TernaryExpression","StringLiteralExpression","SuperExpression","ThisExpression","TrueExpression","operand","UnaryPostfixExpression","UnaryPrefixExpression","statements","BlockStatement","label","BreakStatement","typeParameters","implementsTypes","members","decorators","ClassDeclaration","ContinueStatement","statement","DoStatement","EmptyStatement","EnumDeclaration","EnumValueDeclaration","path","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","internalPath","mangleInternalPath","ExportDefaultStatement","externalName","ExportImportStatement","ExportMember","localName","exportedName","ExpressionStatement","ifTrue","ifFalse","IfStatement","decls","ImportStatement","declarations","namespaceName","foreignName","ImportDeclaration","InterfaceDeclaration","FieldDeclaration","incrementor","ForStatement","signature","body","arrowKind","FunctionDeclaration","keyType","valueType","IndexSignatureDeclaration","MethodDeclaration","NamespaceDeclaration","ReturnStatement","cases","SwitchStatement","SwitchCase","ThrowStatement","catchVariable","catchStatements","finallyStatements","TryStatement","alias","TypeDeclaration","VariableStatement","VariableDeclaration","VoidStatement","WhileStatement","TypeNode","typeParameterNodes","NAMEDTYPE","typeArgumentNodes","k","hasGenericComponent","FUNCTIONTYPE","parameterNodes","TYPENAME","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","NONE","flag","nameNode","IDENTIFIER","nameStr","BUILTIN","EXTERNAL","GLOBAL","INLINE","LAZY","OPERATOR","SEALED","UNMANAGED","UNSAFE","PROPERTYACCESS","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","literalKind","FLOAT","INTEGER","LiteralExpression","ARRAY","AssertionKind","ASSERTION","BINARY","CALL","numTypeArguments","numArguments","CLASS","COMMA","CONSTRUCTOR","ELEMENTACCESS","FUNCTION","INSTANCEOF","NEW","OBJECT","PARENTHESIZED","REGEXP","TERNARY","STRING","SUPER","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","Statement","super","SOURCE","parent","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","simplePath","LIBRARY","LIBRARY_ENTRY","DeclarationStatement","INDEXSIGNATUREDECLARATION","VariableLikeDeclarationStatement","BLOCK","BREAK","CLASSDECLARATION","CONTINUE","DO","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPORT","EXPORTDEFAULT","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","ArrowKind","FUNCTIONDECLARATION","createFunctionDeclaration","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","METHODDECLARATION","NAMESPACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VARIABLE","VOID","WHILE","endsWith","decorator","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","OperatorKind","ElementKind","DecoratorFlags","fromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","fromBinaryToken","token","PLUS_EQUALS","MINUS_EQUALS","ASTERISK","ASTERISK_EQUALS","SLASH","SLASH_EQUALS","PERCENT","PERCENT_EQUALS","ASTERISK_ASTERISK","ASTERISK_ASTERISK_EQUALS","AMPERSAND","AMPERSAND_EQUALS","BAR","BAR_EQUALS","CARET","CARET_EQUALS","LESSTHAN_LESSTHAN","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","GREATERTHAN","GREATERTHAN_EQUALS","LESSTHAN","LESSTHAN_EQUALS","fromUnaryPrefixToken","EXCLAMATION","TILDE","PLUS_PLUS","MINUS_MINUS","fromUnaryPostfixToken","Program","DiagnosticEmitter","options","sources","diagnosticsOffset","filesByName","elementsByName","elementsByDeclaration","instancesByName","wrapperClasses","managedClasses","uniqueSignatures","nextClassId","nextSignatureId","nativeDummySignature","nativeSource","Source","nativeFile","File","set","internalName","parser","Parser","resolver","Resolver","buffer","offset","classInstance","payloadSize","writeI32","id","createVariableDeclaration","createTypeDeclaration","createOmittedType","createFunctionType","createNamespaceDeclaration","decoratorFlags","Function","FunctionPrototype","makeNativeFunctionDeclaration","has","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","makeNativeTypeDeclaration","GENERIC","hasFeature","registerConstantInteger","i64_new","isWasm64","WASM64","WASM32","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","file","j","initializeExports","initializeExportDefault","initializeImports","initializeVariables","initializeClass","initializeEnum","initializeFunction","initializeInterface","initializeNamespace","initializeTypeDefinition","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","error","File_0_not_found","queuedImport","lookupForeign","Module_0_has_no_exported_member_1","asImportedNamespace","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","arrayBufferInstance","requireClass","stringInstance","arrayBufferViewInstance","registerWrapperClass","i8ArrayPrototype","CLASS_PROTOTYPE","i16ArrayPrototype","i32ArrayPrototype","i64ArrayPrototype","u8ArrayPrototype","u8ClampedArrayPrototype","u16ArrayPrototype","u32ArrayPrototype","u64ArrayPrototype","f32ArrayPrototype","f64ArrayPrototype","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","Class_0_is_sealed_and_cannot_be_extended","identifierNode","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","A_class_may_only_extend_another_class","globalAliases","firstChar","parseInt","arrayPrototype","fixedArrayPrototype","setPrototype","mapPrototype","abortInstance","lookupFunction","allocInstance","requireFunction","reallocInstance","freeInstance","retainInstance","releaseInstance","collectInstance","typeinfoInstance","instanceofInstance","visitInstance","allocArrayInstance","USER_ENTRY","markModuleExport","resolved","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","MODULE_EXPORT","instanceMembers","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FIELD","setType","className","classReference","classElement","wrappedType","is","global","Global","makeNativeVariableDeclaration","CONST","setConstantIntegerValue","setConstantFloatValue","existing","merged","tryMerge","isDeclaredElement","errorRelated","Duplicate_identifier_0","lookupExport","fileQueuedExports","acceptedFlags","fromKind","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","checkDecorators","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","warning","Not_implemented","memberDeclarations","memberDeclaration","initializeField","isAny","GET","SET","initializeProperty","initializeMethod","AMBIENT","STATIC","INTERFACE_PROTOTYPE","READONLY","ABSTRACT","FieldPrototype","addInstance","isStatic","checkOperatorOverloads","classPrototype","numArgs","firstArg","_0_is_not_a_valid_operator","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","parentMembers","PropertyPrototype","Duplicate_property_0","ensureProperty","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","queued","Export_declaration_conflicts_with_exported_declaration_of_0","initializeImport","validDecorators","INSTANCE","InterfacePrototype","original","Namespace","copyMembers","DECLARE","Element","program","shadowType","FILE","current","originalDeclaration","isBound","declaredElements","typedElements","TypedElement","RESOLVED","startFunction","makeNativeFunction","Signature","isImport","ensureGlobal","includes","makeNativeNamespaceDeclaration","memberName","TYPEDEFINITION","mangleInternalName","lookup","NAMESPACE","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","isImmutable","Local","index","LOCAL","instances","boundPrototypes","bound","instanceKey","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","tempAnyrefs","tempExnrefs","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","locals","sourceMap","debugLocation","setDebugLocation","debugInfoRef","AcyclicState","nextFunctionTarget","FUNCTION_TARGET","FIELD_PROTOTYPE","memoryOffset","firstDeclaration","getterInstance","setterInstance","INDEXSIGNATURE","isUnchecked","lookupOverload","_isInterface","constructorPrototype","extends","basePtototype","Class","base","INTERFACE","currentMemoryOffset","constructorInstance","indexSignature","_id","_acyclic","rttiFlags","asClass","inheritedTypeArguments","baseName","baseType","isBuiltinArray","lengthField","target","unchecked","uncheckedOverload","overload","fieldName","field","baseOffset","writeI8","writeI16","writeF32","writeF64","extendedPrototype","abvInstance","getTypeArgumentsTo","acyclic","hasCycle","cyclesTo","other","except","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","isInstance","asGlobal","NativeType","ExpressionId","binaryen","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeAnyref","_BinaryenTypeExnref","_BinaryenTypeUnreachable","_BinaryenTypeAuto","FeatureFlags","_BinaryenFeatureMVP","_BinaryenFeatureAtomics","_BinaryenFeatureMutableGlobals","_BinaryenFeatureNontrappingFPToInt","_BinaryenFeatureSIMD128","_BinaryenFeatureBulkMemory","_BinaryenFeatureSignExt","_BinaryenFeatureExceptionHandling","_BinaryenFeatureTailCall","_BinaryenFeatureReferenceTypes","_BinaryenFeatureAll","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenLocalGetId","_BinaryenLocalSetId","_BinaryenGlobalGetId","_BinaryenGlobalSetId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicNotifyId","_BinaryenAtomicFenceId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDTernaryId","_BinaryenSIMDShiftId","_BinaryenSIMDLoadId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","_BinaryenTryId","_BinaryenThrowId","_BinaryenRethrowId","_BinaryenBrOnExnId","_BinaryenPushId","_BinaryenPopId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenTruncSatSFloat32ToInt32","_BinaryenTruncSatUFloat32ToInt32","_BinaryenTruncSatSFloat64ToInt32","_BinaryenTruncSatUFloat64ToInt32","_BinaryenTruncSatSFloat32ToInt64","_BinaryenTruncSatUFloat32ToInt64","_BinaryenTruncSatSFloat64ToInt64","_BinaryenTruncSatUFloat64ToInt64","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","_BinaryenWidenLowSVecI8x16ToVecI16x8","_BinaryenWidenLowUVecI8x16ToVecI16x8","_BinaryenWidenHighSVecI8x16ToVecI16x8","_BinaryenWidenHighUVecI8x16ToVecI16x8","_BinaryenWidenLowSVecI16x8ToVecI32x4","_BinaryenWidenLowUVecI16x8ToVecI32x4","_BinaryenWidenHighSVecI16x8ToVecI32x4","_BinaryenWidenHighUVecI16x8ToVecI32x4","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAndNotVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenMinSVecI8x16","_BinaryenMinUVecI8x16","_BinaryenMaxSVecI8x16","_BinaryenMaxUVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenMinSVecI16x8","_BinaryenMinUVecI16x8","_BinaryenMaxSVecI16x8","_BinaryenMaxUVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenMinSVecI32x4","_BinaryenMinUVecI32x4","_BinaryenMaxSVecI32x4","_BinaryenMaxUVecI32x4","_BinaryenDotSVecI16x8ToVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","_BinaryenNarrowSVecI16x8ToVecI8x16","_BinaryenNarrowUVecI16x8ToVecI8x16","_BinaryenNarrowSVecI32x4ToVecI16x8","_BinaryenNarrowUVecI32x4ToVecI16x8","_BinaryenSwizzleVec8x16","HostOp","_BinaryenMemorySize","_BinaryenMemoryGrow","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDExtractOp","_BinaryenExtractLaneSVecI8x16","_BinaryenExtractLaneUVecI8x16","_BinaryenExtractLaneSVecI16x8","_BinaryenExtractLaneUVecI16x8","_BinaryenExtractLaneVecI32x4","_BinaryenExtractLaneVecI64x2","_BinaryenExtractLaneVecF32x4","_BinaryenExtractLaneVecF64x2","SIMDReplaceOp","_BinaryenReplaceLaneVecI8x16","_BinaryenReplaceLaneVecI16x8","_BinaryenReplaceLaneVecI32x4","_BinaryenReplaceLaneVecI64x2","_BinaryenReplaceLaneVecF32x4","_BinaryenReplaceLaneVecF64x2","SIMDShiftOp","_BinaryenShlVecI8x16","_BinaryenShrSVecI8x16","_BinaryenShrUVecI8x16","_BinaryenShlVecI16x8","_BinaryenShrSVecI16x8","_BinaryenShrUVecI16x8","_BinaryenShlVecI32x4","_BinaryenShrSVecI32x4","_BinaryenShrUVecI32x4","_BinaryenShlVecI64x2","_BinaryenShrSVecI64x2","_BinaryenShrUVecI64x2","SIMDTernaryOp","_BinaryenBitselectVec128","_BinaryenQFMAVecF32x4","_BinaryenQFMSVecF32x4","_BinaryenQFMAVecF64x2","_BinaryenQFMSVecF64x2","SIMDLoadOp","_BinaryenLoadSplatVec8x16","_BinaryenLoadSplatVec16x8","_BinaryenLoadSplatVec32x4","_BinaryenLoadSplatVec64x2","_BinaryenLoadExtSVec8x8ToVecI16x8","_BinaryenLoadExtUVec8x8ToVecI16x8","_BinaryenLoadExtSVec16x4ToVecI32x4","_BinaryenLoadExtUVec16x4ToVecI32x4","_BinaryenLoadExtSVec32x2ToVecI64x2","_BinaryenLoadExtUVec32x2ToVecI64x2","MemorySegment","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","_BinaryenModuleCreate","lit","_malloc","_BinaryenSizeofLiteral","cArr","allocU8Array","_BinaryenModuleRead","_free","changetype","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","__i32_store8","_BinaryenLiteralVec128","op","_BinaryenUnary","_BinaryenBinary","operands","cStr","allocStringCached","allocPtrArray","ret","_BinaryenHost","_BinaryenLocalGet","Auto","_BinaryenExpressionGetType","_BinaryenLocalTee","_BinaryenGlobalGet","signed","ptr","align","_BinaryenLoad","None","_BinaryenStore","_BinaryenAtomicLoad","_BinaryenAtomicStore","_BinaryenAtomicRMW","expected","replacement","_BinaryenAtomicCmpxchg","timeout","expectedType","_BinaryenAtomicWait","notifyCount","_BinaryenAtomicNotify","_BinaryenAtomicFence","_BinaryenLocalSet","_BinaryenGlobalSet","children","_BinaryenBlock","_BinaryenBreak","_BinaryenDrop","_BinaryenLoop","_BinaryenIf","_BinaryenNop","_BinaryenReturn","_BinaryenSelect","defaultName","numNames","strs","allocI32Array","_BinaryenSwitch","isReturn","_BinaryenReturnCall","_BinaryenCall","params","results","_BinaryenReturnCallIndirect","_BinaryenCallIndirect","call_indirect","_BinaryenUnreachable","size","_BinaryenMemoryCopy","_BinaryenMemoryFill","catchBody","_BinaryenTry","eventName","_BinaryenThrow","exnref","_BinaryenRethrow","cStr1","cStr2","_BinaryenBrOnExn","_BinaryenPush","_BinaryenPop","vec","idx","_BinaryenSIMDExtract","_BinaryenSIMDReplace","vec1","vec2","mask","_BinaryenSIMDShuffle","a","b","_BinaryenSIMDTernary","shift","_BinaryenSIMDShift","_BinaryenSIMDLoad","mutable","_BinaryenAddGlobal","_BinaryenGetGlobal","_BinaryenRemoveGlobal","attribute","_BinaryenAddEvent","_BinaryenGetEvent","_BinaryenRemoveEvent","varTypes","_BinaryenAddFunction","_BinaryenGetFunction","_BinaryenRemoveFunction","result","paramTypes","tempName","createType","func","_BinaryenSetStart","_BinaryenAddFunctionExport","_BinaryenAddTableExport","_BinaryenAddMemoryExport","_BinaryenAddGlobalExport","_BinaryenAddEventExport","_BinaryenRemoveExport","externalModuleName","externalBaseName","cStr3","_BinaryenAddFunctionImport","_BinaryenAddTableImport","shared","_BinaryenAddMemoryImport","globalType","_BinaryenAddGlobalImport","_BinaryenAddEventImport","initial","maximum","segments","segs","psvs","offs","sizs","i64_low","i64_high","cArr1","cArr2","cArr3","cArr4","_BinaryenSetMemory","funcs","_BinaryenSetFunctionTable","contents","_BinaryenAddCustomSection","_BinaryenGetOptimizeLevel","level","_BinaryenSetOptimizeLevel","_BinaryenGetShrinkLevel","_BinaryenSetShrinkLevel","on","_BinaryenSetDebugInfo","_BinaryenModuleGetFeatures","featureFlags","_BinaryenModuleSetFeatures","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","addTemporaryFunction","_BinaryenFunctionGetBody","_BinaryenExpressionGetId","Return","_BinaryenReturnGetValue","removeTemporaryFunction","_BinaryenModuleValidate","_BinaryenModuleInterpret","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","__i32_load","binaryLen","BinaryModule","output","__i32_load8_u","readBuffer","readString","str","_BinaryenModuleDispose","Relooper","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","cloneExpression","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","_BinaryenModuleAddDebugInfoFileName","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","types","_BinaryenTypeCreate","getExpressionId","UNLIMITED_MEMORY","UNLIMITED_TABLE","arity","_BinaryenTypeArity","_BinaryenTypeExpand","_BinaryenLocalSetGetIndex","_BinaryenLocalSetGetValue","_BinaryenLocalSetIsTee","_BinaryenStoreGetBytes","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","_BinaryenLoopGetName","_BinaryenLoopGetBody","_BinaryenBreakGetName","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","_BinaryenDropGetValue","_BinaryenCallGetTarget","_BinaryenCallGetNumOperands","_BinaryenCallGetOperand","_BinaryenHostGetOp","_BinaryenHostGetNumOperands","_BinaryenHostGetOperand","_BinaryenHostGetNameOperand","_BinaryenFunctionGetName","_BinaryenFunctionGetParams","_BinaryenFunctionGetResults","count","_BinaryenFunctionGetNumVars","_BinaryenFunctionGetVar","_BinaryenGlobalGetName","_BinaryenGlobalGetType","_BinaryenGlobalIsMutable","_BinaryenGlobalGetInit","event","_BinaryenEventGetName","_BinaryenEventGetAttribute","_BinaryenEventGetType","_BinaryenEventGetNumParams","_BinaryenEventGetParam","relooper","_RelooperCreate","_RelooperAddBlock","from","to","_RelooperAddBranch","_RelooperAddBlockWithSwitch","indexes","_RelooperAddBranchForSwitch","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","i32s","val","__i32_store","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","hasSideEffects","Nop","Block","If","Drop","Select","needsExplicitUnreachable","Unreachable","Break","numChildren","data","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","AtomicFence","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDTernary","_BinaryenSIMDTernaryGetA","_BinaryenSIMDTernaryGetB","_BinaryenSIMDTernaryGetC","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","SIMDLoad","_BinaryenSIMDLoadGetPtr","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Try","_BinaryenTryGetBody","_BinaryenTryGetCatchBody","Throw","_BinaryenThrowGetNumOperands","_BinaryenThrowGetOperand","Rethrow","_BinaryenRethrowGetExnref","BrOnExn","_BinaryenBrOnExnGetExnref","Push","_BinaryenPushGetValue","Pop","Host","TypeKind","TypeFlags","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","isize64","isize32","usize64","usize32","auto","clz","targetType","classType","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isAssignableTo","signednessIsImportant","Exnref","typesToNativeTypes","numTypes","toNativeType","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","signatureTypes","compare","equals","numParameterTypes","nativeTypes","FunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPE","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","DOT_DOT_DOT","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skip","state","reusableState","State","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","readHexadecimalEscape","fromCharCode","escaped","Unterminated_regular_expression_literal","Invalid_regular_expression_flags","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readDecimalFloat","parseFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","g","e","window","ReportMode","currentThisExpression","currentElementExpression","ctxElement","ctxTypes","reportMode","REPORT","resolveNamedType","resolveFunctionType","isSimpleType","simpleName","Type_0_is_not_generic","asNullable","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveBuiltinReturnTypeType","resolveTypeArguments","resolveType","typeNode","Cannot_find_name_0","parameterNode","REST","parameterTypeNode","isTypeOmitted","Type_expected","returnTypeNode","Expected_0_type_arguments_but_got_1","typeArgument","Index_signature_is_missing_in_type_0","Type_0_has_no_call_signatures","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","ctxFlow","resolveFunctionInclTypeArguments","actualFunction","numTypeParameters","typeParameterNames","functionTypeNode","argumentNodes","argumentExpression","resolveExpression","SWALLOW","propagateInferredGenericTypes","resolvedTypeArguments","inferredType","Type_argument_expected","atEnd","currentType","ensureResolvedLazyGlobal","isTypedElement","asFunctionTarget","ctxType","lookupAssertionExpression","lookupBinaryExpression","lookupCallExpression","lookupCommaExpression","lookupElementAccessExpression","lookupFunctionExpression","lookupIdentifierExpression","lookupThisExpression","lookupSuperExpression","lookupInstanceOfExpression","lookupLiteralExpression","lookupNewExpression","lookupPropertyAccessExpression","lookupTernaryExpression","lookupUnaryPostfixExpression","lookupUnaryPrefixExpression","resolveAssertionExpression","resolveBinaryExpression","resolveCallExpression","resolveCommaExpression","resolveElementAccessExpression","resolveFunctionExpression","resolveIdentifierExpression","resolveThisExpression","resolveSuperExpression","resolveInstanceOfExpression","resolveLiteralExpression","resolveNewExpression","resolvePropertyAccessExpression","resolveTernaryExpression","resolveUnaryPostfixExpression","resolveUnaryPrefixExpression","getElementOfType","getTypeOfElement","Expression_cannot_be_represented_by_a_type","initializerNode","targetNode","lookupExpression","propertyName","indexedGet","resolvedType","targetExpression","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","NONNULL","Type_0_is_illegal_in_this_context","The_0_operator_cannot_be_applied_to_type_1","operatorTokenToString","determineIntegerLiteralType","i64_sub","i64_zero","intType","leftType","rightType","commonType","commonDenominator","Operator_0_cannot_be_applied_to_types_1_and_2","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","fltType","BuiltinSymbols","maybeInferCall","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","thenType","elseType","This_expression_is_not_constructable","actualParent","typesToString","resolvedInstance","getResolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","signatureParameters","numSignatureParameters","parameterDeclaration","setResolvedInstance","reportNode","baseClass","nameInclTypeParamters","baseMembers","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","fieldInstance","Field","isPowerOf2","boundPrototype","toBound","propertyInstance","Property","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","Type_0_is_not_assignable_to_type_1","IndexSignature","LocalFlags","FlowFlags","ANY_CATEGORICAL","ANY_CONDITIONAL","FieldFlags","scopedLocals","fieldFlags","parentFunction","continueLabel","localFlags","inlineFunction","inlineReturnLabel","branch","slice","temps","unsetLocalFlag","addLocal","pop","getTempLocal","SCOPED","setLocalFlag","RETAINED","scopedLocal","existingLocal","isNative","scopedAlias","freeTempLocal","scope","defaultIfInlined","stack","CONDITIONALLY_RETAINED","READFROM","CONDITIONALLY_READFROM","WRITTENTO","CONDITIONALLY_WRITTENTO","RETURNED","CONDITIONALLY_RETURNED","inheritConditional","leftLocalFlags","numLeftLocalFlags","rightLocalFlags","numRightLocalFlags","combinedFlags","max","numThisLocalFlags","numOtherLocalFlags","min","isLocalFlag","WRAPPED","isAnyLocalFlag","ANY_RETAINED","isLocalTee","getLocalSetIndex","getLocalGetIndex","inheritNonnullIfTrue","getLocalSetValue","getIfFalse","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getIfCondition","getIfTrue","getUnaryOp","EqzI32","EqzI64","inheritNonnullIfFalse","getUnaryValue","getBinaryOp","EqI32","getBinaryLeft","getBinaryRight","EqI64","NeI32","NeI64","getCallTarget","getCallOperand","exprType","canConversionOverflow","canOverflow","getGlobalGetName","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","computeSmallIntegerMask","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","getConstValueF32","getConstValueF64","MIN_VALUE","fromType","isLoadSigned","getLoadBytes","getBlockName","getBlockChildCount","last","getBlockChild","getSelectThen","getSelectElse","instanceName","levels","findUsedLocalsVisit","used","traverse","importMemory","sharedMemory","importTable","exportTable","explicitStart","features","noUnsafe","feature","Constraints","RuntimeFeatures","Compiler","currentInlineFunctions","currentParent","memorySegments","stringSegments","functionTable","argcVar","argcSet","runtimeFeatures","skippedAutoreleases","events","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","SignExt","MutableGloabls","NontrappingFPToInt","BulkMemory","SIMD128","Atomics","ExceptionHandling","TailCall","ReferenceTypes","setFeatures","compile","initialize","startFunctionInstance","startFunctionBody","currentFlow","currentBody","addGlobal","heap_base","rtti_base","files","compileFile","compileExports","startIsEmpty","started","unshift","if","global_get","return","global_set","funcRef","addFunction","nativeParams","nativeResults","block","finalize","addFunctionExport","setStart","compileVisitGlobals","compileVisitMembers","removeGlobal","compileRTTI","i64_align","isSharedMemory","setMemory","i64_shr_u","addMemoryImport","setFunctionTable","addTableImport","addTableExport","ensureModuleExports","ensureModuleExport","prefix","fullName","setter","addGlobalExport","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","ensureModuleFieldGetter","ensureModuleFieldSetter","isUnmanaged","subPrefix","loadExpr","load","local_get","isManaged","makeRetain","nativeType","nativeSizeType","valueExpr","makeReplace","store","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","compileElement","normalizedPathWithoutExtension","pathWithIndex","startSignature","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","initAutoreleaseSkipped","compileExpression","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","addGlobalImport","mangleImportName_moduleName","mangleImportName_elementName","Feature_0_is_not_enabled","initializeInStart","precomputeExpression","fromName","isGlobalMutable","getGlobal","Mutable_value_cannot_be_inlined","makeZero","findDecorator","decoratorNodes","previousParent","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","binary","AddI32","makeGlobalAssignment","compileFunction","stmts","bodyNode","compileStatements","indexBefore","performAutoreleases","nonNull","isNonnull","temp","local_set","unary","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","previousType","An_implementation_cannot_be_declared_in_ambient_contexts","compileFunctionBody","flatten","Function_implementation_is_missing_or_not_immediately_following_the_declaration","addFunctionImport","getFunction","compileClass","staticMembers","alignment","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","writeRuntimeHeader","addMemorySegment","elementType","byteLength","bufferInstance","buf","writeI64","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","writeField","TRAMPOLINE","memberStatements","getElementByDeclaration","compileFileByPath","compileStatement","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","nop","compileVoidStatement","compileWhileStatement","unreachable","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","fork","freeScopedLocals","inherit","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","br","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","pushBreakLabel","condFlow","condExpr","makeIsTrueish","hasScopedLocals","unifyLocalFlags","alwaysFalse","terminates","continues","breaks","fallsThrough","loop","popBreakLabel","unset","alwaysTrue","incrExpr","incrFlow","bodyFlow","loopLabel","bodyStatement","needsLabel","ifTrueStmts","ifTrueFlow","ifFalseFlow","ifFalseStmts","inheritMutual","valueExpression","constraints","numCases","context","tempLocal","tempLocalIndex","breakIndex","defaultIndex","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","newArgs","compileAbort","numDeclarations","initializers","isConst","_const_declarations_must_be_initialized","getScopedLocal","addScopedLocal","CONSTANT","contextualType","computeSmallIntegerShift","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","convertExpression","ensureSmallIntegerWrap","explicit","drop","Object_is_possibly_null","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","inheritedConstraints","PREFIX","exceptVoid","info","Expression_is_never_null","local_tee","leftExpr","rightExpr","compound","compileBinaryOverload","AllTrueI8x16","EqI8x16","AnyTrueI8x16","NeI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","ShlI64","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","delayAutorelease","rightStmts","makeRelease","retainLeftInThen","isStrictlyAssignableTo","makeAssignment","thisExpression","checkUnsafe","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","indexedSet","Index_signature_in_type_0_only_permits_reading","indexExpression","tee","makeLocalAssignment","makeFieldAssignment","makeAutorelease","nativeReturnType","thisExpr","elementExpr","tempTarget","tempElement","alreadyRetained","nativeFieldType","nativeThisType","tempThis","tempValue","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","theCall","compileCallDirect","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","compileCallIndirect","hasThis","The_this_types_of_each_signature_are_incompatible","minimum","Expected_at_least_0_arguments_but_got_1","Operation_is_unsafe","argumentExpressions","thisArg","checkCallSignature","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","createInline","usedLocals","paramExpr","paramType","argumentLocal","findUsedLocals","baseInstance","addScopedAlias","initType","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","switch","argc","Optional_parameter_must_have_an_initializer","setargc","ensureArgcVar","oldExpr","newExpr","temp1","temp2","getAutoreleaseLocal","tryUndoAutorelease","lengthBefore","skipAutorelease","theOperands","numOperands","isCallImport","allOptionalsAreConstant","nodeIsConstantValue","compileInlineConstant","makeCallIndirect","numExpressions","exprs","contextualSignature","clone","numPresentParameters","thisTypeNode","ensureFunctionTableEntry","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","maybeCompileEnclosingSource","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","actualType","implicitlyNegate","compileArrayLiteral","The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","arrayType","tempDataStart","nativeElementType","ensureStaticArrayBuffer","bufferAddress","arraySegment","ensureStaticArrayHeader","arrayAddress","alignLog2","nativeArrayType","dataStart","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","compileInstantiate","baseCtor","allocExpr","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","ifThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","compileUnaryOverload","makeOne","setValue","NegF32","NegF64","makeNegOne","compileTypeof","typeString","ExtendI8ToI32","ExtendI16ToI32","addDebugInfoFile","v128_zero","thisLocalIndex","fieldPrototype","idTemp","idExpr","conditions","single","singleType","toText","wrapModule","emitStackIR","toAsmjs","emitAsmjs","compileCall","compiler","isAsm","isInteger","evaluateConstantType","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","checkTypeAbsent","checkArgsRequired","isConstant","isVoid","lengthof","sizeof","checkTypeRequired","Operation_0_cannot_be_applied_to_type_1","typeArgumentsRange","alignof","ctz","offsetof","checkArgsOptional","Type_0_has_no_property_1","nameof","resultType","checkTypeOptional","ClzI64","CtzI64","popcnt","PopcntI64","rotl","RotlI32","RotlI64","rotr","RotrI32","RotrI64","abs","AbsF32","AbsF64","isNumericLiteral","MaxF32","MaxF64","select","MinF32","MinF64","CeilF32","CeilF64","floor","FloorF32","FloorF64","copysign","CopysignF32","CopysignF64","nearest","NearestF32","NearestF64","reinterpret","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","sqrt","SqrtF32","SqrtF64","trunc","TruncF32","TruncF64","immAlign","outType","immOffset","evaluateImmediateOffset","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","inType","atomic_load","checkFeatureEnabled","atomic_store","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","opName","Add","Sub","And","Or","Xor","Xchg","atomic_rmw","atomic_cmpxchg","atomic_wait","atomic_notify","atomic_fence","memory_size","host","MemorySize","memory_grow","MemoryGrow","memory_copy","memory_fill","isChangeableTo","Type_0_cannot_be_changed_to_type_1","alreadyUnchecked","instantiate","User_defined_0","Expression_must_be_a_compile_time_constant","off","v128_splat","SplatI8x16","SplatI16x8","SplatI32x4","SplatI64x2","SplatF32x4","SplatF64x2","v128_extract_lane","maxIdx","simd_extract","ExtractLaneI8x16","ExtractLaneU8x16","ExtractLaneI16x8","ExtractLaneU16x8","ExtractLaneI32x4","ExtractLaneI64x2","ExtractLaneF32x4","ExtractLaneF64x2","v128_replace_lane","simd_replace","ReplaceLaneI8x16","ReplaceLaneI16x8","ReplaceLaneI32x4","ReplaceLaneI64x2","ReplaceLaneF32x4","ReplaceLaneF64x2","v128_shuffle","laneWidth","laneCount","argN","off8","idx8","simd_shuffle","v128_swizzle","SwizzleV8x16","v128_load_splat","simd_load","LoadSplatV8x16","LoadSplatV16x8","LoadSplatV32x4","LoadSplatV64x2","v128_load_ext","LoadI8ToI16x8","LoadU8ToU16x8","LoadI16ToI32x4","LoadU16ToU32x4","LoadI32ToI64x2","LoadU32ToU64x2","v128_add","AddI8x16","AddI16x8","AddI32x4","AddI64x2","AddF32x4","AddF64x2","v128_sub","SubI8x16","SubI16x8","SubI32x4","SubI64x2","SubF32x4","SubF64x2","v128_mul","MulI8x16","MulI16x8","MulI32x4","MulF32x4","MulF64x2","v128_div","DivF32x4","DivF64x2","v128_add_saturate","AddSatI8x16","AddSatU8x16","AddSatI16x8","AddSatU16x8","v128_sub_saturate","SubSatI8x16","SubSatU8x16","SubSatI16x8","SubSatU16x8","v128_min","MinI8x16","MinU8x16","MinI16x8","MinU16x8","MinI32x4","MinU32x4","MinF32x4","MinF64x2","v128_max","MaxI8x16","MaxU8x16","MaxI16x8","MaxU16x8","MaxI32x4","MaxU32x4","MaxF32x4","MaxF64x2","v128_dot","DotI16x8","v128_eq","EqI16x8","EqI32x4","EqF32x4","EqF64x2","v128_ne","NeI16x8","NeI32x4","NeF32x4","NeF64x2","v128_lt","LtI8x16","LtU8x16","LtI16x8","LtU16x8","LtI32x4","LtU32x4","LtF32x4","LtF64x2","v128_le","LeI8x16","LeU8x16","LeI16x8","LeU16x8","LeI32x4","LeU32x4","LeF32x4","LeF64x2","v128_gt","GtI8x16","GtU8x16","GtI16x8","GtU16x8","GtI32x4","GtU32x4","GtF32x4","GtF64x2","v128_ge","GeI8x16","GeU8x16","GeI16x8","GeU16x8","GeI32x4","GeU32x4","GeF32x4","GeF64x2","v128_narrow","NarrowI16x8ToI8x16","NarrowU16x8ToU8x16","NarrowI32x4ToI16x8","NarrowU32x4ToU16x8","v128_neg","NegI8x16","NegI16x8","NegI32x4","NegI64x2","NegF32x4","NegF64x2","v128_abs","AbsF32x4","AbsF64x2","v128_sqrt","SqrtF32x4","SqrtF64x2","v128_convert","ConvertI32x4ToF32x4","ConvertU32x4ToF32x4","ConvertI64x2ToF64x2","ConvertU64x2ToF64x2","v128_trunc_sat","TruncSatF32x4ToI32x4","TruncSatF32x4ToU32x4","TruncSatF64x2ToI64x2","TruncSatF64x2ToU64x2","v128_widen_low","WidenLowI8x16ToI16x8","WidenLowU8x16ToU16x8","WidenLowI16x8ToI32x4","WidenLowU16x8ToU32x4","v128_widen_high","WidenHighI8x16ToI16x8","WidenHighU8x16ToU16x8","WidenHighI16x8ToI32x4","WidenHighU16x8ToU32x4","v128_shl","simd_shift","ShlI8x16","ShlI16x8","ShlI32x4","ShlI64x2","v128_shr","ShrI8x16","ShrU8x16","ShrI16x8","ShrU16x8","ShrI32x4","ShrU32x4","ShrI64x2","ShrU64x2","v128_and","AndV128","v128_or","OrV128","v128_xor","XorV128","v128_andnot","AndNotV128","v128_not","NotV128","v128_bitselect","simd_ternary","Bitselect","v128_any_true","AnyTrueI16x8","AnyTrueI32x4","AnyTrueI64x2","v128_all_true","AllTrueI16x8","AllTrueI32x4","AllTrueI64x2","v128_qfma","QFMAF32x4","QFMAF64x2","v128_qfms","QFMSF32x4","QFMSF64x2","idof","visit_globals","visit_members","isNaN","isFinite","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_xor_u","i32_atomic_rmw16_xor_u","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_min_s","i8x16_min_u","i8x16_max_s","i8x16_max_u","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i8x16_narrow_i16x8_s","i8x16_narrow_i16x8_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_min_s","i16x8_min_u","i16x8_max_s","i16x8_max_u","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i16x8_narrow_i32x4_s","i16x8_narrow_i32x4_u","i16x8_widen_low_i8x16_s","i16x8_widen_low_i8x16_u","i16x8_widen_high_i8x16_s","i16x8_widen_high_i8x16_u","i16x8_load8x8_s","i16x8_load8x8_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_min_s","i32x4_min_u","i32x4_max_s","i32x4_max_u","i32x4_dot_i16x8_s","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_sat_f32x4_s","i32x4_trunc_sat_f32x4_u","i32x4_widen_low_i16x8_s","i32x4_widen_low_i16x8_u","i32x4_widen_high_i16x8_s","i32x4_widen_high_i16x8_u","i32x4_load16x4_s","i32x4_load16x4_u","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_sat_f64x2_s","i64x2_trunc_sat_f64x2_u","i64x2_load32x2_s","i64x2_load32x2_u","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_i32x4_s","f32x4_convert_i32x4_u","f32x4_qfma","f32x4_qfms","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_i64x2_s","f64x2_convert_i64x2_u","f64x2_qfma","f64x2_qfms","v8x16_shuffle","v8x16_swizzle","v8x16_load_splat","v16x8_load_splat","v32x4_load_splat","v64x2_load_splat","tryDeferASM","messageArg","filenameArg","typeToRuntimeFlags","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","memory_allocate","memory_free","memory_reset","runtime_instanceof","runtime_flags","runtime_allocate","runtime_reallocate","runtime_register","runtime_discard","runtime_makeArray","capabilities","nativeSizeSize","blocks","outer","addBlockWithSwitch","lastId","visitImpl","isDeclaredInLibrary","visitFunc","visitSig","fieldOffset","addBlock","addBranchForSwitch","addBranch","renderAndDispose","abvPrototype","isAcyclic","getArrayValueType","backlog","seenlog","donelog","dependees","tryParseSignatureIsSignature","parseParametersThis","isEntry","indexOf","USER","currentSource","tn","parseTopLevelStatement","finish","startPos","parseDecorator","skipStatement","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","peek","parseEnum","parseVariable","parseFunction","mark","reset","parseStatement","discard","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","skipIdentifier","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","createExportDefaultStatement","dependent","clear","readIdentifier","Identifier_expected","acceptParenthesized","suppressErrors","isNullableSignature","tryParseFunctionType","Unexpected_token","innerType","parseType","parseTypeName","nullable","parameter","bracketStart","bracketRange","isSignature","firstParamNameNoType","firstParamKind","A_rest_parameter_cannot_be_optional","OPTIONAL","param","createPropertyAccessExpression","createDecorator","parseArguments","parseVariableDeclaration","createVariableStatement","parentFlags","parentDecorators","isIllegalVariableIdentifier","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","createEnumDeclaration","createEnumValueDeclaration","createReturnStatement","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","createTypeParameter","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","createParameter","signatureStart","parseTypeParameters","parseParameters","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","createEmptyIdentifierExpression","parseFunctionExpressionCommon","bodyExpression","createExpressionStatement","createFunctionExpression","isInterface","Interface_declaration_cannot_have_implements_clause","createInterfaceDeclaration","createClassDeclaration","parseClassMember","createClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","setEnd","createConstructorExpression","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","createFieldDeclaration","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","createMethodDeclaration","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","createIndexSignatureDeclaration","parseExportMember","createStringLiteralExpression","createExportStatement","asIdentifier","createExportMember","skipFrom","parseImportDeclaration","createImportDeclaration","createImportStatementWithWildcard","createImportStatement","createExportImportStatement","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseReturn","createEmptyStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","createBlockStatement","createBreakStatement","createContinueStatement","createDoStatement","createForStatement","elseStatement","createIfStatement","case_","parseSwitchCase","createSwitchStatement","createSwitchCase","_case_or_default_expected","createThrowStatement","createTryStatement","createVoidStatement","createWhileStatement","createUnaryPrefixExpression","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","arguments_","tryParseTypeArgumentsBeforeArguments","createNewExpression","createNullExpression","createTrueExpression","createFalseExpression","createThisExpression","again","parseFunctionExpression","inner","createParenthesizedExpression","maybeParseCallExpression","createArrayLiteralExpression","createObjectLiteralExpression","createAssertionExpression","identifierText","_super_must_be_followed_by_an_argument_list_or_member_access","createSuperExpression","createIntegerLiteralExpression","readInteger","createFloatLiteralExpression","readFloat","regexpPattern","readRegexpPattern","createRegexpLiteralExpression","readRegexpFlags","parseClassExpression","Expression_expected","precedence","parseExpressionStart","nextPrecedence","determinePrecedence","createInstanceOfExpression","createElementAccessExpression","createUnaryPostfixExpression","createTernaryExpression","commaExprs","createCommaExpression","joinPropertyCall","createBinaryExpression","callee","potentiallyGeneric","createCallExpression","skipBlock","depth","Precedence","Decompiler","functionId","decompiler","decompile","getFunctionName","getFunctionBody","expandType","getFunctionParams","nativeTypeToType","getFunctionResults","decompileExpression","nested","getLoopName","getLoopBody","getBreakCondition","getBreakName","getLoadOffset","getLoadPtr","getStoreOffset","getStorePtr","getStoreValue","i64_to_string","getSelectCondition","getDropValue","getReturnValue","getHostOp","getHostOperand","ExportsWalker","includePrivate","seen","visitFile","visitElement","visitAlias","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","visitNamespace","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","walk","TSDBuilder","unknown","numMembers","globalScope","ASC_FEATURE_MUTABLE_GLOBAL","UnreachableError","captureStackTrace","AssertionError","defaultComparator","nanA","nanB","defineProperties","writable","fround","clz32","round","y","sign","isTrueish","apply","fromCodePoint","replaceAll","search","replacment","res","split","arraySort","sort","comparator","Number","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","unmanaged","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","formatDiagnostic","formatDiagnosticMessage","Options","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBALS","FEATURE_NONTRAPPING_F2I","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","FEATURE_EXCEPTION_HANDLING","FEATURE_TAIL_CALLS","FEATURE_REFERENCE_TYPES","optimizeLevel","shrinkLevel","getSource","parseFile","nextFile","getDependee","cls","map","isSet","CharCode","c0","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","cloned","v","overrides","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","readI32","readI64","valueI64"],"mappings":"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6iD,GACX,KAAK7iD,EAAMsN,YACX,KAAKtN,EAAMilB,QACX,KAAKjlB,EAAMojD,OACX,KAAKpjD,EAAMwjD,KACX,KAAKxjD,EAAMkQ,IACX,KAAKlQ,EAAMwiB,IACX,KAAKxiB,EAAMyN,WACX,KAAKzN,EAAM2jD,GACX,KAAK3jD,EAAM4jD,MACX,KAAK5jD,EAAM8jD,OACX,KAAK9jD,EAAMwmB,UACX,KAAKxmB,EAAMQ,KACX,KAAKR,EAAM+iB,SACX,KAAK/iB,EAAMyiB,IACX,KAAKziB,EAAMokD,KACX,KAAKpkD,EAAMoR,KAAM,OAAO,EACxB,QAAS,OAAO,IA1UpB,SAAYpR,GAKV,2BACA,eACA,qBACA,qBACA,qBACA,mBACA,qBACA,qBACA,qBACA,2BACA,kCACA,4BACA,0BACA,0BACA,wBACA,gBACA,oBACA,oBACA,wBACA,0BACA,sBACA,0BACA,kBACA,oBACA,4BACA,kBACA,gBACA,gCACA,wBACA,gBACA,gCACA,8BACA,gBACA,sBACA,kBACA,wBACA,8BACA,kBACA,oBACA,gBACA,0BACA,0BACA,8BACA,wBACA,4BACA,wBACA,kBACA,wBACA,sBACA,wBACA,oBACA,sBACA,oBACA,kBACA,oBACA,wBACA,kBACA,oBACA,sBACA,oBACA,sBAIA,8BACA,gCACA,8BACA,gCACA,kCACA,oCACA,kBACA,kCACA,8BACA,sBACA,4BACA,kCACA,0CACA,gDACA,sCACA,gDACA,oDACA,8DACA,gDACA,oBACA,sBACA,8CACA,4BACA,sBACA,0BACA,8BACA,kCACA,8CACA,0DACA,kFACA,8BACA,kBACA,sBACA,kCACA,sBACA,kDACA,0BACA,4BACA,sBACA,yBACA,mCACA,qCACA,2CACA,6DACA,qCACA,yCACA,6DACA,yEACA,iGACA,6CACA,iCACA,qCACA,iBAIA,iCACA,uCACA,yCACA,qCAIA,2BACA,+BArIF,CAAYA,EAAA,EAAAA,QAAA,EAAAA,MAAK,KAwIjB,SAAY2iD,GACV,yBACA,uBACA,uBAHF,CAAYA,EAAA,EAAAA,qBAAA,EAAAA,mBAAkB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IR+mB,EAAQxJ,MACN,EAAA7d,eAAeg5E,wCACfvlE,EAAUnT,MAAO,IAAK,MAK5B,IAAIqnE,EACAC,EAGJ,SAAgBwC,EAAQn1E,EAAgBk0E,EAAwB7lE,GAC9D,IAAIjC,EAAS8nE,EAAM9nE,OACnB,GAAc,GAAVA,EAAa,OAAOpM,EAAO+3E,MAC/B,GAAc,GAAV3rE,EAAa,CACf,IAAIm/E,EAASrX,EAAM,GACnB,OAAQ,EAAApxB,gBAAgByoC,IACtB,KAAK,EAAA3wD,aAAawkB,OAClB,KAAK,EAAAxkB,aAAaoxB,MAClB,KAAK,EAAApxB,aAAastB,YAEhB,OAAOqjC,EAGX,IAAIC,EAAa,EAAAvlB,kBAAkBslB,GAEnC,OADA7gF,OAAO8gF,GAAc,EAAA7wD,WAAWutB,aAAesjC,GAAcn9E,GACtDk9E,EAET,OAAOvrF,EAAO4uE,MAAM,KAAMsF,EAAO7lE,GAjBnC,a,8EC/gSA,SAAYtD,GACV,2CACA,mDACA,yCACA,6DACA,uHACA,iMACA,iFACA,2FACA,2EACA,yEACA,2EACA,yIACA,uGACA,6EACA,6DACA,6FACA,uEACA,mDACA,+EACA,mGACA,uHACA,6FACA,2JACA,uFACA,iGACA,qHACA,qGACA,+DACA,iEACA,iGACA,oEACA,oDACA,oCACA,8FACA,kEACA,8CACA,gHACA,oHACA,8HACA,0GACA,8GACA,4EACA,oFACA,oGACA,0GACA,oHACA,wFACA,gFACA,kIACA,kIACA,4FACA,oHACA,oFACA,wKACA,sLACA,kIACA,oDACA,wCACA,oJACA,gDACA,kGACA,wGACA,0CACA,kEACA,0DACA,gDACA,gEACA,sIACA,4IACA,0DACA,4DACA,wEACA,sDACA,4FACA,4FACA,oHACA,wDACA,sDACA,8HACA,oKACA,sFACA,wEACA,sKACA,sJACA,8IACA,wFACA,0IACA,0DACA,kDACA,gFACA,gGACA,wDACA,kFACA,sFACA,0GACA,8GACA,wMACA,oFACA,0NACA,sFACA,0IACA,gMACA,0LACA,wGACA,oIACA,kIACA,wGACA,wFACA,4KACA,sHACA,gFACA,gLACA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,KAAK,wBACR,IAAK,IAAI+oH,KAAOtjG,EAAQhO,eAAerS,SACrCtF,EAAGE,KAAK,QACRF,EAAGE,KAAK+oH,EAAIl9F,UAAU7sB,YACtBc,EAAGE,KAAK,OAGV,OADAF,EAAGE,KAAK,YACDF,EAAGG,KAAK,KAIjB,WAAS,EAAAzJ,eAAA,EAAAA,eAGT,QAEA,QACA,SACA,SACA,SACA,SACA,QACA,SACA,QACA,SACA,QACA,QACA,QACA,QACA,S,8EClPA,oBAAyBwyH,EAAUvhG,GAEjC,OADA1pB,OAAO0pB,GAAS,GAAKA,EAAQ,IACtB24F,OACLd,QACE0J,EACAp/D,QACE00D,QACAnkG,QAAQsN,KAGZ4qC,WAKJ,qBAA0B22D,EAAUvhG,EAAYwhG,GAE9C,OADAlrH,OAAO0pB,GAAS,GAAKA,EAAQ,IACtBwhG,EACHzJ,OACEwJ,EACAp/D,QACE00D,QACAnkG,QAAQsN,KAGZ63F,QACE0J,EACAhJ,QACEp2D,QACE00D,QACAnkG,QAAQsN,Q,8EC9BpB,SAAkByhG,GAEhB,mBACA,4BACA,wCACA,wCACA,kDACA,6BAEA,sBACA,6CACA,0BACA,0BACA,4BACA,4BACA,4CACA,0CACA,wCACA,oCACA,8CACA,gCACA,gCACA,0CACA,kDACA,+CACA,gDACA,wBAEA,cAEA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBAEA,cACA,cACA,cACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,eAEA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cAEA,8BACA,4BACA,gBACA,8BACA,4BACA,mBACA,sBACA,iCACA,oCACA,gCACA,sBACA,sBACA,wBACA,kBACA,kCACA,wBACA,kCACA,kCACA,oBACA,4BACA,sBACA,+BACA,kCACA,8BACA,0BACA,oBACA,4BACA,8BACA,kCACA,sBACA,uBAEA,6BACA,4BACA,yCACA,iBACA,kCAnIF,CAAkB,EAAAA,WAAA,EAAAA,SAAQ,KAuI1B,uBAA4B90H,GAC1B,OAAQA,GACN,KAAK,GACL,KAAK,GACL,KAAK,KACL,KAAK,KACH,OAAO,EAET,QACE,OAAO,IAMb,wBAA6BA,GAC3B,OAAQA,GACN,KAAK,GACL,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,IACL,KAAK,IACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,MACL,KAAK,MACH,OAAO,EAET,QACE,OAAOA,GAAK,MAAmBA,GAAK,OAM1C,0BAA+BA,GAC7B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,wBAA6BA,GAC3B,OAAOA,GAAK,IAAeA,GAAK,IAIlC,6BAAkCA,GAChC,MAAM+0H,EAAS,GAAJ/0H,EACX,OAAO+0H,GAAM,IAAcA,GAAM,KACrB,IAAL/0H,GACK,IAALA,GACAA,EAAI,SAmLqBoK,EAnLYpK,GAoL9B,KAAOoK,EAAO,QACrB4qH,EAAmB5qH,EAAa6qH,IAFzC,IAAkC7qH,GA/KlC,8BAAmCpK,GACjC,OAAOA,GAAK,IAAcA,GAAK,KAIjC,4BAAiCA,GAC/B,MAAM+0H,EAAS,GAAJ/0H,EACX,OAAO+0H,GAAM,IAAcA,GAAM,KAC1B/0H,GAAK,IAAeA,GAAK,IACpB,IAALA,GACK,IAALA,GACAA,EAAI,SAyKoBoK,EAzKYpK,GA0K7B,KAAOoK,EAAO,QACrB4qH,EAAmB5qH,EAAa8qH,IAFzC,IAAiC9qH,GArKjC,MAAM6qH,EAAgC,CACpC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAA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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__21__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 18);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is (part of) a closure. */\n  CLOSURE = 1 << 27,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n\n/** Common compiler symbols. */\nexport namespace CommonSymbols {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const anyref = \"anyref\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  export const indexof = \"indexof\";\n  export const valueof = \"valueof\";\n  export const returnof = \"returnof\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_MUTABLE_GLOBALS = \"ASC_FEATURE_MUTABLE_GLOBALS\";\n  export const ASC_FEATURE_NONTRAPPING_F2I = \"ASC_FEATURE_NONTRAPPING_F2I\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  export const ASC_FEATURE_EXCEPTION_HANDLING = \"ASC_FEATURE_EXCEPTION_HANDLING\";\n  export const ASC_FEATURE_TAIL_CALLS = \"ASC_FEATURE_TAIL_CALLS\";\n  export const ASC_FEATURE_REFERENCE_TYPES = \"ASC_FEATURE_REFERENCE_TYPES\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const Anyref = \"Anyref\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const FixedArray = \"FixedArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  export const Error = \"Error\";\n  // runtime\n  export const abort = \"abort\";\n  export const pow = \"pow\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const retain = \"__retain\";\n  export const release = \"__release\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const allocArray = \"__allocArray\";\n}\n\n// shared\nexport { Feature, featureToString } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./bitset\";\nexport * from \"./charcode\";\nexport * from \"./collections\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(relatedRange.source.normalizedPath);\n      sb.push(\"(\");\n      sb.push(relatedRange.line.toString(10));\n      sb.push(\",\");\n      sb.push(relatedRange.column.toString(10));\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  CommonSymbols,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX,\n  LIBRARY_SUBST\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  NAMEDTYPE,\n  FUNCTIONTYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n\n  // types\n\n  static createTypeName(\n    name: IdentifierExpression,\n    range: Range\n  ): TypeName {\n    var typeName = new TypeName();\n    typeName.range = range;\n    typeName.identifier = name;\n    typeName.next = null;\n    return typeName;\n  }\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\n  }\n\n  static createNamedType(\n    name: TypeName,\n    typeArguments: TypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): NamedTypeNode {\n    var type = new NamedTypeNode();\n    type.range = range;\n    type.name = name;\n    type.typeArguments = typeArguments;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createFunctionType(\n    parameters: ParameterNode[],\n    returnType: TypeNode,\n    explicitThisType: NamedTypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): FunctionTypeNode {\n    var type = new FunctionTypeNode();\n    type.range = range;\n    type.parameters = parameters;\n    type.returnType = returnType;\n    type.explicitThisType = explicitThisType;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): NamedTypeNode {\n    return Node.createNamedType(\n      Node.createSimpleTypeName(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: NamedTypeNode | null,\n    defaultType: NamedTypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.extendsType = extendsType;\n    elem.defaultType = defaultType;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: TypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.arguments = args;\n    stmt.decoratorKind = DecoratorKind.fromNode(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name; // TODO: extract from range\n    expr.symbol = name; // TODO: Symbol.for(name)\n    expr.isQuoted = isQuoted;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements;\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: TypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression;\n    expr.toType = toType;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left;\n    expr.right = right;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions;\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.elementExpression = element;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: TypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.isType = isType;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    typeName: TypeName,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.typeName = typeName;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.property = property;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition;\n    expr.ifThen = ifThen;\n    expr.ifElse = ifElse;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.implementsTypes = implementsTypes;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement;\n    stmt.condition = condition;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.values = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.members = members;\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(normalizedPath);\n    } else {\n      stmt.internalPath = null;\n    }\n    stmt.isDeclare = isDeclare;\n    return stmt;\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    var stmt = new ExportDefaultStatement();\n    stmt.declaration = declaration;\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.externalName = externalName;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.localName = name;\n    if (!externalName) externalName = name;\n    elem.exportedName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.ifTrue = ifTrue;\n    stmt.ifFalse = ifFalse;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls;\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) {\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else {\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.foreignName = foreignName;\n    if (!name) name = foreignName;\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.type = type;\n    stmt.initializer = initializer;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer;\n    stmt.condition = condition;\n    stmt.incrementor = incrementor;\n    stmt.statement = statement;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    stmt.arrowKind = arrowKind;\n    return stmt;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: NamedTypeNode,\n    valueType: TypeNode,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var elem = new IndexSignatureDeclaration();\n    elem.range = range;\n    elem.keyType = keyType;\n    elem.valueType = valueType;\n    return elem;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.cases = cases;\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label;\n    elem.statements = statements;\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    stmt.catchVariable = catchVariable;\n    stmt.catchStatements = catchStatements;\n    stmt.finallyStatements = finallyStatements;\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: TypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.type = alias;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.declarations = declarations;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.statement = statement;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class TypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n\n  /** Tests if this type has a generic component matching one of the given type parameters. */\n  hasGenericComponent(typeParameterNodes: TypeParameterNode[]): bool {\n    var self = <TypeNode>this; // TS otherwise complains\n    if (this.kind == NodeKind.NAMEDTYPE) {\n      if (!(<NamedTypeNode>self).name.next) {\n        let typeArgumentNodes = (<NamedTypeNode>self).typeArguments;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          for (let i = 0, k = typeArgumentNodes.length; i < k; ++i) {\n            if (typeArgumentNodes[i].hasGenericComponent(typeParameterNodes)) return true;\n          }\n        } else {\n          let name = (<NamedTypeNode>self).name.identifier.text;\n          for (let i = 0, k = typeParameterNodes.length; i < k; ++i) {\n            if (typeParameterNodes[i].name.text == name) return true;\n          }\n        }\n      }\n    } else if (this.kind == NodeKind.FUNCTIONTYPE) {\n      let parameterNodes = (<FunctionTypeNode>self).parameters;\n      for (let i = 0, k = parameterNodes.length; i < k; ++i) {\n        if (parameterNodes[i].type.hasGenericComponent(typeParameterNodes)) return true;\n      }\n      if ((<FunctionTypeNode>self).returnType.hasGenericComponent(typeParameterNodes)) return true;\n      let explicitThisType = (<FunctionTypeNode>self).explicitThisType;\n      if (explicitThisType !== null && explicitThisType.hasGenericComponent(typeParameterNodes)) return true;\n    } else {\n      assert(false);\n    }\n    return false;\n  }\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  kind = NodeKind.TYPENAME;\n\n  /** Identifier of this part. */\n  identifier: IdentifierExpression;\n  /** Next part of the type name or `null` if this is the last part. */\n  next: TypeName | null;\n}\n\n/** Represents a named type. */\nexport class NamedTypeNode extends TypeNode {\n  kind = NodeKind.NAMEDTYPE;\n\n  /** Type name. */\n  name: TypeName;\n  /** Type argument references. */\n  typeArguments: TypeNode[] | null;\n}\n\n/** Represents a function type. */\nexport class FunctionTypeNode extends TypeNode {\n  kind = NodeKind.FUNCTIONTYPE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: TypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: TypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\nexport namespace DecoratorKind {\n\n  /** Returns the kind of the specified decorator name node. Defaults to {@link DecoratorKind.CUSTOM}. */\n  export function fromNode(nameNode: Expression): DecoratorKind {\n    // @global, @inline, @operator, @sealed, @unmanaged\n    if (nameNode.kind == NodeKind.IDENTIFIER) {\n      let nameStr = (<IdentifierExpression>nameNode).text;\n      assert(nameStr.length);\n      switch (nameStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n          break;\n        }\n        case CharCode.e: {\n          if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n          break;\n        }\n        case CharCode.g: {\n          if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n          break;\n        }\n        case CharCode.i: {\n          if (nameStr == \"inline\") return DecoratorKind.INLINE;\n          break;\n        }\n        case CharCode.l: {\n          if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n          break;\n        }\n        case CharCode.o: {\n          if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n          break;\n        }\n        case CharCode.s: {\n          if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n          break;\n        }\n        case CharCode.u: {\n          if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n          if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n          break;\n        }\n      }\n    } else if (\n      nameNode.kind == NodeKind.PROPERTYACCESS &&\n      (<PropertyAccessExpression>nameNode).expression.kind == NodeKind.IDENTIFIER\n    ) {\n      let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>nameNode).expression).text;\n      assert(nameStr.length);\n      let propStr = (<PropertyAccessExpression>nameNode).property.text;\n      assert(propStr.length);\n      // @operator.binary, @operator.prefix, @operator.postfix\n      if (nameStr == \"operator\") {\n        switch (propStr.charCodeAt(0)) {\n          case CharCode.b: {\n            if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n            break;\n          }\n          case CharCode.p: {\n            switch (propStr) {\n              case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n              case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n            }\n            break;\n          }\n        }\n      }\n    }\n    return DecoratorKind.CUSTOM;\n  }\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n  /** Symbol. */\n  symbol: string; // TODO: symbol\n  /** Whether quoted or not. */\n  isQuoted: bool;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Checks if the given node represents a numeric (float or integer) literal. */\nexport function isNumericLiteral(node: Expression): bool {\n  if (node.kind == NodeKind.LITERAL) {\n    switch ((<LiteralExpression>node).literalKind) {\n      case LiteralKind.FLOAT:\n      case LiteralKind.INTEGER: return true;\n    }\n  }\n  return false;\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS,\n  NONNULL\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: TypeNode | null;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n  symbol = CommonSymbols.constructor;\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: TypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends Expression {\n  kind = NodeKind.NEW;\n\n  /** Type being constructed. */\n  typeName: TypeName;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.typeName.range;\n  }\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n  symbol = CommonSymbols.null_;\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n  symbol = CommonSymbols.super_;\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n  symbol = CommonSymbols.this_;\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n  symbol = CommonSymbols.true_;\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n  symbol = CommonSymbols.false_;\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** User-provided file. */\n  USER = 0,\n  /** User-provided entry file. */\n  USER_ENTRY = 1,\n  /** Library-provided file. */\n  LIBRARY = 2,\n  /** Library-provided entry file. */\n  LIBRARY_ENTRY = 3\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path with file extension. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: string[] | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Checks if this source represents native code. */\n  get isNative(): bool {\n    return this.internalPath == LIBRARY_SUBST;\n  }\n\n  /** Checks if this source is part of the (standard) library. */\n  get isLibrary(): bool {\n    var kind = this.sourceKind;\n    return kind == SourceKind.LIBRARY || kind == SourceKind.LIBRARY_ENTRY;\n  }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\n\n  /** Key type. */\n  keyType: NamedTypeNode;\n  /** Value type. */\n  valueType: TypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: TypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Base class type being extended, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: NamedTypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Local identifier. */\n  localName: IdentifierExpression;\n  /** Exported identifier. */\n  exportedName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a file export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n  /** Whether this is a declared export. */\n  isDeclare: bool;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  kind = NodeKind.EXPORTDEFAULT;\n\n  /** Declaration being exported as default. */\n  declaration: DeclarationStatement;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: FunctionTypeNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n  /** Arrow function kind, if applicable. */\n  arrowKind: ArrowKind;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return Node.createFunctionDeclaration(\n      this.name,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.decorators,\n      this.flags,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  foreignName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: TypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: TypeNode): bool {\n  if (type.kind == NodeKind.NAMEDTYPE) {\n    let name = (<NamedTypeNode>type).name;\n    return !(name.next || name.identifier.text.length);\n  }\n  return false;\n}\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  CommonSymbols,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  Range,\n  DecoratorNode,\n  DecoratorKind,\n  TypeParameterNode,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  ExportDefaultStatement,\n  Token,\n  ParameterNode\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  Parser\n} from \"./parser\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\nexport namespace OperatorKind {\n\n  /** Returns the operator kind represented by the specified decorator and string argument. */\n  export function fromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n    assert(arg.length);\n    switch (decoratorKind) {\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.OPENBRACKET: {\n            if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n            if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n            break;\n          }\n          case CharCode.OPENBRACE: {\n            if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n            if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n            break;\n          }\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.ADD;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.SUB;\n            break;\n          }\n          case CharCode.ASTERISK: {\n            if (arg == \"*\") return OperatorKind.MUL;\n            if (arg == \"**\") return OperatorKind.POW;\n            break;\n          }\n          case CharCode.SLASH: {\n            if (arg == \"/\") return OperatorKind.DIV;\n            break;\n          }\n          case CharCode.PERCENT: {\n            if (arg == \"%\") return OperatorKind.REM;\n            break;\n          }\n          case CharCode.AMPERSAND: {\n            if (arg == \"&\") return OperatorKind.BITWISE_AND;\n            break;\n          }\n          case CharCode.BAR: {\n            if (arg == \"|\") return OperatorKind.BITWISE_OR;\n            break;\n          }\n          case CharCode.CARET: {\n            if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n            break;\n          }\n          case CharCode.EQUALS: {\n            if (arg == \"==\") return OperatorKind.EQ;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!=\") return OperatorKind.NE;\n            break;\n          }\n          case CharCode.GREATERTHAN: {\n            if (arg == \">\") return OperatorKind.GT;\n            if (arg == \">=\") return OperatorKind.GE;\n            if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n            if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n            break;\n          }\n          case CharCode.LESSTHAN: {\n            if (arg == \"<\") return OperatorKind.LT;\n            if (arg == \"<=\") return OperatorKind.LE;\n            if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_PREFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.PLUS;\n            if (arg == \"++\") return OperatorKind.PREFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.MINUS;\n            if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!\") return OperatorKind.NOT;\n            break;\n          }\n          case CharCode.TILDE: {\n            if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_POSTFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n            break;\n          }\n        }\n        break;\n      }\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a binary operator token to the respective operator kind. */\n  export function fromBinaryToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS:\n      case Token.PLUS_EQUALS: return OperatorKind.ADD;\n      case Token.MINUS:\n      case Token.MINUS_EQUALS: return OperatorKind.SUB;\n      case Token.ASTERISK:\n      case Token.ASTERISK_EQUALS: return OperatorKind.MUL;\n      case Token.SLASH:\n      case Token.SLASH_EQUALS: return OperatorKind.DIV;\n      case Token.PERCENT:\n      case Token.PERCENT_EQUALS: return OperatorKind.REM;\n      case Token.ASTERISK_ASTERISK:\n      case Token.ASTERISK_ASTERISK_EQUALS: return OperatorKind.POW;\n      case Token.AMPERSAND:\n      case Token.AMPERSAND_EQUALS: return OperatorKind.BITWISE_AND;\n      case Token.BAR:\n      case Token.BAR_EQUALS: return OperatorKind.BITWISE_OR;\n      case Token.CARET:\n      case Token.CARET_EQUALS: return OperatorKind.BITWISE_XOR;\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.LESSTHAN_LESSTHAN_EQUALS: return OperatorKind.BITWISE_SHL;\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR_U;\n      case Token.EQUALS_EQUALS: return OperatorKind.EQ;\n      case Token.EXCLAMATION_EQUALS: return OperatorKind.NE;\n      case Token.GREATERTHAN: return OperatorKind.GT;\n      case Token.GREATERTHAN_EQUALS: return OperatorKind.GE;\n      case Token.LESSTHAN: return OperatorKind.LT;\n      case Token.LESSTHAN_EQUALS: return OperatorKind.LE;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary prefix operator token to the respective operator kind. */\n  export function fromUnaryPrefixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS: return OperatorKind.PLUS;\n      case Token.MINUS: return OperatorKind.MINUS;\n      case Token.EXCLAMATION: return OperatorKind.NOT;\n      case Token.TILDE: return OperatorKind.BITWISE_NOT;\n      case Token.PLUS_PLUS: return OperatorKind.PREFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.PREFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary postfix operator token to the respective operator kind. */\n  export function fromUnaryPostfixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS_PLUS: return OperatorKind.POSTFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.POSTFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Parser instance. */\n  parser: Parser;\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n\n  // lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes wrapping basic types like `i32`. */\n  wrapperClasses: Map<Type,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n  /** A set of unique function signatures contained in the program, by id. */\n  uniqueSignatures: Signature[] = new Array<Signature>(0);\n\n  // standard references\n\n  /** ArrayBufferView reference. */\n  arrayBufferViewInstance: Class;\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype;\n  /** Set prototype reference. */\n  setPrototype: ClassPrototype;\n  /** Map prototype reference. */\n  mapPrototype: ClassPrototype;\n  /** Fixed array prototype reference. */\n  fixedArrayPrototype: ClassPrototype;\n  /** Int8Array prototype. */\n  i8ArrayPrototype: ClassPrototype;\n  /** Int16Array prototype. */\n  i16ArrayPrototype: ClassPrototype;\n  /** Int32Array prototype. */\n  i32ArrayPrototype: ClassPrototype;\n  /** Int64Array prototype. */\n  i64ArrayPrototype: ClassPrototype;\n  /** Uint8Array prototype. */\n  u8ArrayPrototype: ClassPrototype;\n  /** Uint8ClampedArray prototype. */\n  u8ClampedArrayPrototype: ClassPrototype;\n  /** Uint16Array prototype. */\n  u16ArrayPrototype: ClassPrototype;\n  /** Uint32Array prototype. */\n  u32ArrayPrototype: ClassPrototype;\n  /** Uint64Array prototype. */\n  u64ArrayPrototype: ClassPrototype;\n  /** Float32Array prototype. */\n  f32ArrayPrototype: ClassPrototype;\n  /** Float64Array prototype. */\n  f64ArrayPrototype: ClassPrototype;\n  /** String instance reference. */\n  stringInstance: Class;\n  /** Abort function reference, if not explicitly disabled. */\n  abortInstance: Function | null;\n\n  // runtime references\n\n  /** RT `__alloc(size: usize, id: u32): usize` */\n  allocInstance: Function;\n  /** RT `__realloc(ptr: usize, newSize: usize): usize` */\n  reallocInstance: Function;\n  /** RT `__free(ptr: usize): void` */\n  freeInstance: Function;\n  /** RT `__retain(ptr: usize): usize` */\n  retainInstance: Function;\n  /** RT `__release(ptr: usize): void` */\n  releaseInstance: Function;\n  /** RT `__collect(): void` */\n  collectInstance: Function;\n  /** RT `__visit(ptr: usize, cookie: u32): void` */\n  visitInstance: Function;\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\n  typeinfoInstance: Function;\n  /** RT `__instanceof(ptr: usize, superId: u32): bool` */\n  instanceofInstance: Function;\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\n  allocArrayInstance: Function;\n\n  /** Next class id. */\n  nextClassId: u32 = 0;\n  /** Next signature id. */\n  nextSignatureId: i32 = 0;\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Compiler options. */\n    options: Options,\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    this.options = options;\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY_ENTRY);\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.parser = new Parser(this);\n    this.resolver = new Resolver(this);\n  }\n\n  /** Obtains the source matching the specified internal path. */\n  getSource(internalPath: string): string | null {\n    var sources = this.sources;\n    for (let i = 0; i < sources.length; ++i) {\n      let source = sources[i];\n      if (source.internalPath == internalPath) return source.text;\n    }\n    return null;\n  }\n\n  /** Writes a common runtime header to the specified buffer. */\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, classInstance: Class, payloadSize: u32): void {\n    // BLOCK {\n    //   mmInfo: usize // WASM64 TODO\n    //   gcInfo: u32\n    //   rtId: u32\n    //   rtSize: u32\n    // }\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\n    writeI32(payloadSize, buffer, offset);\n    writeI32(1, buffer, offset + 4); // RC=1\n    writeI32(classInstance.id, buffer, offset + 8);\n    writeI32(payloadSize, buffer, offset + 12);\n  }\n\n  /** Gets the size of a runtime header. */\n  get runtimeHeaderSize(): i32 {\n    return 16;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, null, null, flags, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null,\n      Node.createOmittedType(range),\n      null, flags, range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: FunctionTypeNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null,\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createFunctionType([],\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\n          null, false, range\n        ),\n        null, false, range)\n      ),\n      null, null, flags, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      [], null, flags, range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement | null {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    return elementsByDeclaration.has(declaration)\n      ? elementsByDeclaration.get(declaration)!\n      : null;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // register native types\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\n    this.registerNativeType(CommonSymbols.void_, Type.void);\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\n      CommonSymbols.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.indexof, new TypeDefinition(\n      CommonSymbols.indexof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.valueof, new TypeDefinition(\n      CommonSymbols.valueof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.returnof, new TypeDefinition(\n      CommonSymbols.returnof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.returnof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerNativeType(CommonSymbols.anyref, Type.anyref);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonSymbols.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonSymbols.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n\n    // register feature hints\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_MUTABLE_GLOBALS, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBALS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_NONTRAPPING_F2I, Type.bool,\n      i64_new(options.hasFeature(Feature.NONTRAPPING_F2I) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_EXCEPTION_HANDLING, Type.bool,\n      i64_new(options.hasFeature(Feature.EXCEPTION_HANDLING) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_TAIL_CALLS, Type.bool,\n      i64_new(options.hasFeature(Feature.TAIL_CALLS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_REFERENCE_TYPES, Type.bool,\n      i64_new(options.hasFeature(Feature.REFERENCE_TYPES) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    for (let [file, exportsStar] of queuedExportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = exportsStar[i];\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            queuedImport.localIdentifier.text,\n            element,\n            true // isImport\n          );\n        } else {\n          // FIXME: file not found is not reported if this happens?\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = queuedImport.localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile\n            ),\n            true // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [file, exports] of queuedExports) {\n      for (let [exportName, queuedExport] of exports) {\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.nextClassId == 0);\n    this.arrayBufferInstance = this.requireClass(CommonSymbols.ArrayBuffer);\n    assert(this.arrayBufferInstance.id == 0);\n    this.stringInstance = this.requireClass(CommonSymbols.String);\n    assert(this.stringInstance.id == 1);\n    this.arrayBufferViewInstance = this.requireClass(CommonSymbols.ArrayBufferView);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerWrapperClass(Type.i8, CommonSymbols.I8);\n    this.registerWrapperClass(Type.i16, CommonSymbols.I16);\n    this.registerWrapperClass(Type.i32, CommonSymbols.I32);\n    this.registerWrapperClass(Type.i64, CommonSymbols.I64);\n    this.registerWrapperClass(options.isizeType, CommonSymbols.Isize);\n    this.registerWrapperClass(Type.u8, CommonSymbols.U8);\n    this.registerWrapperClass(Type.u16, CommonSymbols.U16);\n    this.registerWrapperClass(Type.u32, CommonSymbols.U32);\n    this.registerWrapperClass(Type.u64, CommonSymbols.U64);\n    this.registerWrapperClass(options.usizeType, CommonSymbols.Usize);\n    this.registerWrapperClass(Type.bool, CommonSymbols.Bool);\n    this.registerWrapperClass(Type.f32, CommonSymbols.F32);\n    this.registerWrapperClass(Type.f64, CommonSymbols.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerWrapperClass(Type.v128, CommonSymbols.V128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerWrapperClass(Type.anyref, CommonSymbols.Anyref);\n\n    // register views but don't instantiate them yet\n    this.i8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    this.i16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    this.i32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    this.i64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ClampedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    this.u16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    this.u32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    this.u64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    this.f32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    this.f64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float64Array, ElementKind.CLASS_PROTOTYPE);\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\n          this.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\n          );\n        }\n        if (\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n        ) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n          );\n        }\n        thisPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          extendsNode.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let firstChar = name.charCodeAt(0);\n          if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n            this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n          } else {\n            let elementsByName = this.elementsByName;\n            let element = elementsByName.get(name);\n            if (element) {\n              if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\n              elementsByName.set(alias, element);\n            }\n            else throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // register stdlib components\n    this.arrayPrototype = <ClassPrototype>this.require(CommonSymbols.Array, ElementKind.CLASS_PROTOTYPE);\n    this.fixedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.FixedArray, ElementKind.CLASS_PROTOTYPE);\n    this.setPrototype = <ClassPrototype>this.require(CommonSymbols.Set, ElementKind.CLASS_PROTOTYPE);\n    this.mapPrototype = <ClassPrototype>this.require(CommonSymbols.Map, ElementKind.CLASS_PROTOTYPE);\n    this.abortInstance = this.lookupFunction(CommonSymbols.abort); // can be disabled\n    this.allocInstance = this.requireFunction(CommonSymbols.alloc);\n    this.reallocInstance = this.requireFunction(CommonSymbols.realloc);\n    this.freeInstance = this.requireFunction(CommonSymbols.free);\n    this.retainInstance = this.requireFunction(CommonSymbols.retain);\n    this.releaseInstance = this.requireFunction(CommonSymbols.release);\n    this.collectInstance = this.requireFunction(CommonSymbols.collect);\n    this.typeinfoInstance = this.requireFunction(CommonSymbols.typeinfo);\n    this.instanceofInstance = this.requireFunction(CommonSymbols.instanceof_);\n    this.visitInstance = this.requireFunction(CommonSymbols.visit);\n    this.allocArrayInstance = this.requireFunction(CommonSymbols.allocArray);\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    for (let file of this.filesByName.values()) {\n      let exports = file.exports;\n      if (exports !== null && file.source.sourceKind == SourceKind.USER_ENTRY) {\n        for (let element of exports.values()) this.markModuleExport(element);\n      }\n    }\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookupGlobal(name);\n    if (!element) throw new Error(\"missing \" + name);\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\n    return element;\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  private requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Obtains a non-generic global function and returns it. Returns `null` if it does not exist. */\n  private lookupFunction(name: string): Function | null {\n    var prototype = this.lookupGlobal(name);\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n  }\n\n  /** Requires that a global function is present and returns it. */\n  private requireFunction(name: string, typeArguments: Type[] | null = null): Function {\n    var prototype = this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(<FunctionPrototype>prototype, typeArguments);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    {\n      let members = element.members;\n      if (members) for (let member of members.values()) this.markModuleExport(member);\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerWrapperClass(type: Type, className: string): void {\n    var wrapperClasses = this.wrapperClasses;\n    assert(!type.classReference && !wrapperClasses.has(type));\n    var element = this.lookupGlobal(className);\n    if (!element) return;\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    var classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n    if (!classElement) return;\n    classElement.wrappedType = type;\n    wrapperClasses.set(type, classElement);\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let existing = elementsByName.get(name)!;\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (existing !== element) {\n        let merged = tryMerge(existing, element);\n        if (!merged) {\n          if (isDeclaredElement(existing.kind)) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              name\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, name\n            );\n          }\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\n  requireGlobal(name: string): Element {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name)!;\n    throw new Error(\"missing global\");\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n         ? filesByName.get(foreignPath)!\n         : filesByName.has(foreignPathAlt)\n         ? filesByName.get(foreignPathAlt)!\n         : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = fileQueuedExports.get(foreignName)!;\n          if (queuedExport.foreignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExport.foreignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = DecoratorKind.fromNode(decorator.name);\n        let flag = DecoratorFlags.fromKind(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.SEALED |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      // cannot implement interfaces when unmanaged\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n      } else if (numImplementsTypes) {\n        // remember classes that implement interfaces\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning(\n            DiagnosticCode.Not_implemented,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(element);\n      }\n    }\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    var acceptedFlags: DecoratorFlags = DecoratorFlags.UNSAFE;\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      acceptedFlags |= DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.READONLY)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, acceptedFlags)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    if (parent.is(CommonFlags.AMBIENT)) {\n      acceptedFlags |= DecoratorFlags.EXTERNAL;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator: DecoratorNode = decorators[i]; // FIXME: why does tsc want a type here?\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let text = (<StringLiteralExpression>firstArg).value;\n                let kind = OperatorKind.fromDecorator(decorator.decoratorKind, text);\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode._0_is_not_a_valid_operator,\n                    firstArg.range, text\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(10)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name)!;\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name);\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = assert(statement.internalPath); // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else {\n        if (exports.has(\"default\")) {\n          let existing = exports.get(\"default\")!;\n          this.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range,\n            existing.declaration.name.range,\n            \"default\"\n          );\n          return;\n        }\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\n      queuedImports.push(new QueuedImport(\n        parent,\n        statement.namespaceName,\n        null, // indicates import *\n        statement.internalPath,\n        statement.internalPath + INDEX_SUFFIX\n      ));\n    } else {\n      // import \"./foo\"\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, true);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): Namespace | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // retain original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n  /** An {@link IndexSignature}. */\n  INDEXSIGNATURE\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 10\n}\n\nexport namespace DecoratorFlags {\n\n  /** Translates a decorator kind to the respective decorator flag. */\n  export function fromKind(kind: DecoratorKind): DecoratorFlags {\n    switch (kind) {\n      case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n      case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n      case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n      case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n      case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n      case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n      case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n      case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n      case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n      case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n      default: return DecoratorFlags.NONE;\n    }\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\n    while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members && members.has(name)) return members.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let existing = members.get(name)!;\n      if (existing.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(existing, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          if (isDeclaredElement(existing.kind)) {\n            this.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              element.identifierNode.text\n            );\n          } else {\n            this.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, element.identifierNode.text\n            );\n          }\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return ElementKind[this.kind] + \":\" + this.internalName;\n  }\n}\n\n// Kinds of all declared elements\nvar declaredElements = new Set<ElementKind>();\n\n/** Tests if the specified element kind indicates a declared element. */\nexport function isDeclaredElement(kind: ElementKind): bool {\n  return declaredElements.has(kind);\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    declaredElements.add(kind);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n}\n\n// Kinds of all typed elements\nvar typedElements = new Set<ElementKind>();\n\n/** Checks if the specified element kind indicates a typed element. */\nexport function isTypedElement(kind: ElementKind): bool {\n  return typedElements.has(kind);\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent, declaration);\n    typedElements.add(kind);\n  }\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(program, null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.sourceKind == SourceKind.LIBRARY_ENTRY) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports && exports.has(name)) return exports.get(name)!;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element): Namespace {\n    var ns = new Namespace(\n      name,\n      parent,\n      this.program.makeNativeNamespaceDeclaration(name)\n    );\n    var exports = this.exports;\n    if (exports) {\n      for (let [memberName, member] of exports) {\n        ns.add(memberName, member);\n      }\n    }\n    return ns;\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): TypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: I64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).value;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated function type node. */\n  get functionTypeNode(): FunctionTypeNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n  /** Counting id of autorelease variables. */\n  nextAutoreleaseId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    var program = prototype.program;\n    this.type = program.options.usizeType.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (this.is(CommonFlags.INSTANCE)) {\n        let local = new Local(\n          CommonSymbols.this_,\n          localIndex++,\n          assert(signature.thisType),\n          this\n        );\n        this.localsByName.set(CommonSymbols.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n    registerConcreteElement(program, this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration || this.program.makeNativeVariableDeclaration(localName)\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return locals.get(name)!;\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n  tempAnyrefs: Local[] | null = null;\n  tempExnrefs: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n}\n\nvar nextFunctionTarget = 0;\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      \"~sig\" + nextFunctionTarget.toString(),\n      \"~sig\" + nextFunctionTarget.toString(),\n      program,\n      program.nativeFile\n    );\n    ++nextFunctionTarget;\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = program.options.usizeType.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      prototype.program.makeNativeVariableDeclaration(\n        prototype.name,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE\n      )\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    registerConcreteElement(this.program, this);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An resolved index signature. */\nexport class IndexSignature extends VariableLikeElement {\n\n  /** Constructs a new index prototype. */\n  constructor(\n    /** Parent class. */\n    parent: Class\n  ) {\n    super(ElementKind.INDEXSIGNATURE, parent.internalName + \"[]\", parent);\n  }\n\n  /** Obtains the getter instance. */\n  getGetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n  }\n\n  /** Obtains the setter instance. */\n  getSetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): NamedTypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): NamedTypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    do if (current === basePtototype) return true;\n    while (current = current.basePrototype);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let existing = instanceMembers.get(name)!;\n      let merged = tryMerge(existing, element);\n      if (!merged) {\n        if (isDeclaredElement(existing.kind)) {\n          this.program.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range,\n            (<DeclaredElement>existing).declaration.name.range,\n            element.identifierNode.text\n          );\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n        }\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\nconst enum AcyclicState {\n  UNKNOWN,\n  ACYCLIC,\n  NOT_ACYCLIC\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Index signature, if present. */\n  indexSignature: IndexSignature | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Remembers acyclic state. */\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n  /** Wrapped type, if a wrapper for a basic type. */\n  wrappedType: Type | null = null;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY &&\n        (<Property>lengthField).getterInstance !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    /** Base class, if derived. */\n    base: Class | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(program.options.usizeType.asClass(this));\n    this.base = base;\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters && typeParameters.length) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\n    var field = this.lookupInSelf(name);\n    if (field && field.kind == ElementKind.FIELD) {\n      let offset = baseOffset + (<Field>field).memoryOffset;\n      switch ((<Field>field).type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          assert(!this.program.options.isWasm64); // TODO\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F32: {\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do if (current.prototype === extendedPrototype) return current.typeArguments;\n    while (current = current.base);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    switch (current.prototype) {\n      case program.i8ArrayPrototype: return Type.i8;\n      case program.i16ArrayPrototype: return Type.i16;\n      case program.i32ArrayPrototype: return Type.i32;\n      case program.i64ArrayPrototype: return Type.i64;\n      case program.u8ArrayPrototype:\n      case program.u8ClampedArrayPrototype: return Type.u8;\n      case program.u16ArrayPrototype: return Type.u16;\n      case program.u32ArrayPrototype: return Type.u32;\n      case program.u64ArrayPrototype: return Type.u64;\n      case program.f32ArrayPrototype: return Type.f32;\n      case program.f64ArrayPrototype: return Type.f64;\n      case program.arrayPrototype: return assert(this.getTypeArgumentsTo(program.arrayPrototype))[0];\n      default: assert(false);\n    }\n    return Type.void;\n  }\n\n  /** Tests if this class is inherently acyclic. */\n  get isAcyclic(): bool {\n    var acyclic = this._acyclic;\n    if (acyclic == AcyclicState.UNKNOWN) {\n      let hasCycle = this.cyclesTo(this);\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\n    }\n    return acyclic == AcyclicState.ACYCLIC;\n  }\n\n  /** Tests if this class potentially forms a reference cycle to another one. */\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\n    //\n    // - scalars\n    // - references to classes that are both acyclic and final (here: Java); and\n    // - arrays (in our case: also sets, maps) of either of the above\n    //\n    // Our implementation, however, treats all objects that do not reference themselves directly\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\n\n    if (except.has(this)) return false;\n    except.add(this); // don't recurse indefinitely\n\n    // Find out if any field references 'other' directly or indirectly\n    var current: Class | null;\n    var members = this.members;\n    if (members) {\n      for (let member of members.values()) {\n        if (member.kind == ElementKind.FIELD) {\n          let type = (<Field>member).type;\n          if (type.is(TypeFlags.REFERENCE)) {\n            if ((current = type.classReference) !== null && (\n              current === other ||\n              current.cyclesTo(other, except)\n            )) return true;\n          }\n        }\n      }\n    }\n\n    // Do the same for non-field data\n    var basePrototype: ClassPrototype | null;\n\n    // Array<T->other?>\n    if ((basePrototype = this.program.arrayPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Set<K->other?>\n    } else if ((basePrototype = this.program.setPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Map<K->other?,V->other?>\n    } else if ((basePrototype = this.program.mapPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 2);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n      if (\n        (current = typeArguments[1].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n    }\n    return false;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype { // FIXME\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    nameInclTypeParameters: string,\n    prototype: InterfacePrototype,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      base,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  assert(!newer.members);\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    for (let [memberName, member] of srcMembers) {\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport { Target } from \"./common\";\nimport * as binaryen from \"./glue/binaryen\";\n\nexport type ModuleRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type EventRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\nexport enum NativeType {\n  None = binaryen._BinaryenTypeNone(),\n  I32  = binaryen._BinaryenTypeInt32(),\n  I64  = binaryen._BinaryenTypeInt64(),\n  F32  = binaryen._BinaryenTypeFloat32(),\n  F64  = binaryen._BinaryenTypeFloat64(),\n  V128 = binaryen._BinaryenTypeVec128(),\n  Anyref = binaryen._BinaryenTypeAnyref(),\n  Exnref = binaryen._BinaryenTypeExnref(),\n  Unreachable = binaryen._BinaryenTypeUnreachable(),\n  Auto = binaryen._BinaryenTypeAuto()\n}\n\nexport enum FeatureFlags {\n  MVP = binaryen._BinaryenFeatureMVP(),\n  Atomics = binaryen._BinaryenFeatureAtomics(),\n  MutableGloabls = binaryen._BinaryenFeatureMutableGlobals(),\n  NontrappingFPToInt = binaryen._BinaryenFeatureNontrappingFPToInt(),\n  SIMD128 = binaryen._BinaryenFeatureSIMD128(),\n  BulkMemory = binaryen._BinaryenFeatureBulkMemory(),\n  SignExt = binaryen._BinaryenFeatureSignExt(),\n  ExceptionHandling = binaryen._BinaryenFeatureExceptionHandling(),\n  TailCall = binaryen._BinaryenFeatureTailCall(),\n  ReferenceTypes = binaryen._BinaryenFeatureReferenceTypes(),\n  All = binaryen._BinaryenFeatureAll()\n}\n\nexport enum ExpressionId {\n  Invalid = binaryen._BinaryenInvalidId(),\n  Block = binaryen._BinaryenBlockId(),\n  If = binaryen._BinaryenIfId(),\n  Loop = binaryen._BinaryenLoopId(),\n  Break = binaryen._BinaryenBreakId(),\n  Switch = binaryen._BinaryenSwitchId(),\n  Call = binaryen._BinaryenCallId(),\n  CallIndirect = binaryen._BinaryenCallIndirectId(),\n  LocalGet = binaryen._BinaryenLocalGetId(),\n  LocalSet = binaryen._BinaryenLocalSetId(),\n  GlobalGet = binaryen._BinaryenGlobalGetId(),\n  GlobalSet = binaryen._BinaryenGlobalSetId(),\n  Load = binaryen._BinaryenLoadId(),\n  Store = binaryen._BinaryenStoreId(),\n  Const = binaryen._BinaryenConstId(),\n  Unary = binaryen._BinaryenUnaryId(),\n  Binary = binaryen._BinaryenBinaryId(),\n  Select = binaryen._BinaryenSelectId(),\n  Drop = binaryen._BinaryenDropId(),\n  Return = binaryen._BinaryenReturnId(),\n  Host = binaryen._BinaryenHostId(),\n  Nop = binaryen._BinaryenNopId(),\n  Unreachable = binaryen._BinaryenUnreachableId(),\n  AtomicCmpxchg = binaryen._BinaryenAtomicCmpxchgId(),\n  AtomicRMW = binaryen._BinaryenAtomicRMWId(),\n  AtomicWait = binaryen._BinaryenAtomicWaitId(),\n  AtomicNotify = binaryen._BinaryenAtomicNotifyId(),\n  AtomicFence = binaryen._BinaryenAtomicFenceId(),\n  SIMDExtract = binaryen._BinaryenSIMDExtractId(),\n  SIMDReplace = binaryen._BinaryenSIMDReplaceId(),\n  SIMDShuffle = binaryen._BinaryenSIMDShuffleId(),\n  SIMDTernary = binaryen._BinaryenSIMDTernaryId(),\n  SIMDShift = binaryen._BinaryenSIMDShiftId(),\n  SIMDLoad = binaryen._BinaryenSIMDLoadId(),\n  MemoryInit = binaryen._BinaryenMemoryInitId(),\n  DataDrop = binaryen._BinaryenDataDropId(),\n  MemoryCopy = binaryen._BinaryenMemoryCopyId(),\n  MemoryFill = binaryen._BinaryenMemoryFillId(),\n  Try = binaryen._BinaryenTryId(),\n  Throw = binaryen._BinaryenThrowId(),\n  Rethrow = binaryen._BinaryenRethrowId(),\n  BrOnExn = binaryen._BinaryenBrOnExnId(),\n  Push = binaryen._BinaryenPushId(),\n  Pop = binaryen._BinaryenPopId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = binaryen._BinaryenClzInt32(),\n  CtzI32 = binaryen._BinaryenCtzInt32(),\n  PopcntI32 = binaryen._BinaryenPopcntInt32(),\n  NegF32 = binaryen._BinaryenNegFloat32(),\n  AbsF32 = binaryen._BinaryenAbsFloat32(),\n  CeilF32 = binaryen._BinaryenCeilFloat32(),\n  FloorF32 = binaryen._BinaryenFloorFloat32(),\n  TruncF32 = binaryen._BinaryenTruncFloat32(),\n  NearestF32 = binaryen._BinaryenNearestFloat32(),\n  SqrtF32 = binaryen._BinaryenSqrtFloat32(),\n  EqzI32 = binaryen._BinaryenEqZInt32(),\n  ClzI64 = binaryen._BinaryenClzInt64(),\n  CtzI64 = binaryen._BinaryenCtzInt64(),\n  PopcntI64 = binaryen._BinaryenPopcntInt64(),\n  NegF64 = binaryen._BinaryenNegFloat64(),\n  AbsF64 = binaryen._BinaryenAbsFloat64(),\n  CeilF64 = binaryen._BinaryenCeilFloat64(),\n  FloorF64 = binaryen._BinaryenFloorFloat64(),\n  TruncF64 = binaryen._BinaryenTruncFloat64(),\n  NearestF64 = binaryen._BinaryenNearestFloat64(),\n  SqrtF64 = binaryen._BinaryenSqrtFloat64(),\n  EqzI64 = binaryen._BinaryenEqZInt64(),\n  ExtendI32 = binaryen._BinaryenExtendSInt32(),\n  ExtendU32 = binaryen._BinaryenExtendUInt32(),\n  WrapI64 = binaryen._BinaryenWrapInt64(),\n  TruncF32ToI32 = binaryen._BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = binaryen._BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = binaryen._BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = binaryen._BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = binaryen._BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = binaryen._BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = binaryen._BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = binaryen._BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = binaryen._BinaryenReinterpretFloat32(),\n  ReinterpretF64 = binaryen._BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = binaryen._BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = binaryen._BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = binaryen._BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = binaryen._BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = binaryen._BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = binaryen._BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = binaryen._BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = binaryen._BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = binaryen._BinaryenPromoteFloat32(),\n  DemoteF64 = binaryen._BinaryenDemoteFloat64(),\n  ReinterpretI32 = binaryen._BinaryenReinterpretInt32(),\n  ReinterpretI64 = binaryen._BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = binaryen._BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = binaryen._BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = binaryen._BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = binaryen._BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = binaryen._BinaryenExtendS32Int64(),\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  TruncF32ToI32Sat = binaryen._BinaryenTruncSatSFloat32ToInt32(),\n  TruncF32ToU32Sat = binaryen._BinaryenTruncSatUFloat32ToInt32(),\n  TruncF64ToI32Sat = binaryen._BinaryenTruncSatSFloat64ToInt32(),\n  TruncF64ToU32Sat = binaryen._BinaryenTruncSatUFloat64ToInt32(),\n  TruncF32ToI64Sat = binaryen._BinaryenTruncSatSFloat32ToInt64(),\n  TruncF32ToU64Sat = binaryen._BinaryenTruncSatUFloat32ToInt64(),\n  TruncF64ToI64Sat = binaryen._BinaryenTruncSatSFloat64ToInt64(),\n  TruncF64ToU64Sat = binaryen._BinaryenTruncSatUFloat64ToInt64(),\n\n  // see: https://github.com/WebAssembly/simd\n  SplatI8x16 = binaryen._BinaryenSplatVecI8x16(),\n  SplatI16x8 = binaryen._BinaryenSplatVecI16x8(),\n  SplatI32x4 = binaryen._BinaryenSplatVecI32x4(),\n  SplatI64x2 = binaryen._BinaryenSplatVecI64x2(),\n  SplatF32x4 = binaryen._BinaryenSplatVecF32x4(),\n  SplatF64x2 = binaryen._BinaryenSplatVecF64x2(),\n  NotV128 = binaryen._BinaryenNotVec128(),\n  NegI8x16 = binaryen._BinaryenNegVecI8x16(),\n  AnyTrueI8x16 = binaryen._BinaryenAnyTrueVecI8x16(),\n  AllTrueI8x16 = binaryen._BinaryenAllTrueVecI8x16(),\n  NegI16x8 = binaryen._BinaryenNegVecI16x8(),\n  AnyTrueI16x8 = binaryen._BinaryenAnyTrueVecI16x8(),\n  AllTrueI16x8 = binaryen._BinaryenAllTrueVecI16x8(),\n  NegI32x4 = binaryen._BinaryenNegVecI32x4(),\n  AnyTrueI32x4 = binaryen._BinaryenAnyTrueVecI32x4(),\n  AllTrueI32x4 = binaryen._BinaryenAllTrueVecI32x4(),\n  NegI64x2 = binaryen._BinaryenNegVecI64x2(),\n  AnyTrueI64x2 = binaryen._BinaryenAnyTrueVecI64x2(),\n  AllTrueI64x2 = binaryen._BinaryenAllTrueVecI64x2(),\n  AbsF32x4 = binaryen._BinaryenAbsVecF32x4(),\n  NegF32x4 = binaryen._BinaryenNegVecF32x4(),\n  SqrtF32x4 = binaryen._BinaryenSqrtVecF32x4(),\n  AbsF64x2 = binaryen._BinaryenAbsVecF64x2(),\n  NegF64x2 = binaryen._BinaryenNegVecF64x2(),\n  SqrtF64x2 = binaryen._BinaryenSqrtVecF64x2(),\n  TruncSatF32x4ToI32x4 = binaryen._BinaryenTruncSatSVecF32x4ToVecI32x4(),\n  TruncSatF32x4ToU32x4 = binaryen._BinaryenTruncSatUVecF32x4ToVecI32x4(),\n  TruncSatF64x2ToI64x2 = binaryen._BinaryenTruncSatSVecF64x2ToVecI64x2(),\n  TruncSatF64x2ToU64x2 = binaryen._BinaryenTruncSatUVecF64x2ToVecI64x2(),\n  ConvertI32x4ToF32x4 = binaryen._BinaryenConvertSVecI32x4ToVecF32x4(),\n  ConvertU32x4ToF32x4 = binaryen._BinaryenConvertUVecI32x4ToVecF32x4(),\n  ConvertI64x2ToF64x2 = binaryen._BinaryenConvertSVecI64x2ToVecF64x2(),\n  ConvertU64x2ToF64x2 = binaryen._BinaryenConvertUVecI64x2ToVecF64x2(),\n  WidenLowI8x16ToI16x8 = binaryen._BinaryenWidenLowSVecI8x16ToVecI16x8(),\n  WidenLowU8x16ToU16x8 = binaryen._BinaryenWidenLowUVecI8x16ToVecI16x8(),\n  WidenHighI8x16ToI16x8 = binaryen._BinaryenWidenHighSVecI8x16ToVecI16x8(),\n  WidenHighU8x16ToU16x8 = binaryen._BinaryenWidenHighUVecI8x16ToVecI16x8(),\n  WidenLowI16x8ToI32x4 = binaryen._BinaryenWidenLowSVecI16x8ToVecI32x4(),\n  WidenLowU16x8ToU32x4 = binaryen._BinaryenWidenLowUVecI16x8ToVecI32x4(),\n  WidenHighI16x8ToI32x4 = binaryen._BinaryenWidenHighSVecI16x8ToVecI32x4(),\n  WidenHighU16x8ToU32x4 = binaryen._BinaryenWidenHighUVecI16x8ToVecI32x4()\n}\n\nexport enum BinaryOp {\n  AddI32 = binaryen._BinaryenAddInt32(),\n  SubI32 = binaryen._BinaryenSubInt32(),\n  MulI32 = binaryen._BinaryenMulInt32(),\n  DivI32 = binaryen._BinaryenDivSInt32(),\n  DivU32 = binaryen._BinaryenDivUInt32(),\n  RemI32 = binaryen._BinaryenRemSInt32(),\n  RemU32 = binaryen._BinaryenRemUInt32(),\n  AndI32 = binaryen._BinaryenAndInt32(),\n  OrI32 = binaryen._BinaryenOrInt32(),\n  XorI32 = binaryen._BinaryenXorInt32(),\n  ShlI32 = binaryen._BinaryenShlInt32(),\n  ShrU32 = binaryen._BinaryenShrUInt32(),\n  ShrI32 = binaryen._BinaryenShrSInt32(),\n  RotlI32 = binaryen._BinaryenRotLInt32(),\n  RotrI32 = binaryen._BinaryenRotRInt32(),\n  EqI32 = binaryen._BinaryenEqInt32(),\n  NeI32 = binaryen._BinaryenNeInt32(),\n  LtI32 = binaryen._BinaryenLtSInt32(),\n  LtU32 = binaryen._BinaryenLtUInt32(),\n  LeI32 = binaryen._BinaryenLeSInt32(),\n  LeU32 = binaryen._BinaryenLeUInt32(),\n  GtI32 = binaryen._BinaryenGtSInt32(),\n  GtU32 = binaryen._BinaryenGtUInt32(),\n  GeI32 = binaryen._BinaryenGeSInt32(),\n  GeU32 = binaryen._BinaryenGeUInt32(),\n  AddI64 = binaryen._BinaryenAddInt64(),\n  SubI64 = binaryen._BinaryenSubInt64(),\n  MulI64 = binaryen._BinaryenMulInt64(),\n  DivI64 = binaryen._BinaryenDivSInt64(),\n  DivU64 = binaryen._BinaryenDivUInt64(),\n  RemI64 = binaryen._BinaryenRemSInt64(),\n  RemU64 = binaryen._BinaryenRemUInt64(),\n  AndI64 = binaryen._BinaryenAndInt64(),\n  OrI64 = binaryen._BinaryenOrInt64(),\n  XorI64 = binaryen._BinaryenXorInt64(),\n  ShlI64 = binaryen._BinaryenShlInt64(),\n  ShrU64 = binaryen._BinaryenShrUInt64(),\n  ShrI64 = binaryen._BinaryenShrSInt64(),\n  RotlI64 = binaryen._BinaryenRotLInt64(),\n  RotrI64 = binaryen._BinaryenRotRInt64(),\n  EqI64 = binaryen._BinaryenEqInt64(),\n  NeI64 = binaryen._BinaryenNeInt64(),\n  LtI64 = binaryen._BinaryenLtSInt64(),\n  LtU64 = binaryen._BinaryenLtUInt64(),\n  LeI64 = binaryen._BinaryenLeSInt64(),\n  LeU64 = binaryen._BinaryenLeUInt64(),\n  GtI64 = binaryen._BinaryenGtSInt64(),\n  GtU64 = binaryen._BinaryenGtUInt64(),\n  GeI64 = binaryen._BinaryenGeSInt64(),\n  GeU64 = binaryen._BinaryenGeUInt64(),\n  AddF32 = binaryen._BinaryenAddFloat32(),\n  SubF32 = binaryen._BinaryenSubFloat32(),\n  MulF32 = binaryen._BinaryenMulFloat32(),\n  DivF32 = binaryen._BinaryenDivFloat32(),\n  CopysignF32 = binaryen._BinaryenCopySignFloat32(),\n  MinF32 = binaryen._BinaryenMinFloat32(),\n  MaxF32 = binaryen._BinaryenMaxFloat32(),\n  EqF32 = binaryen._BinaryenEqFloat32(),\n  NeF32 = binaryen._BinaryenNeFloat32(),\n  LtF32 = binaryen._BinaryenLtFloat32(),\n  LeF32 = binaryen._BinaryenLeFloat32(),\n  GtF32 = binaryen._BinaryenGtFloat32(),\n  GeF32 = binaryen._BinaryenGeFloat32(),\n  AddF64 = binaryen._BinaryenAddFloat64(),\n  SubF64 = binaryen._BinaryenSubFloat64(),\n  MulF64 = binaryen._BinaryenMulFloat64(),\n  DivF64 = binaryen._BinaryenDivFloat64(),\n  CopysignF64 = binaryen._BinaryenCopySignFloat64(),\n  MinF64 = binaryen._BinaryenMinFloat64(),\n  MaxF64 = binaryen._BinaryenMaxFloat64(),\n  EqF64 = binaryen._BinaryenEqFloat64(),\n  NeF64 = binaryen._BinaryenNeFloat64(),\n  LtF64 = binaryen._BinaryenLtFloat64(),\n  LeF64 = binaryen._BinaryenLeFloat64(),\n  GtF64 = binaryen._BinaryenGtFloat64(),\n  GeF64 = binaryen._BinaryenGeFloat64(),\n\n  // see: https://github.com/WebAssembly/simd\n  EqI8x16 = binaryen._BinaryenEqVecI8x16(),\n  NeI8x16 = binaryen._BinaryenNeVecI8x16(),\n  LtI8x16 = binaryen._BinaryenLtSVecI8x16(),\n  LtU8x16 = binaryen._BinaryenLtUVecI8x16(),\n  LeI8x16 = binaryen._BinaryenLeSVecI8x16(),\n  LeU8x16 = binaryen._BinaryenLeUVecI8x16(),\n  GtI8x16 = binaryen._BinaryenGtSVecI8x16(),\n  GtU8x16 = binaryen._BinaryenGtUVecI8x16(),\n  GeI8x16 = binaryen._BinaryenGeSVecI8x16(),\n  GeU8x16 = binaryen._BinaryenGeUVecI8x16(),\n  EqI16x8 = binaryen._BinaryenEqVecI16x8(),\n  NeI16x8 = binaryen._BinaryenNeVecI16x8(),\n  LtI16x8 = binaryen._BinaryenLtSVecI16x8(),\n  LtU16x8 = binaryen._BinaryenLtUVecI16x8(),\n  LeI16x8 = binaryen._BinaryenLeSVecI16x8(),\n  LeU16x8 = binaryen._BinaryenLeUVecI16x8(),\n  GtI16x8 = binaryen._BinaryenGtSVecI16x8(),\n  GtU16x8 = binaryen._BinaryenGtUVecI16x8(),\n  GeI16x8 = binaryen._BinaryenGeSVecI16x8(),\n  GeU16x8 = binaryen._BinaryenGeUVecI16x8(),\n  EqI32x4 = binaryen._BinaryenEqVecI32x4(),\n  NeI32x4 = binaryen._BinaryenNeVecI32x4(),\n  LtI32x4 = binaryen._BinaryenLtSVecI32x4(),\n  LtU32x4 = binaryen._BinaryenLtUVecI32x4(),\n  LeI32x4 = binaryen._BinaryenLeSVecI32x4(),\n  LeU32x4 = binaryen._BinaryenLeUVecI32x4(),\n  GtI32x4 = binaryen._BinaryenGtSVecI32x4(),\n  GtU32x4 = binaryen._BinaryenGtUVecI32x4(),\n  GeI32x4 = binaryen._BinaryenGeSVecI32x4(),\n  GeU32x4 = binaryen._BinaryenGeUVecI32x4(),\n  EqF32x4 = binaryen._BinaryenEqVecF32x4(),\n  NeF32x4 = binaryen._BinaryenNeVecF32x4(),\n  LtF32x4 = binaryen._BinaryenLtVecF32x4(),\n  LeF32x4 = binaryen._BinaryenLeVecF32x4(),\n  GtF32x4 = binaryen._BinaryenGtVecF32x4(),\n  GeF32x4 = binaryen._BinaryenGeVecF32x4(),\n  EqF64x2 = binaryen._BinaryenEqVecF64x2(),\n  NeF64x2 = binaryen._BinaryenNeVecF64x2(),\n  LtF64x2 = binaryen._BinaryenLtVecF64x2(),\n  LeF64x2 = binaryen._BinaryenLeVecF64x2(),\n  GtF64x2 = binaryen._BinaryenGtVecF64x2(),\n  GeF64x2 = binaryen._BinaryenGeVecF64x2(),\n  AndV128 = binaryen._BinaryenAndVec128(),\n  OrV128 = binaryen._BinaryenOrVec128(),\n  XorV128 = binaryen._BinaryenXorVec128(),\n  AndNotV128 = binaryen._BinaryenAndNotVec128(),\n  AddI8x16 = binaryen._BinaryenAddVecI8x16(),\n  AddSatI8x16 = binaryen._BinaryenAddSatSVecI8x16(),\n  AddSatU8x16 = binaryen._BinaryenAddSatUVecI8x16(),\n  SubI8x16 = binaryen._BinaryenSubVecI8x16(),\n  SubSatI8x16 = binaryen._BinaryenSubSatSVecI8x16(),\n  SubSatU8x16 = binaryen._BinaryenSubSatUVecI8x16(),\n  MulI8x16 = binaryen._BinaryenMulVecI8x16(),\n  MinI8x16 = binaryen._BinaryenMinSVecI8x16(),\n  MinU8x16 = binaryen._BinaryenMinUVecI8x16(),\n  MaxI8x16 = binaryen._BinaryenMaxSVecI8x16(),\n  MaxU8x16 = binaryen._BinaryenMaxUVecI8x16(),\n  AddI16x8 = binaryen._BinaryenAddVecI16x8(),\n  AddSatI16x8 = binaryen._BinaryenAddSatSVecI16x8(),\n  AddSatU16x8 = binaryen._BinaryenAddSatUVecI16x8(),\n  SubI16x8 = binaryen._BinaryenSubVecI16x8(),\n  SubSatI16x8 = binaryen._BinaryenSubSatSVecI16x8(),\n  SubSatU16x8 = binaryen._BinaryenSubSatUVecI16x8(),\n  MulI16x8 = binaryen._BinaryenMulVecI16x8(),\n  MinI16x8 = binaryen._BinaryenMinSVecI16x8(),\n  MinU16x8 = binaryen._BinaryenMinUVecI16x8(),\n  MaxI16x8 = binaryen._BinaryenMaxSVecI16x8(),\n  MaxU16x8 = binaryen._BinaryenMaxUVecI16x8(),\n  AddI32x4 = binaryen._BinaryenAddVecI32x4(),\n  SubI32x4 = binaryen._BinaryenSubVecI32x4(),\n  MulI32x4 = binaryen._BinaryenMulVecI32x4(),\n  MinI32x4 = binaryen._BinaryenMinSVecI32x4(),\n  MinU32x4 = binaryen._BinaryenMinUVecI32x4(),\n  MaxI32x4 = binaryen._BinaryenMaxSVecI32x4(),\n  MaxU32x4 = binaryen._BinaryenMaxUVecI32x4(),\n  DotI16x8 = binaryen._BinaryenDotSVecI16x8ToVecI32x4(),\n  AddI64x2 = binaryen._BinaryenAddVecI64x2(),\n  SubI64x2 = binaryen._BinaryenSubVecI64x2(),\n  AddF32x4 = binaryen._BinaryenAddVecF32x4(),\n  SubF32x4 = binaryen._BinaryenSubVecF32x4(),\n  MulF32x4 = binaryen._BinaryenMulVecF32x4(),\n  DivF32x4 = binaryen._BinaryenDivVecF32x4(),\n  MinF32x4 = binaryen._BinaryenMinVecF32x4(),\n  MaxF32x4 = binaryen._BinaryenMaxVecF32x4(),\n  AddF64x2 = binaryen._BinaryenAddVecF64x2(),\n  SubF64x2 = binaryen._BinaryenSubVecF64x2(),\n  MulF64x2 = binaryen._BinaryenMulVecF64x2(),\n  DivF64x2 = binaryen._BinaryenDivVecF64x2(),\n  MinF64x2 = binaryen._BinaryenMinVecF64x2(),\n  MaxF64x2 = binaryen._BinaryenMaxVecF64x2(),\n  NarrowI16x8ToI8x16 = binaryen._BinaryenNarrowSVecI16x8ToVecI8x16(),\n  NarrowU16x8ToU8x16 = binaryen._BinaryenNarrowUVecI16x8ToVecI8x16(),\n  NarrowI32x4ToI16x8 = binaryen._BinaryenNarrowSVecI32x4ToVecI16x8(),\n  NarrowU32x4ToU16x8 = binaryen._BinaryenNarrowUVecI32x4ToVecI16x8(),\n  SwizzleV8x16 = binaryen._BinaryenSwizzleVec8x16()\n}\n\nexport enum HostOp {\n  MemorySize = binaryen._BinaryenMemorySize(),\n  MemoryGrow = binaryen._BinaryenMemoryGrow(),\n}\n\nexport enum AtomicRMWOp {\n  Add = binaryen._BinaryenAtomicRMWAdd(),\n  Sub = binaryen._BinaryenAtomicRMWSub(),\n  And = binaryen._BinaryenAtomicRMWAnd(),\n  Or = binaryen._BinaryenAtomicRMWOr(),\n  Xor = binaryen._BinaryenAtomicRMWXor(),\n  Xchg = binaryen._BinaryenAtomicRMWXchg()\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneI8x16 = binaryen._BinaryenExtractLaneSVecI8x16(),\n  ExtractLaneU8x16 = binaryen._BinaryenExtractLaneUVecI8x16(),\n  ExtractLaneI16x8 = binaryen._BinaryenExtractLaneSVecI16x8(),\n  ExtractLaneU16x8 = binaryen._BinaryenExtractLaneUVecI16x8(),\n  ExtractLaneI32x4 = binaryen._BinaryenExtractLaneVecI32x4(),\n  ExtractLaneI64x2 = binaryen._BinaryenExtractLaneVecI64x2(),\n  ExtractLaneF32x4 = binaryen._BinaryenExtractLaneVecF32x4(),\n  ExtractLaneF64x2 = binaryen._BinaryenExtractLaneVecF64x2(),\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneI8x16 = binaryen._BinaryenReplaceLaneVecI8x16(),\n  ReplaceLaneI16x8 = binaryen._BinaryenReplaceLaneVecI16x8(),\n  ReplaceLaneI32x4 = binaryen._BinaryenReplaceLaneVecI32x4(),\n  ReplaceLaneI64x2 = binaryen._BinaryenReplaceLaneVecI64x2(),\n  ReplaceLaneF32x4 = binaryen._BinaryenReplaceLaneVecF32x4(),\n  ReplaceLaneF64x2 = binaryen._BinaryenReplaceLaneVecF64x2()\n}\n\nexport enum SIMDShiftOp {\n  ShlI8x16 = binaryen._BinaryenShlVecI8x16(),\n  ShrI8x16 = binaryen._BinaryenShrSVecI8x16(),\n  ShrU8x16 = binaryen._BinaryenShrUVecI8x16(),\n  ShlI16x8 = binaryen._BinaryenShlVecI16x8(),\n  ShrI16x8 = binaryen._BinaryenShrSVecI16x8(),\n  ShrU16x8 = binaryen._BinaryenShrUVecI16x8(),\n  ShlI32x4 = binaryen._BinaryenShlVecI32x4(),\n  ShrI32x4 = binaryen._BinaryenShrSVecI32x4(),\n  ShrU32x4 = binaryen._BinaryenShrUVecI32x4(),\n  ShlI64x2 = binaryen._BinaryenShlVecI64x2(),\n  ShrI64x2 = binaryen._BinaryenShrSVecI64x2(),\n  ShrU64x2 = binaryen._BinaryenShrUVecI64x2()\n}\n\nexport enum SIMDTernaryOp {\n  Bitselect = binaryen._BinaryenBitselectVec128(),\n  QFMAF32x4 = binaryen._BinaryenQFMAVecF32x4(),\n  QFMSF32x4 = binaryen._BinaryenQFMSVecF32x4(),\n  QFMAF64x2 = binaryen._BinaryenQFMAVecF64x2(),\n  QFMSF64x2 = binaryen._BinaryenQFMSVecF64x2()\n}\n\nexport enum SIMDLoadOp {\n  LoadSplatV8x16 = binaryen._BinaryenLoadSplatVec8x16(),\n  LoadSplatV16x8 = binaryen._BinaryenLoadSplatVec16x8(),\n  LoadSplatV32x4 = binaryen._BinaryenLoadSplatVec32x4(),\n  LoadSplatV64x2 = binaryen._BinaryenLoadSplatVec64x2(),\n  LoadI8ToI16x8 = binaryen._BinaryenLoadExtSVec8x8ToVecI16x8(),\n  LoadU8ToU16x8 = binaryen._BinaryenLoadExtUVec8x8ToVecI16x8(),\n  LoadI16ToI32x4 = binaryen._BinaryenLoadExtSVec16x4ToVecI32x4(),\n  LoadU16ToU32x4 = binaryen._BinaryenLoadExtUVec16x4ToVecI32x4(),\n  LoadI32ToI64x2 = binaryen._BinaryenLoadExtSVec32x2ToVecI64x2(),\n  LoadU32ToU64x2 = binaryen._BinaryenLoadExtUVec32x2ToVecI64x2()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private lit: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = binaryen._BinaryenModuleCreate();\n    module.lit = binaryen._malloc(binaryen._BinaryenSizeofLiteral());\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var module = new Module();\n    var cArr = allocU8Array(buffer);\n    module.ref = binaryen._BinaryenModuleRead(cArr, buffer.length);\n    binaryen._free(changetype<usize>(cArr));\n    module.lit = binaryen._malloc(binaryen._BinaryenSizeofLiteral());\n    return module;\n  }\n\n  private constructor() { }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat32(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    binaryen._BinaryenLiteralFloat64(out, value);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) binaryen.__i32_store8(out + i, bytes[i]);\n    binaryen._BinaryenLiteralVec128(out, out);\n    return binaryen._BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenUnary(this.ref, op, expr);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenBinary(this.ref, op, left, right);\n  }\n\n  host(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  local_get(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalGet(this.ref, index, type);\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef,\n    type: NativeType = NativeType.Auto\n  ): ExpressionRef {\n    if (type == NativeType.Auto) type = binaryen._BinaryenExpressionGetType(value);\n    return binaryen._BinaryenLocalTee(this.ref, index, value, type);\n  }\n\n  global_get(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return binaryen._BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    if (type < NativeType.None || type > NativeType.V128) throw new Error(\"here: \" + type);\n    return binaryen._BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  atomic_fence(): ExpressionRef {\n    return binaryen._BinaryenAtomicFence(this.ref);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    var ret = binaryen._BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenDrop(this.ref, expression);\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return binaryen._BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return binaryen._BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return binaryen._BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = this.allocStringCached(defaultName);\n    var ret = binaryen._BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType)\n      : binaryen._BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n      binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    return this.call(target, operands, returnType, true);\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: NativeType,\n    results: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cArr = allocPtrArray(operands);\n    var ret = isReturn\n      ? binaryen._BinaryenReturnCallIndirect(this.ref, index, cArr, operands && operands.length || 0, params, results)\n      : binaryen._BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, params, results);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  return_call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    params: NativeType,\n    results: NativeType\n  ): ExpressionRef {\n    return this.call_indirect(index, operands, params, results, true);\n  }\n\n  unreachable(): ExpressionRef {\n    return binaryen._BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // exception handling\n\n  try(\n    body: ExpressionRef,\n    catchBody: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenTry(this.ref, body, catchBody);\n  }\n\n  throw(\n    eventName: string,\n    operands: ExpressionRef[]\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(eventName);\n    var cArr = allocPtrArray(operands);\n    var ret = binaryen._BinaryenThrow(this.ref, cStr, cArr, operands.length);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  rethrow(\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenRethrow(this.ref, exnref);\n  }\n\n  br_on_exn(\n    name: string,\n    eventName: string,\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    var cStr1 = this.allocStringCached(name);\n    var cStr2 = this.allocStringCached(eventName);\n    return binaryen._BinaryenBrOnExn(this.ref, cStr1, cStr2, exnref);\n  }\n\n  // push / pop (multi value?)\n\n  push(\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenPush(this.ref, value);\n  }\n\n  pop(\n    type: NativeType\n  ): ExpressionRef {\n    return binaryen._BinaryenPop(this.ref, type);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    var ret = binaryen._BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  simd_ternary(\n    op: SIMDTernaryOp,\n    a: ExpressionRef,\n    b: ExpressionRef,\n    c: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDTernary(this.ref, op, a, b, c);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  simd_load(\n    op: SIMDLoadOp,\n    ptr: ExpressionRef,\n    offset: u32,\n    align: u32\n  ): ExpressionRef {\n    return binaryen._BinaryenSIMDLoad(this.ref, op, offset, align, ptr);\n  }\n\n  // globals\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddGlobal(this.ref, cStr, type, mutable, initializer);\n  }\n\n  getGlobal(\n    name: string\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetGlobal(this.ref, cStr);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  // events\n\n  addEvent(\n    name: string,\n    attribute: u32,\n    params: NativeType,\n    results: NativeType\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenAddEvent(this.ref, cStr, attribute, params, results);\n  }\n\n  getEvent(\n    name: string\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetEvent(this.ref, cStr);\n  }\n\n  removeEvent(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveEvent(this.ref, cStr);\n  }\n\n  // functions\n\n  addFunction(\n    name: string,\n    params: NativeType,\n    results: NativeType,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(varTypes);\n    var ret = binaryen._BinaryenAddFunction(this.ref, cStr, params, results, cArr, varTypes ? varTypes.length : 0, body);\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  getFunction(\n    name: string\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    return binaryen._BinaryenGetFunction(this.ref, cStr);\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    binaryen._BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocI32Array(paramTypes);\n    var ret = binaryen._BinaryenAddFunction(this.ref,\n      tempName,\n      createType(paramTypes),\n      result,\n      0, 0,\n      body\n    );\n    binaryen._free(cArr);\n    return ret;\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    binaryen._BinaryenRemoveFunction(this.ref, tempName);\n  }\n\n  setStart(func: FunctionRef): void {\n    binaryen._BinaryenSetStart(this.ref, func);\n  }\n\n  // exports\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  addEventExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return binaryen._BinaryenAddEventExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    binaryen._BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  // imports\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    params: NativeType,\n    results: NativeType\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, params, results);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType,\n    mutable: bool = false\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType, mutable);\n  }\n\n  addEventImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    attribute: u32,\n    params: NativeType,\n    results: NativeType\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    binaryen._BinaryenAddEventImport(this.ref, cStr1, cStr2, cStr3, attribute, params, results);\n  }\n\n  // memory\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Uint8Array(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocI32Array(offs);\n    var cArr4 = allocI32Array(sizs);\n    binaryen._BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\n    binaryen._free(cArr4);\n    binaryen._free(cArr3);\n    binaryen._free(cArr2);\n    binaryen._free(cArr1);\n    for (let i = k - 1; i >= 0; --i) binaryen._free(segs[i]);\n  }\n\n  // table\n\n  /** Unlimited table constant. */\n  static readonly UNLIMITED_TABLE: Index = <Index>-1;\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[],\n    offset: ExpressionRef\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocI32Array(names);\n    binaryen._BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames, offset);\n    binaryen._free(cArr);\n  }\n\n  // sections\n\n  addCustomSection(name: string, contents: Uint8Array): void {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocU8Array(contents);\n    binaryen._BinaryenAddCustomSection(this.ref, cStr, cArr, contents.length);\n    binaryen._free(cArr);\n  }\n\n  // meta\n\n  getOptimizeLevel(): i32 {\n    return binaryen._BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    binaryen._BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return binaryen._BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    binaryen._BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    binaryen._BinaryenSetDebugInfo(on);\n  }\n\n  getFeatures(): FeatureFlags {\n    return binaryen._BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: FeatureFlags): void {\n    binaryen._BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      binaryen._BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      binaryen._BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    if (func) {\n      binaryen._BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n    } else {\n      binaryen._BinaryenModuleRunPasses(this.ref, cArr, numNames);\n    }\n    binaryen._free(cArr);\n    for (let i = numNames; i >= 0; --i) binaryen._free(names[i]);\n  }\n\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = binaryen._BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = binaryen._BinaryenGetShrinkLevel();\n    var previousDebugInfo = binaryen._BinaryenGetDebugInfo();\n    binaryen._BinaryenSetOptimizeLevel(4);\n    binaryen._BinaryenSetShrinkLevel(0);\n    binaryen._BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = binaryen._BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      this.cachedPrecomputeNames = names = allocI32Array([\n        this.allocStringCached(\"vacuum\"),\n        this.allocStringCached(\"precompute\")\n      ]);\n    }\n    binaryen._BinaryenFunctionRunPasses(func, this.ref, names, 2);\n    expr = binaryen._BinaryenFunctionGetBody(func);\n    if (binaryen._BinaryenExpressionGetId(expr) == ExpressionId.Return) {\n      expr = binaryen._BinaryenReturnGetValue(expr);\n    }\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    binaryen._BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    binaryen._BinaryenSetShrinkLevel(previousShrinkLevel);\n    binaryen._BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return binaryen._BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    binaryen._BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(binaryen._BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      binaryen._BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = binaryen.__i32_load(out);\n      let binaryLen = binaryen.__i32_load(out + 4);\n      sourceMapPtr = binaryen.__i32_load(out + 8);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryLen);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) binaryen._free(cStr);\n      if (binaryPtr) binaryen._free(binaryPtr);\n      if (sourceMapPtr) binaryen._free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str == null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    for (let ptr of this.cachedStrings.values()) binaryen._free(ptr);\n    this.cachedStrings = new Map();\n    binaryen._free(this.lit);\n    binaryen._free(this.cachedPrecomputeNames);\n    this.cachedPrecomputeNames = 0;\n    binaryen._BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n    switch (binaryen._BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (binaryen._BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.i32(binaryen._BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.i64(\n              binaryen._BinaryenConstGetValueI64Low(expr),\n              binaryen._BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.f32(binaryen._BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.f64(binaryen._BinaryenConstGetValueF64(expr));\n          }\n          case NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          // Not possible to clone an anyref as it is opaque\n          case NativeType.Anyref: {\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return binaryen._BinaryenLocalGet(this.ref,\n          binaryen._BinaryenLocalGetGetIndex(expr),\n          binaryen._BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = binaryen._BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return binaryen._BinaryenGlobalGet(this.ref, globalName, binaryen._BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          binaryen._BinaryenLoadIsAtomic(expr)\n            ? binaryen._BinaryenAtomicLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : binaryen._BinaryenLoad(this.ref,\n                binaryen._BinaryenLoadGetBytes(expr),\n                binaryen._BinaryenLoadIsSigned(expr) ? 1 : 0,\n                binaryen._BinaryenLoadGetOffset(expr),\n                binaryen._BinaryenLoadGetAlign(expr),\n                binaryen._BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return binaryen._BinaryenUnary(this.ref, binaryen._BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(binaryen._BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(binaryen._BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return binaryen._BinaryenBinary(this.ref, binaryen._BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    var ret = binaryen._BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    binaryen._free(cStr);\n    return ret;\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(binaryen._BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    binaryen._BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// types\n\nexport function createType(types: NativeType[] | null): NativeType {\n  if (!types) return NativeType.None;\n  switch (types.length) {\n    case 0: return NativeType.None;\n    case 1: return types[0];\n  }\n  var cArr = allocI32Array(types);\n  var ret = binaryen._BinaryenTypeCreate(cArr, types.length);\n  binaryen._free(cArr);\n  return ret;\n}\n\nexport function expandType(type: NativeType): NativeType[] {\n  var arity = binaryen._BinaryenTypeArity(type);\n  var cArr = binaryen._malloc(<usize>arity << 2);\n  binaryen._BinaryenTypeExpand(type, cArr);\n  var types = new Array(arity);\n  for (let i = 0; i < arity; ++i) {\n    types[i] = binaryen.__i32_load(cArr + (<usize>i << 2));\n  }\n  binaryen._free(cArr);\n  return types;\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return binaryen._BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return binaryen._BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return binaryen._BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return binaryen._BinaryenConstGetValueF64(expr);\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return binaryen._BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return binaryen._BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return binaryen._BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return binaryen._BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return binaryen._BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return binaryen._BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return binaryen._BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenCallGetOperand(expr, index);\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return binaryen._BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return binaryen._BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return binaryen._BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(binaryen._BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return binaryen._BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(binaryen._BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParams(func: FunctionRef): Index {\n  return binaryen._BinaryenFunctionGetParams(func);\n}\n\nexport function getFunctionResults(func: FunctionRef): NativeType {\n  return binaryen._BinaryenFunctionGetResults(func);\n}\n\nexport function getFunctionVars(func: FunctionRef): NativeType {\n  // TODO: unify this on Binaryen's side?\n  var count = binaryen._BinaryenFunctionGetNumVars(func);\n  var types = new Array<NativeType>(count);\n  for (let i = 0; i < count; ++i) {\n    types[i] = binaryen._BinaryenFunctionGetVar(func, i);\n  }\n  return createType(types);\n}\n\n// globals\n\nexport function getGlobalName(global: GlobalRef): string | null {\n  return readString(binaryen._BinaryenGlobalGetName(global));\n}\n\nexport function getGlobalType(global: GlobalRef): NativeType {\n  return binaryen._BinaryenGlobalGetType(global);\n}\n\nexport function isGlobalMutable(global: GlobalRef): bool {\n  return binaryen._BinaryenGlobalIsMutable(global);\n}\n\nexport function getGlobalInit(global: GlobalRef): ExpressionRef {\n  return binaryen._BinaryenGlobalGetInit(global);\n}\n\n// events\n\nexport function getEventName(event: EventRef): string | null {\n  return readString(binaryen._BinaryenEventGetName(event));\n}\n\nexport function getEventAttribute(event: EventRef): u32 {\n  return binaryen._BinaryenEventGetAttribute(event);\n}\n\nexport function getEventType(event: EventRef): string | null {\n  return readString(binaryen._BinaryenEventGetType(event));\n}\n\nexport function getEventParamCount(event: EventRef): Index {\n  return binaryen._BinaryenEventGetNumParams(event);\n}\n\nexport function getEventParam(event: EventRef, index: Index): NativeType {\n  return binaryen._BinaryenEventGetParam(event, index);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = binaryen._RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    binaryen._RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return binaryen._RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    binaryen._RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    binaryen._free(cArr);\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return binaryen._RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\nexport function hasSideEffects(expr: ExpressionRef): bool {\n  // TODO: there's more\n  switch (binaryen._BinaryenExpressionGetId(expr)) {\n    case ExpressionId.LocalGet:\n    case ExpressionId.GlobalGet:\n    case ExpressionId.Const:\n    case ExpressionId.Nop: {\n      return false;\n    }\n    case ExpressionId.Block: {\n      for (let i = 0, k = binaryen._BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n        if (hasSideEffects(binaryen._BinaryenBlockGetChild(expr, i))) return true;\n      }\n      return false;\n    }\n    case ExpressionId.If: {\n      return hasSideEffects(binaryen._BinaryenIfGetCondition(expr))\n          || hasSideEffects(binaryen._BinaryenIfGetIfTrue(expr))\n          || hasSideEffects(binaryen._BinaryenIfGetIfFalse(expr));\n    }\n    case ExpressionId.Unary: {\n      return hasSideEffects(binaryen._BinaryenUnaryGetValue(expr));\n    }\n    case ExpressionId.Binary: {\n      return hasSideEffects(binaryen._BinaryenBinaryGetLeft(expr))\n          || hasSideEffects(binaryen._BinaryenBinaryGetRight(expr));\n    }\n    case ExpressionId.Drop: {\n      return hasSideEffects(binaryen._BinaryenDropGetValue(expr));\n    }\n    case ExpressionId.Select: {\n      return hasSideEffects(binaryen._BinaryenSelectGetIfTrue(expr))\n          || hasSideEffects(binaryen._BinaryenSelectGetIfFalse(expr))\n          || hasSideEffects(binaryen._BinaryenSelectGetCondition(expr));\n    }\n  }\n  return true;\n}\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = binaryen._malloc(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    binaryen.__i32_store8(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = binaryen._malloc(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    binaryen.__i32_store(idx, val);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = binaryen._malloc(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      binaryen.__i32_store8(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      binaryen.__i32_store8(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      binaryen.__i32_store8(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      binaryen.__i32_store8(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      binaryen.__i32_store8(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      binaryen.__i32_store8(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      binaryen.__i32_store8(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  binaryen.__i32_store8(idx, 0);\n  return ptr;\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = binaryen.__i32_load8_u(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = binaryen.__i32_load8_u(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = binaryen.__i32_load8_u(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = binaryen.__i32_load8_u(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = binaryen.__i32_load8_u(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = binaryen.__i32_load8_u(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (binaryen._BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\n\n  switch (binaryen._BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return binaryen._BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!binaryen._BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = binaryen._BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(binaryen._BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n\n/** Traverses all expression members of an expression, calling the given visitor. */\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.Block: {\n      for (let i = 0, n = binaryen._BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n        visit(binaryen._BinaryenBlockGetChild(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      visit(binaryen._BinaryenIfGetCondition(expr), data);\n      visit(binaryen._BinaryenIfGetIfTrue(expr), data);\n      let ifFalse = binaryen._BinaryenIfGetIfFalse(expr);\n      if (ifFalse) visit(ifFalse, data);\n      break;\n    }\n    case ExpressionId.Loop: {\n      visit(binaryen._BinaryenLoopGetBody(expr), data);\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = binaryen._BinaryenBreakGetCondition(expr);\n      if (condition) visit(condition, data);\n      break;\n    }\n    case ExpressionId.Switch: {\n      visit(binaryen._BinaryenSwitchGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Call: {\n      for (let i = 0, n = binaryen._BinaryenCallGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenCallGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      for (let i = 0, n = binaryen._BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenCallIndirectGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      visit(binaryen._BinaryenLocalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      visit(binaryen._BinaryenGlobalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Load: {\n      visit(binaryen._BinaryenLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.Store: {\n      visit(binaryen._BinaryenStoreGetPtr(expr), data);\n      visit(binaryen._BinaryenStoreGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      visit(binaryen._BinaryenAtomicRMWGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicRMWGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      visit(binaryen._BinaryenAtomicCmpxchgGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicCmpxchgGetExpected(expr), data);\n      visit(binaryen._BinaryenAtomicCmpxchgGetReplacement(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      visit(binaryen._BinaryenAtomicWaitGetPtr(expr), data);\n      visit(binaryen._BinaryenAtomicWaitGetExpected(expr), data);\n      visit(binaryen._BinaryenAtomicWaitGetTimeout(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      visit(binaryen._BinaryenAtomicNotifyGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicFence: {\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      visit(binaryen._BinaryenSIMDExtractGetVec(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      visit(binaryen._BinaryenSIMDReplaceGetVec(expr), data);\n      visit(binaryen._BinaryenSIMDReplaceGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      visit(binaryen._BinaryenSIMDShuffleGetLeft(expr), data);\n      visit(binaryen._BinaryenSIMDShuffleGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDTernary: {\n      visit(binaryen._BinaryenSIMDTernaryGetA(expr), data);\n      visit(binaryen._BinaryenSIMDTernaryGetB(expr), data);\n      visit(binaryen._BinaryenSIMDTernaryGetC(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      visit(binaryen._BinaryenSIMDShiftGetVec(expr), data);\n      visit(binaryen._BinaryenSIMDShiftGetShift(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDLoad: {\n      visit(binaryen._BinaryenSIMDLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      visit(binaryen._BinaryenMemoryInitGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryInitGetOffset(expr), data);\n      visit(binaryen._BinaryenMemoryInitGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      visit(binaryen._BinaryenMemoryCopyGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryCopyGetSource(expr), data);\n      visit(binaryen._BinaryenMemoryCopyGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      visit(binaryen._BinaryenMemoryFillGetDest(expr), data);\n      visit(binaryen._BinaryenMemoryFillGetValue(expr), data);\n      visit(binaryen._BinaryenMemoryFillGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.Try: {\n      visit(binaryen._BinaryenTryGetBody(expr), data);\n      visit(binaryen._BinaryenTryGetCatchBody(expr), data);\n      break;\n    }\n    case ExpressionId.Throw: {\n      for (let i = 0, n = binaryen._BinaryenThrowGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenThrowGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Rethrow: {\n      visit(binaryen._BinaryenRethrowGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.BrOnExn: {\n      visit(binaryen._BinaryenBrOnExnGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.Push: {\n      visit(binaryen._BinaryenPushGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Pop: {\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      visit(binaryen._BinaryenUnaryGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Binary: {\n      visit(binaryen._BinaryenBinaryGetLeft(expr), data);\n      visit(binaryen._BinaryenBinaryGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.Select: {\n      visit(binaryen._BinaryenSelectGetIfTrue(expr), data);\n      visit(binaryen._BinaryenSelectGetIfFalse(expr), data);\n      visit(binaryen._BinaryenSelectGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Drop: {\n      visit(binaryen._BinaryenDropGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Return: {\n      visit(binaryen._BinaryenReturnGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Host: {\n      for (let i = 0, n = binaryen._BinaryenHostGetNumOperands(expr); i < n; ++i) {\n        visit(binaryen._BinaryenHostGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    default: assert(false);\n  }\n  return true;\n}\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  createType\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // references\n\n  /** A host reference. */\n  ANYREF,\n  /** An internal exception reference. */\n  EXNREF,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type (either a class or a function type). */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10\n}\n\nconst v128_zero = new Uint8Array(16);\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    if (this.kind == TypeKind.VOID) return Type.auto;\n    return this;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    if (this.is(TypeFlags.INTEGER | TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) return !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n      // return this.signatureReference !== null; // TODO: closures\n    }\n    return false;\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.USIZE && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          } else if (this.kind == TypeKind.ANYREF && target.kind == TypeKind.ANYREF) {\n            return true;\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\n    else if (target.is(TypeFlags.REFERENCE)) return false;\n    if (this.is(TypeFlags.INTEGER)) {\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Tests if a value of this type can be changed to the target type using `changetype`. */\n  isChangeableTo(target: Type): bool {\n    if (this.is(TypeFlags.INTEGER) && target.is(TypeFlags.INTEGER)) {\n      let size = this.size;\n      return size == target.size && (size >= 32 || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED));\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(): string {\n    if (this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.internalName + \" | null\"\n          : classReference.internalName;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString() + \") | null\"\n          : signatureReference.toString();\n      }\n      // TODO: Reflect.apply(value, \"toString\", []) ?\n      assert(this.kind == TypeKind.ANYREF);\n      return \"anyref\";\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.ANYREF: return \"anyref\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return NativeType.I32;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.ANYREF: return NativeType.Anyref;\n      case TypeKind.EXNREF: return NativeType.Exnref;\n      case TypeKind.VOID: return NativeType.None;\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** A host reference. */\n  static readonly anyref: Type = new Type(TypeKind.ANYREF,\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** An internal exception reference. */\n  static readonly exnref: Type = new Type(TypeKind.EXNREF,\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n  /** The unique program id that represents this signature. */\n  id: u32 = 0;\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n  /** The program that created this signature. */\n  program: Program;\n\n  /** Constructs a new signature. */\n  constructor(\n    program: Program,\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.program = program;\n    this.hasRest = false;\n    this.type = program.options.usizeType.asFunction(this);\n\n    var signatureTypes = program.uniqueSignatures;\n    var length = signatureTypes.length;\n    for (let i = 0; i < length; i++) {\n      let compare = signatureTypes[i];\n      if (this.equals(compare)) {\n        this.id = compare.id;\n        return this;\n      }\n    }\n    program.uniqueSignatures.push(this);\n    this.id = program.nextSignatureId++;\n  }\n\n  get nativeParams(): NativeType {\n    var thisType = this.thisType;\n    var parameterTypes = this.parameterTypes;\n    var numParameterTypes = parameterTypes.length;\n    if (!numParameterTypes) {\n      if (!thisType) return NativeType.None;\n      return thisType.toNativeType();\n    }\n    if (thisType) {\n      let nativeTypes = new Array<NativeType>(1 + numParameterTypes);\n      nativeTypes[0] = thisType.toNativeType();\n      for (let i = 0; i < numParameterTypes; ++i) {\n        nativeTypes[i + 1] = parameterTypes[i].toNativeType();\n      }\n      return createType(nativeTypes);\n    }\n    return createType(typesToNativeTypes(parameterTypes));\n  }\n\n  get nativeResults(): NativeType {\n    return this.returnType.toNativeType();\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    return this.equals(target);\n  }\n\n  /** Tests to see if a signature equals another signature. */\n  equals(value: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = value.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != value.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = value.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = value.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(\"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString());\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.NULL:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function isIllegalVariableIdentifier(name: string): bool {\n  assert(name.length);\n  switch (name.charCodeAt(0)) {\n    case CharCode.d: return name == \"delete\";\n    case CharCode.f: return name == \"for\";\n    case CharCode.i: return name == \"instanceof\";\n    case CharCode.n: return name == \"null\";\n    case CharCode.v: return name == \"void\";\n  }\n  return false;\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics || new Array();\n\n    var end = this.end;\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (isDecimalDigit(chr)) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < end) {\n                chr = text.charCodeAt(this.pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    while (\n      ++this.pos < end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var end = this.end;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c) && quote != CharCode.BACKTICK) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.x: {\n        return this.readHexadecimalEscape(); // \\xDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var end = this.end;\n    var text = this.source.text;\n    var pos = this.pos;\n    if (pos + 1 < end && text.charCodeAt(pos) == CharCode._0) {\n      switch (text.charCodeAt(pos + 2) | 32) {\n        case CharCode.x:\n        case CharCode.b:\n        case CharCode.o: return true;\n      }\n    }\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || (c | 32) == CharCode.e) return false;\n      if (c != CharCode._ && (c < CharCode._0 || c > CharCode._9)) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 1) | 32) {\n        case CharCode.x: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    var sepEnd = start;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if ((c | 32) == CharCode.e) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readHexadecimalEscape(remain: i32 = 2): string {\n    var value = 0;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  readUnicodeEscape(): string {\n    return this.readHexadecimalEscape(4);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 0x10000\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 0x10000) >>> 10) | 0xD800,\n        ((value32 - 0x10000) & 1023) | 0xDC00\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition,\n  TypedElement,\n  FunctionTarget,\n  IndexSignature,\n  isTypedElement\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow\n} from \"./flow\";\n\nimport {\n  FunctionTypeNode,\n  ParameterKind,\n  TypeNode,\n  NodeKind,\n  NamedTypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  CommaExpression,\n  InstanceOfExpression,\n  TernaryExpression,\n  isTypeOmitted,\n  FunctionExpression,\n  NewExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonSymbols\n} from \"./common\";\n\nimport {\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  BuiltinSymbols\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  // ====================================================== Types ======================================================\n\n  /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: TypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        return this.resolveNamedType(\n          <NamedTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        return this.resolveFunctionType(\n          <FunctionTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves a {@link NamedTypeNode} to a concrete {@link Type}. */\n  private resolveNamedType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var nameNode = node.name;\n    var typeArgumentNodes = node.typeArguments;\n    var isSimpleType = !nameNode.next;\n\n    // Look up in contextual types if a simple type\n    if (isSimpleType) {\n      let simpleName = nameNode.identifier.text;\n      if (ctxTypes !== null && ctxTypes.has(simpleName)) {\n        let type = ctxTypes.get(simpleName)!;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (type.is(TypeFlags.REFERENCE)) return type.asNullable();\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, type.toString()\n            );\n          }\n        }\n        return type;\n      }\n    }\n\n    // Look up in context\n    var element = this.resolveTypeName(nameNode, ctxElement, reportMode);\n    if (!element) return null;\n\n    // Use shadow type if present (i.e. namespace sharing a type)\n    if (element.shadowType) {\n      element = element.shadowType;\n\n    } else {\n\n      // Handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, element.name + \"/i32\"\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // Handle classes\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          ctxElement,\n          makeMap<string,Type>(ctxTypes), // don't inherit\n          node,\n          reportMode\n        );\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // Handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n\n      // Shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = (<TypeDefinition>element).type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                nameNode.range, nameNode.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // Handle special built-in types\n      if (isSimpleType) {\n        switch (nameNode.identifier.symbol) {\n          case CommonSymbols.native: return this.resolveBuiltinNativeType(node, ctxElement, ctxTypes, reportMode);\n          case CommonSymbols.indexof: return this.resolveBuiltinIndexofType(node, ctxElement, ctxTypes, reportMode);\n          case CommonSymbols.valueof: return this.resolveBuiltinValueofType(node, ctxElement, ctxTypes, reportMode);\n          case CommonSymbols.returnof: return this.resolveBuiltinReturnTypeType(node, ctxElement, ctxTypes, reportMode);\n        }\n      }\n\n      // Resolve normally\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          ctxElement,\n          ctxTypes = makeMap(ctxTypes), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          node.range, nameNode.identifier.text\n        );\n      }\n      let type = this.resolveType(\n        (<TypeDefinition>element).typeNode,\n        element,\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (!type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              nameNode.range, nameNode.identifier.text\n            );\n          }\n        } else {\n          return type.asNullable();\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        nameNode.range, nameNode.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link FunctionTypeNode} to a concrete {@link Type}. */\n  private resolveFunctionType(\n    /** The type to resolve. */\n    node: FunctionTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n    }\n    var parameterNodes = node.parameters;\n    var numParameters = parameterNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterNode = parameterNodes[i];\n      switch (parameterNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterTypeNode = parameterNode.type;\n      if (isTypeOmitted(parameterTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            parameterTypeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        parameterTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (isTypeOmitted(returnTypeNode)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnTypeNode.range\n        );\n      }\n      returnType = Type.void;\n    } else {\n      returnType = this.resolveType(\n        returnTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!returnType) return null;\n    }\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return node.isNullable ? signature.type.asNullable() : signature.type;\n  }\n\n  private resolveBuiltinNativeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    switch (typeArgument.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return Type.u32;\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.F32: return Type.f32;\n      case TypeKind.F64: return Type.f64;\n      case TypeKind.V128: return Type.v128;\n      case TypeKind.VOID: return Type.void;\n      default: assert(false);\n    }\n    return null;\n  }\n\n  private resolveBuiltinIndexofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) {\n      if (overload.is(CommonFlags.STATIC)) {\n        assert(overload.signature.parameterTypes.length == 2);\n        return overload.signature.parameterTypes[1];\n      } else {\n        assert(overload.signature.parameterTypes.length == 1);\n        return overload.signature.parameterTypes[0];\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinValueofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) return overload.signature.returnType;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinReturnTypeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var signatureReference = typeArgument.signatureReference;\n    if (!signatureReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    return signatureReference.returnType;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    node: TypeName,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = ctxElement.lookup(node.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          node.range, node.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = node;\n    var next = node.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Type parameter nodes present. */\n    typeParameters: TypeParameterNode[],\n    /** Type argument nodes provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      this.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        argumentCount\n          ? Range.join(\n              (<NamedTypeNode[]>typeArgumentNodes)[0].range,\n              (<NamedTypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n            )\n          : assert(alternativeReportNode).range,\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\n        argumentCount.toString(10)\n      );\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            (<NamedTypeNode[]>typeArgumentNodes)[i],\n            ctxElement,\n            ctxTypes,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            ctxElement,\n            ctxTypes,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      ctxTypes.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves respectively infers the concrete instance of a function by call context. */\n  maybeInferCall(\n    node: CallExpression,\n    prototype: FunctionPrototype,\n    ctxFlow: Flow,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var typeArguments = node.typeArguments;\n\n    // resolve generic call if type arguments have been provided\n    if (typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            node.expression.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n      return this.resolveFunctionInclTypeArguments(\n        prototype,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        makeMap(ctxFlow.contextualTypeArguments), // don't inherit\n        node,\n        reportMode\n      );\n    }\n\n    // infer generic call if type arguments have been omitted\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let contextualTypeArguments = makeMap<string,Type>(ctxFlow.contextualTypeArguments);\n\n      // fill up contextual types with auto for each generic component\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let typeParameterNames = new Set<string>();\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        contextualTypeArguments.set(name, Type.auto);\n        typeParameterNames.add(name);\n      }\n\n      let parameterNodes = prototype.functionTypeNode.parameters;\n      let numParameters = parameterNodes.length;\n      let argumentNodes = node.arguments;\n      let numArguments = argumentNodes.length;\n\n      // infer types with generic components while updating contextual types\n      for (let i = 0; i < numParameters; ++i) {\n        let argumentExpression = i < numArguments ? argumentNodes[i] : parameterNodes[i].initializer;\n        if (!argumentExpression) { // missing initializer -> too few arguments\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              node.range, numParameters.toString(10), numArguments.toString(10)\n            );\n          }\n          return null;\n        }\n        let typeNode = parameterNodes[i].type;\n        if (typeNode.hasGenericComponent(typeParameterNodes)) {\n          let type = this.resolveExpression(argumentExpression, ctxFlow, Type.auto, ReportMode.SWALLOW);\n          if (type) this.propagateInferredGenericTypes(typeNode, type, ctxFlow, contextualTypeArguments, typeParameterNames);\n        }\n      }\n\n      // apply concrete types to the generic function signature\n      let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        if (contextualTypeArguments.has(name)) {\n          let inferredType = contextualTypeArguments.get(name)!;\n          if (inferredType != Type.auto) {\n            resolvedTypeArguments[i] = inferredType;\n            continue;\n          }\n        }\n        // unused template, e.g. `function test<T>(): void {...}` called as `test()`\n        // invalid because the type is effectively unknown inside the function body\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_argument_expected,\n            node.expression.range.atEnd\n          );\n        }\n        return null;\n      }\n      return this.resolveFunction(\n        prototype,\n        resolvedTypeArguments,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        reportMode\n      );\n    }\n\n    // otherwise resolve the non-generic call as usual\n    return this.resolveFunction(prototype, null, makeMap<string,Type>(), reportMode);\n  }\n\n  /** Updates contextual types with a possibly encapsulated inferred type. */\n  private propagateInferredGenericTypes(\n    /** The inferred type node. */\n    node: TypeNode,\n    /** The inferred type. */\n    type: Type,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual types, i.e. `T`, with unknown types initialized to `auto`. */\n    ctxTypes: Map<string,Type>,\n    /** The names of the type parameters being inferred. */\n    typeParameterNames: Set<string>\n  ): void {\n    if (node.kind == NodeKind.NAMEDTYPE) {\n      let typeArgumentNodes = (<NamedTypeNode>node).typeArguments;\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) { // foo<T>(bar: Array<T>)\n        let classReference = type.classReference;\n        if (classReference) {\n          let classPrototype = this.resolveTypeName((<NamedTypeNode>node).name, ctxFlow.actualFunction);\n          if (!classPrototype || classPrototype.kind != ElementKind.CLASS_PROTOTYPE) return;\n          if (classReference.prototype == <ClassPrototype>classPrototype) {\n            let typeArguments = classReference.typeArguments;\n            if (typeArguments !== null && typeArguments.length == typeArgumentNodes.length) {\n              for (let i = 0, k = typeArguments.length; i < k; ++i) {\n                this.propagateInferredGenericTypes(typeArgumentNodes[i], typeArguments[i], ctxFlow, ctxTypes, typeParameterNames);\n              }\n              return;\n            }\n          }\n        }\n      } else { // foo<T>(bar: T)\n        let name = (<NamedTypeNode>node).name.identifier.text;\n        if (ctxTypes.has(name)) {\n          let currentType = ctxTypes.get(name)!;\n          if (currentType == Type.auto || (typeParameterNames.has(name) && currentType.isAssignableTo(type))) {\n            ctxTypes.set(name, type);\n          }\n        }\n      }\n    } else if (node.kind == NodeKind.FUNCTIONTYPE) { // foo<T>(bar: (baz: T) => i32))\n      let parameterNodes = (<FunctionTypeNode>node).parameters;\n      if (parameterNodes !== null && parameterNodes.length) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          let parameterTypes = signatureReference.parameterTypes;\n          let thisType = signatureReference.thisType;\n          if (parameterTypes.length == parameterNodes.length && !thisType == !(<FunctionTypeNode>node).explicitThisType) {\n            for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n              this.propagateInferredGenericTypes(parameterNodes[i].type, parameterTypes[i], ctxFlow, ctxTypes, typeParameterNames);\n            }\n            this.propagateInferredGenericTypes((<FunctionTypeNode>node).returnType, signatureReference.returnType, ctxFlow, ctxTypes, typeParameterNames);\n            if (thisType) this.propagateInferredGenericTypes((<FunctionTypeNode>node).explicitThisType!, thisType, ctxFlow, ctxTypes, typeParameterNames);\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  /** Gets the concrete type of an element. */\n  getTypeOfElement(element: Element): Type | null {\n    var kind = element.kind;\n    if (kind == ElementKind.GLOBAL) {\n      if (!this.ensureResolvedLazyGlobal(<Global>element, ReportMode.SWALLOW)) return null;\n    }\n    if (isTypedElement(kind)) {\n      let type = (<TypedElement>element).type;\n      assert(type != Type.void);\n      let classReference = type.classReference;\n      if (classReference) {\n        let wrappedType = classReference.wrappedType;\n        if (wrappedType) type = wrappedType;\n      }\n      return type;\n    }\n    if (kind == ElementKind.FUNCTION_TARGET) return (<FunctionTarget>element).type;\n    return null;\n  }\n\n  /** Gets the element of a concrete type. */\n  getElementOfType(type: Type): Element | null {\n    if (type.is(TypeFlags.REFERENCE)) {\n      let classReference = type.classReference;\n      if (classReference) return classReference;\n      let signatureReference = assert(type.signatureReference);\n      return signatureReference.asFunctionTarget(this.program);\n    } else if (type != Type.void) {\n      let wrapperClasses = this.program.wrapperClasses;\n      assert(wrapperClasses.has(type));\n      return wrapperClasses.get(type)!;\n    }\n    return null;\n  }\n\n  // =================================================== Expressions ===================================================\n\n  /** Looks up the program element the specified expression refers to. */\n  lookupExpression(\n    /** The expression to look up. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.lookupAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.lookupBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.lookupCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.lookupCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.lookupElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.lookupFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.lookupIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.lookupThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.lookupSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.lookupInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.lookupLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.lookupNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.lookupPropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.lookupTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.lookupUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.lookupUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an expression to its static type. */\n  resolveExpression(\n    /** The expression to resolve. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.resolveCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.resolveFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.resolveIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxType, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.resolveInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.resolveNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.resolveTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified identifier expression refers to. */\n  lookupIdentifierExpression(\n    /** The expression to look up. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE:\n      case NodeKind.NULL: {\n        let type = this.resolveIdentifierExpression(node, ctxFlow, Type.auto, ctxElement, reportMode);\n        return type ? this.getElementOfType(type) : null;\n      }\n    }\n    var name = node.text;\n    var element: Element | null;\n    if (element = ctxFlow.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = ctxElement.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        node.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an identifier to its static type. */\n  private resolveIdentifierExpression(\n    /** The expression to resolve. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return Type.bool;\n      case NodeKind.NULL: {\n        let classReference = ctxType.classReference;\n        return ctxType.is(TypeFlags.REFERENCE) && classReference !== null\n          ? classReference.type.asNullable()\n          : this.program.options.usizeType; // TODO: anyref context?\n      }\n    }\n    var element = this.lookupIdentifierExpression(node, ctxFlow, ctxElement, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let instance = this.resolveFunction(<FunctionPrototype>element, null, makeMap(), reportMode);\n      if (!instance) return null;\n      element = instance;\n    }\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field or annotated `@lazy`. */\n  private ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var type: Type | null;\n    var typeNode = global.typeNode;\n    if (typeNode) {\n      type = this.resolveType(typeNode, global.parent, null, reportMode);\n    } else {\n      type = this.resolveExpression(assert(global.initializerNode), global.file.startFunction.flow, Type.auto, reportMode);\n    }\n    if (!type) return false;\n    global.setType(type); // also sets resolved\n    return true;\n  }\n\n  /** Looks up the program element the specified property access expression refers to. */\n  private lookupPropertyAccessExpression(\n    /** The expression to look up. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetNode = node.expression;\n    var target = this.lookupExpression(targetNode, ctxFlow, ctxType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = node.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.ENUMVALUE:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: { // someVar.prop\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // SomeClass.prop\n        let getterInstance = this.resolveFunction( // reports\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getterInstance) return null;\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: { // someInstance.prop\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: { // someInstance[x].prop\n        let elementExpression = assert(this.currentElementExpression);\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, parent.internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        let classReference = returnType.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(returnType)) {\n            classReference = wrapperClasses.get(returnType)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, returnType.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        }\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          if (members && members.has(propertyName)) {\n            this.currentThisExpression = targetNode;\n            this.currentElementExpression = null;\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members && members.has(propertyName)) {\n          this.currentThisExpression = targetNode;\n          this.currentElementExpression = null;\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        node.property.range, propertyName, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access expression to its static type. */\n  private resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupPropertyAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified element access expression refers to. */\n  private lookupElementAccessExpression(\n    /** The expression to look up. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = node.expression;\n    var targetType = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode);\n    if (!targetType) return null;\n    if (targetType.is(TypeFlags.REFERENCE)) {\n      let classReference = targetType.classReference;\n      if (classReference) {\n        let indexSignature = classReference.indexSignature;\n        if (indexSignature) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = node.elementExpression;\n          return indexSignature;\n        }\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        targetExpression.range, targetType.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an element access expression to its static type. */\n  private resolveElementAccessExpression(\n    /** The expression to resolve. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupElementAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: I64,\n    /** Contextual type. */\n    ctxType: Type\n  ): Type {\n    if (!ctxType.is(TypeFlags.REFERENCE)) {\n      // compile to contextual type if matching\n      switch (ctxType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64; // TODO: u64 if positive and larger than i64?\n  }\n\n  /** Looks up the program element the specified assertion expression refers to. */\n  private lookupAssertionExpression(\n    /** The expression to look up. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (node.assertionKind == AssertionKind.NONNULL) {\n      return this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n    }\n    var type = this.resolveType(\n      assert(node.toType), // must be set if not NONNULL\n      ctxFlow.actualFunction,\n      ctxFlow.contextualTypeArguments,\n      reportMode\n    );\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    this.currentThisExpression = null;\n    this.currentElementExpression = null;\n    return null;\n  }\n\n  /** Resolves an assertion expression to its static type. */\n  private resolveAssertionExpression(\n    /** The expression to resolve. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    if (node.assertionKind == AssertionKind.NONNULL) {\n      let type = this.resolveExpression(node.expression, ctxFlow, ctxType, reportMode);\n      return type ? type.nonNullableType : null;\n    }\n    return this.resolveType(\n      assert(node.toType), // must be set if not NONNULL\n      ctxFlow.actualFunction,\n      ctxFlow.contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Looks up the program element the specified unary prefix expression refers to. */\n  private lookupUnaryPrefixExpression(\n    /** The expression to look up. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPrefixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to its static type. */\n  private resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operand = node.operand;\n    var operator = node.operator;\n    switch (operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\n          return this.determineIntegerLiteralType(i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value), ctxType);\n        }\n        // fall-through\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPrefixToken(operator));\n            if (overload) return overload.signature.returnType;\n            let wrappedType = classReference.wrappedType;\n            if (wrappedType) type = wrappedType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n      case Token.EXCLAMATION: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool; // incl. references\n      }\n      case Token.TILDE: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, \"~\", type.toString()\n            );\n          }\n          return null;\n        }\n        return type.intType;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary postfix expression refers to. */\n  private lookupUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPostfixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary postfix expression to its static type. */\n  private resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operator = node.operator;\n    switch (operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPostfixToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified binary expression refers to. */\n  private lookupBinaryExpression(\n    /** The expression to look up. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveBinaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element; // otherwise void\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to its static type. */\n  private resolveBinaryExpression(\n    /** The expression to resolve. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var left = node.left;\n    var right = node.right;\n    var operator = node.operator;\n\n    switch (operator) {\n\n      // assignment: result is the target's type\n\n      case Token.EQUALS:\n      case Token.PLUS_EQUALS:\n      case Token.MINUS_EQUALS:\n      case Token.ASTERISK_EQUALS:\n      case Token.ASTERISK_ASTERISK_EQUALS:\n      case Token.SLASH_EQUALS:\n      case Token.PERCENT_EQUALS:\n      case Token.LESSTHAN_LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.AMPERSAND_EQUALS:\n      case Token.BAR_EQUALS:\n      case Token.CARET_EQUALS: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n\n      // comparison: result is Bool, preferring overloads, integer/float only\n\n      case Token.LESSTHAN:\n      case Token.GREATERTHAN:\n      case Token.LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return Type.bool;\n      }\n\n      // equality: result is Bool, preferring overloads, incl. references\n\n      case Token.EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool;\n      }\n\n      // identity: result is Bool, not supporting overloads\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS_EQUALS: {\n        return Type.bool;\n      }\n\n      // arithmetics: result is common type of LHS and RHS, preferring overloads\n\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.ASTERISK:\n      case Token.SLASH:\n      case Token.PERCENT: { // mod has special logic, but also behaves like this\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // pow: result is f32 if LHS is f32, otherwise f64, preferring overloads\n\n      case Token.ASTERISK_ASTERISK: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return leftType == Type.f32 ? Type.f32 : Type.f64;\n      }\n\n      // shift: result is LHS (RHS is converted to LHS), preferring overloads\n\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.is(TypeFlags.INTEGER) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return leftType;\n      }\n\n      // bitwise: result is common type of LHS and RHS with floats not being supported, preferring overloads\n\n      case Token.AMPERSAND:\n      case Token.BAR:\n      case Token.CARET: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, ctxType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType || !commonType.is(TypeFlags.INTEGER) || commonType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, operatorTokenToString(operator), leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // logical: result is LHS (RHS is converted to LHS), not supporting overloads\n\n      case Token.AMPERSAND_AMPERSAND:\n      case Token.BAR_BAR: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified this expression refers to. */\n  private lookupThisExpression(\n    /** The expression to look up. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.is(FlowFlags.INLINE_CONTEXT)) {\n      let thisLocal = ctxFlow.lookupLocal(CommonSymbols.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = ctxFlow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to its static type. */\n  private resolveThisExpression(\n    /** The expression to resolve. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupThisExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified super expression refers to. */\n  private lookupSuperExpression(\n    /** The expression to look up. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.is(FlowFlags.INLINE_CONTEXT)) {\n      let superLocal = ctxFlow.lookupLocal(CommonSymbols.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = ctxFlow.actualFunction.parent;\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to its static type. */\n  private resolveSuperExpression(\n    /** The expression to resolve. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupSuperExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified literal expression refers to. */\n  private lookupLiteralExpression(\n    /** The expression to look up. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.literalKind) {\n      case LiteralKind.INTEGER: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        let intType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>node).value,\n          ctxType\n        );\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(intType));\n        return wrapperClasses.get(intType)!;\n      }\n      case LiteralKind.FLOAT: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        let fltType = ctxType == Type.f32 ? Type.f32 : Type.f64;\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(fltType));\n        return wrapperClasses.get(fltType)!;\n      }\n      case LiteralKind.STRING: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        return this.program.stringInstance;\n      }\n      // TODO\n      // case LiteralKind.ARRAY:\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a literal expression to its static type. */\n  private resolveLiteralExpression(\n    /** The expression to resolve. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupLiteralExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified call expression refers to. */\n  private lookupCallExpression(\n    /** The expression to look up. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveCallExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a call expression to its static type. */\n  private resolveCallExpression(\n    /** The expression to resolve. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var targetExpression = node.expression;\n    var target = this.lookupExpression( // reports\n      targetExpression,\n      ctxFlow,\n      ctxType,\n      reportMode\n    );\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        // `unchecked` behaves like parenthesized\n        if (\n          (<FunctionPrototype>target).internalName == BuiltinSymbols.unchecked &&\n          node.arguments.length > 0\n        ) {\n          return this.resolveExpression(node.arguments[0], ctxFlow, ctxType, reportMode);\n        }\n        let instance = this.maybeInferCall(node, <FunctionPrototype>target, ctxFlow, reportMode);\n        if (!instance) return null;\n        return instance.signature.returnType;\n      }\n      case ElementKind.FUNCTION_TARGET: return (<FunctionTarget>target).signature.returnType;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n        targetExpression.range, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified comma expression refers to. */\n  private lookupCommaExpression(\n    /** The expression to look up. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var expressions = node.expressions;\n    return this.lookupExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Resolves a comma expression to its static type. */\n  private resolveCommaExpression(\n    /** The expression to resolve. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var expressions = node.expressions;\n    return this.resolveExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Looks up the program element the specified instanceof expression refers to. */\n  private lookupInstanceOfExpression(\n    /** The expression to look up. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var wrapperClasses = this.program.wrapperClasses;\n    assert(wrapperClasses.has(Type.bool));\n    return wrapperClasses.get(Type.bool)!;\n  }\n\n  /** Resolves an instanceof expression to its static type. */\n  private resolveInstanceOfExpression(\n    /** The expression to resolve. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return Type.bool;\n  }\n\n  /** Looks up the program element the specified ternary expression refers to. */\n  private lookupTernaryExpression(\n    /** The expression to look up. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveTernaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a ternary expression to its static type. */\n  private resolveTernaryExpression(\n    /** The expression to resolve. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var thenType = this.resolveExpression(node.ifThen, ctxFlow, ctxType, reportMode);\n    if (!thenType) return null;\n    var elseType = this.resolveExpression(node.ifElse, ctxFlow, thenType, reportMode);\n    if (!elseType) return null;\n    var commonType = Type.commonDenominator(thenType, elseType, false);\n    if (!commonType) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n          node.range, \"?:\", thenType.toString(), elseType.toString()\n        );\n      }\n    }\n    return commonType;\n  }\n\n  /** Looks up the program element the specified new expression refers to. */\n  private lookupNewExpression(\n    /** The expression to look up. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = this.resolveTypeName(node.typeName, ctxFlow.actualFunction, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n      return this.resolveClassInclTypeArguments(\n        <ClassPrototype>element,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        node,\n        reportMode\n      );\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a new expression to its static type. */\n  private resolveNewExpression(\n    /** The expression to resolve. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupNewExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified function expression refers to. */\n  private lookupFunctionExpression(\n    /** The expression to look up. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveFunctionExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a function expression to its static type. */\n  private resolveFunctionExpression(\n    /** The expression to resolve. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return this.resolveFunctionType(node.declaration.signature, ctxFlow.actualFunction, ctxFlow.contextualTypeArguments, reportMode);\n  }\n\n  // ==================================================== Elements =====================================================\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!ctxTypes.has(classTypeParameterName)) {\n            ctxTypes.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.functionTypeNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        ctxTypes.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n      ctxTypes.set(CommonSymbols.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      ctxTypes.set(CommonSymbols.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      signature,\n      ctxTypes\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classTypeArguments = (<Class>actualParent).typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            ctxTypes.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes && typeParameterNodes.length));\n    }\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    var baseClass: Class | null = null;\n    if (basePrototype) {\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      baseClass = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(ctxTypes), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!baseClass) return null;\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\n    instance.contextualTypeArguments = ctxTypes;\n    prototype.setResolvedInstance(instanceKey, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      let baseMembers = baseClass.members;\n      if (baseMembers) {\n        let instanceMembers = instance.members;\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\n        for (let [baseMemberName, baseMember] of baseMembers) {\n          instanceMembers.set(baseMemberName, baseMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve instance members\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    if (instanceMemberPrototypes) {\n      for (let member of instanceMemberPrototypes.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            let instanceMembers = instance.members;\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\n            else if (instanceMembers.has(member.name)) {\n              let existing = instanceMembers.get(member.name)!;\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                (<FieldPrototype>member).identifierNode.range,\n                existing.declaration.name.range,\n                member.name\n              );\n              break;\n            }\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (baseClass) {\n                let baseMembers = baseClass.members;\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    (<FieldPrototype>member).identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(member.name, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\n            if (getterPrototype) {\n              let getterInstance = this.resolveFunction(\n                getterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (getterInstance) {\n                propertyInstance.getterInstance = getterInstance;\n                propertyInstance.setType(getterInstance.signature.returnType);\n              }\n            }\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\n            if (setterPrototype) {\n              let setterInstance = this.resolveFunction(\n                setterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (setterInstance) {\n                propertyInstance.setterInstance = setterInstance;\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\n                  assert(setterInstance.signature.parameterTypes.length == 1);\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\n                }\n              }\n            }\n            instance.add(propertyInstance.name, propertyInstance); // reports\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Link _own_ constructor if present\n    {\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\n      if (ctorPrototype && ctorPrototype.parent === instance) {\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n        let ctorInstance = this.resolveFunction(\n          <FunctionPrototype>ctorPrototype,\n          null,\n          instance.contextualTypeArguments,\n          reportMode\n        );\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      // inc/dec are special in that an instance overload attempts to re-assign\n      // the corresponding value, thus requiring a matching return type, while a\n      // static overload works like any other overload.\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\n        switch (kind) {\n          case OperatorKind.PREFIX_INC:\n          case OperatorKind.PREFIX_DEC:\n          case OperatorKind.POSTFIX_INC:\n          case OperatorKind.POSTFIX_DEC: {\n            let returnType = operatorInstance.signature.returnType;\n            if (!returnType.isAssignableTo(instance.type)) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                  overloadPrototype.functionTypeNode.returnType.range, returnType.toString(), instance.type.toString()\n                );\n              }\n            }\n          }\n        }\n      }\n      if (!overloads.has(kind)) {\n        overloads.set(kind, operatorInstance);\n        if (kind == OperatorKind.INDEXED_GET || kind == OperatorKind.INDEXED_SET) {\n          let index = instance.indexSignature;\n          if (!index) instance.indexSignature = index = new IndexSignature(instance);\n          if (kind == OperatorKind.INDEXED_GET) {\n            index.setType(operatorInstance.signature.returnType);\n          }\n        }\n      } else {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            operatorInstance.declaration.range\n          );\n        }\n      }\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n}\n","/**\n * A control flow analyzer.\n * @module flow\n *//***/\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  BinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  UnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue,\n  getCallOperand,\n  traverse\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow returns. */\n  RETURNS = 1 << 0,\n  /** This flow returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow throws. */\n  THROWS = 1 << 3,\n  /** This flow breaks. */\n  BREAKS = 1 << 4,\n  /** This flow continues. */\n  CONTINUES = 1 << 5,\n  /** This flow allocates. Constructors only. */\n  ALLOCATES = 1 << 6,\n  /** This flow calls super. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8,\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally terminates in a child flow. */\n  CONDITIONALLY_TERMINATES = 1 << 11,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 12,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 13,\n  /** This flow conditionally allocates in a child flow. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 14,\n\n  // special\n\n  /** This is an inlining flow. */\n  INLINE_CONTEXT = 1 << 15,\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 16,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is a function parameter. */\n  PARAMETER = 1 << 1,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 2,\n  /** Local is non-null. */\n  NONNULL = 1 << 3,\n  /** Local is read from. */\n  READFROM = 1 << 4,\n  /** Local is written to. */\n  WRITTENTO = 1 << 5,\n  /** Local is retained. */\n  RETAINED = 1 << 6,\n  /** Local is returned. */\n  RETURNED = 1 << 7,\n\n  /** Local is conditionally read from. */\n  CONDITIONALLY_READFROM = 1 << 8,\n  /** Local is conditionally written to. */\n  CONDITIONALLY_WRITTENTO = 1 << 9,\n  /** Local must be conditionally retained. */\n  CONDITIONALLY_RETAINED = 1 << 10,\n  /** Local is conditionally returned. */\n  CONDITIONALLY_RETURNED = 1 << 11,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = CONSTANT\n                  | PARAMETER\n                  | WRAPPED\n                  | NONNULL\n                  | READFROM\n                  | WRITTENTO\n                  | RETAINED\n                  | RETURNED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = RETAINED\n                  | CONDITIONALLY_READFROM\n                  | CONDITIONALLY_WRITTENTO\n                  | CONDITIONALLY_RETAINED\n                  | CONDITIONALLY_RETURNED,\n\n  /** Any written to flag. */\n  ANY_WRITTENTO = WRITTENTO\n                | CONDITIONALLY_WRITTENTO,\n\n  /** Any retained flag. */\n  ANY_RETAINED = RETAINED\n               | CONDITIONALLY_RETAINED,\n\n  /** Any returned flag. */\n  ANY_RETURNED = RETURNED\n               | CONDITIONALLY_RETURNED\n}\nexport namespace LocalFlags {\n  export function join(left: LocalFlags, right: LocalFlags): LocalFlags {\n    return ((left & LocalFlags.ANY_CATEGORICAL) & (right & LocalFlags.ANY_CATEGORICAL))\n         |  (left & LocalFlags.ANY_CONDITIONAL) | (right & LocalFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** Flags indicating the current state of a field. */\nexport enum FieldFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Field is initialized. Relevant in constructors. */\n  INITIALIZED = 1 << 0,\n  /** Field is conditionally initialized. Relevant in constructors. */\n  CONDITIONALLY_INITIALIZED = 1 << 1,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = INITIALIZED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = CONDITIONALLY_INITIALIZED\n}\nexport namespace FieldFlags {\n  export function join(left: FieldFlags, right: FieldFlags): FieldFlags {\n    return ((left & FieldFlags.ANY_CATEGORICAL) & (right & FieldFlags.ANY_CATEGORICAL))\n         |  (left & FieldFlags.ANY_CONDITIONAL) | (right & FieldFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  parentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[];\n  /** Field flags. Relevant in constructors. */\n  fieldFlags: Map<string,FieldFlags> | null = null;\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(parentFunction: Function): Flow {\n    var flow = new Flow();\n    flow.parent = null;\n    flow.flags = FlowFlags.NONE;\n    flow.parentFunction = parentFunction;\n    flow.continueLabel = null;\n    flow.breakLabel = null;\n    flow.returnType = parentFunction.signature.returnType;\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\n    flow.localFlags = [];\n    flow.inlineFunction = null;\n    flow.inlineReturnLabel = null;\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = Flow.create(parentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\n    flow.returnType = inlineFunction.signature.returnType;\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\n    return flow;\n  }\n\n  private constructor() { }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    return this.inlineFunction || this.parentFunction;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.parentFunction = this.parentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.localFlags = this.localFlags.slice();\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      case NativeType.Anyref: { temps = parentFunction.tempAnyrefs; break; }\n      case NativeType.Exnref: { temps = parentFunction.tempExnrefs; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps && temps.length) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps && temps.length) {\n        local = temps.pop()!;\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Gets a local that sticks around until this flow is exited, and then released. */\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    local.set(CommonFlags.SCOPED);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++), local);\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch (local.type.toNativeType()) {\n      case NativeType.I32: {\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\n        break;\n      }\n      case NativeType.V128: {\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\n        break;\n      }\n      case NativeType.Anyref: {\n        temps = parentFunction.tempAnyrefs || (parentFunction.tempAnyrefs = []);\n        break;\n      }\n      case NativeType.Exnref: {\n        temps = parentFunction.tempExnrefs || (parentFunction.tempExnrefs = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals && scopedLocals.has(name)) return scopedLocals.get(name)!;\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          if (!existingLocal.declaration.range.source.isNative) {\n            this.parentFunction.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range,\n              existingLocal.declaration.name.range,\n              name\n            );\n          } else {\n            this.parentFunction.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range, name\n            );\n          }\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Tests if this flow has any scoped locals that must be free'd. */\n  get hasScopedLocals(): bool {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    var scope: Map<String,Local> | null;\n    do if ((scope = current.scopedLocals) && scope.has(name)) return scope.get(name)!;\n    while (current = current.parent);\n    return this.parentFunction.localsByName.get(name)!;\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    localFlags[index] = flags & ~flag;\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    return parentFunction.breakLabel = id.toString(10);\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString(10);\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.localFlags = other.localFlags; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    this.set(other.flags & FlowFlags.ANY_CONDITIONAL);\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n    var localFlags = other.localFlags;\n    for (let i = 0, k = localFlags.length; i < k; ++i) {\n      let flags = localFlags[i];\n      this.setLocalFlag(i, flags & LocalFlags.ANY_CONDITIONAL);\n      if (flags & LocalFlags.RETAINED)  this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETAINED);\n      if (flags & LocalFlags.READFROM)  this.setLocalFlag(i, LocalFlags.CONDITIONALLY_READFROM);\n      if (flags & LocalFlags.WRITTENTO) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_WRITTENTO);\n      if (flags & LocalFlags.RETURNED)  this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETURNED);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.set(left.flags & right.flags & FlowFlags.ANY_CATEGORICAL);\n\n    // conditional flags set in any arm\n    this.set(left.flags & FlowFlags.ANY_CONDITIONAL);\n    this.set(right.flags & FlowFlags.ANY_CONDITIONAL);\n\n    // categorical flags in either arm as conditional\n    this.inheritConditional(left);\n    this.inheritConditional(right);\n\n    // categorical local flags set in both arms / conditional local flags set in at least one arm\n    var leftLocalFlags = left.localFlags;\n    var numLeftLocalFlags = leftLocalFlags.length;\n    var rightLocalFlags = right.localFlags;\n    var numRightLocalFlags = rightLocalFlags.length;\n    var combinedFlags = new Array<LocalFlags>(max<i32>(numLeftLocalFlags, numRightLocalFlags));\n    for (let i = 0; i < numLeftLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        unchecked(leftLocalFlags[i]),\n        i < numRightLocalFlags\n          ? unchecked(rightLocalFlags[i])\n          : 0\n      );\n    }\n    for (let i = numLeftLocalFlags; i < numRightLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        0,\n        unchecked(rightLocalFlags[i])\n      );\n    }\n    this.localFlags = combinedFlags;\n  }\n\n  /** Unifies local flags between this and the other flow. */\n  unifyLocalFlags(other: Flow): void {\n    var numThisLocalFlags = this.localFlags.length;\n    var numOtherLocalFlags = other.localFlags.length;\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      if (this.isLocalFlag(i, LocalFlags.WRAPPED) != other.isLocalFlag(i, LocalFlags.WRAPPED)) {\n        this.unsetLocalFlag(i, LocalFlags.WRAPPED); // assume not wrapped\n      }\n      if (this.isLocalFlag(i, LocalFlags.NONNULL) != other.isLocalFlag(i, LocalFlags.NONNULL)) {\n        this.unsetLocalFlag(i, LocalFlags.NONNULL); // assume possibly null\n      }\n      assert(\n        // having different retain states would be a problem because the compiler\n        // either can't release a retained local or would release a non-retained local\n        this.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED) == other.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED)\n      );\n    }\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.is(TypeFlags.NULLABLE)) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(expr: ExpressionRef): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        this.inheritNonnullIfTrue(getLocalSetValue(expr)); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr));\n            this.inheritNonnullIfTrue(getIfTrue(expr));\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr)); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Call: {\n        let name = getCallTarget(expr);\n        let program = this.parentFunction.program;\n        switch (name) {\n          case program.retainInstance.internalName: {\n            this.inheritNonnullIfTrue(getCallOperand(expr, 0));\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(expr: ExpressionRef): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr)); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          let exprType = getExpressionType(ifTrue);\n          if (\n            (exprType == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\n            (exprType == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr));\n            this.inheritNonnullIfFalse(getIfFalse(expr));\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr)))!);\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow(assert((<Global>global).type), type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = instancesByName.get(instanceName)!;\n          assert(instance.kind == ElementKind.FUNCTION);\n          let returnType = (<Function>instance).signature.returnType;\n          return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    return \"Flow(\" + this.actualFunction + \")[\" + levels.toString() + \"]\";\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n\n/** Finds all indexes of locals used in the specified expression. */\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set()): Set<i32> {\n  traverse(expr, used, findUsedLocalsVisit);\n  return used;\n}\n\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.LocalGet: {\n      used.add(getLocalGetIndex(expr));\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      used.add(getLocalSetIndex(expr));\n      // fall-through for value\n    }\n    default: traverse(expr, used, findUsedLocalsVisit);\n  }\n}\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  BuiltinSymbols,\n  compileCall as compileBuiltinCall,\n  compileAbort,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  GlobalRef,\n  EventRef,\n  FeatureFlags,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetIndex,\n  needsExplicitUnreachable,\n  getLocalSetValue,\n  getGlobalGetName,\n  isGlobalMutable,\n  createType\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  CommonSymbols,\n  INDEX_SUFFIX,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  IndexSignature,\n  File,\n  mangleInternalName\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver,\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  NamedTypeNode,\n  Range,\n  DecoratorKind,\n  AssertionKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  nodeIsConstantValue,\n  findDecorator,\n  isTypeOmitted,\n  ExportDefaultStatement,\n  SourceKind\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap\n} from \"./util\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\n  sharedMemory: i32 = 0;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, exports the function table. */\n  exportTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If true, generates an explicit start function. */\n  explicitStart: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\n  globalAliases: Map<string,string> | null = null;\n  /** Features to activate by default. These are the finished proposals. */\n  features: Feature = Feature.MUTABLE_GLOBALS;\n  /** If true, disallows unsafe features in user code. */\n  noUnsafe: bool = false;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that the value will be retained immediately. */\n  WILL_RETAIN = 1 << 4,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 5\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires heap setup. */\n  HEAP = 1 << 0,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 1,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 2,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 3\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  get resolver(): Resolver { return this.program.resolver; }\n  /** Provided options. */\n  get options(): Options { return this.program.options; }\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current parent element if not a function, i.e. an enum or namespace. */\n  currentParent: Element | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. First elem is blank. */\n  functionTable: string[] = [];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\n  /** Registered event types. */\n  events: Map<string, EventRef> = new Map();\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program): Module {\n    return new Compiler(program).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n    var options = program.options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    var module = Module.create();\n    this.module = module;\n    var featureFlags: FeatureFlags = 0;\n    if (options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    if (options.hasFeature(Feature.MUTABLE_GLOBALS)) featureFlags |= FeatureFlags.MutableGloabls;\n    if (options.hasFeature(Feature.NONTRAPPING_F2I)) featureFlags |= FeatureFlags.NontrappingFPToInt;\n    if (options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\n    if (options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    if (options.hasFeature(Feature.TAIL_CALLS)) featureFlags |= FeatureFlags.TailCall;\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) featureFlags |= FeatureFlags.ReferenceTypes;\n    module.setFeatures(featureFlags);\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature(program, [], Type.void));\n    startFunctionInstance.internalName = \"start\";\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = startFunctionBody;\n\n    // add a mutable heap and rtti base dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    for (let file of files.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var explicitStart = options.explicitStart;\n    if (!startIsEmpty || explicitStart) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && explicitStart) {\n        module.addGlobal(BuiltinSymbols.started, NativeType.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinSymbols.started, NativeType.I32),\n            module.return(),\n            module.global_set(BuiltinSymbols.started, module.i32(1))\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.block(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStart) module.setStart(funcRef);\n      else module.addFunctionExport(startFunctionInstance.internalName, \"__start\");\n    }\n\n    // compile runtime features\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n    module.removeGlobal(BuiltinSymbols.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinSymbols.heap_base);\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\n      if (options.isWasm64) {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I64,\n          false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I32,\n          false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // set up memory\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\n    module.setMemory(\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n        : 0,\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      \"memory\",\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table (first elem is blank)\n    var functionTable = this.functionTable;\n    module.setFunctionTable(1 + functionTable.length, Module.UNLIMITED_TABLE, functionTable, module.i32(1));\n\n    // import and/or export table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\n    if (options.exportTable) module.addTableExport(\"0\", \"table\");\n\n    // set up module exports\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.ensureModuleExports(file);\n    }\n    return module;\n  }\n\n  // === Exports ==================================================================================\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var members = file.exports;\n    if (members) for (let [name, member] of members) this.ensureModuleExport(name, member);\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.ensureModuleExports(exportsStar[i]);\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instances = (<FunctionPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instances = (<ClassPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getter = (<PropertyPrototype>element).getterPrototype;\n        let setter = (<PropertyPrototype>element).setterPrototype;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<Global>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!(<EnumValue>element).isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<EnumValue>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = (<Property>element).getterInstance;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterInstance;\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        this.ensureModuleFieldGetter(prefix + GETTER_PREFIX + name, <Field>element);\n        if (!element.is(CommonFlags.READONLY)) {\n          this.ensureModuleFieldSetter(prefix + SETTER_PREFIX + name, <Field>element);\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        // make the class name itself represent its runtime id\n        if (!(<Class>element).type.isUnmanaged) {\n          let module = this.module;\n          let internalName = (<Class>element).internalName;\n          module.addGlobal(internalName, NativeType.I32, false, module.i32((<Class>element).id));\n          module.addGlobalExport(internalName, prefix + name);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.NAMESPACE:\n      case ElementKind.FILE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.INDEXSIGNATURE: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (\n        element.kind == ElementKind.NAMESPACE ||\n        element.kind == ElementKind.FILE\n      ) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      }\n    }\n  }\n\n  /** Makes a function to get the value of a field of an exported class. */\n  private ensureModuleFieldGetter(name: string, field: Field): void {\n    var type = field.type;\n    var module = this.module;\n    var usizeType = this.options.usizeType;\n    var loadExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\n      module.local_get(0, usizeType.toNativeType()),\n      type.toNativeType(), field.memoryOffset\n    );\n    // a user-defined getter would return a retained value, so:\n    if (type.isManaged) loadExpr = this.makeRetain(loadExpr);\n    module.addFunction(\n      name,\n      usizeType.toNativeType(),\n      type.toNativeType(),\n      null,\n      loadExpr\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  /** Makes a function to set the value of a field of an exported class. */\n  private ensureModuleFieldSetter(name: string, field: Field): void {\n    var type = field.type;\n    var module = this.module;\n    var nativeType = type.toNativeType();\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = usizeType.toNativeType();\n    var valueExpr = module.local_get(1, nativeType);\n    if (type.isManaged) {\n      valueExpr = this.makeReplace(\n        module.load(type.byteSize, false, // oldRef\n          module.local_get(0, nativeSizeType),\n          nativeType, field.memoryOffset\n        ),\n        valueExpr // newRef\n      );\n    }\n    module.addFunction(\n      name,\n      createType([ usizeType.toNativeType(), type.toNativeType() ]),\n      NativeType.None,\n      null,\n      module.store(\n        type.byteSize,\n        module.local_get(0, nativeSizeType),\n        valueExpr,\n        nativeType,\n        field.memoryOffset\n      )\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) {\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\n        }\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) {\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE:\n      case ElementKind.INDEXSIGNATURE: break;\n      default: assert(false, ElementKind[element.kind]);\n    }\n    if (compileMembers) this.compileMembers(element);\n  }\n\n  /** Compiles an element's members. */\n  compileMembers(element: Element): void {\n    var members = element.members;\n    if (members) for (let element of members.values()) this.compileElement(element);\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) for (let element of exports.values()) this.compileElement(element);\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) {\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = filesByName.get(normalizedPathWithoutExtension)!;\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = filesByName.get(pathWithIndex)!;\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var startSignature = startFunction.signature;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.finishAutoreleases(flow, startFunctionBody);\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n\n      module.addFunction(\n        startFunction.internalName,\n        startSignature.nativeParams,\n        startSignature.nativeResults,\n        varTypes,\n        startFunctionBody.length > 1\n          ? module.block(null, startFunctionBody)\n          : startFunctionBody[0]\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var initAutoreleaseSkipped: bool = false;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          return false;\n        }\n        global.setType(resolvedType);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      if (global.internalName == BuiltinSymbols.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (global.internalName == BuiltinSymbols.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      return true;\n    }\n\n    var type = global.type;\n    var nativeType = type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType,\n          !isDeclaredConstant\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // Importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Feature_0_is_not_enabled,\n          global.declaration.range, \"mutable-globals\"\n        );\n      }\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constants and gets of\n    // imported immutable globals, hence such initializations must be performed in the start.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n      }\n\n      // If not a constant, attempt to precompute\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) initializeInStart = true;\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Handle special case of initializing from imported immutable global\n      if (initializeInStart && getExpressionId(initExpr) == ExpressionId.GlobalGet) {\n        let fromName = assert(getGlobalGetName(initExpr));\n        if (!isGlobalMutable(module.getGlobal(fromName))) {\n          let elementsByName = this.program.elementsByName;\n          if (elementsByName.has(fromName)) {\n            let global = elementsByName.get(fromName)!;\n            if (global.is(CommonFlags.AMBIENT)) initializeInStart = false;\n          }\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      initExpr = this.makeZero(type);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, global.decoratorNodes)).range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, this.makeZero(type));\n      if (type.isManaged && !initAutoreleaseSkipped) initExpr = this.makeRetain(initExpr);\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var previousParent = this.currentParent;\n    this.currentParent = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueNode = val.valueNode;\n        val.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            initExpr = module.precomputeExpression(initExpr);\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              (<EnumValue>member).identifierNode.range.atEnd\n            );\n          }\n          initExpr = module.binary(BinaryOp.AddI32,\n            module.global_get(previousValue.internalName, NativeType.I32),\n            module.i32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                member.declaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(val, initExpr, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n          }\n          val.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentParent = previousParent;\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): Function | null {\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return null;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET));\n\n      let expr = this.compileExpression((<ExpressionStatement>bodyNode).expression, returnType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n      if (!flow.is(FlowFlags.TERMINATES)) { // TODO: detect if returning an autorelease local?\n        let indexBefore = stmts.length;\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        let canOverflow = flow.canOverflow(expr, returnType);\n        let nonNull = flow.isNonnull(expr, returnType);\n        if (stmts.length > indexBefore) {\n          let temp = flow.getTempLocal(returnType);\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\n          flow.freeTempLocal(temp);\n        }\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // make constructors return their instance pointer\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\n        if (!flow.is(FlowFlags.ALLOCATES)) {\n          // {\n          //   if (!this) this = <ALLOC>\n          //   this.a = X\n          //   this.b = Y\n          // }\n          stmts.push(\n            module.if(\n              module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                module.local_get(thisLocal.index, nativeSizeType)\n              ),\n              module.local_set(thisLocal.index,\n                this.makeRetain(\n                  this.makeAllocation(<Class>classInstance)\n                ),\n              )\n            )\n          );\n          this.makeFieldInitialization(<Class>classInstance, stmts);\n        }\n        this.performAutoreleases(flow, stmts); // `this` is excluded anyway\n        this.finishAutoreleases(flow, stmts);\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.functionTypeNode.returnType.range\n      );\n    }\n\n    return stmts;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n\n    var previousType = this.currentType; // remember to retain it if compiling a function lazily\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          decorator.range, \"external\"\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      // retain each argument for as long as the function lives\n      let index = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n        ++index;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\n        let type = parameterTypes[i];\n        if (type.isManaged) {\n          stmts.push(\n            module.local_set(index,\n              this.makeRetain(\n                module.local_get(index, type.toNativeType())\n              )\n            )\n          );\n          flow.setLocalFlag(index, LocalFlags.RETAINED | LocalFlags.PARAMETER);\n        }\n      }\n\n      this.compileFunctionBody(instance, stmts);\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n      }\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        signature.nativeParams,\n        signature.nativeResults,\n        typesToNativeTypes(instance.additionalLocals),\n        flatten(module, stmts, instance.signature.returnType.toNativeType())\n      );\n\n    // imported function\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          instance.identifierNode.range\n        );\n      }\n\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\n\n      // create the import\n      module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        signature.nativeParams,\n        signature.nativeResults\n      );\n      funcRef = module.getFunction(instance.internalName);\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    return true;\n  }\n\n  // === Classes ==================================================================================\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(),\n                (<FunctionPrototype>element).identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let getter = (<PropertyPrototype>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [],\n                makeMap<string,Type>(),\n                getter.identifierNode\n              );\n            }\n            let setter = (<PropertyPrototype>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [],\n                makeMap<string,Type>(),\n                setter.identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(instance.contextualTypeArguments),\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD_PROTOTYPE: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterInstance;\n            if (getter) this.compileFunction(getter);\n            let setter = (<Property>element).setterInstance;\n            if (setter) this.compileFunction(setter);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Not_implemented,\n      declaration.range\n    );\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var rtHeaderSize = program.runtimeHeaderSize;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = segments.get(stringValue)!; // reuse\n    } else {\n      let length = stringValue.length;\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\n      program.writeRuntimeHeader(buffer, 0, stringInstance, length << 1);\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buffer);\n      segments.set(stringValue, stringSegment);\n    }\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.i64(i64_low(ref), i64_high(ref));\n    } else {\n      assert(i64_is_u32(ref));\n      return this.module.i32(i64_low(ref));\n    }\n  }\n\n  ensureStaticArrayBuffer(elementType: Type, values: ExpressionRef[]): MemorySegment {\n    var program = this.program;\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\n    program.writeRuntimeHeader(buf, 0, bufferInstance, byteLength);\n    var pos = runtimeHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    assert(pos == buf.length);\n\n    return this.addMemorySegment(buf);\n  }\n\n  ensureStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\n    var program = this.program;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayInstanceSize = arrayInstance.currentMemoryOffset;\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\n    program.writeRuntimeHeader(buf, 0, arrayInstance, arrayInstanceSize);\n\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\n    assert(!program.options.isWasm64); // TODO\n    assert(arrayInstance.writeField(\"buffer\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"byteLength\", bufferLength, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\n\n    return this.addMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = 1 + functionTable.length; // first elem is blank\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.internalName);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // === Statements ===============================================================================\n\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        if (element) {\n          assert(element.kind == ElementKind.ENUM);\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        }\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let element = this.program.getElementByDeclaration(<NamespaceDeclaration>statement);\n        if (element) {\n          // any potentiall merged element\n          let previousParent = this.currentParent;\n          this.currentParent = element;\n          let memberStatements = (<NamespaceDeclaration>statement).members;\n          for (let i = 0, k = memberStatements.length; i < k; ++i) {\n            this.compileTopLevelStatement(memberStatements[i], body);\n          }\n          this.currentParent = previousParent;\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          if (element) {\n            assert(element.kind == ElementKind.GLOBAL);\n            if (\n              !element.is(CommonFlags.AMBIENT) && // delay imports\n              !element.hasDecorator(DecoratorFlags.LAZY)\n            ) this.compileGlobal(<Global>element);\n          }\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element !== null && element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        if ((<ExportStatement>statement).internalPath != null) {\n          this.compileFileByPath(\n            <string>(<ExportStatement>statement).internalPath,\n            <StringLiteralExpression>(<ExportStatement>statement).path\n          );\n        }\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.compileTopLevelStatement((<ExportDefaultStatement>statement).declaration, body);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.compileFileByPath(\n          (<ImportStatement>statement).internalPath,\n          (<ImportStatement>statement).path\n        );\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATUREDECLARATION:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  compileStatement(\n    statement: Statement,\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Not_implemented,\n          statement.range\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(\n    statements: Statement[],\n    isBody: bool = false,\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow); // TODO: only if not terminated?\n    this.currentFlow = outerFlow;\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        statement.label.range\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var parent = flow.parent;\n    while (parent !== null && parent.breakLabel == breakLabel) {\n      this.performAutoreleases(parent, stmts, /* finalize */ false);\n      parent = parent.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(breakLabel));\n    flow.set(FlowFlags.BREAKS);\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        label.range\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var current: Flow | null = flow.parent;\n    while (current && current.continueLabel === continueLabel) {\n      this.performAutoreleases(current, stmts, /* finalize */ false);\n      current = current.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(continueLabel));\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileDoStatement(\n    statement: DoStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n\n    // Compile the condition before the body in order to...\n    var condFlow = outerFlow.fork();\n    this.currentFlow = condFlow;\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.i32),\n        this.currentType\n      )\n    );\n    assert(!condFlow.hasScopedLocals);\n    // ...unify local states before and after the condition has been executed the first time\n    innerFlow.unifyLocalFlags(condFlow);\n    this.currentFlow = innerFlow;\n\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(\n        this.compileStatement(statement.statement)\n      );\n    }\n    var alwaysFalse = false;\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\n      assert(getExpressionType(condExpr) == NativeType.I32);\n      if (!getConstValueI32(condExpr)) alwaysFalse = true;\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n\n    // (block $break            ;; (1) skip if no breaks\n    //  (loop $continue         ;; (2) skip if skipping (4) + no continues\n    //   (...)                  ;; (3)\n    //   (br_if cond $continue) ;; (4) skip if (3) does not fall through or always false\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    if (fallsThrough) {\n      this.performAutoreleases(innerFlow, stmts);\n      if (!alwaysFalse) { // (4)\n        stmts.push(module.br(continueLabel, condExpr));\n      }\n    }\n    var expr = flatten(module, stmts, NativeType.None);\n    if (fallsThrough && !alwaysFalse || continues) { // (2)\n      expr = module.loop(continueLabel, expr);\n    }\n    if (breaks) { // (1)\n      expr = module.block(breakLabel, [ expr ]);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  compileForStatement(\n    statement: ForStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    // Set up and use the inner flow\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    // Compile the initializer\n    var initializer = statement.initializer;\n    var initExpr: ExpressionRef = 0;\n    if (initializer) initExpr = this.compileStatement(initializer);\n\n    // Compile the condition\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = module.precomputeExpression(\n        this.makeIsTrueish(\n          this.compileExpression(<Expression>statement.condition, Type.bool),\n          this.currentType\n        )\n      );\n      // Simplify if the condition is constant\n      if (getExpressionId(condExpr) == ExpressionId.Const) {\n        assert(getExpressionType(condExpr) == NativeType.I32);\n        if (getConstValueI32(condExpr) == /* false */ 0) {\n          let stmts = new Array<ExpressionRef>();\n          if (initExpr) stmts.push(initExpr);\n          this.performAutoreleases(innerFlow, stmts);\n          innerFlow.freeScopedLocals();\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return flatten(module, stmts, NativeType.None);\n        }\n        alwaysTrue = true;\n      }\n    } else { // Omitted condition is always true\n      condExpr = module.i32(1);\n      alwaysTrue = true;\n    }\n    innerFlow.inheritNonnullIfTrue(condExpr);\n\n    // Compile the incrementor before the body in order to...\n    var incrementor = statement.incrementor;\n    var incrExpr: ExpressionRef = 0;\n    if (incrementor) {\n      let incrFlow = innerFlow.fork();\n      this.currentFlow = incrFlow;\n      incrExpr = this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP);\n      assert(!incrFlow.hasScopedLocals);\n      this.currentFlow = innerFlow;\n      // ...unify local states before and after the incrementor has been executed the first time\n      innerFlow.unifyLocalFlags(incrFlow);\n    }\n\n    // Compile body (break: drop out, continue: fall through to incrementor, + loop)\n    var bodyFlow = innerFlow.fork();\n    this.currentFlow = bodyFlow;\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label; bodyFlow.breakLabel = breakLabel;\n    bodyFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    bodyFlow.continueLabel = continueLabel;\n    var loopLabel = \"loop|\" + label;\n    var bodyStatement = statement.statement;\n    var stmts = new Array<ExpressionRef>();\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>bodyStatement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(bodyStatement));\n    }\n    var terminates = bodyFlow.is(FlowFlags.TERMINATES);\n    var continues = bodyFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    var breaks = bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    // Finalize body flow\n    if (fallsThrough) this.performAutoreleases(bodyFlow, stmts);\n    bodyFlow.freeScopedLocals();\n    innerFlow.inherit(bodyFlow);\n    this.currentFlow = innerFlow;\n\n    // (block $break          ;; (1) skip label (needed anyway) if skipping (4) + no breaks\n    //  (initializer)         ;; (2) [may be empty]\n    //  (loop $loop           ;; (3) skip if (6) does not fall through + no continues\n    //   (br_if !cond $break) ;; (4) skip if always true\n    //   (block $continue     ;; (5) skip if no continues or nothing else than continue\n    //    (...)               ;; (6)\n    //   )\n    //   (incrementor)        ;; (7) skip if skipping (3) [may be empty]\n    //   (br $loop)           ;; (8) skip if skipping (3)\n    //  )\n    // )\n    var needsLabel = !alwaysTrue || breaks;\n\n    var loop = new Array<ExpressionRef>();\n    if (!alwaysTrue) { // (4)\n      loop.push(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\n    }\n    if (continues) { // (5)\n      if (stmts.length > 1 || getExpressionId(stmts[0]) != ExpressionId.Break) { // otherwise lonely continue\n        loop.push(module.block(continueLabel, stmts));\n      }\n    } else {\n      for (let i = 0, k = stmts.length; i < k; ++i) loop.push(stmts[i]);\n    }\n    var expr: ExpressionRef;\n    if (fallsThrough || continues) { // (3)\n      if (incrExpr) loop.push(incrExpr); // (7)\n      this.performAutoreleases(innerFlow, loop);\n      loop.push(module.br(loopLabel)); // (8)\n      if (initExpr) { // (2)\n        expr = module.block(needsLabel ? breakLabel : null, [\n          initExpr,\n          module.loop(loopLabel, module.block(null, loop))\n        ]);\n      } else {\n        expr = module.block(needsLabel ? breakLabel : null, [\n          module.loop(loopLabel, flatten(module, loop, NativeType.None))\n        ]);\n      }\n    } else {\n      if (initExpr) loop.unshift(initExpr); // (2)\n      this.performAutoreleases(innerFlow, loop);\n      expr = module.block(needsLabel ? breakLabel : null, loop);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n    var outerFlow = this.currentFlow;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileStatement(ifTrue)\n        : ifFalse\n          ? this.compileStatement(ifFalse)\n          : module.nop();\n    }\n\n    // Each arm initiates a branch\n    var ifTrueStmts = new Array<ExpressionRef>();\n    var ifTrueFlow = outerFlow.fork();\n    this.currentFlow = ifTrueFlow;\n    ifTrueFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, ifTrueStmts);\n    } else {\n      ifTrueStmts.push(this.compileStatement(ifTrue));\n    }\n    if (!ifTrueFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifTrueFlow, ifTrueStmts);\n    ifTrueFlow.freeScopedLocals();\n    this.currentFlow = outerFlow;\n\n    if (ifFalse) {\n      let ifFalseFlow = outerFlow.fork();\n      this.currentFlow = ifFalseFlow;\n      ifFalseFlow.inheritNonnullIfFalse(condExpr);\n      let ifFalseStmts = new Array<ExpressionRef>();\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, ifFalseStmts);\n      } else {\n        ifFalseStmts.push(this.compileStatement(ifFalse));\n      }\n      if (!ifFalseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifFalseFlow, ifFalseStmts);\n      ifFalseFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None),\n        flatten(module, ifFalseStmts, NativeType.None)\n      );\n    } else {\n      outerFlow.inheritConditional(ifTrueFlow);\n      if (ifTrueFlow.is(FlowFlags.TERMINATES)) outerFlow.inheritNonnullIfFalse(condExpr);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None)\n      );\n    }\n    // TODO: Detect neglected condition\n    // if (!foo) {\n    //   foo = [notNull]\n    // }\n    // foo // is possibly null\n  }\n\n  compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      if (returnType == Type.void) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          valueExpression.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.unreachable();\n      }\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n      expr = this.compileExpression(valueExpression, returnType, constraints | Constraints.WILL_RETAIN);\n\n      // when returning a local, and it is already retained, skip the final set\n      // of retaining it as the return value and releasing it as a variable\n      if (!this.skippedAutoreleases.has(expr)) {\n        if (returnType.isManaged) {\n          if (getExpressionId(expr) == ExpressionId.LocalGet) {\n            let index = getLocalGetIndex(expr);\n            if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n              flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n              flow.setLocalFlag(index, LocalFlags.RETURNED);\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n        }\n      }\n\n      // remember return states\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n      if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.unreachable();\n    }\n\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    this.finishAutoreleases(flow, stmts);\n\n    // Make sure that the return value is retained for the caller\n    if (returnType.isManaged && !this.skippedAutoreleases.has(expr)) expr = this.makeRetain(expr);\n\n    if (returnType != Type.void && stmts.length) {\n      let temp = flow.getTempLocal(returnType);\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts.unshift(\n        module.local_set(temp.index, expr)\n      );\n      expr = module.local_get(temp.index, returnType.toNativeType());\n      flow.freeTempLocal(temp);\n    }\n    flow.freeScopedLocals();\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastInBody && expr && returnType != Type.void) {\n      if (!stmts.length) return expr;\n      stmts.push(expr);\n      return module.block(null, stmts, returnType.toNativeType());\n    }\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\n      // stmts.push(module.createUnreachable());\n      return module.block(null, stmts);\n    }\n\n    // Otherwise emit a normal return\n    if (!stmts.length) return module.return(expr);\n    stmts.push(module.return(expr));\n    return module.block(null, stmts);\n  }\n\n  compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      )\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString(10) + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\n\n      // Switch back to the parent flow\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    this.finishAutoreleases(flow, stmts);\n\n    // TODO: requires exception-handling spec.\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).arguments;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(compileAbort(this, message, statement));\n\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Not_implemented,\n      statement.range\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      let initAutoreleaseSkipped = false;\n\n      // Resolve type if annotated\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression(declaration.initializer, type, // reports\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (declaration.initializer) {\n        initExpr = this.compileExpression(declaration.initializer, Type.auto,\n          Constraints.WILL_RETAIN\n        ); // reports\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return module.unreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              let existing = scopedLocals.get(name)!;\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existing.declaration.name.range,\n                name\n              );\n              return this.module.unreachable();\n            }\n            scopedLocals.set(name, local);\n            isStatic = true;\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            if (!existingLocal.declaration.range.source.isNative) {\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existingLocal.declaration.name.range,\n                name\n              );\n            } else { // scoped locals are shared temps that don't track declarations\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n            }\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          let existing = flow.lookupLocal(name);\n          if (existing) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range,\n              existing.declaration.name.range,\n              name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        let isManaged = type.isManaged;\n        if (initExpr) {\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n          if (isManaged) {\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\n            initializers.push(\n              module.local_set(local.index,\n                initAutoreleaseSkipped\n                  ? initExpr\n                  : this.makeRetain(initExpr)\n              )\n            );\n          } else {\n            initializers.push(\n              module.local_set(local.index, initExpr)\n            );\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\n            }\n          }\n        } else {\n          if (isManaged) {\n            // This is necessary because the first use (and assign) of the local could be taking place\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\n            // initialized but becomes released later on, whatever was stored before would be released.\n            // TODO: Detect this condition inside of a loop instead?\n            initializers.push(\n              module.local_set(local.index,\n                this.makeZero(type)\n              )\n            );\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    return initializers.length == 0\n      ? 0\n      : flatten(module, initializers, NativeType.None);\n  }\n\n  compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  compileWhileStatement(\n    statement: WhileStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // Compile condition\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Simplify if the condition is constant\n    var alwaysTrue = false;\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\n      assert(getExpressionType(condExpr) == NativeType.I32);\n      if (!getConstValueI32(condExpr)) return module.nop(); // simplify\n      alwaysTrue = true;\n    }\n\n    // Compile body\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n    innerFlow.inheritNonnullIfTrue(condExpr);\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(statement.statement));\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n\n    // (block $break          ;; (1) skip if skipping (3) + no breaks\n    //  (loop $continue       ;; (2) skip if skipping (5) + no continues\n    //   (br_if !cond $break) ;; (3) skip if always true\n    //   (...)                ;; (4)\n    //   (br $continue)       ;; (5) skip if (4) does not fall through\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    if (fallsThrough) { // (5)\n      this.performAutoreleases(innerFlow, stmts);\n      stmts.push(module.br(continueLabel));\n    }\n    if (!alwaysTrue) { // (3)\n      stmts.unshift(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\n    }\n    var expr = flatten(module, stmts, NativeType.None);\n    if (fallsThrough || innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) { // (2)\n      expr = module.loop(continueLabel, expr);\n    }\n    if (!alwaysTrue || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) { // (1)\n      expr = module.block(breakLabel, [ expr ]);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    this.currentType = contextualType;\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        expr = this.module.unreachable();\n      }\n    }\n    // ensure conversion and wrapping in case the respective function doesn't on its own\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType) {\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Compiles and precomputes an expression, possibly yielding a costant value. */\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, constraints)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit.*/\n    explicit: bool,\n    /** Whether the result should be wrapped, if a small integer. */\n    wrap: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    if (this.currentFlow.isNonnull(expr, fromType)) fromType = fromType.nonNullableType;\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        if (fromType.nonNullableType == toType) {\n          this.error(\n            DiagnosticCode.Object_is_possibly_null,\n            reportNode.range\n          ); // recoverable\n        } else {\n          this.error(\n            DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n            reportNode.range, fromType.toString(), toType.toString()\n          ); // recoverable\n        }\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n          wrap = false;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.unary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrap = false;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrap = false;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrap\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          let module = this.module;\n          let flow = this.currentFlow;\n          let temp = flow.getTempLocal(type);\n          if (!flow.canOverflow(expr, type)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          expr = module.if(\n            module.local_tee(temp.index, expr),\n            module.local_get(temp.index, type.toNativeType()),\n            module.unreachable()\n          );\n          flow.freeTempLocal(temp);\n        }\n        this.currentType = this.currentType.nonNullableType;\n        return expr;\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AllTrueI8x16,\n              module.binary(BinaryOp.EqI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AnyTrueI8x16,\n              module.binary(BinaryOp.NeI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: !ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"*\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"**\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        let targetType = leftType;\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(leftExpr,\n            this.currentType, Type.f64,\n            false, false,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(right, Type.f64, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.unreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n          if (compound && targetType != this.currentType) {\n            // this yields a proper error if target is i32 for example\n            expr = this.convertExpression(expr, this.currentType, targetType, false, false, expression);\n          }\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"/\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"%\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"<<\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"&\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"&\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"|\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"|\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"^\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"^\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            this.makeIsTrueish(rightExpr, rightType),\n            module.i32(0)\n          );\n          this.currentType = Type.bool;\n\n        } else {\n\n          // references must properly retain and release, with the same outcome independent of the branch taken\n          if (leftType.isManaged) {\n            let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n            let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n            let temp = flow.getTempLocal(leftType);\n            leftExpr = module.local_tee(temp.index, leftExpr);\n\n            // instead of retaining left and releasing it again in right when right\n            // is taken, we can also just retain left if right is not taken\n            let retainLeftInElse = false;\n            if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n              if (!leftAutoreleaseSkipped) {\n                retainLeftInElse = true;\n              } else {\n                rightExpr = this.makeRetain(rightExpr);\n                rightAutoreleaseSkipped = true;\n              }\n            } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n              rightExpr = this.delayAutorelease(rightExpr, rightType, rightFlow, flow);\n            }\n\n            let rightStmts = new Array<ExpressionRef>();\n            if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\n              rightStmts.unshift(\n                this.makeRelease(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              );\n            }\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              rightExpr,\n              retainLeftInElse\n                ? this.makeRetain(\n                    module.local_get(temp.index, leftType.toNativeType())\n                  )\n                : module.local_get(temp.index, leftType.toNativeType())\n            );\n            if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n            if (temp) flow.freeTempLocal(temp);\n\n          // basic values can use more aggressive optimizations\n          } else {\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            // simplify if cloning left without side effects is possible\n            if (expr = module.cloneExpression(leftExpr, true, 0)) {\n              expr = module.if(\n                this.makeIsTrueish(leftExpr, this.currentType),\n                rightExpr,\n                expr\n              );\n\n            // if not possible, tee left to a temp\n            } else {\n              let tempLocal = flow.getTempLocal(leftType);\n              if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n              if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n              expr = module.if(\n                this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n                rightExpr,\n                module.local_get(tempLocal.index, leftType.toNativeType())\n              );\n              flow.freeTempLocal(tempLocal);\n            }\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            module.i32(1),\n            this.makeIsTrueish(rightExpr, rightType)\n          );\n          this.currentType = Type.bool;\n\n        } else {\n\n          // references must properly retain and release, with the same outcome independent of the branch taken\n          if (leftType.isManaged) {\n            let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n            let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n            let temp = flow.getTempLocal(leftType);\n            leftExpr = module.local_tee(temp.index, leftExpr);\n\n            // instead of retaining left and releasing it again in right when right\n            // is taken, we can also just retain left if right is not taken\n            let retainLeftInThen = false;\n            if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n              if (!leftAutoreleaseSkipped) {\n                retainLeftInThen = true;\n              } else {\n                rightExpr = this.makeRetain(rightExpr);\n                rightAutoreleaseSkipped = true;\n              }\n            } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n              rightExpr = this.delayAutorelease(rightExpr, rightType, rightFlow, flow);\n            }\n\n            let rightStmts = new Array<ExpressionRef>();\n            if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\n              // TODO: usually, false'ish means left is null, but this might not hold\n              // once implicit conversion with strings is performed and left is \"\", so:\n              rightStmts.unshift(\n                this.makeRelease(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              );\n            }\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              retainLeftInThen\n                ? this.makeRetain(\n                    module.local_get(temp.index, leftType.toNativeType())\n                  )\n                : module.local_get(temp.index, leftType.toNativeType()),\n              rightExpr\n            );\n            if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n            if (temp) flow.freeTempLocal(temp);\n\n          // basic values can use more aggressive optimizations\n          } else {\n            rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n            rightFlow.freeScopedLocals();\n            this.currentFlow = flow;\n\n            // simplify if cloning left without side effects is possible\n            if (expr = module.cloneExpression(leftExpr, true, 0)) {\n              expr = module.if(\n                this.makeIsTrueish(leftExpr, leftType),\n                expr,\n                rightExpr\n              );\n\n            // if not possible, tee left to a temp. local\n            } else {\n              let temp = flow.getTempLocal(leftType);\n              if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n              if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n              expr = module.if(\n                this.makeIsTrueish(module.local_tee(temp.index, leftExpr), leftType),\n                module.local_get(temp.index, leftType.toNativeType()),\n                rightExpr\n              );\n              flow.freeTempLocal(temp);\n            }\n          }\n          this.currentType = leftType;\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    var targetType = resolver.getTypeOfElement(target) || Type.void;\n    if (!this.currentType.isStrictlyAssignableTo(targetType)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, this.currentType.toString(), targetType.toString()\n      );\n      return module.unreachable();\n    }\n    return this.makeAssignment(\n      target,\n      expr, // TODO: delay release above if possible?\n      left,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having retained locals that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.lookupExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return this.module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterPrototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedSet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, (<Class>parent).internalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, (<Class>parent).internalName\n            );\n          }\n          return this.module.unreachable();\n        }\n        assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n        targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n        if (indexedSet.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    return this.makeAssignment(\n      target,\n      this.compileExpression(valueExpression, targetType, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN),\n      expression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\n    // everything else must insert the skipped autorelease now. See (*)\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        if (flow.isLocalFlag((<Local>target).index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? (<Local>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(<Local>target, valueExpr, tee);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? (<Global>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(<Global>target, valueExpr, tee);\n      }\n      case ElementKind.FIELD: {\n        let initializerNode = (<Field>target).initializerNode;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, (<Field>target).internalName\n          );\n          return module.unreachable();\n        }\n        return this.makeFieldAssignment(<Field>target,\n          valueExpr,\n          // FIXME: explicit type (currently fails due to missing null checking)\n          this.compileExpression(assert(thisExpression), this.options.usizeType),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1);\n        let valueType = setterInstance.signature.parameterTypes[0];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        // call just the setter if the return value isn't of interest\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n        // otherwise call the setter first, then the getter\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!getterInstance) return module.unreachable();\n        let returnType = getterInstance.signature.returnType;\n        assert(valueType == returnType);\n        let nativeReturnType = returnType.toNativeType();\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n          this.makeCallDirect(getterInstance, null, valueExpression) // sets currentType\n        ], nativeReturnType);\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let instance = <Class>(<Property>target).parent;\n        assert(instance.kind == ElementKind.CLASS);\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1);\n        let valueType = setterInstance.signature.parameterTypes[0];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        // call just the setter if the return value isn't of interest\n        if (!tee) {\n          let thisExpr = this.compileExpression(assert(thisExpression), instance.type);\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n        }\n        // otherwise call the setter first, then the getter\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n        let temp = flow.getTempLocal(returnType);\n        let ret = module.block(null, [\n          this.makeCallDirect(setterInstance, [ // set and remember the target\n            module.local_tee(temp.index, thisExpr),\n            valueExpr\n          ], valueExpression),\n          this.makeCallDirect(getterInstance, [ // get from remembered target\n            module.local_get(temp.index, nativeReturnType)\n          ], valueExpression)\n        ], nativeReturnType);\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let instance = <Class>(<IndexSignature>target).parent;\n        assert(instance.kind == ElementKind.CLASS);\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = instance.lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            valueExpression.range, instance.internalName\n          );\n          return module.unreachable();\n        }\n        let indexedSet = instance.lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          this.error(\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n            valueExpression.range, instance.internalName\n          );\n          this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n          return module.unreachable();\n        }\n        assert(indexedSet.signature.parameterTypes.length == 2);\n        let valueType = indexedSet.signature.parameterTypes[1];\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, valueType, flow); // (*)\n        let thisExpr = this.compileExpression(assert(thisExpression), instance.type);\n        let elementExpr = this.compileExpression(assert(indexExpression), Type.i32, Constraints.CONV_IMPLICIT);\n        if (tee) {\n          let tempTarget = flow.getTempLocal(instance.type);\n          let tempElement = flow.getTempLocal(this.currentType);\n          let returnType = indexedGet.signature.returnType;\n          flow.freeTempLocal(tempTarget);\n          let ret = module.block(null, [\n            this.makeCallDirect(indexedSet, [\n              module.local_tee(tempTarget.index, thisExpr),\n              module.local_tee(tempElement.index, elementExpr),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(indexedGet, [\n              module.local_get(tempTarget.index, tempTarget.type.toNativeType()),\n              module.local_get(tempElement.index, tempElement.type.toNativeType())\n            ], valueExpression)\n          ], returnType.toNativeType());\n          flow.freeTempLocal(tempElement);\n          flow.freeTempLocal(tempTarget);\n          return ret;\n        } else {\n          return this.makeCallDirect(indexedSet, [\n            thisExpr,\n            elementExpr,\n            valueExpr\n          ], valueExpression);\n        }\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      valueExpression.range\n    );\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** The local to assign to. */\n    local: Local,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var type = local.type;\n    assert(type != Type.void);\n    var localIndex = local.index;\n\n    if (type.is(TypeFlags.NULLABLE)) {\n      if (flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.WRITTENTO);\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n        valueExpr = this.makeReplace(\n          module.local_get(localIndex, type.toNativeType()),\n          valueExpr,\n          alreadyRetained\n        );\n        if (tee) { // local = REPLACE(local, value)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = REPLACE(local, value))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      } else {\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\n        if (!alreadyRetained) valueExpr = this.makeRetain(valueExpr);\n        if (tee) { // local = __retain(value, local)\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // void(local = __retain(value, local))\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      }\n    } else {\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n      }\n      if (tee) { // local = value\n        this.currentType = type;\n        return module.local_tee(localIndex, valueExpr);\n      } else { // void(local = value)\n        this.currentType = Type.void;\n        return module.local_set(localIndex, valueExpr);\n      }\n    }\n  }\n\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\n  private makeGlobalAssignment(\n    /** The global to assign to. */\n    global: Global,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var nativeType = type.toNativeType();\n\n    if (type.isManaged) {\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      valueExpr = module.global_set(global.internalName,\n        this.makeReplace(\n          module.global_get(global.internalName, nativeType), // oldRef\n          valueExpr, // newRef\n          alreadyRetained\n        )\n      );\n      if (tee) { // (global = REPLACE(global, value))), global\n        this.currentType = type;\n        return module.block(null, [\n          valueExpr,\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = REPLACE(global, value)\n        this.currentType = Type.void;\n        return valueExpr;\n      }\n    } else {\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n      if (tee) { // (global = value), global\n        this.currentType = type;\n        return module.block(null, [\n          module.global_set(global.internalName, valueExpr),\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = value\n        this.currentType = Type.void;\n        return module.global_set(global.internalName,\n          valueExpr\n        );\n      }\n    }\n  }\n\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\n  makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var nativeFieldType = fieldType.toNativeType();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n    var nativeThisType = thisType.toNativeType();\n\n    if (fieldType.isManaged && thisType.isManaged) {\n      let tempThis = flow.getTempLocal(thisType);\n      let alreadyRetained = this.skippedAutoreleases.has(valueExpr);\n      let ret: ExpressionRef;\n      if (tee) { // ((t1 = this).field = REPLACE(t1.field, t2 = value)), t2\n        let tempValue = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n        ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeReplace(\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              module.local_tee(tempValue.index, valueExpr), // newRef\n              alreadyRetained\n            ),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(tempValue.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(tempValue);\n        this.currentType = fieldType;\n      } else { // (t1 = this).field = REPLACE(t1.field, value)\n        ret = module.store(fieldType.byteSize,\n          module.local_tee(tempThis.index, thisExpr),\n          this.makeReplace(\n            module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n              module.local_get(tempThis.index, nativeThisType),\n              nativeFieldType, field.memoryOffset\n            ),\n            valueExpr, // newRef\n            alreadyRetained\n          ),\n          nativeFieldType, field.memoryOffset\n        );\n        this.currentType = Type.void;\n      }\n      flow.freeTempLocal(tempThis);\n      return ret;\n    } else {\n      if (tee) { // (this.field = (t1 = value)), t1\n        let temp = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n        let ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            thisExpr,\n            module.local_tee(temp.index, valueExpr),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(temp.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(temp);\n        this.currentType = fieldType;\n        return ret;\n      } else { // this.field = value\n        this.currentType = Type.void;\n        return module.store(fieldType.byteSize,\n          thisExpr,\n          valueExpr,\n          nativeFieldType, field.memoryOffset\n        );\n      }\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let baseClassInstance = assert((<Class>classInstance).base);\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      // {\n      //   this = super(this || <ALLOC>, ...args)\n      //   this.a = X\n      //   this.b = Y\n      // }\n      let theCall = this.compileCallDirect(\n        this.ensureConstructor(baseClassInstance, expression),\n        expression.arguments,\n        expression,\n        module.if(\n          module.local_get(thisLocal.index, nativeSizeType),\n          module.local_get(thisLocal.index, nativeSizeType),\n          this.makeRetain(\n            this.makeAllocation(<Class>classInstance)\n          )\n        ),\n        Constraints.WILL_RETAIN\n      );\n      assert(baseClassInstance.type.isUnmanaged || this.skippedAutoreleases.has(theCall)); // guaranteed\n      let stmts: ExpressionRef[] = [\n        module.local_set(thisLocal.index, theCall)\n      ];\n      this.makeFieldInitialization(<Class>classInstance, stmts);\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ALLOCATES |\n        FlowFlags.CONDITIONALLY_ALLOCATES\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.block(null, stmts);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.lookupExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let thisExpression = this.resolver.currentThisExpression;\n        let instance = this.resolver.maybeInferCall(expression, prototype, flow);\n        if (!instance) return this.module.unreachable();\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          instance.is(CommonFlags.INSTANCE)\n            ? this.compileExpression(assert(thisExpression), this.options.usizeType)\n            : 0,\n          constraints\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.i32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.local_get((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.global_get((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\n          indexArg = module.load(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type, Constraints.CONV_IMPLICIT);\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\n        if (!getterInstance) return module.unreachable();\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        let type = this.resolver.getTypeOfElement(target);\n        if (type) {\n          this.error(\n            DiagnosticCode.Type_0_has_no_call_signatures,\n            expression.range, type.toString()\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n            expression.range\n          );\n        }\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    return compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.The_this_types_of_each_signature_are_incompatible,\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Checks that an unsafe expression is allowed. */\n  private checkUnsafe(reportNode: Node): void {\n    // Library files may always use unsafe features\n    if (this.options.noUnsafe && !reportNode.range.source.isLibrary) {\n      this.error(\n        DiagnosticCode.Operation_is_unsafe,\n        reportNode.range\n      );\n    }\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n    if (instance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n        }\n        // make the inlined call (is aware of autoreleases)\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        if (this.currentType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, instance.signature.returnType, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    if (signature.returnType.isManaged) {\n      if (constraints & Constraints.WILL_DROP) {\n        // Skip autorelease and simply release\n        return this.makeCallDirect(instance, operands, reportNode, true);\n      } else if (constraints & Constraints.WILL_RETAIN) {\n        // Skip autorelease and remember\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\n        this.skippedAutoreleases.add(expr);\n        return expr;\n      } else {\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\n      }\n    }\n    return this.makeCallDirect(instance, operands, reportNode,\n      (constraints & Constraints.WILL_DROP) != 0\n    );\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      // inlining is aware of skipped autoreleases:\n      if (paramType.isManaged) {\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr);\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr)\n      );\n    }\n    if (thisArg) {\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, usedLocals);\n      // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg)\n      );\n      let baseInstance = (<Class>classInstance).base;\n      if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n      );\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      if (initType.isManaged) {\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n        if (!this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr);\n      }\n      body.push(\n        module.local_set(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // Free any new scoped locals and reset to the original flow\n    if (!flow.is(FlowFlags.TERMINATES)) {\n      this.performAutoreleases(flow, body);\n      this.finishAutoreleases(flow, body);\n    }\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      }\n    }\n    return expr;\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\n    var returnType = originalSignature.returnType;\n    var thisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(this.program, originalParameterTypes, returnType, thisType);\n    trampolineSignature.requiredParameters = maxArguments;\n    trampolineSignature.parameterNames = originalSignature.parameterNames;\n    trampoline = new Function(\n      original.name + \"|trampoline\",\n      original.prototype,\n      trampolineSignature,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFlow = this.currentFlow;\n    var flow = trampoline.flow;\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(BuiltinSymbols.argc, NativeType.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(BuiltinSymbols.argc, NativeType.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.local_set(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            Constraints.CONV_IMPLICIT\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      body = module.block(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n    }\n    assert(operandIndex == maxOperands);\n\n    var stmts: ExpressionRef[] = [ body ];\n    var theCall = module.call(originalName, forwardedOperands, returnType.toNativeType());\n    if (returnType != Type.void) {\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\n    } else {\n      stmts.push(theCall);\n      this.performAutoreleases(flow, stmts);\n    }\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      trampoline.internalName,\n      trampolineSignature.nativeParams,\n      trampolineSignature.nativeResults,\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.block(null, stmts, returnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        BuiltinSymbols.argc,\n        NativeType.I32,\n        true,\n        module.i32(0)\n      );\n    }\n    return BuiltinSymbols.argc;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(BuiltinSymbols.setargc,\n        NativeType.I32,\n        NativeType.None,\n        null,\n        module.global_set(this.ensureArgcVar(),\n          module.local_get(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(BuiltinSymbols.setargc, \"__setargc\");\n    }\n    return BuiltinSymbols.setargc;\n  }\n\n  // <reference-counting>\n\n  /** Makes a retain call, retaining the expression's value. */\n  makeRetain(expr: ExpressionRef): ExpressionRef {\n    var retainInstance = this.program.retainInstance;\n    this.compileFunction(retainInstance);\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\n  }\n\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\n  makeRelease(expr: ExpressionRef): ExpressionRef {\n    var releaseInstance = this.program.releaseInstance;\n    this.compileFunction(releaseInstance);\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\n  }\n\n  /** Makes a replace, retaining the new expression's value and releasing the old expression's value, in this order. */\n  makeReplace(oldExpr: ExpressionRef, newExpr: ExpressionRef, alreadyRetained: bool = false): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var nativeSizeType = this.options.nativeSizeType;\n    if (alreadyRetained) {\n      // (t1=newExpr), __release(oldExpr), t1\n      // it is important that `newExpr` evaluates before `oldExpr` is released, hence the local\n      let temp = flow.getTempLocal(this.options.usizeType, findUsedLocals(oldExpr));\n      let ret = module.block(null, [\n        module.local_set(temp.index, newExpr),\n        this.makeRelease(oldExpr),\n        module.local_get(temp.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else {\n      // if ((t1=newExpr) != (t2=oldExpr)) {\n      //   t1 = __retain(t1);\n      //   __release(t2);\n      // }, t1\n      let usizeType = this.options.usizeType;\n      let temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\n      let temp2 = flow.getTempLocal(usizeType);\n      let ret = module.block(null, [\n        module.if(\n          module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n            module.local_tee(temp1.index, newExpr),\n            module.local_tee(temp2.index, oldExpr)\n          ),\n          module.block(null, [\n            module.local_set(temp1.index,\n              this.makeRetain(module.local_get(temp1.index, nativeSizeType))\n            ),\n            this.makeRelease(module.local_get(temp2.index, nativeSizeType))\n          ])\n        ),\n        module.local_get(temp1.index, nativeSizeType)\n      ], nativeSizeType);\n      flow.freeTempLocal(temp2);\n      flow.freeTempLocal(temp1);\n      return ret;\n    }\n  }\n\n  /** Makes an autorelease call at the end of the specified `flow`. */\n  makeAutorelease(\n    /** Expression to autorelease. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Flow that should autorelease. Defaults to the current flow. */\n    flow: Flow = this.currentFlow\n  ): ExpressionRef {\n    // An 'autorelease' is the assignment of a managed reference to a temporary local,\n    // keeping the reference alive until the surrounding flow concludes. This is useful\n    // if a reference is not being immediately assigned to something that would keep it\n    // alive, like a local or a global, yet it'll remain alive in other code. Example:\n    //\n    //   callReceivingAReference(callReturningAReference())\n    //\n    // will be transformed into an autorelease like\n    //\n    //   callReceivingAReference(t = callReturningAReference())\n    //   ...\n    //   __release(t)\n    //\n    // since releasing immediately would free the value before the call:\n    //\n    //   callReceivingAReference((__release(t = callReturningAReference()), t))\n    //\n    var local = flow.getAutoreleaseLocal(type);\n    if (flow.isNonnull(expr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n    return this.module.local_tee(local.index, expr);\n  }\n\n  /**\n   * Attempts to undo an autorelease in the specified `flow`.\n   * Returns the index of the previously retaining variable or -1 if not possible.\n   */\n  tryUndoAutorelease(\n    /** Expression being autoreleased. */\n    expr: ExpressionRef,\n    /** Flow that would autorelease. */\n    flow: Flow\n  ): i32 {\n    // NOTE: Can't remove the local.tee completely because it's already compiled\n    // and a child of something else. Preventing the final release however makes\n    // it optimize away.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: { // local.tee(__retain(expr))\n        if (isLocalTee(expr)) {\n          let index = getLocalSetIndex(expr);\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n            // Assumes that the expression actually belongs to the flow and that\n            // top-level autoreleases are never undone. While that's true, it's\n            // not necessary to check presence in scopedLocals.\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n            return index;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Block: { // { ..., local.tee(__retain(expr)) }\n        if (getBlockName(expr) === null) { // must not be a break target\n          let count = getBlockChildCount(expr);\n          if (count) {\n            return this.tryUndoAutorelease(getBlockChild(expr, count - 1), flow);\n          }\n        }\n        break;\n      }\n    }\n    return -1;\n  }\n\n  /** Delays an autorelease in `innerFlow` until `outerFlow` concludes. */\n  delayAutorelease(\n    /** Expression being autoreleased in `innerFlow`. */\n    expr: ExpressionRef,\n    /** Type of the expression. */\n    type: Type,\n    /** Inner flow that would autorelease. Must not have processed autoreleases yet. */\n    innerFlow: Flow,\n    /** Outer flow that should autorelease instead. */\n    outerFlow: Flow\n  ): ExpressionRef {\n    // Attempt to undo the autorelease in `innerFlow`\n    var index = this.tryUndoAutorelease(expr, innerFlow);\n    return ~index\n      // If it worked, autorelease in `outerFlow` instead\n      ? this.makeAutorelease(expr, type, outerFlow)\n      // If it didn't work, extend the lifetime into `outerFlow`\n      : this.makeAutorelease(this.makeRetain(expr), type, outerFlow);\n  }\n\n  /** Performs any queued autoreleases in the specified flow. */\n  performAutoreleases(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[],\n    /**\n     * Whether to finalize affected locals. Defaults to `true`, which\n     * is almost always correct, except when bubbling up parent flows\n     * in break-like scenarios.\n     */\n    finalize: bool = true\n  ): void {\n    // Autoreleases must be performed whenever a flow concludes, decrementing\n    // the RC of all the references in that flow scheduled for an autorelease.\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      let module = this.module;\n      for (let local of scopedLocals.values()) {\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          let localIndex = local.index;\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n            if (finalize) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n            stmts.push(\n              this.makeRelease(\n                module.local_get(localIndex, local.type.toNativeType())\n              )\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /** Performs any queued autoreleases in the specified flow and returns the given value. */\n  performAutoreleasesWithValue(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Value to return. */\n    valueExpr: ExpressionRef,\n    /** Type of the returned value. */\n    valueType: Type,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[] | null = null,\n    /** Whether to finalize affected locals. */\n    finalize: bool = true\n  ): ExpressionRef {\n    if (!stmts) stmts = new Array<ExpressionRef>();\n    stmts.push(\n      this.module.nop()\n    );\n    var lengthBefore = stmts.length;\n    this.performAutoreleases(flow, stmts, finalize);\n    if (stmts.length > lengthBefore) {\n      let nativeType = valueType.toNativeType();\n      let temp = flow.getTempLocal(valueType);\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      let module = this.module;\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\n      stmts.push(\n        module.local_get(temp.index, nativeType) // append get\n      );\n      let ret = module.block(null, stmts, nativeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else if (stmts.length > 1) {\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\n      return this.module.block(null, stmts, valueType.toNativeType());\n    }\n    return valueExpr;\n  }\n\n  /** Finishes any queued autoreleases in the actual function of the specified flow. */\n  finishAutoreleases(\n    /** Flow releasing its queued autoreleases. */\n    flow: Flow,\n    /** Array of statements to append the releases to. */\n    stmts: ExpressionRef[]\n  ): void {\n    // Differs from `performAutoreleases` in that concluding this flow also\n    // concludes all its parent flows, for example on a `return`.\n    var module = this.module;\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      // Traverse to the top-most flow containing the inlined function's\n      // locals as scoped locals and release these instead of all the locals.\n      let parent: Flow | null;\n      while (parent = flow.parent) flow = parent;\n      this.performAutoreleases(flow, stmts, /* finalize */ false);\n    } else {\n      for (let local of flow.parentFunction.localsByIndex) {\n        let localIndex = local.index;\n        if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n          flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n          stmts.push(\n            this.makeRelease(\n              module.local_get(localIndex, local.type.toNativeType())\n            )\n          );\n        }\n      }\n    }\n  }\n\n  // </reference-counting>\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false,\n    /** Skip the usual autorelease and manage this at the callsite instead. */\n    skipAutorelease: bool = false\n  ): ExpressionRef {\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let expr: ExpressionRef;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          let theOperands = assert(operands);\n          assert(theOperands.length);\n          expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\n        } else {\n          expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\n        }\n        let returnType = this.currentType;\n        if (returnType.isManaged) {\n          if (!skipAutorelease) {\n            expr = this.makeAutorelease(expr, returnType);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (nodeIsConstantValue(initializer.kind)) {\n            operands.push(this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.lookupExpression(initializer, instance.flow, parameterTypes[i]);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toNativeType()),\n                      global.type, parameterTypes[i], false, false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(this.makeZero(parameterTypes[i]));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant) {\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.unreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\n          this.currentType = returnType;\n          if (returnType.isManaged) {\n            if (immediatelyDropped) {\n              expr = this.makeRelease(expr);\n              this.currentType = Type.void;\n            } else if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr, returnType);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          return module.block(null, [\n            module.global_set(this.ensureArgcVar(), module.i32(numArguments)),\n            expr\n          ], this.currentType.toNativeType());\n        }\n      }\n    }\n\n    // If the return value is of a reference type it has not yet been released but is in flight\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else if (!skipAutorelease) {\n        expr = this.makeAutorelease(expr, returnType);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(this.makeZero(parameterTypes[i]));\n      }\n    }\n\n    var returnType = signature.returnType;\n    var expr = module.block(null, [\n      module.global_set(this.ensureArgcVar(), // might be calling a trampoline\n        module.i32(numArguments)\n      ),\n      module.call_indirect(\n        this.options.isWasm64\n          ? module.unary(UnaryOp.WrapI64, indexArg)\n          : indexArg,\n        operands,\n        signature.nativeParams,\n        signature.nativeResults\n      )\n    ], returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else {\n        expr = this.makeAutorelease(expr, returnType);\n      }\n    }\n    return expr;\n  }\n\n  compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.block(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var targetExpression = expression.expression;\n    var targetType = this.resolver.resolveExpression(targetExpression, this.currentFlow); // reports\n    if (targetType) {\n      if (targetType.is(TypeFlags.REFERENCE)) {\n        let classReference = targetType.classReference;\n        if (classReference) {\n          let indexedGet = classReference.lookupOverload(OperatorKind.INDEXED_GET, this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT));\n          if (indexedGet) {\n            let thisArg = this.compileExpression(targetExpression, classReference.type,\n              Constraints.CONV_IMPLICIT\n            );\n            return this.compileCallDirect(indexedGet, [\n              expression.elementExpression\n            ], expression, thisArg, constraints);\n          }\n        }\n      }\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        expression.expression.range, targetType.toString()\n      );\n    }\n    return module.unreachable();\n  }\n\n  compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.functionTypeNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      let parameterNames = new Array<string>(numPresentParameters);\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        parameterNames[i] = parameterNode.name.text; // use actual name\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      let signature = new Signature(this.program, parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      signature.parameterNames = parameterNames;\n      instance = new Function(\n        prototype.name,\n        prototype,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.unreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.compileFunctionUsingTypeArguments(\n        prototype,\n        [],\n        contextualTypeArguments\n      );\n      if (!instance) return this.module.unreachable();\n      this.currentType = instance.signature.type;\n    }\n\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.unreachable()\n      : this.module.i32(index);\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = filesByName.get(internalPath)!;\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (contextualType.is(TypeFlags.REFERENCE)) {\n          let classReference = contextualType.classReference;\n          if (classReference) {\n            this.currentType = classReference.type.asNullable();\n            return options.isWasm64 ? module.i64(0) : module.i32(0);\n          }\n          let signatureReference = contextualType.signatureReference;\n          if (signatureReference) {\n            this.currentType = signatureReference.type.asNullable();\n            return module.i32(0);\n          }\n          // TODO: anyref context yields <usize>0\n        }\n        this.currentType = options.usizeType;\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let nativeSizeType = this.options.nativeSizeType;\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // {\n              //   if (!this) this = <ALLOC>\n              //   this.a = X\n              //   this.b = Y\n              //   return this\n              // }\n              let stmts: ExpressionRef[] = [\n                module.if(\n                  module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                    module.local_get(thisLocal.index, nativeSizeType)\n                  ),\n                  module.local_set(thisLocal.index,\n                    this.makeRetain(\n                      this.makeAllocation(<Class>classInstance)\n                    )\n                  )\n                )\n              ];\n              this.makeFieldInitialization(<Class>classInstance, stmts);\n              stmts.push(\n                module.local_get(thisLocal.index, nativeSizeType)\n              );\n              this.currentType = thisLocal.type;\n              return module.block(null, stmts, nativeSizeType);\n            }\n          }\n          // if not a constructor, `this` type can differ\n          let thisType = assert(actualFunction.signature.thisType);\n          this.currentType = thisType;\n          return module.local_get(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let baseClassInstance = (<Class>classInstance).base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var target = this.resolver.lookupIdentifierExpression( // reports\n      expression,\n      flow,\n      this.currentParent || actualFunction\n    );\n    if (!target) return module.unreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, constraints);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        if (type.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          type = type.nonNullableType;\n        }\n        this.currentType = type;\n\n        if (target.parent != flow.parentFunction) {\n          // TODO: closures\n          this.error(\n            DiagnosticCode.Not_implemented,\n            expression.range\n          );\n          return module.unreachable();\n        }\n        return module.local_get(localIndex, type.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.unreachable();\n        }\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\n        }\n        this.currentType = type;\n        return this.module.global_get((<Global>target).internalName, type.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.module.i32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return this.module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!(instance && this.compileFunction(instance))) return module.unreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.i32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway. also note that the code generated below must preserve side-effects of\n    // the LHS expression even when the result is a constant, i.e. return a block dropping `expr`.\n    var expr = this.compileExpression(expression.expression, this.options.usizeType);\n    var actualType = this.currentType;\n    var expectedType = this.resolver.resolveType(expression.isType, this.currentFlow.actualFunction);\n    this.currentType = Type.bool;\n    if (!expectedType) return module.unreachable();\n\n    // instanceof <basic> - must be exact\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(actualType == expectedType ? 1 : 0)\n      ], NativeType.I32);\n    }\n\n    // <basic> instanceof <reference> - always false\n    if (!actualType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(0)\n      ], NativeType.I32);\n    }\n\n    // both LHS and RHS are references now\n    var nativeSizeType = actualType.toNativeType();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          this.makeZero(actualType)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let flow = this.currentFlow;\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.block(null, [\n          this.convertExpression(expr, actualType, Type.void, false, false, expression.expression),\n          module.i32(1)\n        ], NativeType.I32);\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let flow = this.currentFlow;\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n    }\n\n    // false\n    return module.block(null, [\n      module.drop(expr),\n      module.i32(0)\n    ], NativeType.I32);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        let classType = contextualType.classReference;\n        if (classType) {\n          if (classType.prototype == this.program.arrayPrototype) {\n            return this.compileArrayLiteral(\n              assert(classType.typeArguments)[0],\n              (<ArrayLiteralExpression>expression).elementExpressions,\n              constraints,\n              expression\n            );\n          }\n        }\n        this.error(\n          DiagnosticCode.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly,\n          expression.range, \"T\"\n        );\n        return module.unreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression, constraints);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.unreachable();\n  }\n\n  compileStringLiteral(\n    expression: StringLiteralExpression,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expr = this.ensureStaticString(expression.value);\n    if (constraints & Constraints.WILL_RETAIN) {\n      this.skippedAutoreleases.add(expr);\n    } else {\n      // not necessary since this is static data anyway\n      // expr = this.makeAutorelease(expr, this.currentType);\n    }\n    return expr;\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    constraints: Constraints,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n    var program = this.program;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n    var arrayType = arrayInstance.type;\n    var flow = this.currentFlow;\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(arrayType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = true;\n    var nativeElementType = elementType.toNativeType();\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr = expression\n        ? module.precomputeExpression(\n            this.compileExpression(<Expression>expression, elementType,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        : this.makeZero(elementType);\n      if (getExpressionId(expr) == ExpressionId.Const) {\n        assert(getExpressionType(expr) == nativeElementType);\n      } else {\n        isStatic = false;\n      }\n      values[i] = expr;\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let runtimeHeaderSize = program.runtimeHeaderSize;\n      let bufferSegment = this.ensureStaticArrayBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.ensureStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        // makeArray(length, alignLog2, classId, staticBuffer)\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], reportNode);\n        this.currentType = arrayType;\n        return this.makeAutorelease(this.makeRetain(expr), arrayType);\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = makeArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(0)\n            : module.i32(0)\n        ], reportNode),\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStart = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStart.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, nativeArrayType),\n          nativeArrayType,\n          (<Field>dataStart).memoryOffset\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        valueExpr = this.makeRetain(valueExpr);\n      }\n      // store<T>(tempData, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempDataStart.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    this.currentType = arrayType;\n    return module.block(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var flow = this.currentFlow;\n    var tempLocal = flow.getAutoreleaseLocal(classReference.type);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.store( // TODO: handle setters as well\n        type.byteSize,\n        this.module.local_get(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, Constraints.CONV_IMPLICIT),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.local_set(\n      tempLocal.index,\n      this.makeRetain(\n        this.makeAllocation(classReference)\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.local_get(tempLocal.index, this.options.nativeSizeType);\n\n    this.currentType = classReference.type;\n    return module.block(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveTypeName(expression.typeName, flow.actualFunction);\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        expression.typeName.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    return this.compileInstantiate(classInstance, expression.arguments, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // clone base constructor if a derived class\n    var baseClass = classInstance.base;\n    if (baseClass) {\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          // declaration is important, i.e. to access optional parameter initializers\n          (<FunctionDeclaration>baseCtor.declaration).clone()\n        ),\n        baseCtor.signature,\n        null\n      );\n\n    // otherwise make a default constructor\n    } else {\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n          )\n        ),\n        new Signature(this.program, null, classInstance.type, classInstance.type),\n        null\n      );\n    }\n\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    var flow = instance.flow;\n    this.currentFlow = flow;\n\n    // generate body\n    var signature = instance.signature;\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    var allocExpr = this.makeAllocation(classInstance);\n    if (classInstance.type.isManaged) allocExpr = this.makeRetain(allocExpr);\n    stmts.push(\n      module.if(\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.local_get(0, nativeSizeType)\n        ),\n        module.local_set(0, allocExpr)\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.local_get(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\n      }\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\n      stmts.push(\n        module.local_set(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false, true)\n        )\n      );\n    }\n    this.makeFieldInitialization(classInstance, stmts);\n    var body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    // make the function\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, signature.nativeParams, signature.nativeResults, varTypes, body);\n    instance.finalize(module, funcRef);\n    return instance;\n  }\n\n  compileInstantiate(\n    /** Class to instantiate. */\n    classInstance: Class,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n    var expr = this.compileCallDirect( // no need for another autoreleased local\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.makeZero(this.options.usizeType),\n      constraints\n    );\n    if (getExpressionType(expr) != NativeType.None) { // possibly IMM_DROPPED\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    expression: PropertyAccessExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(expression);\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression, flow, ctxType); // reports\n    if (!target) return module.unreachable();\n    if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        if (!this.compileGlobal(<Global>target)) return module.unreachable(); // reports\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, ctxType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>theEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.compileInlineConstant(<EnumValue>target, ctxType, constraints);\n        }\n        assert((<EnumValue>target).type == Type.i32);\n        return module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\n        this.currentType = (<Field>target).type;\n        return module.load(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\n        if (getterPrototype) {\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\n          if (getter) return this.compileCallDirect(getter, [], expression, 0);\n        }\n        return module.unreachable();\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        return this.compileCallDirect(getterInstance, [], expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n\n        if (prototype.is(CommonFlags.STATIC)) {\n          let instance = this.compileFunctionUsingTypeArguments(\n            prototype,\n            [],\n            makeMap<string,Type>(),\n            expression,\n          );\n          if (instance == null) {\n            return module.unreachable();\n          } else {\n            this.currentType = instance.type;\n            return module.i32(this.ensureFunctionTableEntry(instance));\n          }\n        }\n\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          expression.range, prototype.name\n        );\n        return module.unreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return module.unreachable();\n  }\n\n  compileTernaryExpression(\n    expression: TernaryExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var outerFlow = this.currentFlow;\n\n    var condExpr = this.module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(expression.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    // FIXME: skips common denominator, inconsistently picking left type\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileExpression(ifThen, ctxType)\n        : this.compileExpression(ifElse, ctxType);\n    }\n\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\n\n    var ifThenFlow = outerFlow.fork();\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, ctxType, inheritedConstraints);\n    var ifThenType = this.currentType;\n    var ifThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\n\n    var ifElseFlow = outerFlow.fork();\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, ctxType, inheritedConstraints);\n    var ifElseType = this.currentType;\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\n      );\n      this.currentType = ctxType;\n      return this.module.unreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType, commonType,\n      false, false,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType, commonType,\n      false, false,\n      ifElse\n    );\n    this.currentType = commonType;\n\n    if (ifThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\n      if (!ifThenAutoreleaseSkipped) {\n        ifThenExpr = this.makeRetain(ifThenExpr);\n        ifThenAutoreleaseSkipped = true;\n      } else {\n        ifElseExpr = this.makeRetain(ifElseExpr);\n        ifElseAutoreleaseSkipped = true;\n      }\n    } else if (!ifThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\n      if (constraints & Constraints.WILL_RETAIN) { // try to undo both\n        let ifThenIndex = this.tryUndoAutorelease(ifThenExpr, ifThenFlow);\n        if (ifThenIndex == -1) ifThenExpr = this.makeRetain(ifThenExpr);\n        let ifElseIndex = this.tryUndoAutorelease(ifElseExpr, ifElseFlow);\n        if (ifElseIndex == -1) ifElseExpr = this.makeRetain(ifElseExpr);\n        ifThenAutoreleaseSkipped = true;\n        ifElseAutoreleaseSkipped = true;\n      } else {\n        ifThenExpr = this.delayAutorelease(ifThenExpr, ifThenType, ifThenFlow, outerFlow);\n        ifElseExpr = this.delayAutorelease(ifElseExpr, ifElseType, ifElseFlow, outerFlow);\n      }\n    }\n\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\n    ifThenFlow.freeScopedLocals();\n\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var expr = this.module.if(condExpr, ifThenExpr, ifElseExpr);\n    assert(ifThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\n    if (ifThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n    return expr;\n  }\n\n  compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value,\n    // except if a static overload is found, which reverses the use of a temp. (see below)\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (isInstance) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, flow); // reports\n    if (!target) {\n      if (tempLocal) flow.freeTempLocal(tempLocal);\n      return module.unreachable();\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      return this.makeAssignment(\n        target,\n        expr,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.makeZero(this.currentType),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"-\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.makeOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = module.unary(UnaryOp.EqzI32, this.makeIsTrueish(expr, this.currentType));\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"~\", this.currentType.toString()\n          );\n          return module.unreachable();\n        } else {\n          expr = this.convertExpression(expr,\n            this.currentType, this.currentType.intType,\n            false, false,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.makeNegOne(this.currentType)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"~\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        return this.compileTypeof(expression, contextualType, constraints);\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  compileTypeof(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var operand = expression.operand;\n    var expr: ExpressionRef = 0;\n    var stringInstance = this.program.stringInstance;\n    var typeString: string;\n    if (operand.kind == NodeKind.NULL) {\n      typeString = \"object\"; // special since `null` without type context is usize\n    } else {\n      let element = this.resolver.lookupExpression(operand, this.currentFlow, Type.auto, ReportMode.SWALLOW);\n      if (!element) {\n        switch (operand.kind) {\n          case NodeKind.PROPERTYACCESS:\n          case NodeKind.ELEMENTACCESS: {\n            operand = operand.kind == NodeKind.PROPERTYACCESS\n              ? (<PropertyAccessExpression>operand).expression\n              : (<ElementAccessExpression>operand).expression;\n            let targetType = this.resolver.resolveExpression(operand, this.currentFlow, Type.auto, ReportMode.REPORT);\n            if (!targetType) {\n              this.currentType = stringInstance.type;\n              return this.module.unreachable();\n            }\n            expr = this.compileExpression(operand, Type.auto); // might have side-effects\n            break;\n          }\n          case NodeKind.IDENTIFIER: break; // ignore error\n          default: expr = this.compileExpression(operand, Type.auto); // trigger error\n        }\n        typeString = \"undefined\";\n      } else {\n        switch (element.kind) {\n          case ElementKind.CLASS_PROTOTYPE:\n          case ElementKind.NAMESPACE:\n          case ElementKind.ENUM: {\n            typeString = \"object\";\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            typeString = \"function\";\n            break;\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto);\n            let type = this.currentType;\n            expr = this.convertExpression(expr, type, Type.void, true, false, operand);\n            if (type.is(TypeFlags.REFERENCE)) {\n              let signatureReference = type.signatureReference;\n              if (signatureReference) {\n                typeString = \"function\";\n              } else {\n                let classReference = type.classReference;\n                if (classReference) {\n                  if (classReference.prototype === stringInstance.prototype) {\n                    typeString = \"string\";\n                  } else {\n                    typeString = \"object\";\n                  }\n                } else {\n                  typeString = \"anyref\"; // TODO?\n                }\n              }\n            } else if (type == Type.bool) {\n              typeString = \"boolean\";\n            } else if (type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER)) {\n              typeString = \"number\";\n            } else {\n              typeString = \"undefined\"; // failed to compile?\n            }\n            break;\n          }\n        }\n      }\n    }\n    this.currentType = stringInstance.type;\n    return expr\n      ? this.module.block(null, [ expr, this.ensureStaticString(typeString) ], this.options.nativeSizeType)\n      : this.ensureStaticString(typeString);\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Makes a constant zero of the specified type. */\n  makeZero(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n    }\n  }\n\n  /** Makes a constant one of the specified type. */\n  makeOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n    }\n  }\n\n  /** Makes a constant negative one of the specified type. */\n  makeNegOne(type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      default: assert(false);\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (type.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE: if (type.isManaged && this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr, type);\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF32, module.local_tee(temp.index, expr), module.f32(0)),\n          module.binary(BinaryOp.EqF32,\n            module.local_get(temp.index, NativeType.F32),\n            module.local_get(temp.index, NativeType.F32)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF64, module.local_tee(temp.index, expr), module.f64(0)),\n          module.binary(BinaryOp.EqF64,\n            module.local_get(temp.index, NativeType.F64),\n            module.local_get(temp.index, NativeType.F64)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      // case TypeKind.ANYREF: {\n      //   TODO: !ref.is_null\n      // }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    var allocInstance = program.allocInstance;\n    this.compileFunction(allocInstance);\n    return module.call(allocInstance.internalName, [\n      options.isWasm64\n        ? module.i64(classInstance.currentMemoryOffset)\n        : module.i32(classInstance.currentMemoryOffset),\n      module.i32(\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\n          ? 0\n          : classInstance.id\n      )\n    ], options.nativeSizeType);\n  }\n\n  /** Makes the initializers for a class's fields. */\n  makeFieldInitialization(\n    classInstance: Class,\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return [];\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\n    var thisLocalIndex = isInline\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    for (let member of members.values()) {\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let fieldPrototype = field.prototype;\n      let initializerNode = fieldPrototype.initializerNode;\n      let parameterIndex = fieldPrototype.parameterIndex;\n      let initExpr: ExpressionRef;\n      if (initializerNode) { // use initializer\n        initExpr = this.compileExpression(initializerNode, fieldType, // reports\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\n          initExpr = this.makeRetain(initExpr);\n        }\n      } else if (parameterIndex >= 0) { // initialized via parameter (here: a local)\n        initExpr = module.local_get(\n          isInline\n            ? assert(flow.lookupLocal(field.name)).index\n            : 1 + parameterIndex, // this is local 0\n          nativeFieldType\n        );\n        if (fieldType.isManaged) initExpr = this.makeRetain(initExpr);\n      } else { // initialize with zero\n        initExpr = this.makeZero(fieldType);\n      }\n      stmts.push(\n        module.store(fieldType.byteSize,\n          module.local_get(thisLocalIndex, nativeSizeType),\n          initExpr,\n          nativeFieldType,\n          field.memoryOffset\n        )\n      );\n    }\n    return stmts;\n  }\n\n  makeInstanceOfClass(\n    expr: ExpressionRef,\n    classInstance: Class\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var idTemp = flow.getTempLocal(Type.i32);\n    var idExpr = module.load(4, false,\n      module.binary(BinaryOp.SubI32,\n        expr,\n        module.i32(this.program.runtimeHeaderSize)\n      ),\n      NativeType.I32\n    );\n    var label = \"instanceof_\" + classInstance.name + \"|\" + flow.pushBreakLabel();\n    var conditions: ExpressionRef[] = [];\n    conditions.push(\n      module.drop( // br_if returns the value too\n        module.br(label,\n          module.binary(BinaryOp.EqI32, // classId == class.id\n            module.local_tee(idTemp.index, idExpr),\n            module.i32(classInstance.id)\n          ),\n          module.i32(1) // ? true\n        )\n      )\n    );\n    // TODO: insert conditions for all possible subclasses (i.e. cat is also animal)\n    // TODO: simplify if there are none\n    conditions.push(\n      module.i32(0) // : false\n    );\n    flow.freeTempLocal(idTemp);\n    flow.popBreakLabel();\n    return module.block(label, conditions, NativeType.I32);\n  }\n\n}\n\n// helpers\n\nconst v128_zero = new Uint8Array(16);\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n\n/** Flattens a series of expressions to a nop, a single statement or a block depending on statement count. */\nexport function flatten(module: Module, stmts: ExpressionRef[], type: NativeType): ExpressionRef {\n  var length = stmts.length;\n  if (length == 0) return module.nop(); // usually filtered out again\n  if (length == 1) {\n    let single = stmts[0];\n    switch (getExpressionId(single)) {\n      case ExpressionId.Return:\n      case ExpressionId.Throw:\n      case ExpressionId.Unreachable: {\n        // type does no matter, terminates anyway\n        return single;\n      }\n    }\n    let singleType = getExpressionType(single);\n    assert(singleType == NativeType.Unreachable || singleType == type);\n    return single;\n  }\n  return module.block(null, stmts, type);\n}\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Not_implemented = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Feature_0_is_not_enabled = 103,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Operation_0_cannot_be_applied_to_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Expression_is_never_null = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  Type_0_is_illegal_in_this_context = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Type_0_is_not_a_function_index_or_function_reference = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  _0_is_not_a_valid_operator = 224,\n  Expression_cannot_be_represented_by_a_type = 225,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  This_expression_is_not_constructable = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly = 2453,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  The_this_types_of_each_signature_are_incompatible = 2685,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  Type_0_has_no_call_signatures = 2757,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Not implemented.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 103: return \"Feature '{0}' is not enabled.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Operation '{0}' cannot be applied to type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Expression is never 'null'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"Type '{0}' is illegal in this context.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Type '{0}' is not a function index or function reference.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"'{0}' is not a valid operator.\";\n    case 225: return \"Expression cannot be represented by a type.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"This expression is not constructable.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2453: return \"The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2685: return \"The 'this' types of each signature are incompatible.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 2757: return \"Type '{0}' has no call signatures.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","const binaryen = global.Binaryen || require(\"binaryen\");\n\nmodule.exports = binaryen;\n\nconst { Module } = require(\"../module\");\n\nModule.prototype.toText = function() {\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n  // of unreachable statements not actually emitted by the compiler. Optimizing\n  // StackIR removes these again, but may also suppress useless code emitted by\n  // the compiler that's then no longer visible in tests. Both not ideal.\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n};\n\nModule.prototype.toAsmjs = function() {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  Constraints,\n  RuntimeFeatures,\n  flatten\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression,\n  CallExpression,\n  isNumericLiteral\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  SIMDTernaryOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  Relooper,\n  RelooperBlockRef,\n  SIMDLoadOp,\n  getLocalGetIndex,\n  hasSideEffects,\n  createType\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  Element\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  featureToString,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Symbols of various compiler built-ins. */\nexport namespace BuiltinSymbols {\n  // std/builtins.ts\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n  export const isVoid = \"~lib/builtins/isVoid\";\n\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n  export const atomic_fence = \"~lib/builtins/atomic.fence\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const nameof = \"~lib/builtins/nameof\";\n  export const lengthof = \"~lib/builtins/lengthof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n  export const void_ = \"~lib/builtins/void\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_xor_u = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_xor_u = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_swizzle = \"~lib/builtins/v128.swizzle\";\n  export const v128_load_splat = \"~lib/builtins/v128.load_splat\";\n  export const v128_load_ext = \"~lib/builtins/v128.load_ext\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_andnot = \"~lib/builtins/v128.andnot\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_dot = \"~lib/builtins/v128.dot\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc_sat = \"~lib/builtins/v128.trunc_sat\";\n  export const v128_narrow = \"~lib/builtins/v128.narrow\";\n  export const v128_widen_low = \"~lib/builtins/v128.widen_low\";\n  export const v128_widen_high = \"~lib/builtins/v128.widen_high\";\n  export const v128_qfma = \"~lib/builtins/v128.qfma\";\n  export const v128_qfms = \"~lib/builtins/v128.qfms\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_min_s = \"~lib/builtins/i8x16.min_s\";\n  export const i8x16_min_u = \"~lib/builtins/i8x16.min_u\";\n  export const i8x16_max_s = \"~lib/builtins/i8x16.max_s\";\n  export const i8x16_max_u = \"~lib/builtins/i8x16.max_u\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n  export const i8x16_narrow_i16x8_s = \"~lib/builtins/i8x16.narrow_i16x8_s\";\n  export const i8x16_narrow_i16x8_u = \"~lib/builtins/i8x16.narrow_i16x8_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_min_s = \"~lib/builtins/i16x8.min_s\";\n  export const i16x8_min_u = \"~lib/builtins/i16x8.min_u\";\n  export const i16x8_max_s = \"~lib/builtins/i16x8.max_s\";\n  export const i16x8_max_u = \"~lib/builtins/i16x8.max_u\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n  export const i16x8_narrow_i32x4_s = \"~lib/builtins/i16x8.narrow_i32x4_s\";\n  export const i16x8_narrow_i32x4_u = \"~lib/builtins/i16x8.narrow_i32x4_u\";\n  export const i16x8_widen_low_i8x16_s = \"~lib/builtins/i16x8.widen_low_i8x16_s\";\n  export const i16x8_widen_low_i8x16_u = \"~lib/builtins/i16x8.widen_low_i8x16_u\";\n  export const i16x8_widen_high_i8x16_s = \"~lib/builtins/i16x8.widen_high_i8x16_s\";\n  export const i16x8_widen_high_i8x16_u = \"~lib/builtins/i16x8.widen_high_i8x16_u\";\n  export const i16x8_load8x8_s = \"~lib/builtins/i16x8.load8x8_s\";\n  export const i16x8_load8x8_u = \"~lib/builtins/i16x8.load8x8_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_min_s = \"~lib/builtins/i32x4.min_s\";\n  export const i32x4_min_u = \"~lib/builtins/i32x4.min_u\";\n  export const i32x4_max_s = \"~lib/builtins/i32x4.max_s\";\n  export const i32x4_max_u = \"~lib/builtins/i32x4.max_u\";\n  export const i32x4_dot_i16x8_s = \"~lib/builtins/i32x4.dot_i16x8_s\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_sat_f32x4_s = \"~lib/builtins/i32x4.trunc_sat_f32x4_s\";\n  export const i32x4_trunc_sat_f32x4_u = \"~lib/builtins/i32x4.trunc_sat_f32x4_u\";\n  export const i32x4_widen_low_i16x8_s = \"~lib/builtins/i32x4.widen_low_i16x8_s\";\n  export const i32x4_widen_low_i16x8_u = \"~lib/builtins/i32x4.widen_low_i16x8_u\";\n  export const i32x4_widen_high_i16x8_s = \"~lib/builtins/i32x4.widen_high_i16x8_s\";\n  export const i32x4_widen_high_i16x8_u = \"~lib/builtins/i32x4.widen_high_i16x8_u\";\n  export const i32x4_load16x4_s = \"~lib/builtins/i32x4.load16x4_s\";\n  export const i32x4_load16x4_u = \"~lib/builtins/i32x4.load16x4_u\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_sat_f64x2_s = \"~lib/builtins/i64x2.trunc_sat_f64x2_s\";\n  export const i64x2_trunc_sat_f64x2_u = \"~lib/builtins/i64x2.trunc_sat_f64x2_u\";\n  export const i64x2_load32x2_s = \"~lib/builtins/i64x2.load32x2_s\";\n  export const i64x2_load32x2_u = \"~lib/builtins/i64x2.load32x2_u\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_i32x4_s = \"~lib/builtins/f32x4.convert_i32x4_s\";\n  export const f32x4_convert_i32x4_u = \"~lib/builtins/f32x4.convert_i32x4_u\";\n  export const f32x4_qfma = \"~lib/builtins/f32x4.qfma\";\n  export const f32x4_qfms = \"~lib/builtins/f32x4.qfms\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_i64x2_s = \"~lib/builtins/f64x2.convert_i64x2_s\";\n  export const f64x2_convert_i64x2_u = \"~lib/builtins/f64x2.convert_i64x2_u\";\n  export const f64x2_qfma = \"~lib/builtins/f64x2.qfma\";\n  export const f64x2_qfms = \"~lib/builtins/f64x2.qfms\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n  export const v8x16_swizzle = \"~lib/builtins/v8x16.swizzle\";\n  export const v8x16_load_splat = \"~lib/builtins/v8x16.load_splat\";\n  export const v16x8_load_splat = \"~lib/builtins/v16x8.load_splat\";\n  export const v32x4_load_splat = \"~lib/builtins/v32x4.load_splat\";\n  export const v64x2_load_splat = \"~lib/builtins/v64x2.load_splat\";\n\n  // internals\n  export const heap_base = \"~lib/heap/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n\n  // std/number.ts\n  export const isNaN = \"~lib/number/isNaN\";\n  export const isFinite = \"~lib/number/isFinite\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  export const memory_allocate = \"~lib/memory/memory.allocate\";\n  export const memory_free = \"~lib/memory/memory.free\";\n  export const memory_reset = \"~lib/memory/memory.reset\";\n\n  // std/runtime.ts\n  export const runtime_instanceof = \"~lib/runtime/runtime.instanceof\";\n  export const runtime_flags = \"~lib/runtime/runtime.flags\";\n  export const runtime_allocate = \"~lib/util/runtime/allocate\";\n  export const runtime_reallocate = \"~lib/util/runtime/reallocate\";\n  export const runtime_register = \"~lib/util/runtime/register\";\n  export const runtime_discard = \"~lib/util/runtime/discard\";\n  export const runtime_makeArray = \"~lib/util/runtime/makeArray\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n\n  // compiler generated\n  export const started = \"~lib/started\";\n  export const argc = \"~lib/argc\";\n  export const setargc = \"~lib/setargc\";\n  export const capabilities = \"~lib/capabilities\";\n}\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  /* Compiler reference. */\n  compiler: Compiler,\n  /** Respective function prototype. */\n  prototype: FunctionPrototype,\n  /** Pre-resolved type arguments. */\n  typeArguments: Type[] | null,\n  /** Operand expressions. */\n  operands: Expression[],\n  /** Contextual type. */\n  contextualType: Type,\n  /** Respective call expression. */\n  reportNode: CallExpression,\n  /** Indicates that contextual type is ASM type. */\n  isAsm: bool = false\n): ExpressionRef {\n  var module = compiler.module;\n\n  switch (prototype.internalName) {\n\n    // === Static type evaluation =================================================================\n\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isBoolean: { // isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type == Type.bool\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          let stringInstance = compiler.program.stringInstance;\n          if (stringInstance && classReference.isAssignableTo(stringInstance)) return module.i32(1);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          return module.i32(classReference.prototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          return module.i32(classReference.isArrayLike ? 1 : 0);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.signatureReference ? 1 : 0);\n    }\n    case BuiltinSymbols.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\n    }\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let element = compiler.resolver.lookupExpression(\n        operands[0],\n        compiler.currentFlow,\n        Type.auto,\n        ReportMode.SWALLOW\n      );\n      return module.i32(element ? 1 : 0);\n    }\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let expr = compiler.compileExpression(operands[0], Type.auto);\n      compiler.currentType = Type.bool;\n      return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case BuiltinSymbols.isManaged: { // isManaged<T!>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.isManaged ? 1 : 0);\n    }\n    case BuiltinSymbols.isVoid: { // isVoid<T!>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.kind == TypeKind.VOID ? 1 : 0);\n    }\n    case BuiltinSymbols.lengthof: { // lengthof<T!>() -> i32\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.i32;\n      if (!type) return module.unreachable();\n      let signatureReference = type.signatureReference;\n      if (!signatureReference) {\n        compiler.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          reportNode.range, type.toString()\n        );\n        return module.unreachable();\n      }\n      return module.i32(signatureReference.parameterTypes.length);\n    }\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let byteSize = type.byteSize;\n      if (!byteSize) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"sizeof\", type.toString()\n        );\n        return module.unreachable();\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(byteSize);\n        }\n        return module.i64(byteSize, 0);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(byteSize, 0);\n        }\n        return module.i32(byteSize);\n      }\n    }\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let byteSize = type.byteSize;\n      if (!isPowerOf2(byteSize)) { // implies == 0\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"alignof\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let alignLog2 = ctz<i32>(byteSize);\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(alignLog2);\n        }\n        return module.i64(alignLog2, 0);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(alignLog2, 0);\n        }\n        return module.i32(alignLog2);\n      }\n    }\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let classType = type.classReference;\n      if (!(type.is(TypeFlags.REFERENCE) && classType !== null)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"offsetof\", type.toString()\n        );\n        if (compiler.options.isWasm64) {\n          if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n            compiler.currentType = Type.u32;\n          }\n        } else {\n          if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n            compiler.currentType = Type.u64;\n          }\n        }\n        return module.unreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.unreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.unreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(offset);\n        }\n        return module.i64(offset);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(offset);\n        }\n        return module.i32(offset);\n      }\n    }\n    case BuiltinSymbols.nameof: {\n      let resultType = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      if (!resultType) {\n        compiler.currentType = compiler.program.stringInstance.type;\n        return module.unreachable();\n      }\n      let value: string;\n      if (resultType.is(TypeFlags.REFERENCE)) {\n        let classReference = resultType.classReference;\n        if (classReference) {\n          value = classReference.name;\n        } else {\n          let signatureReference = resultType.signatureReference;\n          if (signatureReference) {\n            value = \"Function\";\n          } else {\n            value = \"Anyref\";\n          }\n        }\n      } else {\n        switch (resultType.kind) {\n          case TypeKind.BOOL: { value = \"bool\"; break; }\n          case TypeKind.I8: { value = \"i8\"; break; }\n          case TypeKind.U8: { value = \"u8\"; break; }\n          case TypeKind.I16: { value = \"i16\"; break; }\n          case TypeKind.U16: { value = \"u16\"; break; }\n          case TypeKind.I32: { value = \"i32\"; break; }\n          case TypeKind.U32: { value = \"u32\"; break; }\n          case TypeKind.F32: { value = \"f32\"; break; }\n          case TypeKind.I64: { value = \"i64\"; break; }\n          case TypeKind.U64: { value = \"u64\"; break; }\n          case TypeKind.F64: { value = \"f64\"; break; }\n          case TypeKind.ISIZE: { value = \"isize\"; break; }\n          case TypeKind.USIZE: { value = \"usize\"; break; }\n          case TypeKind.V128: { value = \"v128\"; break; }\n          case TypeKind.ANYREF: { value = \"anyref\"; break; }\n          case TypeKind.EXNREF: { value = \"exnref\"; break; }\n          default: assert(false);\n          case TypeKind.VOID: { value = \"void\"; break; }\n        }\n      }\n      return compiler.ensureStaticString(value);\n    }\n\n    // === Math ===================================================================================\n\n    case BuiltinSymbols.clz: { // clz<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.ClzI32, arg0);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.ClzI64\n                : UnaryOp.ClzI32,\n              arg0\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.ClzI64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"clz\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.ctz: { // ctz<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.CtzI32, arg0);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.CtzI64\n                : UnaryOp.CtzI32,\n              arg0\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.CtzI64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"ctz\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.popcnt: { // popcnt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (compiler.currentType.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.PopcntI32, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.PopcntI64, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.PopcntI64\n                : UnaryOp.PopcntI32,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"popcnt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            return compiler.ensureSmallIntegerWrap(\n              module.binary(BinaryOp.RotlI32, arg0, arg1),\n              type\n            );\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.RotlI32, arg0, arg1);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.RotlI64\n                : BinaryOp.RotlI32,\n              arg0, arg1\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.RotlI64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"rotl\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            return compiler.ensureSmallIntegerWrap(\n              module.binary(BinaryOp.RotrI32, arg0, arg1),\n              type\n            );\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.RotrI32, arg0, arg1);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.RotrI64\n                : BinaryOp.RotrI32,\n              arg0, arg1\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.RotrI64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"rotr\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            let flow = compiler.currentFlow;\n\n            // possibly overflows, e.g. abs<i8>(-128) == 128\n            let temp1 = flow.getTempLocal(Type.i32);\n            let temp2 = flow.getTempLocal(Type.i32);\n            // (x + (x >> 31)) ^ (x >> 31)\n            let ret = module.binary(BinaryOp.XorI32,\n              module.binary(BinaryOp.AddI32,\n                module.local_tee(\n                  temp2.index,\n                  module.binary(BinaryOp.ShrI32,\n                    module.local_tee(temp1.index, arg0),\n                    module.i32(31)\n                  )\n                ),\n                module.local_get(temp1.index, NativeType.I32)\n              ),\n              module.local_get(temp2.index, NativeType.I32)\n            );\n            flow.freeTempLocal(temp2);\n            flow.freeTempLocal(temp1);\n            return ret;\n          }\n          case TypeKind.ISIZE: {\n            let options = compiler.options;\n            let flow = compiler.currentFlow;\n            let isWasm64 = options.isWasm64;\n\n            let temp1 = flow.getTempLocal(options.usizeType);\n            let temp2 = flow.getTempLocal(options.usizeType);\n            let ret = module.binary(isWasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n              module.binary(isWasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n                module.local_tee(\n                  temp2.index,\n                  module.binary(isWasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                    module.local_tee(temp1.index, arg0),\n                    isWasm64 ? module.i64(63) : module.i32(31)\n                  )\n                ),\n                module.local_get(temp1.index, options.nativeSizeType)\n              ),\n              module.local_get(temp2.index, options.nativeSizeType)\n            );\n            flow.freeTempLocal(temp2);\n            flow.freeTempLocal(temp1);\n            return ret;\n          }\n          case TypeKind.I64: {\n            let flow = compiler.currentFlow;\n\n            let temp1 = flow.getTempLocal(Type.i64);\n            let temp2 = flow.getTempLocal(Type.i64);\n            // (x + (x >> 63)) ^ (x >> 63)\n            let ret = module.binary(BinaryOp.XorI64,\n              module.binary(BinaryOp.AddI64,\n                module.local_tee(\n                  temp2.index,\n                  module.binary(BinaryOp.ShrI64,\n                    module.local_tee(temp1.index, arg0),\n                    module.i64(63)\n                  )\n                ),\n                module.local_get(temp1.index, NativeType.I64)\n              ),\n              module.local_get(temp2.index, NativeType.I64)\n            );\n            flow.freeTempLocal(temp2);\n            flow.freeTempLocal(temp1);\n            return ret;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.BOOL: return arg0;\n          case TypeKind.F32: return module.unary(UnaryOp.AbsF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.AbsF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"abs\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let left = operands[0];\n      let arg0 = typeArguments\n        ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1: ExpressionRef;\n        if (!typeArguments && isNumericLiteral(left)) { // prefer right type\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n          if (compiler.currentType != type) {\n            arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n          }\n        } else {\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n        }\n        let op: BinaryOp = -1;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n          case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n          case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n          case TypeKind.ISIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.GtI64\n              : BinaryOp.GtI32;\n            break;\n          }\n          case TypeKind.USIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.GtU64\n              : BinaryOp.GtU32;\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MaxF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MaxF64, arg0, arg1);\n        }\n        if (op != -1) {\n          let flow = compiler.currentFlow;\n          let nativeType = type.toNativeType();\n          let temp1 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n          let temp2 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n          let ret = module.select(\n            module.local_tee(temp1.index, arg0),\n            module.local_tee(temp2.index, arg1),\n            module.binary(op,\n              module.local_get(temp1.index, nativeType),\n              module.local_get(temp2.index, nativeType)\n            )\n          );\n          flow.freeTempLocal(temp2);\n          flow.freeTempLocal(temp1);\n          return ret;\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"max\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let left = operands[0];\n      let arg0 = typeArguments\n        ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1: ExpressionRef;\n        if (!typeArguments && isNumericLiteral(left)) { // prefer right type\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n          if (compiler.currentType != type) {\n            arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n          }\n        } else {\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n        }\n        let op: BinaryOp = -1;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n          case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n          case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n          case TypeKind.ISIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.LtI64\n              : BinaryOp.LtI32;\n            break;\n          }\n          case TypeKind.USIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.LtU64\n              : BinaryOp.LtU32;\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MinF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MinF64, arg0, arg1);\n        }\n        if (op != -1) {\n          let flow = compiler.currentFlow;\n          let nativeType = type.toNativeType();\n          let temp1 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n          let temp2 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n          let ret = module.select(\n            module.local_tee(temp1.index, arg0),\n            module.local_tee(temp2.index, arg1),\n            module.binary(op,\n              module.local_get(temp1.index, nativeType),\n              module.local_get(temp2.index, nativeType)\n            )\n          );\n          flow.freeTempLocal(temp2);\n          flow.freeTempLocal(temp1);\n          return ret;\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"min\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.ceil: { // ceil<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered rounded\n          case TypeKind.F32: return module.unary(UnaryOp.CeilF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.CeilF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"ceil\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.floor: { // floor<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered rounded\n          case TypeKind.F32: return module.unary(UnaryOp.FloorF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.FloorF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"floor\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          // TODO: does an integer version make sense?\n          case TypeKind.F32: return module.binary(BinaryOp.CopysignF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.CopysignF64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"copysign\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0;\n          case TypeKind.F32: return module.unary(UnaryOp.NearestF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.NearestF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"nearest\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n            compiler.currentType = type;\n            return module.unary(UnaryOp.ReinterpretF32, arg0);\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n            compiler.currentType = type;\n            return module.unary(UnaryOp.ReinterpretF64, arg0);\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let arg0 = compiler.compileExpression(operands[0],\n              compiler.options.isWasm64\n                ? Type.f64\n                : Type.f32,\n              Constraints.CONV_IMPLICIT\n            );\n            compiler.currentType = type;\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.ReinterpretF64\n                : UnaryOp.ReinterpretF32,\n              arg0\n            );\n          }\n          case TypeKind.F32: {\n            let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n            compiler.currentType = Type.f32;\n            return module.unary(UnaryOp.ReinterpretI32, arg0);\n          }\n          case TypeKind.F64: {\n            let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n            compiler.currentType = Type.f64;\n            return module.unary(UnaryOp.ReinterpretI64, arg0);\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"reinterpret\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          // TODO: integer versions (that return f64 or convert)?\n          case TypeKind.F32: return module.unary(UnaryOp.SqrtF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SqrtF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"sqrt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered truncated\n          case TypeKind.F32: return module.unary(UnaryOp.TruncF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.TruncF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"trunc\", type.toString()\n      );\n      return module.unreachable();\n    }\n\n    // === Memory access ==========================================================================\n\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        contextualType != Type.auto &&\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = outType;\n      return module.load(\n        type.byteSize,\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        outType.toNativeType(),\n        immOffset,\n        immAlign\n      );\n    }\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (operands.length == 4) {\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[3].range, \"Alignment\"\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.void;\n      return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n    }\n\n    // === Atomics ================================================================================\n\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.load\", type.toString()\n        );\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      compiler.currentType = outType;\n      return module.atomic_load(\n        type.byteSize,\n        arg0,\n        outType.toNativeType(),\n        immOffset\n      );\n    }\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.store\", type.toString()\n        );\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n    }\n    case BuiltinSymbols.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\n    case BuiltinSymbols.atomic_sub:\n    case BuiltinSymbols.atomic_and:\n    case BuiltinSymbols.atomic_or:\n    case BuiltinSymbols.atomic_xor:\n    case BuiltinSymbols.atomic_xchg: {\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        let opName: string;\n        switch (prototype.internalName) {\n          default: assert(false);\n          case BuiltinSymbols.atomic_add: { opName = \"atomic.add\"; break; }\n          case BuiltinSymbols.atomic_sub: { opName = \"atomic.sub\"; break; }\n          case BuiltinSymbols.atomic_and: { opName = \"atomic.and\"; break; }\n          case BuiltinSymbols.atomic_or: { opName = \"atomic.or\"; break; }\n          case BuiltinSymbols.atomic_xor: { opName = \"atomic.xor\"; break; }\n          case BuiltinSymbols.atomic_xchg: { opName = \"atomic.xchg\"; break; }\n        }\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, opName, type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      let op: AtomicRMWOp;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.atomic_add:  { op = AtomicRMWOp.Add;  break; }\n        case BuiltinSymbols.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\n        case BuiltinSymbols.atomic_and:  { op = AtomicRMWOp.And;  break; }\n        case BuiltinSymbols.atomic_or:   { op = AtomicRMWOp.Or;   break; }\n        case BuiltinSymbols.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\n        case BuiltinSymbols.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\n      }\n      compiler.currentType = inType;\n      return module.atomic_rmw(op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType());\n    }\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize) -> T\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.cmpxchg\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      let arg2 = compiler.compileExpression(operands[2],\n        inType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        arg2 = compiler.convertExpression(arg2,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[2]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      compiler.currentType = inType;\n      return module.atomic_cmpxchg(type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType());\n    }\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64) -> i32\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.i64, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.i32;\n      switch (type.kind) {\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE: return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"atomic.wait\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.atomic_notify: { // notify(ptr: usize, count: i32) -> i32\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.i32;\n      return module.atomic_notify(arg0, arg1);\n    }\n    case BuiltinSymbols.atomic_fence: { // fence() -> void\n      compiler.currentType = Type.void;\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      return module.atomic_fence();\n    }\n\n    // === Control flow ===========================================================================\n\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"select\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.makeIsTrueish(\n        compiler.compileExpression(operands[2], Type.bool),\n        compiler.currentType // ^\n      );\n      compiler.currentType = type;\n      return module.select(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      checkArgsRequired(operands, 0, reportNode, compiler);\n      return module.unreachable();\n    }\n\n    // === Memory =================================================================================\n\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemorySize);\n    }\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemoryGrow, null, [\n        compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT)\n      ]);\n    }\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_copy(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_fill(arg0, arg1, arg2);\n    }\n\n    // === Helpers ================================================================================\n\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let toType = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.auto);\n      let fromType = compiler.currentType;\n      compiler.currentType = toType;\n      if (!fromType.isChangeableTo(toType)) {\n        compiler.error(\n          DiagnosticCode.Type_0_cannot_be_changed_to_type_1,\n          reportNode.range, fromType.toString(), toType.toString()\n        );\n        return module.unreachable();\n      }\n      return arg0;\n    }\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) {\n        if (typeArguments) {\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\n          compiler.currentType = typeArguments[0].nonNullableType;\n        }\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // if the assertion can be proven statically, omit it\n      if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n        switch (getExpressionType(arg0)) {\n          case NativeType.I32: {\n            if (getConstValueI32(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.I64: {\n            if (getConstValueI64Low(arg0) != 0 || getConstValueI64High(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.F32: {\n            if (getConstValueF32(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.F64: {\n            if (getConstValueF64(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n        }\n      }\n\n      // return ifTrueish if assertions are disabled\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) { // simplify if dropped anyway\n          compiler.currentType = Type.void;\n          return module.nop();\n        }\n        return arg0;\n      }\n\n      // otherwise call abort if the assertion is false-ish\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n      compiler.currentType = type.nonNullableType;\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        compiler.currentType = Type.void;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: return module.if(module.unary(UnaryOp.EqzI32, arg0), abort);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.if(module.unary(UnaryOp.EqzI64, arg0), abort);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: return module.if(module.binary(BinaryOp.EqF32, arg0, module.f32(0)), abort);\n          case TypeKind.F64: return module.if(module.binary(BinaryOp.EqF64, arg0, module.f64(0)), abort);\n        }\n      } else {\n        compiler.currentType = type.nonNullableType;\n        let flow = compiler.currentFlow;\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            let temp = flow.getTempLocal(type);\n            flow.setLocalFlag(temp.index, LocalFlags.WRAPPED); // arg0 is wrapped\n            let ret = module.if(\n              module.local_tee(temp.index, arg0),\n              module.local_get(temp.index, NativeType.I32),\n              abort\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let temp = flow.getTempLocal(Type.i64);\n            let ret = module.if(\n              module.unary(UnaryOp.EqzI64,\n                module.local_tee(temp.index, arg0)\n              ),\n              abort,\n              module.local_get(temp.index, NativeType.I64)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let temp = flow.getTempLocal(compiler.options.usizeType);\n            let ret = module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.local_tee(temp.index, arg0)\n              ),\n              abort,\n              module.local_get(temp.index, compiler.options.nativeSizeType)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F32: {\n            let temp = flow.getTempLocal(Type.f32);\n            let ret = module.if(\n              module.binary(BinaryOp.EqF32,\n                module.local_tee(temp.index, arg0),\n                module.f32(0)\n              ),\n              abort,\n              module.local_get(temp.index, NativeType.F32)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F64: {\n            let temp = flow.getTempLocal(Type.f64);\n            let ret = module.if(\n              module.binary(BinaryOp.EqF64,\n                module.local_tee(temp.index, arg0),\n                module.f64(0)\n              ),\n              abort,\n              module.local_get(temp.index, NativeType.F64)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Not_implemented,\n        reportNode.typeArgumentsRange\n      );\n      return abort;\n    }\n    case BuiltinSymbols.unchecked: { // unchecked(expr: *) -> *\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let flow = compiler.currentFlow;\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      // eliminate unnecessary tees by preferring contextualType(=void)\n      let expr = compiler.compileExpression(operands[0], contextualType);\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return expr;\n    }\n    case BuiltinSymbols.instantiate: { // instantiate<T!>(...args: *[]) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\n      ) return module.unreachable();\n      let typeArgument = typeArguments![0];\n      let classInstance = typeArgument.classReference;\n      if (!(typeArgument.is(TypeFlags.REFERENCE) && classInstance !== null)) {\n        compiler.error(\n          DiagnosticCode.This_expression_is_not_constructable,\n          reportNode.expression.range\n        );\n        return module.unreachable();\n      }\n      compiler.currentType = classInstance.type;\n      return compiler.compileInstantiate(classInstance, operands, Constraints.NONE, reportNode);\n    }\n\n    // === User-defined diagnostics ===============================================================\n\n    case BuiltinSymbols.ERROR: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.WARNING: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n    case BuiltinSymbols.INFO: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n\n    // === Portable type conversions ==============================================================\n\n    case BuiltinSymbols.i8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.isize: {\n      let isizeType = compiler.options.isizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = isizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], isizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.usize: {\n      let usizeType = compiler.options.usizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], usizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.bool: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.bool, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.f32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.f64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_EXPLICIT);\n    }\n\n    // === SIMD ===================================================================================\n\n    case BuiltinSymbols.v128: // alias for now\n    case BuiltinSymbols.i8x16: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 16, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 16; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i8, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI8(getConstValueI32(expr), bytes, i);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i16x8: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 8, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 8; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i16, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI16(getConstValueI32(expr), bytes, i << 1);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i32x4: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI32(getConstValueI32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i64x2: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I64);\n          let off = i << 3;\n          writeI32(getConstValueI64Low(expr), bytes, off);\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f32x4: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F32);\n          writeF32(getConstValueF32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f64x2: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F64);\n          writeF64(getConstValueF64(expr), bytes, i << 3);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.v128_splat: { // splat<T!>(x: T) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.SplatI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.SplatI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.SplatI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.SplatI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.SplatI64x2\n                : UnaryOp.SplatI32x4,\n              arg0\n            );\n          }\n          case TypeKind.F32: return module.unary(UnaryOp.SplatF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SplatF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.splat\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      compiler.currentType = type;\n      let idx = 0;\n      if (getExpressionId(arg1) == ExpressionId.Const) {\n        assert(getExpressionType(arg1) == NativeType.I32);\n        idx = getConstValueI32(arg1);\n      } else {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n      }\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let maxIdx = (16 / assert(type.byteSize)) - 1;\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          idx = 0;\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return module.simd_extract(SIMDExtractOp.ExtractLaneI8x16, arg0, idx);\n          case TypeKind.U8: return module.simd_extract(SIMDExtractOp.ExtractLaneU8x16, arg0, idx);\n          case TypeKind.I16: return module.simd_extract(SIMDExtractOp.ExtractLaneI16x8, arg0, idx);\n          case TypeKind.U16: return module.simd_extract(SIMDExtractOp.ExtractLaneU16x8, arg0, idx);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_extract(SIMDExtractOp.ExtractLaneI32x4, arg0, idx);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_extract(SIMDExtractOp.ExtractLaneI64x2, arg0, idx);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_extract(\n              compiler.options.isWasm64\n                ? SIMDExtractOp.ExtractLaneI64x2\n                : SIMDExtractOp.ExtractLaneI32x4,\n              arg0, idx\n            );\n          }\n          case TypeKind.F32: return module.simd_extract(SIMDExtractOp.ExtractLaneF32x4, arg0, idx);\n          case TypeKind.F64: return module.simd_extract(SIMDExtractOp.ExtractLaneF64x2, arg0, idx);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.extract_lane\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      let idx = 0;\n      if (getExpressionId(arg1) == ExpressionId.Const) {\n        assert(getExpressionType(arg1) == NativeType.I32);\n        idx = getConstValueI32(arg1);\n      } else {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n      }\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let maxIdx = (16 / assert(type.byteSize)) - 1;\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          idx = 0;\n        }\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI8x16, arg0, idx, arg2);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI16x8, arg0, idx, arg2);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI32x4, arg0, idx, arg2);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI64x2, arg0, idx, arg2);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_replace(\n              compiler.options.isWasm64\n                ? SIMDReplaceOp.ReplaceLaneI64x2\n                : SIMDReplaceOp.ReplaceLaneI32x4,\n              arg0, idx, arg2\n            );\n          }\n          case TypeKind.F32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF32x4, arg0, idx, arg2);\n          case TypeKind.F64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF64x2, arg0, idx, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.replace_lane\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let laneWidth = type.byteSize;\n        let laneCount = 16 / laneWidth;\n        assert(isInteger(laneCount) && isPowerOf2(laneCount));\n        if (\n          checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\n        ) {\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n        let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n        let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            let mask = new Uint8Array(16);\n            let maxIdx = (laneCount << 1) - 1;\n            for (let i = 0; i < laneCount; ++i) {\n              let operand = operands[2 + i];\n              let argN = compiler.precomputeExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n              if (getExpressionId(argN) != ExpressionId.Const) {\n                compiler.error(\n                  DiagnosticCode.Expression_must_be_a_compile_time_constant,\n                  operand.range\n                );\n                compiler.currentType = Type.v128;\n                return module.unreachable();\n              }\n              assert(getExpressionType(argN) == NativeType.I32);\n              let idx = getConstValueI32(argN);\n              if (idx < 0 || idx > maxIdx) {\n                compiler.error(\n                  DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n                  operand.range, \"Lane index\", \"0\", maxIdx.toString()\n                );\n                compiler.currentType = Type.v128;\n                return module.unreachable();\n              }\n              switch (laneWidth) {\n                case 1: {\n                  writeI8(idx, mask, i);\n                  break;\n                }\n                case 2: {\n                  let off8 = i << 1;\n                  let idx8 = idx << 1;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  break;\n                }\n                case 4: {\n                  let off8 = i << 2;\n                  let idx8 = idx << 2;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  writeI8(idx8 + 2, mask, off8 + 2);\n                  writeI8(idx8 + 3, mask, off8 + 3);\n                  break;\n                }\n                case 8: {\n                  let off8 = i << 3;\n                  let idx8 = idx << 3;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  writeI8(idx8 + 2, mask, off8 + 2);\n                  writeI8(idx8 + 3, mask, off8 + 3);\n                  writeI8(idx8 + 4, mask, off8 + 4);\n                  writeI8(idx8 + 5, mask, off8 + 5);\n                  writeI8(idx8 + 6, mask, off8 + 6);\n                  writeI8(idx8 + 7, mask, off8 + 7);\n                  break;\n                }\n                default: assert(false);\n              }\n            }\n            compiler.currentType = Type.v128;\n            return module.simd_shuffle(arg0, arg1, mask);\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shuffle\", type.toString()\n      );\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_swizzle: { // swizzle(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.SwizzleV8x16, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_load_splat: { // load_splat<T!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          return module.unreachable();\n        }\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV8x16, arg0, immOffset, immAlign);\n          }\n          case TypeKind.I16:\n          case TypeKind.U16: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV16x8, arg0, immOffset, immAlign);\n          }\n          case TypeKind.I32:\n          case TypeKind.U32:\n          case TypeKind.F32: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n            }\n            // fall-through\n          }\n          case TypeKind.I64:\n          case TypeKind.U64:\n          case TypeKind.F64: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV64x2, arg0, immOffset, immAlign);\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.load_splat\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_load_ext: { // load_ext<TFrom!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          return module.unreachable();\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return module.simd_load(SIMDLoadOp.LoadI8ToI16x8, arg0, immOffset, immAlign);\n          case TypeKind.U8: return module.simd_load(SIMDLoadOp.LoadU8ToU16x8, arg0, immOffset, immAlign);\n          case TypeKind.I16: return module.simd_load(SIMDLoadOp.LoadI16ToI32x4, arg0, immOffset, immAlign);\n          case TypeKind.U16: return module.simd_load(SIMDLoadOp.LoadU16ToU32x4, arg0, immOffset, immAlign);\n          case TypeKind.ISIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.I32: return module.simd_load(SIMDLoadOp.LoadI32ToI64x2, arg0, immOffset, immAlign);\n          case TypeKind.USIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.U32: return module.simd_load(SIMDLoadOp.LoadU32ToU64x2, arg0, immOffset, immAlign);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.load_ext\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_add: { // add<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.AddI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.AddI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.AddI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.AddI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.AddI64x2\n                : BinaryOp.AddI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.AddF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.AddF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.add\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_sub: { // sub<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.SubI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.SubI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.SubI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.SubI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.SubI64x2\n                : BinaryOp.SubI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.SubF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.SubF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sub\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_mul: { // mul<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.MulI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.MulI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MulF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MulF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.mul\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_div: { // div<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.binary(BinaryOp.DivF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.DivF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.div\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_add_saturate: { // add_saturate<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.AddSatI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.AddSatU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.AddSatI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.AddSatU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.add_saturate\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_sub_saturate: { // sub_saturate<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.SubSatI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.SubSatU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.SubSatI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.SubSatU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sub_saturate\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_min: { // min<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.MinI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.MinU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.MinI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.MinU16x8, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.I32: return module.binary(BinaryOp.MinI32x4, arg0, arg1);\n          case TypeKind.USIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.U32: return module.binary(BinaryOp.MinU32x4, arg0, arg1);\n          case TypeKind.F32: return module.binary(BinaryOp.MinF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MinF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.min\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_max: { // max<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.MaxI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.MaxU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.MaxI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.MaxU16x8, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.I32: return module.binary(BinaryOp.MaxI32x4, arg0, arg1);\n          case TypeKind.USIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.U32: return module.binary(BinaryOp.MaxU32x4, arg0, arg1);\n          case TypeKind.F32: return module.binary(BinaryOp.MaxF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MaxF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.max\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_dot: { // dot<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I16: return module.binary(BinaryOp.DotI16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.dot\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_eq: { // eq<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n            case TypeKind.U8: return module.binary(BinaryOp.EqI8x16, arg0, arg1);\n            case TypeKind.I16:\n            case TypeKind.U16: return module.binary(BinaryOp.EqI16x8, arg0, arg1);\n            case TypeKind.I32:\n            case TypeKind.U32: return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n              }\n              break;\n            }\n            case TypeKind.F32: return module.binary(BinaryOp.EqF32x4, arg0, arg1);\n            case TypeKind.F64: return module.binary(BinaryOp.EqF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.eq\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_ne: { // ne<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n            case TypeKind.U8: return module.binary(BinaryOp.NeI8x16, arg0, arg1);\n            case TypeKind.I16:\n            case TypeKind.U16: return module.binary(BinaryOp.NeI16x8, arg0, arg1);\n            case TypeKind.I32:\n            case TypeKind.U32: return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n              }\n              break;\n            }\n            case TypeKind.F32: return module.binary(BinaryOp.NeF32x4, arg0, arg1);\n            case TypeKind.F64: return module.binary(BinaryOp.NeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.ne\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_lt: { // lt<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.LtI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.LtU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.LtI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.LtU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.LtF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.LtF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.lt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_le: { // le<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.LeI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.LeU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.LeI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.LeU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.LeF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.LeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.le\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_gt: { // gt<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.GtI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.GtU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.GtI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.GtU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.GtF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.GtF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.gt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_ge: { // ge<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.GeI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.GeU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.GeI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.GeU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.GeF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.GeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.ge\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_narrow: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I16: return module.binary(BinaryOp.NarrowI16x8ToI8x16, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.NarrowU16x8ToU8x16, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.NarrowI32x4ToI16x8, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.NarrowU32x4ToU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.narrow\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_neg: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.NegI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.NegI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.NegI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.NegI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.NegI64x2\n                : UnaryOp.NegI32x4,\n              arg0\n            );\n          }\n          case TypeKind.F32: return module.unary(UnaryOp.NegF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.NegF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.neg\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_abs: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.unary(UnaryOp.AbsF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.AbsF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.abs\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_sqrt: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.unary(UnaryOp.SqrtF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SqrtF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sqrt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_convert: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32: return module.unary(UnaryOp.ConvertI32x4ToF32x4, arg0);\n          case TypeKind.U32: return module.unary(UnaryOp.ConvertU32x4ToF32x4, arg0);\n          case TypeKind.I64: return module.unary(UnaryOp.ConvertI64x2ToF64x2, arg0);\n          case TypeKind.U64: return module.unary(UnaryOp.ConvertU64x2ToF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.convert\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_trunc_sat: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32: return module.unary(UnaryOp.TruncSatF32x4ToI32x4, arg0);\n          case TypeKind.U32: return module.unary(UnaryOp.TruncSatF32x4ToU32x4, arg0);\n          case TypeKind.I64: return module.unary(UnaryOp.TruncSatF64x2ToI64x2, arg0);\n          case TypeKind.U64: return module.unary(UnaryOp.TruncSatF64x2ToU64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.trunc_sat\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_widen_low: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.unary(UnaryOp.WidenLowI8x16ToI16x8, arg0);\n          case TypeKind.U8: return module.unary(UnaryOp.WidenLowU8x16ToU16x8, arg0);\n          case TypeKind.I16: return module.unary(UnaryOp.WidenLowI16x8ToI32x4, arg0);\n          case TypeKind.U16: return module.unary(UnaryOp.WidenLowU16x8ToU32x4, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.widen_low\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_widen_high: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.unary(UnaryOp.WidenHighI8x16ToI16x8, arg0);\n          case TypeKind.U8: return module.unary(UnaryOp.WidenHighU8x16ToU16x8, arg0);\n          case TypeKind.I16: return module.unary(UnaryOp.WidenHighI16x8ToI32x4, arg0);\n          case TypeKind.U16: return module.unary(UnaryOp.WidenHighU16x8ToU32x4, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.widen_high\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_shl: { // shl<T!>(a: v128, b: i32) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShlI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShlI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShlI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShlI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShlI64x2\n                : SIMDShiftOp.ShlI32x4,\n              arg0, arg1\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shl\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_shr: { // shr<T!>(a: v128, b: i32) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.simd_shift(SIMDShiftOp.ShrI8x16, arg0, arg1);\n          case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShrU8x16, arg0, arg1);\n          case TypeKind.I16: return module.simd_shift(SIMDShiftOp.ShrI16x8, arg0, arg1);\n          case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShrU16x8, arg0, arg1);\n          case TypeKind.I32: return module.simd_shift(SIMDShiftOp.ShrI32x4, arg0, arg1);\n          case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShrU32x4, arg0, arg1);\n          case TypeKind.I64: return module.simd_shift(SIMDShiftOp.ShrI64x2, arg0, arg1);\n          case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShrU64x2, arg0, arg1);\n          case TypeKind.ISIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShrI64x2\n                : SIMDShiftOp.ShrI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.USIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShrU64x2\n                : SIMDShiftOp.ShrU32x4,\n              arg0, arg1\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shr\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_and: { // and(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.AndV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_or: { // or(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.OrV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_xor: { // xor(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.XorV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_andnot: { // andnot(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.AndNotV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_not: { // not(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.unary(UnaryOp.NotV128, arg0);\n    }\n    case BuiltinSymbols.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.simd_ternary(SIMDTernaryOp.Bitselect, arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.v128_any_true: { // any_true<T!>(a: v128) -> bool\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.AnyTrueI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.AnyTrueI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.AnyTrueI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.AnyTrueI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.AnyTrueI64x2\n                : UnaryOp.AnyTrueI32x4,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.any_true\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_all_true: { // all_true<T!>(a: v128) -> bool\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.AllTrueI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.AllTrueI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.AllTrueI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.AllTrueI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.AllTrueI64x2\n                : UnaryOp.AllTrueI32x4,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.all_true\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_qfma: { // qfma(a: v128, b: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMAF32x4, arg0, arg1, arg2);\n          case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMAF64x2, arg0, arg1, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.qfma\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_qfms: { // qfms(a: v128, b: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMSF32x4, arg0, arg1, arg2);\n          case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMSF64x2, arg0, arg1, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.qfms\", type.toString()\n      );\n      return module.unreachable();\n    }\n\n    // === Internal runtime =======================================================================\n\n    case BuiltinSymbols.idof: {\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.u32;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          return module.i32(signatureReference.id);\n        }\n        let classReference = type.classReference;\n        if (classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n          return module.i32(classReference.id);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"idof\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.visit_globals: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler) // cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_globals, [ arg0 ], NativeType.None);\n    }\n    case BuiltinSymbols.visit_members: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler) // ref, cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_members, [ arg0, arg1 ], NativeType.None);\n    }\n    case BuiltinSymbols.isNaN: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          // never NaN\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE: {\n            return hasSideEffects(arg0)\n              ? module.block(null, [\n                  module.drop(arg0),\n                  module.i32(0)\n                ], NativeType.I32)\n              : module.i32(0);\n          }\n          // (t = arg0) != t\n          case TypeKind.F32: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.NeF32,\n                arg0,\n                module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f32);\n            let ret = module.binary(BinaryOp.NeF32,\n              module.local_tee(temp.index, arg0),\n              module.local_get(temp.index, NativeType.F32)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F64: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.NeF64,\n                arg0,\n                module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f64);\n            let ret = module.binary(BinaryOp.NeF64,\n              module.local_tee(temp.index, arg0),\n              module.local_get(temp.index, NativeType.F64)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"isNaN\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.isFinite: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          // always finite\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE: {\n            return hasSideEffects(arg0)\n              ? module.block(null, [\n                  module.drop(arg0),\n                  module.i32(1)\n                ], NativeType.I32)\n              : module.i32(1);\n          }\n          // (t = arg0) - t == 0\n          case TypeKind.F32: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.EqF32,\n                module.binary(BinaryOp.SubF32,\n                  arg0,\n                  module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n                ),\n                module.f32(0)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f32);\n            let ret = module.binary(BinaryOp.EqF32,\n              module.binary(BinaryOp.SubF32,\n                module.local_tee(temp.index, arg0),\n                module.local_get(temp.index, NativeType.F32)\n              ),\n              module.f32(0)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F64: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.EqF64,\n                module.binary(BinaryOp.SubF64,\n                  arg0,\n                  module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n                ),\n                module.f64(0)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f64);\n            let ret = module.binary(BinaryOp.EqF64,\n              module.binary(BinaryOp.SubF64,\n                module.local_tee(temp.index, arg0),\n                module.local_get(temp.index, NativeType.F64)\n              ),\n              module.f64(0)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"isFinite\", type.toString()\n      );\n      return module.unreachable();\n    }\n  }\n\n  // try to defer inline asm to a concrete built-in\n  {\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\n    if (expr) {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      return expr;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Not_implemented,\n    reportNode.expression.range\n  );\n  return module.unreachable();\n}\n\n/** Tries to defer an inline-assembler-like call to a built-in function. */\nfunction tryDeferASM(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  reportNode: CallExpression\n): ExpressionRef {\n  /* tslint:disable:max-line-length */\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\n\n    case BuiltinSymbols.v128_load: return deferASM(BuiltinSymbols.load, compiler, Type.v128, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v128_store: return deferASM(BuiltinSymbols.store, compiler, Type.v128, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i8x16_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\n    case BuiltinSymbols.i8x16_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\n    case BuiltinSymbols.i8x16_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_min_s: return deferASM(BuiltinSymbols.v128_min, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_min_u: return deferASM(BuiltinSymbols.v128_min, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_max_s: return deferASM(BuiltinSymbols.v128_max, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_max_u: return deferASM(BuiltinSymbols.v128_max, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i8x16_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i8x16_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_narrow_i16x8_s: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_narrow_i16x8_u: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.u16, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i16x8_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\n    case BuiltinSymbols.i16x8_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\n    case BuiltinSymbols.i16x8_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_min_s: return deferASM(BuiltinSymbols.v128_min, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_min_u: return deferASM(BuiltinSymbols.v128_min, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_max_s: return deferASM(BuiltinSymbols.v128_max, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_max_u: return deferASM(BuiltinSymbols.v128_max, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i16x8_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i16x8_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_narrow_i32x4_s: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_narrow_i32x4_u: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_low_i8x16_s: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_low_i8x16_u: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_high_i8x16_s: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_high_i8x16_u: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_load8x8_s: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_load8x8_u: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.u8, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_min_s: return deferASM(BuiltinSymbols.v128_min, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_min_u: return deferASM(BuiltinSymbols.v128_min, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_max_s: return deferASM(BuiltinSymbols.v128_max, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_max_u: return deferASM(BuiltinSymbols.v128_max, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_dot_i16x8_s: return deferASM(BuiltinSymbols.v128_dot, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32x4_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_trunc_sat_f32x4_s: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_trunc_sat_f32x4_u: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_low_i16x8_s: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_low_i16x8_u: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_high_i16x8_s: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_high_i16x8_u: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_load16x4_s: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_load16x4_u: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.u16, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64x2_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64x2_trunc_sat_f64x2_s: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_trunc_sat_f64x2_u: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.u64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_load32x2_s: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_load32x2_u: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.u32, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.f32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_convert_i32x4_s: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_convert_i32x4_u: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_qfma: return deferASM(BuiltinSymbols.v128_qfma, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_qfms: return deferASM(BuiltinSymbols.v128_qfms, compiler, Type.f32, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.f64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_convert_i64x2_s: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_convert_i64x2_u: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_qfma: return deferASM(BuiltinSymbols.v128_qfma, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_qfms: return deferASM(BuiltinSymbols.v128_qfms, compiler, Type.f64, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.v8x16_shuffle: return deferASM(BuiltinSymbols.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v8x16_swizzle: return deferASM(BuiltinSymbols.v128_swizzle, compiler, null, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v8x16_load_splat: return deferASM(BuiltinSymbols.v128_load_splat, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v16x8_load_splat: return deferASM(BuiltinSymbols.v128_load_splat, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v32x4_load_splat: return deferASM(BuiltinSymbols.v128_load_splat, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v64x2_load_splat: return deferASM(BuiltinSymbols.v128_load_splat, compiler, Type.u64, operands, Type.v128, reportNode);\n  }\n  /* tslint:enable:max-line-length */\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type | null,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: CallExpression\n): ExpressionRef {\n  assert(compiler.program.elementsByName.has(name));\n  var prototype = compiler.program.elementsByName.get(name)!;\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(\n    compiler,\n    <FunctionPrototype>prototype,\n    typeArgument ? [ typeArgument ] : null,\n    operands,\n    contextualType,\n    reportNode,\n    /* isAsm */ true\n  );\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringInstance = compiler.program.stringInstance;\n  if (!stringInstance) return module.unreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.unreachable();\n\n  var messageArg: ExpressionRef;\n  if (message !== null) {\n    // The message argument works much like an arm of an IF that does not become executed if the\n    // assertion succeeds respectively is only being computed if the program actually crashes.\n    // Hence, let's make it so that the autorelease is skipped at the end of the current block,\n    // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\n    messageArg = compiler.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n  } else {\n    messageArg = compiler.makeZero(stringInstance.type);\n  }\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.block(null, [\n    module.call(\n      abortInstance.internalName, [\n        messageArg,\n        filenameArg,\n        module.i32(reportNode.range.line),\n        module.i32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.unreachable()\n  ]);\n}\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  compiler.compileFunction(visitInstance);\n\n  for (let element of compiler.program.elementsByName.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let globalType = global.type;\n    let classType = globalType.classReference;\n    if (\n      globalType.is(TypeFlags.REFERENCE) &&\n      classType !== null &&\n      !classType.hasDecorator(DecoratorFlags.UNMANAGED) &&\n      global.is(CommonFlags.COMPILED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value))\n            ], NativeType.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, nativeSizeType)\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, nativeSizeType), // tempRef != null\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinSymbols.visit_globals,\n    NativeType.I32,  // cookie\n    NativeType.None, // => void\n    [ nativeSizeType ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Compiles the `visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var nativeSizeSize = usizeType.byteSize;\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  var blocks = new Array<RelooperBlockRef>();\n  var relooper = Relooper.create(module);\n\n  var outer = relooper.addBlockWithSwitch(\n    module.nop(),\n    module.load(nativeSizeSize, false,\n      nativeSizeType == NativeType.I64\n        ? module.binary(BinaryOp.SubI64,\n            module.local_get(0, nativeSizeType),\n            module.i64(8)\n          )\n        : module.binary(BinaryOp.SubI32,\n            module.local_get(0, nativeSizeType),\n            module.i32(8) // rtId is at -8\n          ),\n      NativeType.I32,\n      0\n    )\n  );\n\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(instance.type.isManaged);\n    assert(id == lastId++);\n\n    let visitImpl: Element | null;\n    let code = new Array<ExpressionRef>();\n\n    // if a library element, check if it implements a custom traversal function\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\"))) {\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\n        code.push(\n          module.unreachable()\n        );\n      } else {\n        let visitSig = visitFunc.signature;\n        assert(\n          visitSig.parameterTypes.length == 1 &&\n          visitSig.parameterTypes[0] == Type.u32 &&\n          visitSig.returnType == Type.void &&\n          visitSig.thisType == instance.type\n        );\n        code.push(\n          module.call(visitFunc.internalName, [\n            module.local_get(0, nativeSizeType), // ref\n            module.local_get(1, NativeType.I32)  // cookie\n          ], NativeType.None)\n        );\n      }\n\n    // otherwise generate traversal logic for own fields\n    } else {\n      let members = instance.members;\n      if (members) {\n        for (let member of members.values()) {\n          if (member.kind == ElementKind.FIELD) {\n            if ((<Field>member).parent === instance) {\n              let fieldType = (<Field>member).type;\n              if (fieldType.isManaged) {\n                let fieldOffset = (<Field>member).memoryOffset;\n                assert(fieldOffset >= 0);\n                code.push(\n                  // if ($2 = value) FIELDCLASS~traverse($2)\n                  module.if(\n                    module.local_tee(2,\n                      module.load(nativeSizeSize, false,\n                        module.local_get(0, nativeSizeType),\n                        nativeSizeType, fieldOffset\n                      )\n                    ),\n                    module.call(visitInstance.internalName, [\n                      module.local_get(2, nativeSizeType), // ref\n                      module.local_get(1, NativeType.I32)  // cookie\n                    ], NativeType.None)\n                  )\n                );\n              }\n            }\n          }\n        }\n      }\n    }\n    if (!instance.base) code.push(module.return());\n    let block = relooper.addBlock(\n      flatten(module, code, NativeType.None)\n    );\n    relooper.addBranchForSwitch(outer, block, [ id ]);\n    blocks.push(block);\n  }\n  for (let [id, instance] of managedClasses) {\n    let base = instance.base;\n    if (base) {\n      relooper.addBranch(blocks[id], blocks[base.id]);\n    }\n  }\n  blocks.push(\n    relooper.addBlock(\n      module.unreachable()\n    )\n  );\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\n  compiler.compileFunction(visitInstance);\n  module.addFunction(BuiltinSymbols.visit_members,\n    createType([ usizeType.toNativeType(), NativeType.I32 ]), // ref, cookie\n    NativeType.None, // => void\n    [ nativeSizeType ],\n    relooper.renderAndDispose(outer, 2)\n  );\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(id == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      if (instance.extends(arrayPrototype)) flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: CallExpression\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments !== null && typeArguments.length) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n        );\n        return null;\n      }\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Checks that the specified feature is enabled. */\nfunction checkFeatureEnabled(\n  feature: Feature,\n  reportNode: Node,\n  compiler: Compiler\n): i32 {\n  if (!compiler.options.hasFeature(feature)) {\n    compiler.error(\n      DiagnosticCode.Feature_0_is_not_enabled,\n      reportNode.range, featureToString(feature)\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  prototype: FunctionPrototype\n): i32 {\n  if (typeArguments) {\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(\n  operands: Expression[],\n  expected: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  if (operands.length != expected) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(\n  operands: Expression[],\n  expectedMinimum: i32,\n  expectedMaximum: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling,\n  isIllegalVariableIdentifier\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  TypeNode,\n  TypeName,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureDeclaration,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n  /** Current file being parsed. */\n  currentSource: Source;\n  /** Dependency map **/\n  dependees: Map<string, Source> = new Map();\n\n  /** Constructs a new parser. */\n  constructor(program: Program) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    /** Source text of the file. */\n    text: string,\n    /** Normalized path of the file. */\n    path: string,\n    /** Whether this is an entry file. */\n    isEntry: bool\n  ): void {\n    // the frontend gives us paths with .ts endings\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.USER_ENTRY\n        : path.startsWith(LIBRARY_PREFIX)\n          ? path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n            ? SourceKind.LIBRARY_ENTRY\n            : SourceKind.LIBRARY\n          : SourceKind.USER\n    );\n    var program = this.program;\n    program.sources.push(source);\n    this.currentSource = source;\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) statements.push(statement);\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    var defaultStart: i32 = 0;\n    var defaultEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift()! : null;\n  }\n\n  /** Obtains the dependee of the given imported file. */\n  getDependee(dependent: string): string | null {\n    var source = this.dependees.get(dependent);\n    if (source) return source.internalPath;\n    return null;\n  }\n\n  /** Finishes parsing. */\n  finish(): void {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    this.dependees.clear();\n  }\n\n  // types\n\n  /** Parses a type name. */\n  parseTypeName(\n    tn: Tokenizer\n  ): TypeName | null {\n\n    // at: Identifier ('.' Identifier)*\n\n    var first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n    var current = first;\n    while (tn.skip(Token.DOT)) {\n      if (tn.skip(Token.IDENTIFIER)) {\n        let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n        current.next = next;\n        current = next;\n      } else {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range(tn.pos)\n        );\n        return null;\n      }\n    }\n    return first;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): TypeNode | null {\n\n    // before: Type\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: TypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseFunctionType(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \")\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let name = this.parseTypeName(tn);\n      if (!name) return null;\n      let parameters: NamedTypeNode[] | null = null;\n      let nullable = false;\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [<NamedTypeNode>parameter];\n          else parameters.push(<NamedTypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(name, parameters || [], nullable, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function type, as used in type declarations. */\n  tryParseFunctionType(\n    tn: Tokenizer\n  ): FunctionTypeNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: NamedTypeNode | null = null;\n    var isSignature: bool = false;\n    var firstParamNameNoType: IdentifierExpression | null = null;\n    var firstParamKind: ParameterKind = ParameterKind.DEFAULT;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.NAMEDTYPE) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <NamedTypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (!isSignature) {\n              if (tn.peek() == Token.COMMA) {\n                isSignature = true;\n                tn.discard(state);\n              }\n            }\n            if (isSignature) {\n              let param = new ParameterNode();\n              param.parameterKind = kind;\n              param.name = name;\n              param.type = Node.createOmittedType(tn.range().atEnd);\n              if (!parameters) parameters = [ param ];\n              else parameters.push(param);\n              this.error(\n                DiagnosticCode.Type_expected,\n                param.type.range\n              ); // recoverable\n            } else if (!parameters) {\n              // on '(' Identifier ^',' we don't yet know whether this is a\n              // parenthesized or a function type, hence we have to delay the\n              // respective diagnostic until we know for sure.\n              firstParamNameNoType = name;\n              firstParamKind = kind;\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: TypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      if (!isSignature) {\n        isSignature = true;\n        tn.discard(state);\n        if (firstParamNameNoType) { // now we know\n          let param = new ParameterNode();\n          param.parameterKind = firstParamKind;\n          param.name = firstParamNameNoType;\n          param.type = Node.createOmittedType(firstParamNameNoType.range.atEnd);\n          if (!parameters) parameters = [ param ];\n          else parameters.push(param);\n          this.error(\n            DiagnosticCode.Type_expected,\n            param.type.range\n          ); // recoverable\n        }\n      }\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createFunctionType(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier(IdentifierHandling.PREFER)) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (isIllegalVariableIdentifier(identifier.text)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        identifier.range\n      );\n    }\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range);\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var startPos = tn.tokenPos;\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    var seenOptional = false;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      if (!typeParameters) typeParameters = [ typeParameter ];\n      else typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!(typeParameters && typeParameters.length)) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <NamedTypeNode>t;\n      }\n      let defaultType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <NamedTypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: NamedTypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: TypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\n          this.parseParametersThis = <NamedTypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: TypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: TypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      CommonFlags.NONE,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: NamedTypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.NAMEDTYPE) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <NamedTypeNode>t;\n    }\n\n    var implementsTypes: NamedTypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [<NamedTypeNode>type];\n          else implementsTypes.push(<NamedTypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = [<DecoratorNode>decorator];\n        else decorators.push(<DecoratorNode>decorator);\n      } while (tn.skip(Token.AT));\n      if (decorators && isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.peek() == Token.READONLY) {\n      let state = tn.mark();\n      tn.next();\n      if (tn.peek() != Token.COLON) { // modifier\n        tn.discard(state);\n        flags |= CommonFlags.READONLY;\n        readonlyStart = tn.tokenPos;\n        readonlyEnd = tn.pos;\n      } else { // identifier\n        tn.reset(state);\n      }\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\n        if (!retIndex) return null;\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier()) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: TypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createFunctionType(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: TypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[] | null): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators && decorators.length) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              return Node.createIndexSignatureDeclaration(<NamedTypeNode>keyType, valueType, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.dependees.set(internalPath, this.currentSource);\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          let exportPaths = source.exportPaths;\n          if (!exportPaths) source.exportPaths = [ internalPath ];\n          else if (!exportPaths.includes(internalPath)) exportPaths.push(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.dependees.set(internalPath, this.currentSource);\n            this.backlog.push(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Not_implemented,\n          tn.range()\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, this.currentSource);\n          this.backlog.push(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    switch (token) {\n\n      // TODO: SpreadExpression, YieldExpression\n      case Token.DOT_DOT_DOT:\n      case Token.YIELD: // fallthrough to unsupported UnaryPrefixExpression\n\n      // UnaryPrefixExpression\n      case Token.EXCLAMATION:\n      case Token.TILDE:\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.DELETE: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let operand = this.parseExpression(tn, Precedence.UNARY_PREFIX);\n        if (!operand) return null;\n        switch (operand.kind) {\n          case NodeKind.IDENTIFIER:\n          case NodeKind.ELEMENTACCESS:\n          case NodeKind.PROPERTYACCESS: break;\n          default: {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              operand.range\n            );\n          }\n        }\n        return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n      }\n\n      // NewExpression\n      case Token.NEW: {\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        let typeName = this.parseTypeName(tn);\n        if (!typeName) return null;\n        let typeArguments: TypeNode[] | null = null;\n        let arguments_: Expression[] | null = null;\n        if (\n          tn.skip(Token.OPENPAREN)\n          ||\n          (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n        ) {\n          arguments_ = this.parseArguments(tn);\n          if (!arguments_) return null;\n        } else {\n          arguments_ = []; // new Type;\n        }\n        return Node.createNewExpression(\n          typeName,\n          typeArguments,\n          arguments_,\n          tn.range(startPos, tn.pos)\n        );\n      }\n\n      // Special IdentifierExpression\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n      case Token.THIS: return Node.createThisExpression(tn.range());\n      case Token.CONSTRUCTOR: return Node.createConstructorExpression(tn.range());\n\n      // ParenthesizedExpression or FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        let inner = this.parseExpression(tn);\n        if (!inner) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        inner = Node.createParenthesizedExpression(inner, tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, inner);\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          let expr: Expression | null;\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        let expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifierText = tn.readIdentifier();\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                ParameterKind.DEFAULT,\n                identifier.range\n              )\n            ],\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return this.maybeParseCallExpression(tn, identifier, true);\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        let expr = Node.createSuperExpression(tn.range(startPos, tn.pos));\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        let expr = this.parseFunctionExpression(tn);\n        if (!expr) return null;\n        return this.maybeParseCallExpression(tn, expr);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): TypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments: TypeNode[] | null = null;\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      if (!typeArguments) typeArguments = [ type ];\n      else typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    var startPos = expr.range.start;\n\n    // precedence climbing\n    // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(tn.peek())) >= precedence\n    ) {\n      let token = tn.next();\n      switch (token) {\n\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          let next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          expr = this.maybeParseCallExpression(tn, expr);\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        // PropertyAccessExpression\n        case Token.DOT: {\n          if (tn.skipIdentifier()) { // expr '.' Identifier\n            let next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            expr = Node.createPropertyAccessExpression(\n              expr,\n              <IdentifierExpression>next,\n              tn.range(startPos, tn.pos)\n            );\n          } else {\n            let next = this.parseExpression(tn, nextPrecedence + 1);\n            if (!next) return null;\n            if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n          }\n          expr = this.maybeParseCallExpression(tn, expr, true);\n          break;\n        }\n        // BinaryExpression (right associative)\n        case Token.EQUALS:\n        case Token.PLUS_EQUALS:\n        case Token.MINUS_EQUALS:\n        case Token.ASTERISK_ASTERISK_EQUALS:\n        case Token.ASTERISK_EQUALS:\n        case Token.SLASH_EQUALS:\n        case Token.PERCENT_EQUALS:\n        case Token.LESSTHAN_LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n        case Token.AMPERSAND_EQUALS:\n        case Token.CARET_EQUALS:\n        case Token.BAR_EQUALS:\n        case Token.ASTERISK_ASTERISK: {\n          let next = this.parseExpression(tn, nextPrecedence);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        // BinaryExpression\n        case Token.LESSTHAN:\n        case Token.GREATERTHAN:\n        case Token.LESSTHAN_EQUALS:\n        case Token.GREATERTHAN_EQUALS:\n        case Token.EQUALS_EQUALS:\n        case Token.EQUALS_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS_EQUALS:\n        case Token.EXCLAMATION_EQUALS:\n        case Token.PLUS:\n        case Token.MINUS:\n        case Token.ASTERISK:\n        case Token.SLASH:\n        case Token.PERCENT:\n        case Token.LESSTHAN_LESSTHAN:\n        case Token.GREATERTHAN_GREATERTHAN:\n        case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n        case Token.AMPERSAND:\n        case Token.BAR:\n        case Token.CARET:\n        case Token.AMPERSAND_AMPERSAND:\n        case Token.BAR_BAR: {\n          let next = this.parseExpression(tn, nextPrecedence + 1);\n          if (!next) return null;\n          expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: assert(false); // filtered by determinePrecedence\n      }\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression,\n    potentiallyGeneric: bool = false\n  ): Expression {\n    var typeArguments: TypeNode[] | null = null;\n    while (\n      tn.skip(Token.OPENPAREN)\n      ||\n      potentiallyGeneric && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n    ) {\n      let args = this.parseArguments(tn);\n      if (!args) break;\n      expr = Node.createCallExpression( // is again callable\n        expr,\n        typeArguments,\n        args,\n        tn.range(expr.range.start, tn.pos)\n      );\n      potentiallyGeneric = false;\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParams,\n  getFunctionResults,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getLocalGetIndex,\n  getLocalSetIndex,\n  getLocalSetValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand,\n  expandType\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n    var params = expandType(getFunctionParams(func));\n    for (let i = 0, k = params.length; i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(params[i]));\n    }\n    this.push(\"): \");\n    var results = expandType(getFunctionResults(func));\n    switch (results.length) {\n      case 0: {\n        this.push(\"void\");\n        break;\n      }\n      default: assert(false); // TODO: multi-value\n      case 1: {\n        this.push(nativeTypeToType(results[0]));\n        break;\n      }\n    }\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.LocalGet: {\n        this.push(\"$\");\n        this.push(getLocalGetIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.LocalSet: {\n        this.push(\"$\");\n        this.push(getLocalSetIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getLocalSetValue(expr));\n        return;\n      }\n      case ExpressionId.GlobalGet:\n      case ExpressionId.GlobalSet: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.MemorySize: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.MemoryGrow: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicNotify:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.V128: return \"v128\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\n import {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  SourceKind\n } from \"./ast\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nexport abstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var members = file.exports;\n    if (members) {\n      for (let [name, member] of members) this.visitElement(name, member);\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) this.visitFile(exportStar);\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (seen.has(element)) {\n      this.visitAlias(name, element, <string>seen.get(element));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(name, <Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        this.visitPropertyInstances(name, <PropertyPrototype>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterInstance;\n        if (getter) this.visitFunction(name, getter);\n        let setter = prop.setterInstance;\n        if (setter) this.visitFunction(name, setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, <Function>instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, <Class>instance);\n      }\n    }\n  }\n\n  private visitPropertyInstances(name: string, element: PropertyPrototype): void {\n    // var instances = element.instances;\n    // if (instances) {\n    //   for (let instance of instances.values()) {\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\n    //   }\n    // }\n    assert(false);\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n  private unknown: Set<string> = new Set();\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(name, element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(name); // 'get:funcName' internally\n      sb.push(\"(): \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\n      sb.push(name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"export class \");\n    }\n    sb.push(name);\n    // var base = element.base;\n    // if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n    //   sb.push(\" extends \");\n    //   sb.push(base.name); // TODO: fqn\n    // }\n    sb.push(\" {\\n\");\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      for (let member of staticMembers.values()) this.visitElement(member.name, member);\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      for (let member of instanceMembers.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\": typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\nimport \"../../../std/portable/index\";\nimport \"../binaryen\";\nimport \"./float\";\nimport \"./i64\";\n","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 2; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nif (!String.prototype.replaceAll) {\n  Object.defineProperty(String.prototype, \"replaceAll\", {\n    value: function replaceAll(search, replacment) {\n      var res = this.split(search).join(replacment);\n      if (!search.length) res = replacment + res + replacment;\n      return res;\n    }\n  });\n}\n\nfunction defaultComparator(a, b) {\n  if (a === b) {\n    if (a !== 0) return 0;\n    a = 1 / a, b = 1 / b;\n  } else {\n    var nanA = a != a, nanB = b != b;\n    if (nanA | nanB) return nanA - nanB;\n    if (a == null) a = String(a);\n    if (b == null) b = String(b);\n  }\n  return a > b ? 1 : -1;\n}\n\nconst arraySort = Array.prototype.sort;\nArray.prototype.sort = function sort(comparator) {\n  return arraySort.call(this, comparator || defaultComparator);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n}\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  signbit: {\n    value: function signbit(x) {\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n    }\n  },\n  sincos: {\n    value: function sincos(x) {\n      this.sincos_sin = Math.sin(x);\n      this.sincos_cos = Math.cos(x);\n    }\n  }\n});\n\nglobalScope[\"unmanaged\"] = function() {};\n","module.exports = __WEBPACK_EXTERNAL_MODULE__21__;","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBALS = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Non-trapping float to integer operations. */\n  NONTRAPPING_F2I = 1 << 2, // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 3, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 4, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 5, // see: https://github.com/WebAssembly/threads\n  /** Exception handling operations. */\n  EXCEPTION_HANDLING = 1 << 6, // see: https://github.com/WebAssembly/exception-handling\n  /** Tail call operations. */\n  TAIL_CALLS = 1 << 7, // see: https://github.com/WebAssembly/tail-call\n  /** Reference types. */\n  REFERENCE_TYPES = 1 << 8 // see: https://github.com/WebAssembly/reference-types\n}\n\n/** Gets the name of the specified feature one would specify on the command line. */\nexport function featureToString(feature: Feature): string {\n  switch (feature) {\n    case Feature.SIGN_EXTENSION: return \"sign-extension\";\n    case Feature.MUTABLE_GLOBALS: return \"mutable-globals\";\n    case Feature.NONTRAPPING_F2I: return \"nontrapping-f2i\";\n    case Feature.BULK_MEMORY: return \"bulk-memory\";\n    case Feature.SIMD: return \"simd\";\n    case Feature.THREADS: return \"threads\";\n    case Feature.EXCEPTION_HANDLING: return \"exception-handling\";\n    case Feature.TAIL_CALLS: return \"tail-calls\";\n    case Feature.REFERENCE_TYPES: return \"reference-types\";\n  }\n  assert(false);\n  return \"\";\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64,\n  /** Portable. */\n  JS\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags;\n  /** Base class id or `0` if none. */\n  base: u32;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `Set`. */\n  SET = 1 << 2,\n  /** Type is a `Map`. */\n  MAP = 1 << 3,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 4,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 5,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 6,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 7,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 8,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 9,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 10,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 11,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 12,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 13,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 14,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 15,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 16,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 17,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 18,\n  /** Key is a signed type. */\n  KEY_SIGNED = 1 << 19,\n  /** Key is a float type. */\n  KEY_FLOAT = 1 << 20,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 21,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 22\n}\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { Decompiler } from \"./decompiler\";\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Program } from \"./program\";\n\n// Options\n\n/** Creates a new set of compiler options. */\nexport function newOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `exportTable` option. */\nexport function setExportTable(options: Options, exportTable: bool): void {\n  options.exportTable = exportTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(alias, name);\n}\n\n/** Sets the `explicitStart` option. */\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\n  options.explicitStart = explicitStart;\n}\n\n/** Sets the `noUnsafe` option. */\nexport function setNoUnsafe(options: Options, noUnsafe: bool): void {\n  options.noUnsafe = noUnsafe;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBALS = Feature.MUTABLE_GLOBALS;\n/** Non-trapping float to int conversion operations. */\nexport const FEATURE_NONTRAPPING_F2I = Feature.NONTRAPPING_F2I;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n/** Exception handling operations. */\nexport const FEATURE_EXCEPTION_HANDLING = Feature.EXCEPTION_HANDLING;\n/** Tail call operations. */\nexport const FEATURE_TAIL_CALLS = Feature.TAIL_CALLS;\n/** Reference types. */\nexport const FEATURE_REFERENCE_TYPES = Feature.REFERENCE_TYPES;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Disables a specific feature. */\nexport function disableFeature(options: Options, feature: Feature): void {\n  options.features &= ~feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n// Program\n\n/** Creates a new Program. */\nexport function newProgram(options: Options): Program {\n  return new Program(options);\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(program: Program): DiagnosticMessage | null {\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Obtains the source of the given file. */\nexport function getSource(program: Program, internalPath: string): string | null {\n  return program.getSource(internalPath);\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n// Parser\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parse(\n  /** Program reference. */\n  program: Program,\n  /** Source text of the file. */\n  text: string,\n  /** Normalized path of the file. */\n  path: string,\n  /** Whether this is an entry file. */\n  isEntry: bool = false\n): void {\n  program.parser.parseFile(text, path, isEntry);\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(program: Program): string | null {\n  return program.parser.nextFile();\n}\n\n/** Obtains the path of the dependee of a given imported file. */\nexport function getDependee(program: Program, file: string): string | null {\n  return program.parser.getDependee(file);\n}\n\n// Compiler\n\n/** Compiles the parsed sources to a module. */\nexport function compile(program: Program): Module {\n  program.parser.finish();\n  return new Compiler(program).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompile(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Builds a JSON file of a program's runtime type information. */\nexport function buildRTTI(program: Program): string {\n  var sb = new Array<string>();\n  sb.push(\"{\\n  \\\"names\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \\\"\");\n    sb.push(cls.internalName);\n    sb.push(\"\\\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"base\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    let base = cls.base;\n    sb.push(\"    \");\n    sb.push(base ? base.id.toString() : \"0\");\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"flags\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \");\n    sb.push(cls.rttiFlags.toString());\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ]\\n}\\n\");\n  return sb.join(\"\");\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n\n// Full API\nexport * from \"./ast\";\n// export * from \"./binary\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./decompiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnosticMessages.generated\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nexport * from \"./util/index\";\n","/** @module util *//***/\n\n/** Tests if the bit at the specified index is set within a 64-bit map. */\nexport function bitsetIs(map: I64, index: i32): bool {\n  assert(index >= 0 && index < 64);\n  return i64_ne(\n    i64_and(\n      map,\n      i64_shl(\n        i64_one,\n        i64_new(index)\n      )\n    ),\n    i64_zero\n  );\n}\n\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\n  assert(index >= 0 && index < 64);\n  return isSet\n    ? i64_or(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      )\n    : i64_and(\n        map,\n        i64_not(\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      );\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  const c0 = c | 32; // unify uppercases and lowercases a|A - z|Z\n  return c0 >= CharCode.a && c0 <= CharCode.z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7F && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 170 || code > 65500 ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 170 || code > 65500 ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let len = original.length;\n    let cloned = new Array<V>(len);\n    for (let i = 0; i < len; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    for (let v of original) cloned.add(v);\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    for (let [k, v] of original) cloned.set(k, v);\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\n  } else if (overrides) {\n    for (let [k, v] of overrides) cloned.set(k, v);\n  }\n  return cloned;\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n"],"sourceRoot":""}