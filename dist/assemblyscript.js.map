{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__20__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_MUTABLE_GLOBAL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","String","Array","FixedArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","abort","pow","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocArray","feature_1","Feature","target_1","Target","typeinfo_1","Typeinfo","TypeinfoFlags","__export","isPowerOf2","x","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","withRelatedRange","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","emitDiagnostic","info","infoRelated","warning","warningRelated","error","errorRelated","OperatorKind","common_1","diagnostics_1","types_1","ast_1","resolver_1","flow_1","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","operatorKindFromDecorator","decoratorKind","arg","DecoratorKind","OPERATOR","OPERATOR_BINARY","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","OPERATOR_PREFIX","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","OPERATOR_POSTFIX","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","Program","_super","_this","sources","diagnosticsOffset","explicitStartFunction","filesByName","elementsByName","elementsByDeclaration","instancesByName","typeClasses","managedClasses","nextClassId","nativeDummySignature","nativeSource","Source","SourceKind","LIBRARY","nativeFile","File","set","internalName","resolver","Resolver","__extends","writeRuntimeHeader","buffer","offset","classInstance","payloadSize","writeI32","id","makeNativeVariableDeclaration","flags","NONE","Node","createVariableDeclaration","createIdentifierExpression","makeNativeTypeDeclaration","identifier","createTypeDeclaration","createOmittedType","makeNativeFunctionDeclaration","createFunctionDeclaration","createSignature","createType","createSimpleTypeName","makeNativeNamespaceDeclaration","createNamespaceDeclaration","makeNativeFunction","signature","parent","decoratorFlags","Function","FunctionPrototype","getElementByDeclaration","declaration","has","initialize","options","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","EXPORT","GENERIC","BUILTIN","hasFeature","registerConstantInteger","i64_new","isWasm64","WASM64","WASM32","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","k","file","statements","j","statement","kind","NodeKind","initializeExports","IMPORT","initializeImports","VARIABLE","initializeVariables","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","FUNCTIONDECLARATION","initializeFunction","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeDefinition","queuedExportsStar_1","__values","queuedExportsStar_1_1","next","done","_g","__read","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","File_0_not_found","queuedImport","element","lookupForeign","Module_0_has_no_exported_member_1","localName","asImportedNamespace","queuedExports_1","queuedExports_1_1","_h","exports_1","exports_1_1","_j","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","arrayBufferInstance","requireClass","stringInstance","arrayBufferViewInstance","registerNativeTypeClass","i8ArrayPrototype","CLASS_PROTOTYPE","i16ArrayPrototype","i32ArrayPrototype","i64ArrayPrototype","u8ArrayPrototype","u8ClampedArrayPrototype","u16ArrayPrototype","u32ArrayPrototype","u64ArrayPrototype","f32ArrayPrototype","f64ArrayPrototype","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","SEALED","Class_0_is_sealed_and_cannot_be_extended","identifierNode","UNMANAGED","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","Range","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_k","alias","firstChar","parseI32","Error","arrayPrototype","fixedArrayPrototype","setPrototype","mapPrototype","abortInstance","requireFunction","allocInstance","reallocInstance","freeInstance","retainInstance","releaseInstance","collectInstance","typeinfoInstance","instanceofInstance","visitInstance","allocArrayInstance","_l","values","_m","isEntry","_o","_p","markModuleExport","resolved","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","MODULE_EXPORT","instanceMembers","_c","_d","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FUNCTION","FIELD","CLASS","members","_e","_f","type","setType","typeKind","className","classElement","is","global","Global","CONST","setConstantIntegerValue","registerConstantFloat","setConstantFloatValue","ensureGlobal","merged","tryMerge","Duplicate_identifier_0","elements","requireGlobal","foreignName","lookupExport","fileQueuedExports","checkDecorators","decorators","acceptedFlags","decorator","flag","decoratorKindToFlag","decoratorNameToKind","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","GLOBAL","implementsTypes","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Operation_not_supported","extendsType","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeProperty","initializeMethod","INDEXSIGNATUREDECLARATION","STATIC","INTERFACE_PROTOTYPE","READONLY","INLINE","LAZY","UNSAFE","ABSTRACT","FieldPrototype","addInstance","isStatic","CONSTRUCTOR","checkOperatorOverloads","classPrototype","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","ensureProperty","parentMembers","PropertyPrototype","Duplicate_property_0","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","internalPath","queued","endsWith","path","exportedName","Export_declaration_conflicts_with_exported_declaration_of_0","declarations","initializeImport","namespaceName","validDecorators","AMBIENT","EXTERNAL","INSTANCE","FILE","START","Module_cannot_have_multiple_start_functions","findDecorator","InterfacePrototype","original","Namespace","copyMembers","DECLARE","Element","program","shadowType","current","unset","originalDeclaration","actual","isBound","TypedElement","apply","RESOLVED","startFunction","Signature","isImport","lookup","includes","exports_2","exports_2_1","_b","memberName","TYPEDEFINITION","mangleInternalName","typeParameters","NAMESPACE","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","initializer","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","isImmutable","Parameter","Local","index","LOCAL","instances","boundPrototypes","body","arrowKind","toBound","bound","getResolvedInstance","instanceKey","setResolvedInstance","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","addLocal","locals","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","FunctionTarget","__s","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","parameterIndex","Field","memoryOffset","firstDeclaration","Property","getterInstance","setterInstance","AcyclicState","_isInterface","constructorPrototype","extends","basePtototype","Class","typeArguments","base","INTERFACE","currentMemoryOffset","constructorInstance","_id","_acyclic","rttiFlags","asClass","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","baseName","baseType","typeParameterNodes","numTypeArguments","isBuiltinArray","lengthField","lookupOverload","isAssignableTo","target","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","writeField","baseOffset","writeI8","writeI16","writeF32","writeF64","getTypeArgumentsTo","extendedPrototype","getArrayValueType","abvInstance","acyclic","hasCycle","cyclesTo","other","except","classReference","Interface","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","srcMembers_1","srcMembers_1_1","isInstance","asGlobal","NativeType","ExpressionId","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeUnreachable","_BinaryenTypeAuto","FeatureFlags","_BinaryenFeatureAtomics","_BinaryenFeatureMutableGlobals","_BinaryenFeatureNontrappingFPToInt","_BinaryenFeatureSIMD128","_BinaryenFeatureBulkMemory","_BinaryenFeatureSignExt","_BinaryenFeatureExceptionHandling","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenLocalGetId","_BinaryenLocalSetId","_BinaryenGlobalGetId","_BinaryenGlobalSetId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicNotifyId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDBitselectId","_BinaryenSIMDShiftId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","HostOp","_BinaryenMemorySize","_BinaryenMemoryGrow","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDExtractOp","_BinaryenExtractLaneSVecI8x16","_BinaryenExtractLaneUVecI8x16","_BinaryenExtractLaneSVecI16x8","_BinaryenExtractLaneUVecI16x8","_BinaryenExtractLaneVecI32x4","_BinaryenExtractLaneVecI64x2","_BinaryenExtractLaneVecF32x4","_BinaryenExtractLaneVecF64x2","SIMDReplaceOp","_BinaryenReplaceLaneVecI8x16","_BinaryenReplaceLaneVecI16x8","_BinaryenReplaceLaneVecI32x4","_BinaryenReplaceLaneVecI64x2","_BinaryenReplaceLaneVecF32x4","_BinaryenReplaceLaneVecF64x2","SIMDShiftOp","_BinaryenShlVecI8x16","_BinaryenShrSVecI8x16","_BinaryenShrUVecI8x16","_BinaryenShlVecI16x8","_BinaryenShrSVecI16x8","_BinaryenShrUVecI16x8","_BinaryenShlVecI32x4","_BinaryenShrSVecI32x4","_BinaryenShrUVecI32x4","_BinaryenShlVecI64x2","_BinaryenShrSVecI64x2","_BinaryenShrUVecI64x2","MemorySegment","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","_BinaryenModuleCreate","lit","memory","allocate","_BinaryenSizeofLiteral","createFrom","cArr","allocU8Array","_BinaryenModuleRead","changetype","addFunctionType","result","paramTypes","cStr","allocStringCached","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","store","_BinaryenLiteralVec128","unary","op","expr","_BinaryenUnary","binary","left","right","_BinaryenBinary","host","operands","allocPtrArray","_BinaryenHost","local_get","_BinaryenLocalGet","local_tee","_BinaryenLocalTee","global_get","_BinaryenGlobalGet","load","signed","ptr","align","_BinaryenLoad","None","_BinaryenStore","atomic_load","_BinaryenAtomicLoad","atomic_store","_BinaryenAtomicStore","atomic_rmw","_BinaryenAtomicRMW","atomic_cmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","atomic_wait","timeout","expectedType","_BinaryenAtomicWait","atomic_notify","notifyCount","_BinaryenAtomicNotify","local_set","_BinaryenLocalSet","global_set","_BinaryenGlobalSet","block","label","children","_BinaryenBlock","br","condition","_BinaryenBreak","drop","expression","_BinaryenDrop","loop","_BinaryenLoop","if","ifTrue","ifFalse","_BinaryenIf","nop","_BinaryenNop","return","_BinaryenReturn","select","_BinaryenSelect","switch","names","defaultName","numNames","strs","_BinaryenSwitch","returnType","_BinaryenCall","call_indirect","typeName","_BinaryenCallIndirect","unreachable","_BinaryenUnreachable","memory_copy","size","_BinaryenMemoryCopy","memory_fill","_BinaryenMemoryFill","simd_extract","vec","idx","_BinaryenSIMDExtract","simd_replace","_BinaryenSIMDReplace","simd_shuffle","vec1","vec2","mask","_BinaryenSIMDShuffle","simd_bitselect","cond","_BinaryenSIMDBitselect","simd_shift","shift","_BinaryenSIMDShift","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","externalName","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","shared","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","setMemory","initial","maximum","segments","segs","psvs","offs","sizs","i64_low","i64_high","cArr1","cArr2","cArr3","cArr4","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","getFeatures","_BinaryenModuleGetFeatures","setFeatures","featureFlags","_BinaryenModuleSetFeatures","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","readBuffer","readString","toText","toAsmjs","str","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getExpressionId","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getConstValueF32","getConstValueF64","getLocalGetIndex","getLocalSetIndex","_BinaryenLocalSetGetIndex","getLocalSetValue","_BinaryenLocalSetGetValue","isLocalTee","_BinaryenLocalSetIsTee","getGlobalGetName","getBinaryOp","getBinaryLeft","getBinaryRight","getUnaryOp","getUnaryValue","getLoadBytes","getLoadOffset","getLoadPtr","isLoadSigned","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","getBlockName","_BinaryenBlockGetName","getBlockChildCount","_BinaryenBlockGetNumChildren","getBlockChild","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","getIfTrue","_BinaryenIfGetIfTrue","getIfFalse","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","getSelectThen","_BinaryenSelectGetIfTrue","getSelectElse","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","getCallTarget","_BinaryenCallGetTarget","getCallOperandCount","_BinaryenCallGetNumOperands","getCallOperand","_BinaryenCallGetOperand","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","needsExplicitUnreachable","Unreachable","Return","Break","Block","numChildren","traverse","data","If","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDBitselect","_BinaryenSIMDBitselectGetLeft","_BinaryenSIMDBitselectGetRight","_BinaryenSIMDBitselectGetCond","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Select","Drop","Host","Nop","tokenizer_1","Token","nodeIsConstantValue","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","ASSERTION","CALL","ELEMENTACCESS","PARENTHESIZED","PROPERTYACCESS","SUPER","nodeIsGenericCallable","createTypeName","TypeName","isNullable","TypeNode","createTypeParameter","defaultType","elem","TypeParameterNode","createParameter","ParameterNode","parameterKind","parameters","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","createComment","node","CommentNode","commentKind","isQuoted","IdentifierExpression","symbol","createEmptyIdentifierExpression","createArrayLiteralExpression","ArrayLiteralExpression","elementExpressions","createAssertionExpression","assertionKind","toType","AssertionExpression","createBinaryExpression","operator","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportImportStatement","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","FunctionDeclaration","createIndexSignatureDeclaration","keyType","valueType","IndexSignatureDeclaration","createMethodDeclaration","MethodDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","TypeDeclaration","createVariableStatement","VariableStatement","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","TYPENAME","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","SIGNATURE","nameStr","propStr","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","BINARY","numArguments","COMMA","FLOAT","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","Statement","SOURCE","tokenizer","exportPaths","sourceKind","pos","lastIndexOf","simplePath","ENTRY","DeclarationStatement","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FOR","ArrowKind","clone","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","isTypeOmitted","program_1","module_1","TypeKind","TypeFlags","v128_zero","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","isize64","isize32","usize64","usize32","clz","computeSmallIntegerShift","targetType","computeSmallIntegerMask","classType","asNullable","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isStrictlyAssignableTo","commonDenominator","signednessIsImportant","toNativeType","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","asFunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","g","e","window","ReportMode","builtins_1","currentThisExpression","currentElementExpression","resolveType","context","reportMode","REPORT","parameterNodes","parameterNode","REST","parameterTypeNode","Type_expected","returnTypeNode","typeNode","typeArgumentNodes","possiblyPlaceholder","Type_0_is_not_generic","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","type_1","Expected_0_type_arguments_but_got_1","typeArgument","resolveTypeArguments","Cannot_find_name_0","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","resolveIdentifier","ensureResolvedLazyGlobal","resolvePropertyAccessExpression","propertyAccess","contextualType","targetExpression","resolveExpression","propertyName","indexedGet","Index_signature_is_missing_in_type_0","arrayType","resolvedType","resolveElementAccessExpression","elementAccess","determineIntegerLiteralType","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","resolveAssertionExpression","resolveUnaryPrefixExpression","resolveUnaryPostfixExpression","resolveBinaryExpression","resolveThisExpression","resolveSuperExpression","actualFunction","resolveLiteralExpression","resolveCallExpression","NONNULL","i64_sub","i64_zero","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","literalType","BuiltinSymbols","resolveFunctionInclTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","actualParent","resolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","signatureParameters","numSignatureParameters","parameterDeclaration","reportNode","resolvedTypeArguments","numTypeParameters","baseClass","nameInclTypeParamters","baseMembers","baseMembers_1","baseMembers_1_1","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","atEnd","fieldInstance","boundPrototype","propertyInstance","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","LocalFlags","FlowFlags","ANY_CATEGORICAL","ANY_CONDITIONAL","FieldFlags","scopedLocals","fieldFlags","parentFunction","continueLabel","localFlags","inlineFunction","inlineReturnLabel","createInline","fork","branch","slice","getTempLocal","temps","k_1","unsetLocalFlag","pop","getAutoreleaseLocal","SCOPED","setLocalFlag","RETAINED","freeTempLocal","getAndFreeTempLocal","getScopedLocal","addScopedLocal","scopedLocal","addScopedAlias","existingLocal","scopedAlias","freeScopedLocals","scope","isLocalFlag","defaultIfInlined","isAnyLocalFlag","pushBreakLabel","stack","popBreakLabel","inherit","inheritConditional","CONDITIONALLY_RETAINED","READFROM","CONDITIONALLY_READFROM","WRITTENTO","CONDITIONALLY_WRITTENTO","inheritMutual","leftLocalFlags","numLeftLocalFlags","rightLocalFlags","numRightLocalFlags","combinedFlags","max","isNonnull","inheritNonnullIfTrue","EqzI32","EqzI64","inheritNonnullIfFalse","EqI32","EqI64","NeI32","NeI64","canOverflow","WRAPPED","canConversionOverflow","global_1","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","MIN_VALUE","fromType","last","instanceName","levels","findUsedLocalsVisit","used","findUsedLocals","Options","importMemory","sharedMemory","importTable","features","feature","ContextualFlags","RuntimeFeatures","mangleImportName_moduleName","mangleImportName_elementName","Compiler","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","runtimeFeatures","skippedAutoreleases","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","Atomics","MutableGloabls","SIMD128","BulkMemory","SignExt","compile","startFunctionInstance","startFunctionBody","currentFlow","currentBody","heap_base","rtti_base","files","compileFile","compileExports","hasExplicitStart","funcRef","ensureFunctionType","compileVisitGlobals","compileVisitMembers","compileRTTI","i64_align","isSharedMemory","i64_shr_u","ensureModuleExports","members_1","members_1_1","ensureModuleExport","prefix","fullName","setter","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","ensureModuleFieldGetter","ensureModuleFieldSetter","isUnmanaged","subPrefix","loadExpr","isManaged","makeRetain","nativeType","nativeSizeType","valueExpr","makeRetainRelease","compileElement","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","element_1","exportsStar_1","exportsStar_1_1","compileFileByPath","normalizedPathWithoutExtension","pathWithIndex","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","initAutoreleaseSkipped","initializerNode","compileExpression","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","initializeInStart","Mutable_value_cannot_be_inlined","decoratorNodes","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","makeGlobalAssignment","compileFunction","resultType","compileFunctionBody","stmts","bodyNode","compileStatements","MAIN","indexBefore","performAutoreleases","nonNull","temp","started","unshift","thisLocalIndex","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","previousType","An_implementation_cannot_be_declared_in_ambient_contexts","flatten","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileClass","staticMembers","compileInterfaceDeclaration","addMemorySegment","alignment","ensureStaticString","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","ensureStaticArrayBuffer","elementType","byteLength","bufferInstance","buf","writeI64","ensureStaticArrayHeader","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","ensureFunctionTableEntry","TRAMPOLINE","memberStatements","compileStatement","contextualFlags","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","condExpr","makeIsTrueish","terminated","repeatLabel","alwaysTrue","compileExpressionRetainType","incrExpr","bodyStatement","usesContinue","breakBlock","repeatBlock","ifTrueStmts","ifTrueFlow","ifFalseFlow","ifFalseStmts","valueExpression","contextualFlags_1","ANY_RETAINED","numCases","tempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","newArgs","compileAbort","numDeclarations","initializers","isConst","_const_declarations_must_be_initialized","CONSTANT","compileInlineConstant","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","convertExpression","ensureSmallIntegerWrap","explicit","Object_is_possibly_null","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","PREFIX","Expression_is_never_null","tempIndex","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","AllTrueVecI8x16","EqVecI8x16","AnyTrueVecI8x16","NeVecI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","intType","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","moveAutorelease","rightStmts","makeRelease","retainLeftInThen","makeAssignment","compileUnaryOverload","thisExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","indexExpression","tee","makeLocalAssignment","makeFieldAssignment","makeAutorelease","nativeReturnType","thisExpr_1","thisExpr","elementExpr","tempLocalTarget","tempLocalElement","makeSkippedRelease","nativeFieldType","nativeThisType","tempThis","tempValue","flow_2","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","compileCallDirect","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","inferredTypes","argumentNodes","argumentExprs","templateName","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","argumentExpressions","thisArg","compileCallInlinePrechecked","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","compileCallInline","canAlias","immediatelyDropped","makeCallInlinePrechecked","usedLocals","paramExpr","paramType","argumentLocal","baseInstance","initType","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","argc","Optional_parameter_must_have_an_initializer","ensureArgcVar","setargc","oldExpr","newExpr","temp1","temp2","undoAutorelease","fromInnerFlow","toOuterFlow","clearFlags","lengthBefore","skipAutorelease","TODO_Cannot_inline_inferred_calls_and_specific_internals_yet","numOperands","isCallImport","allOptionalsAreConstant","expr_1","makeCallIndirect","numExpressions","exprs","contextualSignature","numPresentParameters","thisTypeNode","maybeCompileEnclosingSource","flow_3","actualFunction_1","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","actualType","implicitlyNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","tempDataStart","nativeElementType","bufferAddress","arraySegment","arrayAddress","alignLog2","nativeArrayType","dataStart","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","compileInstantiate","baseCtor","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","IfThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","makeInstanceOfClass","idTemp","idExpr","conditions","Auto","compiler_1","compiler","isAsm","directize","isInteger","evaluateConstantType","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","checkTypeAbsent","checkArgsRequired","SWALLOW","isConstant","sizeof","checkTypeRequired","alignof","ctz","checkArgsOptional","typeArgumentsRange","Type_0_has_no_property_1","popcnt","checkTypeOptional","ClzI64","CtzI64","PopcntI64","rotl","RotlI32","RotlI64","rotr","RotrI32","RotrI64","abs","tempLocal1","tempLocalIndex2","tempLocalIndex1","wasm64","AbsF32","AbsF64","MaxF32","MaxF64","tempLocal0","min","MinF32","MinF64","floor","CeilF32","FloorF32","CeilF64","FloorF64","copysign","CopysignF32","CopysignF64","nearest","NearestF32","NearestF64","reinterpret","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","sqrt","SqrtF32","SqrtF64","trunc","TruncF32","TruncF64","outType","immOffset","evaluateImmediateOffset","immAlign","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","inType","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","Add","Sub","And","Or","Xor","Xchg","memory_size","MemorySize","memory_grow","MemoryGrow","alreadyUnchecked","call_direct","arg0Type","operandExprs","nativeParamTypes","operandType","instantiate","User_defined_0","Expression_must_be_a_compile_time_constant","off","v128_splat","SplatVecI8x16","SplatVecI16x8","SplatVecI32x4","SplatVecI64x2","SplatVecF32x4","SplatVecF64x2","v128_extract_lane","ExtractLaneSVecI8x16","ExtractLaneUVecI8x16","ExtractLaneSVecI16x8","ExtractLaneUVecI16x8","ExtractLaneVecI32x4","ExtractLaneVecI64x2","ExtractLaneVecF32x4","ExtractLaneVecF64x2","maxIdx","v128_replace_lane","ReplaceLaneVecI8x16","ReplaceLaneVecI16x8","ReplaceLaneVecI32x4","ReplaceLaneVecI64x2","ReplaceLaneVecF32x4","ReplaceLaneVecF64x2","v128_shuffle","laneWidth","laneCount","argN","off8","idx8","v128_add","v128_sub","v128_mul","v128_div","v128_add_saturate","v128_sub_saturate","v128_min","v128_max","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","AddVecI8x16","AddVecI16x8","AddVecI32x4","AddVecI64x2","AddVecF32x4","AddVecF64x2","SubVecI8x16","SubVecI16x8","SubVecI32x4","SubVecI64x2","SubVecF32x4","SubVecF64x2","MulVecI8x16","MulVecI16x8","MulVecI32x4","MulVecF32x4","MulVecF64x2","DivVecF32x4","DivVecF64x2","AddSatSVecI8x16","AddSatUVecI8x16","AddSatSVecI16x8","AddSatUVecI16x8","SubSatSVecI8x16","SubSatUVecI8x16","SubSatSVecI16x8","SubSatUVecI16x8","MinVecF32x4","MinVecF64x2","MaxVecF32x4","MaxVecF64x2","EqVecI16x8","EqVecI32x4","EqVecF32x4","EqVecF64x2","NeVecI16x8","NeVecI32x4","NeVecF32x4","NeVecF64x2","LtSVecI8x16","LtUVecI8x16","LtSVecI16x8","LtUVecI16x8","LtSVecI32x4","LtUVecI32x4","LtVecF32x4","LtVecF64x2","LeSVecI8x16","LeUVecI8x16","LeSVecI16x8","LeUVecI16x8","LeSVecI32x4","LeUVecI32x4","LeVecF32x4","LeVecF64x2","GtSVecI8x16","GtUVecI8x16","GtSVecI16x8","GtUVecI16x8","GtSVecI32x4","GtUVecI32x4","GtVecF32x4","GtVecF64x2","GeSVecI8x16","GeUVecI8x16","GeSVecI16x8","GeUVecI16x8","GeSVecI32x4","GeUVecI32x4","GeVecF32x4","GeVecF64x2","v128_neg","v128_abs","v128_sqrt","v128_convert","v128_trunc","NegVecI8x16","NegVecI16x8","NegVecI32x4","NegVecI64x2","NegVecF32x4","NegVecF64x2","AbsVecF32x4","AbsVecF64x2","SqrtVecF32x4","SqrtVecF64x2","ConvertSVecI32x4ToVecF32x4","ConvertUVecI32x4ToVecF32x4","ConvertSVecI64x2ToVecF64x2","ConvertUVecI64x2ToVecF64x2","TruncSatSVecF32x4ToVecI32x4","TruncSatUVecF32x4ToVecI32x4","TruncSatSVecF64x2ToVecI64x2","TruncSatUVecF64x2ToVecI64x2","v128_shl","v128_shr","ShlVecI8x16","ShlVecI16x8","ShlVecI32x4","ShlVecI64x2","ShrSVecI8x16","ShrUVecI8x16","ShrSVecI16x8","ShrUVecI16x8","ShrSVecI32x4","ShrUVecI32x4","ShrSVecI64x2","ShrUVecI64x2","v128_and","v128_or","v128_xor","AndVec128","OrVec128","XorVec128","v128_not","NotVec128","v128_bitselect","v128_any_true","v128_all_true","AnyTrueVecI16x8","AnyTrueVecI32x4","AnyTrueVecI64x2","AllTrueVecI16x8","AllTrueVecI32x4","AllTrueVecI64x2","idof","visit_globals","visit_members","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_u_xor","i32_atomic_rmw16_u_xor","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_s_f32x4_sat","i32x4_trunc_u_f32x4_sat","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_s_f64x2_sat","i64x2_trunc_u_f64x2_sat","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_s_i32x4","f32x4_convert_u_i32x4","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_s_i64x2","f64x2_convert_u_i64x2","v8x16_shuffle","tryDeferASM","messageArg","filenameArg","typeToRuntimeFlags","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","memory_allocate","memory_free","memory_reset","runtime_instanceof","runtime_flags","runtime_allocate","runtime_reallocate","runtime_register","runtime_discard","runtime_makeArray","capabilities","nativeSizeSize","ftype","blocks","outer","lastId","managedClasses_1","managedClasses_1_1","visitImpl","isDeclaredInLibrary","visitFunc","visitSig","callExpr","fieldOffset","managedClasses_2","managedClasses_2_1","abvPrototype","managedClasses_3","managedClasses_3_1","isAcyclic","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","i64_to_string","ExportsWalker","includePrivate","seen","walk","visitFile","visitElement","visitAlias","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","visitNamespace","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","members_2","members_2_1","name_1","visitInterface","TSDBuilder","unknown","numMembers","members_3","members_3_1","name_2","isInterface","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","parseParameters","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","parseFunctionExpressionCommon","bodyExpression","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","setEnd","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","_super_must_be_followed_by_an_argument_list_or_member_access","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","skipBlock","depth","Precedence","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","UnreachableError","captureStackTrace","AssertionError","defineProperties","writable","fround","EPSILON","MIN_NORMAL_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","clz32","round","y","sign","isTrueish","radix","parseInt","undefined","fromCodePoint","Number","capacity","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","HEAP","HEAP_OFFSET","oldHeap","fill","copy","copyWithin","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","__decorate","unmanaged","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoAssert","setImportMemory","setSharedMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD","buildRTTI","cls","bitsetIs","map","bitsetSet","isSet","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","makeArray","cloned","makeSet","original_1","original_1_1","v","overrides","original_2","original_2_1","overrides_1","overrides_1_1","overrides_2","overrides_2_1","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","readI32","readI64","readI8","readI16","readF32","readF64","valueI64"],"mappings":"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xE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__20__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is the main function. */\n  MAIN = 1 << 27,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n\n/** Common compiler symbols. */\nexport namespace CommonSymbols {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_FEATURE_MUTABLE_GLOBAL = \"ASC_FEATURE_MUTABLE_GLOBAL\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const FixedArray = \"FixedArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  // runtime\n  export const abort = \"abort\";\n  export const pow = \"pow\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const retain = \"__retain\";\n  export const release = \"__release\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const allocArray = \"__allocArray\";\n}\n\n// shared\nexport { Feature } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./bitset\";\nexport * from \"./charcode\";\nexport * from \"./collections\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak, CharCode\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(range.source.normalizedPath);\n      sb.push(\"(\");\n      sb.push(range.line.toString(10));\n      sb.push(\",\");\n      sb.push(range.column.toString(10));\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  CommonSymbols,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  Range,\n  DecoratorNode,\n  DecoratorKind,\n  SignatureNode,\n  TypeParameterNode,\n  CommonTypeNode,\n  TypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  decoratorNameToKind,\n  findDecorator\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\nimport {\n  BuiltinSymbols\n} from \"./builtins\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\n/** Returns the operator kind represented by the specified decorator and string argument. */\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n  assert(arg.length);\n  switch (decoratorKind) {\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.OPENBRACKET: {\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n          break;\n        }\n        case CharCode.OPENBRACE: {\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n          break;\n        }\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.ADD;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.SUB;\n          break;\n        }\n        case CharCode.ASTERISK: {\n          if (arg == \"*\") return OperatorKind.MUL;\n          if (arg == \"**\") return OperatorKind.POW;\n          break;\n        }\n        case CharCode.SLASH: {\n          if (arg == \"/\") return OperatorKind.DIV;\n          break;\n        }\n        case CharCode.PERCENT: {\n          if (arg == \"%\") return OperatorKind.REM;\n          break;\n        }\n        case CharCode.AMPERSAND: {\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\n          break;\n        }\n        case CharCode.BAR: {\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\n          break;\n        }\n        case CharCode.CARET: {\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n          break;\n        }\n        case CharCode.EQUALS: {\n          if (arg == \"==\") return OperatorKind.EQ;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!=\") return OperatorKind.NE;\n          break;\n        }\n        case CharCode.GREATERTHAN: {\n          if (arg == \">\") return OperatorKind.GT;\n          if (arg == \">=\") return OperatorKind.GE;\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n          break;\n        }\n        case CharCode.LESSTHAN: {\n          if (arg == \"<\") return OperatorKind.LT;\n          if (arg == \"<=\") return OperatorKind.LE;\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_PREFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.PLUS;\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.MINUS;\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!\") return OperatorKind.NOT;\n          break;\n        }\n        case CharCode.TILDE: {\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_POSTFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n          break;\n        }\n      }\n      break;\n    }\n  }\n  return OperatorKind.INVALID;\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n  /** Explicitly annotated start function. */\n  explicitStartFunction: FunctionPrototype | null = null;\n\n  // lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes backing basic types like `i32`. */\n  typeClasses: Map<TypeKind,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n\n  // standard references\n\n  /** ArrayBufferView reference. */\n  arrayBufferViewInstance: Class;\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype;\n  /** Set prototype reference. */\n  setPrototype: ClassPrototype;\n  /** Map prototype reference. */\n  mapPrototype: ClassPrototype;\n  /** Fixed array prototype reference. */\n  fixedArrayPrototype: ClassPrototype;\n  /** Int8Array prototype. */\n  i8ArrayPrototype: ClassPrototype;\n  /** Int16Array prototype. */\n  i16ArrayPrototype: ClassPrototype;\n  /** Int32Array prototype. */\n  i32ArrayPrototype: ClassPrototype;\n  /** Int64Array prototype. */\n  i64ArrayPrototype: ClassPrototype;\n  /** Uint8Array prototype. */\n  u8ArrayPrototype: ClassPrototype;\n  /** Uint8ClampedArray prototype. */\n  u8ClampedArrayPrototype: ClassPrototype;\n  /** Uint16Array prototype. */\n  u16ArrayPrototype: ClassPrototype;\n  /** Uint32Array prototype. */\n  u32ArrayPrototype: ClassPrototype;\n  /** Uint64Array prototype. */\n  u64ArrayPrototype: ClassPrototype;\n  /** Float32Array prototype. */\n  f32ArrayPrototype: ClassPrototype;\n  /** Float64Array prototype. */\n  f64ArrayPrototype: ClassPrototype;\n  /** String instance reference. */\n  stringInstance: Class;\n  /** Abort function reference, if present. */\n  abortInstance: Function;\n\n  // runtime references\n\n  /** RT `__alloc(size: usize, id: u32): usize` */\n  allocInstance: Function;\n  /** RT `__realloc(ref: usize, newSize: usize): usize` */\n  reallocInstance: Function;\n  /** RT `__free(ref: usize): void` */\n  freeInstance: Function;\n  /** RT `__retain(ref: usize): usize` */\n  retainInstance: Function;\n  /** RT `__release(ref: usize): void` */\n  releaseInstance: Function;\n  /** RT `__collect(): void` */\n  collectInstance: Function;\n  /** RT `__visit(ref: usize, cookie: u32): void` */\n  visitInstance: Function;\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\n  typeinfoInstance: Function;\n  /** RT `__instanceof(ref: usize, superId: u32): bool` */\n  instanceofInstance: Function;\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\n  allocArrayInstance: Function;\n\n  /** Next class id. */\n  nextClassId: u32 = 0;\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY);\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.resolver = new Resolver(this);\n  }\n\n  /** Writes a common runtime header to the specified buffer. */\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, classInstance: Class, payloadSize: u32): void {\n    // BLOCK {\n    //   mmInfo: usize // WASM64 TODO\n    //   gcInfo: u32\n    //   rtId: u32\n    //   rtSize: u32\n    // }\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\n    writeI32(payloadSize, buffer, offset);\n    writeI32(1, buffer, offset + 4); // RC=1\n    writeI32(classInstance.id, buffer, offset + 8);\n    writeI32(payloadSize, buffer, offset + 12);\n  }\n\n  /** Gets the size of a runtime header. */\n  get runtimeHeaderSize(): i32 {\n    return 16;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, null, null, flags, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null,\n      Node.createOmittedType(range),\n      null, flags, range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: SignatureNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null,\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createSignature([],\n        Node.createType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\n          null, false, range\n        ),\n        null, false, range)\n      ),\n      null, null, flags, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      [], null, flags, range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    assert(elementsByDeclaration.has(declaration));\n    return elementsByDeclaration.get(declaration)!;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // register native types\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\n    this.registerNativeType(CommonSymbols.void_, Type.void);\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\n      CommonSymbols.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonSymbols.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonSymbols.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_MUTABLE_GLOBAL, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    for (let [file, exportsStar] of queuedExportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = exportsStar[i];\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            queuedImport.localIdentifier.text,\n            element,\n            true // isImport\n          );\n        } else {\n          // FIXME: file not found is not reported if this happens?\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = queuedImport.localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile\n            ),\n            true // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [file, exports] of queuedExports) {\n      for (let [exportName, queuedExport] of exports) {\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.nextClassId == 0);\n    this.arrayBufferInstance = this.requireClass(CommonSymbols.ArrayBuffer);\n    assert(this.arrayBufferInstance.id == 0);\n    this.stringInstance = this.requireClass(CommonSymbols.String);\n    assert(this.stringInstance.id == 1);\n    this.arrayBufferViewInstance = this.requireClass(CommonSymbols.ArrayBufferView);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerNativeTypeClass(TypeKind.I8, CommonSymbols.I8);\n    this.registerNativeTypeClass(TypeKind.I16, CommonSymbols.I16);\n    this.registerNativeTypeClass(TypeKind.I32, CommonSymbols.I32);\n    this.registerNativeTypeClass(TypeKind.I64, CommonSymbols.I64);\n    this.registerNativeTypeClass(TypeKind.ISIZE, CommonSymbols.Isize);\n    this.registerNativeTypeClass(TypeKind.U8, CommonSymbols.U8);\n    this.registerNativeTypeClass(TypeKind.U16, CommonSymbols.U16);\n    this.registerNativeTypeClass(TypeKind.U32, CommonSymbols.U32);\n    this.registerNativeTypeClass(TypeKind.U64, CommonSymbols.U64);\n    this.registerNativeTypeClass(TypeKind.USIZE, CommonSymbols.Usize);\n    this.registerNativeTypeClass(TypeKind.BOOL, CommonSymbols.Bool);\n    this.registerNativeTypeClass(TypeKind.F32, CommonSymbols.F32);\n    this.registerNativeTypeClass(TypeKind.F64, CommonSymbols.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeTypeClass(TypeKind.V128, CommonSymbols.V128);\n\n    // register views but don't instantiate them yet\n    this.i8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    this.i16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    this.i32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    this.i64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ClampedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    this.u16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    this.u32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    this.u64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    this.f32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    this.f64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float64Array, ElementKind.CLASS_PROTOTYPE);\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\n          this.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\n          );\n        }\n        if (\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n        ) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n          );\n        }\n        thisPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          extendsNode.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let firstChar = name.charCodeAt(0);\n          if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n            this.registerConstantInteger(alias, Type.i32, i64_new(parseI32(name, 10)));\n          } else {\n            let elementsByName = this.elementsByName;\n            let element = elementsByName.get(name);\n            if (element) {\n              if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\n              elementsByName.set(alias, element);\n            }\n            else throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // register stdlib components\n    this.arrayPrototype = <ClassPrototype>this.require(CommonSymbols.Array, ElementKind.CLASS_PROTOTYPE);\n    this.fixedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.FixedArray, ElementKind.CLASS_PROTOTYPE);\n    this.setPrototype = <ClassPrototype>this.require(CommonSymbols.Set, ElementKind.CLASS_PROTOTYPE);\n    this.mapPrototype = <ClassPrototype>this.require(CommonSymbols.Map, ElementKind.CLASS_PROTOTYPE);\n    this.abortInstance = this.requireFunction(CommonSymbols.abort);\n    this.allocInstance = this.requireFunction(CommonSymbols.alloc);\n    this.reallocInstance = this.requireFunction(CommonSymbols.realloc);\n    this.freeInstance = this.requireFunction(CommonSymbols.free);\n    this.retainInstance = this.requireFunction(CommonSymbols.retain);\n    this.releaseInstance = this.requireFunction(CommonSymbols.release);\n    this.collectInstance = this.requireFunction(CommonSymbols.collect);\n    this.typeinfoInstance = this.requireFunction(CommonSymbols.typeinfo);\n    this.instanceofInstance = this.requireFunction(CommonSymbols.instanceof_);\n    this.visitInstance = this.requireFunction(CommonSymbols.visit);\n    this.allocArrayInstance = this.requireFunction(CommonSymbols.allocArray);\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    for (let file of this.filesByName.values()) {\n      let exports = file.exports;\n      if (!(file.source.isEntry && exports)) continue;\n      for (let element of exports.values()) this.markModuleExport(element);\n    }\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookupGlobal(name);\n    if (!element) throw new Error(\"missing \" + name);\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\n    return element;\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  private requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Requires that a non-generic global function is present and returns it. */\n  private requireFunction(name: string): Function {\n    var prototype = this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    {\n      let members = element.members;\n      if (members) for (let member of members.values()) this.markModuleExport(member);\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerNativeTypeClass(typeKind: TypeKind, className: string): void {\n    assert(!this.typeClasses.has(typeKind));\n    var element = this.lookupGlobal(className);\n    if (element) {\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      let classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n      if (classElement) this.typeClasses.set(typeKind, classElement);\n    }\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let actual = elementsByName.get(name)!;\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (actual !== element) {\n        let merged = tryMerge(elementsByName.get(name)!, element);\n        if (!merged) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, name\n          );\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name);\n    return null;\n  }\n\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\n  requireGlobal(name: string): Element {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name)!;\n    throw new Error(\"missing global\");\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n         ? filesByName.get(foreignPath)!\n         : filesByName.has(foreignPathAlt)\n         ? filesByName.get(foreignPathAlt)!\n         : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = fileQueuedExports.get(foreignName)!;\n          if (queuedExport.foreignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExport.foreignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = decoratorNameToKind(decorator.name);\n        let flag = decoratorKindToFlag(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.SEALED |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return;\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      // cannot implement interfaces when unmanaged\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n      } else if (numImplementsTypes) {\n        // remember classes that implement interfaces\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning( // TODO: not yet supported\n            DiagnosticCode.Operation_not_supported,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(element);\n      }\n    }\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators,\n          (declaration.is(CommonFlags.READONLY)\n            ? DecoratorFlags.INLINE\n            : DecoratorFlags.NONE\n          ) | DecoratorFlags.LAZY | DecoratorFlags.UNSAFE\n        ),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, DecoratorFlags.UNSAFE)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let kind = operatorKindFromDecorator(\n                  decorator.decoratorKind,\n                  (<StringLiteralExpression>firstArg).value\n                );\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode.Operation_not_supported,\n                    firstArg.range\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(10)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name)!;\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name);\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = assert(statement.internalPath); // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** SO far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\n      queuedImports.push(new QueuedImport(\n        parent,\n        statement.namespaceName,\n        null, // indicates import *\n        statement.internalPath,\n        statement.internalPath + INDEX_SUFFIX\n      ));\n    } else {\n      // import \"./foo\"\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, true);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      if (parent.kind == ElementKind.FILE && (<File>parent).source.isEntry) {\n        validDecorators |= DecoratorFlags.START;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return;\n    if (element.hasDecorator(DecoratorFlags.START)) {\n      if (this.explicitStartFunction) {\n        this.error(\n          DiagnosticCode.Module_cannot_have_multiple_start_functions,\n          assert(findDecorator(DecoratorKind.START, declaration.decorators)).range\n        );\n      } else this.explicitStartFunction = element;\n    }\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return;\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // retain original parent\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is the explicit start function. */\n  START = 1 << 10,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 11\n}\n\n/** Translates a decorator kind to the respective decorator flag. */\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\n  switch (kind) {\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n    case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n    case DecoratorKind.START: return DecoratorFlags.START;\n    case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n    default: return DecoratorFlags.NONE;\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\n    while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members && members.has(name)) return members.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let actual = members.get(name)!;\n      if (actual.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(actual, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return ElementKind[this.kind] + \":\" + this.internalName;\n  }\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.isLibrary) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports && exports.has(name)) return exports.get(name)!;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element): Namespace {\n    var ns = new Namespace(\n      name,\n      parent,\n      this.program.makeNativeNamespaceDeclaration(name)\n    );\n    var exports = this.exports;\n    if (exports) {\n      for (let [memberName, member] of exports) {\n        ns.add(memberName, member);\n      }\n    }\n    return ns;\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): CommonTypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): CommonTypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: I64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).value;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated signature node. */\n  get signatureNode(): SignatureNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n  /** Counting id of autorelease variables. */\n  nextAutoreleaseId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    this.type = Type.u32.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (this.is(CommonFlags.INSTANCE)) {\n        let local = new Local(\n          CommonSymbols.this_,\n          localIndex++,\n          assert(signature.thisType),\n          this\n        );\n        this.localsByName.set(CommonSymbols.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration || this.program.makeNativeVariableDeclaration(localName)\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return locals.get(name);\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program,\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      __s = \"sig:\" + signature.toSignatureString(),\n      __s,\n      program,\n      program.nativeFile\n    );\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = Type.u32.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): CommonTypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      prototype.program.makeNativeVariableDeclaration(\n        prototype.name,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE\n      )\n    );\n    this.prototype = prototype;\n    registerConcreteElement(this.program, this);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): TypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): TypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    do if (current === basePtototype) return true;\n    while (current = current.basePrototype);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let merged = tryMerge(instanceMembers.get(name)!, element);\n      if (!merged) {\n        this.program.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          element.identifierNode.range, element.identifierNode.text\n        );\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\nconst enum AcyclicState {\n  UNKNOWN,\n  ACYCLIC,\n  NOT_ACYCLIC\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Remembers acyclic state. */\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY &&\n        (<Property>lengthField).getterInstance !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    /** Base class, if derived. */\n    base: Class | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(program.options.usizeType.asClass(this));\n    this.base = base;\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters && typeParameters.length) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\n    var field = this.lookupInSelf(name);\n    if (field && field.kind == ElementKind.FIELD) {\n      let offset = baseOffset + (<Field>field).memoryOffset;\n      switch ((<Field>field).type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          assert(!this.program.options.isWasm64); // TODO\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F32: {\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do if (current.prototype === extendedPrototype) return current.typeArguments;\n    while (current = current.base);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    switch (current.prototype) {\n      case program.i8ArrayPrototype: return Type.i8;\n      case program.i16ArrayPrototype: return Type.i16;\n      case program.i32ArrayPrototype: return Type.i32;\n      case program.i64ArrayPrototype: return Type.i64;\n      case program.u8ArrayPrototype:\n      case program.u8ClampedArrayPrototype: return Type.u8;\n      case program.u16ArrayPrototype: return Type.u16;\n      case program.u32ArrayPrototype: return Type.u32;\n      case program.u64ArrayPrototype: return Type.u64;\n      case program.f32ArrayPrototype: return Type.f32;\n      case program.f64ArrayPrototype: return Type.f64;\n      case program.arrayPrototype: return assert(this.getTypeArgumentsTo(program.arrayPrototype))[0];\n      default: assert(false);\n    }\n    return Type.void;\n  }\n\n  /** Tests if this class is inherently acyclic. */\n  get isAcyclic(): bool {\n    var acyclic = this._acyclic;\n    if (acyclic == AcyclicState.UNKNOWN) {\n      let hasCycle = this.cyclesTo(this);\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\n    }\n    return acyclic == AcyclicState.ACYCLIC;\n  }\n\n  /** Tests if this class potentially forms a reference cycle to another one. */\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\n    //\n    // - scalars\n    // - references to classes that are both acyclic and final (here: Java); and\n    // - arrays (in our case: also sets, maps) of either of the above\n    //\n    // Our implementation, however, treats all objects that do not reference themselves directly\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\n\n    if (except.has(this)) return false;\n    except.add(this); // don't recurse indefinitely\n\n    // Find out if any field references 'other' directly or indirectly\n    var current: Class | null;\n    var members = this.members;\n    if (members) {\n      for (let member of members.values()) {\n        if (\n          member.kind == ElementKind.FIELD &&\n          (current = (<Field>member).type.classReference) !== null &&\n          (\n            current === other ||\n            current.cyclesTo(other, except)\n          )\n        ) return true;\n      }\n    }\n\n    // Do the same for non-field data\n    var basePrototype: ClassPrototype | null;\n\n    // Array<T->other?>\n    if ((basePrototype = this.program.arrayPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Set<K->other?>\n    } else if ((basePrototype = this.program.setPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Map<K->other?,V->other?>\n    } else if ((basePrototype = this.program.mapPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 2);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n      if (\n        (current = typeArguments[1].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n    }\n    return false;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype { // FIXME\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    nameInclTypeParameters: string,\n    prototype: InterfacePrototype,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      base,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  assert(!newer.members);\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    for (let [memberName, member] of srcMembers) {\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport { Target } from \"./common\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\nexport enum NativeType {\n  None = _BinaryenTypeNone(),\n  I32  = _BinaryenTypeInt32(),\n  I64  = _BinaryenTypeInt64(),\n  F32  = _BinaryenTypeFloat32(),\n  F64  = _BinaryenTypeFloat64(),\n  V128 = _BinaryenTypeVec128(),\n  Unreachable = _BinaryenTypeUnreachable(),\n  Auto = _BinaryenTypeAuto()\n}\n\nexport enum FeatureFlags {\n  Atomics = _BinaryenFeatureAtomics(),\n  MutableGloabls = _BinaryenFeatureMutableGlobals(),\n  NontrappingFPToInt = _BinaryenFeatureNontrappingFPToInt(),\n  SIMD128 = _BinaryenFeatureSIMD128(),\n  BulkMemory = _BinaryenFeatureBulkMemory(),\n  SignExt = _BinaryenFeatureSignExt(),\n  ExceptionHandling = _BinaryenFeatureExceptionHandling()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  LocalGet = _BinaryenLocalGetId(),\n  LocalSet = _BinaryenLocalSetId(),\n  GlobalGet = _BinaryenGlobalGetId(),\n  GlobalSet = _BinaryenGlobalSetId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicNotify = _BinaryenAtomicNotifyId(),\n  SIMDExtract = _BinaryenSIMDExtractId(),\n  SIMDReplace = _BinaryenSIMDReplaceId(),\n  SIMDShuffle = _BinaryenSIMDShuffleId(),\n  SIMDBitselect = _BinaryenSIMDBitselectId(),\n  SIMDShift = _BinaryenSIMDShiftId(),\n  MemoryInit = _BinaryenMemoryInitId(),\n  DataDrop = _BinaryenDataDropId(),\n  MemoryCopy = _BinaryenMemoryCopyId(),\n  MemoryFill = _BinaryenMemoryFillId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64(),\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n\n  // see: https://github.com/WebAssembly/simd\n  SplatVecI8x16 = _BinaryenSplatVecI8x16(),\n  SplatVecI16x8 = _BinaryenSplatVecI16x8(),\n  SplatVecI32x4 = _BinaryenSplatVecI32x4(),\n  SplatVecI64x2 = _BinaryenSplatVecI64x2(),\n  SplatVecF32x4 = _BinaryenSplatVecF32x4(),\n  SplatVecF64x2 = _BinaryenSplatVecF64x2(),\n  NotVec128 = _BinaryenNotVec128(),\n  NegVecI8x16 = _BinaryenNegVecI8x16(),\n  AnyTrueVecI8x16 = _BinaryenAnyTrueVecI8x16(),\n  AllTrueVecI8x16 = _BinaryenAllTrueVecI8x16(),\n  NegVecI16x8 = _BinaryenNegVecI16x8(),\n  AnyTrueVecI16x8 = _BinaryenAnyTrueVecI16x8(),\n  AllTrueVecI16x8 = _BinaryenAllTrueVecI16x8(),\n  NegVecI32x4 = _BinaryenNegVecI32x4(),\n  AnyTrueVecI32x4 = _BinaryenAnyTrueVecI32x4(),\n  AllTrueVecI32x4 = _BinaryenAllTrueVecI32x4(),\n  NegVecI64x2 = _BinaryenNegVecI64x2(),\n  AnyTrueVecI64x2 = _BinaryenAnyTrueVecI64x2(),\n  AllTrueVecI64x2 = _BinaryenAllTrueVecI64x2(),\n  AbsVecF32x4 = _BinaryenAbsVecF32x4(),\n  NegVecF32x4 = _BinaryenNegVecF32x4(),\n  SqrtVecF32x4 = _BinaryenSqrtVecF32x4(),\n  AbsVecF64x2 = _BinaryenAbsVecF64x2(),\n  NegVecF64x2 = _BinaryenNegVecF64x2(),\n  SqrtVecF64x2 = _BinaryenSqrtVecF64x2(),\n  TruncSatSVecF32x4ToVecI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\n  TruncSatUVecF32x4ToVecI32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\n  TruncSatSVecF64x2ToVecI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\n  TruncSatUVecF64x2ToVecI64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\n  ConvertSVecI32x4ToVecF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\n  ConvertUVecI32x4ToVecF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\n  ConvertSVecI64x2ToVecF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\n  ConvertUVecI64x2ToVecF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2()\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64(),\n\n  // see: https://github.com/WebAssembly/simd\n  EqVecI8x16 = _BinaryenEqVecI8x16(),\n  NeVecI8x16 = _BinaryenNeVecI8x16(),\n  LtSVecI8x16 = _BinaryenLtSVecI8x16(),\n  LtUVecI8x16 = _BinaryenLtUVecI8x16(),\n  LeSVecI8x16 = _BinaryenLeSVecI8x16(),\n  LeUVecI8x16 = _BinaryenLeUVecI8x16(),\n  GtSVecI8x16 = _BinaryenGtSVecI8x16(),\n  GtUVecI8x16 = _BinaryenGtUVecI8x16(),\n  GeSVecI8x16 = _BinaryenGeSVecI8x16(),\n  GeUVecI8x16 = _BinaryenGeUVecI8x16(),\n  EqVecI16x8 = _BinaryenEqVecI16x8(),\n  NeVecI16x8 = _BinaryenNeVecI16x8(),\n  LtSVecI16x8 = _BinaryenLtSVecI16x8(),\n  LtUVecI16x8 = _BinaryenLtUVecI16x8(),\n  LeSVecI16x8 = _BinaryenLeSVecI16x8(),\n  LeUVecI16x8 = _BinaryenLeUVecI16x8(),\n  GtSVecI16x8 = _BinaryenGtSVecI16x8(),\n  GtUVecI16x8 = _BinaryenGtUVecI16x8(),\n  GeSVecI16x8 = _BinaryenGeSVecI16x8(),\n  GeUVecI16x8 = _BinaryenGeUVecI16x8(),\n  EqVecI32x4 = _BinaryenEqVecI32x4(),\n  NeVecI32x4 = _BinaryenNeVecI32x4(),\n  LtSVecI32x4 = _BinaryenLtSVecI32x4(),\n  LtUVecI32x4 = _BinaryenLtUVecI32x4(),\n  LeSVecI32x4 = _BinaryenLeSVecI32x4(),\n  LeUVecI32x4 = _BinaryenLeUVecI32x4(),\n  GtSVecI32x4 = _BinaryenGtSVecI32x4(),\n  GtUVecI32x4 = _BinaryenGtUVecI32x4(),\n  GeSVecI32x4 = _BinaryenGeSVecI32x4(),\n  GeUVecI32x4 = _BinaryenGeUVecI32x4(),\n  EqVecF32x4 = _BinaryenEqVecF32x4(),\n  NeVecF32x4 = _BinaryenNeVecF32x4(),\n  LtVecF32x4 = _BinaryenLtVecF32x4(),\n  LeVecF32x4 = _BinaryenLeVecF32x4(),\n  GtVecF32x4 = _BinaryenGtVecF32x4(),\n  GeVecF32x4 = _BinaryenGeVecF32x4(),\n  EqVecF64x2 = _BinaryenEqVecF64x2(),\n  NeVecF64x2 = _BinaryenNeVecF64x2(),\n  LtVecF64x2 = _BinaryenLtVecF64x2(),\n  LeVecF64x2 = _BinaryenLeVecF64x2(),\n  GtVecF64x2 = _BinaryenGtVecF64x2(),\n  GeVecF64x2 = _BinaryenGeVecF64x2(),\n  AndVec128 = _BinaryenAndVec128(),\n  OrVec128 = _BinaryenOrVec128(),\n  XorVec128 = _BinaryenXorVec128(),\n  AddVecI8x16 = _BinaryenAddVecI8x16(),\n  AddSatSVecI8x16 = _BinaryenAddSatSVecI8x16(),\n  AddSatUVecI8x16 = _BinaryenAddSatUVecI8x16(),\n  SubVecI8x16 = _BinaryenSubVecI8x16(),\n  SubSatSVecI8x16 = _BinaryenSubSatSVecI8x16(),\n  SubSatUVecI8x16 = _BinaryenSubSatUVecI8x16(),\n  MulVecI8x16 = _BinaryenMulVecI8x16(),\n  AddVecI16x8 = _BinaryenAddVecI16x8(),\n  AddSatSVecI16x8 = _BinaryenAddSatSVecI16x8(),\n  AddSatUVecI16x8 = _BinaryenAddSatUVecI16x8(),\n  SubVecI16x8 = _BinaryenSubVecI16x8(),\n  SubSatSVecI16x8 = _BinaryenSubSatSVecI16x8(),\n  SubSatUVecI16x8 = _BinaryenSubSatUVecI16x8(),\n  MulVecI16x8 = _BinaryenMulVecI16x8(),\n  AddVecI32x4 = _BinaryenAddVecI32x4(),\n  SubVecI32x4 = _BinaryenSubVecI32x4(),\n  MulVecI32x4 = _BinaryenMulVecI32x4(),\n  AddVecI64x2 = _BinaryenAddVecI64x2(),\n  SubVecI64x2 = _BinaryenSubVecI64x2(),\n  AddVecF32x4 = _BinaryenAddVecF32x4(),\n  SubVecF32x4 = _BinaryenSubVecF32x4(),\n  MulVecF32x4 = _BinaryenMulVecF32x4(),\n  DivVecF32x4 = _BinaryenDivVecF32x4(),\n  MinVecF32x4 = _BinaryenMinVecF32x4(),\n  MaxVecF32x4 = _BinaryenMaxVecF32x4(),\n  AddVecF64x2 = _BinaryenAddVecF64x2(),\n  SubVecF64x2 = _BinaryenSubVecF64x2(),\n  MulVecF64x2 = _BinaryenMulVecF64x2(),\n  DivVecF64x2 = _BinaryenDivVecF64x2(),\n  MinVecF64x2 = _BinaryenMinVecF64x2(),\n  MaxVecF64x2 = _BinaryenMaxVecF64x2()\n}\n\nexport enum HostOp {\n  MemorySize = _BinaryenMemorySize(),\n  MemoryGrow = _BinaryenMemoryGrow(),\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneSVecI8x16 = _BinaryenExtractLaneSVecI8x16(),\n  ExtractLaneUVecI8x16 = _BinaryenExtractLaneUVecI8x16(),\n  ExtractLaneSVecI16x8 = _BinaryenExtractLaneSVecI16x8(),\n  ExtractLaneUVecI16x8 = _BinaryenExtractLaneUVecI16x8(),\n  ExtractLaneVecI32x4 = _BinaryenExtractLaneVecI32x4(),\n  ExtractLaneVecI64x2 = _BinaryenExtractLaneVecI64x2(),\n  ExtractLaneVecF32x4 = _BinaryenExtractLaneVecF32x4(),\n  ExtractLaneVecF64x2 = _BinaryenExtractLaneVecF64x2(),\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneVecI8x16 = _BinaryenReplaceLaneVecI8x16(),\n  ReplaceLaneVecI16x8 = _BinaryenReplaceLaneVecI16x8(),\n  ReplaceLaneVecI32x4 = _BinaryenReplaceLaneVecI32x4(),\n  ReplaceLaneVecI64x2 = _BinaryenReplaceLaneVecI64x2(),\n  ReplaceLaneVecF32x4 = _BinaryenReplaceLaneVecF32x4(),\n  ReplaceLaneVecF64x2 = _BinaryenReplaceLaneVecF64x2()\n}\n\nexport enum SIMDShiftOp {\n  ShlVecI8x16 = _BinaryenShlVecI8x16(),\n  ShrSVecI8x16 = _BinaryenShrSVecI8x16(),\n  ShrUVecI8x16 = _BinaryenShrUVecI8x16(),\n  ShlVecI16x8 = _BinaryenShlVecI16x8(),\n  ShrSVecI16x8 = _BinaryenShrSVecI16x8(),\n  ShrUVecI16x8 = _BinaryenShrUVecI16x8(),\n  ShlVecI32x4 = _BinaryenShlVecI32x4(),\n  ShrSVecI32x4 = _BinaryenShrSVecI32x4(),\n  ShrUVecI32x4 = _BinaryenShrUVecI32x4(),\n  ShlVecI64x2 = _BinaryenShlVecI64x2(),\n  ShrSVecI64x2 = _BinaryenShrSVecI64x2(),\n  ShrUVecI64x2 = _BinaryenShrUVecI64x2()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private lit: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.lit = memory.allocate(_BinaryenSizeofLiteral());\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.lit = memory.allocate(_BinaryenSizeofLiteral());\n      return module;\n    } finally {\n      memory.free(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunctionType(this.ref, cStr);\n  }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) store<u8>(out + i, bytes[i]);\n    _BinaryenLiteralVec128(out, out);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  host(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  local_get(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenLocalGet(this.ref, index, type);\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenLocalTee(this.ref, index, value);\n  }\n\n  global_get(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    if (type < NativeType.None || type > NativeType.V128) throw new Error(\"here: \" + type);\n    return _BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = this.allocStringCached(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(typeName);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  unreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return _BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    try {\n      return _BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  simd_bitselect(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    cond: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDBitselect(this.ref, vec1, vec2, cond);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    _BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n  }\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Array<i8>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocI32Array(offs);\n    var cArr4 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\n    } finally {\n      memory.free(cArr4);\n      memory.free(cArr3);\n      memory.free(cArr2);\n      memory.free(cArr1);\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\n    }\n  }\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[]\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  getOptimizeLevel(): i32 {\n    return _BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return _BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  getFeatures(): BinaryenFeatureFlags {\n    return _BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: BinaryenFeatureFlags): void {\n    _BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\n    var previousDebugInfo = _BinaryenGetDebugInfo();\n    _BinaryenSetOptimizeLevel(4);\n    _BinaryenSetShrinkLevel(0);\n    _BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = _BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      this.cachedPrecomputeNames = names = allocI32Array([ this.allocStringCached(\"precompute\") ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\n    expr = _BinaryenFunctionGetBody(func);\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\n    _BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(_BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) memory.free(cStr);\n      if (binaryPtr) memory.free(binaryPtr);\n      if (sourceMapPtr) memory.free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str == null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\n    this.cachedStrings = new Map();\n    memory.free(this.lit);\n    memory.free(this.cachedPrecomputeNames);\n    this.cachedPrecomputeNames = 0;\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n        switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.i32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.i64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.f32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.f64(_BinaryenConstGetValueF64(expr));\n          }\n          case NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return _BinaryenLocalGet(this.ref,\n          _BinaryenLocalGetGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = _BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGlobalGet(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return _BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return _BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return _BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return _BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenCallGetOperand(expr, index);\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\n// export function hasSideEffects(expr: ExpressionRef): bool {\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\n//     case ExpressionId.GetLocal:\n//     case ExpressionId.GetGlobal:\n//     case ExpressionId.Const:\n//     case ExpressionId.Nop:\n//     case ExpressionId.Unreachable: {\n//       return false;\n//     }\n//     case ExpressionId.Block: {\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n//       }\n//       return false;\n//     }\n//     case ExpressionId.If: {\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n//     }\n//     case ExpressionId.Unary: {\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\n//     }\n//     case ExpressionId.Binary: {\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\n//     }\n//     case ExpressionId.Drop: {\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\n//     }\n//     case ExpressionId.Select: {\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\n//     }\n//   }\n//   return true;\n// }\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = memory.allocate(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = memory.allocate(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (_BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\n\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n\n/** Traverses all expression members of an expression, calling the given visitor. */\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.Block: {\n      for (let i = 0, n = _BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n        visit(_BinaryenBlockGetChild(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      visit(_BinaryenIfGetCondition(expr), data);\n      visit(_BinaryenIfGetIfTrue(expr), data);\n      let ifFalse = _BinaryenIfGetIfFalse(expr);\n      if (ifFalse) visit(ifFalse, data);\n      break;\n    }\n    case ExpressionId.Loop: {\n      visit(_BinaryenLoopGetBody(expr), data);\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = _BinaryenBreakGetCondition(expr);\n      if (condition) visit(condition, data);\n      break;\n    }\n    case ExpressionId.Switch: {\n      visit(_BinaryenSwitchGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Call: {\n      for (let i = 0, n = _BinaryenCallGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenCallGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      for (let i = 0, n = _BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenCallIndirectGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      visit(_BinaryenLocalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      visit(_BinaryenGlobalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Load: {\n      visit(_BinaryenLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.Store: {\n      visit(_BinaryenStoreGetPtr(expr), data);\n      visit(_BinaryenStoreGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      visit(_BinaryenAtomicRMWGetPtr(expr), data);\n      visit(_BinaryenAtomicRMWGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      visit(_BinaryenAtomicCmpxchgGetPtr(expr), data);\n      visit(_BinaryenAtomicCmpxchgGetExpected(expr), data);\n      visit(_BinaryenAtomicCmpxchgGetReplacement(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      visit(_BinaryenAtomicWaitGetPtr(expr), data);\n      visit(_BinaryenAtomicWaitGetExpected(expr), data);\n      visit(_BinaryenAtomicWaitGetTimeout(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      visit(_BinaryenAtomicNotifyGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      visit(_BinaryenSIMDExtractGetVec(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      visit(_BinaryenSIMDReplaceGetVec(expr), data);\n      visit(_BinaryenSIMDReplaceGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      visit(_BinaryenSIMDShuffleGetLeft(expr), data);\n      visit(_BinaryenSIMDShuffleGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDBitselect: {\n      visit(_BinaryenSIMDBitselectGetLeft(expr), data);\n      visit(_BinaryenSIMDBitselectGetRight(expr), data);\n      visit(_BinaryenSIMDBitselectGetCond(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      visit(_BinaryenSIMDShiftGetVec(expr), data);\n      visit(_BinaryenSIMDShiftGetShift(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      visit(_BinaryenMemoryInitGetDest(expr), data);\n      visit(_BinaryenMemoryInitGetOffset(expr), data);\n      visit(_BinaryenMemoryInitGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      visit(_BinaryenMemoryCopyGetDest(expr), data);\n      visit(_BinaryenMemoryCopyGetSource(expr), data);\n      visit(_BinaryenMemoryCopyGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      visit(_BinaryenMemoryFillGetDest(expr), data);\n      visit(_BinaryenMemoryFillGetValue(expr), data);\n      visit(_BinaryenMemoryFillGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      visit(_BinaryenUnaryGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Binary: {\n      visit(_BinaryenBinaryGetLeft(expr), data);\n      visit(_BinaryenBinaryGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.Select: {\n      visit(_BinaryenSelectGetIfTrue(expr), data);\n      visit(_BinaryenSelectGetIfFalse(expr), data);\n      visit(_BinaryenSelectGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Drop: {\n      visit(_BinaryenDropGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Return: {\n      visit(_BinaryenReturnGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Host: {\n      for (let i = 0, n = _BinaryenHostGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenHostGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    default: assert(false);\n  }\n  return true;\n}\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  CommonSymbols,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  TYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n  SIGNATURE,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.ASSERTION: // if kind=NONNULL\n    case NodeKind.CALL:\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PARENTHESIZED:\n    case NodeKind.PROPERTYACCESS:\n    case NodeKind.SUPER: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n\n  // types\n\n  static createTypeName(\n    name: IdentifierExpression,\n    range: Range\n  ): TypeName {\n    var typeName = new TypeName();\n    typeName.range = range;\n    typeName.identifier = name;\n    typeName.next = null;\n    return typeName;\n  }\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\n  }\n\n  static createType(\n    name: TypeName,\n    typeArguments: CommonTypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): TypeNode {\n    var type = new TypeNode();\n    type.range = range;\n    type.name = name;\n    type.typeArguments = typeArguments;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): TypeNode {\n    return Node.createType(\n      Node.createSimpleTypeName(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: TypeNode | null,\n    defaultType: TypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.extendsType = extendsType;\n    elem.defaultType = defaultType;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: CommonTypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  static createSignature(\n    parameters: ParameterNode[],\n    returnType: CommonTypeNode,\n    explicitThisType: TypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): SignatureNode {\n    var sig = new SignatureNode();\n    sig.range = range;\n    sig.parameters = parameters;\n    sig.returnType = returnType;\n    sig.explicitThisType = explicitThisType;\n    sig.isNullable = isNullable;\n    return sig;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.arguments = args;\n    stmt.decoratorKind = decoratorNameToKind(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name; // TODO: extract from range\n    expr.symbol = name; // TODO: Symbol.for(name)\n    expr.isQuoted = isQuoted;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements;\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: CommonTypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression;\n    expr.toType = toType;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left;\n    expr.right = right;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions;\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.elementExpression = element;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: CommonTypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.isType = isType;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.property = property;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition;\n    expr.ifThen = ifThen;\n    expr.ifElse = ifElse;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: TypeNode | null, // can't be a function\n    implementsTypes: TypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.implementsTypes = implementsTypes;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement;\n    stmt.condition = condition;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.values = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.members = members;\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n          normalizedPath = LIBRARY_PREFIX + normalizedPath;\n        }\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    stmt.isDeclare = isDeclare;\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.externalName = externalName;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.localName = name;\n    if (!externalName) externalName = name;\n    elem.exportedName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.ifTrue = ifTrue;\n    stmt.ifFalse = ifFalse;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls;\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) {\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else {\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.foreignName = foreignName;\n    if (!name) name = foreignName;\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: TypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.type = type;\n    stmt.initializer = initializer;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer;\n    stmt.condition = condition;\n    stmt.incrementor = incrementor;\n    stmt.statement = statement;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    stmt.arrowKind = arrowKind;\n    return stmt;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: TypeNode,\n    valueType: CommonTypeNode,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var elem = new IndexSignatureDeclaration();\n    elem.range = range;\n    elem.keyType = keyType;\n    elem.valueType = valueType;\n    return elem;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.cases = cases;\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label;\n    elem.statements = statements;\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    stmt.catchVariable = catchVariable;\n    stmt.catchStatements = catchStatements;\n    stmt.finallyStatements = finallyStatements;\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: CommonTypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.type = alias;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.declarations = declarations;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.statement = statement;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class CommonTypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  kind = NodeKind.TYPENAME;\n\n  /** Identifier of this part. */\n  identifier: IdentifierExpression;\n  /** Next part of the type name or `null` if this is the last part. */\n  next: TypeName | null;\n}\n\n/** Represents a type annotation. */\nexport class TypeNode extends CommonTypeNode {\n  kind = NodeKind.TYPE;\n\n  /** Type name. */\n  name: TypeName;\n  /** Type argument references. */\n  typeArguments: CommonTypeNode[] | null;\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: TypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: CommonTypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents a function signature. */\nexport class SignatureNode extends CommonTypeNode {\n  kind = NodeKind.SIGNATURE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: CommonTypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: TypeNode | null; // can't be a function\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  START,\n  UNSAFE\n}\n\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\n  // @global, @inline, @operator, @sealed, @unmanaged\n  if (name.kind == NodeKind.IDENTIFIER) {\n    let nameStr = (<IdentifierExpression>name).text;\n    assert(nameStr.length);\n    switch (nameStr.charCodeAt(0)) {\n      case CharCode.b: {\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n        break;\n      }\n      case CharCode.e: {\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n        break;\n      }\n      case CharCode.g: {\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n        break;\n      }\n      case CharCode.i: {\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\n        break;\n      }\n      case CharCode.l: {\n        if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n        break;\n      }\n      case CharCode.o: {\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n        break;\n      }\n      case CharCode.s: {\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n        if (nameStr == \"start\") return DecoratorKind.START;\n        break;\n      }\n      case CharCode.u: {\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n        if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n        break;\n      }\n    }\n  } else if (\n    name.kind == NodeKind.PROPERTYACCESS &&\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\n  ) {\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\n    assert(nameStr.length);\n    let propStr = (<PropertyAccessExpression>name).property.text;\n    assert(propStr.length);\n    // @operator.binary, @operator.prefix, @operator.postfix\n    if (nameStr == \"operator\") {\n      switch (propStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n          break;\n        }\n        case CharCode.p: {\n          switch (propStr) {\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n          }\n          break;\n        }\n      }\n    }\n  }\n  return DecoratorKind.CUSTOM;\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n  /** Symbol. */\n  symbol: string; // TODO: symbol\n  /** Whether quoted or not. */\n  isQuoted: bool;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS,\n  NONNULL\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: CommonTypeNode | null;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: CommonTypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n  symbol = CommonSymbols.constructor;\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: CommonTypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n  symbol = CommonSymbols.null_;\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n  symbol = CommonSymbols.super_;\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n  symbol = CommonSymbols.this_;\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n  symbol = CommonSymbols.true_;\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n  symbol = CommonSymbols.false_;\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** Default source. Usually imported from an entry file. */\n  DEFAULT,\n  /** Entry file. */\n  ENTRY,\n  /** Library file. */\n  LIBRARY\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Tests if this source is an entry file. */\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\n  /** Tests if this source is a stdlib file. */\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\n\n  /** Key type. */\n  keyType: TypeNode;\n  /** Value type. */\n  valueType: CommonTypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: CommonTypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Base class type being extended, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: TypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Local identifier. */\n  localName: IdentifierExpression;\n  /** Exported identifier. */\n  exportedName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a file export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n  /** Whether this is a declared export. */\n  isDeclare: bool;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: SignatureNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n  /** Arrow function kind, if applicable. */\n  arrowKind: ArrowKind;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return Node.createFunctionDeclaration(\n      this.name,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.decorators,\n      this.flags,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  foreignName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: CommonTypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: CommonTypeNode): bool {\n  if (type.kind == NodeKind.TYPE) {\n    let name = (<TypeNode>type).name;\n    return !(name.next || name.identifier.text.length);\n  }\n  return false;\n}\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10\n}\n\nconst v128_zero = new Uint8Array(16);\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\n    else if (target.is(TypeFlags.REFERENCE)) return false;\n    if (this.is(TypeFlags.INTEGER)) {\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(): string {\n    if (this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.internalName + \" | null\"\n          : classReference.internalName;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString() + \") | null\"\n          : signatureReference.toString();\n      }\n      assert(false);\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      // same naming scheme as Binaryen\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"j\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"j\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"d\";\n      case TypeKind.V128: return \"V\";\n      case TypeKind.VOID: return \"v\";\n      default: assert(false);\n    }\n    return \"i\";\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n\n  /** Constructs a new signature. */\n  constructor(\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    sb.push(returnType.toSignatureString());\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    return \"FUNCSIG$\" + sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(\"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString());\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics || new Array();\n\n    var end = this.end;\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (isDecimalDigit(chr)) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < end) {\n                chr = text.charCodeAt(this.pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    while (\n      ++this.pos < end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var end = this.end;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c)) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos + 1 < end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.x:\n        case CharCode.X:\n        case CharCode.b:\n        case CharCode.B:\n        case CharCode.o:\n        case CharCode.O: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.e || c == CharCode.E) return false;\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.x:\n        case CharCode.X: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b:\n        case CharCode.B: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o:\n        case CharCode.O: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    var sepEnd = start;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.e || c == CharCode.E) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 65536) >>> 10) + 0xD800,\n        ((value32 - 65536) & 1023) + 0xDC00\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow\n} from \"./flow\";\n\nimport {\n  SignatureNode,\n  ParameterKind,\n  CommonTypeNode,\n  NodeKind,\n  TypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonSymbols\n} from \"./common\";\n\nimport {\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token\n} from \"./tokenizer\";\n\nimport {\n  BuiltinSymbols\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: CommonTypeNode,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n\n    // handle signature\n    if (node.kind == NodeKind.SIGNATURE) {\n      let explicitThisType = (<SignatureNode>node).explicitThisType;\n      let thisType: Type | null = null;\n      if (explicitThisType) {\n        thisType = this.resolveType(\n          explicitThisType,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!thisType) return null;\n      }\n      let parameterNodes = (<SignatureNode>node).parameters;\n      let numParameters = parameterNodes.length;\n      let parameterTypes = new Array<Type>(numParameters);\n      let parameterNames = new Array<string>(numParameters);\n      let requiredParameters = 0;\n      let hasRest = false;\n      for (let i = 0; i < numParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        switch (parameterNode.parameterKind) {\n          case ParameterKind.DEFAULT: {\n            requiredParameters = i + 1;\n            break;\n          }\n          case ParameterKind.REST: {\n            assert(i == numParameters);\n            hasRest = true;\n            break;\n          }\n        }\n        let parameterTypeNode = parameterNode.type;\n        if (isTypeOmitted(parameterTypeNode)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              parameterTypeNode.range\n            );\n          }\n          return null;\n        }\n        let parameterType = this.resolveType(\n          parameterTypeNode,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!parameterType) return null;\n        parameterTypes[i] = parameterType;\n        parameterNames[i] = parameterNode.name.text;\n      }\n      let returnTypeNode = (<SignatureNode>node).returnType;\n      if (isTypeOmitted(returnTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnTypeNode.range\n          );\n        }\n        return null;\n      }\n      let returnType: Type | null;\n      if (returnTypeNode) {\n        returnType = this.resolveType(\n          returnTypeNode,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!returnType) return null;\n      } else {\n        returnType = Type.void;\n      }\n      let signature = new Signature(parameterTypes, returnType, thisType);\n      signature.parameterNames = parameterNames;\n      signature.requiredParameters = requiredParameters;\n      signature.hasRest = hasRest;\n      return node.isNullable ? signature.type.asNullable() : signature.type;\n    }\n\n    // now dealing with TypeNode\n    assert(node.kind == NodeKind.TYPE);\n    var typeNode = <TypeNode>node;\n    var typeName = typeNode.name;\n    var typeArgumentNodes = typeNode.typeArguments;\n    var possiblyPlaceholder = !typeName.next;\n\n    // look up in contextual type arguments if possibly a placeholder\n    if (possiblyPlaceholder) {\n      if (contextualTypeArguments && contextualTypeArguments.has(typeName.identifier.text)) {\n        let type = contextualTypeArguments.get(typeName.identifier.text)!;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                node.range, type.toString()\n              );\n            }\n          }\n          return type.asNullable();\n        }\n        return type;\n      }\n    }\n\n    // look up in context\n    var element = this.resolveTypeName(typeName, context, reportMode);\n    if (!element) return null;\n\n    // use shadow type if present (i.e. namespace sharing a type)\n    if (element.shadowType) {\n      element = element.shadowType;\n\n    } else {\n      // handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, element.name\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // handle classes\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          context,\n          makeMap<string,Type>(contextualTypeArguments), // don't inherit\n          node\n        ); // reports\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n\n      // shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = (<TypeDefinition>element).type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                typeNode.name.range, typeName.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // handle special native type\n      if (possiblyPlaceholder && typeName.identifier.text == CommonSymbols.native) {\n        if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              typeNode.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n            );\n          }\n          return null;\n        }\n        let typeArgument = this.resolveType(\n          typeArgumentNodes[0],\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!typeArgument) return null;\n        switch (typeArgument.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: return Type.i32;\n          case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n          case TypeKind.I64: return Type.i64;\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: return Type.u32;\n          case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n          case TypeKind.U64: return Type.u64;\n          case TypeKind.F32: return Type.f32;\n          case TypeKind.F64: return Type.f64;\n          case TypeKind.V128: return Type.v128;\n          case TypeKind.VOID: return Type.void;\n          default: assert(false);\n        }\n      }\n\n      // resolve normally\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          context,\n          contextualTypeArguments = makeMap(contextualTypeArguments), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          typeNode.range, typeName.identifier.text\n        );\n        // recoverable\n      }\n      let type = this.resolveType(\n        (<TypeDefinition>element).typeNode,\n        element,\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (!type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              typeNode.name.range, typeName.identifier.text\n            );\n          }\n        } else {\n          return type.asNullable();\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        typeNode.name.range, typeName.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    typeName: TypeName,\n    /** Relative context. */\n    context: Element,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = context.lookup(typeName.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          typeName.range, typeName.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = typeName;\n    var next = typeName.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Actual type parameter nodes. */\n    typeParameters: TypeParameterNode[],\n    /** Type arguments provided. */\n    typeArgumentNodes: CommonTypeNode[] | null,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      this.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        argumentCount\n          ? Range.join(\n              (<TypeNode[]>typeArgumentNodes)[0].range,\n              (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n            )\n          : assert(alternativeReportNode).range,\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\n        argumentCount.toString(10)\n      );\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            (<TypeNode[]>typeArgumentNodes)[i],\n            context,\n            contextualTypeArguments,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            context,\n            contextualTypeArguments,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      contextualTypeArguments.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves an identifier to the program element it refers to. */\n  resolveIdentifier(\n    /** The expression to resolve. */\n    identifier: IdentifierExpression,\n    /** Optional flow to search for scoped locals. */\n    flow: Flow | null,\n    /** Optional context to search. */\n    context: Element | null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var name = identifier.text;\n    var element: Element | null;\n    if (flow) {\n      if (element = flow.lookup(name)) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return element;\n      }\n    }\n    if (context) {\n      if (element = context.lookup(name)) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return element;\n      }\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        identifier.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field. */\n  ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var typeNode = global.typeNode;\n    if (!typeNode) return false;\n    var type = this.resolveType( // reports\n      typeNode,\n      global.parent,\n      null,\n      reportMode\n    );\n    if (!type) return false;\n    global.setType(type);\n    return true;\n  }\n\n  /** Resolves a property access expression to the program element it refers to. */\n  resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    propertyAccess: PropertyAccessExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = propertyAccess.expression;\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = propertyAccess.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let typeClasses = this.program.typeClasses;\n          if (!type.is(TypeFlags.REFERENCE) && typeClasses.has(type.kind)) {\n            classReference = typeClasses.get(type.kind)!;\n          } else {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n            );\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static\n        let getterInstance = this.resolveFunction( // reports\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getterInstance) return null;\n        let classReference = getterInstance.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\n        let classReference = getterInstance.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.CLASS: { // property access on element access?\n        let elementExpression = this.currentElementExpression;\n        if (elementExpression) {\n          // let arrayType = this.program.determineBuiltinArrayType(<Class>target);\n          // if (!arrayType) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                elementExpression.range, (<Class>target).internalName\n              );\n              return null;\n            }\n            let arrayType = indexedGet.signature.returnType;\n          // }\n          if (!(target = arrayType.classReference)) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, arrayType.toString()\n            );\n            return null;\n          }\n        }\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        }\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          if (members && members.has(propertyName)) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members && members.has(propertyName)) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = null;\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      propertyAccess.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  /** Resolves an element access expression to the program element it refers to. */\n  resolveElementAccessExpression(\n    /** The expression to resolve. */\n    elementAccess: ElementAccessExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = elementAccess.expression;\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        if (target = type.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        // let arrayType = this.program.determineBuiltinArrayType(<Class>target);\n        // if (!arrayType) {\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n          if (!indexedGet) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                elementAccess.range, (<Class>target).internalName\n              );\n            }\n            return null;\n          }\n          let arrayType = indexedGet.signature.returnType;\n        // }\n        if (targetExpression.kind == NodeKind.ELEMENTACCESS) { // nested element access\n          if (target = arrayType.classReference) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = elementAccess.elementExpression;\n            return target;\n          }\n          return null;\n        }\n        this.currentThisExpression = targetExpression;\n        this.currentElementExpression = elementAccess.elementExpression;\n        return target;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        targetExpression.range\n      );\n    }\n    return null;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: I64,\n    /** Current contextual type. */\n    contextualType: Type\n  ): Type {\n    if (!contextualType.is(TypeFlags.REFERENCE)) {\n      // compile to contextualType if matching\n      switch (contextualType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n        case TypeKind.VOID: break; // best fitting below\n        default: assert(false);\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64;\n  }\n\n  /** Resolves any expression to the program element it refers to. */\n  resolveExpression(\n    /** The expression to resolve. */\n    expression: Expression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // simply skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(\n          <IdentifierExpression>expression,\n          flow, flow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      // TODO: everything else\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an assertion expression to the program element it refers to. */\n  resolveAssertionExpression(\n    /** The expression to resolve. */\n    expression: AssertionExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (expression.assertionKind == AssertionKind.NONNULL) {\n      return this.resolveExpression(\n        expression.expression,\n        flow,\n        contextualType,\n        reportMode\n      );\n    }\n    var type = this.resolveType(\n      assert(expression.toType), // must be set if not NONNULL\n      flow.actualFunction,\n      flow.contextualTypeArguments,\n      reportMode\n    );\n    if (!type) return null;\n    var element: Element | null = type.classReference;\n    if (!element) {\n      let signature = type.signatureReference;\n      if (!signature) return null;\n      element = signature.asFunctionTarget(this.program);\n    }\n    this.currentThisExpression = null;\n    this.currentElementExpression = null;\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to the program element it refers to. */\n  resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    expression: UnaryPrefixExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var operand = expression.operand;\n    // TODO: operator overloads\n    switch (expression.operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\n          let type = this.determineIntegerLiteralType(\n            i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value),\n            contextualType\n          );\n          let typeClasses = this.program.typeClasses;\n          return typeClasses.has(type.kind) ? typeClasses.get(type.kind)! : null;\n        }\n        return this.resolveExpression(\n          operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        return this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      case Token.EXCLAMATION: {\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(TypeKind.BOOL) ? typeClasses.get(TypeKind.BOOL)! : null;\n      }\n      case Token.TILDE: {\n        let resolvedOperand = this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n        if (!resolvedOperand) return null;\n        // TODO\n        break;\n      }\n      default: assert(false);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an unary postfix expression to the program element it refers to. */\n  resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    expression: UnaryPostfixExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // TODO: operator overloads\n    switch (expression.operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        return this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to the program element it refers to. */\n  resolveBinaryExpression(\n    /** The expression to resolve. */\n    expression: BinaryExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // TODO\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to the program element it refers to. */\n  resolveThisExpression(\n    /** The expression to resolve. */\n    expression: ThisExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      let thisLocal = flow.lookupLocal(CommonSymbols.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = flow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to the program element it refers to. */\n  resolveSuperExpression(\n    /** The expression to resolve. */\n    expression: SuperExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      let superLocal = flow.lookupLocal(CommonSymbols.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = flow.actualFunction.parent;\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a literal expression to the program element it refers to. */\n  resolveLiteralExpression(\n    /** The expression to resolve. */\n    expression: LiteralExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (expression.literalKind) {\n      case LiteralKind.INTEGER: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        let literalType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>expression).value,\n          contextualType\n        );\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\n      }\n      case LiteralKind.FLOAT: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        let literalType = contextualType == Type.f32 ? Type.f32 : Type.f64;\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\n      }\n      case LiteralKind.STRING: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        return this.program.stringInstance;\n      }\n      // TODO\n      // case LiteralKind.ARRAY:\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a call expression to the program element it refers to. */\n  resolveCallExpression(\n    /** The expression to resolve. */\n    expression: CallExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = expression.expression;\n    var target = this.resolveExpression( // reports\n      targetExpression,\n      flow,\n      contextualType,\n      reportMode\n    );\n    if (!target) return null;\n    if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      // `unchecked(expr: *): *` is special\n      if (\n        (<FunctionPrototype>target).internalName == BuiltinSymbols.unchecked &&\n        expression.arguments.length > 0\n      ) {\n        return this.resolveExpression(expression.arguments[0], flow, contextualType, reportMode);\n      }\n      // otherwise resolve normally\n      let instance = this.resolveFunctionInclTypeArguments(\n        <FunctionPrototype>target,\n        expression.typeArguments,\n        flow.actualFunction,\n        makeMap(flow.contextualTypeArguments), // don't inherit\n        expression,\n        reportMode\n      );\n      if (!instance) return null;\n      let returnType = instance.signature.returnType;\n      let classType = returnType.classReference;\n      if (classType) {\n        // reuse resolvedThisExpression (might be property access)\n        // reuse resolvedElementExpression (might be element access)\n        return classType;\n      } else {\n        let signature = returnType.signatureReference;\n        if (signature) {\n          let functionTarget = signature.asFunctionTarget(this.program);\n          // reuse resolvedThisExpression (might be property access)\n          // reuse resolvedElementExpression (might be element access)\n          return functionTarget;\n        }\n      }\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          targetExpression.range, target.internalName\n        );\n      }\n      return null;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!contextualTypeArguments.has(classTypeParameterName)) {\n            contextualTypeArguments.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.signatureNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        contextualTypeArguments.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!thisType) return null;\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          typeNode.range\n        );\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          typeNode.range\n        );\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      signature,\n      contextualTypeArguments\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArgumentNodes: CommonTypeNode[] | null,\n    /** Relative context. Type arguments are resolved from here. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classTypeArguments = (<Class>actualParent).typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            contextualTypeArguments.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        context,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        contextualTypeArguments.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes && typeParameterNodes.length));\n    }\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    var baseClass: Class | null = null;\n    if (basePrototype) {\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      baseClass = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(contextualTypeArguments), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!baseClass) return null;\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    prototype.setResolvedInstance(instanceKey, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      let baseMembers = baseClass.members;\n      if (baseMembers) {\n        let instanceMembers = instance.members;\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\n        for (let [baseMemberName, baseMember] of baseMembers) {\n          instanceMembers.set(baseMemberName, baseMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve instance members\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    if (instanceMemberPrototypes) {\n      for (let member of instanceMemberPrototypes.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            let instanceMembers = instance.members;\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\n            else if (instanceMembers.has(member.name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                (<FieldPrototype>member).identifierNode.range,\n                member.name\n              );\n              break;\n            }\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (baseClass) {\n                let baseMembers = baseClass.members;\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    (<FieldPrototype>member).identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(member.name, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\n            if (getterPrototype) {\n              let getterInstance = this.resolveFunction(\n                getterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (getterInstance) {\n                propertyInstance.getterInstance = getterInstance;\n                propertyInstance.setType(getterInstance.signature.returnType);\n              }\n            }\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\n            if (setterPrototype) {\n              let setterInstance = this.resolveFunction(\n                setterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (setterInstance) {\n                propertyInstance.setterInstance = setterInstance;\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\n                  assert(setterInstance.signature.parameterTypes.length == 1);\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\n                }\n              }\n            }\n            instance.add(propertyInstance.name, propertyInstance); // reports\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Link _own_ constructor if present\n    {\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\n      if (ctorPrototype && ctorPrototype.parent === instance) {\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n        let ctorInstance = this.resolveFunction(\n          <FunctionPrototype>ctorPrototype,\n          null,\n          instance.contextualTypeArguments,\n          reportMode\n        );\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      overloads.set(kind, operatorInstance);\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type argument nodes provided. */\n    typeArgumentNodes: CommonTypeNode[] | null,\n    /** Relative context. Type arguments are resolved from here. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        context,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n}\n","/**\n * A control flow analyzer.\n * @module flow\n *//***/\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  BinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  UnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue,\n  getCallOperand,\n  traverse\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow returns. */\n  RETURNS = 1 << 0,\n  /** This flow returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow throws. */\n  THROWS = 1 << 3,\n  /** This flow breaks. */\n  BREAKS = 1 << 4,\n  /** This flow continues. */\n  CONTINUES = 1 << 5,\n  /** This flow allocates. Constructors only. */\n  ALLOCATES = 1 << 6,\n  /** This flow calls super. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 8,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 9,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 10,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 11,\n  /** This flow conditionally allocates in a child flow. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 12,\n\n  // special\n\n  /** This is an inlining flow. */\n  INLINE_CONTEXT = 1 << 13,\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 14,\n\n  // masks\n\n  /** Any terminating flag. */\n  ANY_TERMINATING = FlowFlags.RETURNS\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES\n                  | FlowFlags.CALLS_SUPER,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 1,\n  /** Local is non-null. */\n  NONNULL = 1 << 2,\n  /** Local is read from. */\n  READFROM = 1 << 3,\n  /** Local is written to. */\n  WRITTENTO = 1 << 4,\n  /** Local is retained. */\n  RETAINED = 1 << 5,\n\n  /** Local is conditionally read from. */\n  CONDITIONALLY_READFROM = 1 << 6,\n  /** Local is conditionally written to. */\n  CONDITIONALLY_WRITTENTO = 1 << 7,\n  /** Local must be conditionally retained. */\n  CONDITIONALLY_RETAINED = 1 << 8,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = CONSTANT\n                  | WRAPPED\n                  | NONNULL\n                  | READFROM\n                  | WRITTENTO\n                  | RETAINED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = RETAINED\n                  | CONDITIONALLY_READFROM\n                  | CONDITIONALLY_WRITTENTO\n                  | CONDITIONALLY_RETAINED,\n\n  /** Any retained flag. */\n  ANY_RETAINED = RETAINED\n               | CONDITIONALLY_RETAINED\n}\nexport namespace LocalFlags {\n  export function join(left: LocalFlags, right: LocalFlags): LocalFlags {\n    return ((left & LocalFlags.ANY_CATEGORICAL) & (right & LocalFlags.ANY_CATEGORICAL))\n         |  (left & LocalFlags.ANY_CONDITIONAL) | (right & LocalFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** Flags indicating the current state of a field. */\nexport enum FieldFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Field is initialized. Relevant in constructors. */\n  INITIALIZED = 1 << 0,\n  /** Field is conditionally initialized. Relevant in constructors. */\n  CONDITIONALLY_INITIALIZED = 1 << 1,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = INITIALIZED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = CONDITIONALLY_INITIALIZED\n}\nexport namespace FieldFlags {\n  export function join(left: FieldFlags, right: FieldFlags): FieldFlags {\n    return ((left & FieldFlags.ANY_CATEGORICAL) & (right & FieldFlags.ANY_CATEGORICAL))\n         |  (left & FieldFlags.ANY_CONDITIONAL) | (right & FieldFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  parentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[];\n  /** Field flags. Relevant in constructors. */\n  fieldFlags: Map<string,FieldFlags> | null = null;\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(parentFunction: Function): Flow {\n    var flow = new Flow();\n    flow.parent = null;\n    flow.flags = FlowFlags.NONE;\n    flow.parentFunction = parentFunction;\n    flow.continueLabel = null;\n    flow.breakLabel = null;\n    flow.returnType = parentFunction.signature.returnType;\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\n    flow.localFlags = [];\n    flow.inlineFunction = null;\n    flow.inlineReturnLabel = null;\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = Flow.create(parentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\n    flow.returnType = inlineFunction.signature.returnType;\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\n    return flow;\n  }\n\n  private constructor() { }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    return this.inlineFunction || this.parentFunction;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.parentFunction = this.parentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.localFlags = this.localFlags.slice();\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps && temps.length) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps && temps.length) {\n        local = temps.pop();\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Gets a local that sticks around until this flow is exited, and then released. */\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    local.set(CommonFlags.SCOPED);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++), local);\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\n        break;\n      }\n      case NativeType.V128: {\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    this.freeTempLocal(local);\n    return local;\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals && scopedLocals.has(name)) return scopedLocals.get(name);\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          this.parentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            reportNode.range\n          );\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    var scope: Map<String,Local> | null;\n    do if ((scope = current.scopedLocals) && (scope.has(name))) return scope.get(name);\n    while (current = current.parent);\n    return this.parentFunction.localsByName.get(name);\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    this.localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    this.localFlags[index] = flags & ~flag;\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    return parentFunction.breakLabel = id.toString(10);\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString(10);\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.localFlags = other.localFlags; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n    var localFlags = other.localFlags;\n    for (let i = 0, k = localFlags.length; i < k; ++i) {\n      let flags = localFlags[i];\n      if (flags & LocalFlags.RETAINED) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETAINED);\n      if (flags & LocalFlags.READFROM) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_READFROM);\n      if (flags & LocalFlags.WRITTENTO) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_WRITTENTO);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.set(left.flags & right.flags & FlowFlags.ANY_CATEGORICAL);\n\n    // conditional flags set in at least one arm\n    this.set(left.flags & FlowFlags.ANY_CONDITIONAL);\n    this.set(right.flags & FlowFlags.ANY_CONDITIONAL);\n\n    // categorical local flags set in both arms / conditional local flags set in at least one arm\n    var leftLocalFlags = left.localFlags;\n    var numLeftLocalFlags = leftLocalFlags.length;\n    var rightLocalFlags = right.localFlags;\n    var numRightLocalFlags = rightLocalFlags.length;\n    var combinedFlags = new Array<LocalFlags>(max<i32>(numLeftLocalFlags, numRightLocalFlags));\n    for (let i = 0; i < numLeftLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        unchecked(leftLocalFlags[i]),\n        i < numRightLocalFlags\n          ? unchecked(rightLocalFlags[i])\n          : 0\n      );\n    }\n    for (let i = numLeftLocalFlags; i < numRightLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        0,\n        unchecked(rightLocalFlags[i])\n      );\n    }\n    this.localFlags = combinedFlags;\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.is(TypeFlags.NULLABLE)) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(expr: ExpressionRef): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        this.inheritNonnullIfTrue(getLocalSetValue(expr)); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr));\n            this.inheritNonnullIfTrue(getIfTrue(expr));\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr)); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Call: {\n        let name = getCallTarget(expr);\n        let program = this.parentFunction.program;\n        switch (name) {\n          case program.retainInstance.internalName: {\n            this.inheritNonnullIfTrue(getCallOperand(expr, 0));\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(expr: ExpressionRef): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr)); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          if (\n            (getExpressionType(ifTrue) == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\n            (getExpressionType(ifTrue) == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr));\n            this.inheritNonnullIfFalse(getIfFalse(expr));\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr))));\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow(assert((<Global>global).type), type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = instancesByName.get(instanceName)!;\n          assert(instance.kind == ElementKind.FUNCTION);\n          let returnType = (<Function>instance).signature.returnType;\n          return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    return \"Flow(\" + this.actualFunction + \")[\" + levels.toString() + \"]\";\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n\n/** Finds all indexes of locals used in the specified expression. */\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set()): Set<i32> {\n  traverse(expr, used, findUsedLocalsVisit);\n  return used;\n}\n\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.LocalGet: {\n      used.add(getLocalGetIndex(expr));\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      used.add(getLocalSetIndex(expr));\n      // fall-through for value\n    }\n    default: traverse(expr, used, findUsedLocalsVisit);\n  }\n}\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  BuiltinSymbols,\n  compileCall as compileBuiltinCall,\n  compileAbort,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  needsExplicitUnreachable,\n  getLocalGetIndex,\n  FeatureFlags,\n  isLocalTee,\n  getLocalSetIndex\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  CommonSymbols,\n  INDEX_SUFFIX,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  File,\n  mangleInternalName\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver, ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  TypeNode,\n  Range,\n  DecoratorKind,\n  AssertionKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  nodeIsConstantValue,\n  findDecorator,\n  isTypeOmitted\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap\n} from \"./util\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\n  sharedMemory: i32 = 0;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases. */\n  globalAliases: Map<string,string> | null = null;\n  /** Additional features to activate. */\n  features: Feature = Feature.NONE;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Requests or indicates compilation conditions of statements and expressions. */\nexport const enum ContextualFlags {\n  NONE = 0,\n\n  /** Implicit conversion required. */\n  IMPLICIT = 1 << 0,\n  /** Explicit conversion required. */\n  EXPLICIT = 1 << 1,\n  /** Small integer wrap required. */\n  WRAP = 1 << 2,\n\n  /** Value is known to be immediately dropped. */\n  WILL_DROP = 1 << 3,\n  /** Value is known to be immediately assigned to a retaining target.  */\n  SKIP_AUTORELEASE = 1 << 4,\n  /** Is the last statement in a function body. */\n  LAST_IN_BODY = 1 << 5,\n  /** Data can be compiled statically. */\n  STATIC_CAPABLE = 1 << 6\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires heap setup. */\n  HEAP = 1 << 0,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 1,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 2,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 3\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  resolver: Resolver;\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: string[] = [ \"null\" ];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    this.resolver = program.resolver;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n    var featureFlags: BinaryenFeatureFlags = 0;\n    if (this.options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (this.options.hasFeature(Feature.MUTABLE_GLOBAL)) featureFlags |= FeatureFlags.MutableGloabls;\n    // if (this.options.hasFeature(Feature.TRUNC_SAT)) featureFlags |= FeatureFlags.NontrappingFPToInt;\n    if (this.options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\n    if (this.options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (this.options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    // if (this.options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    this.module.setFeatures(featureFlags);\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature([], Type.void));\n    startFunctionInstance.internalName = \"start\";\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = startFunctionBody;\n\n    // add a mutable heap and rtti base dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    for (let file of files.values()) {\n      if (file.source.isEntry) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or called by main\n    var hasExplicitStart = program.explicitStartFunction !== null;\n    if (startFunctionBody.length || hasExplicitStart) {\n      let signature = startFunctionInstance.signature;\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.block(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!hasExplicitStart) module.setStart(funcRef);\n    }\n\n    // compile runtime features\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n    module.removeGlobal(BuiltinSymbols.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinSymbols.heap_base);\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\n      if (options.isWasm64) {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I64,\n          false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I32,\n          false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // set up memory\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\n    module.setMemory(\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n        : 0,\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      \"memory\",\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table\n    var functionTable = this.functionTable;\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.block(null, []));\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\n\n    // set up module exports\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.isEntry) this.ensureModuleExports(file);\n    }\n    return module;\n  }\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var members = file.exports;\n    if (members) for (let [name, member] of members) this.ensureModuleExport(name, member);\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.ensureModuleExports(exportsStar[i]);\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instances = (<FunctionPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instances = (<ClassPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getter = (<PropertyPrototype>element).getterPrototype;\n        let setter = (<PropertyPrototype>element).setterPrototype;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<Global>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!(<EnumValue>element).isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<EnumValue>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = (<Property>element).getterInstance;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterInstance;\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        this.ensureModuleFieldGetter(prefix + GETTER_PREFIX + name, <Field>element);\n        if (!element.is(CommonFlags.READONLY)) {\n          this.ensureModuleFieldSetter(prefix + SETTER_PREFIX + name, <Field>element);\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        // make the class name itself represent its runtime id\n        if (!(<Class>element).type.isUnmanaged) {\n          let module = this.module;\n          let internalName = (<Class>element).internalName;\n          module.addGlobal(internalName, NativeType.I32, false, module.i32((<Class>element).id));\n          module.addGlobalExport(internalName, prefix + name);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.NAMESPACE:\n      case ElementKind.FILE:\n      case ElementKind.TYPEDEFINITION: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (\n        element.kind == ElementKind.NAMESPACE ||\n        element.kind == ElementKind.FILE\n      ) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      }\n    }\n  }\n\n  /** Makes a function to get the value of a field of an exported class. */\n  private ensureModuleFieldGetter(name: string, field: Field): void {\n    var module = this.module;\n    var type = field.type;\n    var usizeType = this.options.usizeType;\n    var loadExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\n      module.local_get(0, usizeType.toNativeType()),\n      type.toNativeType(), field.memoryOffset\n    );\n    // a user-defined getter would return a retained value, so:\n    if (type.isManaged) loadExpr = this.makeRetain(loadExpr);\n    module.addFunction(\n      name,\n      this.ensureFunctionType(null, type, usizeType),\n      null,\n      loadExpr\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  /** Makes a function to set the value of a field of an exported class. */\n  private ensureModuleFieldSetter(name: string, field: Field): void {\n    var module = this.module;\n    var type = field.type;\n    var nativeType = type.toNativeType();\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = usizeType.toNativeType();\n    var valueExpr = module.local_get(1, nativeType);\n    if (type.isManaged) {\n      valueExpr = this.makeRetainRelease(\n        module.load(type.byteSize, false, // oldRef\n          module.local_get(0, nativeSizeType),\n          nativeType, field.memoryOffset\n        ),\n        valueExpr // newRef\n      );\n    }\n    module.addFunction(\n      name,\n      this.ensureFunctionType([ type ], Type.void, usizeType),\n      null,\n      module.store(\n        type.byteSize,\n        module.local_get(0, nativeSizeType),\n        valueExpr,\n        nativeType,\n        field.memoryOffset\n      )\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) {\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\n        }\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) {\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE: break;\n      default: assert(false, ElementKind[element.kind]);\n    }\n    if (compileMembers) this.compileMembers(element);\n  }\n\n  /** Compiles an element's members. */\n  compileMembers(element: Element): void {\n    var members = element.members;\n    if (members) for (let element of members.values()) this.compileElement(element);\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) for (let element of exports.values()) this.compileElement(element);\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) {\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = filesByName.get(normalizedPathWithoutExtension)!;\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = filesByName.get(pathWithIndex)!;\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.finishAutoreleases(flow, startFunctionBody);\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\n        varTypes,\n        startFunctionBody.length > 1\n          ? module.block(null, startFunctionBody)\n          : startFunctionBody[0]\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var initAutoreleaseSkipped: bool = false;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          return false;\n        }\n        global.setType(resolvedType);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.i32, // reports\n          ContextualFlags.WRAP | ContextualFlags.SKIP_AUTORELEASE\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      if (global.internalName == BuiltinSymbols.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (global.internalName == BuiltinSymbols.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      return true;\n    }\n\n    var type = global.type;\n    var nativeType = type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // Importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          global.declaration.range\n        );\n      }\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constant values (and constant\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          ContextualFlags.IMPLICIT | ContextualFlags.WRAP | ContextualFlags.SKIP_AUTORELEASE | ContextualFlags.STATIC_CAPABLE\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n      }\n\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) initializeInStart = true;\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      initExpr = type.toNativeZero(module);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, global.decoratorNodes)).range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, type.toNativeZero(module));\n      if (type.isManaged && !initAutoreleaseSkipped) initExpr = this.makeRetain(initExpr);\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueNode = val.valueNode;\n        val.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            ContextualFlags.IMPLICIT // autorelease is not applicable in i32 context\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            initExpr = module.precomputeExpression(initExpr);\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              (<EnumValue>member).identifierNode.range.atEnd\n            );\n          }\n          initExpr = module.binary(BinaryOp.AddI32,\n            module.global_get(previousValue.internalName, NativeType.I32),\n            module.i32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                member.declaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(val, initExpr, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n          }\n          val.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): Function | null {\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return null;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n\n      let expr = this.compileExpression((<ExpressionStatement>bodyNode).expression, returnType,\n        ContextualFlags.IMPLICIT\n      );\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n      if (!flow.isAny(FlowFlags.ANY_TERMINATING)) { // TODO: detect if returning an autorelease local?\n        let indexBefore = stmts.length;\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        let canOverflow = flow.canOverflow(expr, returnType);\n        let nonNull = flow.isNonnull(expr, returnType);\n        if (stmts.length > indexBefore) {\n          let temp = flow.getAndFreeTempLocal(returnType);\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\n        }\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS); // now is terminating\n      }\n    }\n\n    // make the main function call `start` implicitly, but only once\n    if (instance.prototype == this.program.explicitStartFunction) {\n      module.addGlobal(BuiltinSymbols.started, NativeType.I32, true, module.i32(0));\n      stmts.unshift(\n        module.if(\n          module.unary(\n            UnaryOp.EqzI32,\n            module.global_get(BuiltinSymbols.started, NativeType.I32)\n          ),\n          module.block(null, [\n            module.call(\"start\", null, NativeType.None),\n            module.global_set(BuiltinSymbols.started, module.i32(1))\n          ])\n        )\n      );\n    }\n\n    // make constructors return their instance pointer\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n\n      if (!flow.isAny(FlowFlags.ANY_TERMINATING)) {\n        let thisLocalIndex = flow.is(FlowFlags.INLINE_CONTEXT)\n          ? assert(flow.lookupLocal(CommonSymbols.this_)).index\n          : 0;\n\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\n        if (!flow.is(FlowFlags.ALLOCATES)) {\n          // {\n          //   if (!this) this = <ALLOC>\n          //   this.a = X\n          //   this.b = Y\n          // }\n          stmts.push(\n            module.if(\n              module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                module.local_get(thisLocalIndex, nativeSizeType)\n              ),\n              module.local_set(thisLocalIndex,\n                this.makeRetain(\n                  this.makeAllocation(<Class>classInstance)\n                ),\n              )\n            )\n          );\n          this.makeFieldInitialization(<Class>classInstance, stmts);\n        }\n\n        // implicitly return `this`. unlike for normal functions, retaining the value isn't\n        // necessary because the allocation (constructor call) already did (RC=1)\n        stmts.push(\n          module.local_get(thisLocalIndex, nativeSizeType)\n        );\n        flow.set(FlowFlags.RETURNS);\n      }\n\n      // check that super has been called if this is a derived class\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches return\n    } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.signatureNode.returnType.range\n      );\n    }\n\n    return stmts;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n\n    var previousType = this.currentType; // remember to retain it if compiling a function lazily\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          decorator.range\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      // retain each argument for as long as the function lives\n      let index = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n        ++index;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\n        let type = parameterTypes[i];\n        if (type.isManaged) {\n          stmts.push(\n            module.drop(\n              this.makeRetain(\n                module.local_get(index, type.toNativeType())\n              )\n            )\n          );\n          flow.setLocalFlag(index, LocalFlags.RETAINED);\n        }\n      }\n\n      this.compileFunctionBody(instance, stmts);\n      if (!flow.isAny(FlowFlags.ANY_TERMINATING)) {\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n      }\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        flatten(module, stmts, instance.signature.returnType.toNativeType())\n      );\n\n    // imported function\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          instance.identifierNode.range\n        );\n      }\n\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\n\n      // create the import\n      funcRef = module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    return true;\n  }\n\n  // === Classes ==================================================================================\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(),\n                (<FunctionPrototype>element).identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let getter = (<PropertyPrototype>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [],\n                makeMap<string,Type>(),\n                getter.identifierNode\n              );\n            }\n            let setter = (<PropertyPrototype>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [],\n                makeMap<string,Type>(),\n                setter.identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(instance.contextualTypeArguments),\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD_PROTOTYPE: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterInstance;\n            if (getter) this.compileFunction(getter);\n            let setter = (<Property>element).setterInstance;\n            if (setter) this.compileFunction(setter);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var rtHeaderSize = program.runtimeHeaderSize;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = segments.get(stringValue)!; // reuse\n    } else {\n      let length = stringValue.length;\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\n      program.writeRuntimeHeader(buffer, 0, stringInstance, length << 1);\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buffer);\n      segments.set(stringValue, stringSegment);\n    }\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.i64(i64_low(ref), i64_high(ref));\n    } else {\n      assert(i64_is_u32(ref));\n      return this.module.i32(i64_low(ref));\n    }\n  }\n\n  ensureStaticArrayBuffer(elementType: Type, values: ExpressionRef[]): MemorySegment {\n    var program = this.program;\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\n    program.writeRuntimeHeader(buf, 0, bufferInstance, byteLength);\n    var pos = runtimeHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    assert(pos == buf.length);\n\n    return this.addMemorySegment(buf);\n  }\n\n  ensureStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\n    var program = this.program;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayInstanceSize = arrayInstance.currentMemoryOffset;\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\n    program.writeRuntimeHeader(buf, 0, arrayInstance, arrayInstanceSize);\n\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\n    assert(!program.options.isWasm64); // TODO\n    assert(arrayInstance.writeField(\"data\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataLength\", bufferLength, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\n\n    return this.addMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.internalName);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // === Statements ===============================================================================\n\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        assert(element.kind == ElementKind.ENUM);\n        if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let memberStatements = (<NamespaceDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          assert(element.kind == ElementKind.GLOBAL);\n          if (\n            !element.is(CommonFlags.AMBIENT) && // delay imports\n            !element.hasDecorator(DecoratorFlags.LAZY)\n          ) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        if ((<ExportStatement>statement).normalizedPath != null) {\n          this.compileFileByPath(\n            <string>(<ExportStatement>statement).normalizedPath,\n            <StringLiteralExpression>(<ExportStatement>statement).path\n          );\n        }\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.compileFileByPath(\n          (<ImportStatement>statement).normalizedPath,\n          (<ImportStatement>statement).path\n        );\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATUREDECLARATION:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  compileStatement(\n    statement: Statement,\n    contextualFlags: ContextualFlags = ContextualFlags.NONE\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement, contextualFlags);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement, contextualFlags);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement, contextualFlags);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement, contextualFlags);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement, contextualFlags);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement, contextualFlags);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement, contextualFlags);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement, contextualFlags);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, contextualFlags);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement, contextualFlags);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement, contextualFlags);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement, contextualFlags);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement, contextualFlags);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement, contextualFlags);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement, contextualFlags);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          statement.range\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(\n    statements: Statement[],\n    isBody: bool = false,\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i],\n        isBody && i == numStatements - 1\n          ? ContextualFlags.LAST_IN_BODY\n          : ContextualFlags.NONE\n      );\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(this.module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(\n    statement: BlockStatement,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    if (!innerFlow.isAny(FlowFlags.ANY_TERMINATING)) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow); // TODO: only if not terminated?\n    this.currentFlow = outerFlow;\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileBreakStatement(\n    statement: BreakStatement,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var current: Flow | null = flow.parent;\n    while (current && current.breakLabel === breakLabel) {\n      this.performAutoreleases(current, stmts, /* clearFlags */ false);\n      current = current.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(breakLabel));\n    flow.set(FlowFlags.BREAKS);\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileContinueStatement(\n    statement: ContinueStatement,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES);\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var current: Flow | null = flow.parent;\n    while (current && current.continueLabel === continueLabel) {\n      this.performAutoreleases(current, stmts, /* clearFlags */ false);\n      current = current.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(continueLabel));\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileDoStatement(\n    statement: DoStatement,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    var module = this.module;\n\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(\n        this.compileStatement(statement.statement)\n      );\n    }\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.i32),\n      this.currentType\n    );\n    // TODO: check if condition is always false and if so, omit it (just a block)\n\n    // Switch back to the parent flow\n    var terminated = innerFlow.isAny(FlowFlags.ANY_TERMINATING);\n    if (!terminated) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    outerFlow.inherit(innerFlow);\n\n    var block: ExpressionRef[] = [\n      module.loop(continueLabel,\n        terminated\n          ? flatten(module, stmts, NativeType.None) // skip trailing continue if unnecessary\n          : module.block(null, [\n              flatten(module, stmts, NativeType.None),\n              module.br(continueLabel, condExpr)\n            ], NativeType.None)\n      )\n    ];\n    if (terminated) block.push(module.unreachable());\n    return module.block(breakLabel, block);\n  }\n\n  compileEmptyStatement(\n    statement: EmptyStatement,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  compileExpressionStatement(\n    statement: ExpressionStatement,\n    contextualFlags: ContextualFlags,\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      contextualFlags | ContextualFlags.EXPLICIT | ContextualFlags.WILL_DROP\n    );\n  }\n\n  compileForStatement(\n    statement: ForStatement,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    // A for statement initiates a new branch with its own scoped variables\n    // possibly declared in its initializer, and break context.\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n    var repeatLabel = \"repeat|\" + label;\n\n    // Compile in correct order\n    var module = this.module;\n    var initExpr = statement.initializer\n      ? this.compileStatement(<Statement>statement.initializer)\n      : 0;\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = module.precomputeExpression(\n        this.makeIsTrueish(\n          this.compileExpressionRetainType(<Expression>statement.condition, Type.bool),\n          this.currentType\n        )\n      );\n      // check if the condition is always true\n      if (getExpressionId(condExpr) == ExpressionId.Const) {\n        assert(getExpressionType(condExpr) == NativeType.I32);\n        if (getConstValueI32(condExpr) != 0) alwaysTrue = true;\n        // TODO: could skip compilation if the condition is always false here, but beware that the\n        // initializer could still declare new 'var's that are used later on.\n      }\n    } else {\n      // omitted condition is always true\n      condExpr = module.i32(1);\n      alwaysTrue = true;\n    }\n    innerFlow.inheritNonnullIfTrue(condExpr);\n    var incrExpr = statement.incrementor\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void,\n          ContextualFlags.IMPLICIT | ContextualFlags.WILL_DROP\n        )\n      :  0;\n    var bodyStatement = statement.statement;\n    var stmts = new Array<ExpressionRef>();\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>bodyStatement).statements, false, stmts);\n    } else {\n      stmts.push(\n        this.compileStatement(bodyStatement)\n      );\n    }\n    if (!innerFlow.isAny(FlowFlags.ANY_TERMINATING)) this.performAutoreleases(innerFlow, stmts);\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var usesContinue = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\n    if (initExpr) breakBlock.push(initExpr);\n\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\n    if (usesContinue) {\n      stmts.unshift(\n        module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr))\n      );\n      repeatBlock.push(\n        module.block(continueLabel, stmts, NativeType.None)\n      );\n    } else { // can omit the 'continue' block\n      repeatBlock.push(\n        module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr))\n      );\n      for (let i = 0, k = stmts.length; i < k; ++i) {\n        repeatBlock.push(stmts[i]);\n      }\n    }\n    if (incrExpr) repeatBlock.push(incrExpr);\n    repeatBlock.push(\n      module.br(repeatLabel)\n    );\n\n    breakBlock.push(\n      module.loop(repeatLabel, module.block(null, repeatBlock, NativeType.None))\n    );\n\n    return module.block(breakLabel, breakBlock);\n  }\n\n  compileIfStatement(\n    statement: IfStatement,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n    var outerFlow = this.currentFlow;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpressionRetainType(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileStatement(ifTrue)\n        : ifFalse\n          ? this.compileStatement(ifFalse)\n          : module.nop();\n    }\n\n    // Each arm initiates a branch\n    var ifTrueStmts = new Array<ExpressionRef>();\n    var ifTrueFlow = outerFlow.fork();\n    this.currentFlow = ifTrueFlow;\n    ifTrueFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, ifTrueStmts);\n    } else {\n      ifTrueStmts.push(this.compileStatement(ifTrue));\n    }\n    if (!ifTrueFlow.isAny(FlowFlags.ANY_TERMINATING)) this.performAutoreleases(ifTrueFlow, ifTrueStmts);\n    ifTrueFlow.freeScopedLocals();\n    this.currentFlow = outerFlow;\n\n    if (ifFalse) {\n      let ifFalseFlow = outerFlow.fork();\n      this.currentFlow = ifFalseFlow;\n      ifFalseFlow.inheritNonnullIfFalse(condExpr);\n      let ifFalseStmts = new Array<ExpressionRef>();\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, ifFalseStmts);\n      } else {\n        ifFalseStmts.push(this.compileStatement(ifFalse));\n      }\n      if (!ifFalseFlow.isAny(FlowFlags.ANY_TERMINATING)) this.performAutoreleases(ifFalseFlow, ifFalseStmts);\n      ifFalseFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None),\n        flatten(module, ifFalseStmts, NativeType.None)\n      );\n    } else {\n      outerFlow.inheritConditional(ifTrueFlow);\n      if (ifTrueFlow.isAny(FlowFlags.ANY_TERMINATING)) {\n        outerFlow.inheritNonnullIfFalse(condExpr);\n      }\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None)\n      );\n    }\n    // TODO: Detect neglected condition\n    // if (!foo) {\n    //   foo = [notNull]\n    // }\n    // foo // is possibly null\n  }\n\n  compileReturnStatement(\n    statement: ReturnStatement,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS);\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      if (returnType == Type.void) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          valueExpression.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.unreachable();\n      }\n      let contextualFlags = ContextualFlags.IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) contextualFlags |= ContextualFlags.WRAP;\n      expr = this.compileExpression(valueExpression, returnType, contextualFlags | ContextualFlags.SKIP_AUTORELEASE);\n\n      // when returning a local, and it is already retained, skip the final set\n      // of retaining it as the return value and releasing it as a variable\n      if (!this.skippedAutoreleases.has(expr)) {\n        if (returnType.isManaged) {\n          if (getExpressionId(expr) == ExpressionId.LocalGet) {\n            if (flow.isAnyLocalFlag(getLocalGetIndex(expr), LocalFlags.ANY_RETAINED)) {\n              flow.unsetLocalFlag(getLocalGetIndex(expr), LocalFlags.ANY_RETAINED);\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n        }\n      }\n\n      // remember return states\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n      if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.unreachable();\n    }\n\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    this.finishAutoreleases(flow, stmts);\n\n    // Make sure that the return value is retained for the caller\n    if (returnType.isManaged && !this.skippedAutoreleases.has(expr)) expr = this.makeRetain(expr);\n\n    if (returnType != Type.void && stmts.length) {\n      let temp = flow.getAndFreeTempLocal(returnType);\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts.unshift(\n        module.local_set(temp.index, expr)\n      );\n      expr = module.local_get(temp.index, returnType.toNativeType());\n    }\n    flow.freeScopedLocals();\n\n    // If the last statement anyway, make it the block's return value\n    if ((contextualFlags & ContextualFlags.LAST_IN_BODY) != 0 && expr && returnType != Type.void) {\n      if (!stmts.length) return expr;\n      stmts.push(expr);\n      return module.block(null, stmts, returnType.toNativeType());\n    }\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\n      // stmts.push(module.createUnreachable());\n      return module.block(null, stmts);\n    }\n\n    // Otherwise emit a normal return\n    if (!stmts.length) return module.return(expr);\n    stmts.push(module.return(expr));\n    return module.block(null, stmts);\n  }\n\n  compileSwitchStatement(statement: SwitchStatement, contextualFlags: ContextualFlags): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        ContextualFlags.IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        ContextualFlags.IMPLICIT\n      )\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString(10) + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32,\n              ContextualFlags.IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\n    var alwaysReturns = true;\n    var alwaysReturnsWrapped = true;\n    var alwaysThrows = true;\n    var alwaysAllocates = true;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminated = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n          if (innerFlow.isAny(FlowFlags.ANY_TERMINATING)) {\n            terminated = true;\n            break;\n          }\n        }\n      }\n      stmts.length = count;\n      if (terminated || isLast) {\n        if (!innerFlow.is(FlowFlags.RETURNS)) alwaysReturns = false;\n        if (!innerFlow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\n        if (!innerFlow.is(FlowFlags.THROWS)) alwaysThrows = false;\n        if (!innerFlow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\n      }\n\n      // Switch back to the parent flow\n      if (!innerFlow.isAny(FlowFlags.ANY_TERMINATING)) this.performAutoreleases(innerFlow, stmts);\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) {\n      if (alwaysReturns) outerFlow.set(FlowFlags.RETURNS);\n      if (alwaysReturnsWrapped) outerFlow.set(FlowFlags.RETURNS_WRAPPED);\n      if (alwaysThrows) outerFlow.set(FlowFlags.THROWS);\n      if (alwaysAllocates) outerFlow.set(FlowFlags.ALLOCATES);\n    }\n    return currentBlock;\n  }\n\n  compileThrowStatement(\n    statement: ThrowStatement,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS);\n\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\n    flow.set(FlowFlags.RETURNS);\n\n    var stmts = new Array<ExpressionRef>();\n    this.finishAutoreleases(flow, stmts);\n\n    // TODO: requires exception-handling spec.\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).arguments;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(compileAbort(this, message, statement));\n\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileTryStatement(\n    statement: TryStatement,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  compileVariableStatement(statement: VariableStatement, contextualFlags: ContextualFlags): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      let initAutoreleaseSkipped = false;\n\n      // Resolve type if annotated\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression(declaration.initializer, type, // reports\n            ContextualFlags.IMPLICIT | ContextualFlags.SKIP_AUTORELEASE\n          );\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (declaration.initializer) {\n        initExpr = this.compileExpressionRetainType(declaration.initializer, Type.void,\n          ContextualFlags.SKIP_AUTORELEASE\n        ); // reports\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return module.unreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.unreachable();\n            }\n            scopedLocals.set(name, local);\n            isStatic = true;\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, declaration.name.text\n            );\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          if (flow.lookupLocal(name)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        let isManaged = type.isManaged;\n        if (initExpr) {\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n          if (isManaged) {\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\n            initializers.push(\n              module.local_set(local.index,\n                initAutoreleaseSkipped\n                  ? initExpr\n                  : this.makeRetain(initExpr)\n              )\n            );\n          } else {\n            initializers.push(\n              module.local_set(local.index, initExpr)\n            );\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\n            }\n          }\n        } else {\n          if (isManaged) {\n            // This is necessary because the first use (and assign) of the local could be taking place\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\n            // initialized but becomes released later on, whatever was stored before would be released.\n            // TODO: Detect this condition inside of a loop instead?\n            initializers.push(\n              module.local_set(local.index,\n                type.toNativeZero(module)\n              )\n            );\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    return initializers.length == 0\n      ? 0\n      : flatten(module, initializers, NativeType.None);\n  }\n\n  compileVoidStatement(statement: VoidStatement, contextualFlags: ContextualFlags): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      ContextualFlags.EXPLICIT | ContextualFlags.WILL_DROP\n    );\n  }\n\n  compileWhileStatement(statement: WhileStatement, contextualFlags: ContextualFlags): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // The condition does not yet initialize a branch\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpressionRetainType(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary loops if the condition is constant\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      if (!getConstValueI32(condExpr)) return module.nop();\n    }\n\n    // Statements initiate a new branch with its own break context\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n\n    innerFlow.inheritNonnullIfTrue(condExpr);\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(statement.statement));\n    }\n    var alwaysTrue = false; // TODO\n    var terminated = innerFlow.isAny(FlowFlags.ANY_TERMINATING);\n    if (!terminated) {\n      this.performAutoreleases(innerFlow, stmts);\n      stmts.push(module.br(continueLabel));\n    }\n    innerFlow.freeScopedLocals();\n\n    // Switch back to the parent flow\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n\n    return module.block(breakLabel, [\n      module.loop(continueLabel,\n        module.if(condExpr,\n          flatten(module, stmts, NativeType.None)\n        )\n      )\n    ]);\n  }\n\n  // === Expressions ==============================================================================\n\n  /**\n   * Compiles the value of an inlined constant element.\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\n   *  is precomputed according to context.\n   */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !(contextualFlags & (ContextualFlags.IMPLICIT | ContextualFlags.EXPLICIT)) &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    contextualFlags: ContextualFlags = ContextualFlags.NONE\n  ): ExpressionRef {\n    this.currentType = contextualType;\n    var expr: ExpressionRef;\n    if (contextualType == Type.void) contextualFlags |= ContextualFlags.WILL_DROP;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, contextualFlags);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, contextualFlags);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, contextualFlags);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, contextualFlags);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, contextualFlags);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, contextualFlags);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, contextualFlags);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, contextualFlags);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, contextualFlags);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, contextualFlags);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileExpression((<ParenthesizedExpression>expression).expression, contextualType, contextualFlags);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, contextualFlags);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, contextualFlags);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, contextualFlags);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, contextualFlags);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        expr = this.module.unreachable();\n      }\n    }\n    // ensure conversion and wrapping in case the respective function doesn't on its own\n    var currentType = this.currentType;\n    var wrap = (contextualFlags & ContextualFlags.WRAP) != 0;\n    if (currentType != contextualType) {\n      if (contextualFlags & ContextualFlags.EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      } else if (contextualFlags & ContextualFlags.IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Compiles an expression while retaining the type, that is not void, it ultimately compiles to. */\n  compileExpressionRetainType(\n    expression: Expression,\n    contextualType: Type,\n    contextualFlags: ContextualFlags = ContextualFlags.NONE\n  ): ExpressionRef {\n    return this.compileExpression(expression,\n      contextualType == Type.void\n        ? Type.i32 // default to i32\n        : contextualType,\n      (contextualFlags & ~(ContextualFlags.IMPLICIT | ContextualFlags.EXPLICIT))\n    );\n  }\n\n  /** Compiles and precomputes an expression, possibly yielding a costant value. */\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    contextualFlags: ContextualFlags = ContextualFlags.NONE\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, contextualFlags)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit.*/\n    explicit: bool,\n    /** Whether the result should be wrapped, if a small integer. */\n    wrap: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    if (this.currentFlow.isNonnull(expr, fromType)) fromType = fromType.nonNullableType;\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        if (fromType.nonNullableType == toType) {\n          this.error(\n            DiagnosticCode.Object_is_possibly_null,\n            reportNode.range\n          ); // recoverable\n        } else {\n          this.error(\n            DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n            reportNode.range, fromType.toString(), toType.toString()\n          ); // recoverable\n        }\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n          wrap = false;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.unary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrap = false;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrap = false;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrap\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType,\n          contextualFlags | ContextualFlags.EXPLICIT\n        );\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpressionRetainType(expression.expression, contextualType);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          let module = this.module;\n          let flow = this.currentFlow;\n          let tempIndex = flow.getAndFreeTempLocal(type).index;\n          if (!flow.canOverflow(expr, type)) flow.setLocalFlag(tempIndex, LocalFlags.WRAPPED);\n          flow.setLocalFlag(tempIndex, LocalFlags.NONNULL);\n          expr = module.if(\n            module.local_tee(tempIndex, expr),\n            module.local_get(tempIndex, type.toNativeType()),\n            module.unreachable()\n          );\n        }\n        this.currentType = this.currentType.nonNullableType;\n        return expr;\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AllTrueVecI8x16,\n              module.binary(BinaryOp.EqVecI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AnyTrueVecI8x16,\n              module.binary(BinaryOp.NeVecI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, ContextualFlags.IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(leftExpr,\n            this.currentType, Type.f64,\n            false, false,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(right, Type.f64, ContextualFlags.IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.unreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        leftExpr = this.compileExpressionRetainType(left, contextualType, contextualFlags);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT | (contextualFlags & ~ContextualFlags.WILL_DROP));\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            this.makeIsTrueish(rightExpr, rightType),\n            module.i32(0)\n          );\n\n        // references must properly retain and release, with the same outcome independent of the branch taken\n        } else if (leftType.isManaged) {\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n          let temp = flow.getTempLocal(leftType);\n          leftExpr = module.local_tee(temp.index, leftExpr);\n\n          // instead of retaining left and releasing it again in right when right\n          // is taken, we can also just retain left if right is not taken\n          let retainLeftInElse = false;\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n            if (!leftAutoreleaseSkipped) {\n              retainLeftInElse = true;\n            } else {\n              rightExpr = this.makeRetain(rightExpr);\n              rightAutoreleaseSkipped = true;\n            }\n          } else if (!(contextualFlags & ContextualFlags.SKIP_AUTORELEASE)) { // otherwise keep right alive a little longer\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\n          }\n\n          let rightStmts = new Array<ExpressionRef>();\n          if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\n            rightStmts.unshift(\n              this.makeRelease(\n                module.local_get(temp.index, leftType.toNativeType())\n              )\n            );\n          }\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            rightExpr,\n            retainLeftInElse\n              ? this.makeRetain(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              : module.local_get(temp.index, leftType.toNativeType())\n          );\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n          if (temp) flow.freeTempLocal(temp);\n\n        // basic values can use more aggressive optimizations\n        } else {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, this.currentType),\n              rightExpr,\n              expr\n            );\n\n          // if not possible, tee left to a temp\n          } else {\n            let tempLocal = flow.getTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n              rightExpr,\n              module.local_get(tempLocal.index, leftType.toNativeType())\n            );\n          }\n        }\n        this.currentType = leftType;\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        leftExpr = this.compileExpressionRetainType(left, contextualType, contextualFlags);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, ContextualFlags.IMPLICIT | contextualFlags);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            module.i32(1),\n            this.makeIsTrueish(rightExpr, rightType)\n          );\n\n        // references must properly retain and release, with the same outcome independent of the branch taken\n        } else if (leftType.isManaged) {\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n          let temp = flow.getTempLocal(leftType);\n          leftExpr = module.local_tee(temp.index, leftExpr);\n\n          // instead of retaining left and releasing it again in right when right\n          // is taken, we can also just retain left if right is not taken\n          let retainLeftInThen = false;\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n            if (!leftAutoreleaseSkipped) {\n              retainLeftInThen = true;\n            } else {\n              rightExpr = this.makeRetain(rightExpr);\n              rightAutoreleaseSkipped = true;\n            }\n          } else if (!(contextualFlags & ContextualFlags.SKIP_AUTORELEASE)) { // otherwise keep right alive a little longer\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\n          }\n\n          let rightStmts = new Array<ExpressionRef>();\n          if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\n            // TODO: usually, false'ish means left is null, but this might not hold\n            // once implicit conversion with strings is performed and left is \"\", so:\n            rightStmts.unshift(\n              this.makeRelease(\n                module.local_get(temp.index, leftType.toNativeType())\n              )\n            );\n          }\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            retainLeftInThen\n              ? this.makeRetain(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              : module.local_get(temp.index, leftType.toNativeType()),\n            rightExpr\n          );\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n          if (temp) flow.freeTempLocal(temp);\n\n        // basic values can use more aggressive optimizations\n        } else {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              expr,\n              rightExpr\n            );\n\n          // if not possible, tee left to a temp. local\n          } else {\n            let tempLocal = flow.getAndFreeTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n              module.local_get(tempLocal.index, leftType.toNativeType()),\n              rightExpr\n            );\n          }\n        }\n        this.currentType = leftType;\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = this.resolver.resolveExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr, // TODO: delay release above if possible?\n      left,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having retained locals that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, ContextualFlags.IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.resolveExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.LOCAL: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return this.module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        break;\n      }\n      case ElementKind.CLASS: {\n        if (elementExpression) { // indexed access\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          // if (isUnchecked) {\n          //   let arrayType = this.program.determineBuiltinArrayType(<Class>target);\n          //   if (arrayType) {\n          //     return compileBuiltinArraySet(\n          //       this,\n          //       <Class>target,\n          //       assert(this.resolver.currentThisExpression),\n          //       elementExpression,\n          //       valueExpression,\n          //       contextualType\n          //     );\n          //   }\n          // }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                expression.range, (<Class>target).internalName\n              );\n            } else {\n              this.error(\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n                expression.range, (<Class>target).internalName\n              );\n            }\n            return this.module.unreachable();\n          }\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n          targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    return this.makeAssignment(\n      target,\n      this.compileExpression(valueExpression, targetType, ContextualFlags.IMPLICIT | ContextualFlags.SKIP_AUTORELEASE),\n      expression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\n    // everything else must insert the skipped autorelease now. See (*)\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        if (flow.isLocalFlag((<Local>target).index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? (<Local>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(<Local>target, valueExpr, tee);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? (<Global>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(<Global>target, valueExpr, tee);\n      }\n      case ElementKind.FIELD: {\n        let initializerNode = (<Field>target).initializerNode;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, (<Field>target).internalName\n          );\n          return module.unreachable();\n        }\n        return this.makeFieldAssignment(<Field>target,\n          valueExpr,\n          this.compileExpressionRetainType(\n            assert(thisExpression),\n            // FIXME: explicit type (currently fails due to missing null checking)\n            this.options.usizeType\n          ),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return module.unreachable();\n        // call just the setter if the return value isn't of interest\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n        // otherwise call the setter first, then the getter\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!getterInstance) return module.unreachable();\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n          this.makeCallDirect(getterInstance, null, valueExpression) // sets currentType\n        ], nativeReturnType);\n      }\n      case ElementKind.PROPERTY: { // instance property\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        // call just the setter if the return value isn't of interest\n        if (!tee) {\n          let thisExpr = this.compileExpressionRetainType(\n            assert(thisExpression),\n            this.options.usizeType\n          );\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n        }\n        // otherwise call the setter first, then the getter\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        let thisExpr = this.compileExpressionRetainType(\n          assert(thisExpression),\n          this.options.usizeType\n        );\n        let tempLocal = flow.getAndFreeTempLocal(returnType);\n        let tempLocalIndex = tempLocal.index;\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ // set and remember the target\n            module.local_tee(tempLocalIndex, thisExpr),\n            valueExpr\n          ], valueExpression),\n          this.makeCallDirect(getterInstance, [ // get from remembered target\n            module.local_get(tempLocalIndex, nativeReturnType)\n          ], valueExpression)\n        ], nativeReturnType);\n      }\n      case ElementKind.CLASS: {\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        if (indexExpression) {\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              valueExpression.range, target.internalName\n            );\n            return module.unreachable();\n          }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              valueExpression.range, target.internalName\n            );\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n            return module.unreachable();\n          }\n          let targetType = (<Class>target).type;\n          let thisExpr = this.compileExpressionRetainType(\n            assert(thisExpression),\n            this.options.usizeType\n          );\n          let elementExpr = this.compileExpression(indexExpression, Type.i32, ContextualFlags.IMPLICIT);\n          if (tee) {\n            let tempLocalTarget = flow.getTempLocal(targetType);\n            let tempLocalElement = flow.getAndFreeTempLocal(this.currentType);\n            let returnType = indexedGet.signature.returnType;\n            flow.freeTempLocal(tempLocalTarget);\n            return module.block(null, [\n              this.makeCallDirect(indexedSet, [\n                module.local_tee(tempLocalTarget.index, thisExpr),\n                module.local_tee(tempLocalElement.index, elementExpr),\n                valueExpr\n              ], valueExpression),\n              this.makeCallDirect(indexedGet, [\n                module.local_get(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                module.local_get(tempLocalElement.index, tempLocalElement.type.toNativeType())\n              ], valueExpression)\n            ], returnType.toNativeType());\n          } else {\n            return this.makeCallDirect(indexedSet, [\n              thisExpr,\n              elementExpr,\n              valueExpr\n            ], valueExpression);\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      valueExpression.range\n    );\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** The local to assign to. */\n    local: Local,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var type = local.type;\n    assert(type != Type.void);\n    var flow = this.currentFlow;\n    var localIndex = local.index;\n\n    if (type.is(TypeFlags.NULLABLE)) {\n      if (flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.WRITTENTO);\n\n    if (type.isManaged) {\n      let module = this.module;\n      let nativeType = type.toNativeType();\n\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n        if (this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeSkippedRelease(\n            module.local_get(localIndex, nativeType), // oldRef\n            valueExpr // newRef\n          );\n          if (tee) { // TEE(local = __skippedRelease(local, value))\n            this.currentType = type;\n            return module.local_tee(localIndex, valueExpr);\n          } else { // local = __skippedRelease(local, value)\n            this.currentType = Type.void;\n            return module.local_set(localIndex, valueExpr);\n          }\n        } else {\n          valueExpr = this.makeRetainRelease(\n            module.local_get(localIndex, nativeType), // oldRef\n            valueExpr // newRef\n          );\n          if (tee) { // TEE(local = __retainRelease(local, value))\n            this.currentType = type;\n            return module.local_tee(localIndex, valueExpr);\n          } else { // local = __retainRelease(local, value)\n            this.currentType = Type.void;\n            return module.local_set(localIndex, valueExpr);\n          }\n        }\n      } else {\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\n        if (!this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeRetain(valueExpr);\n        if (tee) { // TEE(local = __retain(value, local))\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // local = __retain(value, local)\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      }\n    } else {\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n      }\n      if (tee) { // TEE(local = value)\n        this.currentType = type;\n        return this.module.local_tee(localIndex, valueExpr);\n      } else { // local = value\n        this.currentType = Type.void;\n        return this.module.local_set(localIndex, valueExpr);\n      }\n    }\n  }\n\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\n  private makeGlobalAssignment(\n    /** The global to assign to. */\n    global: Global,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var nativeType = type.toNativeType();\n\n    if (type.isManaged) {\n      if (this.skippedAutoreleases.has(valueExpr)) {\n        if (tee) { // (global = __skippedRelease(global, value)), global\n          this.currentType = type;\n          return module.block(null, [\n            module.global_set(global.internalName,\n              this.makeSkippedRelease(\n                module.global_get(global.internalName, nativeType), // oldRef\n                valueExpr // newRef\n              )\n            ),\n            module.global_get(global.internalName, nativeType)\n          ], nativeType);\n        } else { // global = __skippedRelease(global, value)\n          this.currentType = Type.void;\n          return module.global_set(global.internalName,\n            this.makeSkippedRelease(\n              module.global_get(global.internalName, nativeType), // oldRef\n              valueExpr // newRef\n            )\n          );\n        }\n      } else {\n        if (tee) { // (global = __retainRelease(global, value)), global\n          this.currentType = type;\n          return module.block(null, [\n            module.global_set(global.internalName,\n              this.makeRetainRelease(\n                module.global_get(global.internalName, nativeType), // oldRef\n                valueExpr // newRef\n              )\n            ),\n            module.global_get(global.internalName, nativeType)\n          ], nativeType);\n        } else { // global = __retainRelease(global, value)\n          this.currentType = Type.void;\n          return module.global_set(global.internalName,\n            this.makeRetainRelease(\n              module.global_get(global.internalName, nativeType), // oldRef\n              valueExpr // newRef\n            )\n          );\n        }\n      }\n    } else {\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n      if (tee) { // (global = value), global\n        this.currentType = type;\n        return module.block(null, [\n          module.global_set(global.internalName, valueExpr),\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = value\n        this.currentType = Type.void;\n        return module.global_set(global.internalName,\n          valueExpr\n        );\n      }\n    }\n  }\n\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\n  makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var nativeFieldType = fieldType.toNativeType();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n    var nativeThisType = thisType.toNativeType();\n\n    if (fieldType.isManaged && thisType.isManaged) {\n      let tempThis = flow.getTempLocal(thisType);\n      if (this.skippedAutoreleases.has(valueExpr)) {\n        if (tee) { // ((t1 = this).field = __skippedRelease(t1.field, t2 = value)), t2\n          let tempValue = flow.getAndFreeTempLocal(fieldType);\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n          flow.freeTempLocal(tempThis);\n          this.currentType = fieldType;\n          return module.block(null, [\n            module.store(fieldType.byteSize,\n              module.local_tee(tempThis.index, thisExpr),\n              this.makeSkippedRelease(\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                  module.local_get(tempThis.index, nativeThisType),\n                  nativeFieldType, field.memoryOffset\n                ),\n                module.local_tee(tempValue.index, valueExpr), // newRef\n              ),\n              nativeFieldType, field.memoryOffset\n            ),\n            module.local_get(tempValue.index, nativeFieldType)\n          ], nativeFieldType);\n        } else { // (t1 = this).field = __skippedRelease(t1.field, value)\n          flow.freeTempLocal(tempThis);\n          this.currentType = Type.void;\n          return module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeSkippedRelease(\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              valueExpr, // newRef\n            ),\n            nativeFieldType, field.memoryOffset\n          );\n        }\n      } else {\n        if (tee) { // ((t1 = this).field = __retainRelease(t1.field, t2 = value)), t2\n          let tempValue = flow.getAndFreeTempLocal(fieldType);\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n          flow.freeTempLocal(tempThis);\n          this.currentType = fieldType;\n          return module.block(null, [\n            module.store(fieldType.byteSize,\n              module.local_tee(tempThis.index, thisExpr),\n              this.makeRetainRelease(\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                  module.local_get(tempThis.index, nativeThisType),\n                  nativeFieldType, field.memoryOffset\n                ),\n                module.local_tee(tempValue.index, valueExpr) // newRef\n              ),\n              nativeFieldType, field.memoryOffset\n            ),\n            module.local_get(tempValue.index, nativeFieldType)\n          ], nativeFieldType);\n        } else { // (t1 = this).field = __retainRelease(t1.field, value)\n          flow.freeTempLocal(tempThis);\n          this.currentType = Type.void;\n          return module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeRetainRelease(\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              valueExpr // newRef\n            ),\n            nativeFieldType, field.memoryOffset\n          );\n        }\n      }\n    } else {\n      if (tee) { // (this.field = (t1 = value)), t1\n        let tempValue = flow.getAndFreeTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n        this.currentType = fieldType;\n        return module.block(null, [\n          module.store(fieldType.byteSize,\n            thisExpr,\n            module.local_tee(tempValue.index, valueExpr),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(tempValue.index, nativeFieldType)\n        ], nativeFieldType);\n      } else { // this.field = value\n        this.currentType = Type.void;\n        return module.store(fieldType.byteSize,\n          thisExpr,\n          valueExpr,\n          nativeFieldType, field.memoryOffset\n        );\n      }\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Contextual flags indicating contextual conditions. */\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let baseClassInstance = assert((<Class>classInstance).base);\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      // {\n      //   this = super(this || <ALLOC>, ...args)\n      //   this.a = X\n      //   this.b = Y\n      // }\n      let stmts: ExpressionRef[] = [\n        module.local_set(thisLocal.index,\n          this.compileCallDirect(\n            this.ensureConstructor(baseClassInstance, expression),\n            expression.arguments,\n            expression,\n            module.if(\n              module.local_get(thisLocal.index, nativeSizeType),\n              module.local_get(thisLocal.index, nativeSizeType),\n              this.makeRetain(\n                this.makeAllocation(<Class>classInstance)\n              )\n            )\n          )\n        )\n      ];\n      this.makeFieldInitialization(<Class>classInstance, stmts);\n\n      // check that super had been called before accessing allocating `this`\n      if (flow.isAny(\n        FlowFlags.ALLOCATES |\n        FlowFlags.CONDITIONALLY_ALLOCATES\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.block(null, stmts);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.resolveExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n        let typeArguments = expression.typeArguments;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let instance: Function | null = null;\n\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n          if (!prototype.is(CommonFlags.GENERIC)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              expression.expression.range, prototype.internalName\n            );\n            return module.unreachable();\n          }\n          instance = this.resolver.resolveFunctionInclTypeArguments(\n            prototype,\n            typeArguments,\n            flow.actualFunction.parent, // relative to caller\n            makeMap<string,Type>(flow.contextualTypeArguments),\n            expression\n          );\n\n        // infer generic call if type arguments have been omitted\n        } else if (prototype.is(CommonFlags.GENERIC)) {\n          let inferredTypes = new Map<string,Type | null>();\n          let typeParameterNodes = assert(prototype.typeParameterNodes);\n          let numTypeParameters = typeParameterNodes.length;\n          for (let i = 0; i < numTypeParameters; ++i) {\n            inferredTypes.set(typeParameterNodes[i].name.text, null);\n          }\n          // let numInferred = 0;\n          let parameterNodes = prototype.signatureNode.parameters;\n          let numParameters = parameterNodes.length;\n          let argumentNodes = expression.arguments;\n          let numArguments = argumentNodes.length;\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\n          for (let i = 0; i < numParameters; ++i) {\n            let typeNode = parameterNodes[i].type;\n            let templateName = typeNode.kind == NodeKind.TYPE && !(<TypeNode>typeNode).name.next\n              ? (<TypeNode>typeNode).name.identifier.text\n              : null;\n            let argumentExpression = i < numArguments\n              ? argumentNodes[i]\n              : parameterNodes[i].initializer;\n            if (!argumentExpression) { // missing initializer -> too few arguments\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                expression.range, numParameters.toString(10), numArguments.toString(10)\n              );\n              return module.unreachable();\n            }\n            if (templateName !== null && inferredTypes.has(templateName)) {\n              let inferredType = inferredTypes.get(templateName);\n              if (inferredType) {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType);\n                let commonType: Type | null;\n                if (!(commonType = Type.commonDenominator(inferredType, this.currentType, true))) {\n                  if (!(commonType = Type.commonDenominator(inferredType, this.currentType, false))) {\n                    this.error(\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                      parameterNodes[i].type.range, this.currentType.toString(), inferredType.toString()\n                    );\n                    return module.unreachable();\n                  }\n                }\n                inferredType = commonType;\n              } else {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32);\n                inferredType = this.currentType;\n                // ++numInferred;\n              }\n              inferredTypes.set(templateName, inferredType);\n            } else {\n              let concreteType = this.resolver.resolveType(\n                parameterNodes[i].type,\n                flow.actualFunction,\n                flow.contextualTypeArguments\n              );\n              if (!concreteType) return module.unreachable();\n              argumentExprs[i] = this.compileExpression(argumentExpression, concreteType, ContextualFlags.IMPLICIT);\n            }\n          }\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let inferredType = assert(inferredTypes.get(typeParameterNodes[i].name.text)); // TODO\n            resolvedTypeArguments[i] = inferredType;\n          }\n          instance = this.resolver.resolveFunction(\n            prototype,\n            resolvedTypeArguments,\n            makeMap<string,Type>(flow.contextualTypeArguments)\n          );\n          if (!instance) return this.module.unreachable();\n          return this.makeCallDirect(instance, argumentExprs, expression, contextualType == Type.void);\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\n          // so inlining can be performed in `makeCallDirect` instead?\n\n        // otherwise resolve the non-generic call as usual\n        } else {\n          instance = this.resolver.resolveFunction(prototype, null);\n        }\n        if (!instance) return this.module.unreachable();\n\n        // compile 'this' expression if an instance method\n        let thisExpr: ExpressionRef = 0;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          thisExpr = this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType\n          );\n        }\n\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          thisExpr,\n          contextualFlags\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.i32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.local_get((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.global_get((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType\n          );\n          indexArg = module.load(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type, ContextualFlags.IMPLICIT);\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\n        if (!getterInstance) return module.unreachable();\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\n          this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType\n          )\n        );\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    var expr = compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n    if (!expr) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      return this.module.unreachable();\n    }\n    return expr;\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    contextualFlags: ContextualFlags = ContextualFlags.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let expr = this.compileCallInlinePrechecked(instance, argumentExpressions, thisArg, (contextualFlags & ContextualFlags.WILL_DROP) != 0);\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        ContextualFlags.IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    if (signature.returnType.isManaged) {\n      if (contextualFlags & ContextualFlags.WILL_DROP) {\n        // Skip autorelease and simply release\n        return this.makeCallDirect(instance, operands, reportNode, true);\n      } else if (contextualFlags & ContextualFlags.SKIP_AUTORELEASE) {\n        // Skip autorelease and remember\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\n        this.skippedAutoreleases.add(expr);\n        return expr;\n      } else {\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\n      }\n    }\n    return this.makeCallDirect(instance, operands, reportNode,\n      (contextualFlags & ContextualFlags.WILL_DROP) != 0\n    );\n  }\n\n  compileCallInline(\n    instance: Function,\n    argumentExpressions: Expression[],\n    thisArg: ExpressionRef,\n    reportNode: Node,\n    canAlias: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = instance.signature.returnType;\n      return this.module.unreachable();\n    }\n    return this.compileCallInlinePrechecked(instance, argumentExpressions, thisArg, canAlias);\n  }\n\n  private compileCallInlinePrechecked(\n    instance: Function,\n    argumentExpressions: Expression[],\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    assert(numArguments <= parameterTypes.length);\n    var args = new Array<ExpressionRef>(numArguments);\n    for (let i = 0; i < numArguments; ++i) {\n      args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        ContextualFlags.IMPLICIT\n      );\n    }\n    return this.makeCallInlinePrechecked(instance, args, thisArg, immediatelyDropped);\n  }\n\n  makeCallInlinePrechecked(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // Normal function wouldn't know about wrap/nonnull states, but inlining does:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      if (paramType.isManaged) {\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n        body.unshift(\n          module.local_set(argumentLocal.index,\n            this.makeRetain(paramExpr)\n          )\n        );\n      } else {\n        body.unshift(\n          module.local_set(argumentLocal.index, paramExpr)\n        );\n      }\n    }\n    if (thisArg) {\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, usedLocals);\n      // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg)\n      );\n      let baseInstance = (<Class>classInstance).base;\n      if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.signatureNode.parameters[i].initializer),\n        initType,\n        ContextualFlags.IMPLICIT\n      );\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      if (initType.isManaged) {\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n        body.push(\n          module.local_set(argumentLocal.index,\n            this.makeRetain(initExpr)\n          )\n        );\n      } else {\n        body.push(\n          module.local_set(argumentLocal.index, initExpr)\n        );\n      }\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // Free any new scoped locals and reset to the original flow\n    if (!flow.isAny(FlowFlags.ANY_TERMINATING)) {\n      this.performAutoreleases(flow, body);\n      this.finishAutoreleases(flow, body);\n    }\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return expr;\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.signatureNode.parameters;\n    var commonReturnType = originalSignature.returnType;\n    var commonThisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\n    trampolineSignature.requiredParameters = maxArguments;\n    trampolineSignature.parameterNames = originalSignature.parameterNames;\n    trampoline = new Function(\n      original.name + \"|trampoline\",\n      original.prototype,\n      trampolineSignature,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFlow = this.currentFlow;\n    this.currentFlow = trampoline.flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(BuiltinSymbols.argc, NativeType.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(BuiltinSymbols.argc, NativeType.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.local_set(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            ContextualFlags.IMPLICIT\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      body = module.block(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n    }\n    this.currentFlow = previousFlow;\n    assert(operandIndex == maxOperands);\n\n    var funcRef = module.addFunction(\n      trampoline.internalName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        trampolineSignature.returnType,\n        trampolineSignature.thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.block(null, [\n        body,\n        module.call(\n          originalName,\n          forwardedOperands,\n          commonReturnType.toNativeType()\n        )\n      ], commonReturnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        BuiltinSymbols.argc,\n        NativeType.I32,\n        true,\n        module.i32(0)\n      );\n    }\n    return BuiltinSymbols.argc;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(BuiltinSymbols.setargc,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.global_set(this.ensureArgcVar(),\n          module.local_get(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(BuiltinSymbols.setargc, \"__setargc\");\n    }\n    return BuiltinSymbols.setargc;\n  }\n\n  // <reference-counting>\n\n  /** Makes retain call, retaining the expression's value. */\n  makeRetain(expr: ExpressionRef): ExpressionRef {\n    var retainInstance = this.program.retainInstance;\n    this.compileFunction(retainInstance);\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\n  }\n\n  /** Makes a retainRelease call, retaining the new expression's value and releasing the old expression's value, in this order. */\n  makeRetainRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\n    // if ((t1=newExpr) != (t2=oldExpr)) {\n    //   __retain(t1);\n    //   __release(t2);\n    // }, t1\n    var module = this.module;\n    var flow = this.currentFlow;\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = this.options.nativeSizeType;\n    var temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\n    var temp2 = flow.getAndFreeTempLocal(usizeType);\n    flow.freeTempLocal(temp1);\n    return module.block(null, [\n      module.if(\n        module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n          module.local_tee(temp1.index, newExpr),\n          module.local_tee(temp2.index, oldExpr)\n        ),\n        module.block(null, [\n          module.drop(\n            this.makeRetain(module.local_get(temp1.index, nativeSizeType))\n          ),\n          this.makeRelease(module.local_get(temp2.index, nativeSizeType))\n        ])\n      ),\n      module.local_get(temp1.index, nativeSizeType)\n    ], nativeSizeType);\n  }\n\n  /** Makes a skippedRelease call, ignoring the new expression's value and releasing the old expression's value, in this order. */\n  makeSkippedRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\n    // TODO: this helper can be eliminated altogether if the current logic holds\n    // (t1=newExpr), __release(oldExpr), t1\n    var module = this.module;\n    var flow = this.currentFlow;\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = this.options.nativeSizeType;\n    var temp = flow.getAndFreeTempLocal(usizeType, findUsedLocals(oldExpr));\n    return module.block(null, [\n      module.local_set(temp.index, newExpr),\n      this.makeRelease(oldExpr),\n      module.local_get(temp.index, nativeSizeType)\n    ], nativeSizeType);\n  }\n\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\n  makeRelease(expr: ExpressionRef): ExpressionRef {\n    var releaseInstance = this.program.releaseInstance;\n    this.compileFunction(releaseInstance);\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\n  }\n\n  /** Makes an automatic release call at the end of the current flow. */\n  makeAutorelease(expr: ExpressionRef, flow: Flow = this.currentFlow): ExpressionRef {\n    return this.module.local_tee(flow.getAutoreleaseLocal(this.options.usizeType).index, expr);\n  }\n\n  /** Attempts to undo a final autorelease, returning the index of the previously retaining variable or -1 if not possible. */\n  undoAutorelease(expr: ExpressionRef, flow: Flow): i32 {\n    // NOTE: Can't remove the local.tee completely because it's already compiled\n    // and a child of something else. Preventing the final release however should\n    // make it optimize away.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: { // local.tee(__retain(expr))\n        if (isLocalTee(expr)) {\n          let index = getLocalSetIndex(expr);\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n            // Assumes that the expression actually belongs to the flow and that\n            // top-level autoreleases are never undone. While that's true, it's\n            // not necessary to check presence in scopedLocals.\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n            return index;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Block: { // { ..., local.tee(__retain(expr)) }\n        if (getBlockName(expr) === null) { // must not be a break target\n          let count = getBlockChildCount(expr);\n          if (count) {\n            return this.undoAutorelease(getBlockChild(expr, count - 1), flow);\n          }\n        }\n        break;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Attemps to move a final autorelease from one flow to a parent.\n   * It is crucial that from flow hasn't processed autoreleases yet because otherwise the final\n   * retain would have been written already.\n   */\n  moveAutorelease(expr: ExpressionRef, fromInnerFlow: Flow, toOuterFlow: Flow): ExpressionRef {\n    // NOTE: While this avoids an unnecessary set of retain and release, it cannot\n    // eliminate the now unnecessary temporary local.tee because it is already part of\n    // another expression in the tree. But optimizing should collapse locals again.\n    var index = this.undoAutorelease(expr, fromInnerFlow);\n    return ~index\n      ? this.makeAutorelease(expr, toOuterFlow) // undone, can skip the retain\n      : this.makeAutorelease(this.makeRetain(expr), toOuterFlow);\n  }\n\n  /** Performs any queued autoreleases in the specified flow. */\n  performAutoreleases(flow: Flow, stmts: ExpressionRef[], clearFlags: bool = true): void {\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      let module = this.module;\n      for (let local of scopedLocals.values()) {\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          let localIndex = local.index;\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n            if (clearFlags) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n            stmts.push(\n              this.makeRelease(\n                module.local_get(localIndex, local.type.toNativeType())\n              )\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /** Performs any queued autoreleases in the specified flow and returns the value. */\n  performAutoreleasesWithValue(\n    flow: Flow,\n    valueExpr: ExpressionRef,\n    valueType: Type,\n    stmts: ExpressionRef[] | null = null,\n    clearFlags: bool = true\n  ): ExpressionRef {\n    if (!stmts) stmts = new Array<ExpressionRef>();\n    stmts.push(\n      this.module.nop()\n    );\n    var lengthBefore = stmts.length;\n    this.performAutoreleases(flow, stmts, clearFlags);\n    if (stmts.length > lengthBefore) {\n      let nativeType = valueType.toNativeType();\n      let temp = flow.getAndFreeTempLocal(valueType);\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      let module = this.module;\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\n      stmts.push(\n        module.local_get(temp.index, nativeType) // append get\n      );\n      return module.block(null, stmts, nativeType);\n    } else if (stmts.length > 1) {\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\n      return this.module.block(null, stmts, valueType.toNativeType());\n    }\n    return valueExpr;\n  }\n\n  /** Finishes any queued top-level autoreleases in the actual function of the specified flow. */\n  finishAutoreleases(flow: Flow, stmts: ExpressionRef[]): void {\n    var module = this.module;\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      // traverse to the top-most flow containing the inlined function's\n      // locals as scoped locals and release these instead.\n      let parent: Flow | null;\n      while (parent = flow.parent) flow = parent;\n      this.performAutoreleases(flow, stmts, false);\n    } else {\n      for (let local of flow.parentFunction.localsByIndex) {\n        let localIndex = local.index;\n        if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n          flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n          stmts.push(\n            this.makeRelease(\n              module.local_get(localIndex, local.type.toNativeType())\n            )\n          );\n        }\n      }\n    }\n  }\n\n  // </reference-counting>\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false,\n    /** Skip the usual autorelease and manage this at the callsite instead. */\n    skipAutorelease: bool = false\n  ): ExpressionRef {\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      this.warning(\n        DiagnosticCode.TODO_Cannot_inline_inferred_calls_and_specific_internals_yet,\n        reportNode.range, instance.internalName\n      );\n    }\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.signatureNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          let resolved: Element | null;\n          if (\n            nodeIsConstantValue(initializer.kind) ||\n            (\n              (resolved = this.resolver.resolveExpression(initializer, instance.flow, parameterTypes[i])) &&\n              (\n                resolved.kind == ElementKind.GLOBAL\n                // resolved.kind == ElementKind.FUNCTION_TARGET\n              )\n            )\n          ) { // inline into the call\n            let previousFlow = this.currentFlow;\n            this.currentFlow = instance.flow;\n            operands.push(this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              ContextualFlags.IMPLICIT\n            ));\n            this.currentFlow = previousFlow;\n            continue;\n          }\n        }\n        operands.push(parameterTypes[i].toNativeZero(module));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant) {\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.unreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\n          this.currentType = returnType;\n          if (returnType.isManaged) {\n            if (immediatelyDropped) {\n              expr = this.makeRelease(expr);\n              this.currentType = Type.void;\n            } else if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          return module.block(null, [\n            module.global_set(this.ensureArgcVar(), module.i32(numArguments)),\n            expr\n          ], this.currentType.toNativeType());\n        }\n      }\n    }\n\n    // If the return value is of a reference type it has not yet been released but is in flight\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else if (!skipAutorelease) {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        ContextualFlags.IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    var expr = module.call_indirect(indexArg, operands, signature.toSignatureString());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return module.block(null, [\n      module.global_set(this.ensureArgcVar(), // might be calling a trampoline\n        module.i32(numArguments)\n      ),\n      expr\n    ], this.currentType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        ContextualFlags.IMPLICIT | ContextualFlags.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, contextualFlags);\n    return this.module.block(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    var target = this.resolver.resolveElementAccessExpression(\n      expression,\n      this.currentFlow,\n      contextualType\n    ); // reports\n    if (!target) return this.module.unreachable();\n    switch (target.kind) {\n      case ElementKind.CLASS: {\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT));\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.expression.range, (<Class>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        let thisArg = this.compileExpression(expression.expression, (<Class>target).type,\n          ContextualFlags.IMPLICIT\n        );\n        return this.compileCallDirect(indexedGet, [\n          expression.elementExpression\n        ], expression, thisArg, contextualFlags & (ContextualFlags.WILL_DROP | ContextualFlags.SKIP_AUTORELEASE));\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.signatureNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      let parameterNames = new Array<string>(numPresentParameters);\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        parameterNames[i] = parameterNode.name.text; // use actual name\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      let signature = new Signature(parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      signature.parameterNames = parameterNames;\n      instance = new Function(\n        prototype.name,\n        prototype,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.unreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.compileFunctionUsingTypeArguments(\n        prototype,\n        [],\n        contextualTypeArguments\n      );\n      if (!instance) return this.module.unreachable();\n      this.currentType = instance.signature.type;\n    }\n\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.unreachable()\n      : this.module.i32(index);\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = filesByName.get(internalPath)!;\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (!contextualType.classReference) {\n          this.currentType = options.usizeType;\n        }\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let nativeSizeType = this.options.nativeSizeType;\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // {\n              //   if (!this) this = <ALLOC>\n              //   this.a = X\n              //   this.b = Y\n              //   return this\n              // }\n              let stmts: ExpressionRef[] = [\n                module.if(\n                  module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                    module.local_get(thisLocal.index, nativeSizeType)\n                  ),\n                  module.local_set(thisLocal.index,\n                    this.makeRetain(\n                      this.makeAllocation(<Class>classInstance)\n                    )\n                  )\n                )\n              ];\n              this.makeFieldInitialization(<Class>classInstance, stmts);\n              stmts.push(\n                module.local_get(thisLocal.index, nativeSizeType)\n              );\n              this.currentType = thisLocal.type;\n              return module.block(null, stmts, nativeSizeType);\n            }\n          }\n          // if not a constructor, `this` type can differ\n          let thisType = assert(actualFunction.signature.thisType);\n          this.currentType = thisType;\n          return module.local_get(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let baseClassInstance = (<Class>classInstance).base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var target = this.resolver.resolveIdentifier( // reports\n      expression,\n      flow,\n      this.currentEnum || actualFunction\n    );\n    if (!target) return module.unreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, contextualFlags);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        if (type.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          type = type.nonNullableType;\n        }\n        this.currentType = type;\n        return this.module.local_get(localIndex, type.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.unreachable();\n        }\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, contextualFlags);\n        }\n        this.currentType = type;\n        return this.module.global_get((<Global>target).internalName, type.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.module.i32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return this.module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!(instance && this.compileFunction(instance))) return module.unreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.i32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway. also note that the code generated below must preserve side-effects of\n    // the LHS expression even when the result is a constant, i.e. return a block dropping `expr`.\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType);\n    var actualType = this.currentType;\n    var expectedType = this.resolver.resolveType(expression.isType, this.currentFlow.actualFunction);\n    this.currentType = Type.bool;\n    if (!expectedType) return module.unreachable();\n\n    // instanceof <basic> - must be exact\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        this.convertExpression(expr, actualType, Type.void, (contextualFlags & ContextualFlags.EXPLICIT) != 0, false, expression.expression),\n        module.i32(actualType == expectedType ? 1 : 0)\n      ], NativeType.I32);\n    }\n\n    // <basic> instanceof <reference> - always false\n    if (!actualType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        this.convertExpression(expr, actualType, Type.void, (contextualFlags & ContextualFlags.EXPLICIT) != 0,false, expression.expression),\n        module.i32(0)\n      ], NativeType.I32);\n    }\n\n    // both LHS and RHS are references now\n    var nativeSizeType = actualType.toNativeType();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          actualType.toNativeZero(module)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          return module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(tempLocal.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(tempLocal.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.block(null, [\n          this.convertExpression(expr, actualType, Type.void, (contextualFlags & ContextualFlags.EXPLICIT) != 0, false, expression.expression),\n          module.i32(1)\n        ], NativeType.I32);\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          return module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(tempLocal.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(tempLocal.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n        }\n      }\n    }\n\n    // false\n    return module.block(null, [\n      this.convertExpression(expr, actualType, Type.void, (contextualFlags & ContextualFlags.EXPLICIT) != 0, false, expression.expression),\n      module.i32(0)\n    ], NativeType.I32);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    contextualFlags: ContextualFlags,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        let classType = contextualType.classReference;\n        if (classType) {\n          if (classType.prototype == this.program.arrayPrototype) {\n            return this.compileArrayLiteral(\n              assert(classType.typeArguments)[0],\n              (<ArrayLiteralExpression>expression).elementExpressions,\n              false, // TODO: isConst?\n              contextualFlags,\n              expression\n            );\n          }\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.unreachable();\n  }\n\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    isConst: bool,\n    contextualFlags: ContextualFlags,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n    var program = this.program;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n    var arrayType = arrayInstance.type;\n    var flow = this.currentFlow;\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(arrayType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = true;\n    var nativeElementType = elementType.toNativeType();\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr = expression\n        ? module.precomputeExpression(\n            this.compileExpression(<Expression>expression, elementType,\n              ContextualFlags.IMPLICIT\n            )\n          )\n        : elementType.toNativeZero(module);\n      if (getExpressionId(expr) == ExpressionId.Const) {\n        assert(getExpressionType(expr) == nativeElementType);\n      } else {\n        isStatic = false;\n      }\n      values[i] = expr;\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let runtimeHeaderSize = program.runtimeHeaderSize;\n      let bufferSegment = this.ensureStaticArrayBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (contextualFlags & ContextualFlags.STATIC_CAPABLE) {\n        let arraySegment = this.ensureStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        // makeArray(length, alignLog2, classId, staticBuffer)\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], reportNode);\n        this.currentType = arrayType;\n        return this.makeAutorelease(this.makeRetain(expr));\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = makeArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(0)\n            : module.i32(0)\n        ], reportNode),\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStart = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStart.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, nativeArrayType),\n          nativeArrayType,\n          (<Field>dataStart).memoryOffset\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        valueExpr = this.makeRetain(valueExpr);\n      }\n      // store<T>(tempData, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempDataStart.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    this.currentType = arrayType;\n    return module.block(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var flow = this.currentFlow;\n    var tempLocal = flow.getAutoreleaseLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.store( // TODO: handle setters as well\n        type.byteSize,\n        this.module.local_get(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, ContextualFlags.IMPLICIT),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.local_set(\n      tempLocal.index,\n      this.makeRetain(\n        this.makeAllocation(classReference)\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.local_get(tempLocal.index, this.options.nativeSizeType);\n\n    this.currentType = classReference.type;\n    return module.block(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveExpression( // reports\n      expression.expression,\n      flow\n    );\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) contextualFlags |= ContextualFlags.WILL_DROP;\n    return this.compileInstantiate(classInstance, expression.arguments, contextualFlags, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // clone base constructor if a derived class\n    var baseClass = classInstance.base;\n    if (baseClass) {\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          // declaration is important, i.e. to access optional parameter initializers\n          (<FunctionDeclaration>baseCtor.declaration).clone()\n        ),\n        baseCtor.signature,\n        null\n      );\n\n    // otherwise make a default constructor\n    } else {\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n          )\n        ),\n        new Signature(null, classInstance.type, classInstance.type),\n        null\n      );\n    }\n\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    this.currentFlow = instance.flow;\n\n    // generate body\n    var signature = instance.signature;\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    stmts.push(\n      module.if(\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.local_get(0, nativeSizeType)\n        ),\n        module.local_set(0,\n          this.makeRetain(\n            this.makeAllocation(classInstance)\n          )\n        )\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.local_get(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\n      }\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\n      stmts.push(\n        module.local_set(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode)\n        )\n      );\n    }\n    this.makeFieldInitialization(classInstance, stmts);\n    stmts.push(\n      module.local_get(0, nativeSizeType)\n    );\n\n    // make the function\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes,\n      flatten(module, stmts, nativeSizeType)\n    );\n    instance.finalize(module, funcRef);\n    this.currentFlow = previousFlow;\n    return instance;\n  }\n\n  compileInstantiate(\n    /** Class to instantiate. */\n    classInstance: Class,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    contextualFlags: ContextualFlags,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    var expr = this.compileCallDirect( // no need for another autoreleased local\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.options.usizeType.toNativeZero(this.module),\n      contextualFlags\n    );\n    if (getExpressionType(expr) != NativeType.None) { // possibly IMM_DROPPED\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(propertyAccess);\n\n    var target = this.resolver.resolvePropertyAccessExpression(propertyAccess, flow, contextualType); // reports\n    if (!target) return module.unreachable();\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.unreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, contextualFlags);\n        }\n        this.currentType = globalType;\n        return module.global_get((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>theEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return module.i32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpressionRetainType(\n          assert(this.resolver.currentThisExpression),\n          this.options.usizeType\n        );\n        this.currentType = (<Field>target).type;\n        return module.load(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\n        if (getterPrototype) {\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\n          if (getter) return this.compileCallDirect(getter, [], propertyAccess, 0);\n        }\n        return module.unreachable();\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        return this.compileCallDirect(getterInstance, [], propertyAccess,\n          this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType\n          )\n        );\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          propertyAccess.range, (<FunctionPrototype>target).name\n        );\n        return module.unreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.unreachable();\n  }\n\n  compileTernaryExpression(\n    expression: TernaryExpression,\n    contextualType: Type,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var outerFlow = this.currentFlow;\n\n    var condExpr = this.module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpressionRetainType(expression.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileExpressionRetainType(ifThen, contextualType)\n        : this.compileExpressionRetainType(ifElse, contextualType);\n    }\n\n    var ifThenFlow = outerFlow.fork();\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, contextualFlags & ContextualFlags.SKIP_AUTORELEASE);\n    var ifThenType = this.currentType;\n    var IfThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\n\n    var ifElseFlow = outerFlow.fork();\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, contextualFlags & ContextualFlags.SKIP_AUTORELEASE);\n    var ifElseType = this.currentType;\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\n      );\n      this.currentType = contextualType;\n      return this.module.unreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType, commonType,\n      false, false,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType, commonType,\n      false, false,\n      ifElse\n    );\n    this.currentType = commonType;\n\n    if (IfThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\n      if (!IfThenAutoreleaseSkipped) {\n        ifThenExpr = this.makeRetain(ifThenExpr);\n        IfThenAutoreleaseSkipped = true;\n      } else {\n        ifElseExpr = this.makeRetain(ifElseExpr);\n        ifElseAutoreleaseSkipped = true;\n      }\n    } else if (!IfThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\n      // if (!(contextualFlags & ContextualFlags.SKIP_AUTORELEASE)) {\n        ifThenExpr = this.moveAutorelease(ifThenExpr, ifThenFlow, outerFlow);\n        ifElseExpr = this.moveAutorelease(ifElseExpr, ifElseFlow, outerFlow);\n      // }\n    }\n\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\n    ifThenFlow.freeScopedLocals();\n\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var expr = this.module.if(condExpr, ifThenExpr, ifElseExpr);\n    assert(IfThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\n    if (IfThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n    return expr;\n  }\n\n  compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ContextualFlags.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n                if (overload) {\n                  expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.unreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n                if (overload) {\n                  expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.unreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.resolveExpression(expression.operand, flow); // reports\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      this.currentType = Type.void;\n      if (!target) return module.unreachable();\n      return this.makeAssignment(\n        target,\n        expr,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    } else if (!target) {\n      return module.unreachable();\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    contextualFlags: ContextualFlags\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ContextualFlags.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, ContextualFlags.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ContextualFlags.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ContextualFlags.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ContextualFlags.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ContextualFlags.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = this.makeIsFalseish(expr, this.currentType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          ContextualFlags.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.unreachable();\n        } else {\n          expr = this.convertExpression(expr,\n            this.currentType, this.currentType.intType,\n            false, false,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.resolveExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.unary(UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.unary(UnaryOp.EqzI64, expr);\n      }\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\n      case TypeKind.ISIZE: {\n        return module.unary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.EqF32, expr, module.f32(0));\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.EqF64, expr, module.f64(0));\n      }\n      default: {\n        assert(false);\n        return module.i32(1);\n      }\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        return module.binary(BinaryOp.NeF32, expr, module.f32(0));\n      }\n      case TypeKind.F64: {\n        return module.binary(BinaryOp.NeF64, expr, module.f64(0));\n      }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    var allocInstance = program.allocInstance;\n    this.compileFunction(allocInstance);\n    return module.call(allocInstance.internalName, [\n      options.isWasm64\n        ? module.i64(classInstance.currentMemoryOffset)\n        : module.i32(classInstance.currentMemoryOffset),\n      module.i32(\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\n          ? 0\n          : classInstance.id\n      )\n    ], options.nativeSizeType);\n  }\n\n  /** Makes the initializers for a class's fields. */\n  makeFieldInitialization(\n    classInstance: Class,\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return [];\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\n    var thisLocalIndex = isInline\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    for (let member of members.values()) {\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let initializerNode = field.prototype.initializerNode;\n      if (initializerNode) { // use initializer\n        stmts.push(\n          module.store(fieldType.byteSize,\n            module.local_get(thisLocalIndex, nativeSizeType),\n            this.compileExpression(initializerNode, fieldType, // reports\n              ContextualFlags.IMPLICIT\n            ),\n            nativeFieldType,\n            field.memoryOffset\n          )\n        );\n      } else {\n        let parameterIndex = field.prototype.parameterIndex;\n        stmts.push(\n          module.store(fieldType.byteSize,\n            module.local_get(thisLocalIndex, nativeSizeType),\n            parameterIndex >= 0 // initialized via parameter (here: a local)\n              ? module.local_get(\n                  isInline\n                    ? assert(flow.lookupLocal(field.name)).index\n                    : 1 + parameterIndex, // this is local 0\n                  nativeFieldType\n                )\n              : fieldType.toNativeZero(module),\n            nativeFieldType,\n            field.memoryOffset\n          )\n        );\n      }\n    }\n    return stmts;\n  }\n\n  makeInstanceOfClass(\n    expr: ExpressionRef,\n    classInstance: Class\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var idTemp = flow.getTempLocal(Type.i32);\n    var idExpr = module.load(4, false,\n      module.binary(BinaryOp.SubI32,\n        expr,\n        module.i32(this.program.runtimeHeaderSize)\n      ),\n      NativeType.I32\n    );\n    var label = \"instanceof_\" + classInstance.name + \"|\" + flow.pushBreakLabel();\n    var conditions: ExpressionRef[] = [];\n    conditions.push(\n      module.drop( // br_if returns the value too\n        module.br(label,\n          module.binary(BinaryOp.EqI32, // classId == class.id\n            module.local_tee(idTemp.index, idExpr),\n            module.i32(classInstance.id)\n          ),\n          module.i32(1) // ? true\n        )\n      )\n    );\n    // TODO: insert conditions for all possible subclasses (i.e. cat is also animal)\n    // TODO: simplify if there are none\n    conditions.push(\n      module.i32(0) // : false\n    );\n    flow.freeTempLocal(idTemp);\n    flow.popBreakLabel();\n    return module.block(label, conditions, NativeType.I32);\n  }\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n\n/** Flattens a series of expressions to a nop, a single statement or a block depending on statement count. */\nexport function flatten(module: Module, stmts: ExpressionRef[], type: NativeType): ExpressionRef {\n  var length = stmts.length;\n  if (length == 0) return module.nop(); // usually filtered out again\n  if (length == 1) return stmts[0];\n  return module.block(null, stmts,\n    type == NativeType.Auto\n      ? getExpressionType(stmts[length - 1])\n      : type\n  );\n}\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_present_to_use_0 = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Module_cannot_have_multiple_start_functions = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  TODO_Cannot_inline_inferred_calls_and_specific_internals_yet = 224,\n  Expression_is_never_null = 225,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be present to use '{0}'.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Module cannot have multiple start functions.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"TODO: Cannot inline inferred calls and specific internals yet.\";\n    case 225: return \"Expression is never 'null'.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  ContextualFlags,\n  RuntimeFeatures,\n  flatten\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression,\n  CallExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  Relooper,\n  RelooperBlockRef\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  Element\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Symbols of various compiler built-ins. */\nexport namespace BuiltinSymbols {\n  // std/builtins.ts\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const call_direct = \"~lib/builtins/call_direct\";\n  export const call_indirect = \"~lib/builtins/call_indirect\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n  export const void_ = \"~lib/builtins/void\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_u_xor = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_u_xor = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc = \"~lib/builtins/v128.trunc\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_s_f32x4_sat = \"~lib/builtins/i32x4.trunc_s_f32x4_sat\";\n  export const i32x4_trunc_u_f32x4_sat = \"~lib/builtins/i32x4.trunc_u_f32x4_sat\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_s_f64x2_sat = \"~lib/builtins/i64x2.trunc_s_f64x2_sat\";\n  export const i64x2_trunc_u_f64x2_sat = \"~lib/builtins/i64x2.trunc_u_f64x2_sat\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_s_i32x4 = \"~lib/builtins/f32x4.convert_s_i32x4\";\n  export const f32x4_convert_u_i32x4 = \"~lib/builtins/f32x4.convert_u_i32x4\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_s_i64x2 = \"~lib/builtins/f64x2.convert_s_i64x2\";\n  export const f64x2_convert_u_i64x2 = \"~lib/builtins/f64x2.convert_u_i64x2\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n\n  // internals\n  export const heap_base = \"~lib/heap/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  export const memory_allocate = \"~lib/memory/memory.allocate\";\n  export const memory_free = \"~lib/memory/memory.free\";\n  export const memory_reset = \"~lib/memory/memory.reset\";\n\n  // std/runtime.ts\n  export const runtime_instanceof = \"~lib/runtime/runtime.instanceof\";\n  export const runtime_flags = \"~lib/runtime/runtime.flags\";\n  export const runtime_allocate = \"~lib/util/runtime/allocate\";\n  export const runtime_reallocate = \"~lib/util/runtime/reallocate\";\n  export const runtime_register = \"~lib/util/runtime/register\";\n  export const runtime_discard = \"~lib/util/runtime/discard\";\n  export const runtime_makeArray = \"~lib/util/runtime/makeArray\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n\n  // compiler generated\n  export const started = \"~lib/started\";\n  export const argc = \"~lib/argc\";\n  export const setargc = \"~lib/setargc\";\n  export const capabilities = \"~lib/capabilities\";\n}\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  /* Compiler reference. */\n  compiler: Compiler,\n  /** Respective function prototype. */\n  prototype: FunctionPrototype,\n  /** Pre-resolved type arguments. */\n  typeArguments: Type[] | null,\n  /** Operand expressions. */\n  operands: Expression[],\n  /** Contextual type. */\n  contextualType: Type,\n  /** Respective call expression. */\n  reportNode: CallExpression,\n  /** Indicates that contextual type is ASM type. */\n  isAsm: bool = false\n): ExpressionRef {\n  var module = compiler.module;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\n  // search: createSelect\n\n  // NOTE that consolidation of individual instructions into a single case isn't exactly scientific\n  // below, but rather done to make this file easier to work with. If there was a general rule it'd\n  // most likely be \"three or more instructions that only differ in their actual opcode\".\n\n  var directize = false;\n\n  switch (prototype.internalName) {\n\n    // === Static type evaluation =================================================================\n\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isBoolean: { // isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type == Type.bool\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      let classType = type.classReference;\n      if (classType) {\n        let stringInstance = compiler.program.stringInstance;\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.i32(1);\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      let classReference = type.classReference;\n      if (!classReference) return module.i32(0);\n      let classPrototype = classReference.prototype;\n      return module.i32(classPrototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\n    }\n    case BuiltinSymbols.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      let classReference = type.classReference;\n      if (!classReference) return module.i32(0);\n      return module.i32(classReference.isArrayLike ? 1 : 0);\n    }\n    case BuiltinSymbols.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.signatureReference ? 1 : 0);\n    }\n    case BuiltinSymbols.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\n    }\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let element = compiler.resolver.resolveExpression(\n        operands[0],\n        compiler.currentFlow,\n        Type.void,\n        ReportMode.SWALLOW\n      );\n      return module.i32(element ? 1 : 0);\n    }\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.i32);\n      compiler.currentType = Type.bool;\n      return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case BuiltinSymbols.isManaged: { // isManaged<T>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.isManaged ? 1 : 0);\n    }\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      let expr: ExpressionRef;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          expr = module.i32(byteSize);\n        } else {\n          expr = module.i64(byteSize, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          expr = module.i64(byteSize, 0);\n        } else {\n          expr = module.i32(byteSize);\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      assert(isPowerOf2(byteSize));\n      let alignLog2 = ctz<i32>(byteSize);\n      let expr: ExpressionRef;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          expr = module.i32(alignLog2);\n        } else {\n          expr = module.i64(alignLog2, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          expr = module.i64(alignLog2, 0);\n        } else {\n          expr = module.i32(alignLog2);\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let classType = typeArguments![0].classReference;\n      if (!classType) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.unreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.unreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(offset);\n        } else {\n          return module.i64(offset);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(offset);\n        } else {\n          return module.i32(offset);\n        }\n      }\n    }\n\n    // === Math ===================================================================================\n\n    case BuiltinSymbols.clz: // any_bitcount<T?>(value: T) -> T\n    case BuiltinSymbols.ctz:\n    case BuiltinSymbols.popcnt: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT | ContextualFlags.WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, ContextualFlags.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.clz: {\n          switch (type.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.ClzI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.ClzI64\n                : UnaryOp.ClzI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.ClzI64; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.ctz: {\n          switch (type.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.CtzI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.CtzI64\n                : UnaryOp.CtzI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.CtzI64; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.popcnt: {\n          switch (compiler.currentType.kind) {\n            case TypeKind.BOOL:\n            case TypeKind.I8:\n            case TypeKind.U8:\n            case TypeKind.I16:\n            case TypeKind.U16:\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.PopcntI32; break; }\n            case TypeKind.USIZE:\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.PopcntI64\n                : UnaryOp.PopcntI32;\n              break;\n            }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.PopcntI64; break; }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT | ContextualFlags.WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, ContextualFlags.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ContextualFlags.IMPLICIT);\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          expr = compiler.ensureSmallIntegerWrap(\n            module.binary(BinaryOp.RotlI32, arg0, arg1),\n            type\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          expr = module.binary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.ISIZE: {\n          expr = module.binary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0, arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          expr = module.binary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr; // possibly overflows\n    }\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT | ContextualFlags.WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, ContextualFlags.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ContextualFlags.IMPLICIT);\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          expr = compiler.ensureSmallIntegerWrap(\n            module.binary(BinaryOp.RotrI32, arg0, arg1),\n            type\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          expr = module.binary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.ISIZE: {\n          expr = module.binary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0, arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          expr = module.binary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr; // possibly overflowws\n    }\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT | ContextualFlags.WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, ContextualFlags.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFlow;\n\n          // possibly overflows, e.g. abs<i8>(-128) == 128\n          let tempLocal1 = flow.getTempLocal(Type.i32);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i32).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          // (x + (x >> 31)) ^ (x >> 31)\n          expr = module.binary(BinaryOp.XorI32,\n            module.binary(BinaryOp.AddI32,\n              module.local_tee(\n                tempLocalIndex2,\n                module.binary(BinaryOp.ShrI32,\n                  module.local_tee(tempLocalIndex1, arg0),\n                  module.i32(31)\n                )\n              ),\n              module.local_get(tempLocalIndex1, NativeType.I32)\n            ),\n            module.local_get(tempLocalIndex2, NativeType.I32)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let options = compiler.options;\n          let flow = compiler.currentFlow;\n          let wasm64 = options.isWasm64;\n\n          let tempLocal1 = flow.getTempLocal(options.usizeType);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(options.usizeType).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          expr = module.binary(wasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n            module.binary(wasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n              module.local_tee(\n                tempLocalIndex2,\n                module.binary(wasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                  module.local_tee(tempLocalIndex1, arg0),\n                  wasm64 ? module.i64(63) : module.i32(31)\n                )\n              ),\n              module.local_get(tempLocalIndex1, options.nativeSizeType)\n            ),\n            module.local_get(tempLocalIndex2, options.nativeSizeType)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.I64: {\n          let flow = compiler.currentFlow;\n\n          let tempLocal1 = flow.getTempLocal(Type.i64);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i64).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          // (x + (x >> 63)) ^ (x >> 63)\n          expr = module.binary(BinaryOp.XorI64,\n            module.binary(BinaryOp.AddI64,\n              module.local_tee(\n                tempLocalIndex2,\n                module.binary(BinaryOp.ShrI64,\n                  module.local_tee(tempLocalIndex1, arg0),\n                  module.i64(63)\n                )\n              ),\n              module.local_get(tempLocalIndex1, NativeType.I64)\n            ),\n            module.local_get(tempLocalIndex2, NativeType.I64)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.USIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT | ContextualFlags.WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, ContextualFlags.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ContextualFlags.IMPLICIT | ContextualFlags.WRAP);\n      let op: BinaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n        case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n        case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n        case TypeKind.ISIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.GtI64\n            : BinaryOp.GtI32;\n          break;\n        }\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.GtU64\n            : BinaryOp.GtU32;\n          break;\n        }\n        case TypeKind.F32: {\n          return module.binary(BinaryOp.MaxF32, arg0, arg1);\n        }\n        case TypeKind.F64: {\n          return module.binary(BinaryOp.MaxF64, arg0, arg1);\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let tempLocal0 = flow.getTempLocal(type);\n      flow.setLocalFlag(tempLocal0.index, LocalFlags.WRAPPED);\n      let tempLocal1 = flow.getAndFreeTempLocal(type);\n      flow.setLocalFlag(tempLocal1.index, LocalFlags.WRAPPED);\n      flow.freeTempLocal(tempLocal0);\n      return module.select(\n        module.local_tee(tempLocal0.index, arg0),\n        module.local_tee(tempLocal1.index, arg1),\n        module.binary(op,\n          module.local_get(tempLocal0.index, nativeType),\n          module.local_get(tempLocal1.index, nativeType)\n        )\n      );\n    }\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT | ContextualFlags.WRAP)\n        : compiler.compileExpression(operands[0], Type.f64, ContextualFlags.WRAP);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ContextualFlags.IMPLICIT | ContextualFlags.WRAP);\n      let op: BinaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n        case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n        case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n        case TypeKind.ISIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.LtI64\n            : BinaryOp.LtI32;\n          break;\n        }\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? BinaryOp.LtU64\n            : BinaryOp.LtU32;\n          break;\n        }\n        case TypeKind.F32: {\n          return module.binary(BinaryOp.MinF32, arg0, arg1);\n        }\n        case TypeKind.F64: {\n          return module.binary(BinaryOp.MinF64, arg0, arg1);\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      let flow = compiler.currentFlow;\n      let nativeType = type.toNativeType();\n      let tempLocal0 = flow.getTempLocal(type);\n      flow.setLocalFlag(tempLocal0.index, LocalFlags.WRAPPED);\n      let tempLocal1 = flow.getAndFreeTempLocal(type);\n      flow.setLocalFlag(tempLocal1.index, LocalFlags.WRAPPED);\n      flow.freeTempLocal(tempLocal0);\n      return module.select(\n        module.local_tee(tempLocal0.index, arg0),\n        module.local_tee(tempLocal1.index, arg1),\n        module.binary(op,\n          module.local_get(tempLocal0.index, nativeType),\n          module.local_get(tempLocal1.index, nativeType)\n        )\n      );\n    }\n    case BuiltinSymbols.ceil: // any_rounding<T?>(value: T) -> T\n    case BuiltinSymbols.floor: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, ContextualFlags.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let op: UnaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: return arg0; // considered rounded\n        case TypeKind.F32: {\n          op = prototype.internalName == BuiltinSymbols.ceil\n            ? UnaryOp.CeilF32\n            : UnaryOp.FloorF32;\n          break;\n        }\n        case TypeKind.F64: {\n          op = prototype.internalName == BuiltinSymbols.ceil\n            ? UnaryOp.CeilF64\n            : UnaryOp.FloorF64;\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, ContextualFlags.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ContextualFlags.IMPLICIT);\n      let op: BinaryOp;\n      switch (type.kind) {\n        // TODO: does an integer version make sense?\n        case TypeKind.F32: { op = BinaryOp.CopysignF32; break; }\n        case TypeKind.F64: { op = BinaryOp.CopysignF64; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          return module.unreachable();\n        }\n      }\n      return module.binary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, ContextualFlags.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.currentType = type;\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          let arg0 = compiler.compileExpression(operands[0], Type.f32, ContextualFlags.IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          let arg0 = compiler.compileExpression(operands[0], Type.f64, ContextualFlags.IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          let arg0 = compiler.compileExpression(operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32,\n            ContextualFlags.IMPLICIT\n          );\n          expr = module.unary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          let arg0 = compiler.compileExpression(operands[0], Type.i32, ContextualFlags.IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          let arg0 = compiler.compileExpression(operands[0], Type.i64, ContextualFlags.IMPLICIT);\n          expr = module.unary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      compiler.currentType = type;\n      return expr;\n    }\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, ContextualFlags.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.currentType = type;\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, ContextualFlags.NONE);\n      let type = compiler.currentType;\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.unreachable();\n      }\n      let expr: ExpressionRef;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.BOOL: {\n          expr = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          expr = module.unary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          expr = module.unary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          expr = module.unreachable();\n          break;\n        }\n      }\n      return expr;\n    }\n\n    // === Memory access ==========================================================================\n\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        ContextualFlags.IMPLICIT\n      );\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = outType;\n      return module.load(\n        type.byteSize,\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        outType.toNativeType(),\n        immOffset,\n        immAlign\n      );\n    }\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        ContextualFlags.IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            ContextualFlags.IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? ContextualFlags.NONE // no need to convert to small int (but now might result in a float)\n              : ContextualFlags.IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (operands.length == 4) {\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[3].range, \"Alignment\"\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.void;\n      return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n    }\n\n    // === Atomics ================================================================================\n\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        ContextualFlags.IMPLICIT\n      );\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      compiler.currentType = outType;\n      return module.atomic_load(\n        type.byteSize,\n        arg0,\n        outType.toNativeType(),\n        immOffset\n      );\n    }\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        ContextualFlags.IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            ContextualFlags.IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? ContextualFlags.NONE // no need to convert to small int (but now might result in a float)\n              : ContextualFlags.IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n    }\n    case BuiltinSymbols.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\n    case BuiltinSymbols.atomic_sub:\n    case BuiltinSymbols.atomic_and:\n    case BuiltinSymbols.atomic_or:\n    case BuiltinSymbols.atomic_xor:\n    case BuiltinSymbols.atomic_xchg: {\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        ContextualFlags.IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            ContextualFlags.IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? ContextualFlags.NONE // no need to convert to small int (but now might result in a float)\n              : ContextualFlags.IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      let op: AtomicRMWOp;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.atomic_add:  { op = AtomicRMWOp.Add;  break; }\n        case BuiltinSymbols.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\n        case BuiltinSymbols.atomic_and:  { op = AtomicRMWOp.And;  break; }\n        case BuiltinSymbols.atomic_or:   { op = AtomicRMWOp.Or;   break; }\n        case BuiltinSymbols.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\n        case BuiltinSymbols.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\n      }\n      compiler.currentType = inType;\n      return module.atomic_rmw(\n        op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType()\n      );\n    }\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize): T\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        ContextualFlags.IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            ContextualFlags.IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? ContextualFlags.NONE // no need to convert to small int (but now might result in a float)\n              : ContextualFlags.IMPLICIT\n          );\n      let inType = compiler.currentType;\n      let arg2 = compiler.compileExpression(operands[2],\n        inType,\n        ContextualFlags.IMPLICIT\n      );\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        arg2 = compiler.convertExpression(arg2,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[2]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      compiler.currentType = inType;\n      return module.atomic_cmpxchg(\n        type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType()\n      );\n    }\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64): i32;\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        ContextualFlags.IMPLICIT\n      );\n      let arg1 = compiler.compileExpression(operands[1], type,\n        ContextualFlags.IMPLICIT\n      );\n      let arg2 = compiler.compileExpression(operands[2],\n        Type.i64,\n        ContextualFlags.IMPLICIT\n      );\n      compiler.currentType = Type.i32;\n      return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n    }\n    case BuiltinSymbols.atomic_notify: { // notify(ptr: usize, count: i32): i32;\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        ContextualFlags.IMPLICIT\n      );\n      let arg1 = compiler.compileExpression(operands[1],\n        Type.i32,\n        ContextualFlags.IMPLICIT\n      );\n      compiler.currentType = Type.i32;\n      return module.atomic_notify(arg0, arg1);\n    }\n\n    // === Control flow ===========================================================================\n\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT)\n        : compiler.compileExpressionRetainType(operands[0], Type.i32);\n      let type = compiler.currentType;\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, ContextualFlags.IMPLICIT);\n      let arg2 = compiler.makeIsTrueish(\n        compiler.compileExpressionRetainType(operands[2], Type.bool),\n        compiler.currentType // ^\n      );\n      compiler.currentType = type;\n      return module.select(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      checkArgsRequired(operands, 0, reportNode, compiler);\n      return module.unreachable();\n    }\n\n    // === Memory =================================================================================\n\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemorySize);\n    }\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemoryGrow, null, [\n        compiler.compileExpression(operands[0], Type.i32, ContextualFlags.IMPLICIT)\n      ]);\n    }\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, ContextualFlags.IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], usizeType, ContextualFlags.IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, ContextualFlags.IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_copy(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, ContextualFlags.IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u8, ContextualFlags.IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, ContextualFlags.IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_fill(arg0, arg1, arg2);\n    }\n\n    // === Helpers ================================================================================\n\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let toType = typeArguments![0];\n      let arg0 = compiler.compileExpressionRetainType(operands[0], toType);\n      let fromType = compiler.currentType;\n      compiler.currentType = toType;\n      if (fromType.size != toType.size) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.unreachable();\n      }\n      return arg0;\n    }\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) {\n        if (typeArguments) {\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\n          compiler.currentType = typeArguments[0].nonNullableType;\n        }\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT | ContextualFlags.WRAP)\n        : compiler.compileExpressionRetainType(operands[0], Type.bool, ContextualFlags.WRAP);\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // return ifTrueish if assertions are disabled\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) { // simplify if dropped anyway\n          compiler.currentType = Type.void;\n          return module.nop();\n        }\n        return arg0;\n      }\n\n      // otherwise call abort if the assertion is false-ish\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n      compiler.currentType = type.nonNullableType;\n      let expr: ExpressionRef;\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        compiler.currentType = Type.void;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.if(\n              module.unary(UnaryOp.EqzI32, arg0),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.if(\n              module.unary(UnaryOp.EqzI64, arg0),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            expr = module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            expr = module.if(\n              module.binary(BinaryOp.EqF32,\n                arg0,\n                module.f32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.if(\n              module.binary(BinaryOp.EqF64,\n                arg0,\n                module.f64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          default: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.typeArgumentsRange\n            );\n            expr = abort;\n            break;\n          }\n        }\n      } else {\n        compiler.currentType = type.nonNullableType;\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            let flow = compiler.currentFlow;\n            let tempLocal = flow.getAndFreeTempLocal(type);\n            flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED); // arg0 is wrapped\n            expr = module.if(\n              module.local_tee(tempLocal.index, arg0),\n              module.local_get(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.i64);\n            expr = module.if(\n              module.unary(UnaryOp.EqzI64,\n                module.local_tee(tempLocal.index, arg0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(compiler.options.usizeType);\n            expr = module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.local_tee(tempLocal.index, arg0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f32);\n            expr = module.if(\n              module.binary(BinaryOp.EqF32,\n                module.local_tee(tempLocal.index, arg0),\n                module.f32(0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f64);\n            expr = module.if(\n              module.binary(BinaryOp.EqF64,\n                module.local_tee(tempLocal.index, arg0),\n                module.f64(0)\n              ),\n              abort,\n              module.local_get(tempLocal.index, NativeType.F64)\n            );\n            break;\n          }\n          default: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.typeArgumentsRange\n            );\n            expr = abort;\n            break;\n          }\n        }\n      }\n      return expr;\n    }\n    case BuiltinSymbols.unchecked: { // unchecked(expr: *) -> *\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let flow = compiler.currentFlow;\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      // eliminate unnecessary tees by preferring contextualType(=void):\n      let expr = compiler.compileExpression(operands[0], contextualType);\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return expr;\n    }\n    case BuiltinSymbols.call_direct: directize = true;\n    case BuiltinSymbols.call_indirect: { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, i32.MAX_VALUE, reportNode, compiler)\n      ) return module.unreachable();\n      let returnType = typeArguments ? typeArguments[0] : contextualType;\n      let arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32);\n      let arg0Type = compiler.currentType;\n      if (!(\n        arg0Type == Type.u32 ||                                      // either plain index\n        arg0Type.kind == TypeKind.U32 && arg0Type.signatureReference // or function reference\n      )) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.unreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let nativeReturnType = returnType.toNativeType();\n      let parameterTypes = new Array<Type>(numOperands);\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32);\n        let operandType = compiler.currentType;\n        parameterTypes[i] = operandType;\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      let typeName = Signature.makeSignatureString(parameterTypes, returnType);\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      if (directize) {\n        // if the index expression is precomputable to a constant value, emit a direct call\n        if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n          assert(getExpressionType(arg0) == NativeType.I32);\n          let index = getConstValueI32(arg0);\n          let functionTable = compiler.functionTable;\n          if (index >= 0 && index < functionTable.length) {\n            return module.call(functionTable[index], operandExprs, nativeReturnType);\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.unreachable();\n      }\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.call_indirect(arg0, operandExprs, typeName);\n    }\n    case BuiltinSymbols.instantiate: { // instantiate<T!>(...args: *[]) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\n      ) return module.unreachable();\n      let classInstance = typeArguments![0].classReference;\n      if (!classInstance) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      compiler.currentType = classInstance.type;\n      return compiler.compileInstantiate(classInstance, operands, ContextualFlags.NONE, reportNode);\n    }\n\n    // === User-defined diagnostics ===============================================================\n\n    case BuiltinSymbols.ERROR: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.WARNING: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n    case BuiltinSymbols.INFO: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n\n    // === Portable type conversions ==============================================================\n\n    case BuiltinSymbols.i8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i8, ContextualFlags.EXPLICIT);\n    }\n    case BuiltinSymbols.i16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i16, ContextualFlags.EXPLICIT);\n    }\n    case BuiltinSymbols.i32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i32, ContextualFlags.EXPLICIT);\n    }\n    case BuiltinSymbols.i64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i64, ContextualFlags.EXPLICIT);\n    }\n    case BuiltinSymbols.isize: {\n      let isizeType = compiler.options.isizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = isizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], isizeType, ContextualFlags.EXPLICIT);\n    }\n    case BuiltinSymbols.u8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u8, ContextualFlags.EXPLICIT);\n    }\n    case BuiltinSymbols.u16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u16, ContextualFlags.EXPLICIT);\n    }\n    case BuiltinSymbols.u32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u32, ContextualFlags.EXPLICIT);\n    }\n    case BuiltinSymbols.u64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u64, ContextualFlags.EXPLICIT);\n    }\n    case BuiltinSymbols.usize: {\n      let usizeType = compiler.options.usizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], usizeType, ContextualFlags.EXPLICIT);\n    }\n    case BuiltinSymbols.bool: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.bool, ContextualFlags.EXPLICIT);\n    }\n    case BuiltinSymbols.f32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f32, ContextualFlags.EXPLICIT);\n    }\n    case BuiltinSymbols.f64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f64, ContextualFlags.EXPLICIT);\n    }\n\n    // === SIMD ===================================================================================\n\n    case BuiltinSymbols.v128: // alias for now\n    case BuiltinSymbols.i8x16: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 16, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 16; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i8, ContextualFlags.IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI8(getConstValueI32(expr), bytes, i);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i16x8: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 8, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 8; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i16, ContextualFlags.IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI16(getConstValueI32(expr), bytes, i << 1);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i32x4: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i32, ContextualFlags.IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI32(getConstValueI32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i64x2: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i64, ContextualFlags.IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I64);\n          let off = i << 3;\n          writeI32(getConstValueI64Low(expr), bytes, off);\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f32x4: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f32, ContextualFlags.IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F32);\n          writeF32(getConstValueF32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f64x2: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f64, ContextualFlags.IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F64);\n          writeF64(getConstValueF64(expr), bytes, i << 3);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.v128_splat: { // splat<T!>(x: T) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: UnaryOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8:  { op = UnaryOp.SplatVecI8x16; break; }\n        case TypeKind.I16:\n        case TypeKind.U16: { op = UnaryOp.SplatVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = UnaryOp.SplatVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = UnaryOp.SplatVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? UnaryOp.SplatVecI64x2\n            : UnaryOp.SplatVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = UnaryOp.SplatVecF32x4; break; }\n        case TypeKind.F64: { op = UnaryOp.SplatVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], type, ContextualFlags.IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = type;\n        return module.unreachable();\n      }\n      let op: SIMDExtractOp;\n      switch (type.kind) {\n        case TypeKind.I8:  { op = SIMDExtractOp.ExtractLaneSVecI8x16; break; }\n        case TypeKind.U8:  { op = SIMDExtractOp.ExtractLaneUVecI8x16; break; }\n        case TypeKind.I16: { op = SIMDExtractOp.ExtractLaneSVecI16x8; break; }\n        case TypeKind.U16: { op = SIMDExtractOp.ExtractLaneUVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = SIMDExtractOp.ExtractLaneVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = SIMDExtractOp.ExtractLaneVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? SIMDExtractOp.ExtractLaneVecI64x2\n            : SIMDExtractOp.ExtractLaneVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = SIMDExtractOp.ExtractLaneVecF32x4; break; }\n        case TypeKind.F64: { op = SIMDExtractOp.ExtractLaneVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = type;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, ContextualFlags.IMPLICIT);\n      compiler.currentType = type;\n      if (getExpressionId(arg1) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n        return module.unreachable();\n      }\n      assert(getExpressionType(arg1) == NativeType.I32);\n      let maxIdx = (16 / type.byteSize) - 1;\n      let idx = getConstValueI32(arg1);\n      if (idx < 0 || idx > maxIdx) {\n        compiler.error(\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n        );\n        return module.unreachable();\n      }\n      return module.simd_extract(op, arg0, idx);\n    }\n    case BuiltinSymbols.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: SIMDReplaceOp;\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8:  { op = SIMDReplaceOp.ReplaceLaneVecI8x16; break; }\n        case TypeKind.I16:\n        case TypeKind.U16: { op = SIMDReplaceOp.ReplaceLaneVecI16x8; break; }\n        case TypeKind.I32:\n        case TypeKind.U32: { op = SIMDReplaceOp.ReplaceLaneVecI32x4; break; }\n        case TypeKind.I64:\n        case TypeKind.U64: { op = SIMDReplaceOp.ReplaceLaneVecI64x2; break; }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          op = compiler.options.isWasm64\n            ? SIMDReplaceOp.ReplaceLaneVecI64x2\n            : SIMDReplaceOp.ReplaceLaneVecI32x4;\n          break;\n        }\n        case TypeKind.F32: { op = SIMDReplaceOp.ReplaceLaneVecF32x4; break; }\n        case TypeKind.F64: { op = SIMDReplaceOp.ReplaceLaneVecF64x2; break; }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, ContextualFlags.IMPLICIT);\n      if (getExpressionId(arg1) != ExpressionId.Const) {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      assert(getExpressionType(arg1) == NativeType.I32);\n      let maxIdx = (16 / type.byteSize) - 1;\n      let idx = getConstValueI32(arg1);\n      if (idx < 0 || idx > maxIdx) {\n        compiler.error(\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n        );\n        return module.unreachable();\n      }\n      let arg2 = compiler.compileExpression(operands[2], type, ContextualFlags.IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.simd_replace(op, arg0, idx, arg2);\n    }\n    case BuiltinSymbols.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let laneWidth = type.byteSize;\n      let laneCount = 16 / laneWidth;\n      assert(isInteger(laneCount) && isPowerOf2(laneCount));\n      if (\n        checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      switch (type.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE:\n        case TypeKind.F32:\n        case TypeKind.F64: break;\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.typeArgumentsRange\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ContextualFlags.IMPLICIT);\n      let mask = new Uint8Array(16);\n      let maxIdx = (laneCount << 1) - 1;\n      for (let i = 0; i < laneCount; ++i) {\n        let operand = operands[2 + i];\n        let argN = compiler.precomputeExpression(operand, Type.u8, ContextualFlags.IMPLICIT);\n        if (getExpressionId(argN) != ExpressionId.Const) {\n          compiler.error(\n            DiagnosticCode.Expression_must_be_a_compile_time_constant,\n            operand.range\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n        assert(getExpressionType(argN) == NativeType.I32);\n        let idx = getConstValueI32(argN);\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operand.range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n        switch (laneWidth) {\n          case 1: {\n            writeI8(idx, mask, i);\n            break;\n          }\n          case 2: {\n            let off8 = i << 1;\n            let idx8 = idx << 1;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            break;\n          }\n          case 4: {\n            let off8 = i << 2;\n            let idx8 = idx << 2;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            writeI8(idx8 + 2, mask, off8 + 2);\n            writeI8(idx8 + 3, mask, off8 + 3);\n            break;\n          }\n          case 8: {\n            let off8 = i << 3;\n            let idx8 = idx << 3;\n            writeI8(idx8    , mask, off8);\n            writeI8(idx8 + 1, mask, off8 + 1);\n            writeI8(idx8 + 2, mask, off8 + 2);\n            writeI8(idx8 + 3, mask, off8 + 3);\n            writeI8(idx8 + 4, mask, off8 + 4);\n            writeI8(idx8 + 5, mask, off8 + 5);\n            writeI8(idx8 + 6, mask, off8 + 6);\n            writeI8(idx8 + 7, mask, off8 + 7);\n            break;\n          }\n          default: assert(false);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.simd_shuffle(arg0, arg1, mask);\n    }\n    case BuiltinSymbols.v128_add: // any_binary<T!>(a: v128, b: v128) -> v128\n    case BuiltinSymbols.v128_sub:\n    case BuiltinSymbols.v128_mul:\n    case BuiltinSymbols.v128_div:\n    case BuiltinSymbols.v128_add_saturate:\n    case BuiltinSymbols.v128_sub_saturate:\n    case BuiltinSymbols.v128_min:\n    case BuiltinSymbols.v128_max:\n    case BuiltinSymbols.v128_eq:\n    case BuiltinSymbols.v128_ne:\n    case BuiltinSymbols.v128_lt:\n    case BuiltinSymbols.v128_le:\n    case BuiltinSymbols.v128_gt:\n    case BuiltinSymbols.v128_ge: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: BinaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_add: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.AddVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.AddVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.AddVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = BinaryOp.AddVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? BinaryOp.AddVecI64x2\n                : BinaryOp.AddVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = BinaryOp.AddVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.AddVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sub: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.SubVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.SubVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.SubVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = BinaryOp.SubVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? BinaryOp.SubVecI64x2\n                : BinaryOp.SubVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = BinaryOp.SubVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.SubVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_mul: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.MulVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.MulVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.MulVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.MulVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MulVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.MulVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_div: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.DivVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.DivVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_add_saturate: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.AddSatSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.AddSatUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.AddSatSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.AddSatUVecI16x8; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sub_saturate: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.SubSatSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.SubSatUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.SubSatSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.SubSatUVecI16x8; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_min: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.MinVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MinVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_max: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = BinaryOp.MaxVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.MaxVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_eq: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.EqVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.EqVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.EqVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.EqVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.EqVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.EqVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_ne: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = BinaryOp.NeVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = BinaryOp.NeVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = BinaryOp.NeVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.NeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.NeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) op = BinaryOp.NeVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_lt: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.LtSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.LtUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.LtSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.LtUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.LtSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.LtUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.LtVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.LtVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.LtSVecI32x4\n                  : BinaryOp.LtUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_le: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.LeSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.LeUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.LeSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.LeUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.LeSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.LeUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.LeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.LeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.LeSVecI32x4\n                  : BinaryOp.LeUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_gt: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.GtSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.GtUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.GtSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.GtUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.GtSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.GtUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.GtVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.GtVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.GtSVecI32x4\n                  : BinaryOp.GtUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_ge: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = BinaryOp.GeSVecI8x16; break; }\n            case TypeKind.U8:  { op = BinaryOp.GeUVecI8x16; break; }\n            case TypeKind.I16: { op = BinaryOp.GeSVecI16x8; break; }\n            case TypeKind.U16: { op = BinaryOp.GeUVecI16x8; break; }\n            case TypeKind.I32: { op = BinaryOp.GeSVecI32x4; break; }\n            case TypeKind.U32: { op = BinaryOp.GeUVecI32x4; break; }\n            case TypeKind.F32: { op = BinaryOp.GeVecF32x4; break; }\n            case TypeKind.F64: { op = BinaryOp.GeVecF64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                op = type.kind == TypeKind.ISIZE\n                  ? BinaryOp.GeSVecI32x4\n                  : BinaryOp.GeUVecI32x4;\n              }\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ContextualFlags.IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.binary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_neg: // any_unary<T!>(a: v128) -> v128\n    case BuiltinSymbols.v128_abs:\n    case BuiltinSymbols.v128_sqrt:\n    case BuiltinSymbols.v128_convert:\n    case BuiltinSymbols.v128_trunc: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_neg: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.NegVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.NegVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.NegVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.NegVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.NegVecI64x2\n                : UnaryOp.NegVecI32x4;\n              break;\n            }\n            case TypeKind.F32: { op = UnaryOp.NegVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.NegVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_abs: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = UnaryOp.AbsVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.AbsVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_sqrt: {\n          switch (type.kind) {\n            case TypeKind.F32: { op = UnaryOp.SqrtVecF32x4; break; }\n            case TypeKind.F64: { op = UnaryOp.SqrtVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_convert: {\n          switch (type.kind) {\n            case TypeKind.I32: { op = UnaryOp.ConvertSVecI32x4ToVecF32x4; break; }\n            case TypeKind.U32: { op = UnaryOp.ConvertUVecI32x4ToVecF32x4; break; }\n            case TypeKind.I64: { op = UnaryOp.ConvertSVecI64x2ToVecF64x2; break; }\n            case TypeKind.U64: { op = UnaryOp.ConvertUVecI64x2ToVecF64x2; break; }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_trunc: {\n          switch (type.kind) {\n            case TypeKind.I32: { op = UnaryOp.TruncSatSVecF32x4ToVecI32x4; break; }\n            case TypeKind.U32: { op = UnaryOp.TruncSatUVecF32x4ToVecI32x4; break; }\n            case TypeKind.I64: { op = UnaryOp.TruncSatSVecF64x2ToVecI64x2; break; }\n            case TypeKind.U64: { op = UnaryOp.TruncSatUVecF64x2ToVecI64x2; break; }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.unary(op, arg0);\n    }\n    case BuiltinSymbols.v128_shl: // any_shift<T!>(a: v128, b: i32) -> v128\n    case BuiltinSymbols.v128_shr: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: SIMDShiftOp = -1;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.v128_shl: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = SIMDShiftOp.ShlVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = SIMDShiftOp.ShlVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = SIMDShiftOp.ShlVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = SIMDShiftOp.ShlVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShlVecI64x2\n                : SIMDShiftOp.ShlVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_shr: {\n          switch (type.kind) {\n            case TypeKind.I8:  { op = SIMDShiftOp.ShrSVecI8x16; break; }\n            case TypeKind.U8:  { op = SIMDShiftOp.ShrUVecI8x16; break; }\n            case TypeKind.I16: { op = SIMDShiftOp.ShrSVecI16x8; break; }\n            case TypeKind.U16: { op = SIMDShiftOp.ShrUVecI16x8; break; }\n            case TypeKind.I32: { op = SIMDShiftOp.ShrSVecI32x4; break; }\n            case TypeKind.U32: { op = SIMDShiftOp.ShrUVecI32x4; break; }\n            case TypeKind.I64: { op = SIMDShiftOp.ShrSVecI64x2; break; }\n            case TypeKind.U64: { op = SIMDShiftOp.ShrUVecI64x2; break; }\n            case TypeKind.ISIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShrSVecI64x2\n                : SIMDShiftOp.ShrSVecI32x4;\n              break;\n            }\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? SIMDShiftOp.ShrUVecI64x2\n                : SIMDShiftOp.ShrUVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, ContextualFlags.IMPLICIT);\n      compiler.currentType = Type.v128;\n      return module.simd_shift(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_and: // any_bitwise_binary(a: v128, b: v128) -> v128\n    case BuiltinSymbols.v128_or:\n    case BuiltinSymbols.v128_xor: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let op: BinaryOp = -1;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.v128_and: { op = BinaryOp.AndVec128; break; }\n        case BuiltinSymbols.v128_or:  { op = BinaryOp.OrVec128; break; }\n        case BuiltinSymbols.v128_xor: { op = BinaryOp.XorVec128; break; }\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ContextualFlags.IMPLICIT);\n      return module.binary(op, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_not: { // any_bitwise_unary(a: v128) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\n      return module.unary(UnaryOp.NotVec128, arg0);\n    }\n    case BuiltinSymbols.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ContextualFlags.IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, ContextualFlags.IMPLICIT);\n      return module.simd_bitselect(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.v128_any_true: // any_test<T!>(a: v128) -> bool\n    case BuiltinSymbols.v128_all_true: {\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (type.is(TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        return module.unreachable();\n      }\n      let op: UnaryOp = -1;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.v128_any_true: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.AnyTrueVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.AnyTrueVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.AnyTrueVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.AnyTrueVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.AnyTrueVecI64x2\n                : UnaryOp.AnyTrueVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n        case BuiltinSymbols.v128_all_true: {\n          switch (type.kind) {\n            case TypeKind.I8:\n            case TypeKind.U8:  { op = UnaryOp.AllTrueVecI8x16; break; }\n            case TypeKind.I16:\n            case TypeKind.U16: { op = UnaryOp.AllTrueVecI16x8; break; }\n            case TypeKind.I32:\n            case TypeKind.U32: { op = UnaryOp.AllTrueVecI32x4; break; }\n            case TypeKind.I64:\n            case TypeKind.U64: { op = UnaryOp.AllTrueVecI64x2; break; }\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              op = compiler.options.isWasm64\n                ? UnaryOp.AllTrueVecI64x2\n                : UnaryOp.AllTrueVecI32x4;\n              break;\n            }\n          }\n          break;\n        }\n      }\n      if (op == -1) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.typeArgumentsRange\n        );\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ContextualFlags.IMPLICIT);\n      compiler.currentType = Type.bool;\n      return module.unary(op, arg0);\n    }\n\n    // === Internal runtime =======================================================================\n\n    case BuiltinSymbols.idof: {\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.u32;\n      if (!type) return module.unreachable();\n      let classReference = type.classReference;\n      if (!classReference || classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.unreachable();\n      }\n      return module.i32(classReference.id);\n    }\n    case BuiltinSymbols.visit_globals: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler) // cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.u32, ContextualFlags.IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_globals, [ arg0 ], NativeType.None);\n    }\n    case BuiltinSymbols.visit_members: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler) // ref, cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, ContextualFlags.IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u32, ContextualFlags.IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_members, [ arg0, arg1 ], NativeType.None);\n    }\n  }\n\n  // try to defer inline asm to a concrete built-in\n  {\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\n    if (expr) {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      return expr;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Cannot_find_name_0,\n    reportNode.expression.range, prototype.internalName\n  );\n  return module.unreachable();\n}\n\n/** Tries to defer an inline-assembler-like call to a built-in function. */\nfunction tryDeferASM(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  reportNode: CallExpression\n): ExpressionRef {\n  /* tslint:disable:max-line-length */\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\n  }\n  if (compiler.options.hasFeature(Feature.THREADS)) {\n    switch (prototype.internalName) {\n\n      case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n      case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\n    }\n  }\n  if (compiler.options.hasFeature(Feature.SIMD)) {\n    switch (prototype.internalName) {\n\n      case BuiltinSymbols.v128_load: return deferASM(BuiltinSymbols.load, compiler, Type.v128, operands, Type.v128, reportNode);\n      case BuiltinSymbols.v128_store: return deferASM(BuiltinSymbols.store, compiler, Type.v128, operands, Type.void, reportNode);\n\n      case BuiltinSymbols.i8x16_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\n      case BuiltinSymbols.i8x16_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\n      case BuiltinSymbols.i8x16_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i8x16_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i8x16_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i8x16_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i16x8_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\n      case BuiltinSymbols.i16x8_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\n      case BuiltinSymbols.i16x8_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i16x8_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i16x8_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i16x8_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_trunc_s_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i32x4_trunc_u_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u32, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.i64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64x2_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64x2_trunc_s_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.i64x2_trunc_u_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u64, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.f32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\n      case BuiltinSymbols.f32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_convert_s_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f32x4_convert_u_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.f64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\n      case BuiltinSymbols.f64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_convert_s_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\n      case BuiltinSymbols.f64x2_convert_u_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\n\n      case BuiltinSymbols.v8x16_shuffle: return deferASM(BuiltinSymbols.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\n    }\n  }\n  /* tslint:enable:max-line-length */\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: CallExpression\n): ExpressionRef {\n  assert(compiler.program.elementsByName.has(name));\n  var prototype = compiler.program.elementsByName.get(name)!;\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(\n    compiler,\n    <FunctionPrototype>prototype,\n    [ typeArgument ],\n    operands,\n    contextualType,\n    reportNode,\n    /* isAsm */ true\n  );\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringInstance = compiler.program.stringInstance;\n  if (!stringInstance) return module.unreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.unreachable();\n\n  var messageArg = message != null\n    ? compiler.compileExpression(message, stringInstance.type, ContextualFlags.IMPLICIT)\n    : stringInstance.type.toNativeZero(module);\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.block(null, [\n    module.call(\n      abortInstance.internalName, [\n        messageArg,\n        filenameArg,\n        module.i32(reportNode.range.line),\n        module.i32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.unreachable()\n  ]);\n}\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var typeRef = compiler.ensureFunctionType([ Type.u32 ], Type.void); // cookie\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  compiler.compileFunction(visitInstance);\n\n  for (let element of compiler.program.elementsByName.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let classReference = global.type.classReference;\n    if (\n      global.is(CommonFlags.COMPILED) &&\n      classReference !== null &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value))\n            ], NativeType.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, nativeSizeType)\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, nativeSizeType), // tempRef != null\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinSymbols.visit_globals, typeRef, [ nativeSizeType ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Compiles the `visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var nativeSizeSize = usizeType.byteSize;\n  var ftype = compiler.ensureFunctionType([ usizeType, Type.i32 ], Type.void); // ref, cookie\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  var blocks = new Array<RelooperBlockRef>();\n  var relooper = Relooper.create(module);\n\n  var outer = relooper.addBlockWithSwitch(\n    module.nop(),\n    module.load(nativeSizeSize, false,\n      nativeSizeType == NativeType.I64\n        ? module.binary(BinaryOp.SubI64,\n            module.local_get(0, nativeSizeType),\n            module.i64(8)\n          )\n        : module.binary(BinaryOp.SubI32,\n            module.local_get(0, nativeSizeType),\n            module.i32(8) // rtId is at -8\n          ),\n      NativeType.I32,\n      0\n    )\n  );\n\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(instance.type.isManaged);\n    assert(id == lastId++);\n\n    let visitImpl: Element | null;\n\n    // if a library element, check if it implements a custom traversal function\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\"))) {\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\n      let block: RelooperBlockRef;\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\n        block = relooper.addBlock(\n          module.unreachable()\n        );\n      } else {\n        let visitSig = visitFunc.signature;\n        assert(\n          visitSig.parameterTypes.length == 1 &&\n          visitSig.parameterTypes[0] == Type.u32 &&\n          visitSig.returnType == Type.void &&\n          visitSig.thisType == instance.type\n        );\n        let callExpr = module.call(visitFunc.internalName, [\n          module.local_get(0, nativeSizeType), // ref\n          module.local_get(1, NativeType.I32)  // cookie\n        ], NativeType.None);\n        block = relooper.addBlock(\n          instance.base\n            ? callExpr // branch will be added later\n            : module.block(null, [\n                callExpr,\n                module.return()\n              ])\n        );\n      }\n      relooper.addBranchForSwitch(outer, block, [ id ]);\n      blocks.push(block);\n\n    // otherwise generate one\n    } else {\n      // traverse references assigned to own fields\n      let code = new Array<ExpressionRef>();\n      let members = instance.members;\n      if (members) {\n        for (let member of members.values()) {\n          if (member.kind == ElementKind.FIELD) {\n            if ((<Field>member).parent === instance) {\n              let fieldType = (<Field>member).type;\n              if (fieldType.isManaged) {\n                let fieldOffset = (<Field>member).memoryOffset;\n                assert(fieldOffset >= 0);\n                code.push(\n                  // if ($2 = value) FIELDCLASS~traverse($2)\n                  module.if(\n                    module.local_tee(2,\n                      module.load(nativeSizeSize, false,\n                        module.local_get(0, nativeSizeType),\n                        nativeSizeType, fieldOffset\n                      )\n                    ),\n                    module.call(visitInstance.internalName, [\n                      module.local_get(2, nativeSizeType), // ref\n                      module.local_get(1, NativeType.I32)  // cookie\n                    ], NativeType.None)\n                  )\n                );\n              }\n            }\n          }\n        }\n      }\n      if (!instance.base) code.push(module.return());\n      let block = relooper.addBlock(\n        flatten(module, code, NativeType.None)\n      );\n      relooper.addBranchForSwitch(outer, block, [ id ]);\n      blocks.push(block);\n    }\n  }\n  for (let [id, instance] of managedClasses) {\n    let base = instance.base;\n    if (base) {\n      relooper.addBranch(blocks[id], blocks[base.id]);\n    }\n  }\n  blocks.push(\n    relooper.addBlock(\n      module.unreachable()\n    )\n  );\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\n  compiler.compileFunction(visitInstance);\n  module.addFunction(BuiltinSymbols.visit_members, ftype, [ nativeSizeType ], relooper.renderAndDispose(outer, 2));\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(id == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      if (instance.extends(arrayPrototype)) flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: CallExpression\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments) {\n      if (typeArguments.length == 1) {\n        compiler.compileExpression(operands[0], typeArguments[0], ContextualFlags.IMPLICIT);\n      } else {\n        if (typeArguments.length) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n          );\n          return null;\n        }\n        compiler.compileExpressionRetainType(operands[0], Type.i32);\n      }\n    } else {\n      compiler.compileExpressionRetainType(operands[0], Type.i32);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, ContextualFlags.IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, ContextualFlags.IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  prototype: FunctionPrototype\n): i32 {\n  if (typeArguments) {\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(\n  operands: Expression[],\n  expected: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  if (operands.length != expected) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(\n  operands: Expression[],\n  expectedMinimum: i32,\n  expectedMaximum: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getLocalGetIndex,\n  getLocalSetIndex,\n  getLocalSetValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.LocalGet: {\n        this.push(\"$\");\n        this.push(getLocalGetIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.LocalSet: {\n        this.push(\"$\");\n        this.push(getLocalSetIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getLocalSetValue(expr));\n        return;\n      }\n      case ExpressionId.GlobalGet:\n      case ExpressionId.GlobalSet: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.MemorySize: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.MemoryGrow: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicNotify:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.V128: return \"v128\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\n import {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.isEntry) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var members = file.exports;\n    if (members) {\n      for (let [name, member] of members) this.visitElement(name, member);\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) this.visitFile(exportStar);\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (seen.has(element)) {\n      this.visitAlias(name, element, <string>seen.get(element));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(name, <Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        this.visitPropertyInstances(name, <PropertyPrototype>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterInstance;\n        if (getter) this.visitFunction(name, getter);\n        let setter = prop.setterInstance;\n        if (setter) this.visitFunction(name, setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, <Function>instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, <Class>instance);\n      }\n    }\n  }\n\n  private visitPropertyInstances(name: string, element: PropertyPrototype): void {\n    // var instances = element.instances;\n    // if (instances) {\n    //   for (let instance of instances.values()) {\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\n    //   }\n    // }\n    assert(false);\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n  private unknown: Set<string> = new Set();\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(name, element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(name); // 'get:funcName' internally\n      sb.push(\"(): \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\n      sb.push(name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"export class \");\n    }\n    sb.push(name);\n    // var base = element.base;\n    // if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n    //   sb.push(\" extends \");\n    //   sb.push(base.name); // TODO: fqn\n    // }\n    sb.push(\" {\\n\");\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      for (let member of staticMembers.values()) this.visitElement(member.name, member);\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      for (let member of instanceMembers.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\" = typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  CommonTypeNode,\n  TypeNode,\n  SignatureNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureDeclaration,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.ENTRY\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n          ? SourceKind.LIBRARY\n          : SourceKind.DEFAULT\n    );\n    var program = this.program;\n    program.sources.push(source);\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) statements.push(statement);\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (tn.skip(Token.DEFAULT)) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          tn.range()\n        );\n      }\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      }\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift() : null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    // this.backlog = [];\n    // this.seenlog.clear();\n    // this.donelog.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): CommonTypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: CommonTypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseSignature(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n      let current = first;\n      let parameters: TypeNode[] | null = null;\n      let nullable = false;\n\n      // Identifier ('.' Identifier)+\n      while (tn.skip(Token.DOT)) {\n        if (tn.skip(Token.IDENTIFIER)) {\n          let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n          current.next = next;\n          current = next;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range(tn.pos)\n          );\n          return null;\n        }\n      }\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [<TypeNode>parameter];\n          else parameters.push(<TypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(first, parameters || [], nullable, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function signature, as used in type declarations. */\n  tryParseSignature(\n    tn: Tokenizer\n  ): SignatureNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: TypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.TYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <TypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: CommonTypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createSignature(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range);\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    var seenOptional = false;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      if (!typeParameters) typeParameters = [ typeParameter ];\n      else typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!(typeParameters && typeParameters.length)) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: TypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <TypeNode>t;\n      }\n      let defaultType: TypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <TypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: TypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: CommonTypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.TYPE) {\n          this.parseParametersThis = <TypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: CommonTypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: CommonTypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      CommonFlags.NONE,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: TypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.TYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <TypeNode>t;\n    }\n\n    var implementsTypes: TypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [<TypeNode>type];\n          else implementsTypes.push(<TypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = [<DecoratorNode>decorator];\n        else decorators.push(<DecoratorNode>decorator);\n      } while (tn.skip(Token.AT));\n      if (decorators && isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.skip(Token.READONLY)) {\n      flags |= CommonFlags.READONLY;\n      readonlyStart = tn.tokenPos;\n      readonlyEnd = tn.pos;\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\n        if (!retIndex) return null;\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier()) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createSignature(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: CommonTypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[] | null): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators && decorators.length) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.TYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              return Node.createIndexSignatureDeclaration(<TypeNode>keyType, valueType, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let ns = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, ns);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        tn.skip(Token.SEMICOLON);\n        return ns;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.backlog.push(internalPath);\n            this.seenlog.add(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) {\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else {\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.NONE) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    var expr: Expression | null = null;\n    switch (token) {\n\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                ParameterKind.DEFAULT,\n                identifier.range\n              )\n            ],\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return identifier;\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): CommonTypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments: CommonTypeNode[] | null = null;\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      if (!typeArguments) typeArguments = [ type ];\n      else typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\n\n    var startPos = expr.range.start;\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (tn.skipIdentifier()) {\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            } else {\n              next = this.parseExpression(tn,\n                isRightAssociative(token)\n                  ? nextPrecedence\n                  : nextPrecedence + 1\n              );\n              if (!next) return null;\n            }\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            next = this.parseExpression(tn,\n              isRightAssociative(token)\n                ? nextPrecedence\n                : nextPrecedence + 1\n            );\n            if (!next) return null;\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression\n  ): Expression {\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: CommonTypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) break;\n        expr = Node.createCallExpression( // is again callable\n          expr,\n          typeArguments,\n          args,\n          tn.range(expr.range.start, tn.pos)\n        );\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\n/// <reference path=\"./node.d.ts\" />\n\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\nimport \"../../../std/portable/index\";\nimport \"./float\";\nimport \"./i64\";\n\nimport { Module } from \"../../module\";\n\nModule.prototype.toText = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitStackIR();\n};\n\nModule.prototype.toAsmjs = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\nglobal.binaryen = binaryen;\n\nfor (var key in binaryen) {\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\n}\n\n// Utilize Binaryen's heap\n\nglobal.__memory_allocate = binaryen._malloc;\nglobal.__memory_free = binaryen._free;\nglobal.__memory_copy = binaryen._memmove;\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__20__;","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 2; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\n  return parseInt(str, undefined) | 0;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n}\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nArray.create = function(capacity) {\n  var arr = new Array(capacity);\n  arr.length = 0;\n  return arr;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  signbit: {\n    value: function signbit(x) {\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n    }\n  },\n  sincos: {\n    value: function sincos(x) {\n      this.sincos_sin = Math.sin(x);\n      this.sincos_cos = Math.cos(x);\n    }\n  }\n});\n\nglobalScope[\"memory\"] = (() => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n  return {\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\n      if (!(size >>>= 0)) return 0;\n      if (HEAP_OFFSET + size > HEAP.length) {\n        var oldHeap = HEAP;\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n        HEAP.set(oldHeap);\n      }\n      var ptr = HEAP_OFFSET;\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n      return ptr;\n    },\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\n      HEAP.fill(value, dest, dest + size);\n    },\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\n      HEAP.copyWithin(dest, src, src + size);\n    },\n    reset: globalScope[\"__memory_reset\"] || function reset() {\n      HEAP = new Uint8Array(0);\n      HEAP_OFFSET = 0;\n    }\n  };\n})();\n\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\n  HEAP[(ptr | 0) + (offset | 0)] = value;\n};\n\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\n  return HEAP[(ptr | 0) + (offset | 0)];\n};\n\nglobalScope[\"unmanaged\"] = function() {};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBAL = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 2, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 3, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 4 // see: https://github.com/WebAssembly/threads\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64,\n  /** Portable. */\n  JS\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags;\n  /** Base class id or `0` if none. */\n  base: u32;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `Set`. */\n  SET = 1 << 2,\n  /** Type is a `Map`. */\n  MAP = 1 << 3,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 4,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 5,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 6,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 7,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 8,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 9,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 10,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 11,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 12,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 13,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 14,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 15,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 16,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 17,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 18,\n  /** Value is a signed type. */\n  KEY_SIGNED = 1 << 19,\n  /** Value is a float type. */\n  KEY_FLOAT = 1 << 20,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 21,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 22\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { Decompiler } from \"./decompiler\";\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Parser } from \"./parser\";\nimport { Program } from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(name, alias);\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Builds a JSON file of a program's runtime type information. */\nexport function buildRTTI(program: Program): string {\n  var sb = new Array<string>();\n  sb.push(\"{\\n  \\\"names\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \\\"\");\n    sb.push(cls.internalName);\n    sb.push(\"\\\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"base\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    let base = cls.base;\n    sb.push(\"    \");\n    sb.push(base ? base.id.toString() : \"0\");\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"flags\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \");\n    sb.push(cls.rttiFlags.toString());\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ]\\n}\\n\");\n  return sb.join(\"\");\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n\n// Full API\nexport * from \"./ast\";\n// export * from \"./binary\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./decompiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnosticMessages.generated\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nexport * from \"./util\";\n","/** @module util *//***/\n\n/** Tests if the bit at the specified index is set within a 64-bit map. */\nexport function bitsetIs(map: I64, index: i32): bool {\n  assert(index >= 0 && index < 64);\n  return i64_ne(\n    i64_and(\n      map,\n      i64_shl(\n        i64_one,\n        i64_new(index)\n      )\n    ),\n    i64_zero\n  );\n}\n\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\n  assert(index >= 0 && index < 64);\n  return isSet\n    ? i64_or(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      )\n    : i64_and(\n        map,\n        i64_not(\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      );\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let cloned = new Array<V>(original.length);\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    for (let v of original) cloned.add(v);\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    for (let [k, v] of original) cloned.set(k, v);\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\n  } else if (overrides) {\n    for (let [k, v] of overrides) cloned.set(k, v);\n  }\n  return cloned;\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n"],"sourceRoot":""}