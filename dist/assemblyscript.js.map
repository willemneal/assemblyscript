<<<<<<< HEAD
{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__19__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","void_","number","boolean","string","native","null_","true_","false_","this_","super_","constructor","LibrarySymbols","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_MUTABLE_GLOBAL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","String","Array","ArrayBuffer","Math","Mathf","memory","allocate","abort","main","length","byteLength","pow","mod","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","withRelatedRange","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","start","end","isLineBreak","charCodeAt","sb","substring","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","emitDiagnostic","info","infoRelated","warning","warningRelated","error","errorRelated","__export","OperatorKind","common_1","diagnostics_1","types_1","ast_1","resolver_1","flow_1","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","operatorKindFromDecorator","decoratorKind","arg","DecoratorKind","OPERATOR","OPERATOR_BINARY","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","OPERATOR_PREFIX","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","OPERATOR_POSTFIX","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","Program","_super","_this","sources","diagnosticsOffset","explicitStartFunction","filesByName","Map","elementsByName","elementsByDeclaration","instancesByName","typeClasses","arrayBufferInstance","arrayPrototype","stringInstance","abortInstance","memoryAllocateInstance","hasGC","gcAllocateInstance","gcLinkInstance","gcMarkInstance","gcHeaderSize","gcHookOffset","nativeDummySignature","nativeSource","Source","SourceKind","LIBRARY","nativeFile","File","set","internalName","resolver","Resolver","__extends","makeNativeVariableDeclaration","flags","NONE","Node","createVariableDeclaration","createIdentifierExpression","makeNativeTypeDeclaration","identifier","createTypeDeclaration","createOmittedType","makeNativeFunctionDeclaration","createFunctionDeclaration","createSignature","createType","createSimpleTypeName","makeNativeNamespaceDeclaration","createNamespaceDeclaration","makeNativeFunction","signature","parent","decoratorFlags","Function","FunctionPrototype","getElementByDeclaration","declaration","has","initialize","options","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","EXPORT","GENERIC","BUILTIN","hasFeature","registerConstantInteger","i64_new","isWasm64","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","k","file","statements","j","statement","kind","NodeKind","initializeExports","IMPORT","initializeImports","VARIABLE","initializeVariables","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","FUNCTIONDECLARATION","initializeFunction","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeDefinition","queuedExportsStar_1","__values","queuedExportsStar_1_1","next","done","_g","__read","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","File_0_not_found","queuedImport","element","lookupForeign","Module_0_has_no_exported_member_1","localName","asImportedNamespace","queuedExports_1","queuedExports_1_1","_h","exports_1","exports_1_1","_j","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","registerNativeTypeClass","thisPrototype","extendsNode","baseElement","resolveTypeName","CLASS_PROTOTYPE","basePrototype","hasDecorator","SEALED","Class_0_is_sealed_and_cannot_be_extended","identifierNode","UNMANAGED","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","Range","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_k","alias","Error","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","parameterTypes","signatureReference","returnType","byteSize","_l","values","_m","isEntry","_o","_p","markModuleExport","MODULE_EXPORT","instanceMembers","_c","_d","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FUNCTION","FIELD","CLASS","members","_e","_f","type","setType","typeKind","className","classElement","is","global","Global","CONST","setConstantIntegerValue","registerConstantFloat","setConstantFloatValue","ensureGlobal","merged","tryMerge","Duplicate_identifier_0","elements","foreignName","lookupExport","fileQueuedExports","checkDecorators","decorators","acceptedFlags","decorator","flag","decoratorKindToFlag","decoratorNameToKind","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","GLOBAL","implementsTypes","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Operation_not_supported","extendsType","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeProperty","initializeMethod","INDEXSIGNATUREDECLARATION","STATIC","INTERFACE_PROTOTYPE","READONLY","INLINE","LAZY","ABSTRACT","FieldPrototype","addInstance","isStatic","CONSTRUCTOR","checkOperatorOverloads","classPrototype","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","ensureProperty","parentMembers","PropertyPrototype","Duplicate_property_0","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","internalPath","queued","endsWith","path","exportedName","Export_declaration_conflicts_with_exported_declaration_of_0","declarations","initializeImport","namespaceName","validDecorators","AMBIENT","EXTERNAL","INSTANCE","FILE","START","Module_cannot_have_multiple_start_functions","findDecorator","InterfacePrototype","Namespace","DECLARE","Element","program","shadowType","current","originalDeclaration","actual","isBound","TypedElement","apply","RESOLVED","startFunction","Signature","isImport","lookup","includes","exports_2","exports_2_1","_b","memberName","TYPEDEFINITION","mangleInternalName","typeParameters","NAMESPACE","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","initializer","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","Parameter","Local","index","LOCAL","instances","boundPrototypes","body","toBound","classInstance","bound","getResolvedInstance","instanceKey","setResolvedInstance","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","tempI32s","tempI64s","tempF32s","tempF64s","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","addLocal","locals","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","FunctionTarget","__s","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","parameterIndex","Field","memoryOffset","firstDeclaration","Property","getterInstance","setterInstance","_isInterface","constructorPrototype","extends","basePtototype","Class","typeArguments","base","INTERFACE","currentMemoryOffset","constructorInstance","gcHookIndex","asClass","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","baseName","baseType","typeParameterNodes","numTypeArguments","isAssignableTo","target","lookupOverload","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","Interface","older","newer","copyMembers","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","srcMembers_1","srcMembers_1_1","isInstance","asGlobal","NativeType","ExpressionId","compiler_1","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeUnreachable","_BinaryenTypeAuto","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDBitselectId","_BinaryenSIMDShiftId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","HostOp","_BinaryenCurrentMemory","_BinaryenGrowMemory","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDOp","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","MemorySegment","buffer","offset","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","_BinaryenModuleCreate","lit","_BinaryenSizeofLiteral","createFrom","cArr","allocU8Array","_BinaryenModuleRead","free","changetype","addFunctionType","result","paramTypes","cStr","allocStringCached","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createV128","bytes","store","_BinaryenLiteralVec128","createUnary","op","expr","_BinaryenUnary","createBinary","left","right","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","signed","ptr","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","label","children","None","_BinaryenBlock","createBreak","condition","_BinaryenBreak","createDrop","expression","_BinaryenDrop","createLoop","_BinaryenLoop","createIf","ifTrue","ifFalse","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","names","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","createMemoryCopy","size","_BinaryenMemoryCopy","createMemoryFill","_BinaryenMemoryFill","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","externalName","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","shared","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","str","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","GetLocal","_BinaryenGetLocalGetIndex","GetGlobal","globalName","_BinaryenGetGlobalGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getExpressionId","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getConstValueF32","getConstValueF64","getGetLocalIndex","getSetLocalIndex","_BinaryenSetLocalGetIndex","getSetLocalValue","_BinaryenSetLocalGetValue","isTeeLocal","_BinaryenSetLocalIsTee","getGetGlobalName","getBinaryOp","getBinaryLeft","getBinaryRight","getUnaryOp","getUnaryValue","getLoadBytes","getLoadOffset","getLoadPtr","isLoadSigned","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","getBlockName","_BinaryenBlockGetName","getBlockChildCount","_BinaryenBlockGetNumChildren","getBlockChild","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","getIfTrue","_BinaryenIfGetIfTrue","getIfFalse","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","getSelectThen","_BinaryenSelectGetIfTrue","getSelectElse","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","getCallTarget","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","idx","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","needsExplicitUnreachable","Unreachable","Return","Break","Block","numChildren","tokenizer_1","Token","nodeIsConstantValue","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","ASSERTION","CALL","ELEMENTACCESS","PARENTHESIZED","PROPERTYACCESS","SUPER","nodeIsGenericCallable","createTypeName","TypeName","isNullable","TypeNode","createTypeParameter","defaultType","elem","TypeParameterNode","createParameter","ParameterNode","parameterKind","parameters","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","createComment","node","CommentNode","commentKind","isQuoted","IdentifierExpression","symbol","createEmptyIdentifierExpression","createArrayLiteralExpression","ArrayLiteralExpression","elementExpressions","createAssertionExpression","assertionKind","toType","AssertionExpression","createBinaryExpression","operator","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportImportStatement","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","FunctionDeclaration","createIndexSignatureDeclaration","keyType","valueType","IndexSignatureDeclaration","createMethodDeclaration","MethodDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","TypeDeclaration","createVariableStatement","VariableStatement","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","TYPENAME","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","SIGNATURE","nameStr","propStr","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","BINARY","COMMA","FLOAT","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","Statement","SOURCE","tokenizer","exportPaths","sourceKind","pos","lastIndexOf","simplePath","ENTRY","DeclarationStatement","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FOR","clone","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","program_1","module_1","TypeKind","TypeFlags","v128_zero","cachedNullableType","ceil","classReference","nonNullableType","isize64","isize32","usize64","usize32","isManaged","computeSmallIntegerShift","targetType","computeSmallIntegerMask","classType","asNullable","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","commonCompatible","signednessIsImportant","kindOnly","toNativeType","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","asFunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","g","e","window","ReportMode","currentThisExpression","currentElementExpression","resolveType","context","reportMode","REPORT","parameterNodes","parameterTypeNode","REST","returnTypeNode","typeNode","typeArgumentNodes","possiblyPlaceholder","Type_0_is_not_generic","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","Expected_0_type_arguments_but_got_1","typeArgument","resolveTypeArguments","Cannot_find_name_0","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","resolveIdentifier","ensureResolvedLazyGlobal","resolvePropertyAccessExpression","propertyAccess","contextualType","targetExpression","resolveExpression","propertyName","indexedGet","Index_signature_is_missing_in_type_0","resolveElementAccessExpression","elementAccess","determineIntegerLiteralType","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","resolveAssertionExpression","resolveUnaryPrefixExpression","resolveUnaryPostfixExpression","resolveBinaryExpression","resolveThisExpression","resolveSuperExpression","actualFunction","resolveLiteralExpression","resolveCallExpression","NONNULL","i64_sub","i64_zero","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","literalType","resolveFunctionInclTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","actualParent","resolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","signatureParameters","numSignatureParameters","parameterDeclaration","reportNode","resolvedTypeArguments","numTypeParameters","baseClass","nameInclTypeParamters","baseMembers","baseMembers_1","baseMembers_1_1","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","Type_expected","atEnd","fieldInstance","boundPrototype","propertyInstance","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","builtins_1","Options","WASM32","importMemory","sharedMemory","importTable","features","feature","Feature","ConversionKind","WrapMode","mangleImportName_moduleName","mangleImportName_elementName","CompilerSymbols","Compiler","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","needsIterateRoots","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionInstance","startFunctionBody","currentFlow","currentBody","BuiltinSymbols","HEAP_BASE","files","compileFile","compileExports","funcRef","ensureFunctionType","i64_align","isSharedMemory","i64_shr_u","makeModuleExports","compileIterateRoots","members_1","members_1_1","makeModuleExport","prefix","instanceName","fullName","setter","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","returnTypePostFix","COMPILED","nativeType","nativeSizeType","getterName","setterName","subPrefix","compileElement","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","element_1","exportsStar_1","exportsStar_1_1","compileFileByPath","normalizedPathWithoutExtension","pathWithIndex","previousBody","previousFlow","compileTopLevelStatement","numLocals","initExpr","initializerNode","resolvedType","compileExpressionRetainType","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","MODULE_IMPORT","mangleImportName","initializeInStart","compileExpression","Compiling_constant_with_non_constant_initializer_as_mutable","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","compileFunction","resultType","compileFunctionBody","stmts","bodyNode","compileStatements","ARROW","MAIN","canOverflow","started","unshift","EqzI32","thisLocalIndex","EqzI64","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","An_implementation_cannot_be_declared_in_ambient_contexts","decoratorNodes","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileClass","staticMembers","compileInterfaceDeclaration","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","memberStatements","compileStatement","Nop","isLastStatementInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","fork","freeScopedLocals","inherit","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","continueLabel","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","pushBreakLabel","condExpr","makeIsTrueish","popBreakLabel","terminated","unset","block","repeatLabel","alwaysTrue","condPre","incrExpr","bodyStatement","bodyExpr","usesContinue","inheritConditional","breakBlock","repeatBlock","condExprPrecomp","ifTrueFlow","ifTrueExpr","ifFalseExpr","ifFalseFlow","inheritMutual","inlineReturnLabel","numCases","tempLocal","getTempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","EqI32","freeTempLocal","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","compileAbort","numDeclarations","initializers","isInlined","parentFunction","scopedLocals","_const_declarations_must_be_initialized","addScopedLocal","compileAssignmentWithValue","setLocalWrapped","compileInlineConstant","retainType","shift","mask","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","ensureSmallIntegerWrap","fromType","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","NeF32","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","NeF64","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","NeI64","WrapI64","ExtendI32","ExtendU32","PREFIX","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","LtI32","LtI64","LtU32","LtU64","LtF32","LtF64","GtI32","GtI64","GtU32","GtU64","GtF32","GtF64","LeI32","LeI64","LeU32","LeU64","LeF32","LeF64","GeI32","GeI64","GeU32","GeU64","GeF32","GeF64","EqI64","EqF32","EqF64","NeI32","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI32","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU32","DivU64","DivF32","DivF64","RemI32","RemI64","RemU32","RemU64","intType","ShlI32","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI32","ShrI64","ShrU32","ShrU64","AndI32","AndI64","OrI32","OrI64","XorI32","XorI64","getAndFreeTempLocal","compileUnaryOverload","valueExpr","argumentExpressions","thisArg","compileCallDirect","valueExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","valueWithCorrectType","tee","thisExpression","thisExpr","flow_2","nativeReturnType","thisExpr_1","elementExpr","tempLocalTarget","tempLocalElement","flow_3","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","inferredTypes","argumentNodes","numArguments","argumentExprs","templateName","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","compileCallInlinePrechecked","pop","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","createInline","baseInstance","addScopedAlias","paramExpr","argumentLocal","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","argc","Optional_parameter_must_have_an_initializer","ensureArgcVar","setargc","numOperands","isCallImport","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","simpleName","maybeCompileEnclosingSource","retainConstantType","flow_4","actualFunction_1","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","actualType","implicitNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","stringValue","stringSegment","headerSize","totalSize","buf","writeI32","ensureGCHook","writeI16","stringOffset","ensureStaticArray","elementType","usizeTypeSize","bufferInstance","bufferHeaderSize","bufferTotalSize","clz","writeI8","writeI64","writeF32","writeF64","bufferOffset","arrayInstance","arrayHeaderSize","arrayOffset","buffer_offset","length_offset","isConst","compiledValues","constantValues","nativeElementType","arrayType","nativeArrayType","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","compileInstantiate","baseCtor","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","compileGetter","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","calcValue","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","allocateInstance","nativeFieldType","FlowFlags","wrappedLocals","wrappedLocalsExt","inlineFunction","branch","slice","wrapped","temps","scopedLocal","existingLocal","SCOPED","scopedAlias","scope","isLocalWrapped","bitsetIs","ext","bitsetSet","id","stack","other","i64_and","leftExt","rightExt","thisExt","minLength","min","canConversionOverflow","SetLocal","global_1","ClzI32","CtzI32","PopcntI32","MIN_VALUE","last","If","Select","Call","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","Loop","Switch","CallIndirect","SetGlobal","Store","i64_to_string","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Drop","Host","CurrentMemory","GrowMemory","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","Auto","ExportsWalker","includePrivate","todo","seen","Set","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","visitNamespace","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","isInterface","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","parseParameters","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","isArrow","parseFunctionExpressionCommon","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","setEnd","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","_super_must_be_followed_by_an_argument_list_or_member_access","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","skipBlock","depth","Precedence","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","ASC_FEATURE_THREADS","Float64Array","Uint32Array","UnreachableError","captureStackTrace","AssertionError","defineProperties","writable","fround","EPSILON","MIN_NORMAL_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","clz32","abs","floor","trunc","round","sqrt","x","y","sign","isTrueish","radix","parseInt","undefined","fromCodePoint","Number","isInteger","isArray","signbit","Boolean","HEAP","HEAP_OFFSET","oldHeap","fill","copy","copyWithin","Float32Array","Int32Array","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","compiler","evaluateConstantType","isFloat","isSigned","isReference","isString","isFunction","isDefined","SWALLOW","isConstant","expr_1","ctz","popcnt","rotl","rotr","tempLocal1","tempLocalIndex2","tempLocalIndex1","wasm64","tempLocal0","copysign","nearest","reinterpret","evaluateConstantOffset","atomic_load","atomic_store","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","RMWOp","Add","Sub","And","Or","Xor","Xchg","atomic_cmpxchg","atomic_wait","hasError","atomic_notify","sizeof","alignof","alignLog2","Type_0_has_no_property_1","select","unreachable","memory_size","memory_grow","memory_copy","memory_fill","call_indirect","operandExprs","signatureParts","nativeParamTypes","operandType","instantiate","User_defined_0","iterateRoots","expr_2","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_u_add","i32_atomic_rmw16_u_add","i32_atomic_rmw_add","i64_atomic_rmw8_u_add","i64_atomic_rmw16_u_add","i64_atomic_rmw32_u_add","i64_atomic_rmw_add","i32_atomic_rmw8_u_sub","i32_atomic_rmw16_u_sub","i32_atomic_rmw_sub","i64_atomic_rmw8_u_sub","i64_atomic_rmw16_u_sub","i64_atomic_rmw32_u_sub","i64_atomic_rmw_sub","i32_atomic_rmw8_u_and","i32_atomic_rmw16_u_and","i32_atomic_rmw_and","i64_atomic_rmw8_u_and","i64_atomic_rmw16_u_and","i64_atomic_rmw32_u_and","i64_atomic_rmw_and","i32_atomic_rmw8_u_or","i32_atomic_rmw16_u_or","i32_atomic_rmw_or","i64_atomic_rmw8_u_or","i64_atomic_rmw16_u_or","i64_atomic_rmw32_u_or","i64_atomic_rmw_or","i32_atomic_rmw8_u_xor","i32_atomic_rmw16_u_xor","i32_atomic_rmw_xor","i64_atomic_rmw8_u_xor","i64_atomic_rmw16_u_xor","i64_atomic_rmw32_u_xor","i64_atomic_rmw_xor","i32_atomic_rmw8_u_xchg","i32_atomic_rmw16_u_xchg","i32_atomic_rmw_xchg","i64_atomic_rmw8_u_xchg","i64_atomic_rmw16_u_xchg","i64_atomic_rmw32_u_xchg","i64_atomic_rmw_xchg","i32_atomic_rmw8_u_cmpxchg","i32_atomic_rmw16_u_cmpxchg","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_u_cmpxchg","i64_atomic_rmw16_u_cmpxchg","i64_atomic_rmw32_u_cmpxchg","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","i32_notify","i64_notify","deferASMCall","Expression_must_be_a_compile_time_constant","messageArg","filenameArg","existingIndex","isDeclaredInLibrary","gcPrototype","gcInstance","nativeSizeSize","funcName","map","isSet","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","makeArray","cloned","makeSet","original_1","original_1_1","v","overrides","original_2","original_2_1","overrides_1","overrides_1_1","overrides_2","overrides_2_1","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","readI32","readI64","readI8","readI16","readF32","readF64","valueI64","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoAssert","setImportMemory","setSharedMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD"],"mappings":"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KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,M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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__19__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 16);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is an arrow function. */\n  ARROW = 1 << 19,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 20,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 21,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 22,\n  /** Is compiled. */\n  COMPILED = 1 << 23,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 24,\n  /** Is scoped. */\n  SCOPED = 1 << 25,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 26,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 27,\n  /** Is the main function. */\n  MAIN = 1 << 28,\n\n  // Other\n\n  QUOTED = 1 << 29\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n\n/** Common compiler symbols. */\nexport namespace CommonSymbols {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n}\n\n/** Common standard library symbols. */\nexport namespace LibrarySymbols {\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_FEATURE_MUTABLE_GLOBAL = \"ASC_FEATURE_MUTABLE_GLOBAL\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  // runtime\n  export const memory = \"memory\";\n  export const allocate = \"allocate\";\n  export const abort = \"abort\";\n  export const main = \"main\";\n  // other\n  export const length = \"length\";\n  export const byteLength = \"byteLength\";\n  export const pow = \"pow\";\n  export const mod = \"mod\";\n}\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(range.source.normalizedPath);\n      sb.push(\"(\");\n      sb.push(range.line.toString(10));\n      sb.push(\",\");\n      sb.push(range.column.toString(10));\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) sb.push(\"~\");\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./bitset\";\nexport * from \"./charcode\";\nexport * from \"./collections\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  CommonSymbols,\n  LibrarySymbols\n} from \"./common\";\n\nimport {\n  Options,\n  Feature\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  Range,\n  DecoratorNode,\n  DecoratorKind,\n  SignatureNode,\n  TypeParameterNode,\n  CommonTypeNode,\n  TypeNode,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  decoratorNameToKind,\n  findDecorator\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\n/** Returns the operator kind represented by the specified decorator and string argument. */\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n  assert(arg.length);\n  switch (decoratorKind) {\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.OPENBRACKET: {\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n          break;\n        }\n        case CharCode.OPENBRACE: {\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n          break;\n        }\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.ADD;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.SUB;\n          break;\n        }\n        case CharCode.ASTERISK: {\n          if (arg == \"*\") return OperatorKind.MUL;\n          if (arg == \"**\") return OperatorKind.POW;\n          break;\n        }\n        case CharCode.SLASH: {\n          if (arg == \"/\") return OperatorKind.DIV;\n          break;\n        }\n        case CharCode.PERCENT: {\n          if (arg == \"%\") return OperatorKind.REM;\n          break;\n        }\n        case CharCode.AMPERSAND: {\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\n          break;\n        }\n        case CharCode.BAR: {\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\n          break;\n        }\n        case CharCode.CARET: {\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n          break;\n        }\n        case CharCode.EQUALS: {\n          if (arg == \"==\") return OperatorKind.EQ;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!=\") return OperatorKind.NE;\n          break;\n        }\n        case CharCode.GREATERTHAN: {\n          if (arg == \">\") return OperatorKind.GT;\n          if (arg == \">=\") return OperatorKind.GE;\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n          break;\n        }\n        case CharCode.LESSTHAN: {\n          if (arg == \"<\") return OperatorKind.LT;\n          if (arg == \"<=\") return OperatorKind.LE;\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_PREFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"+\") return OperatorKind.PLUS;\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"-\") return OperatorKind.MINUS;\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          if (arg == \"!\") return OperatorKind.NOT;\n          break;\n        }\n        case CharCode.TILDE: {\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n          break;\n        }\n      }\n      break;\n    }\n    case DecoratorKind.OPERATOR_POSTFIX: {\n      switch (arg.charCodeAt(0)) {\n        case CharCode.PLUS: {\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n          break;\n        }\n        case CharCode.MINUS: {\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n          break;\n        }\n      }\n      break;\n    }\n  }\n  return OperatorKind.INVALID;\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n  /** Explicitly annotated start function. */\n  explicitStartFunction: FunctionPrototype | null = null;\n\n  // lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes backing basic types like `i32`. */\n  typeClasses: Map<TypeKind,Class> = new Map();\n\n  // runtime references\n\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class | null = null;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype | null = null;\n  /** String instance reference. */\n  stringInstance: Class | null = null;\n  /** Abort function reference, if present. */\n  abortInstance: Function | null = null;\n  /** Memory allocation function. */\n  memoryAllocateInstance: Function | null = null;\n\n  // gc integration\n\n  /** Whether a garbage collector is present or not. */\n  hasGC: bool = false;\n  /** Garbage collector allocation function. */\n  gcAllocateInstance: Function | null = null;\n  /** Garbage collector link function called when a managed object is referenced from a parent. */\n  gcLinkInstance: Function | null = null;\n  /** Garbage collector mark function called to on reachable managed objects. */\n  gcMarkInstance: Function | null = null;\n  /** Size of a managed object header. */\n  gcHeaderSize: u32 = 0;\n  /** Offset of the GC hook. */\n  gcHookOffset: u32 = 0;\n\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY);\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.resolver = new Resolver(this);\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, null, null, flags, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null,\n      Node.createOmittedType(range),\n      null, flags, range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: SignatureNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null,\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createSignature([],\n        Node.createType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\n          null, false, range\n        ),\n        null, false, range)\n      ),\n      null, null, flags, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      [], null, flags, range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    assert(elementsByDeclaration.has(declaration));\n    return elementsByDeclaration.get(declaration)!;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // register native types\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\n    this.registerNativeType(CommonSymbols.void_, Type.void);\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\n      CommonSymbols.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\n\n    // register compiler hints\n    this.registerConstantInteger(LibrarySymbols.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? 2 : 1));\n    this.registerConstantInteger(LibrarySymbols.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_MUTABLE_GLOBAL, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    for (let [file, exportsStar] of queuedExportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = exportsStar[i];\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            queuedImport.localIdentifier.text,\n            element,\n            true // isImport\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range,\n            queuedImport.foreignPath,\n            foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = queuedImport.localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile\n            ),\n            true // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [file, exports] of queuedExports) {\n      for (let [exportName, queuedExport] of exports) {\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register classes backing basic types\n    this.registerNativeTypeClass(TypeKind.I8, LibrarySymbols.I8);\n    this.registerNativeTypeClass(TypeKind.I16, LibrarySymbols.I16);\n    this.registerNativeTypeClass(TypeKind.I32, LibrarySymbols.I32);\n    this.registerNativeTypeClass(TypeKind.I64, LibrarySymbols.I64);\n    this.registerNativeTypeClass(TypeKind.ISIZE, LibrarySymbols.Isize);\n    this.registerNativeTypeClass(TypeKind.U8, LibrarySymbols.U8);\n    this.registerNativeTypeClass(TypeKind.U16, LibrarySymbols.U16);\n    this.registerNativeTypeClass(TypeKind.U32, LibrarySymbols.U32);\n    this.registerNativeTypeClass(TypeKind.U64, LibrarySymbols.U64);\n    this.registerNativeTypeClass(TypeKind.USIZE, LibrarySymbols.Usize);\n    this.registerNativeTypeClass(TypeKind.BOOL, LibrarySymbols.Bool);\n    this.registerNativeTypeClass(TypeKind.F32, LibrarySymbols.F32);\n    this.registerNativeTypeClass(TypeKind.F64, LibrarySymbols.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeTypeClass(TypeKind.V128, LibrarySymbols.V128);\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\n          this.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\n          );\n        }\n        if (\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n        ) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n          );\n        }\n        thisPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          extendsNode.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let elementsByName = this.elementsByName;\n          let element = elementsByName.get(name);\n          if (element) {\n            if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\n            elementsByName.set(alias, element);\n          }\n          else throw new Error(\"no such global element: \" + name);\n        }\n      }\n    }\n\n    // register global library elements\n    {\n      let element: Element | null;\n      if (element = this.lookupGlobal(LibrarySymbols.String)) {\n        assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n        this.stringInstance = resolver.resolveClass(<ClassPrototype>element, null);\n      }\n      if (element = this.lookupGlobal(LibrarySymbols.ArrayBuffer)) {\n        assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n        this.arrayBufferInstance = resolver.resolveClass(<ClassPrototype>element, null);\n      }\n      if (element = this.lookupGlobal(LibrarySymbols.Array)) {\n        assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n        this.arrayPrototype = <ClassPrototype>element;\n      }\n      if (element = this.lookupGlobal(LibrarySymbols.abort)) {\n        assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n        this.abortInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n      }\n      if (element = this.lookupGlobal(LibrarySymbols.memory)) {\n        if (element = element.lookupInSelf(LibrarySymbols.allocate)) {\n          assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n          this.memoryAllocateInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\n        }\n      }\n    }\n\n    // register GC hooks if present\n    // FIXME: think about a better way than globals to model this, maybe a GC namespace that can be\n    // dynamically extended by a concrete implementation but then has `@unsafe` methods that normal\n    // code cannot call without explicitly enabling it with a flag.\n    if (\n      this.elementsByName.has(\"__gc_allocate\") &&\n      this.elementsByName.has(\"__gc_link\") &&\n      this.elementsByName.has(\"__gc_mark\")\n    ) {\n      // __gc_allocate(usize, (ref: usize) => void): usize\n      let element = <Element>this.elementsByName.get(\"__gc_allocate\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcAllocateInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      let signature = gcAllocateInstance.signature;\n      assert(signature.parameterTypes.length == 2);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.parameterTypes[1].signatureReference);\n      assert(signature.returnType == this.options.usizeType);\n\n      // __gc_link(usize, usize): void\n      element = <Element>this.elementsByName.get(\"__gc_link\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcLinkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      signature = gcLinkInstance.signature;\n      assert(signature.parameterTypes.length == 2);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.parameterTypes[1] == this.options.usizeType);\n      assert(signature.returnType == Type.void);\n\n      // __gc_mark(usize): void\n      element = <Element>this.elementsByName.get(\"__gc_mark\");\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcMarkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\n      signature = gcMarkInstance.signature;\n      assert(signature.parameterTypes.length == 1);\n      assert(signature.parameterTypes[0] == this.options.usizeType);\n      assert(signature.returnType == Type.void);\n\n      this.gcAllocateInstance = gcAllocateInstance;\n      this.gcLinkInstance = gcLinkInstance;\n      this.gcMarkInstance = gcMarkInstance;\n      let gcHookOffset = 2 * options.usizeType.byteSize; // .next + .prev\n      this.gcHookOffset =  gcHookOffset;\n      this.gcHeaderSize = (gcHookOffset + 4 + 7) & ~7;   // + .hook index + alignment\n      this.hasGC = true;\n    }\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    for (let file of this.filesByName.values()) {\n      let exports = file.exports;\n      if (!(file.source.isEntry && exports)) continue;\n      for (let element of exports.values()) this.markModuleExport(element);\n    }\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    {\n      let members = element.members;\n      if (members) for (let member of members.values()) this.markModuleExport(member);\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerNativeTypeClass(typeKind: TypeKind, className: string): void {\n    assert(!this.typeClasses.has(typeKind));\n    var element = this.lookupGlobal(className);\n    if (element) {\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n      let classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n      if (classElement) this.typeClasses.set(typeKind, classElement);\n    }\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): void {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let actual = elementsByName.get(name);\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (actual !== element) {\n        let merged = tryMerge(elementsByName.get(name)!, element);\n        if (!merged) {\n          this.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, name\n          );\n          return;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name);\n    return null;\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n         ? filesByName.get(foreignPath)!\n         : filesByName.has(foreignPathAlt)\n         ? filesByName.get(foreignPathAlt)!\n         : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = fileQueuedExports.get(foreignName)!;\n          if (queuedExport.foreignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExport.foreignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = decoratorNameToKind(decorator.name);\n        let flag = decoratorKindToFlag(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (decorator.range.source.isLibrary) {\n              flags |= flag;\n            } else {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.SEALED |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return;\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      // cannot implement interfaces when unmanaged\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n      } else if (numImplementsTypes) {\n        // remember classes that implement interfaces\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning( // TODO: not yet supported\n            DiagnosticCode.Operation_not_supported,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(element);\n      }\n    }\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators,\n          (declaration.is(CommonFlags.READONLY)\n            ? DecoratorFlags.INLINE\n            : DecoratorFlags.NONE\n          ) | DecoratorFlags.LAZY\n        ),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, DecoratorFlags.NONE)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let kind = operatorKindFromDecorator(\n                  decorator.decoratorKind,\n                  (<StringLiteralExpression>firstArg).value\n                );\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode.Operation_not_supported,\n                    firstArg.range\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(10)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name)!;\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name);\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = assert(statement.internalPath); // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** SO far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\n      queuedImports.push(new QueuedImport(\n        parent,\n        statement.namespaceName,\n        null, // indicates import *\n        statement.internalPath,\n        statement.internalPath + INDEX_SUFFIX\n      ));\n    } else {\n      // import \"./foo\"\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, true);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.NONE;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      if (parent.kind == ElementKind.FILE && (<File>parent).source.isEntry) {\n        validDecorators |= DecoratorFlags.START;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return;\n    if (element.hasDecorator(DecoratorFlags.START)) {\n      if (this.explicitStartFunction) {\n        this.error(\n          DiagnosticCode.Module_cannot_have_multiple_start_functions,\n          assert(findDecorator(DecoratorKind.START, declaration.decorators)).range\n        );\n      } else this.explicitStartFunction = element;\n    }\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return;\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var name = declaration.name.text;\n    var element = new Namespace(name, parent, declaration);\n    if (!parent.add(name, element)) return;\n    element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, element, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, element);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, element);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, element);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, element, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, element);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, element);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is the explicit start function. */\n  START = 1 << 10\n}\n\n/** Translates a decorator kind to the respective decorator flag. */\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\n  switch (kind) {\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n    case DecoratorKind.OPERATOR:\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n    case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n    case DecoratorKind.START: return DecoratorFlags.START;\n    default: return DecoratorFlags.NONE;\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\n    while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members && members.has(name)) return members.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let actual = members.get(name)!;\n      if (actual.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(actual, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return ElementKind[this.kind] + \":\" + this.internalName;\n  }\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\n    if (!super.add(name, element)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) this.program.ensureGlobal(name, element);\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.isLibrary) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports && exports.has(name)) return exports.get(name)!;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element): Namespace {\n    var ns = new Namespace(\n      name,\n      parent,\n      this.program.makeNativeNamespaceDeclaration(name)\n    );\n    var exports = this.exports;\n    if (exports) {\n      for (let [memberName, member] of exports) {\n        ns.add(memberName, member);\n      }\n    }\n    return ns;\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): CommonTypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): CommonTypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: I64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).value;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple na,e */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated signature node. */\n  get signatureNode(): SignatureNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    this.type = Type.u32.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (this.is(CommonFlags.INSTANCE)) {\n        let local = new Local(\n          CommonSymbols.this_,\n          localIndex++,\n          assert(signature.thisType),\n          this\n        );\n        this.localsByName.set(CommonSymbols.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration || this.program.makeNativeVariableDeclaration(localName)\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return locals.get(name);\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program,\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      __s = \"sig:\" + signature.toSignatureString(),\n      __s,\n      program,\n      program.nativeFile\n    );\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = Type.u32.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): CommonTypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      prototype.program.makeNativeVariableDeclaration(\n        prototype.name,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE\n      )\n    );\n    this.prototype = prototype;\n    registerConcreteElement(this.program, this);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): TypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): TypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    do {\n      if (current === basePtototype) return true;\n    } while (current = current.basePrototype);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let merged = tryMerge(instanceMembers.get(name)!, element);\n      if (!merged) {\n        this.program.error(\n          DiagnosticCode.Duplicate_identifier_0,\n          element.identifierNode.range, element.identifierNode.text\n        );\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Function index of the GC hook. */\n  gcHookIndex: u32 = <u32>-1;\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    /** Base class, if derived. */\n    base: Class | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(this.program.options.usizeType.asClass(this));\n    this.base = base;\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters && typeParameters.length) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype { // FIXME\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    nameInclTypeParameters: string,\n    prototype: InterfacePrototype,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      base,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  assert(!newer.members);\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    if (older.is(CommonFlags.EXPORT) != newer.is(CommonFlags.EXPORT)) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    for (let [memberName, member] of srcMembers) {\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport {\n  Target\n} from \"./compiler\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\nexport enum NativeType {\n  None = _BinaryenTypeNone(),\n  I32  = _BinaryenTypeInt32(),\n  I64  = _BinaryenTypeInt64(),\n  F32  = _BinaryenTypeFloat32(),\n  F64  = _BinaryenTypeFloat64(),\n  V128 = _BinaryenTypeVec128(),\n  Unreachable = _BinaryenTypeUnreachable(),\n  Auto = _BinaryenTypeAuto()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  GetLocal = _BinaryenGetLocalId(),\n  SetLocal = _BinaryenSetLocalId(),\n  GetGlobal = _BinaryenGetGlobalId(),\n  SetGlobal = _BinaryenSetGlobalId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicWake = _BinaryenAtomicWakeId(),\n  SIMDExtract = _BinaryenSIMDExtractId(),\n  SIMDReplace = _BinaryenSIMDReplaceId(),\n  SIMDShuffle = _BinaryenSIMDShuffleId(),\n  SIMDBitselect = _BinaryenSIMDBitselectId(),\n  SIMDShift = _BinaryenSIMDShiftId(),\n  MemoryInit = _BinaryenMemoryInitId(),\n  DataDrop = _BinaryenDataDropId(),\n  MemoryCopy = _BinaryenMemoryCopyId(),\n  MemoryFill = _BinaryenMemoryFillId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64()\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  // TruncF32ToI32Sat\n  // TruncF32ToU32Sat\n  // TruncF64ToI32Sat\n  // TruncF64ToU32Sat\n  // TruncF32ToI64Sat\n  // TruncF32ToU64Sat\n  // TruncF64ToI64Sat\n  // TruncF64ToU64Sat\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64()\n}\n\nexport enum HostOp {\n  CurrentMemory = _BinaryenCurrentMemory(),\n  GrowMemory = _BinaryenGrowMemory(),\n\n  // see: https://github.com/WebAssembly/bulk-memory-operations\n  // MoveMemory\n  // SetMemory\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport enum SIMDOp {\n  SplatVecI8x16 = _BinaryenSplatVecI8x16(),\n  SplatVecI16x8 = _BinaryenSplatVecI16x8(),\n  SplatVecI32x4 = _BinaryenSplatVecI32x4(),\n  SplatVecI64x2 = _BinaryenSplatVecI64x2(),\n  SplatVecF32x4 = _BinaryenSplatVecF32x4(),\n  SplatVecF64x2 = _BinaryenSplatVecF64x2(),\n  NotVec128 = _BinaryenNotVec128(),\n  NegVecI8x16 = _BinaryenNegVecI8x16(),\n  AnyTrueVecI8x16 = _BinaryenAnyTrueVecI8x16(),\n  AllTrueVecI8x16 = _BinaryenAllTrueVecI8x16(),\n  NegVecI16x8 = _BinaryenNegVecI16x8(),\n  AnyTrueVecI16x8 = _BinaryenAnyTrueVecI16x8(),\n  AllTrueVecI16x8 = _BinaryenAllTrueVecI16x8(),\n  NegVecI32x4 = _BinaryenNegVecI32x4(),\n  AnyTrueVecI32x4 = _BinaryenAnyTrueVecI32x4(),\n  AllTrueVecI32x4 = _BinaryenAllTrueVecI32x4(),\n  NegVecI64x2 = _BinaryenNegVecI64x2(),\n  AnyTrueVecI64x2 = _BinaryenAnyTrueVecI64x2(),\n  AllTrueVecI64x2 = _BinaryenAllTrueVecI64x2(),\n  AbsVecF32x4 = _BinaryenAbsVecF32x4(),\n  NegVecF32x4 = _BinaryenNegVecF32x4(),\n  SqrtVecF32x4 = _BinaryenSqrtVecF32x4(),\n  AbsVecF64x2 = _BinaryenAbsVecF64x2(),\n  NegVecF64x2 = _BinaryenNegVecF64x2(),\n  SqrtVecF64x2 = _BinaryenSqrtVecF64x2(),\n  TruncSatSVecF32x4ToVecI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\n  TruncSatUVecF32x4ToVecI32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\n  TruncSatSVecF64x2ToVecI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\n  TruncSatUVecF64x2ToVecI64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\n  ConvertSVecI32x4ToVecF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\n  ConvertUVecI32x4ToVecF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\n  ConvertSVecI64x2ToVecF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\n  ConvertUVecI64x2ToVecF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2(),\n  EqVecI8x16 = _BinaryenEqVecI8x16(),\n  NeVecI8x16 = _BinaryenNeVecI8x16(),\n  LtSVecI8x16 = _BinaryenLtSVecI8x16(),\n  LtUVecI8x16 = _BinaryenLtUVecI8x16(),\n  LeSVecI8x16 = _BinaryenLeSVecI8x16(),\n  LeUVecI8x16 = _BinaryenLeUVecI8x16(),\n  GtSVecI8x16 = _BinaryenGtSVecI8x16(),\n  GtUVecI8x16 = _BinaryenGtUVecI8x16(),\n  GeSVecI8x16 = _BinaryenGeSVecI8x16(),\n  GeUVecI8x16 = _BinaryenGeUVecI8x16(),\n  EqVecI16x8 = _BinaryenEqVecI16x8(),\n  NeVecI16x8 = _BinaryenNeVecI16x8(),\n  LtSVecI16x8 = _BinaryenLtSVecI16x8(),\n  LtUVecI16x8 = _BinaryenLtUVecI16x8(),\n  LeSVecI16x8 = _BinaryenLeSVecI16x8(),\n  LeUVecI16x8 = _BinaryenLeUVecI16x8(),\n  GtSVecI16x8 = _BinaryenGtSVecI16x8(),\n  GtUVecI16x8 = _BinaryenGtUVecI16x8(),\n  GeSVecI16x8 = _BinaryenGeSVecI16x8(),\n  GeUVecI16x8 = _BinaryenGeUVecI16x8(),\n  EqVecI32x4 = _BinaryenEqVecI32x4(),\n  NeVecI32x4 = _BinaryenNeVecI32x4(),\n  LtSVecI32x4 = _BinaryenLtSVecI32x4(),\n  LtUVecI32x4 = _BinaryenLtUVecI32x4(),\n  LeSVecI32x4 = _BinaryenLeSVecI32x4(),\n  LeUVecI32x4 = _BinaryenLeUVecI32x4(),\n  GtSVecI32x4 = _BinaryenGtSVecI32x4(),\n  GtUVecI32x4 = _BinaryenGtUVecI32x4(),\n  GeSVecI32x4 = _BinaryenGeSVecI32x4(),\n  GeUVecI32x4 = _BinaryenGeUVecI32x4(),\n  EqVecF32x4 = _BinaryenEqVecF32x4(),\n  NeVecF32x4 = _BinaryenNeVecF32x4(),\n  LtVecF32x4 = _BinaryenLtVecF32x4(),\n  LeVecF32x4 = _BinaryenLeVecF32x4(),\n  GtVecF32x4 = _BinaryenGtVecF32x4(),\n  GeVecF32x4 = _BinaryenGeVecF32x4(),\n  EqVecF64x2 = _BinaryenEqVecF64x2(),\n  NeVecF64x2 = _BinaryenNeVecF64x2(),\n  LtVecF64x2 = _BinaryenLtVecF64x2(),\n  LeVecF64x2 = _BinaryenLeVecF64x2(),\n  GtVecF64x2 = _BinaryenGtVecF64x2(),\n  GeVecF64x2 = _BinaryenGeVecF64x2(),\n  AndVec128 = _BinaryenAndVec128(),\n  OrVec128 = _BinaryenOrVec128(),\n  XorVec128 = _BinaryenXorVec128(),\n  AddVecI8x16 = _BinaryenAddVecI8x16(),\n  AddSatSVecI8x16 = _BinaryenAddSatSVecI8x16(),\n  AddSatUVecI8x16 = _BinaryenAddSatUVecI8x16(),\n  SubVecI8x16 = _BinaryenSubVecI8x16(),\n  SubSatSVecI8x16 = _BinaryenSubSatSVecI8x16(),\n  SubSatUVecI8x16 = _BinaryenSubSatUVecI8x16(),\n  MulVecI8x16 = _BinaryenMulVecI8x16(),\n  AddVecI16x8 = _BinaryenAddVecI16x8(),\n  AddSatSVecI16x8 = _BinaryenAddSatSVecI16x8(),\n  AddSatUVecI16x8 = _BinaryenAddSatUVecI16x8(),\n  SubVecI16x8 = _BinaryenSubVecI16x8(),\n  SubSatSVecI16x8 = _BinaryenSubSatSVecI16x8(),\n  SubSatUVecI16x8 = _BinaryenSubSatUVecI16x8(),\n  MulVecI16x8 = _BinaryenMulVecI16x8(),\n  AddVecI32x4 = _BinaryenAddVecI32x4(),\n  SubVecI32x4 = _BinaryenSubVecI32x4(),\n  MulVecI32x4 = _BinaryenMulVecI32x4(),\n  AddVecI64x2 = _BinaryenAddVecI64x2(),\n  SubVecI64x2 = _BinaryenSubVecI64x2(),\n  AddVecF32x4 = _BinaryenAddVecF32x4(),\n  SubVecF32x4 = _BinaryenSubVecF32x4(),\n  MulVecF32x4 = _BinaryenMulVecF32x4(),\n  DivVecF32x4 = _BinaryenDivVecF32x4(),\n  MinVecF32x4 = _BinaryenMinVecF32x4(),\n  MaxVecF32x4 = _BinaryenMaxVecF32x4(),\n  AddVecF64x2 = _BinaryenAddVecF64x2(),\n  SubVecF64x2 = _BinaryenSubVecF64x2(),\n  MulVecF64x2 = _BinaryenMulVecF64x2(),\n  DivVecF64x2 = _BinaryenDivVecF64x2(),\n  MinVecF64x2 = _BinaryenMinVecF64x2(),\n  MaxVecF64x2 = _BinaryenMaxVecF64x2()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private lit: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.lit = memory.allocate(_BinaryenSizeofLiteral());\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.lit = memory.allocate(_BinaryenSizeofLiteral());\n      return module;\n    } finally {\n      memory.free(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunctionType(this.ref, cStr);\n  }\n\n  // constants\n\n  createI32(value: i32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF32(value: f32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createF64(value: f64): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  createV128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    // FIXME: does this work or do we need to malloc?\n    for (let i = 0; i < 16; ++i) store<u8>(out + i, bytes[i]);\n    _BinaryenLiteralVec128(out, out);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  createUnary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  createBinary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  createHost(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createGetLocal(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenGetLocal(this.ref, index, type);\n  }\n\n  createTeeLocal(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenTeeLocal(this.ref, index, value);\n  }\n\n  createGetGlobal(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGetGlobal(this.ref, cStr, type);\n  }\n\n  createLoad(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, /* always aligned */ bytes, type, ptr);\n  }\n\n  createStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenStore(this.ref, bytes, offset, /* always aligned */ bytes, ptr, value, type);\n  }\n\n  createAtomicLoad(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  createAtomicStore(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicRMW(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  createAtomicCmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  createAtomicWait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  createAtomicWake(\n    ptr: ExpressionRef,\n    wakeCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\n  }\n\n  // statements\n\n  createSetLocal(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSetLocal(this.ref, index, value);\n  }\n\n  createSetGlobal(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenSetGlobal(this.ref, cStr, value);\n  }\n\n  createBlock(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createBreak(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  createDrop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  createLoop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenLoop(this.ref, cStr, body);\n  }\n\n  createIf(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createNop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  createReturn(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  createSelect(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  createSwitch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = this.allocStringCached(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createCall(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createCallIndirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(typeName);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  createUnreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  createMemoryCopy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  createMemoryFill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    _BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType\n  ): ImportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\n  }\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      offs[i] = target == Target.WASM64\n        ? this.createI64(i64_low(offset), i64_high(offset))\n        : this.createI32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocI32Array(offs);\n    var cArr3 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k, shared);\n    } finally {\n      memory.free(cArr3);\n      memory.free(cArr2);\n      memory.free(cArr1);\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\n    }\n  }\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[]\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  getOptimizeLevel(): i32 {\n    return _BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return _BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\n    var previousDebugInfo = _BinaryenGetDebugInfo();\n    _BinaryenSetOptimizeLevel(4);\n    _BinaryenSetShrinkLevel(0);\n    _BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = _BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      this.cachedPrecomputeNames = names = allocI32Array([ this.allocStringCached(\"precompute\") ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\n    expr = _BinaryenFunctionGetBody(func);\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\n    _BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(_BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) memory.free(cStr);\n      if (binaryPtr) memory.free(binaryPtr);\n      if (sourceMapPtr) memory.free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str == null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\n    this.cachedStrings = new Map();\n    memory.free(this.lit);\n    memory.free(this.cachedPrecomputeNames);\n    this.cachedPrecomputeNames = 0;\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n        switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.createI32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.createI64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.createF32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.createF64(_BinaryenConstGetValueF64(expr));\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.GetLocal: {\n        return _BinaryenGetLocal(this.ref,\n          _BinaryenGetLocalGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GetGlobal: {\n        let globalName = _BinaryenGetGlobalGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenGetLocalGetIndex(expr);\n}\n\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\n  return _BinaryenSetLocalGetIndex(expr);\n}\n\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSetLocalGetValue(expr);\n}\n\nexport function isTeeLocal(expr: ExpressionRef): bool {\n  return _BinaryenSetLocalIsTee(expr);\n}\n\nexport function getGetGlobalName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenGetGlobalGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\n// export function hasSideEffects(expr: ExpressionRef): bool {\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\n//     case ExpressionId.GetLocal:\n//     case ExpressionId.GetGlobal:\n//     case ExpressionId.Const:\n//     case ExpressionId.Nop:\n//     case ExpressionId.Unreachable: {\n//       return false;\n//     }\n//     case ExpressionId.Block: {\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n//       }\n//       return false;\n//     }\n//     case ExpressionId.If: {\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n//     }\n//     case ExpressionId.Unary: {\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\n//     }\n//     case ExpressionId.Binary: {\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\n//     }\n//     case ExpressionId.Drop: {\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\n//     }\n//     case ExpressionId.Select: {\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\n//     }\n//   }\n//   return true;\n// }\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = memory.allocate(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = memory.allocate(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  switch (_BinaryenExpressionGetType(expr)) {\n    case NativeType.I32:\n    case NativeType.I64:\n    case NativeType.F32:\n    case NativeType.F64: return false;\n  }\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  CommonSymbols,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  TYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n  SIGNATURE,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.ASSERTION: // if kind=NONNULL\n    case NodeKind.CALL:\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PARENTHESIZED:\n    case NodeKind.PROPERTYACCESS:\n    case NodeKind.SUPER: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n\n  // types\n\n  static createTypeName(\n    name: IdentifierExpression,\n    range: Range\n  ): TypeName {\n    var typeName = new TypeName();\n    typeName.range = range;\n    typeName.identifier = name;\n    typeName.next = null;\n    return typeName;\n  }\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\n  }\n\n  static createType(\n    name: TypeName,\n    typeArguments: CommonTypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): TypeNode {\n    var type = new TypeNode();\n    type.range = range;\n    type.name = name;\n    type.typeArguments = typeArguments;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): TypeNode {\n    return Node.createType(\n      Node.createSimpleTypeName(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: TypeNode | null,\n    defaultType: TypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.extendsType = extendsType;\n    elem.defaultType = defaultType;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: CommonTypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  static createSignature(\n    parameters: ParameterNode[],\n    returnType: CommonTypeNode,\n    explicitThisType: TypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): SignatureNode {\n    var sig = new SignatureNode();\n    sig.range = range;\n    sig.parameters = parameters;\n    sig.returnType = returnType;\n    sig.explicitThisType = explicitThisType;\n    sig.isNullable = isNullable;\n    return sig;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.arguments = args;\n    stmt.decoratorKind = decoratorNameToKind(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name; // TODO: extract from range\n    expr.symbol = name; // TODO: Symbol.for(name)\n    expr.isQuoted = isQuoted;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements;\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: CommonTypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression;\n    expr.toType = toType;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left;\n    expr.right = right;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions;\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.elementExpression = element;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: CommonTypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.isType = isType;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: CommonTypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.property = property;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition;\n    expr.ifThen = ifThen;\n    expr.ifElse = ifElse;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: TypeNode | null, // can't be a function\n    implementsTypes: TypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.implementsTypes = implementsTypes;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement;\n    stmt.condition = condition;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.values = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.members = members;\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        stmt.normalizedPath = resolvePath(\n          normalizedPath,\n          range.source.normalizedPath\n        );\n      } else { // absolute\n        stmt.normalizedPath = normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    } else {\n      stmt.normalizedPath = null;\n      stmt.internalPath = null;\n    }\n    stmt.isDeclare = isDeclare;\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.externalName = externalName;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.localName = name;\n    if (!externalName) externalName = name;\n    elem.exportedName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.ifTrue = ifTrue;\n    stmt.ifFalse = ifFalse;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls;\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      stmt.normalizedPath = resolvePath(\n        normalizedPath,\n        range.source.normalizedPath\n      );\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.normalizedPath = normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    stmt.normalizedPath = resolvePath(\n      normalizePath(path.value),\n      range.source.normalizedPath\n    );\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.foreignName = foreignName;\n    if (!name) name = foreignName;\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: TypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.type = type;\n    stmt.initializer = initializer;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer;\n    stmt.condition = condition;\n    stmt.incrementor = incrementor;\n    stmt.statement = statement;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: TypeNode,\n    valueType: CommonTypeNode,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var elem = new IndexSignatureDeclaration();\n    elem.range = range;\n    elem.keyType = keyType;\n    elem.valueType = valueType;\n    return elem;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: SignatureNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.cases = cases;\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label;\n    elem.statements = statements;\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    stmt.catchVariable = catchVariable;\n    stmt.catchStatements = catchStatements;\n    stmt.finallyStatements = finallyStatements;\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: CommonTypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.type = alias;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.declarations = declarations;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: CommonTypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.statement = statement;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class CommonTypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  kind = NodeKind.TYPENAME;\n\n  /** Identifier of this part. */\n  identifier: IdentifierExpression;\n  /** Next part of the type name or `null` if this is the last part. */\n  next: TypeName | null;\n}\n\n/** Represents a type annotation. */\nexport class TypeNode extends CommonTypeNode {\n  kind = NodeKind.TYPE;\n\n  /** Type name. */\n  name: TypeName;\n  /** Type argument references. */\n  typeArguments: CommonTypeNode[] | null;\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: TypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: CommonTypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents a function signature. */\nexport class SignatureNode extends CommonTypeNode {\n  kind = NodeKind.SIGNATURE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: CommonTypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: TypeNode | null; // can't be a function\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  START\n}\n\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\n  // @global, @inline, @operator, @sealed, @unmanaged\n  if (name.kind == NodeKind.IDENTIFIER) {\n    let nameStr = (<IdentifierExpression>name).text;\n    assert(nameStr.length);\n    switch (nameStr.charCodeAt(0)) {\n      case CharCode.b: {\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n        break;\n      }\n      case CharCode.e: {\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n        break;\n      }\n      case CharCode.g: {\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n        break;\n      }\n      case CharCode.i: {\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\n        break;\n      }\n      case CharCode.l: {\n        if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n        break;\n      }\n      case CharCode.o: {\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n        break;\n      }\n      case CharCode.s: {\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n        if (nameStr == \"start\") return DecoratorKind.START;\n        break;\n      }\n      case CharCode.u: {\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n        break;\n      }\n    }\n  } else if (\n    name.kind == NodeKind.PROPERTYACCESS &&\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\n  ) {\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\n    assert(nameStr.length);\n    let propStr = (<PropertyAccessExpression>name).property.text;\n    assert(propStr.length);\n    // @operator.binary, @operator.prefix, @operator.postfix\n    if (nameStr == \"operator\") {\n      switch (propStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n          break;\n        }\n        case CharCode.p: {\n          switch (propStr) {\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n          }\n          break;\n        }\n      }\n    }\n  }\n  return DecoratorKind.CUSTOM;\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n  /** Symbol. */\n  symbol: string; // TODO: symbol\n  /** Whether quoted or not. */\n  isQuoted: bool;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS,\n  NONNULL\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: CommonTypeNode | null;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: CommonTypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n  symbol = CommonSymbols.constructor;\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: CommonTypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n  symbol = CommonSymbols.null_;\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n  symbol = CommonSymbols.super_;\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n  symbol = CommonSymbols.this_;\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n  symbol = CommonSymbols.true_;\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n  symbol = CommonSymbols.false_;\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** Default source. Usually imported from an entry file. */\n  DEFAULT,\n  /** Entry file. */\n  ENTRY,\n  /** Library file. */\n  LIBRARY\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Tests if this source is an entry file. */\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\n  /** Tests if this source is a stdlib file. */\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\n\n  /** Key type. */\n  keyType: TypeNode;\n  /** Value type. */\n  valueType: CommonTypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: CommonTypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Base class type being extended, if any. */\n  extendsType: TypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: TypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Local identifier. */\n  localName: IdentifierExpression;\n  /** Exported identifier. */\n  exportedName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a file export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Normalized path, if `path` is set. */\n  normalizedPath: string | null;\n  /** Mangled internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n  /** Whether this is a declared export. */\n  isDeclare: bool;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: SignatureNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return Node.createFunctionDeclaration(\n      this.name, this.typeParameters, this.signature, this.body, this.decorators, this.flags, this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  foreignName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Normalized path. */\n  normalizedPath: string;\n  /** Mangled internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: CommonTypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n  V128,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type. */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10\n}\n\nconst v128_zero = new Uint8Array(16);\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  isManaged(program: Program): bool {\n    if (program.hasGC) {\n      let classReference = this.classReference;\n      return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n    }\n    return false;\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to a target of the specified type. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Determines the common compatible type of two types, if any. */\n  static commonCompatible(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to its TypeScript representation. */\n  toString(kindOnly: bool = false): string {\n    if (!kindOnly && this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.name + \" | null\"\n          : classReference.name;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString(true) + \") | null\"\n          : signatureReference.toString(true);\n      }\n      assert(false);\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(0);\n      case TypeKind.F32: return module.createF32(0);\n      case TypeKind.F64: return module.createF64(0);\n      case TypeKind.V128: return module.createV128(v128_zero);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(1);\n      case TypeKind.F32: return module.createF32(1);\n      case TypeKind.F64: return module.createF64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n      case TypeKind.VOID: assert(false);\n      default: return module.createI32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.createI64(-1, -1);\n      case TypeKind.F32: return module.createF32(-1);\n      case TypeKind.F64: return module.createF64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      default: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"I\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"I\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"F\";\n      case TypeKind.V128: return \"v\";\n      case TypeKind.VOID: return \"_\";\n    }\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n\n  /** Constructs a new signature. */\n  constructor(\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = target.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != target.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = target.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = target.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    sb.push(returnType.toSignatureString());\n    return sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(includeThis: bool = false): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      if (includeThis) {\n        sb.push(\"this: \");\n        sb.push(thisType.toString());\n        index = 1;\n      }\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics ? diagnostics : new Array();\n\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < this.end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < this.end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < this.end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < this.end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (isDecimalDigit(chr)) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < this.end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < this.end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < this.end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < this.end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < this.end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < this.end) {\n                chr = text.charCodeAt(this.pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < this.end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < this.end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < this.end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < this.end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    while (\n      ++this.pos < this.end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= this.end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c)) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    if (++this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < this.end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= this.end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var flags = 0;\n    while (this.pos < this.end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var text = this.source.text;\n    if (this.pos + 1 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.x:\n        case CharCode.X:\n        case CharCode.b:\n        case CharCode.B:\n        case CharCode.o:\n        case CharCode.O: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < this.end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.e || c == CharCode.E) {\n        return false;\n      }\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.x:\n        case CharCode.X: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b:\n        case CharCode.B: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o:\n        case CharCode.O: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    var sepEnd = start;\n    while (this.pos < this.end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var text = this.source.text;\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.e || c == CharCode.E) {\n        if (\n          ++this.pos < this.end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var text = this.source.text;\n    while (this.pos < this.end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var text = this.source.text;\n    if (this.pos >= this.end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, this.end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 65536) >>> 10) + 0xD800,\n        ((value32 - 65536) & 1023) + 0xDC00\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow\n} from \"./flow\";\n\nimport {\n  SignatureNode,\n  ParameterKind,\n  CommonTypeNode,\n  NodeKind,\n  TypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonSymbols\n} from \"./common\";\n\nimport {\n  makeMap\n} from \"./util\";\n\nimport {\n  Token\n} from \"./tokenizer\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: CommonTypeNode,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n\n    // handle signature\n    if (node.kind == NodeKind.SIGNATURE) {\n      let explicitThisType = (<SignatureNode>node).explicitThisType;\n      let thisType: Type | null = null;\n      if (explicitThisType) {\n        thisType = this.resolveType(\n          explicitThisType,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!thisType) return null;\n      }\n      let parameterNodes = (<SignatureNode>node).parameters;\n      let numParameters = parameterNodes.length;\n      let parameterTypes = new Array<Type>(numParameters);\n      let parameterNames = new Array<string>(numParameters);\n      let requiredParameters = 0;\n      let hasRest = false;\n      for (let i = 0; i < numParameters; ++i) {\n        let parameterTypeNode = parameterNodes[i];\n        switch (parameterTypeNode.parameterKind) {\n          case ParameterKind.DEFAULT: {\n            requiredParameters = i + 1;\n            break;\n          }\n          case ParameterKind.REST: {\n            assert(i == numParameters);\n            hasRest = true;\n            break;\n          }\n        }\n        let parameterType = this.resolveType(\n          assert(parameterTypeNode.type),\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!parameterType) return null;\n        parameterTypes[i] = parameterType;\n        parameterNames[i] = parameterTypeNode.name.text;\n      }\n      let returnTypeNode = (<SignatureNode>node).returnType;\n      let returnType: Type | null;\n      if (returnTypeNode) {\n        returnType = this.resolveType(\n          returnTypeNode,\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!returnType) return null;\n      } else {\n        returnType = Type.void;\n      }\n      let signature = new Signature(parameterTypes, returnType, thisType);\n      signature.parameterNames = parameterNames;\n      signature.requiredParameters = requiredParameters;\n      signature.hasRest = hasRest;\n      return node.isNullable ? signature.type.asNullable() : signature.type;\n    }\n\n    // now dealing with TypeNode\n    assert(node.kind == NodeKind.TYPE);\n    var typeNode = <TypeNode>node;\n    var typeName = typeNode.name;\n    var typeArgumentNodes = typeNode.typeArguments;\n    var possiblyPlaceholder = !typeName.next;\n\n    // look up in contextual type arguments if possibly a placeholder\n    if (possiblyPlaceholder) {\n      if (contextualTypeArguments && contextualTypeArguments.has(typeName.identifier.text)) {\n        let type = contextualTypeArguments.get(typeName.identifier.text)!;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                node.range, type.toString()\n              );\n            }\n          }\n          return type.asNullable();\n        }\n        return type;\n      }\n    }\n\n    // look up in context\n    var element = this.resolveTypeName(typeName, context, reportMode);\n    if (!element) return null;\n\n    // use shadow type if present (i.e. namespace sharing a type)\n    if (element.shadowType) {\n      element = element.shadowType;\n\n    } else {\n      // handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, element.name\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // handle classes\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          context,\n          makeMap<string,Type>(contextualTypeArguments), // don't inherit\n          node\n        ); // reports\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n\n      // shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = (<TypeDefinition>element).type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                typeNode.name.range, typeName.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // handle special native type\n      if (possiblyPlaceholder && typeName.identifier.text == CommonSymbols.native) {\n        if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              typeNode.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n            );\n          }\n          return null;\n        }\n        let typeArgument = this.resolveType(\n          typeArgumentNodes[0],\n          context,\n          contextualTypeArguments,\n          reportMode\n        );\n        if (!typeArgument) return null;\n        switch (typeArgument.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: return Type.i32;\n          case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n          case TypeKind.I64: return Type.i64;\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: return Type.u32;\n          case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n          case TypeKind.U64: return Type.u64;\n          case TypeKind.F32: return Type.f32;\n          case TypeKind.F64: return Type.f64;\n          case TypeKind.V128: return Type.v128;\n          case TypeKind.VOID: return Type.void;\n          default: assert(false);\n        }\n      }\n\n      // resolve normally\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          context,\n          contextualTypeArguments = makeMap(contextualTypeArguments), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          typeNode.range, typeName.identifier.text\n        );\n        // recoverable\n      }\n      return this.resolveType(\n        (<TypeDefinition>element).typeNode,\n        element,\n        contextualTypeArguments,\n        reportMode\n      );\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        typeNode.name.range, typeName.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    typeName: TypeName,\n    /** Relative context. */\n    context: Element,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = context.lookup(typeName.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          typeName.range, typeName.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = typeName;\n    var next = typeName.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Actual type parameter nodes. */\n    typeParameters: TypeParameterNode[],\n    /** Type arguments provided. */\n    typeArgumentNodes: CommonTypeNode[] | null,\n    /** Relative context. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0; i < typeParameters.length; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      this.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        argumentCount\n          ? Range.join(\n              (<TypeNode[]>typeArgumentNodes)[0].range,\n              (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n            )\n          : assert(alternativeReportNode).range,\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\n        argumentCount.toString(10)\n      );\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            (<TypeNode[]>typeArgumentNodes)[i],\n            context,\n            contextualTypeArguments,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            context,\n            contextualTypeArguments,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      contextualTypeArguments.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves an identifier to the program element it refers to. */\n  resolveIdentifier(\n    /** The expression to resolve. */\n    identifier: IdentifierExpression,\n    /** Optional flow to search for scoped locals. */\n    flow: Flow | null,\n    /** Optional context to search. */\n    context: Element | null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var name = identifier.text;\n    var element: Element | null;\n    if (flow) {\n      if (element = flow.lookup(name)) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return element;\n      }\n    }\n    if (context) {\n      if (element = context.lookup(name)) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return element;\n      }\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        identifier.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field. */\n  ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var typeNode = global.typeNode;\n    if (!typeNode) return false;\n    var type = this.resolveType( // reports\n      typeNode,\n      global.parent,\n      null,\n      reportMode\n    );\n    if (!type) return false;\n    global.setType(type);\n    return true;\n  }\n\n  /** Resolves a property access expression to the program element it refers to. */\n  resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    propertyAccess: PropertyAccessExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = propertyAccess.expression;\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = propertyAccess.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let typeClasses = this.program.typeClasses;\n          if (!type.is(TypeFlags.REFERENCE) && typeClasses.has(type.kind)) {\n            classReference = typeClasses.get(type.kind)!;\n          } else {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n            );\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static\n        let getterInstance = this.resolveFunction( // reports\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getterInstance) return null;\n        let classReference = getterInstance.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\n        let classReference = getterInstance.signature.returnType.classReference;\n        if (!classReference) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\n          );\n          return null;\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.CLASS: { // property access on element access?\n        let elementExpression = this.currentElementExpression;\n        if (elementExpression) {\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, (<Class>target).internalName\n            );\n            return null;\n          }\n          let returnType = indexedGet.signature.returnType;\n          if (!(target = returnType.classReference)) {\n            this.error(\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\n              propertyAccess.property.range, propertyName, returnType.toString()\n            );\n            return null;\n          }\n        }\n        break;\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          if (members && members.has(propertyName)) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = null;\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members && members.has(propertyName)) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = null;\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n    this.error(\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\n      propertyAccess.property.range, propertyName, target.internalName\n    );\n    return null;\n  }\n\n  /** Resolves an element access expression to the program element it refers to. */\n  resolveElementAccessExpression(\n    /** The expression to resolve. */\n    elementAccess: ElementAccessExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = elementAccess.expression;\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        let type = (<VariableLikeElement>target).type;\n        if (target = type.classReference) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = elementAccess.elementExpression;\n          return target;\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementAccess.range, (<Class>target).internalName\n            );\n          }\n          return null;\n        }\n        if (targetExpression.kind == NodeKind.ELEMENTACCESS) { // nested element access\n          let returnType = indexedGet.signature.returnType;\n          if (target = returnType.classReference) {\n            this.currentThisExpression = targetExpression;\n            this.currentElementExpression = elementAccess.elementExpression;\n            return target;\n          }\n          return null;\n        }\n        this.currentThisExpression = targetExpression;\n        this.currentElementExpression = elementAccess.elementExpression;\n        return target;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        targetExpression.range\n      );\n    }\n    return null;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: I64,\n    /** Current contextual type. */\n    contextualType: Type\n  ): Type {\n    if (!contextualType.is(TypeFlags.REFERENCE)) {\n      // compile to contextualType if matching\n      switch (contextualType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n        case TypeKind.VOID: break; // best fitting below\n        default: assert(false);\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64;\n  }\n\n  /** Resolves any expression to the program element it refers to. */\n  resolveExpression(\n    /** The expression to resolve. */\n    expression: Expression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // simply skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER: {\n        return this.resolveIdentifier(\n          <IdentifierExpression>expression,\n          flow, flow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>expression,\n          flow, contextualType, reportMode\n        );\n      }\n      // TODO: everything else\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an assertion expression to the program element it refers to. */\n  resolveAssertionExpression(\n    /** The expression to resolve. */\n    expression: AssertionExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (expression.assertionKind == AssertionKind.NONNULL) {\n      return this.resolveExpression(\n        expression.expression,\n        flow,\n        contextualType,\n        reportMode\n      );\n    }\n    var type = this.resolveType(\n      assert(expression.toType), // must be set if not NONNULL\n      flow.actualFunction,\n      flow.contextualTypeArguments,\n      reportMode\n    );\n    if (!type) return null;\n    var element: Element | null = type.classReference;\n    if (!element) {\n      let signature = type.signatureReference;\n      if (!signature) return null;\n      element = signature.asFunctionTarget(this.program);\n    }\n    this.currentThisExpression = null;\n    this.currentElementExpression = null;\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to the program element it refers to. */\n  resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    expression: UnaryPrefixExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var operand = expression.operand;\n    // TODO: operator overloads\n    switch (expression.operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\n          let type = this.determineIntegerLiteralType(\n            i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value),\n            contextualType\n          );\n          let typeClasses = this.program.typeClasses;\n          return typeClasses.has(type.kind) ? typeClasses.get(type.kind)! : null;\n        }\n        return this.resolveExpression(\n          operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        return this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      case Token.EXCLAMATION: {\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(TypeKind.BOOL) ? typeClasses.get(TypeKind.BOOL)! : null;\n      }\n      case Token.TILDE: {\n        let resolvedOperand = this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n        if (!resolvedOperand) return null;\n        // TODO\n        break;\n      }\n      default: assert(false);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an unary postfix expression to the program element it refers to. */\n  resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    expression: UnaryPostfixExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // TODO: operator overloads\n    switch (expression.operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        return this.resolveExpression(\n          expression.operand,\n          flow,\n          contextualType,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to the program element it refers to. */\n  resolveBinaryExpression(\n    /** The expression to resolve. */\n    expression: BinaryExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    // TODO\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to the program element it refers to. */\n  resolveThisExpression(\n    /** The expression to resolve. */\n    expression: ThisExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      let thisLocal = flow.lookupLocal(CommonSymbols.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = flow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to the program element it refers to. */\n  resolveSuperExpression(\n    /** The expression to resolve. */\n    expression: SuperExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      let superLocal = flow.lookupLocal(CommonSymbols.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = flow.actualFunction.parent;\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a literal expression to the program element it refers to. */\n  resolveLiteralExpression(\n    /** The expression to resolve. */\n    expression: LiteralExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (expression.literalKind) {\n      case LiteralKind.INTEGER: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        let literalType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>expression).value,\n          contextualType\n        );\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\n      }\n      case LiteralKind.FLOAT: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        let literalType = contextualType == Type.f32 ? Type.f32 : Type.f64;\n        let typeClasses = this.program.typeClasses;\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\n      }\n      case LiteralKind.STRING: {\n        this.currentThisExpression = expression;\n        this.currentElementExpression = null;\n        return this.program.stringInstance;\n      }\n      // TODO\n      // case LiteralKind.ARRAY:\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a call expression to the program element it refers to. */\n  resolveCallExpression(\n    /** The expression to resolve. */\n    expression: CallExpression,\n    /** Current flow. */\n    flow: Flow,\n    /** Current contextual type. */\n    contextualType: Type = Type.void,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = expression.expression;\n    var target = this.resolveExpression( // reports\n      targetExpression,\n      flow,\n      contextualType,\n      reportMode\n    );\n    if (!target) return null;\n    if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let instance = this.resolveFunctionInclTypeArguments(\n        <FunctionPrototype>target,\n        expression.typeArguments,\n        flow.actualFunction,\n        makeMap(flow.contextualTypeArguments), // don't inherit\n        expression,\n        reportMode\n      );\n      if (!instance) return null;\n      let returnType = instance.signature.returnType;\n      let classType = returnType.classReference;\n      if (classType) {\n        // reuse resolvedThisExpression (might be property access)\n        // reuse resolvedElementExpression (might be element access)\n        return classType;\n      } else {\n        let signature = returnType.signatureReference;\n        if (signature) {\n          let functionTarget = signature.asFunctionTarget(this.program);\n          // reuse resolvedThisExpression (might be property access)\n          // reuse resolvedElementExpression (might be element access)\n          return functionTarget;\n        }\n      }\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n          targetExpression.range, target.internalName\n        );\n      }\n      return null;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!contextualTypeArguments.has(classTypeParameterName)) {\n            contextualTypeArguments.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.signatureNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        contextualTypeArguments.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!thisType) return null;\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = assert(parameterDeclaration.type);\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = assert(signatureNode.returnType);\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        contextualTypeArguments,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      signature,\n      contextualTypeArguments\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArgumentNodes: CommonTypeNode[] | null,\n    /** Relative context. Type arguments are resolved from here. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classTypeArguments = (<Class>actualParent).typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            contextualTypeArguments.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        context,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments. */\n    typeArguments: Type[] | null,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        contextualTypeArguments.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes && typeParameterNodes.length));\n    }\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    var baseClass: Class | null = null;\n    if (basePrototype) {\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      baseClass = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(contextualTypeArguments), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!baseClass) return null;\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\n    instance.contextualTypeArguments = contextualTypeArguments;\n    prototype.setResolvedInstance(instanceKey, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      let baseMembers = baseClass.members;\n      if (baseMembers) {\n        let instanceMembers = instance.members;\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\n        for (let [baseMemberName, baseMember] of baseMembers) {\n          instanceMembers.set(baseMemberName, baseMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve instance members\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    if (instanceMemberPrototypes) {\n      for (let member of instanceMemberPrototypes.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            let instanceMembers = instance.members;\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\n            else if (instanceMembers.has(member.name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                (<FieldPrototype>member).identifierNode.range,\n                member.name\n              );\n              break;\n            }\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (baseClass) {\n                let baseMembers = baseClass.members;\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    (<FieldPrototype>member).identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\n            switch (fieldType.byteSize) { // align\n              case 1: break;\n              case 2: { if (memoryOffset & 1) ++memoryOffset; break; }\n              case 4: { if (memoryOffset & 3) memoryOffset = (memoryOffset | 3) + 1; break; }\n              case 8: { if (memoryOffset & 7) memoryOffset = (memoryOffset | 7) + 1; break; }\n              default: assert(false);\n            }\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(member.name, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\n            if (getterPrototype) {\n              let getterInstance = this.resolveFunction(\n                getterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (getterInstance) {\n                propertyInstance.getterInstance = getterInstance;\n                propertyInstance.setType(getterInstance.signature.returnType);\n              }\n            }\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\n            if (setterPrototype) {\n              let setterInstance = this.resolveFunction(\n                setterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (setterInstance) {\n                propertyInstance.setterInstance = setterInstance;\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\n                  assert(setterInstance.signature.parameterTypes.length == 1);\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\n                }\n              }\n            }\n            instance.add(propertyInstance.name, propertyInstance); // reports\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Link _own_ constructor if present\n    {\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\n      if (ctorPrototype && ctorPrototype.parent === instance) {\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n        let ctorInstance = this.resolveFunction(\n          <FunctionPrototype>ctorPrototype,\n          null,\n          instance.contextualTypeArguments,\n          reportMode\n        );\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      overloads.set(kind, operatorInstance);\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type argument nodes provided. */\n    typeArgumentNodes: CommonTypeNode[] | null,\n    /** Relative context. Type arguments are resolved from here. */\n    context: Element,\n    /** Type arguments inherited through context, i.e. `T`. */\n    contextualTypeArguments: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        context,\n        contextualTypeArguments,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      contextualTypeArguments,\n      reportMode\n    );\n  }\n}\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  compileCall as compileBuiltinCall,\n  compileAbort,\n  compileIterateRoots,\n  ensureGCHook,\n  BuiltinSymbols\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  needsExplicitUnreachable\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  LibrarySymbols,\n  CommonSymbols,\n  INDEX_SUFFIX\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  File,\n  mangleInternalName\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow\n} from \"./flow\";\n\nimport {\n  Resolver, ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  TypeNode,\n  Range,\n  DecoratorKind,\n  AssertionKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  nodeIsConstantValue,\n  findDecorator,\n  FieldDeclaration,\n  FunctionDeclaration\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap\n} from \"./util\";\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64\n}\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\n  sharedMemory: i32 = 0;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases. */\n  globalAliases: Map<string,string> | null = null;\n  /** Additional features to activate. */\n  features: Feature = Feature.NONE;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBAL = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 2, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 3, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 4 // see: https://github.com/WebAssembly/threads\n}\n\n/** Indicates the desired kind of a conversion. */\nexport const enum ConversionKind {\n  /** No conversion. */\n  NONE,\n  /** Implicit conversion. */\n  IMPLICIT,\n  /** Explicit conversion. */\n  EXPLICIT\n}\n\n/** Indicates the desired wrap mode of a conversion. */\nexport const enum WrapMode {\n  /** No wrapping. */\n  NONE,\n  /** Wrap small integer values. */\n  WRAP\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  resolver: Resolver;\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current enum in compilation. */\n  currentEnum: Enum | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: string[] = [ \"null\" ];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Indicates whether the iterateRoots function must be generated. */\n  needsIterateRoots: bool = false;\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    this.resolver = program.resolver;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature([], Type.void));\n    startFunctionInstance.internalName = \"start\";\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = startFunctionBody;\n\n    // add a mutable heap base dummy\n    if (options.isWasm64) {\n      module.addGlobal(\n        BuiltinSymbols.HEAP_BASE,\n        NativeType.I64,\n        true,\n        module.createI64(0, 0)\n      );\n    } else {\n      module.addGlobal(\n        BuiltinSymbols.HEAP_BASE,\n        NativeType.I32,\n        false,\n        module.createI32(0)\n      );\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    for (let file of files.values()) {\n      if (file.source.isEntry) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or called by main\n    var explicitStartFunction = program.explicitStartFunction;\n    if (startFunctionBody.length || explicitStartFunction) {\n      let signature = startFunctionInstance.signature;\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.createBlock(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStartFunction) module.setStart(funcRef);\n    }\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinSymbols.HEAP_BASE);\n    if (options.isWasm64) {\n      module.addGlobal(\n        BuiltinSymbols.HEAP_BASE,\n        NativeType.I64,\n        false,\n        module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\n      );\n    } else {\n      module.addGlobal(\n        BuiltinSymbols.HEAP_BASE,\n        NativeType.I32,\n        false,\n        module.createI32(i64_low(memoryOffset))\n      );\n    }\n\n    // set up memory\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\n    module.setMemory(\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n        : 0,\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      \"memory\"\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table\n    var functionTable = this.functionTable;\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\n    module.addTableExport(\"0\", \"table\");\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.createBlock(null, []));\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\n\n    // set up module exports\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.isEntry) this.makeModuleExports(file);\n    }\n\n    // set up gc\n    if (this.needsIterateRoots) compileIterateRoots(this);\n\n    return module;\n  }\n\n  /** Applies the respective module exports for the specified file. */\n  private makeModuleExports(file: File): void {\n    var members = file.exports;\n    if (members) for (let [name, member] of members) this.makeModuleExport(name, member);\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.makeModuleExports(exportsStar[i]);\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private makeModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instances = (<FunctionPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.makeModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instances = (<ClassPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.makeModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getter = (<PropertyPrototype>element).getterPrototype;\n        let setter = (<PropertyPrototype>element).setterPrototype;\n        if (getter) this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<Global>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!assert(element.parent).is(CommonFlags.CONST) && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<EnumValue>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        let returnTypePostFix = (!name.endsWith(\"constructor\") && signature.returnType.is(TypeFlags.REFERENCE))\n           ? \"!\" + signature.returnType.toString()\n           : \"\";\n        if (instance.is(CommonFlags.COMPILED)) {\n           this.module.addFunctionExport(instance.internalName, prefix + name + returnTypePostFix);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = (<Property>element).getterInstance;\n        if (getter) this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterInstance;\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        let module = this.module;\n        let type = (<Field>element).type;\n        let nativeType = type.toNativeType();\n        let offset = (<Field>element).memoryOffset;\n        let usizeType = this.options.usizeType;\n        let nativeSizeType = this.options.nativeSizeType;\n\n        // make a getter\n        let getterName = prefix + GETTER_PREFIX + name;\n        module.addFunction(\n          getterName,\n          this.ensureFunctionType(null, type, usizeType),\n          null,\n          module.createLoad(\n            type.byteSize,\n            type.is(TypeFlags.SIGNED),\n            module.createGetLocal(0, nativeSizeType),\n            nativeType,\n            offset\n          )\n        );\n        module.addFunctionExport(getterName, getterName);\n\n        // make a setter\n        if (!element.is(CommonFlags.READONLY)) {\n          let setterName = prefix + SETTER_PREFIX + name;\n          module.addFunction(\n            setterName,\n            this.ensureFunctionType([ type ], Type.void, usizeType),\n            null,\n            module.createStore(\n              type.byteSize,\n              module.createGetLocal(0, nativeSizeType),\n              module.createGetLocal(1, nativeType),\n              nativeType,\n              offset\n            )\n          );\n          module.addFunctionExport(setterName, setterName);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.CLASS:\n      case ElementKind.NAMESPACE:\n      case ElementKind.FILE:\n      case ElementKind.TYPEDEFINITION: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (\n        element.kind == ElementKind.NAMESPACE ||\n        element.kind == ElementKind.FILE\n      ) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.makeModuleExport(member.name, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.makeModuleExport(member.name, member, subPrefix);\n        }\n      }\n    }\n  }\n\n  // general\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) {\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\n        }\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) {\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE: break;\n      default: assert(false, ElementKind[element.kind]);\n    }\n    if (compileMembers) this.compileMembers(element);\n  }\n\n  /** Compiles an element's members. */\n  compileMembers(element: Element): void {\n    var members = element.members;\n    if (members) for (let element of members.values()) this.compileElement(element);\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) for (let element of exports.values()) this.compileElement(element);\n    var exportsStar = file.exportsStar;\n    if (exportsStar) for (let exportStar of exportsStar) this.compileFile(exportStar);\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = filesByName.get(normalizedPathWithoutExtension)!;\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = filesByName.get(pathWithIndex)!;\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    this.currentFlow = startFunction.flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\n        varTypes,\n        startFunctionBody.length > 1\n          ? module.createBlock(null, startFunctionBody)\n          : startFunctionBody[0]\n      );\n      previousBody.push(\n        module.createCall(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // globals\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // resolve now if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          return false;\n        }\n        global.setType(resolvedType);\n\n      // infer from initializer if not annotated\n      } else if (initializerNode) { // infer type using void/NONE for literal inference\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpressionRetainType( // reports\n          initializerNode,\n          Type.void,\n          WrapMode.WRAP\n        );\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // must either be annotated or have an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) return true;\n\n    var nativeType = global.type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n\n    // handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // constant global\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          global.declaration.range\n        );\n      }\n      return false;\n    }\n\n    // the MVP does not yet support initializer expressions other than constant values (and constant\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(\n          initializerNode,\n          global.type,\n          ConversionKind.IMPLICIT,\n          WrapMode.WRAP\n        );\n        this.currentFlow = previousFlow;\n      }\n\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              initializerNode.range\n            );\n            initializeInStart = true;\n          }\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // explicitly inline if annotated\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\n        if (!initializeInStart) { // reported above\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // initialize to zero if there's no initializer\n    } else {\n      initExpr = global.type.toNativeZero(module);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          global.identifierNode.range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\n      this.currentBody.push(module.createSetGlobal(internalName, initExpr));\n\n    } else if (!global.hasDecorator(DecoratorFlags.INLINE)) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // enums\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    this.currentEnum = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueNode = val.valueNode;\n        val.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(\n            valueNode,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              initExpr = module.precomputeExpression(initExpr);\n              if (getExpressionId(initExpr) != ExpressionId.Const) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n                initInStart = true;\n              }\n            } else {\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.createI32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              (<EnumValue>member).identifierNode.range.atEnd\n            );\n          }\n          initExpr = module.createBinary(BinaryOp.AddI32,\n            module.createGetGlobal(previousValue.internalName, NativeType.I32),\n            module.createI32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                member.declaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.createI32(0));\n          this.currentBody.push(\n            module.createSetGlobal(val.internalName, initExpr)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, true, initExpr);\n          }\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentEnum = null;\n    return true;\n  }\n\n  // functions\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): Function | null {\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return null;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  private compileFunctionBody(instance: Function): ExpressionRef[] {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n\n    // compile statements\n    var stmts: BinaryenExportRef[];\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.is(CommonFlags.ARROW));\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n\n      let stmt = this.compileExpression(\n        (<ExpressionStatement>bodyNode).expression,\n        returnType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      flow.set(FlowFlags.RETURNS);\n      if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n      stmts = [ stmt ];\n    }\n\n    // make the main function call `start` implicitly, but only once\n    if (instance.prototype == this.program.explicitStartFunction) {\n      module.addGlobal(CompilerSymbols.started, NativeType.I32, true, module.createI32(0));\n      stmts.unshift(\n        module.createIf(\n          module.createUnary(\n            UnaryOp.EqzI32,\n            module.createGetGlobal(CompilerSymbols.started, NativeType.I32)\n          ),\n          module.createBlock(null, [\n            module.createCall(\"start\", null, NativeType.None),\n            module.createSetGlobal(CompilerSymbols.started, module.createI32(1))\n          ])\n        )\n      );\n    }\n\n    // make constructors return their instance pointer\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n\n      if (!flow.isAny(FlowFlags.ANY_TERMINATING)) {\n        let thisLocalIndex = flow.is(FlowFlags.INLINE_CONTEXT)\n          ? assert(flow.lookupLocal(CommonSymbols.this_)).index\n          : 0;\n\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\n        if (!flow.is(FlowFlags.ALLOCATES)) {\n          // {\n          //   if (!this) this = <ALLOC>\n          //   this.a = X\n          //   this.b = Y\n          // }\n          stmts.push(\n            module.createIf(\n              module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                module.createGetLocal(thisLocalIndex, nativeSizeType)\n              ),\n              module.createSetLocal(thisLocalIndex,\n                this.makeAllocation(<Class>classInstance)\n              )\n            )\n          );\n          this.makeFieldInitialization(<Class>classInstance, stmts);\n        }\n\n        // implicitly return `this`\n        stmts.push(\n          module.createGetLocal(thisLocalIndex, nativeSizeType)\n        );\n      }\n\n      // check that super has been called if this is a derived class\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches return\n    } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.signatureNode.returnType.range\n      );\n    }\n\n    return stmts;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          decorator.range\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      this.currentFlow = instance.flow;\n      let stmts = this.compileFunctionBody(instance);\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        stmts.length\n          ? stmts.length == 1\n            ? stmts[0]\n            : module.createBlock(null, stmts, instance.signature.returnType.toNativeType())\n          : module.createNop()\n      );\n\n    // imported function\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          instance.identifierNode.range\n        );\n      }\n\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\n\n      // create the import\n      funcRef = module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n    }\n\n    instance.finalize(module, funcRef);\n    return true;\n  }\n\n  // classes\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(),\n                (<FunctionPrototype>element).identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let getter = (<PropertyPrototype>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [],\n                makeMap<string,Type>(),\n                getter.identifierNode\n              );\n            }\n            let setter = (<PropertyPrototype>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [],\n                makeMap<string,Type>(),\n                setter.identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(instance.contextualTypeArguments),\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD_PROTOTYPE: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterInstance;\n            if (getter) this.compileFunction(getter);\n            let setter = (<Property>element).setterInstance;\n            if (setter) this.compileFunction(setter);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: TypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      declaration.range\n    );\n  }\n\n  // memory\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  // function table\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.internalName);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // statements\n\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        assert(element.kind == ElementKind.ENUM);\n        if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let memberStatements = (<NamespaceDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          assert(element.kind == ElementKind.GLOBAL);\n          if (\n            !element.is(CommonFlags.AMBIENT) && // delay imports\n            !element.hasDecorator(DecoratorFlags.LAZY)\n          ) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        if ((<ExportStatement>statement).normalizedPath != null) {\n          this.compileFileByPath(\n            <string>(<ExportStatement>statement).normalizedPath,\n            <StringLiteralExpression>(<ExportStatement>statement).path\n          );\n        }\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.compileFileByPath(\n          (<ImportStatement>statement).normalizedPath,\n          (<ImportStatement>statement).path\n        );\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATUREDECLARATION:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  compileStatement(statement: Statement, isLastStatementInBody: bool = false): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastStatementInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.createNop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          statement.range\n        );\n        stmt = module.createUnreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.createUnreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(statements: Statement[], isBody: bool = false): ExpressionRef[] {\n    var numStatements = statements.length;\n    var stmts = new Array<ExpressionRef>(numStatements);\n    stmts.length = 0;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(this.module.createUnreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    var stmt = stmts.length == 0\n      ? this.module.createNop()\n      : stmts.length == 1\n        ? stmts[0]\n        : this.module.createBlock(null, stmts,getExpressionType(stmts[stmts.length - 1]));\n\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return stmt;\n  }\n\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        statement.label.range\n      );\n      return module.createUnreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.BREAKS);\n    return module.createBreak(breakLabel);\n  }\n\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        label.range\n      );\n      return module.createUnreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.createUnreachable();\n    }\n    flow.set(FlowFlags.CONTINUES);\n    return module.createBreak(continueLabel);\n  }\n\n  compileDoStatement(statement: DoStatement): ExpressionRef {\n    var module = this.module;\n\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var condExpr = this.makeIsTrueish(\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\n      this.currentType\n    );\n    // TODO: check if condition is always false and if so, omit it (just a block)\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var terminated = innerFlow.isAny(FlowFlags.ANY_TERMINATING);\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    outerFlow.inherit(innerFlow);\n\n    var block: ExpressionRef[] = [\n      module.createLoop(continueLabel,\n        terminated\n          ? body // skip trailing continue if unnecessary\n          : module.createBlock(null, [\n              body,\n              module.createBreak(continueLabel, condExpr)\n            ], NativeType.None)\n      )\n    ];\n    if (terminated) block.push(module.createUnreachable());\n    return module.createBlock(breakLabel, block);\n  }\n\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\n    return this.module.createNop();\n  }\n\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\n    if (this.currentType != Type.void) {\n      expr = this.module.createDrop(expr);\n      this.currentType = Type.void;\n    }\n    return expr;\n  }\n\n  compileForStatement(statement: ForStatement): ExpressionRef {\n    // A for statement initiates a new branch with its own scoped variables\n    // possibly declared in its initializer, and break context.\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n    var repeatLabel = \"repeat|\" + label;\n\n    // Compile in correct order\n    var module = this.module;\n    var initExpr = statement.initializer\n      ? this.compileStatement(<Statement>statement.initializer)\n      : 0;\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n      // check if the condition is always true\n      let condPre = module.precomputeExpression(condExpr);\n      if (getExpressionId(condPre) == ExpressionId.Const) {\n        assert(getExpressionType(condPre) == NativeType.I32);\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\n        // TODO: could skip compilation if the condition is always false here, but beware that the\n        // initializer could still declare new 'var's that are used later on.\n      }\n      // recompile to original\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    } else {\n      // omitted condition is always true\n      condExpr = module.createI32(1);\n      alwaysTrue = true;\n    }\n    var incrExpr = statement.incrementor\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\n      : 0;\n    var bodyStatement = statement.statement;\n    var bodyExpr = bodyStatement.kind == NodeKind.BLOCK && (<BlockStatement>bodyStatement).statements.length == 1\n      ? this.compileStatement((<BlockStatement>bodyStatement).statements[0])\n      : this.compileStatement(bodyStatement);\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    var usesContinue = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\n    if (initExpr) breakBlock.push(initExpr);\n\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\n    if (usesContinue) {\n      repeatBlock.push(\n        module.createBlock(continueLabel, [ // inner 'continue' block\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\n          bodyExpr\n        ], NativeType.None)\n      );\n    } else { // can omit the 'continue' block\n      repeatBlock.push(\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\n      );\n      repeatBlock.push(bodyExpr);\n    }\n    if (incrExpr) repeatBlock.push(incrExpr);\n    repeatBlock.push(\n      module.createBreak(repeatLabel)\n    );\n\n    breakBlock.push(\n      module.createLoop(repeatLabel, module.createBlock(null, repeatBlock, NativeType.None))\n    );\n\n    return module.createBlock(breakLabel, breakBlock);\n  }\n\n  compileIfStatement(statement: IfStatement): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n    var outerFlow = this.currentFlow;\n    var actualFunction = outerFlow.actualFunction;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    var condExprPrecomp = module.precomputeExpression(condExpr);\n    if (\n      getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n      getExpressionType(condExprPrecomp) == NativeType.I32\n    ) {\n      return getConstValueI32(condExprPrecomp)\n        ? this.compileStatement(ifTrue)\n        : ifFalse\n          ? this.compileStatement(ifFalse)\n          : module.createNop();\n\n    // Otherwise recompile to the original and let the optimizer decide\n    } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    }\n\n    // Each arm initiates a branch\n    var ifTrueFlow = outerFlow.fork();\n    this.currentFlow = ifTrueFlow;\n    var ifTrueExpr = this.compileStatement(ifTrue);\n    ifTrueFlow.freeScopedLocals();\n    this.currentFlow = outerFlow;\n\n    var ifFalseExpr: ExpressionRef = 0;\n    if (ifFalse) {\n      let ifFalseFlow = outerFlow.fork();\n      this.currentFlow = ifFalseFlow;\n      ifFalseExpr = this.compileStatement(ifFalse);\n      ifFalseFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n    } else {\n      outerFlow.inheritConditional(ifTrueFlow);\n    }\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\n  }\n\n  compileReturnStatement(statement: ReturnStatement, isLastStatementInBody: bool): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS);\n\n    if (statement.value) {\n      if (returnType == Type.void) {\n        this.compileExpressionRetainType(statement.value, returnType, WrapMode.NONE);\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          statement.value.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      expr = this.compileExpression(\n        statement.value,\n        returnType,\n        ConversionKind.IMPLICIT,\n        flow.actualFunction.is(CommonFlags.MODULE_EXPORT)\n          ? WrapMode.WRAP\n          : WrapMode.NONE\n      );\n\n      // Remember whether returning a properly wrapped value\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.createUnreachable();\n    }\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastStatementInBody) return expr ? expr : module.createNop();\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) return module.createBreak(assert(flow.inlineReturnLabel), 0, expr);\n\n    return module.createReturn(expr);\n  }\n\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32, false);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.createSetLocal( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\n          module.createBinary(BinaryOp.EqI32,\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\n    var alwaysReturns = true;\n    var alwaysReturnsWrapped = true;\n    var alwaysThrows = true;\n    var alwaysAllocates = true;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminated = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n          if (innerFlow.isAny(FlowFlags.ANY_TERMINATING)) {\n            terminated = true;\n            break;\n          }\n        }\n      }\n      stmts.length = count;\n      if (terminated || isLast) {\n        if (!innerFlow.is(FlowFlags.RETURNS)) alwaysReturns = false;\n        if (!innerFlow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\n        if (!innerFlow.is(FlowFlags.THROWS)) alwaysThrows = false;\n        if (!innerFlow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\n      }\n\n      // Switch back to the parent flow\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) {\n      if (alwaysReturns) outerFlow.set(FlowFlags.RETURNS);\n      if (alwaysReturnsWrapped) outerFlow.set(FlowFlags.RETURNS_WRAPPED);\n      if (alwaysThrows) outerFlow.set(FlowFlags.THROWS);\n      if (alwaysAllocates) outerFlow.set(FlowFlags.ALLOCATES);\n    }\n    return currentBlock;\n  }\n\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS);\n\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\n    flow.set(FlowFlags.RETURNS);\n\n    // TODO: requires exception-handling spec.\n    return compileAbort(this, null, statement);\n  }\n\n  compileTryStatement(statement: TryStatement): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      statement.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  compileVariableStatement(statement: VariableStatement): ExpressionRef {\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression( // reports\n            declaration.initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n        }\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\n        initExpr = this.compileExpressionRetainType( // reports\n          declaration.initializer,\n          Type.void,\n          WrapMode.NONE\n        );\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n      let isInlined = false;\n      if (declaration.is(CommonFlags.CONST)) {\n        if (initExpr) {\n          initExpr = this.module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return this.module.createUnreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n              return this.module.createUnreachable();\n            }\n            scopedLocals.set(name, local);\n            isInlined = true;\n          } else {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              declaration.range\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n      if (!isInlined) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          local = flow.addScopedLocal(name, type, false, declaration.name); // reports if duplicate\n        } else {\n          if (flow.lookupLocal(name)) {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range, name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n        }\n        if (initExpr) {\n          initializers.push(\n            this.compileAssignmentWithValue(declaration.name, initExpr)\n          );\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\n          }\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped(local.index, true); // zero\n        }\n      }\n    }\n    return initializers.length   // we can unwrap these here because the\n      ? initializers.length == 1 // source didn't tell us exactly what to do\n        ? initializers[0]\n        : this.module.createBlock(null, initializers, NativeType.None)\n      : 0;\n  }\n\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\n  }\n\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // The condition does not yet initialize a branch\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    // Try to eliminate unnecesssary loops if the condition is constant\n    var condExprPrecomp = module.precomputeExpression(condExpr);\n    if (\n      getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n      getExpressionType(condExprPrecomp) == NativeType.I32\n    ) {\n      if (!getConstValueI32(condExprPrecomp)) return module.createNop();\n\n    // Otherwise recompile to the original and let the optimizer decide\n    } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    }\n\n    // Statements initiate a new branch with its own break context\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n\n    var body = this.compileStatement(statement.statement);\n    var alwaysTrue = false; // TODO\n    var terminated = innerFlow.isAny(FlowFlags.ANY_TERMINATING);\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    this.currentFlow = outerFlow;\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n\n    return module.createBlock(breakLabel, [\n      module.createLoop(continueLabel,\n        module.createIf(condExpr,\n          terminated\n            ? body // skip trailing continue if unnecessary\n            : module.createBlock(null, [\n                body,\n                module.createBreak(continueLabel)\n              ], NativeType.None)\n        )\n      )\n    ]);\n  }\n\n  // expressions\n\n  /**\n   * Compiles the value of an inlined constant element.\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\n   *  is precomputed according to context.\n   */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    retainType: bool\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !retainType &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.createI32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.createI32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.createI64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.createI64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.createUnreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    this.currentType = contextualType;\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(\n          <IdentifierExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PARENTHESIZED: {\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(\n          <PropertyAccessExpression>expression,\n          contextualType,\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\n        );\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        expr = this.module.createUnreachable();\n      }\n    }\n    var currentType = this.currentType;\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\n      this.currentType = contextualType;\n    } else if (wrapMode == WrapMode.WRAP) {\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\n    }\n\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  compileExpressionRetainType(\n    expression: Expression,\n    contextualType: Type,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.compileExpression(\n      expression,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      wrapMode\n    );\n  }\n\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    fromType: Type,\n    toType: Type,\n    conversionKind: ConversionKind,\n    wrapMode: WrapMode,\n    reportNode: Node\n  ): ExpressionRef {\n    assert(conversionKind != ConversionKind.NONE);\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.createDrop(expr);\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (conversionKind == ConversionKind.IMPLICIT) {\n        this.error(\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n          reportNode.range, fromType.toString(), toType.toString()\n        ); // recoverable\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n            wrapMode = WrapMode.NONE;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n            wrapMode = WrapMode.NONE;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.createDrop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.createUnary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n          wrapMode = WrapMode.NONE;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.createUnary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrapMode = WrapMode.NONE;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrapMode = WrapMode.NONE;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrapMode == WrapMode.WRAP\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          this.currentFlow.actualFunction,\n          this.currentFlow.contextualTypeArguments\n        );\n        if (!toType) return this.module.createUnreachable();\n        return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpressionRetainType(expression.expression, contextualType, WrapMode.NONE);\n        this.currentType = this.currentType.nonNullableType;\n        return expr;\n      }\n      default: assert(false);\n    }\n    return this.module.createUnreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n        rightType = this.currentType;\n        if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            leftType,\n            leftType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            left\n          );\n          rightExpr = this.convertExpression(\n            rightExpr,\n            rightType,\n            rightType = commonType,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP,\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.createUnreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.lookupGlobal(LibrarySymbols.Mathf);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(LibrarySymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(\n            leftExpr,\n            this.currentType,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(\n            right,\n            Type.f64,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.lookupGlobal(LibrarySymbols.Math);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(LibrarySymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.createUnreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.createUnreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.WRAP, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(LibrarySymbols.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(LibrarySymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(LibrarySymbols.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(LibrarySymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.createUnreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.createUnreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return this.module.createUnreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\n          rightType = this.currentType;\n          if (commonType = Type.commonCompatible(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(\n              leftExpr,\n              leftType,\n              leftType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              left\n            );\n            rightExpr = this.convertExpression(\n              rightExpr,\n              rightType,\n              rightType = commonType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.createUnreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\n            );\n            return module.createUnreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\n          expr = module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            rightExpr,\n            expr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            rightExpr,\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            )\n          );\n        }\n        break;\n      }\n      case Token.BAR_BAR: { // left || right\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\n        leftType = this.currentType;\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\n        rightType = this.currentType;\n\n        // simplify if cloning left without side effects is possible\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\n          expr = this.module.createIf(\n            this.makeIsTrueish(leftExpr, this.currentType),\n            expr,\n            rightExpr\n          );\n\n        // if not possible, tee left to a temp. local\n        } else {\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(\n            this.currentType,\n            !flow.canOverflow(leftExpr, this.currentType)\n          );\n          expr = module.createIf(\n            this.makeIsTrueish(\n              module.createTeeLocal(tempLocal.index, leftExpr),\n              this.currentType\n            ),\n            module.createGetLocal(\n              assert(tempLocal).index, // to be sure\n              this.currentType.toNativeType()\n            ),\n            rightExpr\n          );\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      thisArg = valueExpr;  // can reuse the previously evaluated expr as the this value here\n      argumentExpressions = [];\n    } else {\n      argumentExpressions = [ value ]; // annotated type might differ -> recompile\n    }\n    return this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg\n    );\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var argumentExpressions: Expression[];\n    var thisArg: ExpressionRef = 0;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      thisArg = leftExpr; // can reuse the previously evaluated leftExpr as the this value here\n      argumentExpressions = [ right ];\n    } else {\n      argumentExpressions = [ left, right ]; // annotated type of LHS might differ -> recompile\n    }\n    var ret = this.compileCallDirect(\n      operatorInstance,\n      argumentExpressions,\n      reportNode,\n      thisArg\n    );\n    return ret;\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.resolveExpression(expression, flow); // reports\n    if (!target) return this.module.createUnreachable();\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\n          return this.module.createUnreachable();\n        }\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return this.module.createUnreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        break;\n      }\n      case ElementKind.CLASS: {\n        if (resolver.currentElementExpression) { // indexed access\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n            if (!indexedGet) {\n              this.error(\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\n                expression.range, (<Class>target).internalName\n              );\n            } else {\n              this.error(\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n                expression.range, (<Class>target).internalName\n              );\n            }\n            return this.module.createUnreachable();\n          }\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n          targetType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return this.module.createUnreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    var valueExpr = this.compileExpression(valueExpression, targetType, ConversionKind.IMPLICIT, WrapMode.NONE);\n    return this.compileAssignmentWithValue(\n      expression,\n      valueExpr,\n      contextualType != Type.void\n    );\n  }\n\n  compileAssignmentWithValue(\n    expression: Expression,\n    valueWithCorrectType: ExpressionRef,\n    tee: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var target = this.resolver.resolveExpression(expression, flow); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\n        }\n        return tee\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        this.currentType = tee ? type : Type.void;\n        if ((<Local>target).is(CommonFlags.CONST)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range,\n            target.internalName\n          );\n          return module.createUnreachable();\n        }\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\n        if (tee) {\n          let nativeType = type.toNativeType();\n          let internalName = target.internalName;\n          return module.createBlock(null, [ // emulated teeGlobal\n            module.createSetGlobal(internalName, valueWithCorrectType),\n            module.createGetGlobal(internalName, nativeType)\n          ], nativeType);\n        } else {\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\n        }\n      }\n      case ElementKind.FIELD: {\n        let initializerNode = (<Field>target).initializerNode;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Field>target).internalName\n          );\n          return module.createUnreachable();\n        }\n        let thisExpression = assert(this.resolver.currentThisExpression);\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        let type = (<Field>target).type;\n        this.currentType = tee ? type : Type.void;\n        let nativeType = type.toNativeType();\n        if (type.kind == TypeKind.BOOL) {\n          // make sure bools are wrapped (usually are) when storing as 8 bits\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\n        }\n        if (tee) {\n          let flow = this.currentFlow;\n          let tempLocal = flow.getAndFreeTempLocal(\n            type,\n            !flow.canOverflow(valueWithCorrectType, type)\n          );\n          let tempLocalIndex = tempLocal.index;\n          // TODO: simplify if valueWithCorrectType has no side effects\n          // TODO: call __gc_link here if a GC is present\n          return module.createBlock(null, [\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\n            module.createStore(\n              type.byteSize,\n              thisExpr,\n              module.createGetLocal(tempLocalIndex, nativeType),\n              nativeType,\n              (<Field>target).memoryOffset\n            ),\n            module.createGetLocal(tempLocalIndex, nativeType)\n          ], nativeType);\n        } else {\n          // TODO: call __gc_link here if a GC is present\n          return module.createStore(\n            type.byteSize,\n            thisExpr,\n            valueWithCorrectType,\n            nativeType,\n            (<Field>target).memoryOffset\n          );\n        }\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return module.createUnreachable();\n        // call just the setter if the return value isn't of interest\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\n        // otherwise call the setter first, then the getter\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!getterInstance) return module.createUnreachable();\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        return module.createBlock(null, [\n          this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\n          this.makeCallDirect(getterInstance) // sets currentType\n        ], nativeReturnType);\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, target.internalName\n          );\n          return module.createUnreachable();\n        }\n        // call just the setter if the return value isn't of interest\n        if (!tee) {\n          let thisExpr = this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\n        }\n        // otherwise call the setter first, then the getter\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        let thisExpr = this.compileExpressionRetainType(\n          assert(this.resolver.currentThisExpression),\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        let tempLocal = flow.getAndFreeTempLocal(returnType, false);\n        let tempLocalIndex = tempLocal.index;\n        return module.createBlock(null, [\n          this.makeCallDirect(setterInstance, [ // set and remember the target\n            module.createTeeLocal(tempLocalIndex, thisExpr),\n            valueWithCorrectType\n          ]),\n          this.makeCallDirect(getterInstance, [ // get from remembered target\n            module.createGetLocal(tempLocalIndex, nativeReturnType)\n          ])\n        ], nativeReturnType);\n      }\n      case ElementKind.CLASS: {\n        let elementExpression = this.resolver.currentElementExpression;\n        if (elementExpression) {\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, target.internalName\n            );\n            return module.createUnreachable();\n          }\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n          if (!indexedSet) {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, target.internalName\n            );\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n            return module.createUnreachable();\n          }\n          let targetType = (<Class>target).type;\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          let elementExpr = this.compileExpression(\n            elementExpression,\n            Type.i32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          if (tee) {\n            let tempLocalTarget = flow.getTempLocal(targetType, false);\n            let tempLocalElement = flow.getAndFreeTempLocal(this.currentType, false);\n            let returnType = indexedGet.signature.returnType;\n            flow.freeTempLocal(tempLocalTarget);\n            return module.createBlock(null, [\n              this.makeCallDirect(indexedSet, [\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\n                valueWithCorrectType\n              ]),\n              this.makeCallDirect(indexedGet, [\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\n              ])\n            ], returnType.toNativeType());\n          } else {\n            return this.makeCallDirect(indexedSet, [\n              thisExpr,\n              elementExpr,\n              valueWithCorrectType\n            ]);\n          }\n        }\n        // fall-through\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return module.createUnreachable();\n  }\n\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let baseClassInstance = assert((<Class>classInstance).base);\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      // {\n      //   this = super(this || <ALLOC>, ...args)\n      //   this.a = X\n      //   this.b = Y\n      // }\n      let stmts: ExpressionRef[] = [\n        module.createSetLocal(thisLocal.index,\n          this.compileCallDirect(\n            this.ensureConstructor(baseClassInstance, expression),\n            expression.arguments,\n            expression,\n            module.createIf(\n              module.createGetLocal(thisLocal.index, nativeSizeType),\n              module.createGetLocal(thisLocal.index, nativeSizeType),\n              this.makeAllocation(<Class>classInstance)\n            )\n          )\n        )\n      ];\n      this.makeFieldInitialization(<Class>classInstance, stmts);\n\n      // check that super had been called before accessing allocating `this`\n      if (flow.isAny(\n        FlowFlags.ALLOCATES |\n        FlowFlags.CONDITIONALLY_ALLOCATES\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.createBlock(null, stmts);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.resolveExpression(expression.expression, flow); // reports\n    if (!target) return module.createUnreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n        let typeArguments = expression.typeArguments;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let instance: Function | null = null;\n\n        // resolve generic call if type arguments have been provided\n        if (typeArguments) {\n          if (!prototype.is(CommonFlags.GENERIC)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              expression.expression.range, prototype.internalName\n            );\n            return module.createUnreachable();\n          }\n          instance = this.resolver.resolveFunctionInclTypeArguments(\n            prototype,\n            typeArguments,\n            flow.actualFunction.parent, // relative to caller\n            makeMap<string,Type>(flow.contextualTypeArguments),\n            expression\n          );\n\n        // infer generic call if type arguments have been omitted\n        } else if (prototype.is(CommonFlags.GENERIC)) {\n          let inferredTypes = new Map<string,Type | null>();\n          let typeParameterNodes = assert(prototype.typeParameterNodes);\n          let numTypeParameters = typeParameterNodes.length;\n          for (let i = 0; i < numTypeParameters; ++i) {\n            inferredTypes.set(typeParameterNodes[i].name.text, null);\n          }\n          // let numInferred = 0;\n          let parameterNodes = prototype.signatureNode.parameters;\n          let numParameters = parameterNodes.length;\n          let argumentNodes = expression.arguments;\n          let numArguments = argumentNodes.length;\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\n          for (let i = 0; i < numParameters; ++i) {\n            let typeNode = parameterNodes[i].type;\n            let templateName = typeNode.kind == NodeKind.TYPE && !(<TypeNode>typeNode).name.next\n              ? (<TypeNode>typeNode).name.identifier.text\n              : null;\n            let argumentExpression = i < numArguments\n              ? argumentNodes[i]\n              : parameterNodes[i].initializer;\n            if (!argumentExpression) { // missing initializer -> too few arguments\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                expression.range, numParameters.toString(10), numArguments.toString(10)\n              );\n              return module.createUnreachable();\n            }\n            if (templateName !== null && inferredTypes.has(templateName)) {\n              let inferredType = inferredTypes.get(templateName);\n              if (inferredType) {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\n                let commonType: Type | null;\n                if (!(commonType = Type.commonCompatible(inferredType, this.currentType, true))) {\n                  if (!(commonType = Type.commonCompatible(inferredType, this.currentType, false))) {\n                    this.error(\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                      parameterNodes[i].type.range, this.currentType.toString(), inferredType.toString()\n                    );\n                    return module.createUnreachable();\n                  }\n                }\n                inferredType = commonType;\n              } else {\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\n                inferredType = this.currentType;\n                // ++numInferred;\n              }\n              inferredTypes.set(templateName, inferredType);\n            } else {\n              let concreteType = this.resolver.resolveType(\n                parameterNodes[i].type,\n                flow.actualFunction,\n                flow.contextualTypeArguments\n              );\n              if (!concreteType) return module.createUnreachable();\n              argumentExprs[i] = this.compileExpression(\n                argumentExpression,\n                concreteType,\n                ConversionKind.IMPLICIT,\n                WrapMode.NONE\n              );\n            }\n          }\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n          for (let i = 0; i < numTypeParameters; ++i) {\n            let inferredType = assert(inferredTypes.get(typeParameterNodes[i].name.text)); // TODO\n            resolvedTypeArguments[i] = inferredType;\n          }\n          instance = this.resolver.resolveFunction(\n            prototype,\n            resolvedTypeArguments,\n            makeMap<string,Type>(flow.contextualTypeArguments)\n          );\n          if (!instance) return this.module.createUnreachable();\n          return this.makeCallDirect(instance, argumentExprs);\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\n          // so inlining can be performed in `makeCallDirect` instead?\n\n        // otherwise resolve the non-generic call as usual\n        } else {\n          instance = this.resolver.resolveFunction(prototype, null);\n        }\n        if (!instance) return this.module.createUnreachable();\n\n        // compile 'this' expression if an instance method\n        let thisExpr: ExpressionRef = 0;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          thisExpr = this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n        }\n\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          thisExpr\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.createI32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpressionRetainType(\n            thisExpression,\n            this.options.usizeType,\n            WrapMode.NONE\n          );\n          indexArg = module.createLoad(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.createUnreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(\n          expression.expression,\n          (<FunctionTarget>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\n        if (!getterInstance) return module.createUnreachable();\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.createUnreachable();\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\n          this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          )\n        );\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.createUnreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    var expr = compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n    if (!expr) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    return expr;\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Operation_not_supported,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let expr = this.compileCallInlinePrechecked(instance, argumentExpressions, thisArg);\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallDirect(instance, operands);\n  }\n\n  // Depends on being pre-checked in compileCallDirect\n  private compileCallInlinePrechecked(\n    instance: Function,\n    argumentExpressions: Expression[],\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var module = this.module;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\n    var body = [];\n\n    if (thisArg) {\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, false);\n      body.push(\n        module.createSetLocal(thisLocal.index, thisArg)\n      );\n      let baseInstance = (<Class>classInstance).base;\n      if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\n    }\n\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i) {\n      let paramExpr = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let argumentLocal = flow.addScopedLocal(\n        signature.getParameterName(i),\n        parameterTypes[i],\n        !previousFlow.canOverflow(paramExpr, parameterTypes[i])\n      );\n      body.push(\n        module.createSetLocal(argumentLocal.index, paramExpr)\n      );\n    }\n\n    // Compile optional parameter initializers in the scope of the inlined flow\n    this.currentFlow = flow;\n    var numParameters = signature.parameterTypes.length;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.signatureNode.parameters[i].initializer),\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.WRAP\n      );\n      let argumentLocal = flow.addScopedLocal(\n        signature.getParameterName(i),\n        parameterTypes[i],\n        !flow.canOverflow(initExpr, parameterTypes[i])\n      );\n      body.push(\n        module.createSetLocal(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    {\n      let stmts = this.compileFunctionBody(instance);\n      for (let i = 0, k = stmts.length; i < k; ++i) body.push(stmts[i]);\n    }\n\n    // Free any new scoped locals and reset to the original flow\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n    this.currentType = returnType;\n\n    // Create an outer block that we can break to when returning a value out of order\n    return module.createBlock(flow.inlineReturnLabel, body, returnType.toNativeType());\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.signatureNode.parameters;\n    var commonReturnType = originalSignature.returnType;\n    var commonThisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\n    trampolineSignature.requiredParameters = maxArguments;\n    trampoline = new Function(\n      original.name + \"|trampoline\",\n      original.prototype,\n      trampolineSignature,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFlow = this.currentFlow;\n    this.currentFlow = trampoline.flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.createBlock(names[0], [\n      module.createBlock(\"outOfRange\", [\n        module.createSwitch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.createBinary(\n                BinaryOp.SubI32,\n                module.createGetGlobal(CompilerSymbols.argc, NativeType.I32),\n                module.createI32(minArguments)\n              )\n            : module.createGetGlobal(CompilerSymbols.argc, NativeType.I32)\n        )\n      ]),\n      module.createUnreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.createSetLocal(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            ConversionKind.IMPLICIT,\n            WrapMode.WRAP\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.createUnreachable();\n      }\n      body = module.createBlock(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\n    }\n    this.currentFlow = previousFlow;\n    assert(operandIndex == maxOperands);\n\n    var funcRef = module.addFunction(\n      trampoline.internalName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        trampolineSignature.returnType,\n        trampolineSignature.thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.createBlock(null, [\n        body,\n        module.createCall(\n          originalName,\n          forwardedOperands,\n          commonReturnType.toNativeType()\n        )\n      ], commonReturnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        CompilerSymbols.argc,\n        NativeType.I32,\n        true,\n        module.createI32(0)\n      );\n    }\n    return CompilerSymbols.argc;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    var internalName = CompilerSymbols.setargc;\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(internalName,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.createSetGlobal(this.ensureArgcVar(),\n          module.createGetLocal(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(internalName, \"_setargc\");\n    }\n    return internalName;\n  }\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.createUnreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.signatureNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (!(initializer && nodeIsConstantValue(initializer.kind))) {\n          allOptionalsAreConstant = false;\n          break;\n        }\n      }\n      if (allOptionalsAreConstant) { // inline into the call\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(\n            this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE\n            )\n          );\n        }\n      } else { // otherwise fill up with zeroes and call the trampoline\n        for (let i = numArguments; i < maxArguments; ++i) {\n          operands.push(parameterTypes[i].toNativeZero(module));\n        }\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.createUnreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          this.currentType = returnType;\n          return module.createBlock(null, [\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\n            module.createCall(instance.internalName, operands, nativeReturnType)\n          ], nativeReturnType);\n        }\n      }\n    }\n\n    // otherwise just call through\n    this.currentType = returnType;\n    return module.createCall(instance.internalName, operands, returnType.toNativeType());\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.createUnreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(\n        argumentExpressions[i],\n        parameterTypes[i],\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    this.currentType = returnType;\n    return module.createBlock(null, [\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\n        module.createI32(numArguments)\n      ),\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\n    ], returnType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(\n        expressions[i],\n        Type.void, // drop all\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(\n      expressions[numExpressions],\n      contextualType, // except last\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE\n    );\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\n    var target = this.resolver.resolveElementAccessExpression(\n      expression,\n      this.currentFlow,\n      contextualType\n    ); // reports\n    if (!target) return this.module.createUnreachable();\n    switch (target.kind) {\n      case ElementKind.CLASS: {\n        let isUnchecked = this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            expression.expression.range, (<Class>target).internalName\n          );\n          return this.module.createUnreachable();\n        }\n        let thisArg = this.compileExpression(\n          expression.expression,\n          (<Class>target).type,\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE\n        );\n        return this.compileCallDirect(indexedGet, [\n          expression.elementExpression\n        ], expression, thisArg);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var declaration = expression.declaration;\n    var name = declaration.name;\n    var simpleName = (name.text.length\n      ? name.text\n      : \"anonymous\") + \"|\" + this.functionTable.length.toString(10);\n    var flow = this.currentFlow;\n    var prototype = new FunctionPrototype(\n      simpleName,\n      flow.actualFunction,\n      declaration.clone(), // same function can be compiled multiple times if generic\n      DecoratorFlags.NONE\n    );\n    var instance = this.compileFunctionUsingTypeArguments(\n      prototype,\n      [],\n      makeMap<string,Type>(flow.contextualTypeArguments),\n      declaration\n    );\n    if (!instance) return this.module.createUnreachable();\n    this.currentType = instance.signature.type; // TODO: get cached type?\n    // NOTE that, in order to make this work in every case, the function must be represented by a\n    // value, so we add it and rely on the optimizer to figure out where it can be called directly.\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.createUnreachable()\n      : this.module.createI32(index);\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = filesByName.get(internalPath)!;\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (!contextualType.classReference) {\n          this.currentType = options.usizeType;\n        }\n        return options.isWasm64\n          ? module.createI64(0)\n          : module.createI32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.createI32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let nativeSizeType = this.options.nativeSizeType;\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // {\n              //   if (!this) this = <ALLOC>\n              //   this.a = X\n              //   this.b = Y\n              //   return this\n              // }\n              let stmts: ExpressionRef[] = [\n                module.createIf(\n                  module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                    module.createGetLocal(thisLocal.index, nativeSizeType)\n                  ),\n                  module.createSetLocal(thisLocal.index,\n                    this.makeAllocation(<Class>classInstance)\n                  )\n                )\n              ];\n              this.makeFieldInitialization(<Class>classInstance, stmts);\n              stmts.push(\n                module.createGetLocal(thisLocal.index, nativeSizeType)\n              );\n              this.currentType = thisLocal.type;\n              return module.createBlock(null, stmts, nativeSizeType);\n            }\n          }\n          // if not a constructor, `this` type can differ\n          let thisType = assert(actualFunction.signature.thisType);\n          this.currentType = thisType;\n          return module.createGetLocal(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let baseClassInstance = (<Class>classInstance).base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.createGetLocal(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.createUnreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var target = this.resolver.resolveIdentifier( // reports\n      expression,\n      flow,\n      this.currentEnum || actualFunction\n    );\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let localType = (<Local>target).type;\n        assert(localType != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        this.currentType = localType;\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.module.createI32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.createI32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    return this.module.createUnreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway.\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType, WrapMode.NONE);\n    var actualType = this.currentType;\n    var expectedType = this.resolver.resolveType(\n      expression.isType,\n      this.currentFlow.actualFunction\n    );\n    this.currentType = Type.bool;\n    if (!expectedType) return module.createUnreachable();\n\n    // instanceof <basicType> must be exact\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\n      return module.createI32(actualType == expectedType ? 1 : 0);\n    }\n    // <nullable> instanceof <nonNullable> must be != 0\n    if (\n      actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE) &&\n      actualType.nonNullableType.isAssignableTo(expectedType)\n    ) {\n      return module.createBinary(\n        actualType.is(TypeFlags.LONG)\n          ? BinaryOp.NeI64\n          : BinaryOp.NeI32,\n        expr,\n        actualType.toNativeZero(module)\n      );\n    }\n    return module.createI32(actualType.isAssignableTo(expectedType) ? 1 : 0);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    implicitNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitNegate);\n        let classType = contextualType.classReference;\n        if (\n          classType &&\n          classType.prototype == this.program.arrayPrototype\n        ) {\n          return this.compileArrayLiteral(\n            assert(classType.typeArguments)[0],\n            (<ArrayLiteralExpression>expression).elementExpressions,\n            false, // TODO: isConst?\n            expression\n          );\n        }\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.createF32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.createF64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.createI32(i64_low(intValue));\n          case TypeKind.I64: return module.createI64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.createI32(i64_low(intValue));\n          case TypeKind.U64: return module.createI64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.createF32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.createF64(i64_to_f64(intValue));\n          default: return module.createI32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.createUnreachable();\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var hasGC = program.hasGC;\n    var gcHeaderSize = program.gcHeaderSize;\n\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n\n    // if the string already exists, reuse it\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = <MemorySegment>segments.get(stringValue);\n\n    // otherwise create it\n    } else {\n      let length = stringValue.length;\n      let headerSize = (stringInstance.currentMemoryOffset + 1) & ~1;\n      let totalSize = headerSize + length * 2;\n\n      let buf: Uint8Array;\n      let pos: u32;\n\n      if (hasGC) {\n        buf = new Uint8Array(gcHeaderSize + totalSize);\n        pos = gcHeaderSize;\n        writeI32(ensureGCHook(this, stringInstance), buf, program.gcHookOffset);\n      } else {\n        buf = new Uint8Array(totalSize);\n        pos = 0;\n      }\n      writeI32(length, buf, pos + stringInstance.offsetof(LibrarySymbols.length));\n      pos += headerSize;\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buf, pos + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buf);\n      segments.set(stringValue, stringSegment);\n    }\n    var stringOffset = stringSegment.offset;\n    if (hasGC) stringOffset = i64_add(stringOffset, i64_new(gcHeaderSize));\n\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.createI64(i64_low(stringOffset), i64_high(stringOffset));\n    } else {\n      assert(i64_is_u32(stringOffset));\n      return this.module.createI32(i64_low(stringOffset));\n    }\n  }\n\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  /** Ensures that the specified array exists in static memory and returns a pointer to it. */\n  ensureStaticArray(elementType: Type, values: ExpressionRef[]): ExpressionRef {\n    var program = this.program;\n    var hasGC = program.hasGC;\n    var gcHeaderSize = program.gcHeaderSize;\n\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var usizeTypeSize = this.options.usizeType.byteSize;\n\n    var buf: Uint8Array;\n    var pos: u32;\n\n    // create the backing ArrayBuffer segment\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var bufferHeaderSize = (bufferInstance.currentMemoryOffset + 7) & ~7;\n    var bufferTotalSize = 1 << (32 - clz(bufferHeaderSize + byteLength - 1));\n    if (hasGC) {\n      buf = new Uint8Array(gcHeaderSize + bufferTotalSize);\n      pos = gcHeaderSize;\n      writeI32(ensureGCHook(this, bufferInstance), buf, program.gcHookOffset);\n    } else {\n      buf = new Uint8Array(bufferTotalSize);\n      pos = 0;\n    }\n    writeI32(byteLength, buf, pos + bufferInstance.offsetof(LibrarySymbols.byteLength));\n    pos += bufferHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    var bufferSegment = this.addMemorySegment(buf);\n    var bufferOffset = bufferSegment.offset;\n    if (hasGC) bufferOffset = i64_add(bufferOffset, i64_new(gcHeaderSize));\n\n    // create the Array segment and return a pointer to it\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(\n      arrayPrototype,\n      [ elementType ],\n      makeMap<string,Type>()\n    ));\n    var arrayHeaderSize = (arrayInstance.currentMemoryOffset + 7) & ~7;\n    if (hasGC) {\n      buf = new Uint8Array(gcHeaderSize + arrayHeaderSize);\n      pos = gcHeaderSize;\n      writeI32(ensureGCHook(this, arrayInstance), buf, program.gcHookOffset);\n    } else {\n      buf = new Uint8Array(arrayHeaderSize);\n      pos = 0;\n    }\n    var arraySegment = this.addMemorySegment(buf);\n    var arrayOffset = arraySegment.offset;\n    if (hasGC) arrayOffset = i64_add(arrayOffset, i64_new(gcHeaderSize));\n    this.currentType = arrayInstance.type;\n    var buffer_offset = pos + arrayInstance.offsetof(\"buffer_\");\n    var length_offset = pos + arrayInstance.offsetof(\"length_\");\n    if (usizeTypeSize == 8) {\n      writeI64(bufferOffset, buf, buffer_offset);\n      writeI32(length, buf, length_offset);\n      return this.module.createI64(i64_low(arrayOffset), i64_high(arrayOffset));\n    } else {\n      assert(i64_is_u32(bufferOffset));\n      writeI32(i64_low(bufferOffset), buf, buffer_offset);\n      writeI32(length, buf, length_offset);\n      assert(i64_is_u32(arrayOffset));\n      return this.module.createI32(i64_low(arrayOffset));\n    }\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    isConst: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // find out whether all elements are constant (array is static)\n    var length = expressions.length;\n    var compiledValues = new Array<ExpressionRef>(length);\n    var constantValues = new Array<ExpressionRef>(length);\n    var nativeElementType = elementType.toNativeType();\n    var isStatic = true;\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr = expression\n        ? this.compileExpression(<Expression>expression, elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\n        : elementType.toNativeZero(module);\n      compiledValues[i] = expr;\n      if (isStatic) {\n        expr = module.precomputeExpression(expr);\n        if (getExpressionId(expr) == ExpressionId.Const) {\n          assert(getExpressionType(expr) == nativeElementType);\n          constantValues[i] = expr;\n        } else {\n          if (isConst) {\n            this.warning(\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\n              reportNode.range\n            );\n          }\n          isStatic = false;\n        }\n      }\n    }\n\n    // make a static array if possible\n    if (isStatic) return this.ensureStaticArray(elementType, constantValues);\n\n    // otherwise obtain the array type\n    var arrayPrototype = assert(this.program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(\n      <ClassPrototype>arrayPrototype,\n      [ elementType ],\n      makeMap<string,Type>()\n    ));\n    var arrayType = arrayInstance.type;\n\n    // and compile an explicit instantiation\n    this.currentType = arrayType;\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      return module.createUnreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n    var flow = this.currentFlow;\n    var tempLocal = flow.parentFunction.addLocal(arrayType); // can't reuse a temp (used in compiledValues)\n    var stmts = new Array<ExpressionRef>(2 + length);\n    var index = 0;\n    stmts[index++] = module.createSetLocal(tempLocal.index,\n      this.makeCallDirect(assert(arrayInstance.constructorInstance), [\n        module.createI32(0), // this\n        module.createI32(length)\n      ])\n    );\n    for (let i = 0; i < length; ++i) {\n      stmts[index++] = this.makeCallDirect(setter, [\n        module.createGetLocal(tempLocal.index, nativeArrayType), // this\n        module.createI32(i),\n        compiledValues[i]\n      ]);\n    }\n    assert(index + 1 == stmts.length);\n    stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\n    flow.freeTempLocal(tempLocal); // but can be reused now\n    this.currentType = arrayType;\n    return module.createBlock(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.createUnreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.createUnreachable();\n      }\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var flow = this.currentFlow;\n    var tempLocal = flow.getTempLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.createStore( // TODO: handle setters as well\n        type.byteSize,\n        this.module.createGetLocal(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, ConversionKind.IMPLICIT, WrapMode.NONE),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.createUnreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.createSetLocal(\n      tempLocal.index,\n      this.makeAllocation(classReference)\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.createGetLocal(tempLocal.index, this.options.nativeSizeType);\n\n    return module.createBlock(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.resolveExpression( // reports\n      expression.expression,\n      flow\n    );\n    if (!target) return module.createUnreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\n        expression.expression.range\n      );\n      return this.module.createUnreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.createUnreachable();\n    return this.compileInstantiate(classInstance, expression.arguments, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // clone base constructor if a derived class\n    var baseClass = classInstance.base;\n    if (baseClass) {\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          // declaration is important, i.e. to access optional parameter initializers\n          (<FunctionDeclaration>baseCtor.declaration).clone()\n        ),\n        baseCtor.signature,\n        null\n      );\n\n    // otherwise make a default constructor\n    } else {\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n          )\n        ),\n        new Signature(null, classInstance.type, classInstance.type),\n        null\n      );\n    }\n\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    this.currentFlow = instance.flow;\n\n    // generate body\n    var signature = instance.signature;\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    stmts.push(\n      module.createIf(\n        module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.createGetLocal(0, nativeSizeType)\n        ),\n        module.createSetLocal(0,\n          this.makeAllocation(classInstance)\n        )\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.createGetLocal(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.createGetLocal(i + 1, parameterTypes[i].toNativeType());\n      }\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\n      stmts.push(\n        module.createSetLocal(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands)\n        )\n      );\n    }\n    this.makeFieldInitialization(classInstance, stmts);\n    stmts.push(\n      module.createGetLocal(0, nativeSizeType)\n    );\n\n    // make the function\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes,\n      stmts.length == 1\n        ? stmts[0]\n        : module.createBlock(null, stmts, nativeSizeType)\n    );\n    instance.finalize(module, funcRef);\n    this.currentFlow = previousFlow;\n    return instance;\n  }\n\n  compileInstantiate(classInstance: Class, argumentExpressions: Expression[], reportNode: Node): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    var expr = this.compileCallDirect(\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.options.usizeType.toNativeZero(this.module)\n    );\n    this.currentType = classInstance.type;\n    return expr;\n  }\n\n  compileParenthesizedExpression(\n    expression: ParenthesizedExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    // does not change types, just order\n    return this.compileExpression(\n      expression.expression,\n      contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    propertyAccess: PropertyAccessExpression,\n    contextualType: Type,\n    retainConstantType: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(propertyAccess);\n\n    var target = this.resolver.resolvePropertyAccessExpression(propertyAccess, flow, contextualType); // reports\n    if (!target) return module.createUnreachable();\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return module.createUnreachable();\n        }\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\n        }\n        this.currentType = globalType;\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>theEnum)) {\n          this.currentType = Type.i32;\n          return this.module.createUnreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return module.createI32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpressionRetainType(\n          assert(this.resolver.currentThisExpression),\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = (<Field>target).type;\n        return module.createLoad(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\n        if (getterPrototype) {\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\n          if (getter) return this.compileCallDirect(getter, [], propertyAccess, 0);\n        }\n        return module.createUnreachable();\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        return this.compileCallDirect(getterInstance, [], propertyAccess,\n          this.compileExpressionRetainType(\n            assert(this.resolver.currentThisExpression),\n            this.options.usizeType,\n            WrapMode.NONE\n          )\n        );\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          propertyAccess.range, (<FunctionPrototype>target).name\n        );\n        return module.createUnreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Operation_not_supported,\n      propertyAccess.range\n    );\n    return module.createUnreachable();\n  }\n\n  private compileGetter(target: PropertyPrototype, reportNode: Node): ExpressionRef {\n    var prototype = target.getterPrototype;\n    if (prototype) {\n      let instance = this.resolver.resolveFunction(prototype, null);\n      if (!instance) return this.module.createUnreachable();\n      let signature = instance.signature;\n      if (!this.checkCallSignature( // reports\n        signature,\n        0,\n        instance.is(CommonFlags.INSTANCE),\n        reportNode\n      )) {\n        return this.module.createUnreachable();\n      }\n      if (instance.is(CommonFlags.INSTANCE)) {\n        let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n        let thisExpression = assert(this.resolver.currentThisExpression); //!!!\n        let thisExpr = this.compileExpressionRetainType(\n          thisExpression,\n          this.options.usizeType,\n          WrapMode.NONE\n        );\n        this.currentType = signature.returnType;\n        return this.compileCallDirect(instance, [], reportNode, thisExpr);\n      } else {\n        this.currentType = signature.returnType;\n        return this.compileCallDirect(instance, [], reportNode, 0);\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        reportNode.range, (<PropertyPrototype>target).name, (<PropertyPrototype>target).parent.toString()\n      );\n      return this.module.createUnreachable();\n    }\n  }\n\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var outerFlow = this.currentFlow;\n\n    var condExpr = this.makeIsTrueish(\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n      this.currentType\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    var condExprPrecomp = this.module.precomputeExpression(condExpr);\n    if (\n      getExpressionId(condExprPrecomp) == ExpressionId.Const &&\n      getExpressionType(condExprPrecomp) == NativeType.I32\n    ) {\n      return getConstValueI32(condExprPrecomp)\n        ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\n        : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n\n    // Otherwise recompile to the original and let the optimizer decide\n    } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\n      condExpr = this.makeIsTrueish(\n        this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\n        this.currentType\n      );\n    }\n\n    var ifThenFlow = outerFlow.fork();\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\n    var ifThenType = this.currentType;\n    ifThenFlow.freeScopedLocals();\n\n    var ifElseFlow = outerFlow.fork();\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\n    var ifElseType = this.currentType;\n    ifElseFlow.freeScopedLocals();\n    this.currentFlow = outerFlow;\n\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var commonType = Type.commonCompatible(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, ifThenType.toString(), ifElseType.toString()\n      );\n      this.currentType = contextualType;\n      return this.module.createUnreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType,\n      commonType,\n      ConversionKind.IMPLICIT,\n      WrapMode.NONE,\n      ifElse\n    );\n    this.currentType = commonType;\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\n  }\n\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType == Type.void\n        ? Type.i32\n        : contextualType,\n      ConversionKind.NONE,\n      WrapMode.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    var currentType = this.currentType;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(currentType, false);\n      getValue = module.createTeeLocal(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var calcValue: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            calcValue = module.createBinary(\n              BinaryOp.AddI32,\n              getValue,\n              module.createI32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n                if (overload) {\n                  calcValue = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.createUnreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            calcValue = module.createBinary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            calcValue = module.createBinary(\n              BinaryOp.AddI64,\n              getValue,\n              module.createI64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            calcValue = module.createBinary(\n              BinaryOp.AddF32,\n              getValue,\n              module.createF32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            calcValue = module.createBinary(\n              BinaryOp.AddF64,\n              getValue,\n              module.createF64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        switch (currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            calcValue = module.createBinary(\n              BinaryOp.SubI32,\n              getValue,\n              module.createI32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE: {\n            // check operator overload\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\n              let classReference = this.currentType.classReference;\n              if (classReference) {\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n                if (overload) {\n                  calcValue = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n                  break;\n                }\n              }\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                expression.range\n              );\n              return module.createUnreachable();\n            }\n          }\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            calcValue = module.createBinary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            calcValue = module.createBinary(\n              BinaryOp.SubI64,\n              getValue,\n              module.createI64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            calcValue = module.createBinary(\n              BinaryOp.SubF32,\n              getValue,\n              module.createF32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            calcValue = module.createBinary(\n              BinaryOp.SubF64,\n              getValue,\n              module.createF64(1)\n            );\n            break;\n          }\n          default: {\n            assert(false);\n            return module.createUnreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      this.currentType = Type.void;\n      return this.compileAssignmentWithValue(expression.operand,\n        calcValue,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.compileAssignmentWithValue(expression.operand,\n      calcValue, // also tees getValue to tempLocal\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.createBlock(null, [\n      setValue,\n      module.createGetLocal(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createUnary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createUnary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = this.makeIsFalseish(expr, this.currentType);\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          ConversionKind.NONE,\n          WrapMode.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            expression.range\n          );\n          return module.createUnreachable();\n        } else {\n          expr = this.convertExpression(\n            expr,\n            this.currentType, this.currentType.intType,\n            ConversionKind.IMPLICIT, WrapMode.NONE,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.createBinary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.createUnreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          expression.range\n        );\n        return module.createUnreachable();\n      }\n      default: {\n        assert(false);\n        return module.createUnreachable();\n      }\n    }\n    return compound\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\n      : expr;\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(24)\n                ),\n                module.createI32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\n            : module.createBinary(BinaryOp.ShrI32,\n                module.createBinary(BinaryOp.ShlI32,\n                  expr,\n                  module.createI32(16)\n                ),\n                module.createI32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.createBinary(BinaryOp.AndI32,\n            expr,\n            module.createI32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.createBinary(BinaryOp.NeI32,\n            expr,\n            module.createI32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return module.createUnary(UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createUnary(UnaryOp.EqzI64, expr);\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(1);\n      }\n    }\n  }\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\n      }\n      case TypeKind.USIZE: // TODO: strings?\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\n      }\n      case TypeKind.F64: {\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\n      }\n      default: {\n        assert(false);\n        return module.createI32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(classInstance: Class): ExpressionRef {\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n\n    // __gc_allocate(size, markFn)\n    if (program.hasGC && classInstance.type.isManaged(program)) {\n      let allocateInstance = assert(program.gcAllocateInstance);\n      if (!this.compileFunction(allocateInstance)) return module.createUnreachable();\n      this.currentType = classInstance.type;\n      return module.createCall(\n        allocateInstance.internalName, [\n          options.isWasm64\n            ? module.createI64(classInstance.currentMemoryOffset)\n            : module.createI32(classInstance.currentMemoryOffset),\n          module.createI32(\n            ensureGCHook(this, classInstance)\n          )\n        ],\n        options.nativeSizeType\n      );\n\n    // memory.allocate(size)\n    } else {\n      let allocateInstance = program.memoryAllocateInstance;\n      if (!allocateInstance || !this.compileFunction(allocateInstance)) return module.createUnreachable();\n      this.currentType = classInstance.type;\n      return module.createCall(\n        allocateInstance.internalName, [\n          options.isWasm64\n            ? module.createI64(classInstance.currentMemoryOffset)\n            : module.createI32(classInstance.currentMemoryOffset)\n        ],\n        options.nativeSizeType\n      );\n    }\n  }\n\n  /** Makes the initializers for a class's fields. */\n  makeFieldInitialization(classInstance: Class, stmts: ExpressionRef[] = []): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return [];\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\n    var thisLocalIndex = isInline\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    for (let member of members.values()) {\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let initializerNode = field.prototype.initializerNode;\n      if (initializerNode) { // use initializer\n        stmts.push(\n          module.createStore(fieldType.byteSize,\n            module.createGetLocal(thisLocalIndex, nativeSizeType),\n            this.compileExpression( // reports\n              initializerNode,\n              fieldType,\n              ConversionKind.IMPLICIT,\n              WrapMode.NONE\n            ),\n            nativeFieldType,\n            field.memoryOffset\n          )\n        );\n      } else {\n        let parameterIndex = field.prototype.parameterIndex;\n        stmts.push(\n          module.createStore(fieldType.byteSize,\n            module.createGetLocal(thisLocalIndex, nativeSizeType),\n            parameterIndex >= 0 // initialized via parameter (here: a local)\n              ? module.createGetLocal(\n                  isInline\n                    ? assert(flow.lookupLocal(field.name)).index\n                    : 1 + parameterIndex, // this is local 0\n                  nativeFieldType\n                )\n              : fieldType.toNativeZero(module),\n            nativeFieldType,\n            field.memoryOffset\n          )\n        );\n      }\n    }\n    return stmts;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n\n/** Special compiler symbols. */\nnamespace CompilerSymbols {\n  /** Module started global. Used if an explicit start function is present. */\n  export const started = \"~lib/started\";\n  /** Argument count global. Used to call trampolines for varargs functions. */\n  export const argc = \"~lib/argc\";\n  /** Argument count setter. Exported for use by host calls. */\n  export const setargc = \"~lib/setargc\";\n}\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Operation_not_supported = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Implementation_0_must_match_the_signature_1 = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Module_cannot_have_multiple_start_functions = 221,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Operation not supported.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Module cannot have multiple start functions.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\n * A control flow analyzer.\n * @module flow\n *//***/\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n\n  getExpressionId,\n  getGetLocalIndex,\n  isTeeLocal,\n  getSetLocalValue,\n  getGetGlobalName,\n  getBinaryOp,\n  BinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  UnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\nimport {\n  bitsetIs,\n  bitsetSet\n} from \"./util\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow returns. */\n  RETURNS = 1 << 0,\n  /** This flow returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow throws. */\n  THROWS = 1 << 2,\n  /** This flow breaks. */\n  BREAKS = 1 << 3,\n  /** This flow continues. */\n  CONTINUES = 1 << 4,\n  /** This flow allocates. Constructors only. */\n  ALLOCATES = 1 << 5,\n  /** This flow calls super. Constructors only. */\n  CALLS_SUPER = 1 << 6,\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 7,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 8,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 9,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 10,\n  /** This flow conditionally allocates in a child flow. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 11,\n\n  // special\n\n  /** This is an inlining flow. */\n  INLINE_CONTEXT = 1 << 12,\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 13,\n\n  // masks\n\n  /** Any terminating flag. */\n  ANY_TERMINATING = FlowFlags.RETURNS\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES\n                  | FlowFlags.CALLS_SUPER,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  parentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local variable wrap states for the first 64 locals. */\n  wrappedLocals: I64;\n  /** Local variable wrap states for locals with index >= 64. */\n  wrappedLocalsExt: I64[] | null;\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(parentFunction: Function): Flow {\n    var flow = new Flow();\n    flow.parent = null;\n    flow.flags = FlowFlags.NONE;\n    flow.parentFunction = parentFunction;\n    flow.continueLabel = null;\n    flow.breakLabel = null;\n    flow.returnType = parentFunction.signature.returnType;\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\n    flow.wrappedLocals = i64_new(0);\n    flow.wrappedLocalsExt = null;\n    flow.inlineFunction = null;\n    flow.inlineReturnLabel = null;\n    return flow;\n  }\n\n  /** Creates an inline flow within `currentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = Flow.create(parentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\n    flow.returnType = inlineFunction.signature.returnType;\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\n    return flow;\n  }\n\n  private constructor() { }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    return this.inlineFunction || this.parentFunction;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.parentFunction = this.parentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.wrappedLocals = this.wrappedLocals;\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, wrapped: bool = false): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps && temps.length) {\n      local = temps.pop();\n      local.type = type;\n      local.flags = CommonFlags.NONE;\n    } else {\n      local = parentFunction.addLocal(type);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) this.setLocalWrapped(local.index, wrapped);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets and immediately frees a temporary local of the specified type. */\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    switch (type.toNativeType()) {\n      case NativeType.I32: {\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (temps.length) {\n      local = temps[temps.length - 1];\n      local.type = type;\n    } else {\n      local = parentFunction.addLocal(type);\n      temps.push(local);\n    }\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) this.setLocalWrapped(local.index, wrapped);\n    return local;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, wrapped: bool, reportNode: Node | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, false);\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          this.parentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            reportNode.range\n          );\n        }\n        return existingLocal;\n      }\n    }\n    scopedLocal.set(CommonFlags.SCOPED);\n    this.scopedLocals.set(name, scopedLocal);\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n      this.setLocalWrapped(scopedLocal.index, wrapped);\n    }\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          this.parentFunction.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            reportNode.range\n          );\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(\n      name,\n      index,\n      type,\n      this.parentFunction\n    );\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    var scope: Map<String,Local> | null;\n    do if ((scope = current.scopedLocals) && (scope.has(name))) return scope.get(name);\n    while (current = current.parent);\n    return this.parentFunction.localsByName.get(name);\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the value of the local at the specified index is considered wrapped. */\n  isLocalWrapped(index: i32): bool {\n    if (index < 0) return true; // inlined constant\n    if (index < 64) return bitsetIs(this.wrappedLocals, index);\n    var ext = this.wrappedLocalsExt;\n    var i = ((index - 64) / 64) | 0;\n    if (!(ext && i < ext.length)) return false;\n    return bitsetIs(ext[i], index - (i + 1) * 64);\n  }\n\n  /** Sets if the value of the local at the specified index is considered wrapped. */\n  setLocalWrapped(index: i32, wrapped: bool): void {\n    if (index < 0) return; // inlined constant\n    if (index < 64) {\n      this.wrappedLocals = bitsetSet(this.wrappedLocals, index, wrapped);\n      return;\n    }\n    var ext = this.wrappedLocalsExt;\n    var i = ((index - 64) / 64) | 0;\n    if (!ext) {\n      this.wrappedLocalsExt = ext = new Array(i + 1);\n      for (let j = 0; j <= i; ++j) ext[j] = i64_new(0);\n    } else {\n      while (ext.length <= i) ext.push(i64_new(0));\n    }\n    ext[i] = bitsetSet(ext[i], index - (i + 1) * 64, wrapped);\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    return parentFunction.breakLabel = id.toString(10);\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString(10);\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.wrappedLocals = other.wrappedLocals;\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.flags |= left.flags & right.flags & FlowFlags.ANY_CATEGORICAL;\n\n    // conditional flags set in at least one arm\n    this.flags |= left.flags & FlowFlags.ANY_CONDITIONAL;\n    this.flags |= right.flags & FlowFlags.ANY_CONDITIONAL;\n\n    // locals wrapped in both arms\n    this.wrappedLocals = i64_and(left.wrappedLocals, right.wrappedLocals);\n    var leftExt = left.wrappedLocalsExt;\n    var rightExt = right.wrappedLocalsExt;\n    if (leftExt != null && rightExt != null) {\n      let thisExt = this.wrappedLocalsExt;\n      let minLength = min(leftExt.length, rightExt.length);\n      if (minLength) {\n        if (!thisExt) thisExt = new Array(minLength);\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\n        for (let i = 0; i < minLength; ++i) {\n          thisExt[i] = i64_and(\n            leftExt[i],\n            rightExt[i]\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.GetLocal: {\n        let local = this.parentFunction.localsByIndex[getGetLocalIndex(expr)];\n        return !this.isLocalWrapped(local.index)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.SetLocal: { // tee\n        assert(isTeeLocal(expr));\n        return this.canOverflow(getSetLocalValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GetGlobal: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGetGlobalName(expr))));\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow(assert((<Global>global).type), type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instance = assert(program.instancesByName.get(assert(getCallTarget(expr))));\n        assert(instance.kind == ElementKind.FUNCTION);\n        let returnType = (<Function>instance).signature.returnType;\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n            || canConversionOverflow(returnType, type);\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getGetLocalIndex,\n  getSetLocalIndex,\n  getSetLocalValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.GetLocal: {\n        this.push(\"$\");\n        this.push(getGetLocalIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.SetLocal: {\n        this.push(\"$\");\n        this.push(getSetLocalIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getSetLocalValue(expr));\n        return;\n      }\n      case ExpressionId.GetGlobal:\n      case ExpressionId.SetGlobal: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.CurrentMemory: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.GrowMemory: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicWake:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.V128: return \"v128\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nabstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Elements still to do. */\n  todo: Element[] = [];\n  /** Already seen elements. */\n  seen: Set<Element> = new Set();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    for (let file of this.program.filesByName.values()) {\n      let members = file.members;\n      if (!members) continue;\n      for (let member of members.values()) {\n        // FIXME: doesn't honor the actual externally visible name\n        this.visitElement(member);\n      }\n    }\n    var todo = this.todo;\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\n  }\n\n  /** Visits an element.*/\n  visitElement(element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    if (this.seen.has(element)) return;\n    this.seen.add(element);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(<FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(<ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        this.visitPropertyInstances(<PropertyPrototype>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterInstance;\n        if (getter) this.visitFunction(getter);\n        let setter = prop.setterInstance;\n        if (setter) this.visitFunction(setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\n      }\n    }\n  }\n\n  private visitClassInstances(element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\n      }\n    }\n  }\n\n  private visitPropertyInstances(element: PropertyPrototype): void {\n    // var instances = element.instances;\n    // if (instances) {\n    //   for (let instance of instances.values()) {\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\n    //   }\n    // }\n    assert(false);\n  }\n\n  abstract visitGlobal(element: Global): void;\n  abstract visitEnum(element: Enum): void;\n  abstract visitFunction(element: Function): void;\n  abstract visitClass(element: Class): void;\n  abstract visitInterface(element: Interface): void;\n  abstract visitField(element: Field): void;\n  abstract visitNamespace(element: Element): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(element.name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(element.name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(element.name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"const \");\n      else sb.push(\"var \");\n    }\n    sb.push(element.name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitEnum(element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"enum \");\n    sb.push(element.name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(element.identifierNode.text); // 'get:funcName' internally\n      sb.push(\": \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\n      sb.push(element.name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(element);\n  }\n\n  visitClass(element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"class \");\n    }\n    sb.push(element.name);\n    var base = element.base;\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n      sb.push(\" extends \");\n      sb.push(base.name); // TODO: fqn\n    }\n    sb.push(\" {\\n\");\n    var members = element.parent.members; // static\n    if (members) {\n      for (let member of members.values()) {\n        this.visitElement(member);\n      }\n    }\n    var ctor = element.constructorInstance;\n    if (ctor) this.visitFunction(ctor);\n    members = element.members; // instance\n    if (members) {\n      for (let member of members.values()) this.visitElement(member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(element: Interface): void {\n    this.visitClass(element);\n  }\n\n  visitField(element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(element.name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"namespace \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  typeToString(type: Type): string {\n    if (type.is(TypeFlags.REFERENCE)){\n      return type.toString();\n    }\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare namespace ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  CommonTypeNode,\n  TypeNode,\n  SignatureNode,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable,\n  IndexSignatureDeclaration\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    text: string,\n    path: string,\n    isEntry: bool\n  ): void {\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.ENTRY\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n          ? SourceKind.LIBRARY\n          : SourceKind.DEFAULT\n    );\n    var program = this.program;\n    program.sources.push(source);\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) statements.push(statement);\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [];\n      decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (tn.skip(Token.DEFAULT)) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          tn.range()\n        );\n      }\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      }\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift() : null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): CommonTypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: CommonTypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseSignature(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"}\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n      let current = first;\n      let parameters = new Array<TypeNode>();\n      let nullable = false;\n\n      // Identifier ('.' Identifier)+\n      while (tn.skip(Token.DOT)) {\n        if (tn.skip(Token.IDENTIFIER)) {\n          let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n          current.next = next;\n          current = next;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range(tn.pos)\n          );\n          return null;\n        }\n      }\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          parameters.push(<TypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(first, parameters, nullable, tn.range(startPos, tn.pos));\n\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function signature, as used in type declarations. */\n  tryParseSignature(\n    tn: Tokenizer\n  ): SignatureNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: TypeNode | null = null;\n    var isSignature: bool = false;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.TYPE) {\n              this.error(\n                DiagnosticCode.Operation_not_supported,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <TypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (isSignature) {\n              this.error(\n                DiagnosticCode.Type_expected,\n                tn.range()\n              ); // recoverable\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: CommonTypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      isSignature = true;\n      tn.discard(state);\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createSignature(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range);\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters = new Array<TypeParameterNode>();\n    var seenOptional = false;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      typeParameters.push(<TypeParameterNode>typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (typeParameters.length === 0) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: TypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <TypeNode>t;\n      }\n      let defaultType: TypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.TYPE) {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <TypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: TypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: CommonTypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.TYPE) {\n          this.parseParametersThis = <TypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: CommonTypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var isArrow = false;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      isArrow = true;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, isArrow, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    isArrow: bool,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: CommonTypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n      this.error(\n        DiagnosticCode.Type_expected,\n        returnType.range\n      ); // recoverable\n    }\n\n    if (isArrow) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createSignature(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null;\n    if (isArrow) {\n      body = this.parseStatement(tn, false);\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      isArrow ? CommonFlags.ARROW : CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: TypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.TYPE) {\n        this.error(\n          DiagnosticCode.Operation_not_supported,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <TypeNode>t;\n    }\n\n    var implementsTypes: TypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [];\n          implementsTypes.push(<TypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators = new Array<DecoratorNode>();\n    if (tn.skip(Token.AT)) {\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        decorators.push(<DecoratorNode>decorator);\n      } while (tn.skip(Token.AT));\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.skip(Token.READONLY)) {\n      flags |= CommonFlags.READONLY;\n      readonlyStart = tn.tokenPos;\n      readonlyEnd = tn.pos;\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\n        if (!retIndex) return null;\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier()) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: CommonTypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createSignature(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: CommonTypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[]): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators.length) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.TYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              return Node.createIndexSignatureDeclaration(<TypeNode>keyType, valueType, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let ns = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, ns);\n          if (member) members.push(member);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ns;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseExportMember(tn);\n          if (!member) return null;\n          members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.backlog.push(internalPath);\n            this.seenlog.add(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) {\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else {\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.backlog.push(internalPath);\n          this.seenlog.add(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.NONE) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operation_not_supported,\n            tn.range()\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    var expr: Expression | null = null;\n    switch (token) {\n\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            true\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        return Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): CommonTypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments = new Array<CommonTypeNode>();\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\n\n    var startPos = expr.range.start;\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (tn.skipIdentifier()) {\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            } else {\n              next = this.parseExpression(tn,\n                isRightAssociative(token)\n                  ? nextPrecedence\n                  : nextPrecedence + 1\n              );\n              if (!next) return null;\n            }\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            next = this.parseExpression(tn,\n              isRightAssociative(token)\n                ? nextPrecedence\n                : nextPrecedence + 1\n            );\n            if (!next) return null;\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression\n  ): Expression {\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: CommonTypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) break;\n        expr = Node.createCallExpression( // is again callable\n          expr,\n          typeArguments,\n          args,\n          tn.range(expr.range.start, tn.pos)\n        );\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\n/// <reference path=\"./node.d.ts\" />\n\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\nimport \"../../../std/portable/index\";\nimport \"./float\";\nimport \"./i64\";\n\nimport { Module } from \"../../module\";\n\nModule.prototype.toText = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitStackIR();\n};\n\nModule.prototype.toAsmjs = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\nglobal.binaryen = binaryen;\n\nfor (var key in binaryen) {\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\n}\n\n// Utilize Binaryen's heap\n\nglobal.__memory_allocate = binaryen._malloc;\nglobal.__memory_free = binaryen._free;\nglobal.__memory_copy = binaryen._memmove;\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__19__;","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 0; // JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\n  return parseInt(str, undefined) | 0;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\nglobalScope[\"JSMath\"].signbit = function signbit(x) {\n  F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n}\n\nglobalScope[\"memory\"] = (() => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n  return {\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\n      if (!(size >>>= 0)) return 0;\n      if (HEAP_OFFSET + size > HEAP.length) {\n        var oldHeap = HEAP;\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n        HEAP.set(oldHeap);\n      }\n      var ptr = HEAP_OFFSET;\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n      return ptr;\n    },\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\n      HEAP.fill(value, dest, dest + size);\n    },\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\n      HEAP.copyWithin(dest, src, src + size);\n    },\n    reset: globalScope[\"__memory_reset\"] || function reset() {\n      HEAP = new Uint8Array(0);\n      HEAP_OFFSET = 0;\n    }\n  };\n})();\n\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\n  HEAP[(ptr | 0) + (offset | 0)] = value;\n};\n\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\n  return HEAP[(ptr | 0) + (offset | 0)];\n};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  ConversionKind,\n  WrapMode,\n  Feature\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression,\n  CallExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  AtomicRMWOp\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Class,\n  Field,\n  Global,\n  DecoratorFlags,\n  ClassPrototype\n} from \"./program\";\n\nimport {\n  FlowFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags, CommonSymbols\n} from \"./common\";\n\n/** Symbols of various compiler built-ins. */\nexport namespace BuiltinSymbols {\n  // std/builtins.ts\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const call_indirect = \"~lib/builtins/call_indirect\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n  export const void_ = \"~lib/builtins/void\";\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_u_add = \"~lib/builtins/i32.atomic.rmw8_u.add\";\n  export const i32_atomic_rmw16_u_add = \"~lib/builtins/i32.atomic.rmw16_u.add\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_u_add = \"~lib/builtins/i64.atomic.rmw8_u.add\";\n  export const i64_atomic_rmw16_u_add = \"~lib/builtins/i64.atomic.rmw16_u.add\";\n  export const i64_atomic_rmw32_u_add = \"~lib/builtins/i64.atomic.rmw32_u.add\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_u_sub = \"~lib/builtins/i32.atomic.rmw8_u.sub\";\n  export const i32_atomic_rmw16_u_sub = \"~lib/builtins/i32.atomic.rmw16_u.sub\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_u_sub = \"~lib/builtins/i64.atomic.rmw8_u.sub\";\n  export const i64_atomic_rmw16_u_sub = \"~lib/builtins/i64.atomic.rmw16_u.sub\";\n  export const i64_atomic_rmw32_u_sub = \"~lib/builtins/i64.atomic.rmw32_u.sub\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_u_and = \"~lib/builtins/i32.atomic.rmw8_u.and\";\n  export const i32_atomic_rmw16_u_and = \"~lib/builtins/i32.atomic.rmw16_u.and\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_u_and = \"~lib/builtins/i64.atomic.rmw8_u.and\";\n  export const i64_atomic_rmw16_u_and = \"~lib/builtins/i64.atomic.rmw16_u.and\";\n  export const i64_atomic_rmw32_u_and = \"~lib/builtins/i64.atomic.rmw32_u.and\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_u_or = \"~lib/builtins/i32.atomic.rmw8_u.or\";\n  export const i32_atomic_rmw16_u_or = \"~lib/builtins/i32.atomic.rmw16_u.or\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_u_or = \"~lib/builtins/i64.atomic.rmw8_u.or\";\n  export const i64_atomic_rmw16_u_or = \"~lib/builtins/i64.atomic.rmw16_u.or\";\n  export const i64_atomic_rmw32_u_or = \"~lib/builtins/i64.atomic.rmw32_u.or\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_u_xor = \"~lib/builtins/i32.atomic.rmw8_u.xor\";\n  export const i32_atomic_rmw16_u_xor = \"~lib/builtins/i32.atomic.rmw16_u.xor\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_u_xor = \"~lib/builtins/i64.atomic.rmw8_u.xor\";\n  export const i64_atomic_rmw16_u_xor = \"~lib/builtins/i64.atomic.rmw16_u.xor\";\n  export const i64_atomic_rmw32_u_xor = \"~lib/builtins/i64.atomic.rmw32_u.xor\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_u_xchg = \"~lib/builtins/i32.atomic.rmw8_u.xchg\";\n  export const i32_atomic_rmw16_u_xchg = \"~lib/builtins/i32.atomic.rmw16_u.xchg\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_u_xchg = \"~lib/builtins/i64.atomic.rmw8_u.xchg\";\n  export const i64_atomic_rmw16_u_xchg = \"~lib/builtins/i64.atomic.rmw16_u.xchg\";\n  export const i64_atomic_rmw32_u_xchg = \"~lib/builtins/i64.atomic.rmw32_u.xchg\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_u_cmpxchg = \"~lib/builtins/i32.atomic.rmw8_u.cmpxchg\";\n  export const i32_atomic_rmw16_u_cmpxchg = \"~lib/builtins/i32.atomic.rmw16_u.cmpxchg\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_u_cmpxchg = \"~lib/builtins/i64.atomic.rmw8_u.cmpxchg\";\n  export const i64_atomic_rmw16_u_cmpxchg = \"~lib/builtins/i64.atomic.rmw16_u.cmpxchg\";\n  export const i64_atomic_rmw32_u_cmpxchg = \"~lib/builtins/i64.atomic.rmw32_u.cmpxchg\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n  export const i32_notify = \"~lib/builtins/i32.notify\";\n  export const i64_notify = \"~lib/builtins/i64.notify\";\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n  // std/memory.ts\n  export const HEAP_BASE = \"~lib/memory/HEAP_BASE\";\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  // std/gc.ts\n  export const iterateRoots = \"~lib/gc/iterateRoots\";\n}\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: CallExpression\n): ExpressionRef {\n  var module = compiler.module;\n\n  var arg0: ExpressionRef,\n      arg1: ExpressionRef,\n      arg2: ExpressionRef,\n      ret: ExpressionRef;\n\n  // NOTE that some implementations below make use of the select expression where straight-forward.\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\n  // search: createSelect\n\n  switch (prototype.internalName) {\n\n    // types\n\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return type.is(TypeFlags.REFERENCE)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      if (classType) {\n        let stringInstance = compiler.program.stringInstance;\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\n      }\n      return module.createI32(0);\n    }\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classReference = type.classReference;\n      if (!classReference) return module.createI32(0);\n      let classPrototype = classReference.prototype;\n      return module.createI32(\n        (<ClassPrototype>classPrototype).extends(compiler.program.arrayPrototype)\n          ? 1\n          : 0\n      );\n    }\n    case BuiltinSymbols.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return module.createI32(type.signatureReference ? 1 : 0);\n    }\n    case BuiltinSymbols.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      return module.createI32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\n    }\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let element = compiler.resolver.resolveExpression(\n        operands[0],\n        compiler.currentFlow,\n        Type.void,\n        ReportMode.SWALLOW\n      );\n      return module.createI32(element ? 1 : 0);\n    }\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      compiler.currentType = Type.bool;\n      return module.createI32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case BuiltinSymbols.isManaged: { // isManaged<T>() -> bool\n      if (!compiler.program.hasGC) {\n        compiler.currentType = Type.bool;\n        return module.createI32(0);\n      }\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.createUnreachable();\n      let classType = type.classReference;\n      return classType !== null && !classType.hasDecorator(DecoratorFlags.UNMANAGED)\n        ? module.createI32(1)\n        : module.createI32(0);\n    }\n\n    // math\n\n    case BuiltinSymbols.clz: { // clz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I8:\n        case TypeKind.U8:\n        case TypeKind.I16:\n        case TypeKind.U16:\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.ClzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ClzI64\n              : UnaryOp.ClzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.ClzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case BuiltinSymbols.ctz: { // ctz<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.NONE, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I8:\n        case TypeKind.U8:\n        case TypeKind.I16:\n        case TypeKind.U16:\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.CtzI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.CtzI64\n              : UnaryOp.CtzI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.CtzI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case BuiltinSymbols.popcnt: { // popcnt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.BOOL: // usually overflows\n        case TypeKind.I8:\n        case TypeKind.U8:\n        case TypeKind.I16:\n        case TypeKind.U16:\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createUnary(UnaryOp.PopcntI32, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.PopcntI64\n              : UnaryOp.PopcntI32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createUnary(UnaryOp.PopcntI64, arg0);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\n            compiler.currentType\n          );\n          // fall-through\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotlI64\n              : BinaryOp.RotlI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflows\n    }\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL: {\n          ret = compiler.ensureSmallIntegerWrap(\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\n            compiler.currentType\n          );\n          break;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          ret = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          ret = module.createBinary(\n            compiler.options.isWasm64\n              ? BinaryOp.RotrI64\n              : BinaryOp.RotrI32,\n            arg0,\n            arg1\n          );\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          ret = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret; // possibly overflowws\n    }\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFlow;\n\n          // possibly overflows, e.g. abs<i8>(-128) == 128\n          let tempLocal1 = flow.getTempLocal(Type.i32, false);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i32, false).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          // (x + (x >> 31)) ^ (x >> 31)\n          ret = module.createBinary(BinaryOp.XorI32,\n            module.createBinary(BinaryOp.AddI32,\n              module.createTeeLocal(\n                tempLocalIndex2,\n                module.createBinary(BinaryOp.ShrI32,\n                  module.createTeeLocal(tempLocalIndex1, arg0),\n                  module.createI32(31)\n                )\n              ),\n              module.createGetLocal(tempLocalIndex1, NativeType.I32)\n            ),\n            module.createGetLocal(tempLocalIndex2, NativeType.I32)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let options = compiler.options;\n          let flow = compiler.currentFlow;\n          let wasm64 = options.isWasm64;\n\n          let tempLocal1 = flow.getTempLocal(options.usizeType, false);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(options.usizeType, false).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          ret = module.createBinary(wasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n            module.createBinary(wasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n              module.createTeeLocal(\n                tempLocalIndex2,\n                module.createBinary(wasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                  module.createTeeLocal(tempLocalIndex1, arg0),\n                  wasm64 ? module.createI64(63) : module.createI32(31)\n                )\n              ),\n              module.createGetLocal(tempLocalIndex1, options.nativeSizeType)\n            ),\n            module.createGetLocal(tempLocalIndex2, options.nativeSizeType)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.I64: {\n          let flow = compiler.currentFlow;\n\n          let tempLocal1 = flow.getTempLocal(Type.i64, false);\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i64, false).index;\n          let tempLocalIndex1 = tempLocal1.index;\n\n          // (x + (x >> 63)) ^ (x >> 63)\n          ret = module.createBinary(BinaryOp.XorI64,\n            module.createBinary(BinaryOp.AddI64,\n              module.createTeeLocal(\n                tempLocalIndex2,\n                module.createBinary(BinaryOp.ShrI64,\n                  module.createTeeLocal(tempLocalIndex1, arg0),\n                  module.createI64(63)\n                )\n              ),\n              module.createGetLocal(tempLocalIndex1, NativeType.I64)\n            ),\n            module.createGetLocal(tempLocalIndex2, NativeType.I64)\n          );\n\n          flow.freeTempLocal(tempLocal1);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.BOOL: {\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.AbsF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.AbsF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          ret = module.createUnreachable();\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFlow;\n          let tempLocal0 = flow.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = flow.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          flow.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFlow;\n          let tempLocal0 = flow.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = flow.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          flow.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let flow = compiler.currentFlow;\n          let tempLocal0 = flow.getTempLocal(Type.i64, false);\n          let tempLocal1 = flow.getAndFreeTempLocal(Type.i64, false);\n          flow.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let flow = compiler.currentFlow;\n          let tempLocal0 = flow.getTempLocal(Type.i64, false);\n          let tempLocal1 = flow.getAndFreeTempLocal(Type.i64, false);\n          flow.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.GtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let flow = compiler.currentFlow;\n          let tempLocal0 = flow.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = flow.getAndFreeTempLocal(compiler.options.usizeType, false);\n          flow.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let flow = compiler.currentFlow;\n          let tempLocal0 = flow.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = flow.getAndFreeTempLocal(compiler.options.usizeType, false);\n          flow.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MaxF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MaxF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.WRAP);\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.I32: {\n          let flow = compiler.currentFlow;\n          let tempLocal0 = flow.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = flow.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          flow.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.U32:\n        case TypeKind.BOOL: {\n          let flow = compiler.currentFlow;\n          let tempLocal0 = flow.getTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg0, compiler.currentType)\n          );\n          let tempLocal1 = flow.getAndFreeTempLocal(\n            compiler.currentType,\n            !flow.canOverflow(arg1, compiler.currentType)\n          );\n          flow.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, NativeType.I32),\n              module.createGetLocal(tempLocal1.index, NativeType.I32)\n            )\n          );\n          break;\n        }\n        case TypeKind.I64: {\n          let flow = compiler.currentFlow;\n          let tempLocal0 = flow.getTempLocal(Type.i64, false);\n          let tempLocal1 = flow.getAndFreeTempLocal(Type.i64, false);\n          flow.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtI64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.U64: {\n          let flow = compiler.currentFlow;\n          let tempLocal0 = flow.getTempLocal(Type.i64, false);\n          let tempLocal1 = flow.getAndFreeTempLocal(Type.i64, false);\n          flow.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(BinaryOp.LtU64,\n              module.createGetLocal(tempLocal0.index, NativeType.I64),\n              module.createGetLocal(tempLocal1.index, NativeType.I64)\n            )\n          );\n          break;\n        }\n        case TypeKind.ISIZE: {\n          let flow = compiler.currentFlow;\n          let tempLocal0 = flow.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = flow.getAndFreeTempLocal(compiler.options.usizeType, false);\n          flow.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          let flow = compiler.currentFlow;\n          let tempLocal0 = flow.getTempLocal(compiler.options.usizeType, false);\n          let tempLocal1 = flow.getAndFreeTempLocal(compiler.options.usizeType, false);\n          flow.freeTempLocal(tempLocal0);\n          ret = module.createSelect(\n            module.createTeeLocal(tempLocal0.index, arg0),\n            module.createTeeLocal(tempLocal1.index, arg1),\n            module.createBinary(\n              compiler.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              module.createGetLocal(tempLocal0.index, compiler.options.nativeSizeType),\n              module.createGetLocal(tempLocal1.index, compiler.options.nativeSizeType)\n            )\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.MinF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.MinF64, arg0, arg1);\n          break;\n        }\n        default: { // void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case BuiltinSymbols.ceil: { // ceil<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.CeilF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.CeilF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case BuiltinSymbols.floor: { // floor<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.FloorF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.FloorF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\n      if (operands.length != 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      arg1 = compiler.compileExpression(operands[1], compiler.currentType, ConversionKind.IMPLICIT, WrapMode.NONE);\n      switch (compiler.currentType.kind) { // TODO: does an integer version make sense?\n        case TypeKind.F32: {\n          ret = module.createBinary(BinaryOp.CopysignF32, arg0, arg1);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createBinary(BinaryOp.CopysignF64, arg0, arg1);\n          break;\n        }\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.NearestF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.NearestF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\n      if (operands.length != 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      switch (typeArguments[0].kind) {\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF32, arg0);\n          break;\n        }\n        case TypeKind.I64:\n        case TypeKind.U64: {\n          arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretF64, arg0);\n          break;\n        }\n        case TypeKind.USIZE: {\n          if (typeArguments[0].is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            compiler.currentType = typeArguments[0];\n            return module.createUnreachable();\n          }\n          // fall-through\n        }\n        case TypeKind.ISIZE: {\n          arg0 = compiler.compileExpression(\n            operands[0],\n            compiler.options.isWasm64\n              ? Type.f64\n              : Type.f32,\n            ConversionKind.IMPLICIT,\n            WrapMode.NONE\n          );\n          ret = module.createUnary(\n            compiler.options.isWasm64\n              ? UnaryOp.ReinterpretF64\n              : UnaryOp.ReinterpretF32,\n            arg0\n          );\n          break;\n        }\n        case TypeKind.F32: {\n          arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\n          ret = module.createUnary(UnaryOp.ReinterpretI64, arg0);\n          break;\n        }\n        default: { // small integers and void\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      compiler.currentType = typeArguments[0];\n      return ret;\n    }\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) { // TODO: integer versions (that return f64 or convert)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.SqrtF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.SqrtF64, arg0);\n          break;\n        }\n        // case TypeKind.VOID:\n        default: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\n      if (operands.length != 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments && typeArguments.length) {\n        compiler.currentType = typeArguments[0];\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\n      }\n      switch (compiler.currentType.kind) {\n        case TypeKind.USIZE: {\n          if (compiler.currentType.is(TypeFlags.REFERENCE)) {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = module.createUnreachable();\n            break;\n          }\n          // fall-through\n        }\n        default: { // any integer\n          ret = arg0;\n          break;\n        }\n        // TODO: truncate to contextual type directly (if not void etc.)?\n        case TypeKind.F32: {\n          ret = module.createUnary(UnaryOp.TruncF32, arg0);\n          break;\n        }\n        case TypeKind.F64: {\n          ret = module.createUnary(UnaryOp.TruncF64, arg0);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n\n    // memory access\n\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, constantOffset?: usize) -> *\n      if (operands.length < 1 || operands.length > 2) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = typeArguments[0];\n      return module.createLoad(\n        typeArguments[0].byteSize,\n        typeArguments[0].is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > typeArguments[0].size\n          ? (compiler.currentType = contextualType).toNativeType()\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\n        offset\n      );\n    }\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\n      compiler.currentType = Type.void;\n      if (operands.length < 2 || operands.length > 3) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 2) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"3\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        typeArguments[0],\n        typeArguments[0].is(TypeFlags.INTEGER)\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n          : ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let type: Type;\n      if (\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        (\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          compiler.currentType, typeArguments[0],\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        type = typeArguments[0];\n      } else {\n        type = compiler.currentType;\n      }\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.createStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\n    }\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, constantOffset?: usize) -> *\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (operands.length < 1 || operands.length > 2) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let offset = operands.length == 2 ? evaluateConstantOffset(compiler, operands[1]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = typeArguments[0];\n      return module.createAtomicLoad(\n        typeArguments[0].byteSize,\n        arg0,\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > typeArguments[0].size\n          ? (compiler.currentType = contextualType).toNativeType()\n          : (compiler.currentType = typeArguments[0]).toNativeType(),\n        offset\n      );\n    }\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: *, constantOffset?: usize) -> void\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      compiler.currentType = Type.void;\n      if (operands.length < 2 || operands.length > 3) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 2) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"3\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        typeArguments[0],\n        typeArguments[0].is(TypeFlags.INTEGER)\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n          : ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      let type: Type;\n      if (\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        (\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          compiler.currentType, typeArguments[0],\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        type = typeArguments[0];\n      } else {\n        type = compiler.currentType;\n      }\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.createAtomicStore(typeArguments[0].byteSize, arg0, arg1, type.toNativeType(), offset);\n    }\n    case BuiltinSymbols.atomic_add:  // add<T!>(ptr: usize, value: T, constantOffset?: usize): T;\n    case BuiltinSymbols.atomic_sub:  // sub<T!>(ptr: usize, value: T, constantOffset?: usize): T;\n    case BuiltinSymbols.atomic_and:  // and<T!>(ptr: usize, value: T, constantOffset?: usize): T;\n    case BuiltinSymbols.atomic_or:   // or<T!>(ptr: usize, value: T, constantOffset?: usize): T;\n    case BuiltinSymbols.atomic_xor:  // xor<T!>(ptr: usize, value: T, constantOffset?: usize): T;\n    case BuiltinSymbols.atomic_xchg: // xchg<T!>(ptr: usize, value: T, constantOffset?: usize): T;\n    {\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (operands.length < 2 || operands.length > 3) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 2) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"3\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        typeArguments[0],\n        typeArguments[0].is(TypeFlags.INTEGER)\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n          : ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n\n      let type: Type;\n      if (\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        (\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          compiler.currentType, typeArguments[0],\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        type = typeArguments[0];\n      } else {\n        type = compiler.currentType;\n      }\n\n      let offset = operands.length == 3 ? evaluateConstantOffset(compiler, operands[2]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      let RMWOp: AtomicRMWOp | null = null;\n      switch (prototype.internalName) {\n        case BuiltinSymbols.atomic_add: { RMWOp = AtomicRMWOp.Add; break; }\n        case BuiltinSymbols.atomic_sub: { RMWOp = AtomicRMWOp.Sub; break; }\n        case BuiltinSymbols.atomic_and: { RMWOp = AtomicRMWOp.And; break; }\n        case BuiltinSymbols.atomic_or: { RMWOp = AtomicRMWOp.Or; break; }\n        case BuiltinSymbols.atomic_xor: { RMWOp = AtomicRMWOp.Xor; break; }\n        case BuiltinSymbols.atomic_xchg: { RMWOp = AtomicRMWOp.Xchg; break; }\n      }\n      compiler.currentType = typeArguments[0];\n      if (RMWOp !== null) {\n        return module.createAtomicRMW(\n          RMWOp, typeArguments[0].byteSize, offset, arg0, arg1, type.toNativeType()\n        );\n      } else {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n    }\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, cOff?: usize): T\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      if (operands.length < 3 || operands.length > 4) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        if (operands.length < 3) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        } else {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"3\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        typeArguments[0],\n        typeArguments[0].is(TypeFlags.INTEGER)\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n          : ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        typeArguments[0],\n        typeArguments[0].is(TypeFlags.INTEGER)\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n          : ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n\n      let type: Type;\n      if (\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        (\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          compiler.currentType, typeArguments[0],\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        arg2 = compiler.convertExpression(\n          arg2,\n          compiler.currentType, typeArguments[0],\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[2]\n        );\n        type = typeArguments[0];\n      } else {\n        type = compiler.currentType;\n      }\n\n      let offset = operands.length == 4 ? evaluateConstantOffset(compiler, operands[3]) : 0; // reports\n      if (offset < 0) { // reported in evaluateConstantOffset\n        return module.createUnreachable();\n      }\n      compiler.currentType = typeArguments[0];\n      return module.createAtomicCmpxchg(\n        typeArguments[0].byteSize, offset, arg0, arg1, arg2, type.toNativeType()\n      );\n    }\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected:T, timeout: i64): i32;\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      let hasError = typeArguments == null;\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        hasError = true;\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        hasError = true;\n      }\n\n      if (!typeArguments || hasError) {\n        return module.createUnreachable();\n      }\n\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        typeArguments[0],\n        typeArguments[0].is(TypeFlags.INTEGER)\n          ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\n          : ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        Type.i64,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n\n      let type: Type = typeArguments[0];\n      if (\n        typeArguments[0].is(TypeFlags.INTEGER) &&\n        (\n          !compiler.currentType.is(TypeFlags.INTEGER) ||    // float to int\n          compiler.currentType.size < typeArguments[0].size // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(\n          arg1,\n          compiler.currentType, typeArguments[0],\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[1]\n        );\n        arg2 = compiler.convertExpression(\n          arg2,\n          compiler.currentType, typeArguments[0],\n          ConversionKind.IMPLICIT,\n          WrapMode.NONE, // still clears garbage bits\n          operands[2]\n        );\n      }\n\n      return module.createAtomicWait(\n        arg0, arg1, arg2, type.toNativeType()\n      );\n    }\n    case BuiltinSymbols.atomic_notify: { // notify<T!>(ptr: usize, count: u32): u32;\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\n      let hasError = typeArguments == null;\n      if (operands.length != 2) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"2\", operands.length.toString(10)\n        );\n        hasError = true;\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        hasError = true;\n      }\n\n      if (!typeArguments || hasError) {\n        return module.createUnreachable();\n      }\n\n      arg0 = compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        Type.i32,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n\n      return module.createAtomicWake(\n        arg0, arg1\n      );\n    }\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(byteSize);\n        } else {\n          ret = module.createI64(byteSize, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(byteSize, 0);\n        } else {\n          ret = module.createI32(byteSize);\n        }\n      }\n      return ret;\n    }\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length != 0) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\n      let alignLog2: i32;\n      switch (byteSize) {\n        case 1: { alignLog2 = 0; break; }\n        case 2: { alignLog2 = 1; break; }\n        case 4: { alignLog2 = 2; break; }\n        case 8: { alignLog2 = 3; break; }\n        default: { assert(false, \"unexected byte size\"); return module.createUnreachable(); }\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          ret = module.createI32(alignLog2);\n        } else {\n          ret = module.createI64(alignLog2, 0);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          ret = module.createI64(alignLog2, 0);\n        } else {\n          ret = module.createI32(alignLog2);\n        }\n      }\n      return ret;\n    }\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (operands.length > 1) {\n        if (!(typeArguments && typeArguments.length == 1)) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n          );\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (!(typeArguments && typeArguments.length == 1)) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let classType = typeArguments[0].classReference;\n      if (!classType) {\n        compiler.error( // TODO: better error\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.createUnreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.createUnreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.createI32(offset);\n        } else {\n          return module.createI64(offset);\n        }\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.createI64(offset);\n        } else {\n          return module.createI32(offset);\n        }\n      }\n    }\n\n    // control flow\n\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (operands.length != 3) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n      let type = compiler.currentType;\n      arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\n      arg2 = compiler.makeIsTrueish(\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\n        compiler.currentType\n      );\n      compiler.currentType = type;\n      switch (compiler.currentType.kind) {\n        case TypeKind.I8:\n        case TypeKind.I16:\n        case TypeKind.U8:\n        case TypeKind.U16:\n        case TypeKind.BOOL:\n        default: {\n          ret = module.createSelect(arg0, arg1, arg2);\n          break;\n        }\n        case TypeKind.VOID: {\n          compiler.error(\n            DiagnosticCode.Operation_not_supported,\n            reportNode.range\n          );\n          ret = module.createUnreachable();\n          break;\n        }\n      }\n      return ret;\n    }\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createUnreachable();\n    }\n\n    // host operations\n\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 0) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.CurrentMemory);\n    }\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"0\", operands.length.toString(10)\n        );\n        arg0 = module.createUnreachable();\n      } else {\n        arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      return module.createHost(HostOp.GrowMemory, null, [ arg0 ]);\n    }\n    // see: https://github.com/WebAssembly/bulk-memory-operations\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.createUnreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      let usizeType = compiler.options.usizeType;\n      arg0 = compiler.compileExpression(\n        operands[0],\n        usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      return module.createMemoryCopy(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.createUnreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 3) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"3\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      let usizeType = compiler.options.usizeType;\n      arg0 = compiler.compileExpression(\n        operands[0],\n        usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg1 = compiler.compileExpression(\n        operands[1],\n        Type.u32,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      arg2 = compiler.compileExpression(\n        operands[2],\n        usizeType,\n        ConversionKind.IMPLICIT,\n        WrapMode.NONE\n      );\n      compiler.currentType = Type.void;\n      return module.createMemoryFill(arg0, arg1, arg2);\n    }\n\n    // other\n\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = typeArguments[0];\n        return module.createUnreachable();\n      }\n      arg0 = compiler.compileExpressionRetainType(\n        operands[0],\n        typeArguments[0],\n        WrapMode.NONE\n      );\n      compiler.currentType = typeArguments[0];\n      if (compiler.currentType.size != typeArguments[0].size) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      // if (reportNode.range.source.sourceKind != SourceKind.STDLIB)\n      //  compiler.warning(DiagnosticCode.Operation_is_unsafe, reportNode.range);\n      return arg0; // any usize to any usize\n    }\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T with T != null\n      if (operands.length < 1 || operands.length > 2) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        if (operands.length < 1) {\n          compiler.error(\n            DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n            reportNode.range, \"1\", operands.length.toString(10)\n          );\n        } else if (operands.length > 2) {\n          compiler.error(\n            DiagnosticCode.Expected_0_arguments_but_got_1,\n            reportNode.range, \"2\", operands.length.toString(10)\n          );\n        }\n        return module.createUnreachable();\n      }\n      if (typeArguments) {\n        if (typeArguments.length) compiler.currentType = typeArguments[0].nonNullableType;\n        if (typeArguments.length != 1) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        arg0 = compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP);\n      } else {\n        arg0 = compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\n      }\n\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // just return ifTrueish if assertions are disabled, or simplify if dropped anyway\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) {\n          compiler.currentType = Type.void;\n          return module.createNop();\n        }\n        return arg0;\n      }\n\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n\n      compiler.currentType = type.nonNullableType;\n\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        switch (compiler.currentType.kind) {\n          default: { // any integer up to 32-bits incl. bool\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n            break;\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                arg0,\n                module.createF32(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                arg0,\n                module.createF64(0)\n              ),\n              abort\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n        compiler.currentType = Type.void;\n      } else {\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            let flow = compiler.currentFlow;\n            let tempLocal = flow.getAndFreeTempLocal(\n              compiler.currentType,\n              !flow.canOverflow(arg0, compiler.currentType)\n            );\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32:\n          default: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.i32, false);\n            ret = module.createIf(\n              module.createTeeLocal(tempLocal.index, arg0),\n              module.createGetLocal(tempLocal.index, NativeType.I32),\n              abort\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.i64, false);\n            ret = module.createIf(\n              module.createUnary(UnaryOp.EqzI64,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.I64)\n            );\n            break;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(compiler.options.usizeType, false);\n            ret = module.createIf(\n              module.createUnary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.createTeeLocal(tempLocal.index, arg0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f32, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF32,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF32(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F32)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f64, false);\n            ret = module.createIf(\n              module.createBinary(BinaryOp.EqF64,\n                module.createTeeLocal(tempLocal.index, arg0),\n                module.createF64(0)\n              ),\n              abort,\n              module.createGetLocal(tempLocal.index, NativeType.F64)\n            );\n            break;\n          }\n          case TypeKind.VOID: {\n            compiler.error(\n              DiagnosticCode.Operation_not_supported,\n              reportNode.range\n            );\n            ret = abort;\n            break;\n          }\n        }\n      }\n      return ret;\n    }\n    case BuiltinSymbols.unchecked: {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let flow = compiler.currentFlow;\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      ret = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\n      flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return ret;\n    }\n    case BuiltinSymbols.call_indirect: { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (operands.length < 1) {\n        if (typeArguments) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          if (typeArguments.length != 1) {\n            compiler.error(\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\n              reportNode.range, \"1\", typeArguments.length.toString(10)\n            );\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        return module.createUnreachable();\n      }\n      let returnType: Type;\n      if (typeArguments) {\n        if (typeArguments.length != 1) {\n          if (typeArguments.length) compiler.currentType = typeArguments[0];\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return module.createUnreachable();\n        }\n        returnType = typeArguments[0];\n      } else {\n        returnType = contextualType;\n      }\n      arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      if (compiler.currentType.kind != TypeKind.U32) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          operands[0].range\n        );\n        return module.createUnreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let signatureParts = new Array<string>(numOperands + 1);\n      let nativeReturnType = returnType.toNativeType();\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\n        let operandType = compiler.currentType;\n        signatureParts[i] = operandType.toSignatureString();\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      signatureParts[numOperands] = returnType.toSignatureString();\n      let typeName = signatureParts.join(\"\");\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.createCallIndirect(arg0, operandExprs, typeName);\n    }\n    case BuiltinSymbols.instantiate: {\n      if (!(typeArguments && typeArguments.length == 1)) {\n        if (typeArguments && typeArguments.length) compiler.currentType = typeArguments[0];\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n        );\n        return module.createUnreachable();\n      }\n      let classInstance = typeArguments[0].classReference;\n      if (!classInstance) {\n        compiler.error(\n          DiagnosticCode.Operation_not_supported,\n          reportNode.range\n        );\n        return module.createUnreachable();\n      }\n      return compiler.compileInstantiate(classInstance, operands, reportNode);\n    }\n\n    // user-defined diagnostic macros\n\n    case BuiltinSymbols.ERROR: {\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createUnreachable();\n    }\n    case BuiltinSymbols.WARNING: {\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n    case BuiltinSymbols.INFO: {\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.createNop();\n    }\n\n    // conversions\n\n    case BuiltinSymbols.i8: {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case BuiltinSymbols.i16: {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case BuiltinSymbols.i32: {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case BuiltinSymbols.i64: {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.i64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.i64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case BuiltinSymbols.isize: {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.isWasm64\n          ? Type.isize64\n          : Type.isize32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case BuiltinSymbols.u8: {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u8;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u8,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case BuiltinSymbols.u16: {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u16;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u16,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case BuiltinSymbols.u32: {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case BuiltinSymbols.u64: {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.u64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.u64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case BuiltinSymbols.usize: {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = compiler.options.usizeType;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        compiler.options.usizeType,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case BuiltinSymbols.bool: {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.bool;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.bool,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case BuiltinSymbols.f32: {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f32;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f32,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    case BuiltinSymbols.f64: {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.f64;\n        return module.createUnreachable();\n      }\n      return compiler.compileExpression(\n        operands[0],\n        Type.f64,\n        ConversionKind.EXPLICIT,\n        WrapMode.NONE\n      );\n    }\n    // TODO: v128\n\n    // gc\n\n    case BuiltinSymbols.iterateRoots: {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.range, prototype.internalName\n        );\n      }\n      if (operands.length != 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          reportNode.range, \"1\", operands.length.toString(10)\n        );\n        compiler.currentType = Type.void;\n        return module.createUnreachable();\n      }\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\n      let type = compiler.currentType;\n      let signatureReference = type.signatureReference;\n      compiler.currentType = Type.void;\n      if (\n        !type.is(TypeFlags.REFERENCE) ||\n        !signatureReference ||\n        signatureReference.parameterTypes.length != 1 ||\n        signatureReference.parameterTypes[0] != compiler.options.usizeType\n       ) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          reportNode.range, type.toString(), \"(ref: usize) => void\"\n        );\n        return module.createUnreachable();\n      }\n      compiler.currentType = Type.void;\n      // just emit a call even if the function doesn't yet exist\n      compiler.needsIterateRoots = true;\n      return module.createCall(\"~iterateRoots\", [ expr ], NativeType.None);\n    }\n  }\n  var expr = deferASMCall(compiler, prototype, operands, contextualType, reportNode);\n  if (expr) {\n    if (typeArguments && typeArguments.length) {\n      compiler.error(\n        DiagnosticCode.Type_0_is_not_generic,\n        reportNode.range, prototype.internalName\n      );\n    }\n    return expr;\n  }\n  compiler.error(\n    DiagnosticCode.Cannot_find_name_0,\n    reportNode.expression.range, prototype.internalName\n  );\n  return module.createUnreachable();\n}\n\n/** Defers an inline-assembler-like call to a built-in function. */\nfunction deferASMCall(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: CallExpression\n): ExpressionRef {\n  /* tslint:disable:max-line-length */\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.u32, reportNode);\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.u32, reportNode);\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.u64, reportNode);\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.u64, reportNode);\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.u64, reportNode);\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\n  }\n  if (compiler.options.hasFeature(Feature.THREADS)) {\n    switch (prototype.internalName) {\n      case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i8, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i16, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\n      case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i8, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i16, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw8_u_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_u_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_u_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_u_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_u_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u64, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw8_u_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_u_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_u_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_u_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_u_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u64, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw8_u_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_u_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_u_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_u_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_u_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u64, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw8_u_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_u_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_u_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_u_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_u_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u64, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw8_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u64, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw8_u_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_u_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_u_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_u_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_u_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u64, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw8_u_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw16_u_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw8_u_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw16_u_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw32_u_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u64, operands, Type.u64, reportNode);\n      case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i64, reportNode);\n      case BuiltinSymbols.i32_notify: return deferASM(BuiltinSymbols.atomic_notify, compiler, Type.i32, operands, Type.u32, reportNode);\n      case BuiltinSymbols.i64_notify: return deferASM(BuiltinSymbols.atomic_notify, compiler, Type.i64, operands, Type.i64, reportNode);\n    }\n  }\n  /* tslint:enable:max-line-length */\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type,\n  operands: Expression[],\n  valueType: Type,\n  reportNode: CallExpression\n): ExpressionRef {\n  assert(compiler.program.elementsByName.has(name));\n  var prototype = compiler.program.elementsByName.get(name)!;\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(compiler, <FunctionPrototype>prototype, [ typeArgument ], operands, valueType, reportNode);\n}\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: Node\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.range, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments) {\n      if (typeArguments.length == 1) {\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\n      } else {\n        if (typeArguments.length) {\n          compiler.error(\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\n            reportNode.range, \"1\", typeArguments.length.toString(10)\n          );\n          return null;\n        }\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n      }\n    } else {\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.range, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a `constantOffset` argument.*/\nfunction evaluateConstantOffset(compiler: Compiler, expression: Expression): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringInstance = compiler.program.stringInstance;\n  if (!stringInstance) return module.createUnreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\n\n  var messageArg = message != null\n    ? compiler.compileExpression(message, stringInstance.type, ConversionKind.IMPLICIT, WrapMode.NONE)\n    : stringInstance.type.toNativeZero(module);\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.createBlock(null, [\n    module.createCall(\n      abortInstance.internalName, [\n        messageArg,\n        filenameArg,\n        module.createI32(reportNode.range.line),\n        module.createI32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.createUnreachable()\n  ]);\n}\n\n/** Compiles the iterateRoots function if requires. */\nexport function compileIterateRoots(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n\n  for (let element of compiler.program.elementsByName.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let classReference = global.type.classReference;\n    if (\n      global.is(CommonFlags.COMPILED) &&\n      classReference !== null &&\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              compiler.options.isWasm64\n                ? module.createI64(i64_low(value), i64_high(value))\n                : module.createI32(i64_low(value))\n            ],\n            \"i_\"\n          )\n        );\n      } else {\n        exprs.push(\n          module.createCallIndirect(\n            module.createGetLocal(0, NativeType.I32),\n            [\n              module.createGetGlobal(\n                global.internalName,\n                compiler.options.nativeSizeType\n              )\n            ],\n            \"i_\"\n          )\n        );\n      }\n    }\n  }\n  var typeRef = compiler.ensureFunctionType([ Type.i32 ], Type.void);\n  module.addFunction(\"~iterateRoots\", typeRef, [],\n    exprs.length\n      ? module.createBlock(null, exprs)\n      : module.createNop()\n  );\n}\n\n/** Ensures that the specified class's GC hook exists and returns its function table index. */\nexport function ensureGCHook(\n  compiler: Compiler,\n  classInstance: Class\n): u32 {\n  var program = compiler.program;\n  assert(classInstance.type.isManaged(program));\n\n  // check if the GC hook has already been created\n  {\n    let existingIndex = classInstance.gcHookIndex;\n    if (existingIndex != <u32>-1) return existingIndex;\n  }\n\n  // check if the class implements a custom GC function (only valid for library elements)\n  var members = classInstance.members;\n  if (classInstance.isDeclaredInLibrary) {\n    if (members !== null && members.has(\"__gc\")) {\n      let gcPrototype = assert(members.get(\"__gc\"));\n      assert(gcPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let gcInstance = assert(program.resolver.resolveFunction(<FunctionPrototype>gcPrototype, null));\n      assert(gcInstance.is(CommonFlags.PRIVATE | CommonFlags.INSTANCE));\n      assert(!gcInstance.isAny(CommonFlags.AMBIENT | CommonFlags.VIRTUAL));\n      assert(gcInstance.signature.parameterTypes.length == 0);\n      assert(gcInstance.signature.returnType == Type.void);\n      gcInstance.internalName = classInstance.internalName + \"~gc\";\n      assert(compiler.compileFunction(gcInstance));\n      let index = compiler.ensureFunctionTableEntry(gcInstance);\n      classInstance.gcHookIndex = index;\n      return index;\n    }\n  }\n\n  var module = compiler.module;\n  var options = compiler.options;\n  var nativeSizeType = options.nativeSizeType;\n  var nativeSizeSize = options.usizeType.byteSize;\n  var body = new Array<ExpressionRef>();\n\n  // nothing to mark if 'this' is null\n  body.push(\n    module.createIf(\n      module.createUnary(\n        options.isWasm64\n          ? UnaryOp.EqzI64\n          : UnaryOp.EqzI32,\n        module.createGetLocal(0, nativeSizeType)\n      ),\n      module.createReturn()\n    )\n  );\n\n  // remember the function index so we don't recurse infinitely\n  var functionTable = compiler.functionTable;\n  var gcHookIndex = functionTable.length;\n  functionTable.push(\"<placeholder>\");\n  classInstance.gcHookIndex = gcHookIndex;\n\n  // if the class extends a base class, call its hook first (calls mark)\n  var baseInstance = classInstance.base;\n  if (baseInstance) {\n    assert(baseInstance.type.isManaged(program));\n    body.push(\n      module.createCallIndirect(\n        module.createI32(\n          ensureGCHook(compiler, <Class>baseInstance.type.classReference)\n        ),\n        [\n          module.createGetLocal(0, nativeSizeType)\n        ],\n        nativeSizeType == NativeType.I64 ? \"I_\" : \"i_\"\n      )\n    );\n\n  // if this class is the top-most base class, mark the instance\n  } else {\n    body.push(\n      module.createCall(assert(program.gcMarkInstance).internalName, [\n        module.createGetLocal(0, nativeSizeType)\n      ], NativeType.None)\n    );\n  }\n\n  // mark instances assigned to own fields that are again references\n  if (members) {\n    for (let member of members.values()) {\n      if (member.kind == ElementKind.FIELD) {\n        if ((<Field>member).parent === classInstance) {\n          let type = (<Field>member).type;\n          if (type.isManaged(program)) {\n            let offset = (<Field>member).memoryOffset;\n            assert(offset >= 0);\n            body.push(\n              module.createCall(assert(program.gcMarkInstance).internalName, [\n                module.createLoad(\n                  nativeSizeSize,\n                  false,\n                  module.createGetLocal(0, nativeSizeType),\n                  nativeSizeType,\n                  offset\n                )\n              ], NativeType.None)\n            );\n          }\n        }\n      }\n    }\n  }\n\n  // add the function to the module and return its table index\n  var funcName = classInstance.internalName + \"~gc\";\n  module.addFunction(\n    funcName,\n    compiler.ensureFunctionType(null, Type.void, options.usizeType),\n    null,\n    module.createBlock(null, body)\n  );\n  functionTable[gcHookIndex] = funcName;\n  return gcHookIndex;\n}\n","/** @module util *//***/\n\n/** Tests if the bit at the specified index is set within a 64-bit map. */\nexport function bitsetIs(map: I64, index: i32): bool {\n  assert(index >= 0 && index < 64);\n  return i64_ne(\n    i64_and(\n      map,\n      i64_shl(\n        i64_one,\n        i64_new(index)\n      )\n    ),\n    i64_zero\n  );\n}\n\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\n  assert(index >= 0 && index < 64);\n  return isSet\n    ? i64_or(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      )\n    : i64_and(\n        map,\n        i64_not(\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      );\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let cloned = new Array<V>(original.length);\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    for (let v of original) cloned.add(v);\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    for (let [k, v] of original) cloned.set(k, v);\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\n  } else if (overrides) {\n    for (let [k, v] of overrides) cloned.set(k, v);\n  }\n  return cloned;\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport {\n  Compiler,\n  Options,\n  Target,\n  Feature\n} from \"./compiler\";\n\nimport {\n  Decompiler\n} from \"./decompiler\";\n\nimport {\n  IDLBuilder,\n  TSDBuilder\n} from \"./definitions\";\n\nimport {\n  DiagnosticMessage,\n  DiagnosticCategory,\n  formatDiagnosticMessage\n} from \"./diagnostics\";\n\nimport {\n  Module\n} from \"./module\";\n\nimport {\n  Parser\n} from \"./parser\";\n\nimport {\n  Program\n} from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(text: string, path: string, isEntry: bool = false,\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(name, alias);\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n\n// Full API\nexport * from \"./ast\";\n// export * from \"./binary\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./decompiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnosticMessages.generated\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nexport * from \"./util\";\n"],"sourceRoot":""}
=======
{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts","webpack://assemblyscript/./src/index.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__19__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","null_","true_","false_","this_","super_","constructor","LibrarySymbols","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_MUTABLE_GLOBAL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","String","Array","ArrayBuffer","Math","Mathf","memory","allocate","abort","main","length","byteLength","pow","mod","__export","isPowerOf2","x","DiagnosticCategory","diagnosticMessages_generated_1","util_1","diagnosticMessages_generated_2","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","createInfo","createWarning","createError","withRange","withRelatedRange","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","start","end","isLineBreak","charCodeAt","sb","substring","push","join","formatDiagnosticMessage","showContext","DiagnosticEmitter","diagnostics","emitDiagnostic","info","infoRelated","warning","warningRelated","error","errorRelated","OperatorKind","common_1","diagnostics_1","types_1","ast_1","resolver_1","flow_1","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","operatorKindFromDecorator","decoratorKind","arg","DecoratorKind","OPERATOR","OPERATOR_BINARY","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","OPERATOR_PREFIX","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","OPERATOR_POSTFIX","POSTFIX_INC","POSTFIX_DEC","INVALID","ElementKind","DecoratorFlags","Program","_super","_this","sources","diagnosticsOffset","explicitStartFunction","filesByName","Map","elementsByName","elementsByDeclaration","instancesByName","typeClasses","arrayBufferInstance","arrayPrototype","stringInstance","abortInstance","memoryAllocateInstance","hasGC","gcAllocateInstance","gcLinkInstance","gcMarkInstance","gcHeaderSize","gcHookOffset","nativeDummySignature","nativeSource","Source","SourceKind","LIBRARY","nativeFile","File","set","internalName","resolver","Resolver","__extends","makeNativeVariableDeclaration","flags","NONE","Node","createVariableDeclaration","createIdentifierExpression","makeNativeTypeDeclaration","identifier","createTypeDeclaration","createOmittedType","makeNativeFunctionDeclaration","createFunctionDeclaration","createSignature","createType","createSimpleTypeName","makeNativeNamespaceDeclaration","createNamespaceDeclaration","makeNativeFunction","signature","parent","decoratorFlags","Function","FunctionPrototype","getElementByDeclaration","declaration","has","initialize","options","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","EXPORT","GENERIC","BUILTIN","hasFeature","registerConstantInteger","i64_new","isWasm64","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","k","file","statements","j","statement","kind","NodeKind","initializeExports","IMPORT","initializeImports","VARIABLE","initializeVariables","CLASSDECLARATION","initializeClass","ENUMDECLARATION","initializeEnum","FUNCTIONDECLARATION","initializeFunction","INTERFACEDECLARATION","initializeInterface","NAMESPACEDECLARATION","initializeNamespace","TYPEDECLARATION","initializeTypeDefinition","queuedExportsStar_1","__values","queuedExportsStar_1_1","next","done","_g","__read","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","File_0_not_found","queuedImport","element","lookupForeign","Module_0_has_no_exported_member_1","localName","asImportedNamespace","queuedExports_1","queuedExports_1_1","_h","exports_1","exports_1_1","_j","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","registerNativeTypeClass","thisPrototype","extendsNode","baseElement","resolveTypeName","CLASS_PROTOTYPE","basePrototype","hasDecorator","SEALED","Class_0_is_sealed_and_cannot_be_extended","identifierNode","UNMANAGED","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","Range","A_class_may_only_extend_another_class","globalAliases","globalAliases_1","globalAliases_1_1","_k","alias","Error","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","parameterTypes","signatureReference","returnType","byteSize","_l","values","_m","isEntry","_o","_p","markModuleExport","MODULE_EXPORT","instanceMembers","_c","_d","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FUNCTION","FIELD","CLASS","members","_e","_f","type","setType","typeKind","className","classElement","is","global","Global","CONST","setConstantIntegerValue","registerConstantFloat","setConstantFloatValue","ensureGlobal","merged","tryMerge","Duplicate_identifier_0","elements","foreignName","lookupExport","fileQueuedExports","checkDecorators","decorators","acceptedFlags","decorator","flag","decoratorKindToFlag","decoratorNameToKind","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","GLOBAL","implementsTypes","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","Operation_not_supported","extendsType","memberDeclarations","memberDeclaration","FIELDDECLARATION","initializeField","METHODDECLARATION","isAny","GET","SET","initializeProperty","initializeMethod","INDEXSIGNATUREDECLARATION","STATIC","INTERFACE_PROTOTYPE","READONLY","INLINE","LAZY","ABSTRACT","FieldPrototype","addInstance","isStatic","CONSTRUCTOR","checkOperatorOverloads","classPrototype","numArgs","arguments","firstArg","LITERAL","literalKind","LiteralKind","STRING","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","ensureProperty","parentMembers","PropertyPrototype","Duplicate_property_0","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","internalPath","queued","endsWith","path","exportedName","Export_declaration_conflicts_with_exported_declaration_of_0","declarations","initializeImport","namespaceName","validDecorators","AMBIENT","EXTERNAL","INSTANCE","FILE","START","Module_cannot_have_multiple_start_functions","findDecorator","InterfacePrototype","Namespace","DECLARE","Element","program","shadowType","current","originalDeclaration","actual","isBound","TypedElement","apply","RESOLVED","startFunction","Signature","isImport","lookup","includes","exports_2","exports_2_1","_b","memberName","TYPEDEFINITION","mangleInternalName","typeParameters","NAMESPACE","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","initializer","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","Parameter","Local","index","LOCAL","instances","boundPrototypes","body","arrowKind","toBound","classInstance","bound","getResolvedInstance","instanceKey","setResolvedInstance","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","addLocal","locals","finalize","sourceMap","debugLocation","setDebugLocation","debugInfoRef","debugInfoIndex","FunctionTarget","__s","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","parameterIndex","Field","memoryOffset","firstDeclaration","Property","getterInstance","setterInstance","_isInterface","constructorPrototype","extends","basePtototype","Class","typeArguments","base","INTERFACE","currentMemoryOffset","constructorInstance","gcHookIndex","asClass","inheritedTypeArguments","inheritedTypeArguments_1","inheritedTypeArguments_1_1","baseName","baseType","typeParameterNodes","numTypeArguments","isAssignableTo","target","lookupOverload","unchecked","uncheckedOverload","overload","offsetof","fieldName","field","Interface","older","newer","copyMembers","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","srcMembers_1","srcMembers_1_1","isInstance","asGlobal","NativeType","ExpressionId","compiler_1","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeUnreachable","_BinaryenTypeAuto","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenGetLocalId","_BinaryenSetLocalId","_BinaryenGetGlobalId","_BinaryenSetGlobalId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicWakeId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDBitselectId","_BinaryenSIMDShiftId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","HostOp","_BinaryenCurrentMemory","_BinaryenGrowMemory","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDExtractOp","_BinaryenExtractLaneSVecI8x16","_BinaryenExtractLaneUVecI8x16","_BinaryenExtractLaneSVecI16x8","_BinaryenExtractLaneUVecI16x8","_BinaryenExtractLaneVecI32x4","_BinaryenExtractLaneVecI64x2","_BinaryenExtractLaneVecF32x4","_BinaryenExtractLaneVecF64x2","SIMDReplaceOp","_BinaryenReplaceLaneVecI8x16","_BinaryenReplaceLaneVecI16x8","_BinaryenReplaceLaneVecI32x4","_BinaryenReplaceLaneVecI64x2","_BinaryenReplaceLaneVecF32x4","_BinaryenReplaceLaneVecF64x2","SIMDShiftOp","_BinaryenShlVecI8x16","_BinaryenShrSVecI8x16","_BinaryenShrUVecI8x16","_BinaryenShlVecI16x8","_BinaryenShrSVecI16x8","_BinaryenShrUVecI16x8","_BinaryenShlVecI32x4","_BinaryenShrSVecI32x4","_BinaryenShrUVecI32x4","_BinaryenShlVecI64x2","_BinaryenShrSVecI64x2","_BinaryenShrUVecI64x2","MemorySegment","buffer","offset","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","_BinaryenModuleCreate","lit","_BinaryenSizeofLiteral","createFrom","cArr","allocU8Array","_BinaryenModuleRead","free","changetype","addFunctionType","result","paramTypes","cStr","allocStringCached","allocI32Array","_BinaryenAddFunctionType","getFunctionTypeBySignature","_BinaryenGetFunctionTypeBySignature","removeFunctionType","_BinaryenRemoveFunctionType","createI32","out","_BinaryenLiteralInt32","_BinaryenConst","createI64","valueLow","valueHigh","_BinaryenLiteralInt64","createF32","_BinaryenLiteralFloat32","createF64","_BinaryenLiteralFloat64","createV128","bytes","store","_BinaryenLiteralVec128","createUnary","op","expr","_BinaryenUnary","createBinary","left","right","_BinaryenBinary","createHost","operands","allocPtrArray","_BinaryenHost","createGetLocal","_BinaryenGetLocal","createTeeLocal","_BinaryenTeeLocal","createGetGlobal","_BinaryenGetGlobal","createLoad","signed","ptr","align","_BinaryenLoad","createStore","_BinaryenStore","createAtomicLoad","_BinaryenAtomicLoad","createAtomicStore","_BinaryenAtomicStore","createAtomicRMW","_BinaryenAtomicRMW","createAtomicCmpxchg","expected","replacement","_BinaryenAtomicCmpxchg","createAtomicWait","timeout","expectedType","_BinaryenAtomicWait","createAtomicWake","wakeCount","_BinaryenAtomicWake","createSetLocal","_BinaryenSetLocal","createSetGlobal","_BinaryenSetGlobal","createBlock","label","children","None","_BinaryenBlock","createBreak","condition","_BinaryenBreak","createDrop","expression","_BinaryenDrop","createLoop","_BinaryenLoop","createIf","ifTrue","ifFalse","_BinaryenIf","createNop","_BinaryenNop","createReturn","_BinaryenReturn","createSelect","_BinaryenSelect","createSwitch","names","defaultName","numNames","strs","_BinaryenSwitch","createCall","_BinaryenCall","createCallIndirect","typeName","_BinaryenCallIndirect","createUnreachable","_BinaryenUnreachable","createMemoryCopy","size","_BinaryenMemoryCopy","createMemoryFill","_BinaryenMemoryFill","createSIMDExtract","vec","idx","_BinaryenSIMDExtract","createSIMDReplace","_BinaryenSIMDReplace","createSIMDShuffle","vec1","vec2","mask","_BinaryenSIMDShuffle","createSIMDBitselect","cond","_BinaryenSIMDBitselect","createSIMDShift","shift","_BinaryenSIMDShift","addGlobal","mutable","_BinaryenAddGlobal","removeGlobal","_BinaryenRemoveGlobal","addFunction","varTypes","_BinaryenAddFunction","removeFunction","_BinaryenRemoveFunction","addTemporaryFunction","tempName","typeRef","removeTemporaryFunction","addFunctionExport","externalName","cStr1","cStr2","_BinaryenAddFunctionExport","addTableExport","_BinaryenAddTableExport","addMemoryExport","_BinaryenAddMemoryExport","addGlobalExport","_BinaryenAddGlobalExport","removeExport","_BinaryenRemoveExport","addFunctionImport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","addTableImport","_BinaryenAddTableImport","addMemoryImport","shared","_BinaryenAddMemoryImport","addGlobalImport","globalType","_BinaryenAddGlobalImport","setMemory","initial","maximum","segments","segs","offs","sizs","Target","WASM64","i64_low","i64_high","cArr1","cArr2","cArr3","_BinaryenSetMemory","setFunctionTable","funcs","_BinaryenSetFunctionTable","setStart","func","_BinaryenSetStart","getOptimizeLevel","_BinaryenGetOptimizeLevel","setOptimizeLevel","level","_BinaryenSetOptimizeLevel","getShrinkLevel","_BinaryenGetShrinkLevel","setShrinkLevel","_BinaryenSetShrinkLevel","setDebugInfo","on","_BinaryenSetDebugInfo","optimize","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","runPasses","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","precomputeExpression","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","_BinaryenFunctionGetBody","validate","_BinaryenModuleValidate","interpret","_BinaryenModuleInterpret","toBinary","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","Uint8Array","load","readBuffer","readString","toText","toAsmjs","str","dispose","_BinaryenModuleDispose","createRelooper","Relooper","cloneExpression","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","_BinaryenExpressionGetId","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","GetLocal","_BinaryenGetLocalGetIndex","GetGlobal","globalName","_BinaryenGetGlobalGetName","Load","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","addDebugInfoFile","_BinaryenModuleAddDebugInfoFileName","getDebugInfoFile","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","UNLIMITED_MEMORY","getExpressionId","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getConstValueF32","getConstValueF64","getGetLocalIndex","getSetLocalIndex","_BinaryenSetLocalGetIndex","getSetLocalValue","_BinaryenSetLocalGetValue","isTeeLocal","_BinaryenSetLocalIsTee","getGetGlobalName","getBinaryOp","getBinaryLeft","getBinaryRight","getUnaryOp","getUnaryValue","getLoadBytes","getLoadOffset","getLoadPtr","isLoadSigned","getStoreBytes","_BinaryenStoreGetBytes","getStoreOffset","_BinaryenStoreGetOffset","getStorePtr","_BinaryenStoreGetPtr","getStoreValue","_BinaryenStoreGetValue","getBlockName","_BinaryenBlockGetName","getBlockChildCount","_BinaryenBlockGetNumChildren","getBlockChild","_BinaryenBlockGetChild","getIfCondition","_BinaryenIfGetCondition","getIfTrue","_BinaryenIfGetIfTrue","getIfFalse","_BinaryenIfGetIfFalse","getLoopName","_BinaryenLoopGetName","getLoopBody","_BinaryenLoopGetBody","getBreakName","_BinaryenBreakGetName","getBreakCondition","_BinaryenBreakGetCondition","getSelectThen","_BinaryenSelectGetIfTrue","getSelectElse","_BinaryenSelectGetIfFalse","getSelectCondition","_BinaryenSelectGetCondition","getDropValue","_BinaryenDropGetValue","getReturnValue","_BinaryenReturnGetValue","getCallTarget","_BinaryenCallGetTarget","getHostOp","_BinaryenHostGetOp","getHostOperandCount","_BinaryenHostGetNumOperands","getHostOperand","_BinaryenHostGetOperand","getHostName","_BinaryenHostGetNameOperand","getFunctionBody","getFunctionName","_BinaryenFunctionGetName","getFunctionParamCount","_BinaryenFunctionGetNumParams","getFunctionParamType","_BinaryenFunctionGetParam","getFunctionResultType","_BinaryenFunctionGetResult","relooper","_RelooperCreate","addBlock","_RelooperAddBlock","addBranch","from","to","_RelooperAddBranch","addBlockWithSwitch","_RelooperAddBlockWithSwitch","addBranchForSwitch","indexes","_RelooperAddBranchForSwitch","renderAndDispose","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","needsExplicitUnreachable","Unreachable","Return","Break","Block","numChildren","tokenizer_1","Token","nodeIsConstantValue","NULL","TRUE","FALSE","nodeIsCallable","IDENTIFIER","ASSERTION","CALL","ELEMENTACCESS","PARENTHESIZED","PROPERTYACCESS","SUPER","nodeIsGenericCallable","createTypeName","TypeName","isNullable","TypeNode","createTypeParameter","defaultType","elem","TypeParameterNode","createParameter","ParameterNode","parameterKind","parameters","explicitThisType","sig","SignatureNode","createDecorator","args","stmt","DecoratorNode","createComment","node","CommentNode","commentKind","isQuoted","IdentifierExpression","symbol","createEmptyIdentifierExpression","createArrayLiteralExpression","ArrayLiteralExpression","elementExpressions","createAssertionExpression","assertionKind","toType","AssertionExpression","createBinaryExpression","operator","BinaryExpression","createCallExpression","typeArgs","CallExpression","createClassExpression","ClassExpression","createCommaExpression","expressions","CommaExpression","createConstructorExpression","ConstructorExpression","createElementAccessExpression","ElementAccessExpression","elementExpression","createFalseExpression","FalseExpression","createFloatLiteralExpression","FloatLiteralExpression","createFunctionExpression","FunctionExpression","createInstanceOfExpression","isType","InstanceOfExpression","createIntegerLiteralExpression","IntegerLiteralExpression","createNewExpression","NewExpression","createNullExpression","NullExpression","createObjectLiteralExpression","ObjectLiteralExpression","createParenthesizedExpression","ParenthesizedExpression","createPropertyAccessExpression","PropertyAccessExpression","createRegexpLiteralExpression","pattern","RegexpLiteralExpression","patternFlags","createTernaryExpression","ifThen","ifElse","TernaryExpression","createStringLiteralExpression","StringLiteralExpression","createSuperExpression","SuperExpression","createThisExpression","ThisExpression","createTrueExpression","TrueExpression","createUnaryPostfixExpression","operand","UnaryPostfixExpression","createUnaryPrefixExpression","UnaryPrefixExpression","createBlockStatement","BlockStatement","createBreakStatement","BreakStatement","createClassDeclaration","ClassDeclaration","createContinueStatement","ContinueStatement","createDoStatement","DoStatement","createEmptyStatement","EmptyStatement","createEnumDeclaration","EnumDeclaration","createEnumValueDeclaration","EnumValueDeclaration","createExportStatement","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","mangleInternalPath","createExportImportStatement","ExportImportStatement","createExportMember","ExportMember","createExpressionStatement","ExpressionStatement","createIfStatement","IfStatement","createImportStatement","decls","ImportStatement","createImportStatementWithWildcard","createImportDeclaration","ImportDeclaration","createInterfaceDeclaration","InterfaceDeclaration","createFieldDeclaration","FieldDeclaration","createForStatement","incrementor","ForStatement","FunctionDeclaration","createIndexSignatureDeclaration","keyType","valueType","IndexSignatureDeclaration","createMethodDeclaration","MethodDeclaration","NamespaceDeclaration","createReturnStatement","ReturnStatement","createSwitchStatement","cases","SwitchStatement","createSwitchCase","SwitchCase","createThrowStatement","ThrowStatement","createTryStatement","catchVariable","catchStatements","finallyStatements","TryStatement","TypeDeclaration","createVariableStatement","VariableStatement","VariableDeclaration","createVoidStatement","VoidStatement","createWhileStatement","WhileStatement","CommonTypeNode","TYPENAME","TYPE","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","SIGNATURE","nameStr","propStr","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","LiteralExpression","ARRAY","AssertionKind","BINARY","numArguments","COMMA","FLOAT","INSTANCEOF","INTEGER","NEW","OBJECT","REGEXP","TERNARY","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","Statement","SOURCE","tokenizer","exportPaths","sourceKind","pos","lastIndexOf","simplePath","ENTRY","DeclarationStatement","VariableLikeDeclarationStatement","BLOCK","BREAK","CONTINUE","DO","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPRESSION","FOR","ArrowKind","clone","IF","IMPORTDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","VARIABLEDECLARATION","VOID","WHILE","isTypeOmitted","program_1","module_1","TypeKind","TypeFlags","v128_zero","cachedNullableType","ceil","classReference","nonNullableType","isize64","isize32","usize64","usize32","isManaged","computeSmallIntegerShift","targetType","computeSmallIntegerMask","classType","asNullable","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isStrictlyAssignableTo","commonDenominator","signednessIsImportant","kindOnly","toNativeType","toNativeZero","toNativeOne","toNativeNegOne","typesToNativeTypes","types","numTypes","typesToString","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","asFunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","includeThis","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","token","operatorTokenToString","DOT_DOT_DOT","LESSTHAN","GREATERTHAN","LESSTHAN_EQUALS","GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","ASTERISK_ASTERISK","ASTERISK","SLASH","PERCENT","PLUS_PLUS","MINUS_MINUS","LESSTHAN_LESSTHAN","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN","AMPERSAND","BAR","CARET","EXCLAMATION","TILDE","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","PLUS_EQUALS","MINUS_EQUALS","ASTERISK_EQUALS","ASTERISK_ASTERISK_EQUALS","SLASH_EQUALS","PERCENT_EQUALS","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","AMPERSAND_EQUALS","BAR_EQUALS","CARET_EQUALS","a","b","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","peek","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skipIdentifier","skip","mark","state","reusableState","State","discard","reset","readIdentifier","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","readRegexpPattern","escaped","Unterminated_regular_expression_literal","readRegexpFlags","Invalid_regular_expression_flags","readInteger","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readFloat","readDecimalFloat","parseFloat","readHexFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","finish","g","e","window","ReportMode","currentThisExpression","currentElementExpression","resolveType","context","reportMode","REPORT","parameterNodes","parameterNode","REST","parameterTypeNode","Type_expected","returnTypeNode","typeNode","typeArgumentNodes","possiblyPlaceholder","Type_0_is_not_generic","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","Expected_0_type_arguments_but_got_1","typeArgument","resolveTypeArguments","Cannot_find_name_0","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","resolveIdentifier","ensureResolvedLazyGlobal","resolvePropertyAccessExpression","propertyAccess","contextualType","targetExpression","resolveExpression","propertyName","indexedGet","Index_signature_is_missing_in_type_0","resolveElementAccessExpression","elementAccess","determineIntegerLiteralType","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","resolveAssertionExpression","resolveUnaryPrefixExpression","resolveUnaryPostfixExpression","resolveBinaryExpression","resolveThisExpression","resolveSuperExpression","actualFunction","resolveLiteralExpression","resolveCallExpression","NONNULL","i64_sub","i64_zero","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","literalType","resolveFunctionInclTypeArguments","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","actualParent","resolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","signatureParameters","numSignatureParameters","parameterDeclaration","reportNode","resolvedTypeArguments","numTypeParameters","baseClass","nameInclTypeParamters","baseMembers","baseMembers_1","baseMembers_1_1","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","atEnd","fieldInstance","boundPrototype","propertyInstance","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","builtins_1","Options","WASM32","importMemory","sharedMemory","importTable","features","feature","Feature","ConversionKind","WrapMode","mangleImportName_moduleName","mangleImportName_elementName","CompilerSymbols","Compiler","currentInlineFunctions","currentEnum","currentType","memorySegments","stringSegments","functionTable","argcVar","argcSet","needsIterateRoots","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","max","compile","startFunctionInstance","startFunctionBody","currentFlow","currentBody","BuiltinSymbols","HEAP_BASE","files","compileFile","compileExports","funcRef","ensureFunctionType","i64_align","isSharedMemory","i64_shr_u","makeModuleExports","compileIterateRoots","members_1","members_1_1","makeModuleExport","prefix","instanceName","fullName","setter","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","nativeType","nativeSizeType","getterName","setterName","subPrefix","compileElement","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","element_1","exportsStar_1","exportsStar_1_1","compileFileByPath","normalizedPathWithoutExtension","pathWithIndex","previousBody","previousFlow","compileTopLevelStatement","numLocals","initExpr","initializerNode","resolvedType","compileExpressionRetainType","Type_0_is_not_assignable_to_type_1","isDeclaredConstant","MODULE_IMPORT","mangleImportName","initializeInStart","compileExpression","Compiling_constant_with_non_constant_initializer_as_mutable","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","AddI32","compileFunction","resultType","compileFunctionBody","stmts","bodyNode","compileStatements","MAIN","canOverflow","started","unshift","EqzI32","thisLocalIndex","EqzI64","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","An_implementation_cannot_be_declared_in_ambient_contexts","decoratorNodes","Function_implementation_is_missing_or_not_immediately_following_the_declaration","compileClass","staticMembers","compileInterfaceDeclaration","addMemorySegment","alignment","ensureFunctionTableEntry","TRAMPOLINE","memberStatements","compileStatement","Nop","isLastStatementInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","compileVoidStatement","compileWhileStatement","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","fork","freeScopedLocals","inherit","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","continueLabel","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","pushBreakLabel","condExpr","makeIsTrueish","popBreakLabel","terminated","unset","block","repeatLabel","alwaysTrue","condPre","incrExpr","bodyStatement","bodyExpr","usesContinue","inheritConditional","breakBlock","repeatBlock","condExprPrecomp","ifTrueFlow","ifTrueExpr","ifFalseExpr","ifFalseFlow","inheritMutual","inlineReturnLabel","numCases","tempLocal","getTempLocal","tempLocalIndex","breaks","breakIndex","defaultIndex","EqI32","freeTempLocal","currentBlock","alwaysReturns","alwaysReturnsWrapped","alwaysThrows","alwaysAllocates","isLast","nextLabel","count","compileAbort","numDeclarations","initializers","isInlined","parentFunction","scopedLocals","_const_declarations_must_be_initialized","addScopedLocal","compileAssignmentWithValue","setLocalWrapped","compileInlineConstant","retainType","conversionKind","wrapMode","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compileParenthesizedExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","convertExpression","ensureSmallIntegerWrap","fromType","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","NeF32","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","NeF64","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","NeI64","WrapI64","ExtendI32","ExtendU32","PREFIX","leftExpr","leftType","rightExpr","rightType","commonType","compound","compileBinaryOverload","Operator_0_cannot_be_applied_to_types_1_and_2","LtI32","LtI64","LtU32","LtU64","LtF32","LtF64","GtI32","GtI64","GtU32","GtU64","GtF32","GtF64","LeI32","LeI64","LeU32","LeU64","LeF32","LeF64","GeI32","GeI64","GeU32","GeU64","GeF32","GeF64","EqI64","EqF32","EqF64","AllTrueVecI8x16","EqVecI8x16","NeI32","AnyTrueVecI8x16","NeVecI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI32","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU32","DivU64","DivF32","DivF64","RemI32","RemI64","RemU32","RemU64","intType","ShlI32","ShlI64","The_0_operator_cannot_be_applied_to_type_1","ShrI32","ShrI64","ShrU32","ShrU64","AndI32","AndI64","OrI32","OrI64","XorI32","XorI64","getAndFreeTempLocal","compileUnaryOverload","valueExpr","argumentExpressions","thisArg","compileCallDirect","valueExpression","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","isUnchecked","indexedSet","Index_signature_in_type_0_only_permits_reading","valueWithCorrectType","tee","thisExpression","thisExpr","flow_2","nativeReturnType","thisExpr_1","elementExpr","tempLocalTarget","tempLocalElement","flow_3","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","inferredTypes","argumentNodes","argumentExprs","templateName","argumentExpression","inferredType","concreteType","compileCallIndirect","compileCall","checkCallSignature","hasThis","minimum","Expected_at_least_0_arguments_but_got_1","compileCallInlinePrechecked","pop","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","createInline","baseInstance","addScopedAlias","paramExpr","argumentLocal","original","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","commonReturnType","commonThisType","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","argc","Optional_parameter_must_have_an_initializer","ensureArgcVar","setargc","numOperands","isCallImport","allOptionalsAreConstant","makeCallIndirect","numExpressions","exprs","contextualSignature","numPresentParameters","thisTypeNode","maybeCompileEnclosingSource","retainConstantType","flow_4","actualFunction_1","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","localType","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","actualType","implicitNegate","compileArrayLiteral","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","stringValue","stringSegment","headerSize","totalSize","buf","writeI32","ensureGCHook","writeI16","stringOffset","ensureStaticArray","elementType","usizeTypeSize","bufferInstance","bufferHeaderSize","bufferTotalSize","clz","writeI8","writeI64","writeF32","writeF64","bufferOffset","arrayInstance","arrayHeaderSize","arrayOffset","buffer_offset","length_offset","isConst","compiledValues","constantValues","nativeElementType","arrayType","nativeArrayType","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature","compileInstantiate","baseCtor","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","compileGetter","ifThenFlow","ifThenExpr","ifThenType","ifElseFlow","ifElseExpr","ifElseType","getValue","calcValue","setValue","NegF32","NegF64","makeIsFalseish","ExtendI8ToI32","ExtendI16ToI32","allocateInstance","nativeFieldType","FlowFlags","wrappedLocals","wrappedLocalsExt","inlineFunction","branch","slice","wrapped","temps","scopedLocal","existingLocal","SCOPED","scopedAlias","scope","isLocalWrapped","bitsetIs","ext","bitsetSet","id","stack","other","i64_and","leftExt","rightExt","thisExt","minLength","min","canConversionOverflow","SetLocal","global_1","ClzI32","CtzI32","PopcntI32","MIN_VALUE","last","If","Select","Call","Decompiler","functionId","decompile","decompiler","decompileFunction","nativeTypeToType","decompileExpression","nested","Loop","Switch","CallIndirect","SetGlobal","Store","i64_to_string","AbsF32","CeilF32","FloorF32","TruncF32","NearestF32","SqrtF32","ClzI64","CtzI64","PopcntI64","AbsF64","CeilF64","FloorF64","TruncF64","NearestF64","SqrtF64","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","RotlI32","RotrI32","RotlI64","RotrI64","CopysignF32","MinF32","MaxF32","CopysignF64","MinF64","MaxF64","Drop","Host","CurrentMemory","GrowMemory","AtomicCmpxchg","AtomicRMW","AtomicWait","AtomicWake","Auto","ExportsWalker","includePrivate","todo","seen","Set","walk","visitElement","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","visitNamespace","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","visitInterface","TSDBuilder","numMembers","members_2","members_2_1","isInterface","Parser","backlog","seenlog","donelog","tryParseSignatureIsSignature","parseParametersThis","parseFile","indexOf","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","parseEnum","parseVariable","parseFunction","parseStatement","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","nextFile","clear","parseType","acceptParenthesized","suppressErrors","isNullableSignature","tryParseSignature","Unexpected_token","innerType","Identifier_expected","nullable","parameter","bracketStart","bracketRange","isSignature","A_rest_parameter_cannot_be_optional","OPTIONAL","param","parseArguments","parseVariableDeclaration","parentFlags","parentDecorators","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","parseReturn","parseTypeParameters","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","parseParameters","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","signatureStart","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","parseFunctionExpression","parseFunctionExpressionCommon","Interface_declaration_cannot_have_implements_clause","parseClassMember","parseClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","setEnd","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","parseExportMember","asIdentifier","skipFrom","parseImportDeclaration","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","elseStatement","case_","parseSwitchCase","_case_or_default_expected","parseExpressionStart","precedence","determinePrecedenceStart","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","again","startPos_1","_super_must_be_followed_by_an_argument_list_or_member_access","regexpPattern","Expression_expected","tryParseTypeArgumentsBeforeArguments","nextPrecedence","maybeParseCallExpression","determinePrecedence","commaExprs","isRightAssociative","joinPropertyCall","callee","inner","skipBlock","depth","Precedence","binaryen","wrapModule","emitStackIR","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","Float64Array","Uint32Array","UnreachableError","captureStackTrace","AssertionError","defineProperties","writable","fround","EPSILON","MIN_NORMAL_VALUE","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","clz32","abs","floor","trunc","round","sqrt","y","sign","isTrueish","radix","parseInt","undefined","fromCodePoint","Number","isInteger","isArray","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","HEAP","HEAP_OFFSET","oldHeap","fill","copy","copyWithin","Float32Array","Int32Array","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","maxSafeF32","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","isNaN","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","equals","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","res","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","compiler","isAsm","evaluateConstantType","isFloat","isSigned","isReference","isString","isArrayLike","isFunction","isDefined","checkTypeAbsent","checkArgsRequired","SWALLOW","isConstant","sizeof","checkTypeRequired","alignof","alignLog2","ctz","checkArgsOptional","typeArgumentsRange","Type_0_has_no_property_1","popcnt","checkTypeOptional","rotl","rotr","tempLocal1","tempLocalIndex2","tempLocalIndex1","wasm64","tempLocal0","copysign","nearest","reinterpret","outType","immOffset","evaluateImmediateOffset","immAlign","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","inType","atomic_load","atomic_store","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","Add","Sub","And","Or","Xor","Xchg","atomic_cmpxchg","atomic_wait","atomic_notify","select","unreachable","memory_size","memory_grow","memory_copy","memory_fill","alreadyUnchecked","call_indirect","arg0Type","operandExprs","nativeParamTypes","operandType","instantiate","User_defined_0","Expression_must_be_a_compile_time_constant","off","v128_splat","SplatVecI8x16","SplatVecI16x8","SplatVecI32x4","SplatVecI64x2","SplatVecF32x4","SplatVecF64x2","v128_extract_lane","ExtractLaneSVecI8x16","ExtractLaneUVecI8x16","ExtractLaneSVecI16x8","ExtractLaneUVecI16x8","ExtractLaneVecI32x4","ExtractLaneVecI64x2","ExtractLaneVecF32x4","ExtractLaneVecF64x2","maxIdx","v128_replace_lane","ReplaceLaneVecI8x16","ReplaceLaneVecI16x8","ReplaceLaneVecI32x4","ReplaceLaneVecI64x2","ReplaceLaneVecF32x4","ReplaceLaneVecF64x2","v128_shuffle","laneWidth","laneCount","argN","off8","idx8","v128_add","v128_sub","v128_mul","v128_div","v128_add_saturate","v128_sub_saturate","v128_min","v128_max","v128_eq","v128_ne","v128_lt","v128_le","v128_gt","v128_ge","AddVecI8x16","AddVecI16x8","AddVecI32x4","AddVecI64x2","AddVecF32x4","AddVecF64x2","SubVecI8x16","SubVecI16x8","SubVecI32x4","SubVecI64x2","SubVecF32x4","SubVecF64x2","MulVecI8x16","MulVecI16x8","MulVecI32x4","MulVecF32x4","MulVecF64x2","DivVecF32x4","DivVecF64x2","AddSatSVecI8x16","AddSatUVecI8x16","AddSatSVecI16x8","AddSatUVecI16x8","SubSatSVecI8x16","SubSatUVecI8x16","SubSatSVecI16x8","SubSatUVecI16x8","MinVecF32x4","MinVecF64x2","MaxVecF32x4","MaxVecF64x2","EqVecI16x8","EqVecI32x4","EqVecF32x4","EqVecF64x2","NeVecI16x8","NeVecI32x4","NeVecF32x4","NeVecF64x2","LtSVecI8x16","LtUVecI8x16","LtSVecI16x8","LtUVecI16x8","LtSVecI32x4","LtUVecI32x4","LtVecF32x4","LtVecF64x2","LeSVecI8x16","LeUVecI8x16","LeSVecI16x8","LeUVecI16x8","LeSVecI32x4","LeUVecI32x4","LeVecF32x4","LeVecF64x2","GtSVecI8x16","GtUVecI8x16","GtSVecI16x8","GtUVecI16x8","GtSVecI32x4","GtUVecI32x4","GtVecF32x4","GtVecF64x2","GeSVecI8x16","GeUVecI8x16","GeSVecI16x8","GeUVecI16x8","GeSVecI32x4","GeUVecI32x4","GeVecF32x4","GeVecF64x2","v128_neg","v128_abs","v128_sqrt","v128_convert","v128_trunc","NegVecI8x16","NegVecI16x8","NegVecI32x4","NegVecI64x2","NegVecF32x4","NegVecF64x2","AbsVecF32x4","AbsVecF64x2","SqrtVecF32x4","SqrtVecF64x2","ConvertSVecI32x4ToVecF32x4","ConvertUVecI32x4ToVecF32x4","ConvertSVecI64x2ToVecF64x2","ConvertUVecI64x2ToVecF64x2","TruncSatSVecF32x4ToVecI32x4","TruncSatUVecF32x4ToVecI32x4","TruncSatSVecF64x2ToVecI64x2","TruncSatUVecF64x2ToVecI64x2","v128_shl","v128_shr","ShlVecI8x16","ShlVecI16x8","ShlVecI32x4","ShlVecI64x2","ShrSVecI8x16","ShrUVecI8x16","ShrSVecI16x8","ShrUVecI16x8","ShrSVecI32x4","ShrUVecI32x4","ShrSVecI64x2","ShrUVecI64x2","v128_and","v128_or","v128_xor","AndVec128","OrVec128","XorVec128","v128_not","NotVec128","v128_bitselect","v128_any_true","v128_all_true","AnyTrueVecI16x8","AnyTrueVecI32x4","AnyTrueVecI64x2","AllTrueVecI16x8","AllTrueVecI32x4","AllTrueVecI64x2","iterateRoots","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_u_xor","i32_atomic_rmw16_u_xor","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","i32_notify","i64_notify","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_s_f32x4_sat","i32x4_trunc_u_f32x4_sat","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_s_f64x2_sat","i64x2_trunc_u_f64x2_sat","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_s_i32x4","f32x4_convert_u_i32x4","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_s_i64x2","f64x2_convert_u_i64x2","v8x16_shuffle","tryDeferASM","messageArg","filenameArg","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","existingIndex","isDeclaredInLibrary","gcPrototype","gcInstance","nativeSizeSize","funcName","map","isSet","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","makeArray","cloned","makeSet","original_1","original_1_1","v","overrides","original_2","original_2_1","overrides_1","overrides_1_1","overrides_2","overrides_2_1","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","readI32","readI64","readI8","readI16","readF32","readF64","valueI64","decompiler_1","definitions_1","formatDiagnostic","parser_1","parser","nextDiagnostic","isInfo","isWarning","isError","createOptions","setTarget","setNoAssert","setImportMemory","setSharedMemory","setImportTable","setSourceMap","setMemoryBase","setGlobalAlias","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBAL","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","enableFeature","setOptimizeLevelHints","optimizeLevel","shrinkLevel","finishParsing","compileProgram","decompileModule","buildIDL","buildTSD"],"mappings":"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M,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAA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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__19__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 16);\n","/**\r\n * Common constants.\r\n * @module common\r\n *//***/\r\n\r\n/** Indicates traits of a {@link Node} or {@link Element}. */\r\nexport enum CommonFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n\r\n  // Basic modifiers\r\n\r\n  /** Has an `import` modifier. */\r\n  IMPORT = 1 << 0,\r\n  /** Has an `export` modifier. */\r\n  EXPORT = 1 << 1,\r\n  /** Has a `declare` modifier. */\r\n  DECLARE = 1 << 2,\r\n  /** Has a `const` modifier. */\r\n  CONST = 1 << 3,\r\n  /** Has a `let` modifier. */\r\n  LET = 1 << 4,\r\n  /** Has a `static` modifier. */\r\n  STATIC = 1 << 5,\r\n  /** Has a `readonly` modifier. */\r\n  READONLY = 1 << 6,\r\n  /** Has an `abstract` modifier. */\r\n  ABSTRACT = 1 << 7,\r\n  /** Has a `public` modifier. */\r\n  PUBLIC = 1 << 8,\r\n  /** Has a `private` modifier. */\r\n  PRIVATE = 1 << 9,\r\n  /** Has a `protected` modifier. */\r\n  PROTECTED = 1 << 10,\r\n  /** Has a `get` modifier. */\r\n  GET = 1 << 11,\r\n  /** Has a `set` modifier. */\r\n  SET = 1 << 12,\r\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\r\n  DEFINITE_ASSIGNMENT = 1 << 13,\r\n\r\n  // Extended modifiers usually derived from basic modifiers\r\n\r\n  /** Is ambient, that is either declared or nested in a declared element. */\r\n  AMBIENT = 1 << 14,\r\n  /** Is generic. */\r\n  GENERIC = 1 << 15,\r\n  /** Is part of a generic context. */\r\n  GENERIC_CONTEXT = 1 << 16,\r\n  /** Is an instance member. */\r\n  INSTANCE = 1 << 17,\r\n  /** Is a constructor. */\r\n  CONSTRUCTOR = 1 << 18,\r\n  /** Is a module export. */\r\n  MODULE_EXPORT = 1 << 19,\r\n  /** Is a module import. */\r\n  MODULE_IMPORT = 1 << 20,\r\n\r\n  // Compilation states\r\n\r\n  /** Is resolved. */\r\n  RESOLVED = 1 << 21,\r\n  /** Is compiled. */\r\n  COMPILED = 1 << 22,\r\n  /** Has a constant value and is therefore inlined. */\r\n  INLINED = 1 << 23,\r\n  /** Is scoped. */\r\n  SCOPED = 1 << 24,\r\n  /** Is a trampoline. */\r\n  TRAMPOLINE = 1 << 25,\r\n  /** Is a virtual method. */\r\n  VIRTUAL = 1 << 26,\r\n  /** Is the main function. */\r\n  MAIN = 1 << 27,\r\n\r\n  // Other\r\n\r\n  QUOTED = 1 << 28\r\n}\r\n\r\n/** Path delimiter inserted between file system levels. */\r\nexport const PATH_DELIMITER = \"/\";\r\n/** Substitution used to indicate the parent directory. */\r\nexport const PARENT_SUBST = \"..\";\r\n/** Function name prefix used for getters. */\r\nexport const GETTER_PREFIX = \"get:\";\r\n/** Function name prefix used for setters. */\r\nexport const SETTER_PREFIX = \"set:\";\r\n/** Delimiter used between class names and instance members. */\r\nexport const INSTANCE_DELIMITER = \"#\";\r\n/** Delimiter used between class and namespace names and static members. */\r\nexport const STATIC_DELIMITER = \".\";\r\n/** Delimiter used between a function and its inner elements. */\r\nexport const INNER_DELIMITER = \"~\";\r\n/** Substitution used to indicate a library directory. */\r\nexport const LIBRARY_SUBST = \"~lib\";\r\n/** Library directory prefix. */\r\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\r\n/** Path index suffix. */\r\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\r\n\r\n/** Common compiler symbols. */\r\nexport namespace CommonSymbols {\r\n  // special\r\n  export const EMPTY = \"\";\r\n  // types\r\n  export const i8 = \"i8\";\r\n  export const i16 = \"i16\";\r\n  export const i32 = \"i32\";\r\n  export const i64 = \"i64\";\r\n  export const isize = \"isize\";\r\n  export const u8 = \"u8\";\r\n  export const u16 = \"u16\";\r\n  export const u32 = \"u32\";\r\n  export const u64 = \"u64\";\r\n  export const usize = \"usize\";\r\n  export const bool = \"bool\";\r\n  export const f32 = \"f32\";\r\n  export const f64 = \"f64\";\r\n  export const v128 = \"v128\";\r\n  export const i8x16 = \"i8x16\";\r\n  export const u8x16 = \"u8x16\";\r\n  export const i16x8 = \"i16x8\";\r\n  export const u16x8 = \"u16x8\";\r\n  export const i32x4 = \"i32x4\";\r\n  export const u32x4 = \"u32x4\";\r\n  export const i64x2 = \"i64x2\";\r\n  export const u64x2 = \"u64x2\";\r\n  export const f32x4 = \"f32x4\";\r\n  export const f64x2 = \"f64x2\";\r\n  export const void_ = \"void\";\r\n  export const number = \"number\";\r\n  export const boolean = \"boolean\";\r\n  export const string = \"string\";\r\n  export const native = \"native\";\r\n  // aliases\r\n  export const null_ = \"null\";\r\n  export const true_ = \"true\";\r\n  export const false_ = \"false\";\r\n  // objects\r\n  export const this_ = \"this\";\r\n  export const super_ = \"super\";\r\n  export const constructor = \"constructor\";\r\n}\r\n\r\n/** Common standard library symbols. */\r\nexport namespace LibrarySymbols {\r\n  // constants\r\n  export const ASC_TARGET = \"ASC_TARGET\";\r\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\r\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\r\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\r\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\r\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\r\n  export const ASC_FEATURE_MUTABLE_GLOBAL = \"ASC_FEATURE_MUTABLE_GLOBAL\";\r\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\r\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\r\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\r\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\r\n  // classes\r\n  export const I8 = \"I8\";\r\n  export const I16 = \"I16\";\r\n  export const I32 = \"I32\";\r\n  export const I64 = \"I64\";\r\n  export const Isize = \"Isize\";\r\n  export const U8 = \"U8\";\r\n  export const U16 = \"U16\";\r\n  export const U32 = \"U32\";\r\n  export const U64 = \"U64\";\r\n  export const Usize = \"Usize\";\r\n  export const Bool = \"Bool\";\r\n  export const F32 = \"F32\";\r\n  export const F64 = \"F64\";\r\n  export const V128 = \"V128\";\r\n  export const String = \"String\";\r\n  export const Array = \"Array\";\r\n  export const ArrayBuffer = \"ArrayBuffer\";\r\n  export const Math = \"Math\";\r\n  export const Mathf = \"Mathf\";\r\n  // runtime\r\n  export const memory = \"memory\";\r\n  export const allocate = \"allocate\";\r\n  export const abort = \"abort\";\r\n  export const main = \"main\";\r\n  // other\r\n  export const length = \"length\";\r\n  export const byteLength = \"byteLength\";\r\n  export const pow = \"pow\";\r\n  export const mod = \"mod\";\r\n}\r\n","/**\r\n * Various compiler utilities.\r\n * @module util\r\n * @preferred\r\n *//***/\r\n\r\nexport * from \"./bitset\";\r\nexport * from \"./charcode\";\r\nexport * from \"./collections\";\r\nexport * from \"./path\";\r\nexport * from \"./text\";\r\nexport * from \"./binary\";\r\n\r\n/** Tests if `x` is a power of two. */\r\nexport function isPowerOf2(x: i32): bool {\r\n  return x != 0 && (x & (x - 1)) == 0;\r\n}\r\n","/**\r\n * Shared diagnostic handling inherited by the parser and the compiler.\r\n * @module diagnostics\r\n * @preferred\r\n *//***/\r\n\r\nimport {\r\n  Range\r\n} from \"./ast\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\nimport {\r\n  isLineBreak\r\n} from \"./util\";\r\n\r\nexport {\r\n  DiagnosticCode,\r\n  diagnosticCodeToString\r\n} from \"./diagnosticMessages.generated\";\r\n\r\n/** Indicates the category of a {@link DiagnosticMessage}. */\r\nexport enum DiagnosticCategory {\r\n  /** Informatory message. */\r\n  INFO,\r\n  /** Warning message. */\r\n  WARNING,\r\n  /** Error message. */\r\n  ERROR\r\n}\r\n\r\n/** Returns the string representation of the specified diagnostic category. */\r\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return \"INFO\";\r\n    case DiagnosticCategory.WARNING: return \"WARNING\";\r\n    case DiagnosticCategory.ERROR: return \"ERROR\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** ANSI escape sequence for blue foreground. */\r\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\r\n/** ANSI escape sequence for yellow foreground. */\r\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\r\n/** ANSI escape sequence for red foreground. */\r\nexport const COLOR_RED: string = \"\\u001b[91m\";\r\n/** ANSI escape sequence to reset the foreground color. */\r\nexport const COLOR_RESET: string = \"\\u001b[0m\";\r\n\r\n/** Returns the ANSI escape sequence for the specified category. */\r\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\r\n  switch (category) {\r\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\r\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\r\n    case DiagnosticCategory.ERROR: return COLOR_RED;\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\n/** Represents a diagnostic message. */\r\nexport class DiagnosticMessage {\r\n\r\n  /** Message code. */\r\n  code: i32;\r\n  /** Message category. */\r\n  category: DiagnosticCategory;\r\n  /** Message text. */\r\n  message: string;\r\n  /** Respective source range, if any. */\r\n  range: Range | null = null;\r\n  /** Related range, if any. */\r\n  relatedRange: Range | null = null;\r\n\r\n  /** Constructs a new diagnostic message. */\r\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\r\n    this.code = code;\r\n    this.category = category;\r\n    this.message = message;\r\n  }\r\n\r\n  /** Creates a new diagnostic message of the specified category. */\r\n  static create(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): DiagnosticMessage {\r\n    var message = diagnosticCodeToString(code);\r\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\r\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\r\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\r\n    return new DiagnosticMessage(code, category, message);\r\n  }\r\n\r\n  /** Creates a new informatory diagnostic message. */\r\n  static createInfo(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new warning diagnostic message. */\r\n  static createWarning(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\r\n  }\r\n\r\n  /** Creates a new error diagnostic message. */\r\n  static createError(\r\n    code: DiagnosticCode,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null\r\n  ): DiagnosticMessage {\r\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\r\n  }\r\n\r\n  /** Adds a source range to this message. */\r\n  withRange(range: Range): this {\r\n    this.range = range;\r\n    return this;\r\n  }\r\n\r\n  /** Adds a related source range to this message. */\r\n  withRelatedRange(range: Range): this {\r\n    this.relatedRange = range;\r\n    return this;\r\n  }\r\n\r\n  /** Converts this message to a string. */\r\n  toString(): string {\r\n    if (this.range) {\r\n      return (\r\n        diagnosticCategoryToString(this.category) +\r\n        \" \" +\r\n        this.code.toString(10) +\r\n        \": \\\"\" +\r\n        this.message +\r\n        \"\\\" in \" +\r\n        this.range.source.normalizedPath +\r\n        \":\" +\r\n        this.range.line.toString(10) +\r\n        \":\" +\r\n        this.range.column.toString(10)\r\n      );\r\n    }\r\n    return (\r\n      diagnosticCategoryToString(this.category) +\r\n      \" \" +\r\n      this.code.toString(10) +\r\n      \": \" +\r\n      this.message\r\n    );\r\n  }\r\n}\r\n\r\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\r\nexport function formatDiagnosticMessage(\r\n  message: DiagnosticMessage,\r\n  useColors: bool = false,\r\n  showContext: bool = false\r\n): string {\r\n\r\n  // general information\r\n  var sb: string[] = [];\r\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\r\n  sb.push(diagnosticCategoryToString(message.category));\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\r\n  sb.push(message.code.toString(10));\r\n  sb.push(\": \");\r\n  sb.push(message.message);\r\n\r\n  // include range information if available\r\n  if (message.range) {\r\n\r\n    // include context information if requested\r\n    let range = message.range;\r\n    if (showContext) {\r\n      sb.push(\"\\n\");\r\n      sb.push(formatDiagnosticContext(range, useColors));\r\n    }\r\n    sb.push(\"\\n\");\r\n    sb.push(\" in \");\r\n    sb.push(range.source.normalizedPath);\r\n    sb.push(\"(\");\r\n    sb.push(range.line.toString(10));\r\n    sb.push(\",\");\r\n    sb.push(range.column.toString(10));\r\n    sb.push(\")\");\r\n\r\n    let relatedRange = message.relatedRange;\r\n    if (relatedRange) {\r\n      if (showContext) {\r\n        sb.push(\"\\n\");\r\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\r\n      }\r\n      sb.push(\"\\n\");\r\n      sb.push(\" in \");\r\n      sb.push(range.source.normalizedPath);\r\n      sb.push(\"(\");\r\n      sb.push(range.line.toString(10));\r\n      sb.push(\",\");\r\n      sb.push(range.column.toString(10));\r\n      sb.push(\")\");\r\n    }\r\n  }\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\r\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\r\n  var text = range.source.text;\r\n  var len = text.length;\r\n  var start = range.start;\r\n  var end = range.end;\r\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\r\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\r\n  var sb: string[] = [\r\n    \"\\n \",\r\n    text.substring(start, end),\r\n    \"\\n \"\r\n  ];\r\n  while (start < range.start) {\r\n    sb.push(\" \");\r\n    start++;\r\n  }\r\n  if (useColors) sb.push(COLOR_RED);\r\n  if (range.start == range.end) {\r\n    sb.push(\"^\");\r\n  } else {\r\n    while (start++ < range.end) sb.push(\"~\");\r\n  }\r\n  if (useColors) sb.push(COLOR_RESET);\r\n  return sb.join(\"\");\r\n}\r\n\r\n/** Base class of all diagnostic emitters. */\r\nexport abstract class DiagnosticEmitter {\r\n\r\n  /** Diagnostic messages emitted so far. */\r\n  diagnostics: DiagnosticMessage[];\r\n\r\n  /** Initializes this diagnostic emitter. */\r\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\r\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\r\n  }\r\n\r\n  /** Emits a diagnostic message of the specified category. */\r\n  emitDiagnostic(\r\n    code: DiagnosticCode,\r\n    category: DiagnosticCategory,\r\n    range: Range,\r\n    relatedRange: Range | null,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\r\n    if (relatedRange) message.relatedRange = relatedRange;\r\n    this.diagnostics.push(message);\r\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\r\n    // console.log(<string>new Error(\"stack\").stack);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message. */\r\n  info(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an informatory diagnostic message with a related range. */\r\n  infoRelated(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    relatedRange: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message. */\r\n  warning(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits a warning diagnostic message with a related range. */\r\n  warningRelated(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    relatedRange: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message. */\r\n  error(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\r\n  }\r\n\r\n  /** Emits an error diagnostic message with a related range. */\r\n  errorRelated(\r\n    code: DiagnosticCode,\r\n    range: Range,\r\n    relatedRange: Range,\r\n    arg0: string | null = null,\r\n    arg1: string | null = null,\r\n    arg2: string | null = null\r\n  ): void {\r\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\r\n  }\r\n}\r\n","/**\r\n * AssemblyScript's intermediate representation describing a program's elements.\r\n * @module program\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  PATH_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  INSTANCE_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX,\r\n  INNER_DELIMITER,\r\n  LIBRARY_SUBST,\r\n  INDEX_SUFFIX,\r\n  CommonSymbols,\r\n  LibrarySymbols\r\n} from \"./common\";\r\n\r\nimport {\r\n  Options,\r\n  Feature\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature\r\n} from \"./types\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  Range,\r\n  DecoratorNode,\r\n  DecoratorKind,\r\n  SignatureNode,\r\n  TypeParameterNode,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  ArrowKind,\r\n\r\n  Expression,\r\n  IdentifierExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  ClassDeclaration,\r\n  DeclarationStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportMember,\r\n  ExportStatement,\r\n  FieldDeclaration,\r\n  FunctionDeclaration,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  InterfaceDeclaration,\r\n  MethodDeclaration,\r\n  NamespaceDeclaration,\r\n  TypeDeclaration,\r\n  VariableDeclaration,\r\n  VariableLikeDeclarationStatement,\r\n  VariableStatement,\r\n\r\n  decoratorNameToKind,\r\n  findDecorator\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Module,\r\n  FunctionRef\r\n} from \"./module\";\r\n\r\nimport {\r\n  CharCode\r\n} from \"./util\";\r\n\r\nimport {\r\n  Resolver\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  Flow\r\n} from \"./flow\";\r\n\r\n/** Represents a yet unresolved `import`. */\r\nclass QueuedImport {\r\n  constructor(\r\n    /** File being imported into. */\r\n    public localFile: File,\r\n    /** Identifier within the local file. */\r\n    public localIdentifier: IdentifierExpression,\r\n    /** Identifier within the other file. Is an `import *` if not set. */\r\n    public foreignIdentifier: IdentifierExpression | null,\r\n    /** Path to the other file. */\r\n    public foreignPath: string,\r\n    /** Alternative path to the other file. */\r\n    public foreignPathAlt: string\r\n  ) {}\r\n}\r\n\r\n/** Represents a yet unresolved `export`. */\r\nclass QueuedExport {\r\n  constructor(\r\n    /** Identifier within the local file. */\r\n    public localIdentifier: IdentifierExpression,\r\n    /** Identifier within the other file. */\r\n    public foreignIdentifier: IdentifierExpression,\r\n    /** Path to the other file if a re-export. */\r\n    public foreignPath: string | null,\r\n    /** Alternative path to the other file if a re-export. */\r\n    public foreignPathAlt: string | null\r\n  ) {}\r\n}\r\n\r\n/** Represents a yet unresolved `export *`. */\r\nclass QueuedExportStar {\r\n  // stored in a map with localFile as the key\r\n  constructor(\r\n    /** Path to the other file. */\r\n    public foreignPath: string,\r\n    /** Alternative path to the other file. */\r\n    public foreignPathAlt: string,\r\n    /** Reference to the path literal for reporting. */\r\n    public pathLiteral: StringLiteralExpression\r\n  ) {}\r\n}\r\n\r\n/** Represents the kind of an operator overload. */\r\nexport enum OperatorKind {\r\n  INVALID,\r\n\r\n  // indexed access\r\n  INDEXED_GET,            // a[]\r\n  INDEXED_SET,            // a[]=b\r\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\r\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\r\n\r\n  // binary\r\n  ADD,                    // a + b\r\n  SUB,                    // a - b\r\n  MUL,                    // a * b\r\n  DIV,                    // a / b\r\n  REM,                    // a % b\r\n  POW,                    // a ** b\r\n  BITWISE_AND,            // a & b\r\n  BITWISE_OR,             // a | b\r\n  BITWISE_XOR,            // a ^ b\r\n  BITWISE_SHL,            // a << b\r\n  BITWISE_SHR,            // a >> b\r\n  BITWISE_SHR_U,          // a >>> b\r\n  EQ,                     // a == b\r\n  NE,                     // a != b\r\n  GT,                     // a > b\r\n  GE,                     // a >= b\r\n  LT,                     // a < b\r\n  LE,                     // a <= b\r\n\r\n  // unary prefix\r\n  PLUS,                   // +a\r\n  MINUS,                  // -a\r\n  NOT,                    // !a\r\n  BITWISE_NOT,            // ~a\r\n  PREFIX_INC,             // ++a\r\n  PREFIX_DEC,             // --a\r\n\r\n  // unary postfix\r\n  POSTFIX_INC,            // a++\r\n  POSTFIX_DEC             // a--\r\n\r\n  // not overridable:\r\n  // IDENTITY             // a === b\r\n  // LOGICAL_AND          // a && b\r\n  // LOGICAL_OR           // a || b\r\n}\r\n\r\n/** Returns the operator kind represented by the specified decorator and string argument. */\r\nfunction operatorKindFromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\r\n  assert(arg.length);\r\n  switch (decoratorKind) {\r\n    case DecoratorKind.OPERATOR:\r\n    case DecoratorKind.OPERATOR_BINARY: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.OPENBRACKET: {\r\n          if (arg == \"[]\") return OperatorKind.INDEXED_GET;\r\n          if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\r\n          break;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\r\n          if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\r\n          break;\r\n        }\r\n        case CharCode.PLUS: {\r\n          if (arg == \"+\") return OperatorKind.ADD;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"-\") return OperatorKind.SUB;\r\n          break;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          if (arg == \"*\") return OperatorKind.MUL;\r\n          if (arg == \"**\") return OperatorKind.POW;\r\n          break;\r\n        }\r\n        case CharCode.SLASH: {\r\n          if (arg == \"/\") return OperatorKind.DIV;\r\n          break;\r\n        }\r\n        case CharCode.PERCENT: {\r\n          if (arg == \"%\") return OperatorKind.REM;\r\n          break;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          if (arg == \"&\") return OperatorKind.BITWISE_AND;\r\n          break;\r\n        }\r\n        case CharCode.BAR: {\r\n          if (arg == \"|\") return OperatorKind.BITWISE_OR;\r\n          break;\r\n        }\r\n        case CharCode.CARET: {\r\n          if (arg == \"^\") return OperatorKind.BITWISE_XOR;\r\n          break;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          if (arg == \"==\") return OperatorKind.EQ;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          if (arg == \"!=\") return OperatorKind.NE;\r\n          break;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          if (arg == \">\") return OperatorKind.GT;\r\n          if (arg == \">=\") return OperatorKind.GE;\r\n          if (arg == \">>\") return OperatorKind.BITWISE_SHR;\r\n          if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\r\n          break;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          if (arg == \"<\") return OperatorKind.LT;\r\n          if (arg == \"<=\") return OperatorKind.LE;\r\n          if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case DecoratorKind.OPERATOR_PREFIX: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.PLUS: {\r\n          if (arg == \"+\") return OperatorKind.PLUS;\r\n          if (arg == \"++\") return OperatorKind.PREFIX_INC;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"-\") return OperatorKind.MINUS;\r\n          if (arg == \"--\") return OperatorKind.PREFIX_DEC;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          if (arg == \"!\") return OperatorKind.NOT;\r\n          break;\r\n        }\r\n        case CharCode.TILDE: {\r\n          if (arg == \"~\") return OperatorKind.BITWISE_NOT;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case DecoratorKind.OPERATOR_POSTFIX: {\r\n      switch (arg.charCodeAt(0)) {\r\n        case CharCode.PLUS: {\r\n          if (arg == \"++\") return OperatorKind.POSTFIX_INC;\r\n          break;\r\n        }\r\n        case CharCode.MINUS: {\r\n          if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return OperatorKind.INVALID;\r\n}\r\n\r\n/** Represents an AssemblyScript program. */\r\nexport class Program extends DiagnosticEmitter {\r\n\r\n  /** Resolver instance. */\r\n  resolver: Resolver;\r\n  /** Array of sources. */\r\n  sources: Source[] = [];\r\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\r\n  diagnosticsOffset: i32 = 0;\r\n  /** Compiler options. */\r\n  options: Options;\r\n  /** Special native code source. */\r\n  nativeSource: Source;\r\n  /** Special native code file. */\r\n  nativeFile: File;\r\n  /** Explicitly annotated start function. */\r\n  explicitStartFunction: FunctionPrototype | null = null;\r\n\r\n  // lookup maps\r\n\r\n  /** Files by unique internal name. */\r\n  filesByName: Map<string,File> = new Map();\r\n  /** Elements by unique internal name in element space. */\r\n  elementsByName: Map<string,Element> = new Map();\r\n  /** Elements by declaration. */\r\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\r\n  /** Element instances by unique internal name. */\r\n  instancesByName: Map<string,Element> = new Map();\r\n  /** Classes backing basic types like `i32`. */\r\n  typeClasses: Map<TypeKind,Class> = new Map();\r\n\r\n  // runtime references\r\n\r\n  /** ArrayBuffer instance reference. */\r\n  arrayBufferInstance: Class | null = null;\r\n  /** Array prototype reference. */\r\n  arrayPrototype: ClassPrototype | null = null;\r\n  /** String instance reference. */\r\n  stringInstance: Class | null = null;\r\n  /** Abort function reference, if present. */\r\n  abortInstance: Function | null = null;\r\n  /** Memory allocation function. */\r\n  memoryAllocateInstance: Function | null = null;\r\n\r\n  // gc integration\r\n\r\n  /** Whether a garbage collector is present or not. */\r\n  hasGC: bool = false;\r\n  /** Garbage collector allocation function. */\r\n  gcAllocateInstance: Function | null = null;\r\n  /** Garbage collector link function called when a managed object is referenced from a parent. */\r\n  gcLinkInstance: Function | null = null;\r\n  /** Garbage collector mark function called to on reachable managed objects. */\r\n  gcMarkInstance: Function | null = null;\r\n  /** Size of a managed object header. */\r\n  gcHeaderSize: u32 = 0;\r\n  /** Offset of the GC hook. */\r\n  gcHookOffset: u32 = 0;\r\n\r\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\r\n  constructor(\r\n    /** Shared array of diagnostic messages (emitted so far). */\r\n    diagnostics: DiagnosticMessage[] | null = null\r\n  ) {\r\n    super(diagnostics);\r\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY);\r\n    this.nativeSource = nativeSource;\r\n    var nativeFile = new File(this, nativeSource);\r\n    this.nativeFile = nativeFile;\r\n    this.filesByName.set(nativeFile.internalName, nativeFile);\r\n    this.resolver = new Resolver(this);\r\n  }\r\n\r\n  /** Creates a native variable declaration. */\r\n  makeNativeVariableDeclaration(\r\n    /** The simple name of the variable */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `CONST`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): VariableDeclaration {\r\n    var range = this.nativeSource.range;\r\n    return Node.createVariableDeclaration(\r\n      Node.createIdentifierExpression(name, range),\r\n      null, null, null, flags, range\r\n    );\r\n  }\r\n\r\n  /** Creates a native type declaration. */\r\n  makeNativeTypeDeclaration(\r\n    /** The simple name of the type. */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): TypeDeclaration {\r\n    var range = this.nativeSource.range;\r\n    var identifier = Node.createIdentifierExpression(name, range);\r\n    return Node.createTypeDeclaration(\r\n      identifier,\r\n      null,\r\n      Node.createOmittedType(range),\r\n      null, flags, range\r\n    );\r\n  }\r\n\r\n  // a dummy signature for programmatically generated native functions\r\n  private nativeDummySignature: SignatureNode | null = null;\r\n\r\n  /** Creates a native function declaration. */\r\n  makeNativeFunctionDeclaration(\r\n    /** The simple name of the function. */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): FunctionDeclaration {\r\n    var range = this.nativeSource.range;\r\n    return Node.createFunctionDeclaration(\r\n      Node.createIdentifierExpression(name, range),\r\n      null,\r\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createSignature([],\r\n        Node.createType( // ^ AST signature doesn't really matter, is overridden anyway\r\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\r\n          null, false, range\r\n        ),\r\n        null, false, range)\r\n      ),\r\n      null, null, flags, ArrowKind.NONE, range\r\n    );\r\n  }\r\n\r\n  /** Creates a native namespace declaration. */\r\n  makeNativeNamespaceDeclaration(\r\n    /** The simple name of the namespace. */\r\n    name: string,\r\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\r\n    flags: CommonFlags = CommonFlags.NONE\r\n  ): NamespaceDeclaration {\r\n    var range = this.nativeSource.range;\r\n    return Node.createNamespaceDeclaration(\r\n      Node.createIdentifierExpression(name, range),\r\n      [], null, flags, range\r\n    );\r\n  }\r\n\r\n  /** Creates a native function. */\r\n  makeNativeFunction(\r\n    /** The simple name of the function. */\r\n    name: string,\r\n    /** Concrete function signature. */\r\n    signature: Signature,\r\n    /** Parent element, usually a file, class or namespace. */\r\n    parent: Element = this.nativeFile,\r\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\r\n    flags: CommonFlags = CommonFlags.NONE,\r\n    /** Decorator flags representing built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ): Function {\r\n    return new Function(\r\n      name,\r\n      new FunctionPrototype(\r\n        name,\r\n        parent,\r\n        this.makeNativeFunctionDeclaration(name, flags),\r\n        decoratorFlags\r\n      ),\r\n      signature\r\n    );\r\n  }\r\n\r\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\r\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement {\r\n    var elementsByDeclaration = this.elementsByDeclaration;\r\n    assert(elementsByDeclaration.has(declaration));\r\n    return elementsByDeclaration.get(declaration)!;\r\n  }\r\n\r\n  /** Initializes the program and its elements prior to compilation. */\r\n  initialize(options: Options): void {\r\n    this.options = options;\r\n\r\n    // register native types\r\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\r\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\r\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\r\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\r\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\r\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\r\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\r\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\r\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\r\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\r\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\r\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\r\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\r\n    this.registerNativeType(CommonSymbols.void_, Type.void);\r\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\r\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\r\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\r\n      CommonSymbols.native,\r\n      this.nativeFile,\r\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\r\n      DecoratorFlags.BUILTIN\r\n    ));\r\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\r\n\r\n    // register compiler hints\r\n    this.registerConstantInteger(LibrarySymbols.ASC_TARGET, Type.i32,\r\n      i64_new(options.isWasm64 ? 2 : 1));\r\n    this.registerConstantInteger(LibrarySymbols.ASC_NO_ASSERT, Type.bool,\r\n      i64_new(options.noAssert ? 1 : 0, 0));\r\n    this.registerConstantInteger(LibrarySymbols.ASC_MEMORY_BASE, Type.i32,\r\n      i64_new(options.memoryBase, 0));\r\n    this.registerConstantInteger(LibrarySymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\r\n      i64_new(options.optimizeLevelHint, 0));\r\n    this.registerConstantInteger(LibrarySymbols.ASC_SHRINK_LEVEL, Type.i32,\r\n      i64_new(options.shrinkLevelHint, 0));\r\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_MUTABLE_GLOBAL, Type.bool,\r\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBAL) ? 1 : 0, 0));\r\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\r\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\r\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\r\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\r\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_SIMD, Type.bool,\r\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\r\n    this.registerConstantInteger(LibrarySymbols.ASC_FEATURE_THREADS, Type.bool,\r\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\r\n\r\n    // remember deferred elements\r\n    var queuedImports = new Array<QueuedImport>();\r\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\r\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\r\n    var queuedExtends = new Array<ClassPrototype>();\r\n    var queuedImplements = new Array<ClassPrototype>();\r\n\r\n    // initialize relevant declaration-like statements of the entire program\r\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\r\n      let source = this.sources[i];\r\n      let file = new File(this, source);\r\n      this.filesByName.set(file.internalName, file);\r\n      let statements = source.statements;\r\n      for (let j = 0, l = statements.length; j < l; ++j) {\r\n        let statement = statements[j];\r\n        switch (statement.kind) {\r\n          case NodeKind.EXPORT: {\r\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\r\n            break;\r\n          }\r\n          case NodeKind.IMPORT: {\r\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\r\n            break;\r\n          }\r\n          case NodeKind.VARIABLE: {\r\n            this.initializeVariables(<VariableStatement>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.CLASSDECLARATION: {\r\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.ENUMDECLARATION: {\r\n            this.initializeEnum(<EnumDeclaration>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.FUNCTIONDECLARATION: {\r\n            this.initializeFunction(<FunctionDeclaration>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.INTERFACEDECLARATION: {\r\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\r\n            break;\r\n          }\r\n          case NodeKind.NAMESPACEDECLARATION: {\r\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\r\n            break;\r\n          }\r\n          case NodeKind.TYPEDECLARATION: {\r\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports * should be linkable now that all files have been processed\r\n    for (let [file, exportsStar] of queuedExportsStar) {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\r\n        let exportStar = exportsStar[i];\r\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\r\n        if (!foreignFile) {\r\n          this.error(\r\n            DiagnosticCode.File_0_not_found,\r\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\r\n          );\r\n          continue;\r\n        }\r\n        file.ensureExportStar(foreignFile);\r\n      }\r\n    }\r\n\r\n    // queued imports should be resolvable now through traversing exports and queued exports\r\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\r\n      let queuedImport = queuedImports[i];\r\n      let foreignIdentifier = queuedImport.foreignIdentifier;\r\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\r\n        let element = this.lookupForeign(\r\n          foreignIdentifier.text,\r\n          queuedImport.foreignPath,\r\n          queuedImport.foreignPathAlt,\r\n          queuedExports\r\n        );\r\n        if (element) {\r\n          queuedImport.localFile.add(\r\n            queuedImport.localIdentifier.text,\r\n            element,\r\n            true // isImport\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Module_0_has_no_exported_member_1,\r\n            foreignIdentifier.range,\r\n            queuedImport.foreignPath,\r\n            foreignIdentifier.text\r\n          );\r\n        }\r\n      } else { // i.e. import * as bar from \"./bar\"\r\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\r\n        if (foreignFile) {\r\n          let localFile = queuedImport.localFile;\r\n          let localName = queuedImport.localIdentifier.text;\r\n          localFile.add(\r\n            localName,\r\n            foreignFile.asImportedNamespace(\r\n              localName,\r\n              localFile\r\n            ),\r\n            true // isImport\r\n          );\r\n        } else {\r\n          assert(false); // already reported by the parser not finding the file\r\n        }\r\n      }\r\n    }\r\n\r\n    // queued exports should be resolvable now that imports are finalized\r\n    for (let [file, exports] of queuedExports) {\r\n      for (let [exportName, queuedExport] of exports) {\r\n        let localName = queuedExport.localIdentifier.text;\r\n        let foreignPath = queuedExport.foreignPath;\r\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\r\n          let element = this.lookupForeign(\r\n            localName,\r\n            foreignPath,\r\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\r\n            queuedExports\r\n          );\r\n          if (element) {\r\n            file.ensureExport(exportName, element);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Module_0_has_no_exported_member_1,\r\n              queuedExport.localIdentifier.range,\r\n              foreignPath, localName\r\n            );\r\n          }\r\n        } else { // i.e. export { foo [as bar] }\r\n          let element = file.lookupInSelf(localName);\r\n          if (element) {\r\n            file.ensureExport(exportName, element);\r\n          } else {\r\n            let globalElement = this.lookupGlobal(localName);\r\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\r\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Module_0_has_no_exported_member_1,\r\n                queuedExport.foreignIdentifier.range,\r\n                file.internalName, queuedExport.foreignIdentifier.text\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // register classes backing basic types\r\n    this.registerNativeTypeClass(TypeKind.I8, LibrarySymbols.I8);\r\n    this.registerNativeTypeClass(TypeKind.I16, LibrarySymbols.I16);\r\n    this.registerNativeTypeClass(TypeKind.I32, LibrarySymbols.I32);\r\n    this.registerNativeTypeClass(TypeKind.I64, LibrarySymbols.I64);\r\n    this.registerNativeTypeClass(TypeKind.ISIZE, LibrarySymbols.Isize);\r\n    this.registerNativeTypeClass(TypeKind.U8, LibrarySymbols.U8);\r\n    this.registerNativeTypeClass(TypeKind.U16, LibrarySymbols.U16);\r\n    this.registerNativeTypeClass(TypeKind.U32, LibrarySymbols.U32);\r\n    this.registerNativeTypeClass(TypeKind.U64, LibrarySymbols.U64);\r\n    this.registerNativeTypeClass(TypeKind.USIZE, LibrarySymbols.Usize);\r\n    this.registerNativeTypeClass(TypeKind.BOOL, LibrarySymbols.Bool);\r\n    this.registerNativeTypeClass(TypeKind.F32, LibrarySymbols.F32);\r\n    this.registerNativeTypeClass(TypeKind.F64, LibrarySymbols.F64);\r\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeTypeClass(TypeKind.V128, LibrarySymbols.V128);\r\n\r\n    // resolve base prototypes of derived classes\r\n    var resolver = this.resolver;\r\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\r\n      let thisPrototype = queuedExtends[i];\r\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\r\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\r\n      if (!baseElement) continue;\r\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let basePrototype = <ClassPrototype>baseElement;\r\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\r\n          this.error(\r\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\r\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\r\n          );\r\n        }\r\n        if (\r\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\r\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\r\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\r\n          );\r\n        }\r\n        thisPrototype.basePrototype = basePrototype;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.A_class_may_only_extend_another_class,\r\n          extendsNode.range\r\n        );\r\n      }\r\n    }\r\n\r\n    // set up global aliases\r\n    {\r\n      let globalAliases = options.globalAliases;\r\n      if (globalAliases) {\r\n        for (let [alias, name] of globalAliases) {\r\n          if (!name.length) continue; // explicitly disabled\r\n          let elementsByName = this.elementsByName;\r\n          let element = elementsByName.get(name);\r\n          if (element) {\r\n            if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\r\n            elementsByName.set(alias, element);\r\n          }\r\n          else throw new Error(\"no such global element: \" + name);\r\n        }\r\n      }\r\n    }\r\n\r\n    // register global library elements\r\n    {\r\n      let element: Element | null;\r\n      if (element = this.lookupGlobal(LibrarySymbols.String)) {\r\n        assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n        this.stringInstance = resolver.resolveClass(<ClassPrototype>element, null);\r\n      }\r\n      if (element = this.lookupGlobal(LibrarySymbols.ArrayBuffer)) {\r\n        assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n        this.arrayBufferInstance = resolver.resolveClass(<ClassPrototype>element, null);\r\n      }\r\n      if (element = this.lookupGlobal(LibrarySymbols.Array)) {\r\n        assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n        this.arrayPrototype = <ClassPrototype>element;\r\n      }\r\n      if (element = this.lookupGlobal(LibrarySymbols.abort)) {\r\n        assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n        this.abortInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\r\n      }\r\n      if (element = this.lookupGlobal(LibrarySymbols.memory)) {\r\n        if (element = element.lookupInSelf(LibrarySymbols.allocate)) {\r\n          assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n          this.memoryAllocateInstance = this.resolver.resolveFunction(<FunctionPrototype>element, null);\r\n        }\r\n      }\r\n    }\r\n\r\n    // register GC hooks if present\r\n    // FIXME: think about a better way than globals to model this, maybe a GC namespace that can be\r\n    // dynamically extended by a concrete implementation but then has `@unsafe` methods that normal\r\n    // code cannot call without explicitly enabling it with a flag.\r\n    if (\r\n      this.elementsByName.has(\"__gc_allocate\") &&\r\n      this.elementsByName.has(\"__gc_link\") &&\r\n      this.elementsByName.has(\"__gc_mark\")\r\n    ) {\r\n      // __gc_allocate(usize, (ref: usize) => void): usize\r\n      let element = <Element>this.elementsByName.get(\"__gc_allocate\");\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let gcAllocateInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\r\n      let signature = gcAllocateInstance.signature;\r\n      assert(signature.parameterTypes.length == 2);\r\n      assert(signature.parameterTypes[0] == this.options.usizeType);\r\n      assert(signature.parameterTypes[1].signatureReference);\r\n      assert(signature.returnType == this.options.usizeType);\r\n\r\n      // __gc_link(usize, usize): void\r\n      element = <Element>this.elementsByName.get(\"__gc_link\");\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let gcLinkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\r\n      signature = gcLinkInstance.signature;\r\n      assert(signature.parameterTypes.length == 2);\r\n      assert(signature.parameterTypes[0] == this.options.usizeType);\r\n      assert(signature.parameterTypes[1] == this.options.usizeType);\r\n      assert(signature.returnType == Type.void);\r\n\r\n      // __gc_mark(usize): void\r\n      element = <Element>this.elementsByName.get(\"__gc_mark\");\r\n      assert(element.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let gcMarkInstance = assert(this.resolver.resolveFunction(<FunctionPrototype>element, null));\r\n      signature = gcMarkInstance.signature;\r\n      assert(signature.parameterTypes.length == 1);\r\n      assert(signature.parameterTypes[0] == this.options.usizeType);\r\n      assert(signature.returnType == Type.void);\r\n\r\n      this.gcAllocateInstance = gcAllocateInstance;\r\n      this.gcLinkInstance = gcLinkInstance;\r\n      this.gcMarkInstance = gcMarkInstance;\r\n      let gcHookOffset = 2 * options.usizeType.byteSize; // .next + .prev\r\n      this.gcHookOffset =  gcHookOffset;\r\n      this.gcHeaderSize = (gcHookOffset + 4 + 7) & ~7;   // + .hook index + alignment\r\n      this.hasGC = true;\r\n    }\r\n\r\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\r\n    for (let file of this.filesByName.values()) {\r\n      let exports = file.exports;\r\n      if (!(file.source.isEntry && exports)) continue;\r\n      for (let element of exports.values()) this.markModuleExport(element);\r\n    }\r\n  }\r\n\r\n  /** Marks an element and its children as a module export. */\r\n  private markModuleExport(element: Element): void {\r\n    element.set(CommonFlags.MODULE_EXPORT);\r\n    switch (element.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\r\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\r\n        if (getterPrototype) this.markModuleExport(getterPrototype);\r\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\r\n        if (setterPrototype) this.markModuleExport(setterPrototype);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY:\r\n      case ElementKind.FUNCTION:\r\n      case ElementKind.FIELD:\r\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\r\n    }\r\n    {\r\n      let members = element.members;\r\n      if (members) for (let member of members.values()) this.markModuleExport(member);\r\n    }\r\n  }\r\n\r\n  /** Registers a native type with the program. */\r\n  private registerNativeType(name: string, type: Type): void {\r\n    var element = new TypeDefinition(\r\n      name,\r\n      this.nativeFile,\r\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\r\n      DecoratorFlags.BUILTIN\r\n    );\r\n    element.setType(type);\r\n    this.nativeFile.add(name, element);\r\n  }\r\n\r\n  /** Registers the backing class of a native type. */\r\n  private registerNativeTypeClass(typeKind: TypeKind, className: string): void {\r\n    assert(!this.typeClasses.has(typeKind));\r\n    var element = this.lookupGlobal(className);\r\n    if (element) {\r\n      assert(element.kind == ElementKind.CLASS_PROTOTYPE);\r\n      let classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\r\n      if (classElement) this.typeClasses.set(typeKind, classElement);\r\n    }\r\n  }\r\n\r\n  /** Registers a constant integer value within the global scope. */\r\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\r\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\r\n    var global = new Global(\r\n      name,\r\n      this.nativeFile,\r\n      DecoratorFlags.NONE,\r\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\r\n    );\r\n    global.setConstantIntegerValue(value, type);\r\n    this.nativeFile.add(name, global);\r\n  }\r\n\r\n  /** Registers a constant float value within the global scope. */\r\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\r\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\r\n    var global = new Global(\r\n      name,\r\n      this.nativeFile,\r\n      DecoratorFlags.NONE,\r\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\r\n    );\r\n    global.setConstantFloatValue(value, type);\r\n    this.nativeFile.add(name, global);\r\n  }\r\n\r\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\r\n  ensureGlobal(name: string, element: DeclaredElement): void {\r\n    var elementsByName = this.elementsByName;\r\n    if (elementsByName.has(name)) {\r\n      let actual = elementsByName.get(name);\r\n      // NOTE: this is effectively only performed when merging native types with\r\n      // their respective namespaces in std/builtins, but can also trigger when a\r\n      // user has multiple global elements of the same name in different files,\r\n      // which might result in unexpected shared symbols accross files. considering\r\n      // this a wonky feature for now that we might want to revisit later.\r\n      if (actual !== element) {\r\n        let merged = tryMerge(elementsByName.get(name)!, element);\r\n        if (!merged) {\r\n          this.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            element.identifierNode.range, name\r\n          );\r\n          return;\r\n        }\r\n        element = merged;\r\n      }\r\n    }\r\n    elementsByName.set(name, element);\r\n  }\r\n\r\n  /** Looks up the element of the specified name in the global scope. */\r\n  lookupGlobal(name: string): Element | null {\r\n    var elements = this.elementsByName;\r\n    if (elements.has(name)) return elements.get(name);\r\n    return null;\r\n  }\r\n\r\n  /** Tries to locate a foreign file given its normalized path. */\r\n  private lookupForeignFile(\r\n    /** Normalized path to the other file. */\r\n    foreignPath: string,\r\n    /** Alternative normalized path to the other file. */\r\n    foreignPathAlt: string\r\n  ): File | null {\r\n    var filesByName = this.filesByName;\r\n    return filesByName.has(foreignPath)\r\n         ? filesByName.get(foreignPath)!\r\n         : filesByName.has(foreignPathAlt)\r\n         ? filesByName.get(foreignPathAlt)!\r\n         : null;\r\n  }\r\n\r\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\r\n  private lookupForeign(\r\n    /** Identifier within the other file. */\r\n    foreignName: string,\r\n    /** Normalized path to the other file. */\r\n    foreignPath: string,\r\n    /** Alternative normalized path to the other file. */\r\n    foreignPathAlt: string,\r\n    /** So far queued exports. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): DeclaredElement | null {\r\n    do {\r\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\r\n      if (!foreignFile) return null; // no such file\r\n\r\n      // search already resolved exports\r\n      let element = foreignFile.lookupExport(foreignName);\r\n      if (element) return element;\r\n\r\n      // otherwise traverse queued exports\r\n      if (queuedExports.has(foreignFile)) {\r\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\r\n        if (fileQueuedExports.has(foreignName)) {\r\n          let queuedExport = fileQueuedExports.get(foreignName)!;\r\n          if (queuedExport.foreignPath) { // imported from another file\r\n            foreignName = queuedExport.localIdentifier.text;\r\n            foreignPath = queuedExport.foreignPath;\r\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\r\n            continue;\r\n          } else { // local element of this file\r\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\r\n            if (element) return element;\r\n          }\r\n        }\r\n      }\r\n      break;\r\n    } while (true);\r\n    return null;\r\n  }\r\n\r\n  /** Validates that only supported decorators are present. */\r\n  private checkDecorators(\r\n    /** Decorators present on an element. */\r\n    decorators: DecoratorNode[] | null,\r\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\r\n    acceptedFlags: DecoratorFlags\r\n  ): DecoratorFlags {\r\n    var flags = DecoratorFlags.NONE;\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        let kind = decoratorNameToKind(decorator.name);\r\n        let flag = decoratorKindToFlag(kind);\r\n        if (flag) {\r\n          if (flag == DecoratorFlags.BUILTIN) {\r\n            if (decorator.range.source.isLibrary) {\r\n              flags |= flag;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Decorator_0_is_not_valid_here,\r\n                decorator.range, decorator.name.range.toString()\r\n              );\r\n            }\r\n          } else if (!(acceptedFlags & flag)) {\r\n            this.error(\r\n              DiagnosticCode.Decorator_0_is_not_valid_here,\r\n              decorator.range, decorator.name.range.toString()\r\n            );\r\n          } else if (flags & flag) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_decorator,\r\n              decorator.range, decorator.name.range.toString()\r\n            );\r\n          } else {\r\n            flags |= flag;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return flags;\r\n  }\r\n\r\n  /** Initializes a class declaration. */\r\n  private initializeClass(\r\n    /** The declaration to initialize. */\r\n    declaration: ClassDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** So far queued `extends` clauses. */\r\n    queuedExtends: ClassPrototype[],\r\n    /** So far queued `implements` clauses. */\r\n    queuedImplements: ClassPrototype[]\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new ClassPrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.GLOBAL |\r\n        DecoratorFlags.SEALED |\r\n        DecoratorFlags.UNMANAGED\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return;\r\n\r\n    var implementsTypes = declaration.implementsTypes;\r\n    if (implementsTypes) {\r\n      let numImplementsTypes = implementsTypes.length;\r\n      // cannot implement interfaces when unmanaged\r\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\r\n        if (numImplementsTypes) {\r\n          this.error(\r\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\r\n            Range.join(\r\n              declaration.name.range,\r\n              implementsTypes[numImplementsTypes - 1].range\r\n            )\r\n          );\r\n        }\r\n      } else if (numImplementsTypes) {\r\n        // remember classes that implement interfaces\r\n        for (let i = 0; i < numImplementsTypes; ++i) {\r\n          this.warning( // TODO: not yet supported\r\n            DiagnosticCode.Operation_not_supported,\r\n            implementsTypes[i].range\r\n          );\r\n        }\r\n        queuedImplements.push(element);\r\n      }\r\n    }\r\n    // remember classes that extend another class\r\n    if (declaration.extendsType) queuedExtends.push(element);\r\n\r\n    // initialize members\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\r\n          }\r\n          break;\r\n        }\r\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\r\n        default: assert(false); // class member expected\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Initializes a field of a class or interface. */\r\n  private initializeField(\r\n    /** The declaration to initialize. */\r\n    declaration: FieldDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var decorators = declaration.decorators;\r\n    var element: DeclaredElement;\r\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\r\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\r\n      element = new Global(\r\n        name,\r\n        parent,\r\n        this.checkDecorators(decorators,\r\n          (declaration.is(CommonFlags.READONLY)\r\n            ? DecoratorFlags.INLINE\r\n            : DecoratorFlags.NONE\r\n          ) | DecoratorFlags.LAZY\r\n        ),\r\n        declaration\r\n      );\r\n      if (!parent.add(name, element)) return;\r\n    } else { // actual instance field\r\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\r\n      element = new FieldPrototype(\r\n        name,\r\n        parent,\r\n        declaration,\r\n        this.checkDecorators(decorators, DecoratorFlags.NONE)\r\n      );\r\n      if (!parent.addInstance(name, element)) return;\r\n    }\r\n  }\r\n\r\n  /** Initializes a method of a class or interface. */\r\n  private initializeMethod(\r\n    /** The declaration to initialize. */\r\n    declaration: MethodDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var isStatic = declaration.is(CommonFlags.STATIC);\r\n    var acceptedFlags = DecoratorFlags.INLINE;\r\n    if (!declaration.is(CommonFlags.GENERIC)) {\r\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\r\n                    |  DecoratorFlags.OPERATOR_PREFIX\r\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\r\n    }\r\n    var element = new FunctionPrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, acceptedFlags)\r\n    );\r\n    if (isStatic) { // global function\r\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\r\n      if (!parent.add(name, element)) return;\r\n    } else { // actual instance method\r\n      if (!parent.addInstance(name, element)) return;\r\n    }\r\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\r\n  }\r\n\r\n  /** Checks that operator overloads are generally valid, if present. */\r\n  private checkOperatorOverloads(\r\n    /** Decorators to check. */\r\n    decorators: DecoratorNode[] | null,\r\n    /** Decorated method. */\r\n    prototype: FunctionPrototype,\r\n    /** Parent class. */\r\n    classPrototype: ClassPrototype\r\n  ): void {\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        let decorator = decorators[i];\r\n        switch (decorator.decoratorKind) {\r\n          case DecoratorKind.OPERATOR:\r\n          case DecoratorKind.OPERATOR_BINARY:\r\n          case DecoratorKind.OPERATOR_PREFIX:\r\n          case DecoratorKind.OPERATOR_POSTFIX: {\r\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\r\n            if (numArgs == 1) {\r\n              let firstArg = (<Expression[]>decorator.arguments)[0];\r\n              if (\r\n                firstArg.kind == NodeKind.LITERAL &&\r\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\r\n              ) {\r\n                let kind = operatorKindFromDecorator(\r\n                  decorator.decoratorKind,\r\n                  (<StringLiteralExpression>firstArg).value\r\n                );\r\n                if (kind == OperatorKind.INVALID) {\r\n                  this.error(\r\n                    DiagnosticCode.Operation_not_supported,\r\n                    firstArg.range\r\n                  );\r\n                } else {\r\n                  let overloads = classPrototype.overloadPrototypes;\r\n                  if (overloads.has(kind)) {\r\n                    this.error(\r\n                      DiagnosticCode.Duplicate_function_implementation,\r\n                      firstArg.range\r\n                    );\r\n                  } else {\r\n                    prototype.operatorKind = kind;\r\n                    overloads.set(kind, prototype);\r\n                  }\r\n                }\r\n              } else {\r\n                this.error(\r\n                  DiagnosticCode.String_literal_expected,\r\n                  firstArg.range\r\n                );\r\n              }\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                decorator.range, \"1\", numArgs.toString(10)\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\r\n  private ensureProperty(\r\n    /** The declaration of the getter or setter introducing the property. */\r\n    declaration: MethodDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): PropertyPrototype | null {\r\n    var name = declaration.name.text;\r\n    if (declaration.is(CommonFlags.STATIC)) {\r\n      let parentMembers = parent.members;\r\n      if (parentMembers && parentMembers.has(name)) {\r\n        let element = <Element>parentMembers.get(name)!;\r\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\r\n      } else {\r\n        let element = new PropertyPrototype(name, parent, declaration);\r\n        if (!parent.add(name, element)) return null;\r\n        return element;\r\n      }\r\n    } else {\r\n      let parentMembers = parent.instanceMembers;\r\n      if (parentMembers && parentMembers.has(name)) {\r\n        let element = <Element>parentMembers.get(name);\r\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\r\n      } else {\r\n        let element = new PropertyPrototype(name, parent, declaration);\r\n        if (!parent.addInstance(name, element)) return null;\r\n        return element;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Duplicate_property_0,\r\n      declaration.name.range, name\r\n    );\r\n    return null;\r\n  }\r\n\r\n  /** Initializes a property of a class. */\r\n  private initializeProperty(\r\n    /** The declaration of the getter or setter. */\r\n    declaration: MethodDeclaration,\r\n    /** Parent class. */\r\n    parent: ClassPrototype\r\n  ): void {\r\n    var property = this.ensureProperty(declaration, parent);\r\n    if (!property) return;\r\n    var name = declaration.name.text;\r\n    var isGetter = declaration.is(CommonFlags.GET);\r\n    if (isGetter) {\r\n      if (property.getterPrototype) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_property_0,\r\n          declaration.name.range, name\r\n        );\r\n        return;\r\n      }\r\n    } else {\r\n      if (property.setterPrototype) {\r\n        this.error(\r\n          DiagnosticCode.Duplicate_property_0,\r\n          declaration.name.range, name\r\n        );\r\n        return;\r\n      }\r\n    }\r\n    var element = new FunctionPrototype(\r\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\r\n      property,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.INLINE\r\n      )\r\n    );\r\n    if (isGetter) {\r\n      property.getterPrototype = element;\r\n    } else {\r\n      property.setterPrototype = element;\r\n    }\r\n  }\r\n\r\n  /** Initializes an enum. */\r\n  private initializeEnum(\r\n    /** The declaration to initialize. */\r\n    declaration: EnumDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new Enum(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.GLOBAL |\r\n        DecoratorFlags.INLINE |\r\n        DecoratorFlags.LAZY\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return;\r\n    var values = declaration.values;\r\n    for (let i = 0, k = values.length; i < k; ++i) {\r\n      this.initializeEnumValue(values[i], element);\r\n    }\r\n  }\r\n\r\n  /** Initializes an enum value. */\r\n  private initializeEnumValue(\r\n    /** The declaration to initialize. */\r\n    declaration: EnumValueDeclaration,\r\n    /** Parent enum. */\r\n    parent: Enum\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new EnumValue(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.NONE\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return;\r\n  }\r\n\r\n  /** Initializes an `export` statement. */\r\n  private initializeExports(\r\n    /** The statement to initialize. */\r\n    statement: ExportStatement,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>,\r\n    /** So far queued `export *`s. */\r\n    queuedExportsStar: Map<File,QueuedExportStar[]>\r\n  ): void {\r\n    var members = statement.members;\r\n    if (members) { // export { foo, bar } [from \"./baz\"]\r\n      for (let i = 0, k = members.length; i < k; ++i) {\r\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\r\n      }\r\n    } else { // export * from \"./baz\"\r\n      let queued: QueuedExportStar[];\r\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\r\n      else queuedExportsStar.set(parent, queued = []);\r\n      let foreignPath = assert(statement.internalPath); // must be set for export *\r\n      queued.push(new QueuedExportStar(\r\n        foreignPath,\r\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\r\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\r\n          : foreignPath + INDEX_SUFFIX,\r\n        assert(statement.path)\r\n      ));\r\n    }\r\n  }\r\n\r\n  /** Initializes a single `export` member. Does not handle `export *`. */\r\n  private initializeExport(\r\n    /** The member to initialize. */\r\n    member: ExportMember,\r\n    /** Local file. */\r\n    localFile: File,\r\n    /** Path to the other file, if present. */\r\n    foreignPath: string | null,\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): void {\r\n    var localName = member.localName.text;\r\n    var foreignName = member.exportedName.text;\r\n\r\n    // check for duplicates\r\n    var element = localFile.lookupExport(foreignName);\r\n    if (element) {\r\n      this.error(\r\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\r\n        member.exportedName.range, foreignName\r\n      );\r\n      return;\r\n    }\r\n    // local element, i.e. export { foo [as bar] }\r\n    if (foreignPath === null) {\r\n\r\n      // resolve right away if the local element already exists\r\n      if (element = localFile.lookupInSelf(localName)) {\r\n        localFile.ensureExport(foreignName, element);\r\n\r\n      // otherwise queue it\r\n      } else {\r\n        let queued: Map<string,QueuedExport>;\r\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\r\n        else queuedExports.set(localFile, queued = new Map());\r\n        queued.set(foreignName, new QueuedExport(\r\n          member.localName,\r\n          member.exportedName,\r\n          null, null\r\n        ));\r\n      }\r\n\r\n    // foreign element, i.e. export { foo } from \"./bar\"\r\n    } else {\r\n      let queued: Map<string,QueuedExport>;\r\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\r\n      else queuedExports.set(localFile, queued = new Map());\r\n      queued.set(foreignName, new QueuedExport(\r\n        member.localName,\r\n        member.exportedName,\r\n        foreignPath,\r\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\r\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\r\n          : foreignPath + INDEX_SUFFIX\r\n      ));\r\n    }\r\n  }\r\n\r\n  /** Initializes an `import` statement. */\r\n  private initializeImports(\r\n    /** The statement to initialize. */\r\n    statement: ImportStatement,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** So far queued `import`s. */\r\n    queuedImports: QueuedImport[],\r\n    /** SO far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\r\n      for (let i = 0, k = declarations.length; i < k; ++i) {\r\n        this.initializeImport(\r\n          declarations[i],\r\n          parent,\r\n          statement.internalPath,\r\n          queuedImports,\r\n          queuedExports\r\n        );\r\n      }\r\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\r\n      queuedImports.push(new QueuedImport(\r\n        parent,\r\n        statement.namespaceName,\r\n        null, // indicates import *\r\n        statement.internalPath,\r\n        statement.internalPath + INDEX_SUFFIX\r\n      ));\r\n    } else {\r\n      // import \"./foo\"\r\n    }\r\n  }\r\n\r\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\r\n  private initializeImport( // { foo [as bar] }\r\n    /** The declaration to initialize. */\r\n    declaration: ImportDeclaration,\r\n    /** Parent file. */\r\n    parent: File,\r\n    /** Path to the other file. */\r\n    foreignPath: string,\r\n    /** So far queued `import`s. */\r\n    queuedImports: QueuedImport[],\r\n    /** So far queued `export`s. */\r\n    queuedExports: Map<File,Map<string,QueuedExport>>\r\n  ): void {\r\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\r\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\r\n      : foreignPath + INDEX_SUFFIX;\r\n\r\n    // resolve right away if the element exists\r\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\r\n    if (element) {\r\n      parent.add(declaration.name.text, element, true);\r\n      return;\r\n    }\r\n\r\n    // otherwise queue it\r\n    queuedImports.push(new QueuedImport(\r\n      parent,\r\n      declaration.name,\r\n      declaration.foreignName,\r\n      foreignPath,\r\n      foreignPathAlt\r\n    ));\r\n  }\r\n\r\n  /** Initializes a function. Does not handle methods. */\r\n  private initializeFunction(\r\n    /** The declaration to initialize. */\r\n    declaration: FunctionDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var validDecorators = DecoratorFlags.NONE;\r\n    if (declaration.is(CommonFlags.AMBIENT)) {\r\n      validDecorators |= DecoratorFlags.EXTERNAL;\r\n    } else {\r\n      validDecorators |= DecoratorFlags.INLINE;\r\n    }\r\n    if (!declaration.is(CommonFlags.INSTANCE)) {\r\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\r\n        validDecorators |= DecoratorFlags.GLOBAL;\r\n      }\r\n    }\r\n    if (!declaration.is(CommonFlags.GENERIC)) {\r\n      if (parent.kind == ElementKind.FILE && (<File>parent).source.isEntry) {\r\n        validDecorators |= DecoratorFlags.START;\r\n      }\r\n    }\r\n    var element = new FunctionPrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, validDecorators)\r\n    );\r\n    if (!parent.add(name, element)) return;\r\n    if (element.hasDecorator(DecoratorFlags.START)) {\r\n      if (this.explicitStartFunction) {\r\n        this.error(\r\n          DiagnosticCode.Module_cannot_have_multiple_start_functions,\r\n          assert(findDecorator(DecoratorKind.START, declaration.decorators)).range\r\n        );\r\n      } else this.explicitStartFunction = element;\r\n    }\r\n  }\r\n\r\n  /** Initializes an interface. */\r\n  private initializeInterface(\r\n    /** The declaration to initialize. */\r\n    declaration: InterfaceDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new InterfacePrototype(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators,\r\n        DecoratorFlags.GLOBAL\r\n      )\r\n    );\r\n    if (!parent.add(name, element)) return;\r\n    var memberDeclarations = declaration.members;\r\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\r\n      let memberDeclaration = memberDeclarations[i];\r\n      switch (memberDeclaration.kind) {\r\n        case NodeKind.FIELDDECLARATION: {\r\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\r\n          break;\r\n        }\r\n        case NodeKind.METHODDECLARATION: {\r\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\r\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\r\n          } else {\r\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\r\n          }\r\n          break;\r\n        }\r\n        default: assert(false); // interface member expected\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Initializes a namespace. */\r\n  private initializeNamespace(\r\n    /** The declaration to initialize. */\r\n    declaration: NamespaceDeclaration,\r\n    /** Parent element, usually a file or another namespace. */\r\n    parent: Element,\r\n    /** So far queued `extends` clauses. */\r\n    queuedExtends: ClassPrototype[],\r\n    /** So far queued `implements` clauses. */\r\n    queuedImplements: ClassPrototype[]\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new Namespace(name, parent, declaration);\r\n    if (!parent.add(name, element)) return;\r\n    element = assert(parent.lookupInSelf(name)); // possibly merged\r\n    var members = declaration.members;\r\n    for (let i = 0, k = members.length; i < k; ++i) {\r\n      let member = members[i];\r\n      switch (member.kind) {\r\n        case NodeKind.CLASSDECLARATION: {\r\n          this.initializeClass(<ClassDeclaration>member, element, queuedExtends, queuedImplements);\r\n          break;\r\n        }\r\n        case NodeKind.ENUMDECLARATION: {\r\n          this.initializeEnum(<EnumDeclaration>member, element);\r\n          break;\r\n        }\r\n        case NodeKind.FUNCTIONDECLARATION: {\r\n          this.initializeFunction(<FunctionDeclaration>member, element);\r\n          break;\r\n        }\r\n        case NodeKind.INTERFACEDECLARATION: {\r\n          this.initializeInterface(<InterfaceDeclaration>member, element);\r\n          break;\r\n        }\r\n        case NodeKind.NAMESPACEDECLARATION: {\r\n          this.initializeNamespace(<NamespaceDeclaration>member, element, queuedExtends, queuedImplements);\r\n          break;\r\n        }\r\n        case NodeKind.TYPEDECLARATION: {\r\n          this.initializeTypeDefinition(<TypeDeclaration>member, element);\r\n          break;\r\n        }\r\n        case NodeKind.VARIABLE: {\r\n          this.initializeVariables(<VariableStatement>member, element);\r\n          break;\r\n        }\r\n        default: assert(false); // namespace member expected\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Initializes a `type` definition. */\r\n  private initializeTypeDefinition(\r\n    /** The declaration to initialize. */\r\n    declaration: TypeDeclaration,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var name = declaration.name.text;\r\n    var element = new TypeDefinition(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\r\n    );\r\n    parent.add(name, element); // reports\r\n  }\r\n\r\n  /** Initializes a variable statement. */\r\n  private initializeVariables(\r\n    /** The statement to initialize. */\r\n    statement: VariableStatement,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element\r\n  ): void {\r\n    var declarations = statement.declarations;\r\n    for (let i = 0, k = declarations.length; i < k; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\r\n      if (declaration.is(CommonFlags.DECLARE)) {\r\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\r\n      }\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        acceptedFlags |= DecoratorFlags.INLINE;\r\n      }\r\n      let element = new Global(\r\n        name,\r\n        parent,\r\n        this.checkDecorators(declaration.decorators, acceptedFlags),\r\n        declaration\r\n      );\r\n      if (!parent.add(name, element)) continue; // reports\r\n    }\r\n  }\r\n}\r\n\r\n/** Indicates the specific kind of an {@link Element}. */\r\nexport enum ElementKind {\r\n  /** A {@link Global}. */\r\n  GLOBAL,\r\n  /** A {@link Local}. */\r\n  LOCAL,\r\n  /** An {@link Enum}. */\r\n  ENUM,\r\n  /** An {@link EnumValue}. */\r\n  ENUMVALUE,\r\n  /** A {@link FunctionPrototype}. */\r\n  FUNCTION_PROTOTYPE,\r\n  /** A {@link Function}. */\r\n  FUNCTION,\r\n  /** A {@link FunctionTarget}. */\r\n  FUNCTION_TARGET,\r\n  /** A {@link ClassPrototype}. */\r\n  CLASS_PROTOTYPE,\r\n  /** A {@link Class}. */\r\n  CLASS,\r\n  /** An {@link InterfacePrototype}. */\r\n  INTERFACE_PROTOTYPE,\r\n  /** An {@link Interface}. */\r\n  INTERFACE,\r\n  /** A {@link FieldPrototype}. */\r\n  FIELD_PROTOTYPE,\r\n  /** A {@link Field}. */\r\n  FIELD,\r\n  /** A {@link PropertyPrototype}.  */\r\n  PROPERTY_PROTOTYPE,\r\n  /** A {@link Property}. */\r\n  PROPERTY,\r\n  /** A {@link Namespace}. */\r\n  NAMESPACE,\r\n  /** A {@link File}. */\r\n  FILE,\r\n  /** A {@link TypeDefinition}.  */\r\n  TYPEDEFINITION,\r\n}\r\n\r\n/** Indicates built-in decorators that are present. */\r\nexport enum DecoratorFlags {\r\n  /** No flags set. */\r\n  NONE = 0,\r\n  /** Is a program global. */\r\n  GLOBAL = 1 << 0,\r\n  /** Is a binary operator overload. */\r\n  OPERATOR_BINARY = 1 << 1,\r\n  /** Is a unary prefix operator overload. */\r\n  OPERATOR_PREFIX = 1 << 2,\r\n  /** Is a unary postfix operator overload. */\r\n  OPERATOR_POSTFIX = 1 << 3,\r\n  /** Is an unmanaged class. */\r\n  UNMANAGED = 1 << 4,\r\n  /** Is a sealed class. */\r\n  SEALED = 1 << 5,\r\n  /** Is always inlined. */\r\n  INLINE = 1 << 6,\r\n  /** Is using a different external name. */\r\n  EXTERNAL = 1 << 7,\r\n  /** Is a builtin. */\r\n  BUILTIN = 1 << 8,\r\n  /** Is compiled lazily. */\r\n  LAZY = 1 << 9,\r\n  /** Is the explicit start function. */\r\n  START = 1 << 10\r\n}\r\n\r\n/** Translates a decorator kind to the respective decorator flag. */\r\nexport function decoratorKindToFlag(kind: DecoratorKind): DecoratorFlags {\r\n  switch (kind) {\r\n    case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\r\n    case DecoratorKind.OPERATOR:\r\n    case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\r\n    case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\r\n    case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\r\n    case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\r\n    case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\r\n    case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\r\n    case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\r\n    case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\r\n    case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\r\n    case DecoratorKind.START: return DecoratorFlags.START;\r\n    default: return DecoratorFlags.NONE;\r\n  }\r\n}\r\n\r\n/** Base class of all program elements. */\r\nexport abstract class Element {\r\n\r\n  /** Parent element. */\r\n  parent: Element;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n  /** Decorator flags indicating annotated traits. */\r\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\r\n  /** Member elements. */\r\n  members: Map<string,DeclaredElement> | null = null;\r\n  /** Shadowing type in type space, if any. */\r\n  shadowType: TypeDefinition | null = null;\r\n\r\n  /** Constructs a new program element. */\r\n  protected constructor(\r\n    /** Specific element kind. */\r\n    public kind: ElementKind,\r\n    /** Simple name. */\r\n    public name: string,\r\n    /** Internal name referring to this element. */\r\n    public internalName: string,\r\n    /** Containing {@link Program}. */\r\n    public program: Program,\r\n    /** Parent element. */\r\n    parent: Element | null\r\n  ) {\r\n    this.program = program;\r\n    this.name = name;\r\n    this.internalName = internalName;\r\n    if (parent) {\r\n      this.parent = parent;\r\n    } else {\r\n      assert(this.kind == ElementKind.FILE);\r\n      this.parent = this; // special case to keep this.parent non-nullable\r\n    }\r\n  }\r\n\r\n  /** Gets the enclosing file. */\r\n  get file(): File {\r\n    var current: Element = this;\r\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\r\n    while (true);\r\n  }\r\n\r\n  /** Tests if this element has a specific flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this element has any of the specified flags. */\r\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n  /** Tests if this element has a specific decorator flag or flags. */\r\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\r\n\r\n  /** Looks up the element with the specified name within this element. */\r\n  lookupInSelf(name: string): DeclaredElement | null {\r\n    var members = this.members;\r\n    if (members && members.has(name)) return members.get(name)!;\r\n    return null;\r\n  }\r\n\r\n  /** Looks up the element with the specified name relative to this element, like in JS. */\r\n  abstract lookup(name: string): Element | null;\r\n\r\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\r\n  add(name: string, element: DeclaredElement): bool {\r\n    var originalDeclaration = element.declaration;\r\n    var members = this.members;\r\n    if (!members) this.members = members = new Map();\r\n    else if (members.has(name)) {\r\n      let actual = members.get(name)!;\r\n      if (actual.parent !== this) {\r\n        // override non-own element\r\n      } else {\r\n        let merged = tryMerge(actual, element);\r\n        if (merged) {\r\n          element = merged; // use merged element\r\n        } else {\r\n          this.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            element.identifierNode.range, element.identifierNode.text\r\n          );\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    members.set(name, element);\r\n    var program = this.program;\r\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\r\n      // prefer unbound prototypes in global lookup maps\r\n      program.elementsByName.set(element.internalName, element);\r\n      program.elementsByDeclaration.set(originalDeclaration, element);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** Returns a string representation of this element. */\r\n  toString(): string {\r\n    return ElementKind[this.kind] + \":\" + this.internalName;\r\n  }\r\n}\r\n\r\n/** Base class of elements with an associated declaration statement. */\r\nexport abstract class DeclaredElement extends Element {\r\n\r\n  /** Constructs a new declared program element. */\r\n  protected constructor(\r\n    /** Specific element kind. */\r\n    kind: ElementKind,\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Internal name referring to this element. */\r\n    internalName: string,\r\n    /** Containing {@link Program}. */\r\n    program: Program,\r\n    /** Parent element. */\r\n    parent: Element | null,\r\n    /** Declaration reference. */\r\n    public declaration: DeclarationStatement\r\n  ) {\r\n    super(kind, name, internalName, program, parent);\r\n    // It is necessary to have access to identifiers of all members and exports\r\n    // for reporting purposes and this is the lowest common denominator. Comes\r\n    // at the expense of not having more specific type information in derived\r\n    // classes, though. Instead, derived classes implement getters for other\r\n    // important AST nodes directly through manual casting, allowing the resolver\r\n    // etc. to not worry about actual declarations.\r\n    this.declaration = declaration;\r\n    this.flags = declaration.flags; // inherit\r\n  }\r\n\r\n  /** Tests if this element is a library element. */\r\n  get isDeclaredInLibrary(): bool {\r\n    return this.declaration.range.source.isLibrary;\r\n  }\r\n\r\n  /** Gets the associated identifier node. */\r\n  get identifierNode(): IdentifierExpression {\r\n    return this.declaration.name;\r\n  }\r\n\r\n  /** Gets the assiciated decorator nodes. */\r\n  get decoratorNodes(): DecoratorNode[] | null {\r\n    return this.declaration.decorators;\r\n  }\r\n}\r\n\r\n/** Base class of elements that can be resolved to a concrete type. */\r\nexport abstract class TypedElement extends DeclaredElement {\r\n\r\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\r\n  type: Type = Type.void;\r\n\r\n  /** Sets the resolved type of this element. */\r\n  setType(type: Type): void {\r\n    assert(!this.is(CommonFlags.RESOLVED));\r\n    this.type = type;\r\n    this.set(CommonFlags.RESOLVED);\r\n  }\r\n}\r\n\r\n/** A file representing the implicit top-level namespace of a source. */\r\nexport class File extends Element {\r\n\r\n  /** File exports. */\r\n  exports: Map<string,DeclaredElement> | null = null;\r\n  /** File re-exports. */\r\n  exportsStar: File[] | null = null;\r\n  /** Top-level start function of this file. */\r\n  startFunction: Function;\r\n\r\n  /** Constructs a new file. */\r\n  constructor(\r\n    /** Program this file belongs to. */\r\n    program: Program,\r\n    /** Source of this file. */\r\n    public source: Source\r\n  ) {\r\n    super(\r\n      ElementKind.FILE,\r\n      source.normalizedPath,\r\n      source.internalPath,\r\n      program,\r\n      null // special case for files\r\n    );\r\n    this.source = source;\r\n    assert(!program.filesByName.has(this.internalName));\r\n    program.filesByName.set(this.internalName, this);\r\n    var startFunction = this.program.makeNativeFunction(\r\n      \"start:\" + this.internalName,\r\n      new Signature(null, Type.void),\r\n      this\r\n    );\r\n    startFunction.internalName = startFunction.name;\r\n    this.startFunction = startFunction;\r\n  }\r\n\r\n  /* @override */\r\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\r\n    if (!super.add(name, element)) return false;\r\n    element = assert(this.lookupInSelf(name)); // possibly merged\r\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\r\n      this.ensureExport(\r\n        element.name,\r\n        element\r\n      );\r\n    }\r\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) this.program.ensureGlobal(name, element);\r\n    return true;\r\n  }\r\n\r\n  /* @override */\r\n  lookupInSelf(name: string): DeclaredElement | null {\r\n    var element = super.lookupInSelf(name);\r\n    if (element) return element;\r\n    var exportsStar = this.exportsStar;\r\n    if (exportsStar) {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\r\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    var element = this.lookupInSelf(name);\r\n    if (element) return element;\r\n    return this.program.lookupGlobal(name);\r\n  }\r\n\r\n  /** Ensures that an element is an export of this file. */\r\n  ensureExport(name: string, element: DeclaredElement): void {\r\n    var exports = this.exports;\r\n    if (!exports) this.exports = exports = new Map();\r\n    exports.set(name, element);\r\n    if (this.source.isLibrary) this.program.ensureGlobal(name, element);\r\n  }\r\n\r\n  /** Ensures that another file is a re-export of this file. */\r\n  ensureExportStar(file: File): void {\r\n    var exportsStar = this.exportsStar;\r\n    if (!exportsStar) this.exportsStar = exportsStar = [];\r\n    else if (exportsStar.includes(file)) return;\r\n    exportsStar.push(file);\r\n  }\r\n\r\n  /** Looks up the export of the specified name. */\r\n  lookupExport(name: string): DeclaredElement | null {\r\n    var exports = this.exports;\r\n    if (exports && exports.has(name)) return exports.get(name)!;\r\n    var exportsStar = this.exportsStar;\r\n    if (exportsStar) {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\r\n        let element = exportsStar[i].lookupExport(name);\r\n        if (element) return element;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Creates an imported namespace from this file. */\r\n  asImportedNamespace(name: string, parent: Element): Namespace {\r\n    var ns = new Namespace(\r\n      name,\r\n      parent,\r\n      this.program.makeNativeNamespaceDeclaration(name)\r\n    );\r\n    var exports = this.exports;\r\n    if (exports) {\r\n      for (let [memberName, member] of exports) {\r\n        ns.add(memberName, member);\r\n      }\r\n    }\r\n    return ns;\r\n  }\r\n}\r\n\r\n/** A type definition. */\r\nexport class TypeDefinition extends TypedElement {\r\n\r\n  /** Constructs a new type definition. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: TypeDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.TYPEDEFINITION,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type parameter nodes. */\r\n  get typeParameterNodes(): TypeParameterNode[] | null {\r\n    return (<TypeDeclaration>this.declaration).typeParameters;\r\n  }\r\n\r\n  /** Gets the associated type node. */\r\n  get typeNode(): CommonTypeNode {\r\n    return (<TypeDeclaration>this.declaration).type;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A namespace that differs from a file in being user-declared with a name. */\r\nexport class Namespace extends DeclaredElement {\r\n\r\n  /** Constructs a new namespace. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or another namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: NamespaceDeclaration\r\n  ) {\r\n    super(\r\n      ElementKind.NAMESPACE,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.lookupInSelf(name)\r\n        || this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** An enum. */\r\nexport class Enum extends TypedElement {\r\n\r\n  /** Constructs a new enum. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: EnumDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.ENUM,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n    this.setType(Type.i32);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.lookupInSelf(name)\r\n        || this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** Indicates the kind of an inlined constant value. */\r\nexport const enum ConstantValueKind {\r\n  /** No constant value. */\r\n  NONE,\r\n  /** Constant integer value. */\r\n  INTEGER,\r\n  /** Constant float value. */\r\n  FLOAT\r\n}\r\n\r\n/** Base class of all variable-like program elements. */\r\nexport abstract class VariableLikeElement extends TypedElement {\r\n\r\n  /** Constant value kind. */\r\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\r\n  /** Constant integer value, if applicable. */\r\n  constantIntegerValue: I64;\r\n  /** Constant float value, if applicable. */\r\n  constantFloatValue: f64;\r\n\r\n  /** Constructs a new variable-like element. */\r\n  protected constructor(\r\n    /** Specific element kind. */\r\n    kind: ElementKind,\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file, namespace or class. */\r\n    parent: Element,\r\n    /** Declaration reference. Creates a native declaration if omitted. */\r\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\r\n  ) {\r\n    super(\r\n      kind,\r\n      name,\r\n      mangleInternalName(name, parent, false),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.flags = declaration.flags;\r\n  }\r\n\r\n  /** Gets the associated type node.s */\r\n  get typeNode(): CommonTypeNode | null {\r\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\r\n  }\r\n\r\n  /** Gets the associated initializer node. */\r\n  get initializerNode(): Expression | null {\r\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\r\n  }\r\n\r\n  /** Applies a constant integer value to this element. */\r\n  setConstantIntegerValue(value: I64, type: Type): void {\r\n    assert(type.is(TypeFlags.INTEGER));\r\n    this.type = type;\r\n    this.constantValueKind = ConstantValueKind.INTEGER;\r\n    this.constantIntegerValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\r\n  }\r\n\r\n  /** Applies a constant float value to this element. */\r\n  setConstantFloatValue(value: f64, type: Type): void {\r\n    assert(type.is(TypeFlags.FLOAT));\r\n    this.type = type;\r\n    this.constantValueKind = ConstantValueKind.FLOAT;\r\n    this.constantFloatValue = value;\r\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\r\n  }\r\n\r\n  /** @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** An enum value. */\r\nexport class EnumValue extends VariableLikeElement {\r\n\r\n  /** Constructs a new enum value. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent enum. */\r\n    parent: Enum,\r\n    /** Declaration reference. */\r\n    declaration: EnumValueDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.ENUMVALUE,\r\n      name,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n    this.setType(Type.i32);\r\n  }\r\n\r\n  /** Gets the associated value node. */\r\n  get valueNode(): Expression | null {\r\n    return (<EnumValueDeclaration>this.declaration).value;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A global variable. */\r\nexport class Global extends VariableLikeElement {\r\n\r\n  /** Constructs a new global variable. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file, namespace or static class. */\r\n    parent: Element,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags,\r\n    /** Declaration reference. Creates a native declaration if omitted. */\r\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\r\n  ) {\r\n    super(\r\n      ElementKind.GLOBAL,\r\n      name,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n}\r\n\r\n/** A function parameter. */\r\nexport class Parameter {\r\n  /** Constructs a new function parameter. */\r\n  constructor(\r\n    /** Parameter name. */\r\n    public name: string,\r\n    /** Parameter type. */\r\n    public type: Type,\r\n    /** Parameter initializer, if present. */\r\n    public initializer: Expression | null = null\r\n  ) {}\r\n}\r\n\r\n/** A local variable. */\r\nexport class Local extends VariableLikeElement {\r\n\r\n  /** Constructs a new local variable. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\r\n    public index: i32,\r\n    /** Resolved type. */\r\n    type: Type,\r\n    /** Parent function. */\r\n    parent: Function,\r\n    /** Declaration reference. */\r\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\r\n  ) {\r\n    super(\r\n      ElementKind.LOCAL,\r\n      name,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.index = index;\r\n    assert(type != Type.void);\r\n    this.setType(type);\r\n  }\r\n}\r\n\r\n/** A yet unresolved function prototype. */\r\nexport class FunctionPrototype extends DeclaredElement {\r\n\r\n  /** Operator kind, if an overload. */\r\n  operatorKind: OperatorKind = OperatorKind.INVALID;\r\n  /** Already resolved instances. */\r\n  instances: Map<string,Function> | null = null;\r\n\r\n  /** Clones of this prototype that are bounds to specific classes. */\r\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\r\n\r\n  /** Constructs a new function prototype. */\r\n  constructor(\r\n    /** Simple na,e */\r\n    name: string,\r\n    /** Parent element, usually a file, namespace or class (if a method). */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: FunctionDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.FUNCTION_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type parameter nodes. */\r\n  get typeParameterNodes(): TypeParameterNode[] | null {\r\n    return (<FunctionDeclaration>this.declaration).typeParameters;\r\n  }\r\n\r\n  /** Gets the associated signature node. */\r\n  get signatureNode(): SignatureNode {\r\n    return (<FunctionDeclaration>this.declaration).signature;\r\n  }\r\n\r\n  /** Gets the associated body node. */\r\n  get bodyNode(): Statement | null {\r\n    return (<FunctionDeclaration>this.declaration).body;\r\n  }\r\n\r\n  /** Gets the arrow function kind. */\r\n  get arrowKind(): ArrowKind {\r\n    return (<FunctionDeclaration>this.declaration).arrowKind;\r\n  }\r\n\r\n  /** Tests if this prototype is bound to a class. */\r\n  get isBound(): bool {\r\n    var parent = this.parent;\r\n    return parent.kind == ElementKind.CLASS\r\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\r\n  }\r\n\r\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\r\n  toBound(classInstance: Class): FunctionPrototype {\r\n    assert(this.is(CommonFlags.INSTANCE));\r\n    assert(!this.isBound);\r\n    var boundPrototypes = this.boundPrototypes;\r\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\r\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\r\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\r\n    var bound = new FunctionPrototype(\r\n      this.name,\r\n      classInstance, // !\r\n      <MethodDeclaration>declaration,\r\n      this.decoratorFlags\r\n    );\r\n    bound.flags = this.flags;\r\n    bound.operatorKind = this.operatorKind;\r\n    // NOTE: this.instances holds instances per bound class / unbound\r\n    boundPrototypes.set(classInstance, bound);\r\n    return bound;\r\n  }\r\n\r\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\r\n  getResolvedInstance(instanceKey: string): Function | null {\r\n    var instances = this.instances;\r\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\r\n    return null;\r\n  }\r\n\r\n  /** Sets the resolved instance for the specified instance key. */\r\n  setResolvedInstance(instanceKey: string, instance: Function): void {\r\n    var instances = this.instances;\r\n    if (!instances) this.instances = instances = new Map();\r\n    else assert(!instances.has(instanceKey));\r\n    instances.set(instanceKey, instance);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved function. */\r\nexport class Function extends TypedElement {\r\n\r\n  /** Function prototype. */\r\n  prototype: FunctionPrototype;\r\n  /** Function signature. */\r\n  signature: Signature;\r\n  /** Map of locals by name. */\r\n  localsByName: Map<string,Local> = new Map();\r\n  /** Array of locals by index. */\r\n  localsByIndex: Local[] = [];\r\n  /** List of additional non-parameter locals. */\r\n  additionalLocals: Type[] = [];\r\n  /** Contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Default control flow. */\r\n  flow: Flow;\r\n  /** Remembered debug locations. */\r\n  debugLocations: Range[] = [];\r\n  /** Function reference, if compiled. */\r\n  ref: FunctionRef = 0;\r\n  /** Function table index, if any. */\r\n  functionTableIndex: i32 = -1;\r\n  /** Trampoline function for calling with omitted arguments. */\r\n  trampoline: Function | null = null;\r\n\r\n  /** Counting id of inline operations involving this function. */\r\n  nextInlineId: i32 = 0;\r\n  /** Counting id of anonymous inner functions. */\r\n  nextAnonymousId: i32 = 0;\r\n\r\n  /** Constructs a new concrete function. */\r\n  constructor(\r\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\r\n    nameInclTypeParameters: string,\r\n    /** Respective function prototype. */\r\n    prototype: FunctionPrototype,\r\n    /** Concrete signature. */\r\n    signature: Signature, // pre-resolved\r\n    /** Contextual type arguments inherited from its parent class, if any. */\r\n    contextualTypeArguments: Map<string,Type> | null = null\r\n  ) {\r\n    super(\r\n      ElementKind.FUNCTION,\r\n      nameInclTypeParameters,\r\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\r\n      prototype.program,\r\n      prototype.parent,\r\n      prototype.declaration\r\n    );\r\n    this.prototype = prototype;\r\n    this.signature = signature;\r\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.contextualTypeArguments = contextualTypeArguments;\r\n    this.type = Type.u32.asFunction(signature);\r\n    if (!prototype.is(CommonFlags.AMBIENT)) {\r\n      let localIndex = 0;\r\n      if (this.is(CommonFlags.INSTANCE)) {\r\n        let local = new Local(\r\n          CommonSymbols.this_,\r\n          localIndex++,\r\n          assert(signature.thisType),\r\n          this\r\n        );\r\n        this.localsByName.set(CommonSymbols.this_, local);\r\n        this.localsByIndex[local.index] = local;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\r\n        let parameterType = parameterTypes[i];\r\n        let parameterName = signature.getParameterName(i);\r\n        let local = new Local(\r\n          parameterName,\r\n          localIndex++,\r\n          parameterType,\r\n          this\r\n        );\r\n        this.localsByName.set(parameterName, local);\r\n        this.localsByIndex[local.index] = local;\r\n      }\r\n    }\r\n    this.flow = Flow.create(this);\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n\r\n  /** Adds a local of the specified type, with an optional name. */\r\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\r\n    // if it has a name, check previously as this method will throw otherwise\r\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\r\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\r\n    var localName = name !== null\r\n      ? name\r\n      : \"var$\" + localIndex.toString();\r\n    var local = new Local(\r\n      localName,\r\n      localIndex,\r\n      type,\r\n      this,\r\n      declaration || this.program.makeNativeVariableDeclaration(localName)\r\n    );\r\n    if (name) {\r\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\r\n      this.localsByName.set(name, local);\r\n    }\r\n    this.localsByIndex[local.index] = local;\r\n    this.additionalLocals.push(type);\r\n    return local;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    var locals = this.localsByName;\r\n    if (locals.has(name)) return locals.get(name);\r\n    return this.parent.lookup(name);\r\n  }\r\n\r\n  // used by flows to keep track of temporary locals\r\n  tempI32s: Local[] | null = null;\r\n  tempI64s: Local[] | null = null;\r\n  tempF32s: Local[] | null = null;\r\n  tempF64s: Local[] | null = null;\r\n  tempV128s: Local[] | null = null;\r\n\r\n  // used by flows to keep track of break labels\r\n  nextBreakId: i32 = 0;\r\n  breakStack: i32[] | null = null;\r\n  breakLabel: string | null = null;\r\n\r\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\r\n  finalize(module: Module, ref: FunctionRef): void {\r\n    this.ref = ref;\r\n    assert(!this.breakStack || !this.breakStack.length); // internal error\r\n    this.breakStack = null;\r\n    this.breakLabel = null;\r\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\r\n    if (this.program.options.sourceMap) {\r\n      let debugLocations = this.debugLocations;\r\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\r\n        let debugLocation = debugLocations[i];\r\n        module.setDebugLocation(\r\n          ref,\r\n          debugLocation.debugInfoRef,\r\n          debugLocation.source.debugInfoIndex,\r\n          debugLocation.line,\r\n          debugLocation.column\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/** A resolved function target, that is a function called indirectly by an index and signature. */\r\nexport class FunctionTarget extends Element {\r\n\r\n  /** Underlying signature. */\r\n  signature: Signature;\r\n  /** Function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new function target. */\r\n  constructor(\r\n    /** Concrete signature. */\r\n    signature: Signature,\r\n    /** Program reference. */\r\n    program: Program,\r\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\r\n  ) {\r\n    super(\r\n      ElementKind.FUNCTION_TARGET,\r\n      __s = \"sig:\" + signature.toSignatureString(),\r\n      __s,\r\n      program,\r\n      program.nativeFile\r\n    );\r\n    this.signature = signature;\r\n    this.flags = CommonFlags.RESOLVED;\r\n    this.type = Type.u32.asFunction(signature);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return null;\r\n  }\r\n}\r\n\r\n/** A yet unresolved instance field prototype. */\r\nexport class FieldPrototype extends DeclaredElement {\r\n\r\n  /** Constructs a new field prototype. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent class. */\r\n    parent: ClassPrototype,\r\n    /** Declaration reference. */\r\n    declaration: FieldDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\r\n  ) {\r\n    super(\r\n      ElementKind.FIELD_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type node. */\r\n  get typeNode(): CommonTypeNode | null {\r\n    return (<FieldDeclaration>this.declaration).type;\r\n  }\r\n\r\n  /** Gets the associated initializer node. */\r\n  get initializerNode(): Expression | null {\r\n    return (<FieldDeclaration>this.declaration).initializer;\r\n  }\r\n\r\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\r\n  get parameterIndex(): i32 {\r\n    return (<FieldDeclaration>this.declaration).parameterIndex;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved instance field. */\r\nexport class Field extends VariableLikeElement {\r\n\r\n  /** Field prototype reference. */\r\n  prototype: FieldPrototype;\r\n  /** Field memory offset, if an instance field. */\r\n  memoryOffset: i32 = -1;\r\n\r\n  /** Constructs a new field. */\r\n  constructor(\r\n    /** Respective field prototype. */\r\n    prototype: FieldPrototype,\r\n    /** Parent class. */\r\n    parent: Class,\r\n    /** Concrete type. */\r\n    type: Type\r\n  ) {\r\n    super(\r\n      ElementKind.FIELD,\r\n      prototype.name,\r\n      parent,\r\n      <VariableLikeDeclarationStatement>prototype.declaration\r\n    );\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    assert(type != Type.void);\r\n    this.setType(type);\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n}\r\n\r\n/** A property comprised of a getter and a setter function. */\r\nexport class PropertyPrototype extends DeclaredElement {\r\n\r\n  /** Getter prototype. */\r\n  getterPrototype: FunctionPrototype | null = null;\r\n  /** Setter prototype. */\r\n  setterPrototype: FunctionPrototype | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent class. */\r\n    parent: ClassPrototype,\r\n    /** Declaration of the getter or setter introducing the property. */\r\n    firstDeclaration: FunctionDeclaration\r\n  ) {\r\n    super(\r\n      ElementKind.PROPERTY_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\r\n      parent.program,\r\n      parent,\r\n      firstDeclaration\r\n    );\r\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved property. */\r\nexport class Property extends VariableLikeElement {\r\n\r\n  /** Prototype reference. */\r\n  prototype: PropertyPrototype;\r\n  /** Getter instance. */\r\n  getterInstance: Function | null = null;\r\n  /** Setter instance. */\r\n  setterInstance: Function | null = null;\r\n\r\n  /** Constructs a new property prototype. */\r\n  constructor(\r\n    /** Respective property prototype. */\r\n    prototype: PropertyPrototype,\r\n    /** Parent element, usually a static class prototype or class instance. */\r\n    parent: Element\r\n  ) {\r\n    super(\r\n      ElementKind.PROPERTY,\r\n      prototype.name,\r\n      parent,\r\n      prototype.program.makeNativeVariableDeclaration(\r\n        prototype.name,\r\n        prototype.is(CommonFlags.INSTANCE)\r\n          ? CommonFlags.INSTANCE\r\n          : CommonFlags.NONE\r\n      )\r\n    );\r\n    this.prototype = prototype;\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A yet unresolved class prototype. */\r\nexport class ClassPrototype extends DeclaredElement {\r\n\r\n  /** Instance member prototypes. */\r\n  instanceMembers: Map<string,Element> | null = null;\r\n  /** Base class prototype, if applicable. */\r\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\r\n  /** Constructor prototype. */\r\n  constructorPrototype: FunctionPrototype | null = null;\r\n  /** Operator overload prototypes. */\r\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\r\n  /** Already resolved instances. */\r\n  instances: Map<string,Class> | null = null;\r\n\r\n  constructor(\r\n    /** Simple name. */\r\n    name: string,\r\n    /** Parent element, usually a file or namespace. */\r\n    parent: Element,\r\n    /** Declaration reference. */\r\n    declaration: ClassDeclaration,\r\n    /** Pre-checked flags indicating built-in decorators. */\r\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\r\n    _isInterface: bool = false // FIXME\r\n  ) {\r\n    super(\r\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\r\n      name,\r\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\r\n      parent.program,\r\n      parent,\r\n      declaration\r\n    );\r\n    this.decoratorFlags = decoratorFlags;\r\n  }\r\n\r\n  /** Gets the associated type parameter nodes. */\r\n  get typeParameterNodes(): TypeParameterNode[] | null {\r\n    return (<ClassDeclaration>this.declaration).typeParameters;\r\n  }\r\n  /** Gets the associated extends node. */\r\n  get extendsNode(): TypeNode | null {\r\n    return (<ClassDeclaration>this.declaration).extendsType;\r\n  }\r\n  /** Gets the associated implements nodes. */\r\n  get implementsNodes(): TypeNode[] | null {\r\n    return (<ClassDeclaration>this.declaration).implementsTypes;\r\n  }\r\n\r\n  /** Tests if this prototype extends the specified. */\r\n  extends(basePtototype: ClassPrototype | null): bool {\r\n    var current: ClassPrototype | null = this;\r\n    do {\r\n      if (current === basePtototype) return true;\r\n    } while (current = current.basePrototype);\r\n    return false;\r\n  }\r\n\r\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\r\n  addInstance(name: string, element: DeclaredElement): bool {\r\n    var originalDeclaration = element.declaration;\r\n    var instanceMembers = this.instanceMembers;\r\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\r\n    else if (instanceMembers.has(name)) {\r\n      let merged = tryMerge(instanceMembers.get(name)!, element);\r\n      if (!merged) {\r\n        this.program.error(\r\n          DiagnosticCode.Duplicate_identifier_0,\r\n          element.identifierNode.range, element.identifierNode.text\r\n        );\r\n        return false;\r\n      }\r\n      element = merged;\r\n    }\r\n    instanceMembers.set(name, element);\r\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\r\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\r\n    }\r\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\r\n    return true;\r\n  }\r\n\r\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\r\n  getResolvedInstance(instanceKey: string): Class | null {\r\n    var instances = this.instances;\r\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\r\n    return null;\r\n  }\r\n\r\n  /** Sets the resolved instance for the specified instance key. */\r\n  setResolvedInstance(instanceKey: string, instance: Class): void {\r\n    var instances = this.instances;\r\n    if (!instances) this.instances = instances = new Map();\r\n    else assert(!instances.has(instanceKey));\r\n    instances.set(instanceKey, instance);\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n}\r\n\r\n/** A resolved class. */\r\nexport class Class extends TypedElement {\r\n\r\n  /** Class prototype. */\r\n  prototype: ClassPrototype;\r\n  /** Resolved type arguments. */\r\n  typeArguments: Type[] | null;\r\n  /** Base class, if applicable. */\r\n  base: Class | null;\r\n  /** Contextual type arguments for fields and methods. */\r\n  contextualTypeArguments: Map<string,Type> | null = null;\r\n  /** Current member memory offset. */\r\n  currentMemoryOffset: u32 = 0;\r\n  /** Constructor instance. */\r\n  constructorInstance: Function | null = null;\r\n  /** Operator overloads. */\r\n  overloads: Map<OperatorKind,Function> | null = null;\r\n  /** Function index of the GC hook. */\r\n  gcHookIndex: u32 = <u32>-1;\r\n\r\n  /** Constructs a new class. */\r\n  constructor(\r\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\r\n    nameInclTypeParameters: string,\r\n    /** The respective class prototype. */\r\n    prototype: ClassPrototype,\r\n    /** Concrete type arguments, if any. */\r\n    typeArguments: Type[] | null = null,\r\n    /** Base class, if derived. */\r\n    base: Class | null = null,\r\n    _isInterface: bool = false // FIXME\r\n  ) {\r\n    super(\r\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\r\n      nameInclTypeParameters,\r\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\r\n      prototype.program,\r\n      prototype.parent,\r\n      prototype.declaration\r\n    );\r\n    this.prototype = prototype;\r\n    this.flags = prototype.flags;\r\n    this.decoratorFlags = prototype.decoratorFlags;\r\n    this.typeArguments = typeArguments;\r\n    this.setType(this.program.options.usizeType.asClass(this));\r\n    this.base = base;\r\n\r\n    // inherit static members and contextual type arguments from base class\r\n    if (base) {\r\n      let inheritedTypeArguments = base.contextualTypeArguments;\r\n      if (inheritedTypeArguments) {\r\n        let contextualTypeArguments = this.contextualTypeArguments;\r\n        for (let [baseName, baseType] of inheritedTypeArguments) {\r\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\r\n          contextualTypeArguments.set(baseName, baseType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // apply pre-checked instance-specific contextual type arguments\r\n    var typeParameters = prototype.typeParameterNodes;\r\n    if (typeArguments) {\r\n      let numTypeArguments = typeArguments.length;\r\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\r\n        throw new Error(\"type argument count mismatch\");\r\n      }\r\n      if (numTypeArguments) {\r\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\r\n        for (let i = 0; i < numTypeArguments; ++i) {\r\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\r\n        }\r\n      }\r\n    } else if (typeParameters && typeParameters.length) {\r\n      throw new Error(\"type argument count mismatch\");\r\n    }\r\n    registerConcreteElement(this.program, this);\r\n  }\r\n\r\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\r\n  isAssignableTo(target: Class): bool {\r\n    var current: Class | null = this;\r\n    do if (current == target) return true;\r\n    while (current = current.base);\r\n    return false;\r\n  }\r\n\r\n  /** Looks up the operator overload of the specified kind. */\r\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\r\n    if (unchecked) {\r\n      switch (kind) {\r\n        case OperatorKind.INDEXED_GET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        case OperatorKind.INDEXED_SET: {\r\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\r\n          if (uncheckedOverload) return uncheckedOverload;\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    var instance: Class | null = this;\r\n    do {\r\n      let overloads = instance.overloads;\r\n      if (overloads) {\r\n        let overload = overloads.get(kind);\r\n        if (overload) return overload;\r\n      }\r\n    } while (instance = instance.base);\r\n    return null;\r\n  }\r\n\r\n  /* @override */\r\n  lookup(name: string): Element | null {\r\n    return this.parent.lookup(name);\r\n  }\r\n\r\n  /** Calculates the memory offset of the specified field. */\r\n  offsetof(fieldName: string): u32 {\r\n    var members = assert(this.members);\r\n    assert(members.has(fieldName));\r\n    var field = <Element>members.get(fieldName);\r\n    assert(field.kind == ElementKind.FIELD);\r\n    return (<Field>field).memoryOffset;\r\n  }\r\n}\r\n\r\n/** A yet unresolved interface. */\r\nexport class InterfacePrototype extends ClassPrototype { // FIXME\r\n\r\n  /** Constructs a new interface prototype. */\r\n  constructor(\r\n    name: string,\r\n    parent: Element,\r\n    declaration: InterfaceDeclaration,\r\n    decoratorFlags: DecoratorFlags\r\n  ) {\r\n    super(\r\n      name,\r\n      parent,\r\n      declaration,\r\n      decoratorFlags,\r\n      true\r\n    );\r\n  }\r\n}\r\n\r\n/** A resolved interface. */\r\nexport class Interface extends Class { // FIXME\r\n\r\n  /** Constructs a new interface. */\r\n  constructor(\r\n    nameInclTypeParameters: string,\r\n    prototype: InterfacePrototype,\r\n    typeArguments: Type[] = [],\r\n    base: Interface | null = null\r\n  ) {\r\n    super(\r\n      nameInclTypeParameters,\r\n      prototype,\r\n      typeArguments,\r\n      base,\r\n      true\r\n    );\r\n  }\r\n}\r\n\r\n/** Registers a concrete element with a program. */\r\nfunction registerConcreteElement(program: Program, element: Element): void {\r\n  assert(!program.instancesByName.has(element.internalName));\r\n  program.instancesByName.set(element.internalName, element);\r\n}\r\n\r\n/** Attempts to merge two elements. Returns the merged element on success. */\r\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\r\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\r\n  // suggesting to just merge what seems to be possible for now and revisit later.\r\n  assert(older.program === newer.program);\r\n  assert(!newer.members);\r\n  var merged: DeclaredElement | null = null;\r\n  switch (older.kind) {\r\n    case ElementKind.FUNCTION_PROTOTYPE: {\r\n      switch (newer.kind) {\r\n        case ElementKind.NAMESPACE: {\r\n          copyMembers(newer, older);\r\n          merged = <DeclaredElement>older;\r\n          break;\r\n        }\r\n        case ElementKind.TYPEDEFINITION: {\r\n          if (!older.shadowType) {\r\n            older.shadowType = <TypeDefinition>newer;\r\n            copyMembers(newer, older);\r\n            merged = <DeclaredElement>older;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.CLASS_PROTOTYPE:\r\n    case ElementKind.ENUM: {\r\n      if (newer.kind == ElementKind.NAMESPACE) {\r\n        copyMembers(newer, older);\r\n        merged = <DeclaredElement>older;\r\n        break;\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.NAMESPACE: {\r\n      switch (newer.kind) {\r\n        case ElementKind.ENUM:\r\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\r\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\r\n          copyMembers(older, newer);\r\n          merged = <DeclaredElement>newer;\r\n          break;\r\n        }\r\n        case ElementKind.NAMESPACE: {\r\n          copyMembers(newer, older);\r\n          merged = <DeclaredElement>older;\r\n          break;\r\n        }\r\n        case ElementKind.TYPEDEFINITION: {\r\n          if (!older.shadowType) {\r\n            older.shadowType = <TypeDefinition>newer;\r\n            copyMembers(newer, older);\r\n            merged = <DeclaredElement>older;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.GLOBAL: {\r\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\r\n        if (!older.shadowType) {\r\n          older.shadowType = <TypeDefinition>newer;\r\n          copyMembers(newer, older);\r\n          merged = <DeclaredElement>older;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case ElementKind.TYPEDEFINITION: {\r\n      switch (newer.kind) {\r\n        case ElementKind.GLOBAL:\r\n        case ElementKind.FUNCTION_PROTOTYPE:\r\n        case ElementKind.NAMESPACE: {\r\n          if (!newer.shadowType) {\r\n            newer.shadowType = <TypeDefinition>older;\r\n            copyMembers(older, newer);\r\n            merged = <DeclaredElement>newer;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  if (merged) {\r\n    if (older.is(CommonFlags.EXPORT) != newer.is(CommonFlags.EXPORT)) {\r\n      older.program.error(\r\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\r\n        merged.identifierNode.range, merged.identifierNode.text\r\n      );\r\n    }\r\n  }\r\n  return merged;\r\n}\r\n\r\n/** Copies the members of `src` to `dest`. */\r\nfunction copyMembers(src: Element, dest: Element): void {\r\n  var srcMembers = src.members;\r\n  if (srcMembers) {\r\n    let destMembers = dest.members;\r\n    if (!destMembers) dest.members = destMembers = new Map();\r\n    for (let [memberName, member] of srcMembers) {\r\n      destMembers.set(memberName, member);\r\n    }\r\n  }\r\n}\r\n\r\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\r\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\r\n  switch (parent.kind) {\r\n    case ElementKind.FILE: {\r\n      if (asGlobal) return name;\r\n      return parent.internalName + PATH_DELIMITER + name;\r\n    }\r\n    case ElementKind.FUNCTION: {\r\n      if (asGlobal) return name;\r\n      assert(!isInstance);\r\n      return parent.internalName + INNER_DELIMITER + name;\r\n    }\r\n    default: {\r\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\r\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\r\n    }\r\n  }\r\n}\r\n","/**\r\n * A thin wrapper around Binaryen's C-API.\r\n * @module module\r\n *//***/\r\n\r\nimport {\r\n  Target\r\n} from \"./compiler\";\r\n\r\nexport type ModuleRef = usize;\r\nexport type FunctionTypeRef = usize;\r\nexport type FunctionRef = usize;\r\nexport type ExpressionRef = usize;\r\nexport type GlobalRef = usize;\r\nexport type ImportRef = usize;\r\nexport type ExportRef = usize;\r\nexport type RelooperRef = usize;\r\nexport type RelooperBlockRef = usize;\r\nexport type Index = u32;\r\n\r\nexport enum NativeType {\r\n  None = _BinaryenTypeNone(),\r\n  I32  = _BinaryenTypeInt32(),\r\n  I64  = _BinaryenTypeInt64(),\r\n  F32  = _BinaryenTypeFloat32(),\r\n  F64  = _BinaryenTypeFloat64(),\r\n  V128 = _BinaryenTypeVec128(),\r\n  Unreachable = _BinaryenTypeUnreachable(),\r\n  Auto = _BinaryenTypeAuto()\r\n}\r\n\r\nexport enum ExpressionId {\r\n  Invalid = _BinaryenInvalidId(),\r\n  Block = _BinaryenBlockId(),\r\n  If = _BinaryenIfId(),\r\n  Loop = _BinaryenLoopId(),\r\n  Break = _BinaryenBreakId(),\r\n  Switch = _BinaryenSwitchId(),\r\n  Call = _BinaryenCallId(),\r\n  CallIndirect = _BinaryenCallIndirectId(),\r\n  GetLocal = _BinaryenGetLocalId(),\r\n  SetLocal = _BinaryenSetLocalId(),\r\n  GetGlobal = _BinaryenGetGlobalId(),\r\n  SetGlobal = _BinaryenSetGlobalId(),\r\n  Load = _BinaryenLoadId(),\r\n  Store = _BinaryenStoreId(),\r\n  Const = _BinaryenConstId(),\r\n  Unary = _BinaryenUnaryId(),\r\n  Binary = _BinaryenBinaryId(),\r\n  Select = _BinaryenSelectId(),\r\n  Drop = _BinaryenDropId(),\r\n  Return = _BinaryenReturnId(),\r\n  Host = _BinaryenHostId(),\r\n  Nop = _BinaryenNopId(),\r\n  Unreachable = _BinaryenUnreachableId(),\r\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\r\n  AtomicRMW = _BinaryenAtomicRMWId(),\r\n  AtomicWait = _BinaryenAtomicWaitId(),\r\n  AtomicWake = _BinaryenAtomicWakeId(),\r\n  SIMDExtract = _BinaryenSIMDExtractId(),\r\n  SIMDReplace = _BinaryenSIMDReplaceId(),\r\n  SIMDShuffle = _BinaryenSIMDShuffleId(),\r\n  SIMDBitselect = _BinaryenSIMDBitselectId(),\r\n  SIMDShift = _BinaryenSIMDShiftId(),\r\n  MemoryInit = _BinaryenMemoryInitId(),\r\n  DataDrop = _BinaryenDataDropId(),\r\n  MemoryCopy = _BinaryenMemoryCopyId(),\r\n  MemoryFill = _BinaryenMemoryFillId()\r\n}\r\n\r\nexport enum UnaryOp {\r\n  ClzI32 = _BinaryenClzInt32(),\r\n  CtzI32 = _BinaryenCtzInt32(),\r\n  PopcntI32 = _BinaryenPopcntInt32(),\r\n  NegF32 = _BinaryenNegFloat32(),\r\n  AbsF32 = _BinaryenAbsFloat32(),\r\n  CeilF32 = _BinaryenCeilFloat32(),\r\n  FloorF32 = _BinaryenFloorFloat32(),\r\n  TruncF32 = _BinaryenTruncFloat32(),\r\n  NearestF32 = _BinaryenNearestFloat32(),\r\n  SqrtF32 = _BinaryenSqrtFloat32(),\r\n  EqzI32 = _BinaryenEqZInt32(),\r\n  ClzI64 = _BinaryenClzInt64(),\r\n  CtzI64 = _BinaryenCtzInt64(),\r\n  PopcntI64 = _BinaryenPopcntInt64(),\r\n  NegF64 = _BinaryenNegFloat64(),\r\n  AbsF64 = _BinaryenAbsFloat64(),\r\n  CeilF64 = _BinaryenCeilFloat64(),\r\n  FloorF64 = _BinaryenFloorFloat64(),\r\n  TruncF64 = _BinaryenTruncFloat64(),\r\n  NearestF64 = _BinaryenNearestFloat64(),\r\n  SqrtF64 = _BinaryenSqrtFloat64(),\r\n  EqzI64 = _BinaryenEqZInt64(),\r\n  ExtendI32 = _BinaryenExtendSInt32(),\r\n  ExtendU32 = _BinaryenExtendUInt32(),\r\n  WrapI64 = _BinaryenWrapInt64(),\r\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\r\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\r\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\r\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\r\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\r\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\r\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\r\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\r\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\r\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\r\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\r\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\r\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\r\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\r\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\r\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\r\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\r\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\r\n  PromoteF32 = _BinaryenPromoteFloat32(),\r\n  DemoteF64 = _BinaryenDemoteFloat64(),\r\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\r\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\r\n\r\n  // see: https://github.com/WebAssembly/sign-extension-ops\r\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\r\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\r\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\r\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\r\n  ExtendI32ToI64 = _BinaryenExtendS32Int64(),\r\n\r\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\r\n  // TruncF32ToI32Sat\r\n  // TruncF32ToU32Sat\r\n  // TruncF64ToI32Sat\r\n  // TruncF64ToU32Sat\r\n  // TruncF32ToI64Sat\r\n  // TruncF32ToU64Sat\r\n  // TruncF64ToI64Sat\r\n  // TruncF64ToU64Sat\r\n\r\n  // see: https://github.com/WebAssembly/simd\r\n  SplatVecI8x16 = _BinaryenSplatVecI8x16(),\r\n  SplatVecI16x8 = _BinaryenSplatVecI16x8(),\r\n  SplatVecI32x4 = _BinaryenSplatVecI32x4(),\r\n  SplatVecI64x2 = _BinaryenSplatVecI64x2(),\r\n  SplatVecF32x4 = _BinaryenSplatVecF32x4(),\r\n  SplatVecF64x2 = _BinaryenSplatVecF64x2(),\r\n  NotVec128 = _BinaryenNotVec128(),\r\n  NegVecI8x16 = _BinaryenNegVecI8x16(),\r\n  AnyTrueVecI8x16 = _BinaryenAnyTrueVecI8x16(),\r\n  AllTrueVecI8x16 = _BinaryenAllTrueVecI8x16(),\r\n  NegVecI16x8 = _BinaryenNegVecI16x8(),\r\n  AnyTrueVecI16x8 = _BinaryenAnyTrueVecI16x8(),\r\n  AllTrueVecI16x8 = _BinaryenAllTrueVecI16x8(),\r\n  NegVecI32x4 = _BinaryenNegVecI32x4(),\r\n  AnyTrueVecI32x4 = _BinaryenAnyTrueVecI32x4(),\r\n  AllTrueVecI32x4 = _BinaryenAllTrueVecI32x4(),\r\n  NegVecI64x2 = _BinaryenNegVecI64x2(),\r\n  AnyTrueVecI64x2 = _BinaryenAnyTrueVecI64x2(),\r\n  AllTrueVecI64x2 = _BinaryenAllTrueVecI64x2(),\r\n  AbsVecF32x4 = _BinaryenAbsVecF32x4(),\r\n  NegVecF32x4 = _BinaryenNegVecF32x4(),\r\n  SqrtVecF32x4 = _BinaryenSqrtVecF32x4(),\r\n  AbsVecF64x2 = _BinaryenAbsVecF64x2(),\r\n  NegVecF64x2 = _BinaryenNegVecF64x2(),\r\n  SqrtVecF64x2 = _BinaryenSqrtVecF64x2(),\r\n  TruncSatSVecF32x4ToVecI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\r\n  TruncSatUVecF32x4ToVecI32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\r\n  TruncSatSVecF64x2ToVecI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\r\n  TruncSatUVecF64x2ToVecI64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\r\n  ConvertSVecI32x4ToVecF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\r\n  ConvertUVecI32x4ToVecF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\r\n  ConvertSVecI64x2ToVecF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\r\n  ConvertUVecI64x2ToVecF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2()\r\n}\r\n\r\nexport enum BinaryOp {\r\n  AddI32 = _BinaryenAddInt32(),\r\n  SubI32 = _BinaryenSubInt32(),\r\n  MulI32 = _BinaryenMulInt32(),\r\n  DivI32 = _BinaryenDivSInt32(),\r\n  DivU32 = _BinaryenDivUInt32(),\r\n  RemI32 = _BinaryenRemSInt32(),\r\n  RemU32 = _BinaryenRemUInt32(),\r\n  AndI32 = _BinaryenAndInt32(),\r\n  OrI32 = _BinaryenOrInt32(),\r\n  XorI32 = _BinaryenXorInt32(),\r\n  ShlI32 = _BinaryenShlInt32(),\r\n  ShrU32 = _BinaryenShrUInt32(),\r\n  ShrI32 = _BinaryenShrSInt32(),\r\n  RotlI32 = _BinaryenRotLInt32(),\r\n  RotrI32 = _BinaryenRotRInt32(),\r\n  EqI32 = _BinaryenEqInt32(),\r\n  NeI32 = _BinaryenNeInt32(),\r\n  LtI32 = _BinaryenLtSInt32(),\r\n  LtU32 = _BinaryenLtUInt32(),\r\n  LeI32 = _BinaryenLeSInt32(),\r\n  LeU32 = _BinaryenLeUInt32(),\r\n  GtI32 = _BinaryenGtSInt32(),\r\n  GtU32 = _BinaryenGtUInt32(),\r\n  GeI32 = _BinaryenGeSInt32(),\r\n  GeU32 = _BinaryenGeUInt32(),\r\n  AddI64 = _BinaryenAddInt64(),\r\n  SubI64 = _BinaryenSubInt64(),\r\n  MulI64 = _BinaryenMulInt64(),\r\n  DivI64 = _BinaryenDivSInt64(),\r\n  DivU64 = _BinaryenDivUInt64(),\r\n  RemI64 = _BinaryenRemSInt64(),\r\n  RemU64 = _BinaryenRemUInt64(),\r\n  AndI64 = _BinaryenAndInt64(),\r\n  OrI64 = _BinaryenOrInt64(),\r\n  XorI64 = _BinaryenXorInt64(),\r\n  ShlI64 = _BinaryenShlInt64(),\r\n  ShrU64 = _BinaryenShrUInt64(),\r\n  ShrI64 = _BinaryenShrSInt64(),\r\n  RotlI64 = _BinaryenRotLInt64(),\r\n  RotrI64 = _BinaryenRotRInt64(),\r\n  EqI64 = _BinaryenEqInt64(),\r\n  NeI64 = _BinaryenNeInt64(),\r\n  LtI64 = _BinaryenLtSInt64(),\r\n  LtU64 = _BinaryenLtUInt64(),\r\n  LeI64 = _BinaryenLeSInt64(),\r\n  LeU64 = _BinaryenLeUInt64(),\r\n  GtI64 = _BinaryenGtSInt64(),\r\n  GtU64 = _BinaryenGtUInt64(),\r\n  GeI64 = _BinaryenGeSInt64(),\r\n  GeU64 = _BinaryenGeUInt64(),\r\n  AddF32 = _BinaryenAddFloat32(),\r\n  SubF32 = _BinaryenSubFloat32(),\r\n  MulF32 = _BinaryenMulFloat32(),\r\n  DivF32 = _BinaryenDivFloat32(),\r\n  CopysignF32 = _BinaryenCopySignFloat32(),\r\n  MinF32 = _BinaryenMinFloat32(),\r\n  MaxF32 = _BinaryenMaxFloat32(),\r\n  EqF32 = _BinaryenEqFloat32(),\r\n  NeF32 = _BinaryenNeFloat32(),\r\n  LtF32 = _BinaryenLtFloat32(),\r\n  LeF32 = _BinaryenLeFloat32(),\r\n  GtF32 = _BinaryenGtFloat32(),\r\n  GeF32 = _BinaryenGeFloat32(),\r\n  AddF64 = _BinaryenAddFloat64(),\r\n  SubF64 = _BinaryenSubFloat64(),\r\n  MulF64 = _BinaryenMulFloat64(),\r\n  DivF64 = _BinaryenDivFloat64(),\r\n  CopysignF64 = _BinaryenCopySignFloat64(),\r\n  MinF64 = _BinaryenMinFloat64(),\r\n  MaxF64 = _BinaryenMaxFloat64(),\r\n  EqF64 = _BinaryenEqFloat64(),\r\n  NeF64 = _BinaryenNeFloat64(),\r\n  LtF64 = _BinaryenLtFloat64(),\r\n  LeF64 = _BinaryenLeFloat64(),\r\n  GtF64 = _BinaryenGtFloat64(),\r\n  GeF64 = _BinaryenGeFloat64(),\r\n\r\n  // see: https://github.com/WebAssembly/simd\r\n  EqVecI8x16 = _BinaryenEqVecI8x16(),\r\n  NeVecI8x16 = _BinaryenNeVecI8x16(),\r\n  LtSVecI8x16 = _BinaryenLtSVecI8x16(),\r\n  LtUVecI8x16 = _BinaryenLtUVecI8x16(),\r\n  LeSVecI8x16 = _BinaryenLeSVecI8x16(),\r\n  LeUVecI8x16 = _BinaryenLeUVecI8x16(),\r\n  GtSVecI8x16 = _BinaryenGtSVecI8x16(),\r\n  GtUVecI8x16 = _BinaryenGtUVecI8x16(),\r\n  GeSVecI8x16 = _BinaryenGeSVecI8x16(),\r\n  GeUVecI8x16 = _BinaryenGeUVecI8x16(),\r\n  EqVecI16x8 = _BinaryenEqVecI16x8(),\r\n  NeVecI16x8 = _BinaryenNeVecI16x8(),\r\n  LtSVecI16x8 = _BinaryenLtSVecI16x8(),\r\n  LtUVecI16x8 = _BinaryenLtUVecI16x8(),\r\n  LeSVecI16x8 = _BinaryenLeSVecI16x8(),\r\n  LeUVecI16x8 = _BinaryenLeUVecI16x8(),\r\n  GtSVecI16x8 = _BinaryenGtSVecI16x8(),\r\n  GtUVecI16x8 = _BinaryenGtUVecI16x8(),\r\n  GeSVecI16x8 = _BinaryenGeSVecI16x8(),\r\n  GeUVecI16x8 = _BinaryenGeUVecI16x8(),\r\n  EqVecI32x4 = _BinaryenEqVecI32x4(),\r\n  NeVecI32x4 = _BinaryenNeVecI32x4(),\r\n  LtSVecI32x4 = _BinaryenLtSVecI32x4(),\r\n  LtUVecI32x4 = _BinaryenLtUVecI32x4(),\r\n  LeSVecI32x4 = _BinaryenLeSVecI32x4(),\r\n  LeUVecI32x4 = _BinaryenLeUVecI32x4(),\r\n  GtSVecI32x4 = _BinaryenGtSVecI32x4(),\r\n  GtUVecI32x4 = _BinaryenGtUVecI32x4(),\r\n  GeSVecI32x4 = _BinaryenGeSVecI32x4(),\r\n  GeUVecI32x4 = _BinaryenGeUVecI32x4(),\r\n  EqVecF32x4 = _BinaryenEqVecF32x4(),\r\n  NeVecF32x4 = _BinaryenNeVecF32x4(),\r\n  LtVecF32x4 = _BinaryenLtVecF32x4(),\r\n  LeVecF32x4 = _BinaryenLeVecF32x4(),\r\n  GtVecF32x4 = _BinaryenGtVecF32x4(),\r\n  GeVecF32x4 = _BinaryenGeVecF32x4(),\r\n  EqVecF64x2 = _BinaryenEqVecF64x2(),\r\n  NeVecF64x2 = _BinaryenNeVecF64x2(),\r\n  LtVecF64x2 = _BinaryenLtVecF64x2(),\r\n  LeVecF64x2 = _BinaryenLeVecF64x2(),\r\n  GtVecF64x2 = _BinaryenGtVecF64x2(),\r\n  GeVecF64x2 = _BinaryenGeVecF64x2(),\r\n  AndVec128 = _BinaryenAndVec128(),\r\n  OrVec128 = _BinaryenOrVec128(),\r\n  XorVec128 = _BinaryenXorVec128(),\r\n  AddVecI8x16 = _BinaryenAddVecI8x16(),\r\n  AddSatSVecI8x16 = _BinaryenAddSatSVecI8x16(),\r\n  AddSatUVecI8x16 = _BinaryenAddSatUVecI8x16(),\r\n  SubVecI8x16 = _BinaryenSubVecI8x16(),\r\n  SubSatSVecI8x16 = _BinaryenSubSatSVecI8x16(),\r\n  SubSatUVecI8x16 = _BinaryenSubSatUVecI8x16(),\r\n  MulVecI8x16 = _BinaryenMulVecI8x16(),\r\n  AddVecI16x8 = _BinaryenAddVecI16x8(),\r\n  AddSatSVecI16x8 = _BinaryenAddSatSVecI16x8(),\r\n  AddSatUVecI16x8 = _BinaryenAddSatUVecI16x8(),\r\n  SubVecI16x8 = _BinaryenSubVecI16x8(),\r\n  SubSatSVecI16x8 = _BinaryenSubSatSVecI16x8(),\r\n  SubSatUVecI16x8 = _BinaryenSubSatUVecI16x8(),\r\n  MulVecI16x8 = _BinaryenMulVecI16x8(),\r\n  AddVecI32x4 = _BinaryenAddVecI32x4(),\r\n  SubVecI32x4 = _BinaryenSubVecI32x4(),\r\n  MulVecI32x4 = _BinaryenMulVecI32x4(),\r\n  AddVecI64x2 = _BinaryenAddVecI64x2(),\r\n  SubVecI64x2 = _BinaryenSubVecI64x2(),\r\n  AddVecF32x4 = _BinaryenAddVecF32x4(),\r\n  SubVecF32x4 = _BinaryenSubVecF32x4(),\r\n  MulVecF32x4 = _BinaryenMulVecF32x4(),\r\n  DivVecF32x4 = _BinaryenDivVecF32x4(),\r\n  MinVecF32x4 = _BinaryenMinVecF32x4(),\r\n  MaxVecF32x4 = _BinaryenMaxVecF32x4(),\r\n  AddVecF64x2 = _BinaryenAddVecF64x2(),\r\n  SubVecF64x2 = _BinaryenSubVecF64x2(),\r\n  MulVecF64x2 = _BinaryenMulVecF64x2(),\r\n  DivVecF64x2 = _BinaryenDivVecF64x2(),\r\n  MinVecF64x2 = _BinaryenMinVecF64x2(),\r\n  MaxVecF64x2 = _BinaryenMaxVecF64x2()\r\n}\r\n\r\nexport enum HostOp {\r\n  CurrentMemory = _BinaryenCurrentMemory(),\r\n  GrowMemory = _BinaryenGrowMemory(),\r\n}\r\n\r\nexport enum AtomicRMWOp {\r\n  Add = _BinaryenAtomicRMWAdd(),\r\n  Sub = _BinaryenAtomicRMWSub(),\r\n  And = _BinaryenAtomicRMWAnd(),\r\n  Or = _BinaryenAtomicRMWOr(),\r\n  Xor = _BinaryenAtomicRMWXor(),\r\n  Xchg = _BinaryenAtomicRMWXchg()\r\n}\r\n\r\nexport enum SIMDExtractOp {\r\n  ExtractLaneSVecI8x16 = _BinaryenExtractLaneSVecI8x16(),\r\n  ExtractLaneUVecI8x16 = _BinaryenExtractLaneUVecI8x16(),\r\n  ExtractLaneSVecI16x8 = _BinaryenExtractLaneSVecI16x8(),\r\n  ExtractLaneUVecI16x8 = _BinaryenExtractLaneUVecI16x8(),\r\n  ExtractLaneVecI32x4 = _BinaryenExtractLaneVecI32x4(),\r\n  ExtractLaneVecI64x2 = _BinaryenExtractLaneVecI64x2(),\r\n  ExtractLaneVecF32x4 = _BinaryenExtractLaneVecF32x4(),\r\n  ExtractLaneVecF64x2 = _BinaryenExtractLaneVecF64x2(),\r\n}\r\n\r\nexport enum SIMDReplaceOp {\r\n  ReplaceLaneVecI8x16 = _BinaryenReplaceLaneVecI8x16(),\r\n  ReplaceLaneVecI16x8 = _BinaryenReplaceLaneVecI16x8(),\r\n  ReplaceLaneVecI32x4 = _BinaryenReplaceLaneVecI32x4(),\r\n  ReplaceLaneVecI64x2 = _BinaryenReplaceLaneVecI64x2(),\r\n  ReplaceLaneVecF32x4 = _BinaryenReplaceLaneVecF32x4(),\r\n  ReplaceLaneVecF64x2 = _BinaryenReplaceLaneVecF64x2()\r\n}\r\n\r\nexport enum SIMDShiftOp {\r\n  ShlVecI8x16 = _BinaryenShlVecI8x16(),\r\n  ShrSVecI8x16 = _BinaryenShrSVecI8x16(),\r\n  ShrUVecI8x16 = _BinaryenShrUVecI8x16(),\r\n  ShlVecI16x8 = _BinaryenShlVecI16x8(),\r\n  ShrSVecI16x8 = _BinaryenShrSVecI16x8(),\r\n  ShrUVecI16x8 = _BinaryenShrUVecI16x8(),\r\n  ShlVecI32x4 = _BinaryenShlVecI32x4(),\r\n  ShrSVecI32x4 = _BinaryenShrSVecI32x4(),\r\n  ShrUVecI32x4 = _BinaryenShrUVecI32x4(),\r\n  ShlVecI64x2 = _BinaryenShlVecI64x2(),\r\n  ShrSVecI64x2 = _BinaryenShrSVecI64x2(),\r\n  ShrUVecI64x2 = _BinaryenShrUVecI64x2()\r\n}\r\n\r\nexport class MemorySegment {\r\n\r\n  buffer: Uint8Array;\r\n  offset: I64;\r\n\r\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\r\n    var segment = new MemorySegment();\r\n    segment.buffer = buffer;\r\n    segment.offset = offset;\r\n    return segment;\r\n  }\r\n}\r\n\r\nexport class Module {\r\n\r\n  ref: ModuleRef;\r\n\r\n  private lit: usize;\r\n\r\n  static create(): Module {\r\n    var module = new Module();\r\n    module.ref = _BinaryenModuleCreate();\r\n    module.lit = memory.allocate(_BinaryenSizeofLiteral());\r\n    return module;\r\n  }\r\n\r\n  static createFrom(buffer: Uint8Array): Module {\r\n    var cArr = allocU8Array(buffer);\r\n    try {\r\n      let module = new Module();\r\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\r\n      module.lit = memory.allocate(_BinaryenSizeofLiteral());\r\n      return module;\r\n    } finally {\r\n      memory.free(changetype<usize>(cArr));\r\n    }\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  // types\r\n\r\n  addFunctionType(\r\n    name: string,\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  getFunctionTypeBySignature(\r\n    result: NativeType,\r\n    paramTypes: NativeType[] | null\r\n  ): FunctionTypeRef {\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeFunctionType(name: string): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveFunctionType(this.ref, cStr);\r\n  }\r\n\r\n  // constants\r\n\r\n  createI32(value: i32): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralInt32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createI64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF32(value: f32): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralFloat32(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createF64(value: f64): ExpressionRef {\r\n    var out = this.lit;\r\n    _BinaryenLiteralFloat64(out, value);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  createV128(bytes: Uint8Array): ExpressionRef {\r\n    assert(bytes.length == 16);\r\n    var out = this.lit;\r\n    for (let i = 0; i < 16; ++i) store<u8>(out + i, bytes[i]);\r\n    _BinaryenLiteralVec128(out, out);\r\n    return _BinaryenConst(this.ref, out);\r\n  }\r\n\r\n  // expressions\r\n\r\n  createUnary(\r\n    op: UnaryOp,\r\n    expr: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenUnary(this.ref, op, expr);\r\n  }\r\n\r\n  createBinary(\r\n    op: BinaryOp,\r\n    left: ExpressionRef,\r\n    right: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenBinary(this.ref, op, left, right);\r\n  }\r\n\r\n  createHost(\r\n    op: HostOp,\r\n    name: string | null = null,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  createGetLocal(\r\n    index: i32,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenGetLocal(this.ref, index, type);\r\n  }\r\n\r\n  createTeeLocal(\r\n    index: i32,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenTeeLocal(this.ref, index, value);\r\n  }\r\n\r\n  createGetGlobal(\r\n    name: string,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenGetGlobal(this.ref, cStr, type);\r\n  }\r\n\r\n  createLoad(\r\n    bytes: Index,\r\n    signed: bool,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0,\r\n    align: Index = bytes // naturally aligned by default\r\n  ): ExpressionRef {\r\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\r\n  }\r\n\r\n  createStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0,\r\n    align: Index = bytes // naturally aligned by default\r\n  ): ExpressionRef {\r\n    return _BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\r\n  }\r\n\r\n  createAtomicLoad(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\r\n  }\r\n\r\n  createAtomicStore(\r\n    bytes: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType,\r\n    offset: Index = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicRMW(\r\n    op: AtomicRMWOp,\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    value: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\r\n  }\r\n\r\n  createAtomicCmpxchg(\r\n    bytes: Index,\r\n    offset: Index,\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    replacement: ExpressionRef,\r\n    type: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\r\n  }\r\n\r\n  createAtomicWait(\r\n    ptr: ExpressionRef,\r\n    expected: ExpressionRef,\r\n    timeout: ExpressionRef,\r\n    expectedType: NativeType\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\r\n  }\r\n\r\n  createAtomicWake(\r\n    ptr: ExpressionRef,\r\n    wakeCount: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenAtomicWake(this.ref, ptr, wakeCount);\r\n  }\r\n\r\n  // statements\r\n\r\n  createSetLocal(\r\n    index: Index,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSetLocal(this.ref, index, value);\r\n  }\r\n\r\n  createSetGlobal(\r\n    name: string,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenSetGlobal(this.ref, cStr, value);\r\n  }\r\n\r\n  createBlock(\r\n    label: string | null,\r\n    children: ExpressionRef[],\r\n    type: NativeType = NativeType.None\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    var cArr = allocPtrArray(children);\r\n    try {\r\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  createBreak(\r\n    label: string | null,\r\n    condition: ExpressionRef = 0,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    return _BinaryenBreak(this.ref, cStr, condition, value);\r\n  }\r\n\r\n  createDrop(\r\n    expression: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenDrop(this.ref, expression);\r\n  }\r\n\r\n  createLoop(\r\n    label: string | null,\r\n    body: ExpressionRef\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(label);\r\n    return _BinaryenLoop(this.ref, cStr, body);\r\n  }\r\n\r\n  createIf(\r\n    condition: ExpressionRef,\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createNop(): ExpressionRef {\r\n    return _BinaryenNop(this.ref);\r\n  }\r\n\r\n  createReturn(\r\n    expression: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    return _BinaryenReturn(this.ref, expression);\r\n  }\r\n\r\n  createSelect(\r\n    ifTrue: ExpressionRef,\r\n    ifFalse: ExpressionRef,\r\n    condition: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\r\n  }\r\n\r\n  createSwitch(\r\n    names: string[],\r\n    defaultName: string | null,\r\n    condition: ExpressionRef,\r\n    value: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numNames = names.length;\r\n    var strs = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      strs[i] = this.allocStringCached(names[i]);\r\n    }\r\n    var cArr = allocI32Array(strs);\r\n    var cStr = this.allocStringCached(defaultName);\r\n    try {\r\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  createCall(\r\n    target: string,\r\n    operands: ExpressionRef[] | null,\r\n    returnType: NativeType\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(target);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  createCallIndirect(\r\n    index: ExpressionRef,\r\n    operands: ExpressionRef[] | null,\r\n    typeName: string\r\n  ): ExpressionRef {\r\n    var cStr = this.allocStringCached(typeName);\r\n    var cArr = allocPtrArray(operands);\r\n    try {\r\n      return _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  createUnreachable(): ExpressionRef {\r\n    return _BinaryenUnreachable(this.ref);\r\n  }\r\n\r\n  // bulk memory\r\n\r\n  createMemoryCopy(\r\n    dest: ExpressionRef,\r\n    source: ExpressionRef,\r\n    size: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenMemoryCopy(this.ref, dest, source, size);\r\n  }\r\n\r\n  createMemoryFill(\r\n    dest: ExpressionRef,\r\n    value: ExpressionRef,\r\n    size: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenMemoryFill(this.ref, dest, value, size);\r\n  }\r\n\r\n  // simd\r\n\r\n  createSIMDExtract(\r\n    op: SIMDExtractOp,\r\n    vec: ExpressionRef,\r\n    idx: u8\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDExtract(this.ref, op, vec, idx);\r\n  }\r\n\r\n  createSIMDReplace(\r\n    op: SIMDReplaceOp,\r\n    vec: ExpressionRef,\r\n    idx: u8,\r\n    value: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDReplace(this.ref, op, vec, idx, value);\r\n  }\r\n\r\n  createSIMDShuffle(\r\n    vec1: ExpressionRef,\r\n    vec2: ExpressionRef,\r\n    mask: Uint8Array\r\n  ): ExpressionRef {\r\n    assert(mask.length == 16);\r\n    var cArr = allocU8Array(mask);\r\n    try {\r\n      return _BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  createSIMDBitselect(\r\n    vec1: ExpressionRef,\r\n    vec2: ExpressionRef,\r\n    cond: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDBitselect(this.ref, vec1, vec2, cond);\r\n  }\r\n\r\n  createSIMDShift(\r\n    op: SIMDShiftOp,\r\n    vec: ExpressionRef,\r\n    shift: ExpressionRef\r\n  ): ExpressionRef {\r\n    return _BinaryenSIMDShift(this.ref, op, vec, shift);\r\n  }\r\n\r\n  // meta\r\n\r\n  addGlobal(\r\n    name: string,\r\n    type: NativeType,\r\n    mutable: bool,\r\n    initializer: ExpressionRef\r\n  ): GlobalRef {\r\n    var cStr = this.allocStringCached(name);\r\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable ? 1 : 0, initializer);\r\n  }\r\n\r\n  removeGlobal(\r\n    name: string\r\n  ): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveGlobal(this.ref, cStr);\r\n  }\r\n\r\n  addFunction(\r\n    name: string,\r\n    type: FunctionTypeRef,\r\n    varTypes: NativeType[] | null,\r\n    body: ExpressionRef\r\n  ): FunctionRef {\r\n    var cStr = this.allocStringCached(name);\r\n    var cArr = allocI32Array(varTypes);\r\n    try {\r\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeFunction(name: string): void {\r\n    var cStr = this.allocStringCached(name);\r\n    _BinaryenRemoveFunction(this.ref, cStr);\r\n  }\r\n\r\n  private hasTemporaryFunction: bool = false;\r\n\r\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\r\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\r\n    var tempName = this.allocStringCached(\"\");\r\n    var cArr = allocI32Array(paramTypes);\r\n    try {\r\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\r\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  removeTemporaryFunction(): void {\r\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\r\n    var tempName = this.allocStringCached(\"\");\r\n    _BinaryenRemoveFunction(this.ref, tempName);\r\n    _BinaryenRemoveFunctionType(this.ref, tempName);\r\n  }\r\n\r\n  addFunctionExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addTableExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addMemoryExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  addGlobalExport(\r\n    internalName: string,\r\n    externalName: string\r\n  ): ExportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalName);\r\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\r\n  }\r\n\r\n  removeExport(externalName: string): void {\r\n    var cStr = this.allocStringCached(externalName);\r\n    _BinaryenRemoveExport(this.ref, cStr);\r\n  }\r\n\r\n  addFunctionImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    functionType: FunctionTypeRef\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\r\n  }\r\n\r\n  addTableImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\r\n  }\r\n\r\n  addMemoryImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    shared: bool = false,\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\r\n  }\r\n\r\n  addGlobalImport(\r\n    internalName: string,\r\n    externalModuleName: string,\r\n    externalBaseName: string,\r\n    globalType: NativeType\r\n  ): ImportRef {\r\n    var cStr1 = this.allocStringCached(internalName);\r\n    var cStr2 = this.allocStringCached(externalModuleName);\r\n    var cStr3 = this.allocStringCached(externalBaseName);\r\n    return _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType);\r\n  }\r\n\r\n  /** Unlimited memory constant. */\r\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\r\n\r\n  setMemory(\r\n    initial: Index,\r\n    maximum: Index,\r\n    segments: MemorySegment[],\r\n    target: Target,\r\n    exportName: string | null = null,\r\n    shared: bool = false\r\n  ): void {\r\n    var cStr = this.allocStringCached(exportName);\r\n    var k = segments.length;\r\n    var segs = new Array<usize>(k);\r\n    var offs = new Array<ExpressionRef>(k);\r\n    var sizs = new Array<Index>(k);\r\n    for (let i = 0; i < k; ++i) {\r\n      let buffer = segments[i].buffer;\r\n      let offset = segments[i].offset;\r\n      segs[i] = allocU8Array(buffer);\r\n      offs[i] = target == Target.WASM64\r\n        ? this.createI64(i64_low(offset), i64_high(offset))\r\n        : this.createI32(i64_low(offset));\r\n      sizs[i] = buffer.length;\r\n    }\r\n    var cArr1 = allocI32Array(segs);\r\n    var cArr2 = allocI32Array(offs);\r\n    var cArr3 = allocI32Array(sizs);\r\n    try {\r\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, k, shared);\r\n    } finally {\r\n      memory.free(cArr3);\r\n      memory.free(cArr2);\r\n      memory.free(cArr1);\r\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\r\n    }\r\n  }\r\n\r\n  setFunctionTable(\r\n    initial: Index,\r\n    maximum: Index,\r\n    funcs: string[]\r\n  ): void {\r\n    var numNames = funcs.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = this.allocStringCached(funcs[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  setStart(func: FunctionRef): void {\r\n    _BinaryenSetStart(this.ref, func);\r\n  }\r\n\r\n  getOptimizeLevel(): i32 {\r\n    return _BinaryenGetOptimizeLevel();\r\n  }\r\n\r\n  setOptimizeLevel(level: i32 = 2): void {\r\n    _BinaryenSetOptimizeLevel(level);\r\n  }\r\n\r\n  getShrinkLevel(): i32 {\r\n    return _BinaryenGetShrinkLevel();\r\n  }\r\n\r\n  setShrinkLevel(level: i32 = 1): void {\r\n    _BinaryenSetShrinkLevel(level);\r\n  }\r\n\r\n  setDebugInfo(on: bool = false): void {\r\n    _BinaryenSetDebugInfo(on);\r\n  }\r\n\r\n  optimize(func: FunctionRef = 0): void {\r\n    if (func) {\r\n      _BinaryenFunctionOptimize(func, this.ref);\r\n    } else {\r\n      _BinaryenModuleOptimize(this.ref);\r\n    }\r\n  }\r\n\r\n  runPasses(passes: string[], func: FunctionRef = 0): void {\r\n    var numNames = passes.length;\r\n    var names = new Array<usize>(numNames);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      names[i] = allocString(passes[i]);\r\n    }\r\n    var cArr = allocI32Array(names);\r\n    try {\r\n      if (func) {\r\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\r\n      } else {\r\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\r\n      }\r\n    } finally {\r\n      memory.free(cArr);\r\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\r\n    }\r\n  }\r\n\r\n  private cachedPrecomputeNames: usize = 0;\r\n\r\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\r\n    // remember the previous optimize levels and set to max instead, to be sure\r\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\r\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\r\n    var previousDebugInfo = _BinaryenGetDebugInfo();\r\n    _BinaryenSetOptimizeLevel(4);\r\n    _BinaryenSetShrinkLevel(0);\r\n    _BinaryenSetDebugInfo(false);\r\n\r\n    // wrap the expression in a temp. function and run the precompute pass on it\r\n    var type = _BinaryenExpressionGetType(expr);\r\n    var func = this.addTemporaryFunction(type, null, expr);\r\n    var names = this.cachedPrecomputeNames;\r\n    if (!names) {\r\n      this.cachedPrecomputeNames = names = allocI32Array([ this.allocStringCached(\"precompute\") ]);\r\n    }\r\n    _BinaryenFunctionRunPasses(func, this.ref, names, 1);\r\n    expr = _BinaryenFunctionGetBody(func);\r\n    this.removeTemporaryFunction();\r\n\r\n    // reset optimize levels to previous\r\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\r\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\r\n    _BinaryenSetDebugInfo(previousDebugInfo);\r\n    return expr;\r\n  }\r\n\r\n  validate(): bool {\r\n    return _BinaryenModuleValidate(this.ref) == 1;\r\n  }\r\n\r\n  interpret(): void {\r\n    _BinaryenModuleInterpret(this.ref);\r\n  }\r\n\r\n  toBinary(sourceMapUrl: string | null): BinaryModule {\r\n    var out = this.lit; // safe to reuse as long as..\r\n    assert(_BinaryenSizeofLiteral() >= 12);\r\n    var cStr = allocString(sourceMapUrl);\r\n    var binaryPtr: usize = 0;\r\n    var sourceMapPtr: usize = 0;\r\n    try {\r\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\r\n      binaryPtr = readInt(out);\r\n      let binaryBytes = readInt(out + 4);\r\n      sourceMapPtr = readInt(out + 4 * 2);\r\n      let ret = new BinaryModule();\r\n      ret.output = readBuffer(binaryPtr, binaryBytes);\r\n      ret.sourceMap = readString(sourceMapPtr);\r\n      return ret;\r\n    } finally {\r\n      if (cStr) memory.free(cStr);\r\n      if (binaryPtr) memory.free(binaryPtr);\r\n      if (sourceMapPtr) memory.free(sourceMapPtr);\r\n    }\r\n  }\r\n\r\n  toText(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  toAsmjs(): string {\r\n    throw new Error(\"not implemented\"); // JS glue overrides this\r\n  }\r\n\r\n  private cachedStrings: Map<string,usize> = new Map();\r\n\r\n  private allocStringCached(str: string | null): usize {\r\n    if (str == null) return 0;\r\n    var cachedStrings = this.cachedStrings;\r\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\r\n    var ptr = allocString(str);\r\n    cachedStrings.set(str, ptr);\r\n    return ptr;\r\n  }\r\n\r\n  dispose(): void {\r\n    assert(this.ref);\r\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\r\n    this.cachedStrings = new Map();\r\n    memory.free(this.lit);\r\n    memory.free(this.cachedPrecomputeNames);\r\n    this.cachedPrecomputeNames = 0;\r\n    _BinaryenModuleDispose(this.ref);\r\n    this.ref = 0;\r\n  }\r\n\r\n  createRelooper(): Relooper {\r\n    return Relooper.create(this);\r\n  }\r\n\r\n  cloneExpression(\r\n    expr: ExpressionRef,\r\n    noSideEffects: bool = false,\r\n    maxDepth: i32 = i32.MAX_VALUE\r\n  ): ExpressionRef { // currently supports side effect free expressions only\r\n    if (maxDepth < 0) return 0;\r\n    maxDepth -= 1;\r\n\r\n    var nested1: ExpressionRef,\r\n        nested2: ExpressionRef;\r\n\r\n        switch (_BinaryenExpressionGetId(expr)) {\r\n      case ExpressionId.Const: {\r\n        switch (_BinaryenExpressionGetType(expr)) {\r\n          case NativeType.I32: {\r\n            return this.createI32(_BinaryenConstGetValueI32(expr));\r\n          }\r\n          case NativeType.I64: {\r\n            return this.createI64(\r\n              _BinaryenConstGetValueI64Low(expr),\r\n              _BinaryenConstGetValueI64High(expr)\r\n            );\r\n          }\r\n          case NativeType.F32: {\r\n            return this.createF32(_BinaryenConstGetValueF32(expr));\r\n          }\r\n          case NativeType.F64: {\r\n            return this.createF64(_BinaryenConstGetValueF64(expr));\r\n          }\r\n          case NativeType.V128: {\r\n            // TODO\r\n            return 0;\r\n          }\r\n          default: {\r\n            throw new Error(\"concrete type expected\");\r\n          }\r\n        }\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        return _BinaryenGetLocal(this.ref,\r\n          _BinaryenGetLocalGetIndex(expr),\r\n          _BinaryenExpressionGetType(expr)\r\n        );\r\n      }\r\n      case ExpressionId.GetGlobal: {\r\n        let globalName = _BinaryenGetGlobalGetName(expr);\r\n        if (!globalName) break;\r\n        return _BinaryenGetGlobal(this.ref, globalName, _BinaryenExpressionGetType(expr));\r\n      }\r\n      case ExpressionId.Load: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return (\r\n          _BinaryenLoadIsAtomic(expr)\r\n            ? _BinaryenAtomicLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n            : _BinaryenLoad(this.ref,\r\n                _BinaryenLoadGetBytes(expr),\r\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\r\n                _BinaryenLoadGetOffset(expr),\r\n                _BinaryenLoadGetAlign(expr),\r\n                _BinaryenExpressionGetType(expr),\r\n                nested1\r\n              )\r\n        );\r\n      }\r\n      case ExpressionId.Unary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\r\n      }\r\n      case ExpressionId.Binary: {\r\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\r\n          break;\r\n        }\r\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  // source map generation\r\n\r\n  addDebugInfoFile(name: string): Index {\r\n    var cStr = allocString(name);\r\n    try {\r\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\r\n    } finally {\r\n      memory.free(cStr);\r\n    }\r\n  }\r\n\r\n  getDebugInfoFile(index: Index): string | null {\r\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\r\n  }\r\n\r\n  setDebugLocation(\r\n    func: FunctionRef,\r\n    expr: ExpressionRef,\r\n    fileIndex: Index,\r\n    lineNumber: Index,\r\n    columnNumber: Index\r\n  ): void {\r\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\r\n  }\r\n}\r\n\r\n// expressions\r\n\r\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\r\n  return _BinaryenExpressionGetId(expr);\r\n}\r\n\r\nexport function getExpressionType(expr: ExpressionRef): NativeType {\r\n  return _BinaryenExpressionGetType(expr);\r\n}\r\n\r\nexport function getConstValueI32(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI32(expr);\r\n}\r\n\r\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64Low(expr);\r\n}\r\n\r\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\r\n  return _BinaryenConstGetValueI64High(expr);\r\n}\r\n\r\nexport function getConstValueF32(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF32(expr);\r\n}\r\n\r\nexport function getConstValueF64(expr: ExpressionRef): f32 {\r\n  return _BinaryenConstGetValueF64(expr);\r\n}\r\n\r\nexport function getGetLocalIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenGetLocalGetIndex(expr);\r\n}\r\n\r\nexport function getSetLocalIndex(expr: ExpressionRef): Index {\r\n  return _BinaryenSetLocalGetIndex(expr);\r\n}\r\n\r\nexport function getSetLocalValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSetLocalGetValue(expr);\r\n}\r\n\r\nexport function isTeeLocal(expr: ExpressionRef): bool {\r\n  return _BinaryenSetLocalIsTee(expr);\r\n}\r\n\r\nexport function getGetGlobalName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenGetGlobalGetName(expr));\r\n}\r\n\r\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\r\n  return _BinaryenBinaryGetOp(expr);\r\n}\r\n\r\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetLeft(expr);\r\n}\r\n\r\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBinaryGetRight(expr);\r\n}\r\n\r\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\r\n  return _BinaryenUnaryGetOp(expr);\r\n}\r\n\r\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenUnaryGetValue(expr);\r\n}\r\n\r\nexport function getLoadBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetBytes(expr);\r\n}\r\n\r\nexport function getLoadOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenLoadGetOffset(expr);\r\n}\r\n\r\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoadGetPtr(expr);\r\n}\r\n\r\nexport function isLoadSigned(expr: ExpressionRef): bool {\r\n  return _BinaryenLoadIsSigned(expr);\r\n}\r\n\r\nexport function getStoreBytes(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetBytes(expr);\r\n}\r\n\r\nexport function getStoreOffset(expr: ExpressionRef): u32 {\r\n  return _BinaryenStoreGetOffset(expr);\r\n}\r\n\r\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetPtr(expr);\r\n}\r\n\r\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenStoreGetValue(expr);\r\n}\r\n\r\nexport function getBlockName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBlockGetName(expr));\r\n}\r\n\r\nexport function getBlockChildCount(expr: ExpressionRef): Index {\r\n  return _BinaryenBlockGetNumChildren(expr);\r\n}\r\n\r\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenBlockGetChild(expr, index);\r\n}\r\n\r\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetCondition(expr);\r\n}\r\n\r\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfTrue(expr);\r\n}\r\n\r\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenIfGetIfFalse(expr);\r\n}\r\n\r\nexport function getLoopName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenLoopGetName(expr));\r\n}\r\n\r\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenLoopGetBody(expr);\r\n}\r\n\r\nexport function getBreakName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenBreakGetName(expr));\r\n}\r\n\r\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenBreakGetCondition(expr);\r\n}\r\n\r\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfTrue(expr);\r\n}\r\n\r\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetIfFalse(expr);\r\n}\r\n\r\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenSelectGetCondition(expr);\r\n}\r\n\r\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenDropGetValue(expr);\r\n}\r\n\r\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenReturnGetValue(expr);\r\n}\r\n\r\nexport function getCallTarget(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenCallGetTarget(expr));\r\n}\r\n\r\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\r\n  return _BinaryenHostGetOp(expr);\r\n}\r\n\r\nexport function getHostOperandCount(expr: ExpressionRef): Index {\r\n  return _BinaryenHostGetNumOperands(expr);\r\n}\r\n\r\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\r\n  return _BinaryenHostGetOperand(expr, index);\r\n}\r\n\r\nexport function getHostName(expr: ExpressionRef): string | null {\r\n  return readString(_BinaryenHostGetNameOperand(expr));\r\n}\r\n\r\n// functions\r\n\r\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\r\n  return _BinaryenFunctionGetBody(func);\r\n}\r\n\r\nexport function getFunctionName(func: FunctionRef): string | null {\r\n  return readString(_BinaryenFunctionGetName(func));\r\n}\r\n\r\nexport function getFunctionParamCount(func: FunctionRef): Index {\r\n  return _BinaryenFunctionGetNumParams(func);\r\n}\r\n\r\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\r\n  return _BinaryenFunctionGetParam(func, index);\r\n}\r\n\r\nexport function getFunctionResultType(func: FunctionRef): NativeType {\r\n  return _BinaryenFunctionGetResult(func);\r\n}\r\n\r\nexport class Relooper {\r\n\r\n  module: Module;\r\n  ref: RelooperRef;\r\n\r\n  static create(module: Module): Relooper {\r\n    var relooper = new Relooper();\r\n    relooper.module = module;\r\n    relooper.ref = _RelooperCreate(module.ref);\r\n    return relooper;\r\n  }\r\n\r\n  private constructor() {}\r\n\r\n  addBlock(code: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlock(this.ref, code);\r\n  }\r\n\r\n  addBranch(\r\n    from: RelooperBlockRef,\r\n    to: RelooperBlockRef,\r\n    condition: ExpressionRef = 0,\r\n    code: ExpressionRef = 0\r\n  ): void {\r\n    _RelooperAddBranch(from, to, condition, code);\r\n  }\r\n\r\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\r\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\r\n  }\r\n\r\n  addBranchForSwitch(\r\n    from: RelooperBlockRef,\r\n    to: RelooperBlockRef,\r\n    indexes: i32[],\r\n    code: ExpressionRef = 0\r\n  ): void {\r\n    var cArr = allocI32Array(indexes);\r\n    try {\r\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\r\n    } finally {\r\n      memory.free(cArr);\r\n    }\r\n  }\r\n\r\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\r\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\r\n  }\r\n}\r\n\r\n// export function hasSideEffects(expr: ExpressionRef): bool {\r\n//   switch (_BinaryenExpressionGetId(expr = getPtr(expr))) {\r\n//     case ExpressionId.GetLocal:\r\n//     case ExpressionId.GetGlobal:\r\n//     case ExpressionId.Const:\r\n//     case ExpressionId.Nop:\r\n//     case ExpressionId.Unreachable: {\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.Block: {\r\n//       for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\r\n//         if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\r\n//       }\r\n//       return false;\r\n//     }\r\n//     case ExpressionId.If: {\r\n//       return hasSideEffects(_BinaryenIfGetCondition(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenIfGetIfFalse(expr));\r\n//     }\r\n//     case ExpressionId.Unary: {\r\n//       return hasSideEffects(_BinaryenUnaryGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Binary: {\r\n//       return hasSideEffects(_BinaryenBinaryGetLeft(expr))\r\n//           || hasSideEffects(_BinaryenBinaryGetRight(expr));\r\n//     }\r\n//     case ExpressionId.Drop: {\r\n//       return hasSideEffects(_BinaryenDropGetValue(expr));\r\n//     }\r\n//     case ExpressionId.Select: {\r\n//       return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\r\n//           || hasSideEffects(_BinaryenSelectGetCondition(expr));\r\n//     }\r\n//   }\r\n//   return true;\r\n// }\r\n\r\n// helpers\r\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\r\n\r\nfunction allocU8Array(u8s: Uint8Array | null): usize {\r\n  if (!u8s) return 0;\r\n  var numValues = u8s.length;\r\n  var ptr = memory.allocate(numValues);\r\n  var idx = ptr;\r\n  for (let i = 0; i < numValues; ++i) {\r\n    store<u8>(idx++, u8s[i]);\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocI32Array(i32s: i32[] | null): usize {\r\n  if (!i32s) return 0;\r\n  var ptr = memory.allocate(i32s.length << 2);\r\n  var idx = ptr;\r\n  for (let i = 0, k = i32s.length; i < k; ++i) {\r\n    let val = i32s[i];\r\n    // store<i32>(idx, val) is not portable\r\n    store<u8>(idx    , ( val         & 0xff) as u8);\r\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\r\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\r\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\r\n    idx += 4;\r\n  }\r\n  return ptr;\r\n}\r\n\r\nfunction allocPtrArray(ptrs: usize[] | null): usize {\r\n  return allocI32Array(ptrs); // TODO: WASM64 one day\r\n}\r\n\r\nfunction stringLengthUTF8(str: string): usize {\r\n  var len = 0;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      ++len;\r\n    } else if (u <= 0x7FF) {\r\n      len += 2;\r\n    } else if (u <= 0xFFFF) {\r\n      len += 3;\r\n    } else if (u <= 0x1FFFFF) {\r\n      len += 4;\r\n    } else if (u <= 0x3FFFFFF) {\r\n      len += 5;\r\n    } else {\r\n      len += 6;\r\n    }\r\n  }\r\n  return len;\r\n}\r\n\r\nfunction allocString(str: string | null): usize {\r\n  if (str == null) return 0;\r\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\r\n  // the following is based on Emscripten's stringToUTF8Array\r\n  var idx = ptr;\r\n  for (let i = 0, k = str.length; i < k; ++i) {\r\n    let u = str.charCodeAt(i);\r\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\r\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\r\n    }\r\n    if (u <= 0x7F) {\r\n      store<u8>(idx++, u as u8);\r\n    } else if (u <= 0x7FF) {\r\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0xFFFF) {\r\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x1FFFFF) {\r\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else if (u <= 0x3FFFFFF) {\r\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    } else {\r\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\r\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\r\n    }\r\n  }\r\n  store<u8>(idx, 0);\r\n  return ptr;\r\n}\r\n\r\nfunction readInt(ptr: usize): i32 {\r\n  return (\r\n     load<u8>(ptr    )        |\r\n    (load<u8>(ptr + 1) <<  8) |\r\n    (load<u8>(ptr + 2) << 16) |\r\n    (load<u8>(ptr + 3) << 24)\r\n  );\r\n}\r\n\r\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\r\n  var ret = new Uint8Array(length);\r\n  for (let i: usize = 0; i < length; ++i) {\r\n    ret[i] = load<u8>(ptr + i);\r\n  }\r\n  return ret;\r\n}\r\n\r\nexport function readString(ptr: usize): string | null {\r\n  if (!ptr) return null;\r\n  var arr = new Array<i32>();\r\n  // the following is based on Emscripten's UTF8ArrayToString\r\n  var cp: u32;\r\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\r\n  while (cp = load<u8>(ptr++)) {\r\n    if (!(cp & 0x80)) {\r\n      arr.push(cp);\r\n      continue;\r\n    }\r\n    u1 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xE0) == 0xC0) {\r\n      arr.push(((cp & 31) << 6) | u1);\r\n      continue;\r\n    }\r\n    u2 = load<u8>(ptr++) & 63;\r\n    if ((cp & 0xF0) == 0xE0) {\r\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\r\n    } else {\r\n      u3 = load<u8>(ptr++) & 63;\r\n      if ((cp & 0xF8) == 0xF0) {\r\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\r\n      } else {\r\n        u4 = load<u8>(ptr++) & 63;\r\n        if ((cp & 0xFC) == 0xF8) {\r\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\r\n        } else {\r\n          u5 = load<u8>(ptr++) & 63;\r\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\r\n        }\r\n      }\r\n    }\r\n    arr.push(cp);\r\n    // if (cp < 0x10000) {\r\n    //   arr.push(cp);\r\n    // } else {\r\n    //   var ch = cp - 0x10000;\r\n    //   arr.push(0xD800 | (ch >> 10));\r\n    //   arr.push(0xDC00 | (ch & 0x3FF));\r\n    // }\r\n  }\r\n  // return String.fromCharCodes(arr);\r\n  return String.fromCodePoints(arr);\r\n}\r\n\r\n/** Result structure of {@link Module#toBinary}. */\r\nexport class BinaryModule {\r\n  /** WebAssembly binary. */\r\n  output: Uint8Array;\r\n  /** Source map, if generated. */\r\n  sourceMap: string | null;\r\n}\r\n\r\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\r\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\r\n  // not applicable if pushing a value to the stack\r\n  switch (_BinaryenExpressionGetType(expr)) {\r\n    case NativeType.I32:\r\n    case NativeType.I64:\r\n    case NativeType.F32:\r\n    case NativeType.F64:\r\n    case NativeType.V128: return false;\r\n  }\r\n  switch (_BinaryenExpressionGetId(expr)) {\r\n    case ExpressionId.Unreachable:\r\n    case ExpressionId.Return: return false;\r\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\r\n    case ExpressionId.Block: {\r\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\r\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\r\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n","/**\r\n * Abstract syntax tree representing a source file once parsed.\r\n * @module ast\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  CommonSymbols,\r\n  PATH_DELIMITER,\r\n  LIBRARY_PREFIX\r\n} from \"./common\";\r\n\r\nimport {\r\n  Token,\r\n  Tokenizer,\r\n  Range\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  normalizePath,\r\n  resolvePath,\r\n  CharCode\r\n} from \"./util\";\r\n\r\nexport { Token, Range };\r\n\r\n/** Indicates the kind of a node. */\r\nexport enum NodeKind {\r\n\r\n  SOURCE,\r\n\r\n  // types\r\n  TYPE,\r\n  TYPENAME,\r\n  TYPEPARAMETER,\r\n  PARAMETER,\r\n  SIGNATURE,\r\n\r\n  // expressions\r\n  IDENTIFIER,\r\n  ASSERTION,\r\n  BINARY,\r\n  CALL,\r\n  CLASS,\r\n  COMMA,\r\n  ELEMENTACCESS,\r\n  FALSE,\r\n  FUNCTION,\r\n  INSTANCEOF,\r\n  LITERAL,\r\n  NEW,\r\n  NULL,\r\n  PARENTHESIZED,\r\n  PROPERTYACCESS,\r\n  TERNARY,\r\n  SUPER,\r\n  THIS,\r\n  TRUE,\r\n  CONSTRUCTOR,\r\n  UNARYPOSTFIX,\r\n  UNARYPREFIX,\r\n\r\n  // statements\r\n  BLOCK,\r\n  BREAK,\r\n  CONTINUE,\r\n  DO,\r\n  EMPTY,\r\n  EXPORT,\r\n  EXPORTIMPORT,\r\n  EXPRESSION,\r\n  FOR,\r\n  IF,\r\n  IMPORT,\r\n  RETURN,\r\n  SWITCH,\r\n  THROW,\r\n  TRY,\r\n  VARIABLE,\r\n  VOID,\r\n  WHILE,\r\n\r\n  // declaration statements\r\n  CLASSDECLARATION,\r\n  ENUMDECLARATION,\r\n  ENUMVALUEDECLARATION,\r\n  FIELDDECLARATION,\r\n  FUNCTIONDECLARATION,\r\n  IMPORTDECLARATION,\r\n  INDEXSIGNATUREDECLARATION,\r\n  INTERFACEDECLARATION,\r\n  METHODDECLARATION,\r\n  NAMESPACEDECLARATION,\r\n  TYPEDECLARATION,\r\n  VARIABLEDECLARATION,\r\n\r\n  // special\r\n  DECORATOR,\r\n  EXPORTMEMBER,\r\n  SWITCHCASE,\r\n  COMMENT\r\n}\r\n\r\n/** Checks if a node represents a constant value. */\r\nexport function nodeIsConstantValue(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.LITERAL:\r\n    case NodeKind.NULL:\r\n    case NodeKind.TRUE:\r\n    case NodeKind.FALSE: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Checks if a node might be callable. */\r\nexport function nodeIsCallable(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.IDENTIFIER:\r\n    case NodeKind.ASSERTION: // if kind=NONNULL\r\n    case NodeKind.CALL:\r\n    case NodeKind.ELEMENTACCESS:\r\n    case NodeKind.PARENTHESIZED:\r\n    case NodeKind.PROPERTYACCESS:\r\n    case NodeKind.SUPER: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Checks if a node might be callable with generic arguments. */\r\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\r\n  switch (kind) {\r\n    case NodeKind.IDENTIFIER:\r\n    case NodeKind.PROPERTYACCESS: return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n/** Base class of all nodes. */\r\nexport abstract class Node {\r\n\r\n  /** Node kind indicator. */\r\n  kind: NodeKind;\r\n  /** Source range. */\r\n  range: Range;\r\n\r\n  // types\r\n\r\n  static createTypeName(\r\n    name: IdentifierExpression,\r\n    range: Range\r\n  ): TypeName {\r\n    var typeName = new TypeName();\r\n    typeName.range = range;\r\n    typeName.identifier = name;\r\n    typeName.next = null;\r\n    return typeName;\r\n  }\r\n\r\n  static createSimpleTypeName(\r\n    name: string,\r\n    range: Range\r\n  ): TypeName {\r\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\r\n  }\r\n\r\n  static createType(\r\n    name: TypeName,\r\n    typeArguments: CommonTypeNode[] | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): TypeNode {\r\n    var type = new TypeNode();\r\n    type.range = range;\r\n    type.name = name;\r\n    type.typeArguments = typeArguments;\r\n    type.isNullable = isNullable;\r\n    return type;\r\n  }\r\n\r\n  static createOmittedType(\r\n    range: Range\r\n  ): TypeNode {\r\n    return Node.createType(\r\n      Node.createSimpleTypeName(\"\", range),\r\n      null,\r\n      false,\r\n      range\r\n    );\r\n  }\r\n\r\n  static createTypeParameter(\r\n    name: IdentifierExpression,\r\n    extendsType: TypeNode | null,\r\n    defaultType: TypeNode | null,\r\n    range: Range\r\n  ): TypeParameterNode {\r\n    var elem = new TypeParameterNode();\r\n    elem.range = range;\r\n    elem.name = name;\r\n    elem.extendsType = extendsType;\r\n    elem.defaultType = defaultType;\r\n    return elem;\r\n  }\r\n\r\n  static createParameter(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode,\r\n    initializer: Expression | null,\r\n    kind: ParameterKind,\r\n    range: Range\r\n  ): ParameterNode {\r\n    var elem = new ParameterNode();\r\n    elem.range = range;\r\n    elem.name = name;\r\n    elem.type = type;\r\n    elem.initializer = initializer;\r\n    elem.parameterKind = kind;\r\n    return elem;\r\n  }\r\n\r\n  static createSignature(\r\n    parameters: ParameterNode[],\r\n    returnType: CommonTypeNode,\r\n    explicitThisType: TypeNode | null,\r\n    isNullable: bool,\r\n    range: Range\r\n  ): SignatureNode {\r\n    var sig = new SignatureNode();\r\n    sig.range = range;\r\n    sig.parameters = parameters;\r\n    sig.returnType = returnType;\r\n    sig.explicitThisType = explicitThisType;\r\n    sig.isNullable = isNullable;\r\n    return sig;\r\n  }\r\n\r\n  // special\r\n\r\n  static createDecorator(\r\n    name: Expression,\r\n    args: Expression[] | null,\r\n    range: Range\r\n  ): DecoratorNode {\r\n    var stmt = new DecoratorNode();\r\n    stmt.range = range;\r\n    stmt.name = name;\r\n    stmt.arguments = args;\r\n    stmt.decoratorKind = decoratorNameToKind(name);\r\n    return stmt;\r\n  }\r\n\r\n  static createComment(\r\n    text: string,\r\n    kind: CommentKind,\r\n    range: Range\r\n  ): CommentNode {\r\n    var node = new CommentNode();\r\n    node.range = range;\r\n    node.commentKind = kind;\r\n    node.text = text;\r\n    return node;\r\n  }\r\n\r\n  // expressions\r\n\r\n  static createIdentifierExpression(\r\n    name: string,\r\n    range: Range,\r\n    isQuoted: bool = false\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = name; // TODO: extract from range\r\n    expr.symbol = name; // TODO: Symbol.for(name)\r\n    expr.isQuoted = isQuoted;\r\n    return expr;\r\n  }\r\n\r\n  static createEmptyIdentifierExpression(\r\n    range: Range\r\n  ): IdentifierExpression {\r\n    var expr = new IdentifierExpression();\r\n    expr.range = range;\r\n    expr.text = \"\";\r\n    return expr;\r\n  }\r\n\r\n  static createArrayLiteralExpression(\r\n    elements: (Expression | null)[],\r\n    range: Range\r\n  ): ArrayLiteralExpression {\r\n    var expr = new ArrayLiteralExpression();\r\n    expr.range = range;\r\n    expr.elementExpressions = elements;\r\n    return expr;\r\n  }\r\n\r\n  static createAssertionExpression(\r\n    assertionKind: AssertionKind,\r\n    expression: Expression,\r\n    toType: CommonTypeNode | null,\r\n    range: Range\r\n  ): AssertionExpression {\r\n    var expr = new AssertionExpression();\r\n    expr.range = range;\r\n    expr.assertionKind = assertionKind;\r\n    expr.expression = expression;\r\n    expr.toType = toType;\r\n    return expr;\r\n  }\r\n\r\n  static createBinaryExpression(\r\n    operator: Token,\r\n    left: Expression,\r\n    right: Expression,\r\n    range: Range\r\n  ): BinaryExpression {\r\n    var expr = new BinaryExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.left = left;\r\n    expr.right = right;\r\n    return expr;\r\n  }\r\n\r\n  static createCallExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): CallExpression {\r\n    var expr = new CallExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.typeArguments = typeArgs;\r\n    expr.arguments = args;\r\n    return expr;\r\n  }\r\n\r\n  static createClassExpression(\r\n    declaration: ClassDeclaration\r\n  ): ClassExpression {\r\n    var expr = new ClassExpression();\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createCommaExpression(\r\n    expressions: Expression[],\r\n    range: Range\r\n  ): CommaExpression {\r\n    var expr = new CommaExpression();\r\n    expr.range = range;\r\n    expr.expressions = expressions;\r\n    return expr;\r\n  }\r\n\r\n  static createConstructorExpression(\r\n    range: Range\r\n  ): ConstructorExpression {\r\n    var expr = new ConstructorExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createElementAccessExpression(\r\n    expression: Expression,\r\n    element: Expression,\r\n    range: Range\r\n  ): ElementAccessExpression {\r\n    var expr = new ElementAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.elementExpression = element;\r\n    return expr;\r\n  }\r\n\r\n  static createFalseExpression(\r\n    range: Range\r\n  ): FalseExpression {\r\n    var expr = new FalseExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createFloatLiteralExpression(\r\n    value: f64,\r\n    range: Range\r\n  ): FloatLiteralExpression {\r\n    var expr = new FloatLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createFunctionExpression(\r\n    declaration: FunctionDeclaration\r\n  ): FunctionExpression {\r\n    var expr = new FunctionExpression();\r\n    expr.range = declaration.range;\r\n    expr.declaration = declaration;\r\n    return expr;\r\n  }\r\n\r\n  static createInstanceOfExpression(\r\n    expression: Expression,\r\n    isType: CommonTypeNode,\r\n    range: Range\r\n  ): InstanceOfExpression {\r\n    var expr = new InstanceOfExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.isType = isType;\r\n    return expr;\r\n  }\r\n\r\n  static createIntegerLiteralExpression(\r\n    value: I64,\r\n    range: Range\r\n  ): IntegerLiteralExpression {\r\n    var expr = new IntegerLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createNewExpression(\r\n    expression: Expression,\r\n    typeArgs: CommonTypeNode[] | null,\r\n    args: Expression[],\r\n    range: Range\r\n  ): NewExpression {\r\n    var expr = new NewExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.typeArguments = typeArgs;\r\n    expr.arguments = args;\r\n    return expr;\r\n  }\r\n\r\n  static createNullExpression(\r\n    range: Range\r\n  ): NullExpression {\r\n    var expr = new NullExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createObjectLiteralExpression(\r\n    names: IdentifierExpression[],\r\n    values: Expression[],\r\n    range: Range\r\n  ): ObjectLiteralExpression {\r\n    var expr = new ObjectLiteralExpression();\r\n    expr.range = range;\r\n    expr.names = names;\r\n    expr.values = values;\r\n    return expr;\r\n  }\r\n\r\n  static createParenthesizedExpression(\r\n    expression: Expression,\r\n    range: Range\r\n  ): ParenthesizedExpression {\r\n    var expr = new ParenthesizedExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    return expr;\r\n  }\r\n\r\n  static createPropertyAccessExpression(\r\n    expression: Expression,\r\n    property: IdentifierExpression,\r\n    range: Range\r\n  ): PropertyAccessExpression {\r\n    var expr = new PropertyAccessExpression();\r\n    expr.range = range;\r\n    expr.expression = expression;\r\n    expr.property = property;\r\n    return expr;\r\n  }\r\n\r\n  static createRegexpLiteralExpression(\r\n    pattern: string,\r\n    flags: string,\r\n    range: Range\r\n  ): RegexpLiteralExpression {\r\n    var expr = new RegexpLiteralExpression();\r\n    expr.range = range;\r\n    expr.pattern = pattern;\r\n    expr.patternFlags = flags;\r\n    return expr;\r\n  }\r\n\r\n  static createTernaryExpression(\r\n    condition: Expression,\r\n    ifThen: Expression,\r\n    ifElse: Expression,\r\n    range: Range\r\n  ): TernaryExpression {\r\n    var expr = new TernaryExpression();\r\n    expr.range = range;\r\n    expr.condition = condition;\r\n    expr.ifThen = ifThen;\r\n    expr.ifElse = ifElse;\r\n    return expr;\r\n  }\r\n\r\n  static createStringLiteralExpression(\r\n    value: string,\r\n    range: Range\r\n  ): StringLiteralExpression {\r\n    var expr = new StringLiteralExpression();\r\n    expr.range = range;\r\n    expr.value = value;\r\n    return expr;\r\n  }\r\n\r\n  static createSuperExpression(\r\n    range: Range\r\n  ): SuperExpression {\r\n    var expr = new SuperExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createThisExpression(\r\n    range: Range\r\n  ): ThisExpression {\r\n    var expr = new ThisExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createTrueExpression(\r\n    range: Range\r\n  ): TrueExpression {\r\n    var expr = new TrueExpression();\r\n    expr.range = range;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPostfixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPostfixExpression {\r\n    var expr = new UnaryPostfixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand;\r\n    return expr;\r\n  }\r\n\r\n  static createUnaryPrefixExpression(\r\n    operator: Token,\r\n    operand: Expression,\r\n    range: Range\r\n  ): UnaryPrefixExpression {\r\n    var expr = new UnaryPrefixExpression();\r\n    expr.range = range;\r\n    expr.operator = operator;\r\n    expr.operand = operand;\r\n    return expr;\r\n  }\r\n\r\n  // statements\r\n\r\n  static createBlockStatement(\r\n    statements: Statement[],\r\n    range: Range\r\n  ): BlockStatement {\r\n    var stmt = new BlockStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements;\r\n    return stmt;\r\n  }\r\n\r\n  static createBreakStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): BreakStatement {\r\n    var stmt = new BreakStatement();\r\n    stmt.range = range;\r\n    stmt.label = label;\r\n    return stmt;\r\n  }\r\n\r\n  static createClassDeclaration(\r\n    identifier: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    extendsType: TypeNode | null, // can't be a function\r\n    implementsTypes: TypeNode[] | null, // can't be functions\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): ClassDeclaration {\r\n    var stmt = new ClassDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = identifier;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.extendsType = extendsType;\r\n    stmt.implementsTypes = implementsTypes;\r\n    stmt.members = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createContinueStatement(\r\n    label: IdentifierExpression | null,\r\n    range: Range\r\n  ): ContinueStatement {\r\n    var stmt = new ContinueStatement();\r\n    stmt.range = range;\r\n    stmt.label = label;\r\n    return stmt;\r\n  }\r\n\r\n  static createDoStatement(\r\n    statement: Statement,\r\n    condition: Expression,\r\n    range: Range\r\n  ): DoStatement {\r\n    var stmt = new DoStatement();\r\n    stmt.range = range;\r\n    stmt.statement = statement;\r\n    stmt.condition = condition;\r\n    return stmt;\r\n  }\r\n\r\n  static createEmptyStatement(\r\n    range: Range\r\n  ): EmptyStatement {\r\n    var stmt = new EmptyStatement();\r\n    stmt.range = range;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumDeclaration(\r\n    name: IdentifierExpression,\r\n    members: EnumValueDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumDeclaration {\r\n    var stmt = new EnumDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.values = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createEnumValueDeclaration(\r\n    name: IdentifierExpression,\r\n    value: Expression | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): EnumValueDeclaration {\r\n    var stmt = new EnumValueDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.value = value;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportStatement(\r\n    members: ExportMember[] | null,\r\n    path: StringLiteralExpression | null,\r\n    isDeclare: bool,\r\n    range: Range\r\n  ): ExportStatement {\r\n    var stmt = new ExportStatement();\r\n    stmt.range = range;\r\n    stmt.members = members;\r\n    stmt.path = path;\r\n    if (path) {\r\n      let normalizedPath = normalizePath(path.value);\r\n      if (path.value.startsWith(\".\")) { // relative\r\n        stmt.normalizedPath = resolvePath(\r\n          normalizedPath,\r\n          range.source.normalizedPath\r\n        );\r\n      } else { // absolute\r\n        stmt.normalizedPath = normalizedPath;\r\n      }\r\n      stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    } else {\r\n      stmt.normalizedPath = null;\r\n      stmt.internalPath = null;\r\n    }\r\n    stmt.isDeclare = isDeclare;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportImportStatement(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression,\r\n    range: Range\r\n  ): ExportImportStatement {\r\n    var stmt = new ExportImportStatement();\r\n    stmt.range = range;\r\n    stmt.name = name;\r\n    stmt.externalName = externalName;\r\n    return stmt;\r\n  }\r\n\r\n  static createExportMember(\r\n    name: IdentifierExpression,\r\n    externalName: IdentifierExpression | null,\r\n    range: Range\r\n  ): ExportMember {\r\n    var elem = new ExportMember();\r\n    elem.range = range;\r\n    elem.localName = name;\r\n    if (!externalName) externalName = name;\r\n    elem.exportedName = externalName;\r\n    return elem;\r\n  }\r\n\r\n  static createExpressionStatement(\r\n    expression: Expression\r\n  ): ExpressionStatement {\r\n    var stmt = new ExpressionStatement();\r\n    stmt.range = expression.range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createIfStatement(\r\n    condition: Expression,\r\n    ifTrue: Statement,\r\n    ifFalse: Statement | null,\r\n    range: Range\r\n  ): IfStatement {\r\n    var stmt = new IfStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition;\r\n    stmt.ifTrue = ifTrue;\r\n    stmt.ifFalse = ifFalse;\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatement(\r\n    decls: ImportDeclaration[] | null,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = decls;\r\n    stmt.namespaceName = null;\r\n    stmt.path = path;\r\n    var normalizedPath = normalizePath(path.value);\r\n    if (path.value.startsWith(\".\")) { // relative in project\r\n      stmt.normalizedPath = resolvePath(\r\n        normalizedPath,\r\n        range.source.normalizedPath\r\n      );\r\n    } else { // absolute in library\r\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) {\r\n        normalizedPath = LIBRARY_PREFIX + normalizedPath;\r\n      }\r\n      stmt.normalizedPath = normalizedPath;\r\n    }\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportStatementWithWildcard(\r\n    identifier: IdentifierExpression,\r\n    path: StringLiteralExpression,\r\n    range: Range\r\n  ): ImportStatement {\r\n    var stmt = new ImportStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = null;\r\n    stmt.namespaceName = identifier;\r\n    stmt.path = path;\r\n    stmt.normalizedPath = resolvePath(\r\n      normalizePath(path.value),\r\n      range.source.normalizedPath\r\n    );\r\n    stmt.internalPath = mangleInternalPath(stmt.normalizedPath);\r\n    return stmt;\r\n  }\r\n\r\n  static createImportDeclaration(\r\n    foreignName: IdentifierExpression,\r\n    name: IdentifierExpression | null,\r\n    range: Range\r\n  ): ImportDeclaration {\r\n    var elem = new ImportDeclaration();\r\n    elem.range = range;\r\n    elem.foreignName = foreignName;\r\n    if (!name) name = foreignName;\r\n    elem.name = name;\r\n    return elem;\r\n  }\r\n\r\n  static createInterfaceDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    extendsType: TypeNode | null, // can't be a function\r\n    members: DeclarationStatement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): InterfaceDeclaration {\r\n    var stmt = new InterfaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.extendsType = extendsType;\r\n    stmt.members = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createFieldDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): FieldDeclaration {\r\n    var stmt = new FieldDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.type = type;\r\n    stmt.initializer = initializer;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createForStatement(\r\n    initializer: Statement | null,\r\n    condition: Expression | null,\r\n    incrementor: Expression | null,\r\n    statement: Statement,\r\n    range: Range\r\n  ): ForStatement {\r\n    var stmt = new ForStatement();\r\n    stmt.range = range;\r\n    stmt.initializer = initializer;\r\n    stmt.condition = condition;\r\n    stmt.incrementor = incrementor;\r\n    stmt.statement = statement;\r\n    return stmt;\r\n  }\r\n\r\n  static createFunctionDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    arrowKind: ArrowKind,\r\n    range: Range\r\n  ): FunctionDeclaration {\r\n    var stmt = new FunctionDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.signature = signature;\r\n    stmt.body = body;\r\n    stmt.decorators = decorators;\r\n    stmt.arrowKind = arrowKind;\r\n    return stmt;\r\n  }\r\n\r\n  static createIndexSignatureDeclaration(\r\n    keyType: TypeNode,\r\n    valueType: CommonTypeNode,\r\n    range: Range\r\n  ): IndexSignatureDeclaration {\r\n    var elem = new IndexSignatureDeclaration();\r\n    elem.range = range;\r\n    elem.keyType = keyType;\r\n    elem.valueType = valueType;\r\n    return elem;\r\n  }\r\n\r\n  static createMethodDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    signature: SignatureNode,\r\n    body: Statement | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): MethodDeclaration {\r\n    var stmt = new MethodDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.signature = signature;\r\n    stmt.body = body;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createNamespaceDeclaration(\r\n    name: IdentifierExpression,\r\n    members: Statement[],\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): NamespaceDeclaration {\r\n    var stmt = new NamespaceDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.members = members;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createReturnStatement(\r\n    value: Expression | null,\r\n    range: Range\r\n  ): ReturnStatement {\r\n    var stmt = new ReturnStatement();\r\n    stmt.range = range;\r\n    stmt.value = value;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchStatement(\r\n    condition: Expression,\r\n    cases: SwitchCase[],\r\n    range: Range\r\n  ): SwitchStatement {\r\n    var stmt = new SwitchStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition;\r\n    stmt.cases = cases;\r\n    return stmt;\r\n  }\r\n\r\n  static createSwitchCase(\r\n    label: Expression | null,\r\n    statements: Statement[],\r\n    range: Range\r\n  ): SwitchCase {\r\n    var elem = new SwitchCase();\r\n    elem.range = range;\r\n    elem.label = label;\r\n    elem.statements = statements;\r\n    return elem;\r\n  }\r\n\r\n  static createThrowStatement(\r\n    value: Expression,\r\n    range: Range\r\n  ): ThrowStatement {\r\n    var stmt = new ThrowStatement();\r\n    stmt.range = range;\r\n    stmt.value = value;\r\n    return stmt;\r\n  }\r\n\r\n  static createTryStatement(\r\n    statements: Statement[],\r\n    catchVariable: IdentifierExpression | null,\r\n    catchStatements: Statement[] | null,\r\n    finallyStatements: Statement[] | null,\r\n    range: Range\r\n  ): TryStatement {\r\n    var stmt = new TryStatement();\r\n    stmt.range = range;\r\n    stmt.statements = statements;\r\n    stmt.catchVariable = catchVariable;\r\n    stmt.catchStatements = catchStatements;\r\n    stmt.finallyStatements = finallyStatements;\r\n    return stmt;\r\n  }\r\n\r\n  static createTypeDeclaration(\r\n    name: IdentifierExpression,\r\n    typeParameters: TypeParameterNode[] | null,\r\n    alias: CommonTypeNode,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): TypeDeclaration {\r\n    var stmt = new TypeDeclaration();\r\n    stmt.range = range;\r\n    stmt.flags = flags;\r\n    stmt.name = name;\r\n    stmt.typeParameters = typeParameters;\r\n    stmt.type = alias;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableStatement(\r\n    declarations: VariableDeclaration[],\r\n    decorators: DecoratorNode[] | null,\r\n    range: Range\r\n  ): VariableStatement {\r\n    var stmt = new VariableStatement();\r\n    stmt.range = range;\r\n    stmt.declarations = declarations;\r\n    stmt.decorators = decorators;\r\n    return stmt;\r\n  }\r\n\r\n  static createVariableDeclaration(\r\n    name: IdentifierExpression,\r\n    type: CommonTypeNode | null,\r\n    initializer: Expression | null,\r\n    decorators: DecoratorNode[] | null,\r\n    flags: CommonFlags,\r\n    range: Range\r\n  ): VariableDeclaration {\r\n    var elem = new VariableDeclaration();\r\n    elem.range = range;\r\n    elem.flags = flags;\r\n    elem.name = name;\r\n    elem.type = type;\r\n    elem.initializer = initializer;\r\n    elem.decorators = decorators; // inherited\r\n    return elem;\r\n  }\r\n\r\n  static createVoidStatement(\r\n    expression: Expression,\r\n    range: Range\r\n  ): VoidStatement {\r\n    var stmt = new VoidStatement();\r\n    stmt.range = range;\r\n    stmt.expression = expression;\r\n    return stmt;\r\n  }\r\n\r\n  static createWhileStatement(\r\n    condition: Expression,\r\n    statement: Statement,\r\n    range: Range\r\n  ): WhileStatement {\r\n    var stmt = new WhileStatement();\r\n    stmt.range = range;\r\n    stmt.condition = condition;\r\n    stmt.statement = statement;\r\n    return stmt;\r\n  }\r\n}\r\n\r\n// types\r\n\r\nexport abstract class CommonTypeNode extends Node {\r\n  // kind varies\r\n\r\n  /** Whether nullable or not. */\r\n  isNullable: bool;\r\n}\r\n\r\n/** Represents a type name. */\r\nexport class TypeName extends Node {\r\n  kind = NodeKind.TYPENAME;\r\n\r\n  /** Identifier of this part. */\r\n  identifier: IdentifierExpression;\r\n  /** Next part of the type name or `null` if this is the last part. */\r\n  next: TypeName | null;\r\n}\r\n\r\n/** Represents a type annotation. */\r\nexport class TypeNode extends CommonTypeNode {\r\n  kind = NodeKind.TYPE;\r\n\r\n  /** Type name. */\r\n  name: TypeName;\r\n  /** Type argument references. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n}\r\n\r\n/** Represents a type parameter. */\r\nexport class TypeParameterNode extends Node {\r\n  kind = NodeKind.TYPEPARAMETER;\r\n\r\n  /** Identifier reference. */\r\n  name: IdentifierExpression;\r\n  /** Extended type reference, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Default type if omitted, if any. */\r\n  defaultType: TypeNode | null; // can't be a function\r\n}\r\n\r\n/** Represents the kind of a parameter. */\r\nexport enum ParameterKind {\r\n  /** No specific flags. */\r\n  DEFAULT,\r\n  /** Is an optional parameter. */\r\n  OPTIONAL,\r\n  /** Is a rest parameter. */\r\n  REST\r\n}\r\n\r\n/** Represents a function parameter. */\r\nexport class ParameterNode extends Node {\r\n  kind = NodeKind.PARAMETER;\r\n\r\n  /** Parameter kind. */\r\n  parameterKind: ParameterKind;\r\n  /** Parameter name. */\r\n  name: IdentifierExpression;\r\n  /** Parameter type. */\r\n  type: CommonTypeNode;\r\n  /** Initializer expression, if present. */\r\n  initializer: Expression | null;\r\n  /** Implicit field declaration, if applicable. */\r\n  implicitFieldDeclaration: FieldDeclaration | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n}\r\n\r\n/** Represents a function signature. */\r\nexport class SignatureNode extends CommonTypeNode {\r\n  kind = NodeKind.SIGNATURE;\r\n\r\n  /** Accepted parameters. */\r\n  parameters: ParameterNode[];\r\n  /** Return type. */\r\n  returnType: CommonTypeNode;\r\n  /** Explicitly provided this type, if any. */\r\n  explicitThisType: TypeNode | null; // can't be a function\r\n}\r\n\r\n// special\r\n\r\n/** Built-in decorator kinds. */\r\nexport enum DecoratorKind {\r\n  CUSTOM,\r\n  GLOBAL,\r\n  OPERATOR,\r\n  OPERATOR_BINARY,\r\n  OPERATOR_PREFIX,\r\n  OPERATOR_POSTFIX,\r\n  UNMANAGED,\r\n  SEALED,\r\n  INLINE,\r\n  EXTERNAL,\r\n  BUILTIN,\r\n  LAZY,\r\n  START\r\n}\r\n\r\n/** Returns the kind of the specified decorator. Defaults to {@link DecoratorKind.CUSTOM}. */\r\nexport function decoratorNameToKind(name: Expression): DecoratorKind {\r\n  // @global, @inline, @operator, @sealed, @unmanaged\r\n  if (name.kind == NodeKind.IDENTIFIER) {\r\n    let nameStr = (<IdentifierExpression>name).text;\r\n    assert(nameStr.length);\r\n    switch (nameStr.charCodeAt(0)) {\r\n      case CharCode.b: {\r\n        if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\r\n        break;\r\n      }\r\n      case CharCode.e: {\r\n        if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\r\n        break;\r\n      }\r\n      case CharCode.g: {\r\n        if (nameStr == \"global\") return DecoratorKind.GLOBAL;\r\n        break;\r\n      }\r\n      case CharCode.i: {\r\n        if (nameStr == \"inline\") return DecoratorKind.INLINE;\r\n        break;\r\n      }\r\n      case CharCode.l: {\r\n        if (nameStr == \"lazy\") return DecoratorKind.LAZY;\r\n        break;\r\n      }\r\n      case CharCode.o: {\r\n        if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\r\n        break;\r\n      }\r\n      case CharCode.s: {\r\n        if (nameStr == \"sealed\") return DecoratorKind.SEALED;\r\n        if (nameStr == \"start\") return DecoratorKind.START;\r\n        break;\r\n      }\r\n      case CharCode.u: {\r\n        if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\r\n        break;\r\n      }\r\n    }\r\n  } else if (\r\n    name.kind == NodeKind.PROPERTYACCESS &&\r\n    (<PropertyAccessExpression>name).expression.kind == NodeKind.IDENTIFIER\r\n  ) {\r\n    let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>name).expression).text;\r\n    assert(nameStr.length);\r\n    let propStr = (<PropertyAccessExpression>name).property.text;\r\n    assert(propStr.length);\r\n    // @operator.binary, @operator.prefix, @operator.postfix\r\n    if (nameStr == \"operator\") {\r\n      switch (propStr.charCodeAt(0)) {\r\n        case CharCode.b: {\r\n          if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\r\n          break;\r\n        }\r\n        case CharCode.p: {\r\n          switch (propStr) {\r\n            case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\r\n            case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return DecoratorKind.CUSTOM;\r\n}\r\n\r\n/** Represents a decorator. */\r\nexport class DecoratorNode extends Node {\r\n  kind = NodeKind.DECORATOR;\r\n\r\n  /** Built-in kind, if applicable. */\r\n  decoratorKind: DecoratorKind;\r\n  /** Name expression. */\r\n  name: Expression;\r\n  /** Argument expressions. */\r\n  arguments: Expression[] | null;\r\n}\r\n\r\n/** Comment kinds. */\r\nexport enum CommentKind {\r\n  /** Line comment. */\r\n  LINE,\r\n  /** Triple-slash comment. */\r\n  TRIPLE,\r\n  /** Block comment. */\r\n  BLOCK\r\n}\r\n\r\n/** Represents a comment. */\r\nexport class CommentNode extends Node {\r\n  kind = NodeKind.COMMENT;\r\n\r\n  /** Comment kind. */\r\n  commentKind: CommentKind;\r\n  /** Comment text. */\r\n  text: string;\r\n}\r\n\r\n// expressions\r\n\r\n/** Base class of all expression nodes. */\r\nexport abstract class Expression extends Node { }\r\n\r\n/** Represents an identifier expression. */\r\nexport class IdentifierExpression extends Expression {\r\n  kind = NodeKind.IDENTIFIER;\r\n\r\n  /** Textual name. */\r\n  text: string;\r\n  /** Symbol. */\r\n  symbol: string; // TODO: symbol\r\n  /** Whether quoted or not. */\r\n  isQuoted: bool;\r\n}\r\n\r\n/** Indicates the kind of a literal. */\r\nexport enum LiteralKind {\r\n  FLOAT,\r\n  INTEGER,\r\n  STRING,\r\n  REGEXP,\r\n  ARRAY,\r\n  OBJECT\r\n}\r\n\r\n/** Base class of all literal expressions. */\r\nexport abstract class LiteralExpression extends Expression {\r\n  kind = NodeKind.LITERAL;\r\n\r\n  /** Specific literal kind. */\r\n  literalKind: LiteralKind;\r\n}\r\n\r\n/** Represents an `[]` literal expression. */\r\nexport class ArrayLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.ARRAY;\r\n\r\n  /** Nested element expressions. */\r\n  elementExpressions: (Expression | null)[];\r\n}\r\n\r\n/** Indicates the kind of an assertion. */\r\nexport enum AssertionKind {\r\n  PREFIX,\r\n  AS,\r\n  NONNULL\r\n}\r\n\r\n/** Represents an assertion expression. */\r\nexport class AssertionExpression extends Expression {\r\n  kind = NodeKind.ASSERTION;\r\n\r\n  /** Specific kind of this assertion. */\r\n  assertionKind: AssertionKind;\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Target type. */\r\n  toType: CommonTypeNode | null;\r\n}\r\n\r\n/** Represents a binary expression. */\r\nexport class BinaryExpression extends Expression {\r\n  kind = NodeKind.BINARY;\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Left-hand side expression */\r\n  left: Expression;\r\n  /** Right-hand side expression. */\r\n  right: Expression;\r\n}\r\n\r\n/** Represents a call expression. */\r\nexport class CallExpression extends Expression {\r\n  kind = NodeKind.CALL;\r\n\r\n  /** Called expression. Usually an identifier or property access expression. */\r\n  expression: Expression;\r\n  /** Provided type arguments. */\r\n  typeArguments: CommonTypeNode[] | null;\r\n  /** Provided arguments. */\r\n  arguments: Expression[];\r\n\r\n  /** Gets the type arguments range for reporting. */\r\n  get typeArgumentsRange(): Range {\r\n    var typeArguments = this.typeArguments;\r\n    var numTypeArguments: i32;\r\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\r\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\r\n    }\r\n    return this.expression.range;\r\n  }\r\n\r\n  /** Gets the arguments range for reporting. */\r\n  get argumentsRange(): Range {\r\n    var args = this.arguments;\r\n    var numArguments = args.length;\r\n    if (numArguments) {\r\n      return Range.join(args[0].range, args[numArguments - 1].range);\r\n    }\r\n    return this.expression.range;\r\n  }\r\n}\r\n\r\n/** Represents a class expression using the 'class' keyword. */\r\nexport class ClassExpression extends Expression {\r\n  kind = NodeKind.CLASS;\r\n\r\n  /** Inline class declaration. */\r\n  declaration: ClassDeclaration;\r\n}\r\n\r\n/** Represents a comma expression composed of multiple expressions. */\r\nexport class CommaExpression extends Expression {\r\n  kind = NodeKind.COMMA;\r\n\r\n  /** Sequential expressions. */\r\n  expressions: Expression[];\r\n}\r\n\r\n/** Represents a `constructor` expression. */\r\nexport class ConstructorExpression extends IdentifierExpression {\r\n  kind = NodeKind.CONSTRUCTOR;\r\n  text = \"constructor\";\r\n  symbol = CommonSymbols.constructor;\r\n}\r\n\r\n/** Represents an element access expression, e.g., array access. */\r\nexport class ElementAccessExpression extends Expression {\r\n  kind = NodeKind.ELEMENTACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Element of the expression being accessed. */\r\n  elementExpression: Expression;\r\n}\r\n\r\n/** Represents a float literal expression. */\r\nexport class FloatLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.FLOAT;\r\n\r\n  /** Float value. */\r\n  value: f64;\r\n}\r\n\r\n/** Represents a function expression using the 'function' keyword. */\r\nexport class FunctionExpression extends Expression {\r\n  kind = NodeKind.FUNCTION;\r\n\r\n  /** Inline function declaration. */\r\n  declaration: FunctionDeclaration;\r\n}\r\n\r\n/** Represents an `instanceof` expression. */\r\nexport class InstanceOfExpression extends Expression {\r\n  kind = NodeKind.INSTANCEOF;\r\n\r\n  /** Expression being asserted. */\r\n  expression: Expression;\r\n  /** Type to test for. */\r\n  isType: CommonTypeNode;\r\n}\r\n\r\n/** Represents an integer literal expression. */\r\nexport class IntegerLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.INTEGER;\r\n\r\n  /** Integer value. */\r\n  value: I64;\r\n}\r\n\r\n/** Represents a `new` expression. Like a call but with its own kind. */\r\nexport class NewExpression extends CallExpression {\r\n  kind = NodeKind.NEW;\r\n}\r\n\r\n/** Represents a `null` expression. */\r\nexport class NullExpression extends IdentifierExpression {\r\n  kind = NodeKind.NULL;\r\n  text = \"null\";\r\n  symbol = CommonSymbols.null_;\r\n}\r\n\r\n/** Represents an object literal expression. */\r\nexport class ObjectLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.OBJECT;\r\n\r\n  /** Field names. */\r\n  names: IdentifierExpression[];\r\n  /** Field values. */\r\n  values: Expression[];\r\n}\r\n\r\n/** Represents a parenthesized expression. */\r\nexport class ParenthesizedExpression extends Expression {\r\n  kind = NodeKind.PARENTHESIZED;\r\n\r\n  /** Expression in parenthesis. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a property access expression. */\r\nexport class PropertyAccessExpression extends Expression {\r\n  kind = NodeKind.PROPERTYACCESS;\r\n\r\n  /** Expression being accessed. */\r\n  expression: Expression;\r\n  /** Property of the expression being accessed. */\r\n  property: IdentifierExpression;\r\n}\r\n\r\n/** Represents a regular expression literal expression. */\r\nexport class RegexpLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.REGEXP;\r\n\r\n  /** Regular expression pattern. */\r\n  pattern: string;\r\n  /** Regular expression flags. */\r\n  patternFlags: string;\r\n}\r\n\r\n/** Represents a ternary expression, i.e., short if notation. */\r\nexport class TernaryExpression extends Expression {\r\n  kind = NodeKind.TERNARY;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Expression executed when condition is `true`. */\r\n  ifThen: Expression;\r\n  /** Expression executed when condition is `false`. */\r\n  ifElse: Expression;\r\n}\r\n\r\n/** Represents a string literal expression. */\r\nexport class StringLiteralExpression extends LiteralExpression {\r\n  literalKind = LiteralKind.STRING;\r\n\r\n  /** String value without quotes. */\r\n  value: string;\r\n}\r\n\r\n/** Represents a `super` expression. */\r\nexport class SuperExpression extends IdentifierExpression {\r\n  kind = NodeKind.SUPER;\r\n  text = \"super\";\r\n  symbol = CommonSymbols.super_;\r\n}\r\n\r\n/** Represents a `this` expression. */\r\nexport class ThisExpression extends IdentifierExpression {\r\n  kind = NodeKind.THIS;\r\n  text = \"this\";\r\n  symbol = CommonSymbols.this_;\r\n}\r\n\r\n/** Represents a `true` expression. */\r\nexport class TrueExpression extends IdentifierExpression {\r\n  kind = NodeKind.TRUE;\r\n  text = \"true\";\r\n  symbol = CommonSymbols.true_;\r\n}\r\n\r\n/** Represents a `false` expression. */\r\nexport class FalseExpression extends IdentifierExpression {\r\n  kind = NodeKind.FALSE;\r\n  text = \"false\";\r\n  symbol = CommonSymbols.false_;\r\n}\r\n\r\n/** Base class of all unary expressions. */\r\nexport abstract class UnaryExpression extends Expression {\r\n\r\n  /** Operator token. */\r\n  operator: Token;\r\n  /** Operand expression. */\r\n  operand: Expression;\r\n}\r\n\r\n/** Represents a unary postfix expression, e.g. a postfix increment. */\r\nexport class UnaryPostfixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPOSTFIX;\r\n}\r\n\r\n/** Represents a unary prefix expression, e.g. a negation. */\r\nexport class UnaryPrefixExpression extends UnaryExpression {\r\n  kind = NodeKind.UNARYPREFIX;\r\n}\r\n\r\n// statements\r\n\r\n/** Base class of all statement nodes. */\r\nexport abstract class Statement extends Node { }\r\n\r\n/** Indicates the specific kind of a source. */\r\nexport enum SourceKind {\r\n  /** Default source. Usually imported from an entry file. */\r\n  DEFAULT,\r\n  /** Entry file. */\r\n  ENTRY,\r\n  /** Library file. */\r\n  LIBRARY\r\n}\r\n\r\n/** A top-level source node. */\r\nexport class Source extends Node {\r\n  kind = NodeKind.SOURCE;\r\n  parent = null;\r\n\r\n  /** Source kind. */\r\n  sourceKind: SourceKind;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Path used internally. */\r\n  internalPath: string;\r\n  /** Simple path (last part without extension). */\r\n  simplePath: string;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Full source text. */\r\n  text: string;\r\n  /** Tokenizer reference. */\r\n  tokenizer: Tokenizer | null = null;\r\n  /** Source map index. */\r\n  debugInfoIndex: i32 = -1;\r\n  /** Re-exported sources. */\r\n  exportPaths: Set<string> | null = null;\r\n\r\n  /** Constructs a new source node. */\r\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\r\n    super();\r\n    this.sourceKind = kind;\r\n    this.normalizedPath = normalizedPath;\r\n    var internalPath = mangleInternalPath(this.normalizedPath);\r\n    this.internalPath = internalPath;\r\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\r\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\r\n    this.statements = new Array();\r\n    this.range = new Range(this, 0, text.length);\r\n    this.text = text;\r\n  }\r\n\r\n  /** Tests if this source is an entry file. */\r\n  get isEntry(): bool { return this.sourceKind == SourceKind.ENTRY; }\r\n  /** Tests if this source is a stdlib file. */\r\n  get isLibrary(): bool { return this.sourceKind == SourceKind.LIBRARY; }\r\n}\r\n\r\n/** Base class of all declaration statements. */\r\nexport abstract class DeclarationStatement extends Statement {\r\n  /** Simple name being declared. */\r\n  name: IdentifierExpression;\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null = null;\r\n  /** Common flags indicating specific traits. */\r\n  flags: CommonFlags = CommonFlags.NONE;\r\n\r\n  /** Tests if this node has the specified flag or flags. */\r\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this node has one of the specified flags. */\r\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets a specific flag or flags. */\r\n  set(flag: CommonFlags): void { this.flags |= flag; }\r\n}\r\n\r\n/** Represents an index signature declaration. */\r\nexport class IndexSignatureDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\r\n\r\n  /** Key type. */\r\n  keyType: TypeNode;\r\n  /** Value type. */\r\n  valueType: CommonTypeNode;\r\n}\r\n\r\n/** Base class of all variable-like declaration statements. */\r\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\r\n\r\n  /** Variable type. */\r\n  type: CommonTypeNode | null;\r\n  /** Variable initializer. */\r\n  initializer: Expression | null;\r\n}\r\n\r\n/** Represents a block statement. */\r\nexport class BlockStatement extends Statement {\r\n  kind = NodeKind.BLOCK;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `break` statement. */\r\nexport class BreakStatement extends Statement {\r\n  kind = NodeKind.BREAK;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `class` declaration. */\r\nexport class ClassDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.CLASSDECLARATION;\r\n\r\n  /** Accepted type parameters. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Base class type being extended, if any. */\r\n  extendsType: TypeNode | null; // can't be a function\r\n  /** Interface types being implemented, if any. */\r\n  implementsTypes: TypeNode[] | null; // can't be functions\r\n  /** Class member declarations. */\r\n  members: DeclarationStatement[];\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n}\r\n\r\n/** Represents a `continue` statement. */\r\nexport class ContinueStatement extends Statement {\r\n  kind = NodeKind.CONTINUE;\r\n\r\n  /** Target label, if applicable. */\r\n  label: IdentifierExpression | null;\r\n}\r\n\r\n/** Represents a `do` statement. */\r\nexport class DoStatement extends Statement {\r\n  kind = NodeKind.DO;\r\n\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n  /** Condition when to repeat. */\r\n  condition: Expression;\r\n}\r\n\r\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\r\nexport class EmptyStatement extends Statement {\r\n  kind = NodeKind.EMPTY;\r\n}\r\n\r\n/** Represents an `enum` declaration. */\r\nexport class EnumDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.ENUMDECLARATION;\r\n\r\n  /** Enum value declarations. */\r\n  values: EnumValueDeclaration[];\r\n}\r\n\r\n/** Represents a value of an `enum` declaration. */\r\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.ENUMVALUEDECLARATION;\r\n  // name is inherited\r\n\r\n  /** Value expression. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents an `export import` statement of an interface. */\r\nexport class ExportImportStatement extends Node {\r\n  kind = NodeKind.EXPORTIMPORT;\r\n\r\n  /** Identifier being imported. */\r\n  name: IdentifierExpression;\r\n  /** Identifier being exported. */\r\n  externalName: IdentifierExpression;\r\n}\r\n\r\n/** Represents a member of an `export` statement. */\r\nexport class ExportMember extends Node {\r\n  kind = NodeKind.EXPORTMEMBER;\r\n\r\n  /** Local identifier. */\r\n  localName: IdentifierExpression;\r\n  /** Exported identifier. */\r\n  exportedName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `export` statement. */\r\nexport class ExportStatement extends Statement {\r\n  kind = NodeKind.EXPORT;\r\n\r\n  /** Array of members if a set of named exports, or `null` if a file export. */\r\n  members: ExportMember[] | null;\r\n  /** Path being exported from, if applicable. */\r\n  path: StringLiteralExpression | null;\r\n  /** Normalized path, if `path` is set. */\r\n  normalizedPath: string | null;\r\n  /** Mangled internal path being referenced, if `path` is set. */\r\n  internalPath: string | null;\r\n  /** Whether this is a declared export. */\r\n  isDeclare: bool;\r\n}\r\n\r\n/** Represents an expression that is used as a statement. */\r\nexport class ExpressionStatement extends Statement {\r\n  kind = NodeKind.EXPRESSION;\r\n\r\n  /** Expression being used as a statement.*/\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a field declaration within a `class`. */\r\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.FIELDDECLARATION;\r\n\r\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\r\n  parameterIndex: i32 = -1;\r\n}\r\n\r\n/** Represents a `for` statement. */\r\nexport class ForStatement extends Statement {\r\n  kind = NodeKind.FOR;\r\n\r\n  /**\r\n   * Initializer statement, if present.\r\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\r\n   */\r\n  initializer: Statement | null;\r\n  /** Condition expression, if present. */\r\n  condition: Expression | null;\r\n  /** Incrementor expression, if present. */\r\n  incrementor: Expression | null;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Indicates the kind of an array function. */\r\nexport const enum ArrowKind {\r\n  /** Not an arrow function. */\r\n  NONE,\r\n  /** Parenthesized parameter list. */\r\n  ARROW_PARENTHESIZED,\r\n  /** Single parameter without parenthesis. */\r\n  ARROW_SINGLE\r\n}\r\n\r\n/** Represents a `function` declaration. */\r\nexport class FunctionDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.FUNCTIONDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Function signature. */\r\n  signature: SignatureNode;\r\n  /** Body statement. Usually a block. */\r\n  body: Statement | null;\r\n  /** Arrow function kind, if applicable. */\r\n  arrowKind: ArrowKind;\r\n\r\n  get isGeneric(): bool {\r\n    var typeParameters = this.typeParameters;\r\n    return typeParameters != null && typeParameters.length > 0;\r\n  }\r\n\r\n  /** Clones this function declaration. */\r\n  clone(): FunctionDeclaration {\r\n    return Node.createFunctionDeclaration(\r\n      this.name,\r\n      this.typeParameters,\r\n      this.signature,\r\n      this.body,\r\n      this.decorators,\r\n      this.flags,\r\n      this.arrowKind,\r\n      this.range\r\n    );\r\n  }\r\n}\r\n\r\n/** Represents an `if` statement. */\r\nexport class IfStatement extends Statement {\r\n  kind = NodeKind.IF;\r\n\r\n  /** Condition. */\r\n  condition: Expression;\r\n  /** Statement executed when condition is `true`. */\r\n  ifTrue: Statement;\r\n  /** Statement executed when condition is `false`. */\r\n  ifFalse: Statement | null;\r\n}\r\n\r\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\r\nexport class ImportDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.IMPORTDECLARATION;\r\n\r\n  /** Identifier being imported. */\r\n  foreignName: IdentifierExpression;\r\n}\r\n\r\n/** Represents an `import` statement. */\r\nexport class ImportStatement extends Statement {\r\n  kind = NodeKind.IMPORT;\r\n\r\n  /** Array of member declarations or `null` if an asterisk import. */\r\n  declarations: ImportDeclaration[] | null;\r\n  /** Name of the local namespace, if an asterisk import. */\r\n  namespaceName: IdentifierExpression | null;\r\n  /** Path being imported from. */\r\n  path: StringLiteralExpression;\r\n  /** Normalized path. */\r\n  normalizedPath: string;\r\n  /** Mangled internal path being referenced. */\r\n  internalPath: string;\r\n}\r\n\r\n/** Represents an `interfarce` declaration. */\r\nexport class InterfaceDeclaration extends ClassDeclaration {\r\n  kind = NodeKind.INTERFACEDECLARATION;\r\n}\r\n\r\n/** Represents a method declaration within a `class`. */\r\nexport class MethodDeclaration extends FunctionDeclaration {\r\n  kind = NodeKind.METHODDECLARATION;\r\n}\r\n\r\n/** Represents a `namespace` declaration. */\r\nexport class NamespaceDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.NAMESPACEDECLARATION;\r\n\r\n  /** Array of namespace members. */\r\n  members: Statement[];\r\n}\r\n\r\n/** Represents a `return` statement. */\r\nexport class ReturnStatement extends Statement {\r\n  kind = NodeKind.RETURN;\r\n\r\n  /** Value expression being returned, if present. */\r\n  value: Expression | null;\r\n}\r\n\r\n/** Represents a single `case` within a `switch` statement. */\r\nexport class SwitchCase extends Node {\r\n  kind = NodeKind.SWITCHCASE;\r\n\r\n  /** Label expression. `null` indicates the default case. */\r\n  label: Expression | null;\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n}\r\n\r\n/** Represents a `switch` statement. */\r\nexport class SwitchStatement extends Statement {\r\n  kind = NodeKind.SWITCH;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Contained cases. */\r\n  cases: SwitchCase[];\r\n}\r\n\r\n/** Represents a `throw` statement. */\r\nexport class ThrowStatement extends Statement {\r\n  kind = NodeKind.THROW;\r\n\r\n  /** Value expression being thrown. */\r\n  value: Expression;\r\n}\r\n\r\n/** Represents a `try` statement. */\r\nexport class TryStatement extends Statement {\r\n  kind = NodeKind.TRY;\r\n\r\n  /** Contained statements. */\r\n  statements: Statement[];\r\n  /** Exception variable name, if a `catch` clause is present. */\r\n  catchVariable: IdentifierExpression | null;\r\n  /** Statements being executed on catch, if a `catch` clause is present. */\r\n  catchStatements: Statement[] | null;\r\n  /** Statements being executed afterwards, if a `finally` clause is present. */\r\n  finallyStatements: Statement[] | null;\r\n}\r\n\r\n/** Represents a `type` declaration. */\r\nexport class TypeDeclaration extends DeclarationStatement {\r\n  kind = NodeKind.TYPEDECLARATION;\r\n\r\n  /** Type parameters, if any. */\r\n  typeParameters: TypeParameterNode[] | null;\r\n  /** Type being aliased. */\r\n  type: CommonTypeNode;\r\n}\r\n\r\n/** Represents a variable declaration part of a {@link VariableStatement}. */\r\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\r\n  kind = NodeKind.VARIABLEDECLARATION;\r\n}\r\n\r\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\r\nexport class VariableStatement extends Statement {\r\n  kind = NodeKind.VARIABLE;\r\n\r\n  /** Array of decorators. */\r\n  decorators: DecoratorNode[] | null;\r\n  /** Array of member declarations. */\r\n  declarations: VariableDeclaration[];\r\n}\r\n\r\n/** Represents a void statement dropping an expression's value. */\r\nexport class VoidStatement extends Statement {\r\n  kind = NodeKind.VOID;\r\n\r\n  /** Expression being dropped. */\r\n  expression: Expression;\r\n}\r\n\r\n/** Represents a `while` statement. */\r\nexport class WhileStatement extends Statement {\r\n  kind = NodeKind.WHILE;\r\n\r\n  /** Condition expression. */\r\n  condition: Expression;\r\n  /** Statement being looped over. */\r\n  statement: Statement;\r\n}\r\n\r\n/** Finds the first decorator matching the specified kind. */\r\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\r\n  if (decorators) {\r\n    for (let i = 0, k = decorators.length; i < k; ++i) {\r\n      let decorator = decorators[i];\r\n      if (decorator.decoratorKind == kind) return decorator;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/** Mangles an external to an internal path. */\r\nexport function mangleInternalPath(path: string): string {\r\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\r\n  return path;\r\n}\r\n\r\n/** Tests if the specified type node represents an omitted type. */\r\nexport function isTypeOmitted(type: CommonTypeNode): bool {\r\n  if (type.kind == NodeKind.TYPE) {\r\n    let name = (<TypeNode>type).name;\r\n    return !(name.next || name.identifier.text.length);\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * Mappings from AssemblyScript types to WebAssembly types.\r\n * @module types\r\n *//***/\r\n\r\nimport {\r\n  Class,\r\n  FunctionTarget,\r\n  Program,\r\n  DecoratorFlags\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionRef,\r\n  Module\r\n} from \"./module\";\r\n\r\n/** Indicates the kind of a type. */\r\nexport const enum TypeKind {\r\n\r\n  // signed integers\r\n\r\n  /** An 8-bit signed integer. */\r\n  I8,\r\n  /** A 16-bit signed integer. */\r\n  I16,\r\n  /** A 32-bit signed integer. */\r\n  I32,\r\n  /** A 64-bit signed integer. */\r\n  I64,\r\n  /** A 32-bit/64-bit signed integer, depending on the target. */\r\n  ISIZE,\r\n\r\n  // unsigned integers\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  U8,\r\n  /** A 16-bit unsigned integer. */\r\n  U16,\r\n  /** A 32-bit unsigned integer. Also the base of function types. */\r\n  U32,\r\n  /** A 64-bit unsigned integer. */\r\n  U64,\r\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\r\n  USIZE,\r\n  /** A 1-bit unsigned integer. */\r\n  BOOL, // sic\r\n\r\n  // floats\r\n\r\n  /** A 32-bit float. */\r\n  F32,\r\n  /** A 64-bit double. */\r\n  F64,\r\n\r\n  // vectors\r\n\r\n  /** A 128-bit vector. */\r\n  V128,\r\n\r\n  // other\r\n\r\n  /** No return type. */\r\n  VOID\r\n}\r\n\r\n/** Indicates capabilities of a type. */\r\nexport const enum TypeFlags {\r\n  NONE = 0,\r\n  /** Is a signed type that can represent negative values. */\r\n  SIGNED = 1 << 0,\r\n  /** Is an unsigned type that cannot represent negative values. */\r\n  UNSIGNED = 1 << 1,\r\n  /** Is an integer type. */\r\n  INTEGER = 1 << 2,\r\n  /** Is a floating point type. */\r\n  FLOAT = 1 << 3,\r\n  /** Is a pointer type. */\r\n  POINTER = 1 << 4,\r\n  /** Is smaller than 32-bits. */\r\n  SHORT = 1 << 5,\r\n  /** Is larger than 32-bits. */\r\n  LONG = 1 << 6,\r\n  /** Is a value type. */\r\n  VALUE = 1 << 7,\r\n  /** Is a reference type. */\r\n  REFERENCE = 1 << 8,\r\n  /** Is a nullable type. */\r\n  NULLABLE = 1 << 9,\r\n  /** Is a vector type. */\r\n  VECTOR = 1 << 10\r\n}\r\n\r\nconst v128_zero = new Uint8Array(16);\r\n\r\n/** Represents a resolved type. */\r\nexport class Type {\r\n\r\n  /** Type kind. */\r\n  kind: TypeKind;\r\n  /** Type flags. */\r\n  flags: TypeFlags;\r\n  /** Size in bits. */\r\n  size: u32;\r\n  /** Size in bytes. */\r\n  byteSize: i32;\r\n  /** Underlying class reference, if a class type. */\r\n  classReference: Class | null;\r\n  /** Underlying signature reference, if a function type. */\r\n  signatureReference: Signature | null;\r\n  /** Respective non-nullable type, if nullable. */\r\n  nonNullableType: Type;\r\n  /** Cached nullable type, if non-nullable. */\r\n  private cachedNullableType: Type | null = null;\r\n\r\n  /** Constructs a new resolved type. */\r\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\r\n    this.kind = kind;\r\n    this.flags = flags;\r\n    this.size = size;\r\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\r\n    this.classReference = null;\r\n    this.signatureReference = null;\r\n    this.nonNullableType = this;\r\n  }\r\n\r\n  /** Returns the closest int type representing this type. */\r\n  get intType(): Type {\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return Type.i8;\r\n      case TypeKind.I16: return Type.i16;\r\n      case TypeKind.F32:\r\n      case TypeKind.I32: return Type.i32;\r\n      case TypeKind.F64:\r\n      case TypeKind.I64: return Type.i64;\r\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\r\n      case TypeKind.U8: return Type.u8;\r\n      case TypeKind.U16: return Type.u16;\r\n      case TypeKind.U32: return Type.u32;\r\n      case TypeKind.U64: return Type.u64;\r\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\r\n      case TypeKind.BOOL:\r\n      default: return Type.i32;\r\n    }\r\n  }\r\n\r\n  /** Tests if this is a managed type that needs GC hooks. */\r\n  isManaged(program: Program): bool {\r\n    if (program.hasGC) {\r\n      let classReference = this.classReference;\r\n      return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Computes the sign-extending shift in the target type. */\r\n  computeSmallIntegerShift(targetType: Type): u32 {\r\n    return targetType.size - this.size;\r\n  }\r\n\r\n  /** Computes the truncating mask in the target type. */\r\n  computeSmallIntegerMask(targetType: Type): u32 {\r\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\r\n    return ~0 >>> (targetType.size - size);\r\n  }\r\n\r\n  /** Tests if this type has (all of) the specified flags. */\r\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\r\n  /** Tests if this type has any of the specified flags. */\r\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\r\n\r\n  /** Composes a class type from this type and a class. */\r\n  asClass(classType: Class): Type {\r\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.classReference = classType;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes a function type from this type and a function. */\r\n  asFunction(signature: Signature): Type {\r\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\r\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\r\n    ret.signatureReference = signature;\r\n    return ret;\r\n  }\r\n\r\n  /** Composes the respective nullable type of this type. */\r\n  asNullable(): Type {\r\n    assert(this.is(TypeFlags.REFERENCE));\r\n    if (!this.cachedNullableType) {\r\n      assert(!this.is(TypeFlags.NULLABLE));\r\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\r\n      this.cachedNullableType.nonNullableType = this;\r\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\r\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\r\n    }\r\n    return this.cachedNullableType;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\r\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\r\n    var currentClass: Class | null;\r\n    var targetClass: Class | null;\r\n    var currentFunction: Signature | null;\r\n    var targetFunction: Signature | null;\r\n    if (this.is(TypeFlags.REFERENCE)) {\r\n      if (target.is(TypeFlags.REFERENCE)) {\r\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\r\n          if (currentClass = this.classReference) {\r\n            if (targetClass = target.classReference) {\r\n              return currentClass.isAssignableTo(targetClass);\r\n            }\r\n          } else if (currentFunction = this.signatureReference) {\r\n            if (targetFunction = target.signatureReference) {\r\n              return currentFunction.isAssignableTo(targetFunction);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } else if (!target.is(TypeFlags.REFERENCE)) {\r\n      if (this.is(TypeFlags.INTEGER)) {\r\n        if (target.is(TypeFlags.INTEGER)) {\r\n          if (\r\n            !signednessIsRelevant ||\r\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\r\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\r\n          ) {\r\n            return this.size <= target.size;\r\n          }\r\n        } else if (target.kind == TypeKind.F32) {\r\n          return this.size <= 23; // mantissa bits\r\n        } else if (target.kind == TypeKind.F64) {\r\n          return this.size <= 52; // ^\r\n        }\r\n      } else if (this.is(TypeFlags.FLOAT)) {\r\n        if (target.is(TypeFlags.FLOAT)) {\r\n          return this.size <= target.size;\r\n        }\r\n      } else if (this.is(TypeFlags.VECTOR)) {\r\n        if (target.is(TypeFlags.VECTOR)) {\r\n          return this.size == target.size;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\r\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\r\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\r\n    else if (target.is(TypeFlags.REFERENCE)) return false;\r\n    if (this.is(TypeFlags.INTEGER)) {\r\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\r\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\r\n      );\r\n    }\r\n    return this.kind == target.kind;\r\n  }\r\n\r\n  /** Determines the common denominator type of two types, if there is any. */\r\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\r\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\r\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\r\n    return null;\r\n  }\r\n\r\n  /** Converts this type to its TypeScript representation. */\r\n  toString(kindOnly: bool = false): string {\r\n    if (!kindOnly && this.is(TypeFlags.REFERENCE)) {\r\n      let classReference = this.classReference;\r\n      if (classReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? classReference.name + \" | null\"\r\n          : classReference.name;\r\n      }\r\n      let signatureReference = this.signatureReference;\r\n      if (signatureReference) {\r\n        return this.is(TypeFlags.NULLABLE)\r\n          ? \"(\" + signatureReference.toString(true) + \") | null\"\r\n          : signatureReference.toString(true);\r\n      }\r\n      assert(false);\r\n    }\r\n    switch (this.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"i64\";\r\n      case TypeKind.ISIZE: return \"isize\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n      case TypeKind.U64: return \"u64\";\r\n      case TypeKind.USIZE: return \"usize\";\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.V128: return \"v128\";\r\n      default: assert(false);\r\n      case TypeKind.VOID: return \"void\";\r\n    }\r\n  }\r\n\r\n  // Binaryen specific\r\n\r\n  /** Converts this type to its respective native type. */\r\n  toNativeType(): NativeType {\r\n    switch (this.kind) {\r\n      default: return NativeType.I32;\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return NativeType.I64;\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\r\n      case TypeKind.F32: return NativeType.F32;\r\n      case TypeKind.F64: return NativeType.F64;\r\n      case TypeKind.V128: return NativeType.V128;\r\n      case TypeKind.VOID:  return NativeType.None;\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `0` value. */\r\n  toNativeZero(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(0);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(0);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(0);\r\n      case TypeKind.F32: return module.createF32(0);\r\n      case TypeKind.F64: return module.createF64(0);\r\n      case TypeKind.V128: return module.createV128(v128_zero);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `1` value. */\r\n  toNativeOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.V128:\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(1);\r\n      case TypeKind.F32: return module.createF32(1);\r\n      case TypeKind.F64: return module.createF64(1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its native `-1` value. */\r\n  toNativeNegOne(module: Module): ExpressionRef {\r\n    switch (this.kind) {\r\n      case TypeKind.V128:\r\n      case TypeKind.VOID: assert(false);\r\n      default: return module.createI32(-1);\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: if (this.size != 64) return module.createI32(-1);\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return module.createI64(-1, -1);\r\n      case TypeKind.F32: return module.createF32(-1);\r\n      case TypeKind.F64: return module.createF64(-1);\r\n    }\r\n  }\r\n\r\n  /** Converts this type to its signature string. */\r\n  toSignatureString(): string {\r\n    switch (this.kind) {\r\n      // same naming scheme as Binaryen\r\n      case TypeKind.I8:\r\n      case TypeKind.U8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U16:\r\n      case TypeKind.I32:\r\n      case TypeKind.U32:\r\n      case TypeKind.BOOL: return \"i\";\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: return \"j\";\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: return this.size == 64 ? \"j\" : \"i\";\r\n      case TypeKind.F32: return \"f\";\r\n      case TypeKind.F64: return \"d\";\r\n      case TypeKind.V128: return \"V\";\r\n      case TypeKind.VOID: return \"v\";\r\n      default: assert(false);\r\n    }\r\n    return \"i\";\r\n  }\r\n\r\n  // Types\r\n\r\n  /** An 8-bit signed integer. */\r\n  static readonly i8: Type  = new Type(TypeKind.I8,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit signed integer. */\r\n  static readonly i16: Type = new Type(TypeKind.I16,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit signed integer. */\r\n  static readonly i32: Type = new Type(TypeKind.I32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed integer. */\r\n  static readonly i64: Type = new Type(TypeKind.I64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit signed size. WASM32 only. */\r\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit signed size. WASM64 only. */\r\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** An 8-bit unsigned integer. */\r\n  static readonly u8: Type = new Type(TypeKind.U8,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   8\r\n  );\r\n\r\n  /** A 16-bit unsigned integer. */\r\n  static readonly u16: Type = new Type(TypeKind.U16,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  16\r\n  );\r\n\r\n  /** A 32-bit unsigned integer. */\r\n  static readonly u32: Type = new Type(TypeKind.U32,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned integer. */\r\n  static readonly u64: Type = new Type(TypeKind.U64,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 32-bit unsigned size. WASM32 only. */\r\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit unsigned size. WASM64 only. */\r\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.POINTER  |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 1-bit unsigned integer. */\r\n  static readonly bool: Type = new Type(TypeKind.BOOL,\r\n    TypeFlags.UNSIGNED |\r\n    TypeFlags.SHORT    |\r\n    TypeFlags.INTEGER  |\r\n    TypeFlags.VALUE,   1\r\n  );\r\n\r\n  /** A 32-bit float. */\r\n  static readonly f32: Type = new Type(TypeKind.F32,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  32\r\n  );\r\n\r\n  /** A 64-bit float. */\r\n  static readonly f64: Type = new Type(TypeKind.F64,\r\n    TypeFlags.SIGNED   |\r\n    TypeFlags.LONG     |\r\n    TypeFlags.FLOAT    |\r\n    TypeFlags.VALUE,  64\r\n  );\r\n\r\n  /** A 128-bit vector. */\r\n  static readonly v128: Type = new Type(TypeKind.V128,\r\n    TypeFlags.VECTOR   |\r\n    TypeFlags.VALUE, 128\r\n  );\r\n\r\n  /** No return type. */\r\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\r\n}\r\n\r\n/** Converts an array of types to an array of native types. */\r\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\r\n  var numTypes = types.length;\r\n  var ret = new Array<NativeType>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\r\n  return ret;\r\n}\r\n\r\n/** Converts an array of types to its combined string representation. */\r\nexport function typesToString(types: Type[]): string {\r\n  var numTypes = types.length;\r\n  if (!numTypes) return \"\";\r\n  var sb = new Array<string>(numTypes);\r\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\r\n  return sb.join(\",\");\r\n}\r\n\r\n/** Represents a fully resolved function signature. */\r\nexport class Signature {\r\n\r\n  /** Parameter types, if any, excluding `this`. */\r\n  parameterTypes: Type[];\r\n  /** Parameter names, if known, excluding `this`. */\r\n  parameterNames: string[] | null;\r\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\r\n  requiredParameters: i32;\r\n  /** Return type. */\r\n  returnType: Type;\r\n  /** This type, if an instance signature. */\r\n  thisType: Type | null;\r\n  /** Whether the last parameter is a rest parameter. */\r\n  hasRest: bool;\r\n  /** Cached {@link FunctionTarget}. */\r\n  cachedFunctionTarget: FunctionTarget | null = null;\r\n  /** Respective function type. */\r\n  type: Type;\r\n\r\n  /** Constructs a new signature. */\r\n  constructor(\r\n    parameterTypes: Type[] | null = null,\r\n    returnType: Type | null = null,\r\n    thisType: Type | null = null\r\n  ) {\r\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\r\n    this.parameterNames = null;\r\n    this.requiredParameters = 0;\r\n    this.returnType = returnType ? returnType : Type.void;\r\n    this.thisType = thisType;\r\n    this.hasRest = false;\r\n    this.type = Type.u32.asFunction(this);\r\n  }\r\n\r\n  asFunctionTarget(program: Program): FunctionTarget {\r\n    var target = this.cachedFunctionTarget;\r\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\r\n    else assert(target.program == program);\r\n    return target;\r\n  }\r\n\r\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\r\n  getParameterName(index: i32): string {\r\n    var parameterNames = this.parameterNames;\r\n    return parameterNames && parameterNames.length > index\r\n      ? parameterNames[index]\r\n      : getDefaultParameterName(index);\r\n  }\r\n\r\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\r\n  isAssignableTo(target: Signature): bool {\r\n    // TODO: maybe cache results?\r\n\r\n    // check `this` type\r\n    var thisThisType = this.thisType;\r\n    var targetThisType = target.thisType;\r\n    if (thisThisType) {\r\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\r\n    } else if (targetThisType) {\r\n      return false;\r\n    }\r\n\r\n    // check rest parameter\r\n    if (this.hasRest != target.hasRest) return false; // TODO\r\n\r\n    // check parameter types\r\n    var thisParameterTypes = this.parameterTypes;\r\n    var targetParameterTypes = target.parameterTypes;\r\n    var numParameters = thisParameterTypes.length;\r\n    if (numParameters != targetParameterTypes.length) return false;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      let thisParameterType = thisParameterTypes[i];\r\n      let targetParameterType = targetParameterTypes[i];\r\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\r\n    }\r\n\r\n    // check return type\r\n    var thisReturnType = this.returnType;\r\n    var targetReturnType = target.returnType;\r\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\r\n  }\r\n\r\n  /** Converts a signature to a function type string. */\r\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\r\n    var sb = [];\r\n    sb.push(returnType.toSignatureString());\r\n    if (thisType) sb.push(thisType.toSignatureString());\r\n    if (parameterTypes) {\r\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\r\n    }\r\n    return \"FUNCSIG$\" + sb.join(\"\");\r\n  }\r\n\r\n  /** Converts this signature to a function type string. */\r\n  toSignatureString(): string {\r\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\r\n  }\r\n\r\n  /** Converts this signature to a string. */\r\n  toString(includeThis: bool = false): string {\r\n    var sb = new Array<string>();\r\n    sb.push(\"(\");\r\n    var index = 0;\r\n    var thisType = this.thisType;\r\n    if (thisType) {\r\n      if (includeThis) {\r\n        sb.push(\"this: \");\r\n        sb.push(thisType.toString());\r\n        index = 1;\r\n      }\r\n    }\r\n    var parameters = this.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    if (numParameters) {\r\n      let names = this.parameterNames;\r\n      let numNames = names ? names.length : 0;\r\n      let optionalStart = this.requiredParameters;\r\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        if (index) sb.push(\", \");\r\n        if (i == restIndex) sb.push(\"...\");\r\n        if (i < numNames) sb.push((<string[]>names)[i]);\r\n        else sb.push(getDefaultParameterName(i));\r\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\r\n        else sb.push(\": \");\r\n        sb.push(parameters[i].toString());\r\n      }\r\n    }\r\n    sb.push(\") => \");\r\n    sb.push(this.returnType.toString());\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n// Cached default parameter names used where names are unknown.\r\nvar cachedDefaultParameterNames: string[] | null = null;\r\n\r\n/** Gets the cached default parameter name for the specified index. */\r\nexport function getDefaultParameterName(index: i32): string {\r\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\r\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\r\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\r\n  }\r\n  return cachedDefaultParameterNames[index - 1];\r\n}\r\n","/**\r\n * A TypeScript tokenizer modified for AssemblyScript.\r\n *\r\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\r\n * ambiguous tokens.\r\n *\r\n * @module tokenizer\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticMessage,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Source,\r\n  CommentKind\r\n} from \"./ast\";\r\n\r\nimport {\r\n  CharCode,\r\n  isLineBreak,\r\n  isWhiteSpace,\r\n  isIdentifierStart,\r\n  isIdentifierPart,\r\n  isDecimalDigit,\r\n  isOctalDigit,\r\n  isKeywordCharacter\r\n} from \"./util\";\r\n\r\n/** Named token types. */\r\nexport enum Token {\r\n\r\n  // keywords\r\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\r\n\r\n  ABSTRACT,\r\n  AS,\r\n  ASYNC,\r\n  AWAIT,        // ES2017\r\n  BREAK,        // ES2017\r\n  CASE,         // ES2017\r\n  CATCH,        // ES2017\r\n  CLASS,        // ES2017\r\n  CONST,        // ES2017\r\n  CONTINUE,     // ES2017\r\n  CONSTRUCTOR,\r\n  DEBUGGER,     // ES2017\r\n  DECLARE,\r\n  DEFAULT,      // ES2017\r\n  DELETE,       // ES2017\r\n  DO,           // ES2017\r\n  ELSE,         // ES2017\r\n  ENUM,         // ES2017 future\r\n  EXPORT,       // ES2017\r\n  EXTENDS,      // ES2017\r\n  FALSE,        // ES\r\n  FINALLY,      // ES2017\r\n  FOR,          // ES2017\r\n  FROM,         // AS possible identifier\r\n  FUNCTION,     // ES2017\r\n  GET,\r\n  IF,           // ES2017\r\n  IMPLEMENTS,   // ES2017 non-lexical\r\n  IMPORT,       // ES2017\r\n  IN,           // ES2017\r\n  INSTANCEOF,   // ES2017\r\n  INTERFACE,    // ES2017 non-lexical\r\n  IS,\r\n  KEYOF,\r\n  LET,          // ES2017 non-lexical\r\n  MODULE,       // AS possible identifier\r\n  NAMESPACE,    // AS possible identifier\r\n  NEW,          // ES2017\r\n  NULL,         // ES\r\n  OF,\r\n  PACKAGE,      // ES2017 non-lexical\r\n  PRIVATE,      // ES2017 non-lexical\r\n  PROTECTED,    // ES2017 non-lexical\r\n  PUBLIC,       // ES2017 non-lexical\r\n  READONLY,\r\n  RETURN,       // ES2017\r\n  SET,\r\n  STATIC,       // ES2017 non-lexical\r\n  SUPER,        // ES2017\r\n  SWITCH,       // ES2017\r\n  THIS,         // ES2017\r\n  THROW,        // ES2017\r\n  TRUE,         // ES\r\n  TRY,          // ES2017\r\n  TYPE,         // AS possible identifier\r\n  TYPEOF,       // ES2017\r\n  VAR,          // ES2017\r\n  VOID,         // ES2017\r\n  WHILE,        // ES2017\r\n  WITH,         // ES2017\r\n  YIELD,        // ES2017\r\n\r\n  // punctuation\r\n\r\n  OPENBRACE,\r\n  CLOSEBRACE,\r\n  OPENPAREN,\r\n  CLOSEPAREN,\r\n  OPENBRACKET,\r\n  CLOSEBRACKET,\r\n  DOT,\r\n  DOT_DOT_DOT,\r\n  SEMICOLON,\r\n  COMMA,\r\n  LESSTHAN,\r\n  GREATERTHAN,\r\n  LESSTHAN_EQUALS,\r\n  GREATERTHAN_EQUALS,\r\n  EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS,\r\n  EQUALS_EQUALS_EQUALS,\r\n  EXCLAMATION_EQUALS_EQUALS,\r\n  EQUALS_GREATERTHAN,\r\n  PLUS,\r\n  MINUS,\r\n  ASTERISK_ASTERISK,\r\n  ASTERISK,\r\n  SLASH,\r\n  PERCENT,\r\n  PLUS_PLUS,\r\n  MINUS_MINUS,\r\n  LESSTHAN_LESSTHAN,\r\n  GREATERTHAN_GREATERTHAN,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\r\n  AMPERSAND,\r\n  BAR,\r\n  CARET,\r\n  EXCLAMATION,\r\n  TILDE,\r\n  AMPERSAND_AMPERSAND,\r\n  BAR_BAR,\r\n  QUESTION,\r\n  COLON,\r\n  EQUALS,\r\n  PLUS_EQUALS,\r\n  MINUS_EQUALS,\r\n  ASTERISK_EQUALS,\r\n  ASTERISK_ASTERISK_EQUALS,\r\n  SLASH_EQUALS,\r\n  PERCENT_EQUALS,\r\n  LESSTHAN_LESSTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_EQUALS,\r\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\r\n  AMPERSAND_EQUALS,\r\n  BAR_EQUALS,\r\n  CARET_EQUALS,\r\n  AT,\r\n\r\n  // literals\r\n\r\n  IDENTIFIER,\r\n  STRINGLITERAL,\r\n  INTEGERLITERAL,\r\n  FLOATLITERAL,\r\n\r\n  // meta\r\n\r\n  INVALID,\r\n  ENDOFFILE\r\n}\r\n\r\nexport enum IdentifierHandling {\r\n  DEFAULT,\r\n  PREFER,\r\n  ALWAYS\r\n}\r\n\r\nexport function tokenFromKeyword(text: string): Token {\r\n  assert(text.length);\r\n  switch (text.charCodeAt(0)) {\r\n    case CharCode.a: {\r\n      switch (text) {\r\n        case \"abstract\": return Token.ABSTRACT;\r\n        case \"as\": return Token.AS;\r\n        case \"async\": return Token.ASYNC;\r\n        case \"await\": return Token.AWAIT;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.b: {\r\n      switch (text) {\r\n        case \"break\": return Token.BREAK;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.c: {\r\n      switch (text) {\r\n        case \"case\": return Token.CASE;\r\n        case \"catch\": return Token.CATCH;\r\n        case \"class\": return Token.CLASS;\r\n        case \"continue\": return Token.CONTINUE;\r\n        case \"const\": return Token.CONST;\r\n        case \"constructor\": return Token.CONSTRUCTOR;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.d: {\r\n      switch (text) {\r\n        case \"debugger\": return Token.DEBUGGER;\r\n        case \"declare\": return Token.DECLARE;\r\n        case \"default\": return Token.DEFAULT;\r\n        case \"delete\": return Token.DELETE;\r\n        case \"do\": return Token.DO;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.e: {\r\n      switch (text) {\r\n        case \"else\": return Token.ELSE;\r\n        case \"enum\": return Token.ENUM;\r\n        case \"export\": return Token.EXPORT;\r\n        case \"extends\": return Token.EXTENDS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.f: {\r\n      switch (text) {\r\n        case \"false\": return Token.FALSE;\r\n        case \"finally\": return Token.FINALLY;\r\n        case \"for\": return Token.FOR;\r\n        case \"from\": return Token.FROM;\r\n        case \"function\": return Token.FUNCTION;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.g: {\r\n      switch (text) {\r\n        case \"get\": return Token.GET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.i: {\r\n      switch (text) {\r\n        case \"if\": return Token.IF;\r\n        case \"implements\": return Token.IMPLEMENTS;\r\n        case \"import\": return Token.IMPORT;\r\n        case \"in\": return Token.IN;\r\n        case \"instanceof\": return Token.INSTANCEOF;\r\n        case \"interface\": return Token.INTERFACE;\r\n        case \"is\": return Token.IS;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.k: {\r\n      switch (text) {\r\n        case \"keyof\": return Token.KEYOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.l: {\r\n      switch (text) {\r\n        case \"let\": return Token.LET;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.m: {\r\n      switch (text) {\r\n        case \"module\": return Token.MODULE;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.n: {\r\n      switch (text) {\r\n        case \"namespace\": return Token.NAMESPACE;\r\n        case \"new\": return Token.NEW;\r\n        case \"null\": return Token.NULL;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.o: {\r\n      switch (text) {\r\n        case \"of\": return Token.OF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.p: {\r\n      switch (text) {\r\n        case \"package\": return Token.PACKAGE;\r\n        case \"private\": return Token.PRIVATE;\r\n        case \"protected\": return Token.PROTECTED;\r\n        case \"public\": return Token.PUBLIC;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.r: {\r\n      switch (text) {\r\n        case \"readonly\": return Token.READONLY;\r\n        case \"return\": return Token.RETURN;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.s: {\r\n      switch (text) {\r\n        case \"set\": return Token.SET;\r\n        case \"static\": return Token.STATIC;\r\n        case \"super\": return Token.SUPER;\r\n        case \"switch\": return Token.SWITCH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.t: {\r\n      switch (text) {\r\n        case \"this\": return Token.THIS;\r\n        case \"throw\": return Token.THROW;\r\n        case \"true\": return Token.TRUE;\r\n        case \"try\": return Token.TRY;\r\n        case \"type\": return Token.TYPE;\r\n        case \"typeof\": return Token.TYPEOF;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.v: {\r\n      switch (text) {\r\n        case \"var\": return Token.VAR;\r\n        case \"void\": return Token.VOID;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.w: {\r\n      switch (text) {\r\n        case \"while\": return Token.WHILE;\r\n        case \"with\": return Token.WITH;\r\n      }\r\n      break;\r\n    }\r\n    case CharCode.y: {\r\n      switch (text) {\r\n        case \"yield\": return Token.YIELD;\r\n      }\r\n      break;\r\n    }\r\n  }\r\n  return Token.INVALID;\r\n}\r\n\r\nexport function tokenIsAlsoIdentifier(token: Token): bool {\r\n  switch (token) {\r\n    case Token.ABSTRACT:\r\n    case Token.AS:\r\n    case Token.CONSTRUCTOR:\r\n    case Token.DECLARE:\r\n    case Token.DELETE:\r\n    case Token.FROM:\r\n    case Token.FOR:\r\n    case Token.GET:\r\n    case Token.IS:\r\n    case Token.KEYOF:\r\n    case Token.MODULE:\r\n    case Token.NAMESPACE:\r\n    case Token.READONLY:\r\n    case Token.SET:\r\n    case Token.TYPE:\r\n    case Token.VOID: return true;\r\n    default: return false;\r\n  }\r\n}\r\n\r\nexport function operatorTokenToString(token: Token): string {\r\n  switch (token) {\r\n    case Token.DELETE: return \"delete\";\r\n    case Token.IN: return \"in\";\r\n    case Token.INSTANCEOF: return \"instanceof\";\r\n    case Token.NEW: return \"new\";\r\n    case Token.TYPEOF: return \"typeof\";\r\n    case Token.VOID: return \"void\";\r\n    case Token.YIELD: return \"yield\";\r\n    case Token.DOT_DOT_DOT: return \"...\";\r\n    case Token.COMMA: return \",\";\r\n    case Token.LESSTHAN: return \"<\";\r\n    case Token.GREATERTHAN: return \">\";\r\n    case Token.LESSTHAN_EQUALS: return \"<=\";\r\n    case Token.GREATERTHAN_EQUALS: return \">=\";\r\n    case Token.EQUALS_EQUALS: return \"==\";\r\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\r\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\r\n    case Token.PLUS: return \"+\";\r\n    case Token.MINUS: return \"-\";\r\n    case Token.ASTERISK_ASTERISK: return \"**\";\r\n    case Token.ASTERISK: return \"*\";\r\n    case Token.SLASH: return \"/\";\r\n    case Token.PERCENT: return \"%\";\r\n    case Token.PLUS_PLUS: return \"++\";\r\n    case Token.MINUS_MINUS: return \"--\";\r\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\r\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\r\n    case Token.AMPERSAND: return \"&\";\r\n    case Token.BAR: return \"|\";\r\n    case Token.CARET: return \"^\";\r\n    case Token.EXCLAMATION: return \"!\";\r\n    case Token.TILDE: return \"~\";\r\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\r\n    case Token.BAR_BAR: return \"||\";\r\n    case Token.EQUALS: return \"=\";\r\n    case Token.PLUS_EQUALS: return \"+=\";\r\n    case Token.MINUS_EQUALS: return \"-=\";\r\n    case Token.ASTERISK_EQUALS: return \"*=\";\r\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\r\n    case Token.SLASH_EQUALS: return \"/=\";\r\n    case Token.PERCENT_EQUALS: return \"%=\";\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\r\n    case Token.AMPERSAND_EQUALS: return \"&=\";\r\n    case Token.BAR_EQUALS: return \"|=\";\r\n    case Token.CARET_EQUALS: return \"^=\";\r\n    default: {\r\n      assert(false);\r\n      return \"\";\r\n    }\r\n  }\r\n}\r\n\r\nexport class Range {\r\n\r\n  source: Source;\r\n  start: i32;\r\n  end: i32;\r\n\r\n  // TODO: set these while tokenizing\r\n  // line: i32;\r\n  // column: i32;\r\n\r\n  constructor(source: Source, start: i32, end: i32) {\r\n    this.source = source;\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n\r\n  static join(a: Range, b: Range): Range {\r\n    if (a.source != b.source) throw new Error(\"source mismatch\");\r\n    return new Range(a.source,\r\n      a.start < b.start ? a.start : b.start,\r\n      a.end > b.end ? a.end : b.end\r\n    );\r\n  }\r\n\r\n  get atStart(): Range {\r\n    return new Range(this.source, this.start, this.start);\r\n  }\r\n  get atEnd(): Range {\r\n    return new Range(this.source, this.end, this.end);\r\n  }\r\n\r\n  get line(): i32 {\r\n    var text = this.source.text;\r\n    var line = 1;\r\n    for (let pos = this.start; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\r\n    }\r\n    return line;\r\n  }\r\n\r\n  get column(): i32 {\r\n    var text = this.source.text;\r\n    var column = 0;\r\n    for (let pos = this.start - 1; pos >= 0; --pos) {\r\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\r\n      ++column;\r\n    }\r\n    return column;\r\n  }\r\n\r\n  toString(): string {\r\n    return this.source.text.substring(this.start, this.end);\r\n  }\r\n\r\n  debugInfoRef: usize = 0;\r\n}\r\n\r\ndeclare function parseFloat(str: string): f64;\r\n\r\n/** Handler for intercepting comments while tokenizing. */\r\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\r\n\r\n/** Tokenizes a source to individual {@link Token}s. */\r\nexport class Tokenizer extends DiagnosticEmitter {\r\n\r\n  source: Source;\r\n  end: i32 = 0;\r\n\r\n  pos: i32 = 0;\r\n  token: Token = -1;\r\n  tokenPos: i32 = 0;\r\n\r\n  nextToken: Token = -1;\r\n  nextTokenPos: i32 = 0;\r\n  nextTokenOnNewLine: bool = false;\r\n\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new tokenizer. */\r\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\r\n    super(diagnostics);\r\n\r\n    this.source = source;\r\n    this.pos = 0;\r\n    this.end = source.text.length;\r\n    this.diagnostics = diagnostics ? diagnostics : new Array();\r\n\r\n    var text = source.text;\r\n\r\n    // skip bom\r\n    if (\r\n      this.pos < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\r\n    ) {\r\n      ++this.pos;\r\n    }\r\n\r\n    // skip shebang\r\n    if (\r\n      this.pos + 1 < this.end &&\r\n      text.charCodeAt(this.pos) == CharCode.HASH &&\r\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\r\n    ) {\r\n      this.pos += 2;\r\n      while (\r\n        this.pos < this.end &&\r\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\r\n      ) {\r\n        ++this.pos;\r\n      }\r\n      // 'next' now starts at lf or eof\r\n    }\r\n  }\r\n\r\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\r\n    this.nextToken = -1;\r\n    return this.token = this.unsafeNext(identifierHandling);\r\n  }\r\n\r\n  private unsafeNext(\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxTokenLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      this.tokenPos = this.pos;\r\n      let c = text.charCodeAt(this.pos);\r\n      switch (c) {\r\n        case CharCode.CARRIAGERETURN: {\r\n          if (!(\r\n            ++this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n          )) break;\r\n          // otherwise fall-through\r\n        }\r\n        case CharCode.LINEFEED:\r\n        case CharCode.TAB:\r\n        case CharCode.VERTICALTAB:\r\n        case CharCode.FORMFEED:\r\n        case CharCode.SPACE: {\r\n          ++this.pos;\r\n          break;\r\n        }\r\n        case CharCode.EXCLAMATION: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            if (\r\n              maxTokenLength > 2 && this.pos < this.end &&\r\n              text.charCodeAt(this.pos) == CharCode.EQUALS\r\n            ) {\r\n              ++this.pos;\r\n              return Token.EXCLAMATION_EQUALS_EQUALS;\r\n            }\r\n            return Token.EXCLAMATION_EQUALS;\r\n          }\r\n          return Token.EXCLAMATION;\r\n        }\r\n        case CharCode.DOUBLEQUOTE:\r\n        case CharCode.SINGLEQUOTE:\r\n        case CharCode.BACKTICK: { // TODO\r\n          return Token.STRINGLITERAL; // expects a call to readString\r\n        }\r\n        case CharCode.PERCENT: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.PERCENT_EQUALS;\r\n          }\r\n          return Token.PERCENT;\r\n        }\r\n        case CharCode.AMPERSAND: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.AMPERSAND) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_AMPERSAND;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.AMPERSAND_EQUALS;\r\n            }\r\n          }\r\n          return Token.AMPERSAND;\r\n        }\r\n        case CharCode.OPENPAREN: {\r\n          ++this.pos;\r\n          return Token.OPENPAREN;\r\n        }\r\n        case CharCode.CLOSEPAREN: {\r\n          ++this.pos;\r\n          return Token.CLOSEPAREN;\r\n        }\r\n        case CharCode.ASTERISK: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.ASTERISK_EQUALS;\r\n            }\r\n            if (chr == CharCode.ASTERISK) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 && this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.ASTERISK_ASTERISK_EQUALS;\r\n              }\r\n              return Token.ASTERISK_ASTERISK;\r\n            }\r\n          }\r\n          return Token.ASTERISK;\r\n        }\r\n        case CharCode.PLUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.PLUS) {\r\n              ++this.pos;\r\n              return Token.PLUS_PLUS;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.PLUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.PLUS;\r\n        }\r\n        case CharCode.COMMA: {\r\n          ++this.pos;\r\n          return Token.COMMA;\r\n        }\r\n        case CharCode.MINUS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.MINUS) {\r\n              ++this.pos;\r\n              return Token.MINUS_MINUS;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.MINUS_EQUALS;\r\n            }\r\n          }\r\n          return Token.MINUS;\r\n        }\r\n        case CharCode.DOT: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (isDecimalDigit(chr)) {\r\n              --this.pos;\r\n              return Token.FLOATLITERAL; // expects a call to readFloat\r\n            }\r\n            if (\r\n              maxTokenLength > 2 && this.pos + 1 < this.end &&\r\n              chr == CharCode.DOT &&\r\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\r\n            ) {\r\n              this.pos += 2;\r\n              return Token.DOT_DOT_DOT;\r\n            }\r\n          }\r\n          return Token.DOT;\r\n        }\r\n        case CharCode.SLASH: {\r\n          let commentStartPos = this.pos;\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.SLASH) { // single-line\r\n              let commentKind = CommentKind.LINE;\r\n              if (\r\n                this.pos + 1 < this.end &&\r\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n              ) {\r\n                ++this.pos;\r\n                commentKind = CommentKind.TRIPLE;\r\n              }\r\n              while (++this.pos < this.end) {\r\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\r\n                  ++this.pos;\r\n                  break;\r\n                }\r\n              }\r\n              if (this.onComment) {\r\n                this.onComment(\r\n                  commentKind,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (chr == CharCode.ASTERISK) { // multi-line\r\n              let closed = false;\r\n              while (++this.pos < this.end) {\r\n                c = text.charCodeAt(this.pos);\r\n                if (\r\n                  c == CharCode.ASTERISK &&\r\n                  this.pos + 1 < this.end &&\r\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\r\n                ) {\r\n                  this.pos += 2;\r\n                  closed = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!closed) {\r\n                this.error(\r\n                  DiagnosticCode._0_expected,\r\n                  this.range(this.pos), \"*/\"\r\n                );\r\n              } else if (this.onComment) {\r\n                this.onComment(\r\n                  CommentKind.BLOCK,\r\n                  text.substring(commentStartPos, this.pos),\r\n                  this.range(commentStartPos, this.pos)\r\n                );\r\n              }\r\n              break;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.SLASH_EQUALS;\r\n            }\r\n          }\r\n          return Token.SLASH;\r\n        }\r\n        case CharCode._0:\r\n        case CharCode._1:\r\n        case CharCode._2:\r\n        case CharCode._3:\r\n        case CharCode._4:\r\n        case CharCode._5:\r\n        case CharCode._6:\r\n        case CharCode._7:\r\n        case CharCode._8:\r\n        case CharCode._9: {\r\n          return this.testInteger()\r\n            ? Token.INTEGERLITERAL // expects a call to readInteger\r\n            : Token.FLOATLITERAL;  // expects a call to readFloat\r\n        }\r\n        case CharCode.COLON: {\r\n          ++this.pos;\r\n          return Token.COLON;\r\n        }\r\n        case CharCode.SEMICOLON: {\r\n          ++this.pos;\r\n          return Token.SEMICOLON;\r\n        }\r\n        case CharCode.LESSTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.LESSTHAN) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\r\n              }\r\n              return Token.LESSTHAN_LESSTHAN;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.LESSTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.LESSTHAN;\r\n        }\r\n        case CharCode.EQUALS: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              if (\r\n                maxTokenLength > 2 &&\r\n                this.pos < this.end &&\r\n                text.charCodeAt(this.pos) == CharCode.EQUALS\r\n              ) {\r\n                ++this.pos;\r\n                return Token.EQUALS_EQUALS_EQUALS;\r\n              }\r\n              return Token.EQUALS_EQUALS;\r\n            }\r\n            if (chr == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              return Token.EQUALS_GREATERTHAN;\r\n            }\r\n          }\r\n          return Token.EQUALS;\r\n        }\r\n        case CharCode.GREATERTHAN: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.GREATERTHAN) {\r\n              ++this.pos;\r\n              if (maxTokenLength > 2 && this.pos < this.end) {\r\n                chr = text.charCodeAt(this.pos);\r\n                if (chr == CharCode.GREATERTHAN) {\r\n                  ++this.pos;\r\n                  if (\r\n                    maxTokenLength > 3 && this.pos < this.end &&\r\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\r\n                  ) {\r\n                    ++this.pos;\r\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\r\n                  }\r\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\r\n                }\r\n                if (chr == CharCode.EQUALS) {\r\n                  ++this.pos;\r\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\r\n                }\r\n              }\r\n              return Token.GREATERTHAN_GREATERTHAN;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.GREATERTHAN_EQUALS;\r\n            }\r\n          }\r\n          return Token.GREATERTHAN;\r\n        }\r\n        case CharCode.QUESTION: {\r\n          ++this.pos;\r\n          return Token.QUESTION;\r\n        }\r\n        case CharCode.OPENBRACKET: {\r\n          ++this.pos;\r\n          return Token.OPENBRACKET;\r\n        }\r\n        case CharCode.CLOSEBRACKET: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACKET;\r\n        }\r\n        case CharCode.CARET: {\r\n          ++this.pos;\r\n          if (\r\n            maxTokenLength > 1 && this.pos < this.end &&\r\n            text.charCodeAt(this.pos) == CharCode.EQUALS\r\n          ) {\r\n            ++this.pos;\r\n            return Token.CARET_EQUALS;\r\n          }\r\n          return Token.CARET;\r\n        }\r\n        case CharCode.OPENBRACE: {\r\n          ++this.pos;\r\n          return Token.OPENBRACE;\r\n        }\r\n        case CharCode.BAR: {\r\n          ++this.pos;\r\n          if (maxTokenLength > 1 && this.pos < this.end) {\r\n            let chr = text.charCodeAt(this.pos);\r\n            if (chr == CharCode.BAR) {\r\n              ++this.pos;\r\n              return Token.BAR_BAR;\r\n            }\r\n            if (chr == CharCode.EQUALS) {\r\n              ++this.pos;\r\n              return Token.BAR_EQUALS;\r\n            }\r\n          }\r\n          return Token.BAR;\r\n        }\r\n        case CharCode.CLOSEBRACE: {\r\n          ++this.pos;\r\n          return Token.CLOSEBRACE;\r\n        }\r\n        case CharCode.TILDE: {\r\n          ++this.pos;\r\n          return Token.TILDE;\r\n        }\r\n        case CharCode.AT: {\r\n          ++this.pos;\r\n          return Token.AT;\r\n        }\r\n        default: {\r\n          if (isIdentifierStart(c)) {\r\n            if (isKeywordCharacter(c)) {\r\n              let posBefore = this.pos;\r\n              while (\r\n                ++this.pos < this.end &&\r\n                isIdentifierPart(c = text.charCodeAt(this.pos))\r\n              ) {\r\n                if (!isKeywordCharacter(c)) {\r\n                  this.pos = posBefore;\r\n                  return Token.IDENTIFIER;\r\n                }\r\n              }\r\n              let keywordText = text.substring(posBefore, this.pos);\r\n              let keywordToken = tokenFromKeyword(keywordText);\r\n              if (\r\n                keywordToken !== Token.INVALID &&\r\n                identifierHandling !== IdentifierHandling.ALWAYS &&\r\n                !(\r\n                  identifierHandling === IdentifierHandling.PREFER &&\r\n                  tokenIsAlsoIdentifier(keywordToken)\r\n                )\r\n              ) {\r\n                return keywordToken;\r\n              }\r\n              this.pos = posBefore;\r\n            }\r\n            return Token.IDENTIFIER; // expects a call to readIdentifier\r\n          } else if (isWhiteSpace(c)) {\r\n            ++this.pos;\r\n            break;\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Invalid_character,\r\n            this.range(this.pos, this.pos + 1)\r\n          );\r\n          ++this.pos;\r\n          return Token.INVALID;\r\n        }\r\n      }\r\n    }\r\n    return Token.ENDOFFILE;\r\n  }\r\n\r\n  peek(\r\n    checkOnNewLine: bool = false,\r\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\r\n    maxCompoundLength: i32 = i32.MAX_VALUE\r\n  ): Token {\r\n    var text = this.source.text;\r\n    if (this.nextToken < 0) {\r\n      let posBefore = this.pos;\r\n      let tokenBefore = this.token;\r\n      let tokenPosBefore = this.tokenPos;\r\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n      this.nextTokenPos = this.tokenPos;\r\n      if (checkOnNewLine) {\r\n        this.nextTokenOnNewLine = false;\r\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\r\n          if (isLineBreak(text.charCodeAt(pos))) {\r\n            this.nextTokenOnNewLine = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n    }\r\n    return this.nextToken;\r\n  }\r\n\r\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\r\n    return this.skip(Token.IDENTIFIER, identifierHandling);\r\n  }\r\n\r\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\r\n    var posBefore = this.pos;\r\n    var tokenBefore = this.token;\r\n    var tokenPosBefore = this.tokenPos;\r\n    var maxCompoundLength = i32.MAX_VALUE;\r\n    switch (token) {\r\n      case Token.GREATERTHAN: { // where parsing type arguments\r\n        maxCompoundLength = 1;\r\n        break;\r\n      }\r\n    }\r\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\r\n    if (this.token == token) {\r\n      this.nextToken = -1;\r\n      return true;\r\n    } else {\r\n      this.pos = posBefore;\r\n      this.token = tokenBefore;\r\n      this.tokenPos = tokenPosBefore;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  mark(): State {\r\n    var state: State;\r\n    if (reusableState) {\r\n      state = reusableState;\r\n      reusableState = null;\r\n    } else {\r\n      state = new State();\r\n    }\r\n    state.pos = this.pos;\r\n    state.token = this.token;\r\n    state.tokenPos = this.tokenPos;\r\n    return state;\r\n  }\r\n\r\n  discard(state: State): void {\r\n    reusableState = state;\r\n  }\r\n\r\n  reset(state: State): void {\r\n    this.pos = state.pos;\r\n    this.token = state.token;\r\n    this.tokenPos = state.tokenPos;\r\n    this.nextToken = -1;\r\n  }\r\n\r\n  range(start: i32 = -1, end: i32 = -1): Range {\r\n    if (start < 0) {\r\n      start = this.tokenPos;\r\n      end = this.pos;\r\n    } else if (end < 0) {\r\n      end = start;\r\n    }\r\n    return new Range(this.source, start, end);\r\n  }\r\n\r\n  readIdentifier(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    while (\r\n      ++this.pos < this.end &&\r\n      isIdentifierPart(text.charCodeAt(this.pos))\r\n    );\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readString(): string {\r\n    var text = this.source.text;\r\n    var quote = text.charCodeAt(this.pos++);\r\n    var start = this.pos;\r\n    var result = \"\";\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.end)\r\n        );\r\n        break;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == quote) {\r\n        result += text.substring(start, this.pos++);\r\n        break;\r\n      }\r\n      if (c == CharCode.BACKSLASH) {\r\n        result += text.substring(start, this.pos);\r\n        result += this.readEscapeSequence();\r\n        start = this.pos;\r\n        continue;\r\n      }\r\n      if (isLineBreak(c)) {\r\n        result += text.substring(start, this.pos);\r\n        this.error(\r\n          DiagnosticCode.Unterminated_string_literal,\r\n          this.range(start - 1, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  readEscapeSequence(): string {\r\n    if (++this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.end)\r\n      );\r\n      return \"\";\r\n    }\r\n\r\n    var text = this.source.text;\r\n    var c = text.charCodeAt(this.pos++);\r\n    switch (c) {\r\n      case CharCode._0: return \"\\0\";\r\n      case CharCode.b: return \"\\b\";\r\n      case CharCode.t: return \"\\t\";\r\n      case CharCode.n: return \"\\n\";\r\n      case CharCode.v: return \"\\v\";\r\n      case CharCode.f: return \"\\f\";\r\n      case CharCode.r: return \"\\r\";\r\n      case CharCode.SINGLEQUOTE: return \"'\";\r\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\r\n      case CharCode.u: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\r\n        ) {\r\n          ++this.pos;\r\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\r\n        }\r\n        return this.readUnicodeEscape(); // \\uDDDD\r\n      }\r\n      case CharCode.CARRIAGERETURN: {\r\n        if (\r\n          this.pos < this.end &&\r\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        // fall through\r\n      }\r\n      case CharCode.LINEFEED:\r\n      case CharCode.LINESEPARATOR:\r\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\r\n      default: return String.fromCharCode(c);\r\n    }\r\n  }\r\n\r\n  readRegexpPattern(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var escaped = false;\r\n    while (true) {\r\n      if (this.pos >= this.end) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.end)\r\n        );\r\n        break;\r\n      }\r\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\r\n        ++this.pos;\r\n        escaped = true;\r\n        continue;\r\n      }\r\n      let c = text.charCodeAt(this.pos);\r\n      if (!escaped && c == CharCode.SLASH) break;\r\n      if (isLineBreak(c)) {\r\n        this.error(\r\n          DiagnosticCode.Unterminated_regular_expression_literal,\r\n          this.range(start, this.pos)\r\n        );\r\n        break;\r\n      }\r\n      ++this.pos;\r\n      escaped = false;\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  readRegexpFlags(): string {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var flags = 0;\r\n    while (this.pos < this.end) {\r\n      let c: i32 = text.charCodeAt(this.pos);\r\n      if (!isIdentifierPart(c)) break;\r\n      ++this.pos;\r\n\r\n      // make sure each supported flag is unique\r\n      switch (c) {\r\n        case CharCode.g: {\r\n          flags |= flags & 1 ? -1 : 1;\r\n          break;\r\n        }\r\n        case CharCode.i: {\r\n          flags |= flags & 2 ? -1 : 2;\r\n          break;\r\n        }\r\n        case CharCode.m: {\r\n          flags |= flags & 4 ? -1 : 4;\r\n          break;\r\n        }\r\n        default: {\r\n          flags = -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (flags == -1) {\r\n      this.error(\r\n        DiagnosticCode.Invalid_regular_expression_flags,\r\n        this.range(start, this.pos)\r\n      );\r\n    }\r\n    return text.substring(start, this.pos);\r\n  }\r\n\r\n  testInteger(): bool {\r\n    var text = this.source.text;\r\n    if (this.pos + 1 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\r\n      switch (text.charCodeAt(this.pos + 2)) {\r\n        case CharCode.x:\r\n        case CharCode.X:\r\n        case CharCode.b:\r\n        case CharCode.B:\r\n        case CharCode.o:\r\n        case CharCode.O: return true;\r\n      }\r\n    }\r\n    var pos = this.pos;\r\n    while (pos < this.end) {\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode.DOT || c == CharCode.e || c == CharCode.E) {\r\n        return false;\r\n      }\r\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\r\n      // does not validate separator placement (this is done in readXYInteger)\r\n      pos++;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  readInteger(): I64 {\r\n    var text = this.source.text;\r\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\r\n      switch (text.charCodeAt(this.pos + 1)) {\r\n        case CharCode.x:\r\n        case CharCode.X: {\r\n          this.pos += 2;\r\n          return this.readHexInteger();\r\n        }\r\n        case CharCode.b:\r\n        case CharCode.B: {\r\n          this.pos += 2;\r\n          return this.readBinaryInteger();\r\n        }\r\n        case CharCode.o:\r\n        case CharCode.O: {\r\n          this.pos += 2;\r\n          return this.readOctalInteger();\r\n        }\r\n      }\r\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\r\n        let start = this.pos;\r\n        ++this.pos;\r\n        let value = this.readOctalInteger();\r\n        this.error(\r\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\r\n          this.range(start, this.pos)\r\n        );\r\n        return value;\r\n      }\r\n    }\r\n    return this.readDecimalInteger();\r\n  }\r\n\r\n  readHexInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0);\r\n    var i64_4 = i64_new(4);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = (value << 4) + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_shl(value, i64_4),\r\n          i64_new(c - CharCode._0)\r\n        );\r\n       } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        // value = (value << 4) + 10 + c - CharCode.A;\r\n        value = i64_add(\r\n          i64_shl(value, i64_4),\r\n          i64_new(10 + c - CharCode.A)\r\n        );\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        // value = (value << 4) + 10 + c - CharCode.a;\r\n        value = i64_add(\r\n          i64_shl(value, i64_4),\r\n          i64_new(10 + c - CharCode.a)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Hexadecimal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readDecimalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0);\r\n    var i64_10 = i64_new(10);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        // value = value * 10 + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_mul(value, i64_10),\r\n          i64_new(c - CharCode._0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readOctalInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0);\r\n    var i64_3 = i64_new(3);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c >= CharCode._0 && c <= CharCode._7) {\r\n        // value = (value << 3) + c - CharCode._0;\r\n        value = i64_add(\r\n          i64_shl(value, i64_3),\r\n          i64_new(c - CharCode._0)\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      ++this.pos;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Octal_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readBinaryInteger(): I64 {\r\n    var text = this.source.text;\r\n    var start = this.pos;\r\n    var value = i64_new(0);\r\n    var i64_1 = i64_new(1);\r\n    var sepEnd = start;\r\n    while (this.pos < this.end) {\r\n      let pos = this.pos;\r\n      let c = text.charCodeAt(pos);\r\n      if (c == CharCode._0) {\r\n        // value = (value << 1);\r\n        value = i64_shl(value, i64_1);\r\n      } else if (c == CharCode._1) {\r\n        // value = (value << 1) + 1;\r\n        value = i64_add(\r\n          i64_shl(value, i64_1),\r\n          i64_1\r\n        );\r\n      } else if (c == CharCode._) {\r\n        if (sepEnd == pos) {\r\n          this.error(\r\n            sepEnd == start\r\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\r\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\r\n            this.range(pos)\r\n          );\r\n        }\r\n        sepEnd = pos + 1;\r\n      } else {\r\n        break;\r\n      }\r\n      this.pos = pos + 1;\r\n    }\r\n    if (this.pos == start) {\r\n      this.error(\r\n        DiagnosticCode.Binary_digit_expected,\r\n        this.range(start)\r\n      );\r\n    } else if (sepEnd == this.pos) {\r\n      this.error(\r\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\r\n        this.range(sepEnd - 1)\r\n      );\r\n    }\r\n    return value;\r\n  }\r\n\r\n  readFloat(): f64 {\r\n    // var text = this.source.text;\r\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\r\n    //   switch (text.charCodeAt(this.pos + 1)) {\r\n    //     case CharCode.X:\r\n    //     case CharCode.x: {\r\n    //       this.pos += 2;\r\n    //       return this.readHexFloat();\r\n    //     }\r\n    //   }\r\n    // }\r\n    return this.readDecimalFloat();\r\n  }\r\n\r\n  readDecimalFloat(): f64 {\r\n    // TODO: numeric separators (parseFloat can't handle these)\r\n    var start = this.pos;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n      ++this.pos;\r\n    }\r\n    if (this.pos < this.end && text.charCodeAt(this.pos) == CharCode.DOT) {\r\n      ++this.pos;\r\n      while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n        ++this.pos;\r\n      }\r\n    }\r\n    if (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos);\r\n      if (c == CharCode.e || c == CharCode.E) {\r\n        if (\r\n          ++this.pos < this.end &&\r\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\r\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\r\n        ) {\r\n          ++this.pos;\r\n        }\r\n        while (this.pos < this.end && isDecimalDigit(text.charCodeAt(this.pos))) {\r\n          ++this.pos;\r\n        }\r\n      }\r\n    }\r\n    return parseFloat(text.substring(start, this.pos));\r\n  }\r\n\r\n  readHexFloat(): f64 {\r\n    throw new Error(\"not implemented\"); // TBD\r\n  }\r\n\r\n  readUnicodeEscape(): string {\r\n    var remain = 4;\r\n    var value = 0;\r\n    var text = this.source.text;\r\n    while (this.pos < this.end) {\r\n      let c = text.charCodeAt(this.pos++);\r\n      if (c >= CharCode._0 && c <= CharCode._9) {\r\n        value = (value << 4) + c - CharCode._0;\r\n      } else if (c >= CharCode.A && c <= CharCode.F) {\r\n        value = (value << 4) + c + (10 - CharCode.A);\r\n      } else if (c >= CharCode.a && c <= CharCode.f) {\r\n        value = (value << 4) + c + (10 - CharCode.a);\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Hexadecimal_digit_expected,\r\n          this.range(this.pos - 1, this.pos)\r\n        );\r\n        return \"\";\r\n      }\r\n      if (--remain == 0) break;\r\n    }\r\n    if (remain) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(this.pos)\r\n      );\r\n      return \"\";\r\n    }\r\n    return String.fromCharCode(value);\r\n  }\r\n\r\n  private readExtendedUnicodeEscape(): string {\r\n    var start = this.pos;\r\n    var value = this.readHexInteger();\r\n    var value32 = i64_low(value);\r\n    var invalid = false;\r\n\r\n    assert(!i64_high(value));\r\n    if (value32 > 0x10FFFF) {\r\n      this.error(\r\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    var text = this.source.text;\r\n    if (this.pos >= this.end) {\r\n      this.error(\r\n        DiagnosticCode.Unexpected_end_of_text,\r\n        this.range(start, this.end)\r\n      );\r\n      invalid = true;\r\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\r\n      ++this.pos;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\r\n        this.range(start, this.pos)\r\n      );\r\n      invalid = true;\r\n    }\r\n\r\n    if (invalid) return \"\";\r\n    return value32 < 65536\r\n      ? String.fromCharCode(value32)\r\n      : String.fromCharCode(\r\n        ((value32 - 65536) >>> 10) + 0xD800,\r\n        ((value32 - 65536) & 1023) + 0xDC00\r\n      );\r\n  }\r\n\r\n  finish(): void {\r\n  }\r\n}\r\n\r\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\r\nexport class State {\r\n  /** Current position. */\r\n  pos: i32;\r\n  /** Current token. */\r\n  token: Token;\r\n  /** Current token's position. */\r\n  tokenPos: i32;\r\n}\r\n\r\n// Reusable state object to reduce allocations\r\nvar reusableState: State | null = null;\r\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\r\n * Resolve infrastructure to obtain types and elements.\r\n * @module resolver\r\n *//***/\r\n\r\nimport {\r\n  DiagnosticEmitter,\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Program,\r\n  ElementKind,\r\n  OperatorKind,\r\n  Element,\r\n  Class,\r\n  ClassPrototype,\r\n  Function,\r\n  FunctionPrototype,\r\n  VariableLikeElement,\r\n  Property,\r\n  PropertyPrototype,\r\n  Field,\r\n  FieldPrototype,\r\n  Global,\r\n  TypeDefinition\r\n} from \"./program\";\r\n\r\nimport {\r\n  FlowFlags,\r\n  Flow\r\n} from \"./flow\";\r\n\r\nimport {\r\n  SignatureNode,\r\n  ParameterKind,\r\n  CommonTypeNode,\r\n  NodeKind,\r\n  TypeNode,\r\n  TypeName,\r\n  TypeParameterNode,\r\n  Node,\r\n  Range,\r\n  IdentifierExpression,\r\n  CallExpression,\r\n  ElementAccessExpression,\r\n  PropertyAccessExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  ParenthesizedExpression,\r\n  AssertionExpression,\r\n  Expression,\r\n  IntegerLiteralExpression,\r\n  UnaryPrefixExpression,\r\n  UnaryPostfixExpression,\r\n  AssertionKind,\r\n  BinaryExpression,\r\n  ThisExpression,\r\n  SuperExpression,\r\n  isTypeOmitted\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  Signature,\r\n  typesToString,\r\n  TypeKind,\r\n  TypeFlags\r\n} from \"./types\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  CommonSymbols\r\n} from \"./common\";\r\n\r\nimport {\r\n  makeMap,\r\n  isPowerOf2\r\n} from \"./util\";\r\n\r\nimport {\r\n  Token\r\n} from \"./tokenizer\";\r\n\r\n/** Indicates whether errors are reported or not. */\r\nexport enum ReportMode {\r\n  /** Report errors. */\r\n  REPORT,\r\n  /** Swallow errors. */\r\n  SWALLOW\r\n}\r\n\r\n/** Provides tools to resolve types and expressions. */\r\nexport class Resolver extends DiagnosticEmitter {\r\n\r\n  /** The program this resolver belongs to. */\r\n  program: Program;\r\n\r\n  /** Target expression of the previously resolved property or element access. */\r\n  currentThisExpression: Expression | null = null;\r\n  /** Element expression of the previously resolved element access. */\r\n  currentElementExpression : Expression | null = null;\r\n\r\n  /** Constructs the resolver for the specified program. */\r\n  constructor(\r\n    /** The program to construct a resolver for. */\r\n    program: Program\r\n  ) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n  }\r\n\r\n  /** Resolves a {@link CommonTypeNode} to a concrete {@link Type}. */\r\n  resolveType(\r\n    /** The type to resolve. */\r\n    node: CommonTypeNode,\r\n    /** Relative context. */\r\n    context: Element,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type | null {\r\n\r\n    // handle signature\r\n    if (node.kind == NodeKind.SIGNATURE) {\r\n      let explicitThisType = (<SignatureNode>node).explicitThisType;\r\n      let thisType: Type | null = null;\r\n      if (explicitThisType) {\r\n        thisType = this.resolveType(\r\n          explicitThisType,\r\n          context,\r\n          contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (!thisType) return null;\r\n      }\r\n      let parameterNodes = (<SignatureNode>node).parameters;\r\n      let numParameters = parameterNodes.length;\r\n      let parameterTypes = new Array<Type>(numParameters);\r\n      let parameterNames = new Array<string>(numParameters);\r\n      let requiredParameters = 0;\r\n      let hasRest = false;\r\n      for (let i = 0; i < numParameters; ++i) {\r\n        let parameterNode = parameterNodes[i];\r\n        switch (parameterNode.parameterKind) {\r\n          case ParameterKind.DEFAULT: {\r\n            requiredParameters = i + 1;\r\n            break;\r\n          }\r\n          case ParameterKind.REST: {\r\n            assert(i == numParameters);\r\n            hasRest = true;\r\n            break;\r\n          }\r\n        }\r\n        let parameterTypeNode = parameterNode.type;\r\n        if (isTypeOmitted(parameterTypeNode)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              parameterTypeNode.range\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        let parameterType = this.resolveType(\r\n          parameterTypeNode,\r\n          context,\r\n          contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (!parameterType) return null;\r\n        parameterTypes[i] = parameterType;\r\n        parameterNames[i] = parameterNode.name.text;\r\n      }\r\n      let returnTypeNode = (<SignatureNode>node).returnType;\r\n      if (isTypeOmitted(returnTypeNode)) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnTypeNode.range\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let returnType: Type | null;\r\n      if (returnTypeNode) {\r\n        returnType = this.resolveType(\r\n          returnTypeNode,\r\n          context,\r\n          contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Type.void;\r\n      }\r\n      let signature = new Signature(parameterTypes, returnType, thisType);\r\n      signature.parameterNames = parameterNames;\r\n      signature.requiredParameters = requiredParameters;\r\n      signature.hasRest = hasRest;\r\n      return node.isNullable ? signature.type.asNullable() : signature.type;\r\n    }\r\n\r\n    // now dealing with TypeNode\r\n    assert(node.kind == NodeKind.TYPE);\r\n    var typeNode = <TypeNode>node;\r\n    var typeName = typeNode.name;\r\n    var typeArgumentNodes = typeNode.typeArguments;\r\n    var possiblyPlaceholder = !typeName.next;\r\n\r\n    // look up in contextual type arguments if possibly a placeholder\r\n    if (possiblyPlaceholder) {\r\n      if (contextualTypeArguments && contextualTypeArguments.has(typeName.identifier.text)) {\r\n        let type = contextualTypeArguments.get(typeName.identifier.text)!;\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              node.range, type.toString()\r\n            );\r\n          }\r\n        }\r\n        if (node.isNullable) {\r\n          if (!type.is(TypeFlags.REFERENCE)) {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n                node.range, type.toString()\r\n              );\r\n            }\r\n          }\r\n          return type.asNullable();\r\n        }\r\n        return type;\r\n      }\r\n    }\r\n\r\n    // look up in context\r\n    var element = this.resolveTypeName(typeName, context, reportMode);\r\n    if (!element) return null;\r\n\r\n    // use shadow type if present (i.e. namespace sharing a type)\r\n    if (element.shadowType) {\r\n      element = element.shadowType;\r\n\r\n    } else {\r\n      // handle enums (become i32)\r\n      if (element.kind == ElementKind.ENUM) {\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              node.range, element.internalName\r\n            );\r\n          }\r\n        }\r\n        if (node.isNullable) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n              node.range, element.name\r\n            );\r\n          }\r\n        }\r\n        return Type.i32;\r\n      }\r\n\r\n      // handle classes\r\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\r\n        let instance = this.resolveClassInclTypeArguments(\r\n          <ClassPrototype>element,\r\n          typeArgumentNodes,\r\n          context,\r\n          makeMap<string,Type>(contextualTypeArguments), // don't inherit\r\n          node\r\n        ); // reports\r\n        if (!instance) return null;\r\n        return node.isNullable ? instance.type.asNullable() : instance.type;\r\n      }\r\n    }\r\n\r\n    // handle type definitions\r\n    if (element.kind == ElementKind.TYPEDEFINITION) {\r\n\r\n      // shortcut already resolved (mostly builtins)\r\n      if (element.is(CommonFlags.RESOLVED)) {\r\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              node.range, element.internalName\r\n            );\r\n          }\r\n        }\r\n        let type = (<TypeDefinition>element).type;\r\n        if (node.isNullable) {\r\n          if (!type.is(TypeFlags.REFERENCE)) {\r\n            if (reportMode == ReportMode.REPORT) {\r\n              this.error(\r\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\r\n                typeNode.name.range, typeName.identifier.text\r\n              );\r\n            }\r\n          } else {\r\n            return type.asNullable();\r\n          }\r\n        }\r\n        return type;\r\n      }\r\n\r\n      // handle special native type\r\n      if (possiblyPlaceholder && typeName.identifier.text == CommonSymbols.native) {\r\n        if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n              typeNode.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        let typeArgument = this.resolveType(\r\n          typeArgumentNodes[0],\r\n          context,\r\n          contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (!typeArgument) return null;\r\n        switch (typeArgument.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: return Type.i32;\r\n          case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\r\n          case TypeKind.I64: return Type.i64;\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: return Type.u32;\r\n          case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\r\n          case TypeKind.U64: return Type.u64;\r\n          case TypeKind.F32: return Type.f32;\r\n          case TypeKind.F64: return Type.f64;\r\n          case TypeKind.V128: return Type.v128;\r\n          case TypeKind.VOID: return Type.void;\r\n          default: assert(false);\r\n        }\r\n      }\r\n\r\n      // resolve normally\r\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\r\n      let typeArguments: Type[] | null = null;\r\n      if (typeParameterNodes) {\r\n        typeArguments = this.resolveTypeArguments(\r\n          typeParameterNodes,\r\n          typeArgumentNodes,\r\n          context,\r\n          contextualTypeArguments = makeMap(contextualTypeArguments), // inherit\r\n          node,\r\n          reportMode\r\n        );\r\n        if (!typeArguments) return null;\r\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          typeNode.range, typeName.identifier.text\r\n        );\r\n        // recoverable\r\n      }\r\n      return this.resolveType(\r\n        (<TypeDefinition>element).typeNode,\r\n        element,\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        typeNode.name.range, typeName.identifier.text\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a type name to the program element it refers to. */\r\n  resolveTypeName(\r\n    /** The type name to resolve. */\r\n    typeName: TypeName,\r\n    /** Relative context. */\r\n    context: Element,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var element = context.lookup(typeName.identifier.text);\r\n    if (!element) {\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Cannot_find_name_0,\r\n          typeName.range, typeName.identifier.text\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    var prev = typeName;\r\n    var next = typeName.next;\r\n    while (next) {\r\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            next.range, next.identifier.text, prev.identifier.text\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      prev = next;\r\n      next = next.next;\r\n    }\r\n    return element;\r\n  }\r\n\r\n  /** Resolves an array of type arguments to concrete types. */\r\n  resolveTypeArguments(\r\n    /** Actual type parameter nodes. */\r\n    typeParameters: TypeParameterNode[],\r\n    /** Type arguments provided. */\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    /** Relative context. */\r\n    context: Element,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\r\n    /** Alternative report node in case of empty type arguments. */\r\n    alternativeReportNode: Node | null = null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Type[] | null {\r\n    var minParameterCount = 0;\r\n    var maxParameterCount = 0;\r\n    for (let i = 0; i < typeParameters.length; ++i) {\r\n      if (!typeParameters[i].defaultType) ++minParameterCount;\r\n      ++maxParameterCount;\r\n    }\r\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\r\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        argumentCount\r\n          ? Range.join(\r\n              (<TypeNode[]>typeArgumentNodes)[0].range,\r\n              (<TypeNode[]>typeArgumentNodes)[argumentCount - 1].range\r\n            )\r\n          : assert(alternativeReportNode).range,\r\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\r\n        argumentCount.toString(10)\r\n      );\r\n      return null;\r\n    }\r\n    var typeArguments = new Array<Type>(maxParameterCount);\r\n    for (let i = 0; i < maxParameterCount; ++i) {\r\n      let type = i < argumentCount\r\n        ? this.resolveType( // reports\r\n            (<TypeNode[]>typeArgumentNodes)[i],\r\n            context,\r\n            contextualTypeArguments,\r\n            reportMode\r\n          )\r\n        : this.resolveType( // reports\r\n            assert(typeParameters[i].defaultType),\r\n            context,\r\n            contextualTypeArguments,\r\n            reportMode\r\n          );\r\n      if (!type) return null;\r\n      // TODO: check extendsType\r\n      contextualTypeArguments.set(typeParameters[i].name.text, type);\r\n      typeArguments[i] = type;\r\n    }\r\n    return typeArguments;\r\n  }\r\n\r\n  /** Resolves an identifier to the program element it refers to. */\r\n  resolveIdentifier(\r\n    /** The expression to resolve. */\r\n    identifier: IdentifierExpression,\r\n    /** Optional flow to search for scoped locals. */\r\n    flow: Flow | null,\r\n    /** Optional context to search. */\r\n    context: Element | null,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var name = identifier.text;\r\n    var element: Element | null;\r\n    if (flow) {\r\n      if (element = flow.lookup(name)) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return element;\r\n      }\r\n    }\r\n    if (context) {\r\n      if (element = context.lookup(name)) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return element;\r\n      }\r\n    }\r\n    if (element = this.program.lookupGlobal(name)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return element;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_find_name_0,\r\n        identifier.range, name\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a lazily compiled global, i.e. a static class field. */\r\n  ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\r\n    if (global.is(CommonFlags.RESOLVED)) return true;\r\n    var typeNode = global.typeNode;\r\n    if (!typeNode) return false;\r\n    var type = this.resolveType( // reports\r\n      typeNode,\r\n      global.parent,\r\n      null,\r\n      reportMode\r\n    );\r\n    if (!type) return false;\r\n    global.setType(type);\r\n    return true;\r\n  }\r\n\r\n  /** Resolves a property access expression to the program element it refers to. */\r\n  resolvePropertyAccessExpression(\r\n    /** The expression to resolve. */\r\n    propertyAccess: PropertyAccessExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetExpression = propertyAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\r\n    if (!target) return null;\r\n    var propertyName = propertyAccess.property.text;\r\n\r\n    // Resolve variable-likes to their class type first\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\r\n        let classReference = type.classReference;\r\n        if (!classReference) {\r\n          let typeClasses = this.program.typeClasses;\r\n          if (!type.is(TypeFlags.REFERENCE) && typeClasses.has(type.kind)) {\r\n            classReference = typeClasses.get(type.kind)!;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n              propertyAccess.property.range, propertyName, (<VariableLikeElement>target).type.toString()\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static\r\n        let getterInstance = this.resolveFunction( // reports\r\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n        if (!getterInstance) return null;\r\n        let classReference = getterInstance.signature.returnType.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: { // instance\r\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\r\n        let classReference = getterInstance.signature.returnType.classReference;\r\n        if (!classReference) {\r\n          this.error(\r\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n            propertyAccess.property.range, propertyName, getterInstance.signature.returnType.toString()\r\n          );\r\n          return null;\r\n        }\r\n        target = classReference;\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: { // property access on element access?\r\n        let elementExpression = this.currentElementExpression;\r\n        if (elementExpression) {\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              elementExpression.range, (<Class>target).internalName\r\n            );\r\n            return null;\r\n          }\r\n          let returnType = indexedGet.signature.returnType;\r\n          if (!(target = returnType.classReference)) {\r\n            this.error(\r\n              DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n              propertyAccess.property.range, propertyName, returnType.toString()\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Look up the member within\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS_PROTOTYPE:\r\n      case ElementKind.CLASS: {\r\n        do {\r\n          let members = target.members;\r\n          if (members && members.has(propertyName)) {\r\n            this.currentThisExpression = targetExpression;\r\n            this.currentElementExpression = null;\r\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\r\n          }\r\n          // traverse inherited static members on the base prototype if target is a class prototype\r\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\r\n            if ((<ClassPrototype>target).basePrototype) {\r\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\r\n            } else {\r\n              break;\r\n            }\r\n          // traverse inherited instance members on the base class if target is a class instance\r\n          } else if (target.kind == ElementKind.CLASS) {\r\n            if ((<Class>target).base) {\r\n              target = <Class>(<Class>target).base;\r\n            } else {\r\n              break;\r\n            }\r\n          } else {\r\n            break;\r\n          }\r\n        } while (true);\r\n        break;\r\n      }\r\n      default: { // enums or other namespace-like elements\r\n        let members = target.members;\r\n        if (members && members.has(propertyName)) {\r\n          this.currentThisExpression = targetExpression;\r\n          this.currentElementExpression = null;\r\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n      propertyAccess.property.range, propertyName, target.internalName\r\n    );\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an element access expression to the program element it refers to. */\r\n  resolveElementAccessExpression(\r\n    /** The expression to resolve. */\r\n    elementAccess: ElementAccessExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetExpression = elementAccess.expression;\r\n    var target = this.resolveExpression(targetExpression, flow, contextualType, reportMode); // reports\r\n    if (!target) return null;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        let type = (<VariableLikeElement>target).type;\r\n        if (target = type.classReference) {\r\n          this.currentThisExpression = targetExpression;\r\n          this.currentElementExpression = elementAccess.elementExpression;\r\n          return target;\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET);\r\n        if (!indexedGet) {\r\n          if (reportMode == ReportMode.REPORT) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              elementAccess.range, (<Class>target).internalName\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        if (targetExpression.kind == NodeKind.ELEMENTACCESS) { // nested element access\r\n          let returnType = indexedGet.signature.returnType;\r\n          if (target = returnType.classReference) {\r\n            this.currentThisExpression = targetExpression;\r\n            this.currentElementExpression = elementAccess.elementExpression;\r\n            return target;\r\n          }\r\n          return null;\r\n        }\r\n        this.currentThisExpression = targetExpression;\r\n        this.currentElementExpression = elementAccess.elementExpression;\r\n        return target;\r\n      }\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        targetExpression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Determines the final type of an integer literal given the specified contextual type. */\r\n  determineIntegerLiteralType(\r\n    /** Integer literal value. */\r\n    intValue: I64,\r\n    /** Current contextual type. */\r\n    contextualType: Type\r\n  ): Type {\r\n    if (!contextualType.is(TypeFlags.REFERENCE)) {\r\n      // compile to contextualType if matching\r\n      switch (contextualType.kind) {\r\n        case TypeKind.I8: {\r\n          if (i64_is_i8(intValue)) return Type.i8;\r\n          break;\r\n        }\r\n        case TypeKind.U8: {\r\n          if (i64_is_u8(intValue)) return Type.u8;\r\n          break;\r\n        }\r\n        case TypeKind.I16: {\r\n          if (i64_is_i16(intValue)) return Type.i16;\r\n          break;\r\n        }\r\n        case TypeKind.U16: {\r\n          if (i64_is_u16(intValue)) return Type.u16;\r\n          break;\r\n        }\r\n        case TypeKind.I32: {\r\n          if (i64_is_i32(intValue)) return Type.i32;\r\n          break;\r\n        }\r\n        case TypeKind.U32: {\r\n          if (i64_is_u32(intValue)) return Type.u32;\r\n          break;\r\n        }\r\n        case TypeKind.BOOL: {\r\n          if (i64_is_bool(intValue)) return Type.bool;\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          if (!this.program.options.isWasm64) {\r\n            if (i64_is_i32(intValue)) return Type.isize32;\r\n            break;\r\n          }\r\n          return Type.isize64;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          if (!this.program.options.isWasm64) {\r\n            if (i64_is_u32(intValue)) return Type.usize32;\r\n            break;\r\n          }\r\n          return Type.usize64;\r\n        }\r\n        case TypeKind.I64: return Type.i64;\r\n        case TypeKind.U64: return Type.u64;\r\n        case TypeKind.F32: return Type.f32;\r\n        case TypeKind.F64: return Type.f64;\r\n        case TypeKind.VOID: break; // best fitting below\r\n        default: assert(false);\r\n      }\r\n    }\r\n    // otherwise compile to best fitting native type\r\n    if (i64_is_i32(intValue)) return Type.i32;\r\n    if (i64_is_u32(intValue)) return Type.u32;\r\n    return Type.i64;\r\n  }\r\n\r\n  /** Resolves any expression to the program element it refers to. */\r\n  resolveExpression(\r\n    /** The expression to resolve. */\r\n    expression: Expression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    while (expression.kind == NodeKind.PARENTHESIZED) { // simply skip\r\n      expression = (<ParenthesizedExpression>expression).expression;\r\n    }\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        return this.resolveAssertionExpression(\r\n          <AssertionExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        return this.resolveUnaryPrefixExpression(\r\n          <UnaryPrefixExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        return this.resolveUnaryPostfixExpression(\r\n          <UnaryPostfixExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.BINARY: {\r\n        return this.resolveBinaryExpression(\r\n          <BinaryExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.THIS: {\r\n        return this.resolveThisExpression(\r\n          <ThisExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.SUPER: {\r\n        return this.resolveSuperExpression(\r\n          <SuperExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.IDENTIFIER: {\r\n        return this.resolveIdentifier(\r\n          <IdentifierExpression>expression,\r\n          flow, flow.actualFunction, reportMode\r\n        );\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        return this.resolveLiteralExpression(\r\n          <LiteralExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        return this.resolvePropertyAccessExpression(\r\n          <PropertyAccessExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        return this.resolveElementAccessExpression(\r\n          <ElementAccessExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      case NodeKind.CALL: {\r\n        return this.resolveCallExpression(\r\n          <CallExpression>expression,\r\n          flow, contextualType, reportMode\r\n        );\r\n      }\r\n      // TODO: everything else\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an assertion expression to the program element it refers to. */\r\n  resolveAssertionExpression(\r\n    /** The expression to resolve. */\r\n    expression: AssertionExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    if (expression.assertionKind == AssertionKind.NONNULL) {\r\n      return this.resolveExpression(\r\n        expression.expression,\r\n        flow,\r\n        contextualType,\r\n        reportMode\r\n      );\r\n    }\r\n    var type = this.resolveType(\r\n      assert(expression.toType), // must be set if not NONNULL\r\n      flow.actualFunction,\r\n      flow.contextualTypeArguments,\r\n      reportMode\r\n    );\r\n    if (!type) return null;\r\n    var element: Element | null = type.classReference;\r\n    if (!element) {\r\n      let signature = type.signatureReference;\r\n      if (!signature) return null;\r\n      element = signature.asFunctionTarget(this.program);\r\n    }\r\n    this.currentThisExpression = null;\r\n    this.currentElementExpression = null;\r\n    return element;\r\n  }\r\n\r\n  /** Resolves an unary prefix expression to the program element it refers to. */\r\n  resolveUnaryPrefixExpression(\r\n    /** The expression to resolve. */\r\n    expression: UnaryPrefixExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var operand = expression.operand;\r\n    // TODO: operator overloads\r\n    switch (expression.operator) {\r\n      case Token.MINUS: {\r\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\r\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\r\n          let type = this.determineIntegerLiteralType(\r\n            i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value),\r\n            contextualType\r\n          );\r\n          let typeClasses = this.program.typeClasses;\r\n          return typeClasses.has(type.kind) ? typeClasses.get(type.kind)! : null;\r\n        }\r\n        return this.resolveExpression(\r\n          operand,\r\n          flow,\r\n          contextualType,\r\n          reportMode\r\n        );\r\n      }\r\n      case Token.PLUS:\r\n      case Token.PLUS_PLUS:\r\n      case Token.MINUS_MINUS: {\r\n        return this.resolveExpression(\r\n          expression.operand,\r\n          flow,\r\n          contextualType,\r\n          reportMode\r\n        );\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        let typeClasses = this.program.typeClasses;\r\n        return typeClasses.has(TypeKind.BOOL) ? typeClasses.get(TypeKind.BOOL)! : null;\r\n      }\r\n      case Token.TILDE: {\r\n        let resolvedOperand = this.resolveExpression(\r\n          expression.operand,\r\n          flow,\r\n          contextualType,\r\n          reportMode\r\n        );\r\n        if (!resolvedOperand) return null;\r\n        // TODO\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves an unary postfix expression to the program element it refers to. */\r\n  resolveUnaryPostfixExpression(\r\n    /** The expression to resolve. */\r\n    expression: UnaryPostfixExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    // TODO: operator overloads\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS:\r\n      case Token.MINUS_MINUS: {\r\n        return this.resolveExpression(\r\n          expression.operand,\r\n          flow,\r\n          contextualType,\r\n          reportMode\r\n        );\r\n      }\r\n      default: assert(false);\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a binary expression to the program element it refers to. */\r\n  resolveBinaryExpression(\r\n    /** The expression to resolve. */\r\n    expression: BinaryExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    // TODO\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a this expression to the program element it refers to. */\r\n  resolveThisExpression(\r\n    /** The expression to resolve. */\r\n    expression: ThisExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      let thisLocal = flow.lookupLocal(CommonSymbols.this_);\r\n      if (thisLocal) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return thisLocal;\r\n      }\r\n    }\r\n    var parent = flow.actualFunction.parent;\r\n    if (parent) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return parent;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a super expression to the program element it refers to. */\r\n  resolveSuperExpression(\r\n    /** The expression to resolve. */\r\n    expression: SuperExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n      let superLocal = flow.lookupLocal(CommonSymbols.super_);\r\n      if (superLocal) {\r\n        this.currentThisExpression = null;\r\n        this.currentElementExpression = null;\r\n        return superLocal;\r\n      }\r\n    }\r\n    var parent: Element | null = flow.actualFunction.parent;\r\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\r\n      this.currentThisExpression = null;\r\n      this.currentElementExpression = null;\r\n      return parent;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a literal expression to the program element it refers to. */\r\n  resolveLiteralExpression(\r\n    /** The expression to resolve. */\r\n    expression: LiteralExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.INTEGER: {\r\n        this.currentThisExpression = expression;\r\n        this.currentElementExpression = null;\r\n        let literalType = this.determineIntegerLiteralType(\r\n          (<IntegerLiteralExpression>expression).value,\r\n          contextualType\r\n        );\r\n        let typeClasses = this.program.typeClasses;\r\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        this.currentThisExpression = expression;\r\n        this.currentElementExpression = null;\r\n        let literalType = contextualType == Type.f32 ? Type.f32 : Type.f64;\r\n        let typeClasses = this.program.typeClasses;\r\n        return typeClasses.has(literalType.kind) ? typeClasses.get(literalType.kind)! : null;\r\n      }\r\n      case LiteralKind.STRING: {\r\n        this.currentThisExpression = expression;\r\n        this.currentElementExpression = null;\r\n        return this.program.stringInstance;\r\n      }\r\n      // TODO\r\n      // case LiteralKind.ARRAY:\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a call expression to the program element it refers to. */\r\n  resolveCallExpression(\r\n    /** The expression to resolve. */\r\n    expression: CallExpression,\r\n    /** Current flow. */\r\n    flow: Flow,\r\n    /** Current contextual type. */\r\n    contextualType: Type = Type.void,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Element | null {\r\n    var targetExpression = expression.expression;\r\n    var target = this.resolveExpression( // reports\r\n      targetExpression,\r\n      flow,\r\n      contextualType,\r\n      reportMode\r\n    );\r\n    if (!target) return null;\r\n    if (target.kind == ElementKind.FUNCTION_PROTOTYPE) {\r\n      let instance = this.resolveFunctionInclTypeArguments(\r\n        <FunctionPrototype>target,\r\n        expression.typeArguments,\r\n        flow.actualFunction,\r\n        makeMap(flow.contextualTypeArguments), // don't inherit\r\n        expression,\r\n        reportMode\r\n      );\r\n      if (!instance) return null;\r\n      let returnType = instance.signature.returnType;\r\n      let classType = returnType.classReference;\r\n      if (classType) {\r\n        // reuse resolvedThisExpression (might be property access)\r\n        // reuse resolvedElementExpression (might be element access)\r\n        return classType;\r\n      } else {\r\n        let signature = returnType.signatureReference;\r\n        if (signature) {\r\n          let functionTarget = signature.asFunctionTarget(this.program);\r\n          // reuse resolvedThisExpression (might be property access)\r\n          // reuse resolvedElementExpression (might be element access)\r\n          return functionTarget;\r\n        }\r\n      }\r\n      if (reportMode == ReportMode.REPORT) {\r\n        this.error(\r\n          DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n          targetExpression.range, target.internalName\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    if (reportMode == ReportMode.REPORT) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** Resolves a function prototype using the specified concrete type arguments. */\r\n  resolveFunction(\r\n    /** The prototype of the function. */\r\n    prototype: FunctionPrototype,\r\n    /** Concrete type arguments. */\r\n    typeArguments: Type[] | null,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Function | null {\r\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\r\n      ? prototype.parent.parent\r\n      : prototype.parent;\r\n    var classInstance: Class | null = null; // if an instance method\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n\r\n    // Instance method prototypes are pre-bound to their concrete class as their parent\r\n    if (prototype.is(CommonFlags.INSTANCE)) {\r\n      assert(actualParent.kind == ElementKind.CLASS);\r\n      classInstance = <Class>actualParent;\r\n\r\n      // check if this exact concrete class and function combination is known already\r\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\r\n      if (resolvedInstance) return resolvedInstance;\r\n\r\n      // inherit class specific type arguments\r\n      let classTypeArguments = classInstance.typeArguments;\r\n      if (classTypeArguments) {\r\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\r\n        let numClassTypeArguments = classTypeParameters.length;\r\n        assert(numClassTypeArguments == classTypeParameters.length);\r\n        for (let i = 0; i < numClassTypeArguments; ++i) {\r\n          let classTypeParameterName = classTypeParameters[i].name.text;\r\n          if (!contextualTypeArguments.has(classTypeParameterName)) {\r\n            contextualTypeArguments.set(\r\n              classTypeParameterName,\r\n              classTypeArguments[i]\r\n            );\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\r\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\r\n      if (resolvedInstance) return resolvedInstance;\r\n    }\r\n\r\n    // override whatever is contextual with actual function type arguments\r\n    var signatureNode = prototype.signatureNode;\r\n    var typeParameterNodes = prototype.typeParameterNodes;\r\n    var numFunctionTypeArguments: i32;\r\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\r\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\r\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\r\n        contextualTypeArguments.set(\r\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\r\n          typeArguments[i]\r\n        );\r\n      }\r\n    } else {\r\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\r\n    }\r\n\r\n    // resolve `this` type if applicable\r\n    var thisType: Type | null = null;\r\n    var explicitThisType = signatureNode.explicitThisType;\r\n    if (explicitThisType) {\r\n      thisType = this.resolveType(\r\n        explicitThisType,\r\n        prototype.parent, // relative to function\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!thisType) return null;\r\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\r\n    } else if (classInstance) {\r\n      thisType = classInstance.type;\r\n      contextualTypeArguments.set(CommonSymbols.this_, thisType);\r\n    }\r\n\r\n    // resolve parameter types\r\n    var signatureParameters = signatureNode.parameters;\r\n    var numSignatureParameters = signatureParameters.length;\r\n    var parameterTypes = new Array<Type>(numSignatureParameters);\r\n    var parameterNames = new Array<string>(numSignatureParameters);\r\n    var requiredParameters = 0;\r\n    for (let i = 0; i < numSignatureParameters; ++i) {\r\n      let parameterDeclaration = signatureParameters[i];\r\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\r\n        requiredParameters = i + 1;\r\n      }\r\n      let typeNode = parameterDeclaration.type;\r\n      if (isTypeOmitted(typeNode)) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          typeNode.range\r\n        );\r\n        return null;\r\n      }\r\n      let parameterType = this.resolveType(\r\n        typeNode,\r\n        prototype.parent, // relative to function\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!parameterType) return null;\r\n      parameterTypes[i] = parameterType;\r\n      parameterNames[i] = parameterDeclaration.name.text;\r\n    }\r\n\r\n    // resolve return type\r\n    var returnType: Type;\r\n    if (prototype.is(CommonFlags.SET)) {\r\n      returnType = Type.void; // not annotated\r\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\r\n      returnType = assert(classInstance).type; // not annotated\r\n    } else {\r\n      let typeNode = signatureNode.returnType;\r\n      if (isTypeOmitted(typeNode)) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          typeNode.range\r\n        );\r\n        return null;\r\n      }\r\n      let type = this.resolveType(\r\n        typeNode,\r\n        prototype.parent, // relative to function\r\n        contextualTypeArguments,\r\n        reportMode\r\n      );\r\n      if (!type) return null;\r\n      returnType = type;\r\n    }\r\n\r\n    var signature = new Signature(parameterTypes, returnType, thisType);\r\n    signature.parameterNames = parameterNames;\r\n    signature.requiredParameters = requiredParameters;\r\n\r\n    var nameInclTypeParameters = prototype.name;\r\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\r\n    var instance = new Function(\r\n      nameInclTypeParameters,\r\n      prototype,\r\n      signature,\r\n      contextualTypeArguments\r\n    );\r\n    prototype.setResolvedInstance(instanceKey, instance);\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\r\n  resolveFunctionInclTypeArguments(\r\n    /** The prototype of the function. */\r\n    prototype: FunctionPrototype,\r\n    /** Type arguments provided. */\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    /** Relative context. Type arguments are resolved from here. */\r\n    context: Element,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type>,\r\n    /** The node to use when reporting intermediate errors. */\r\n    reportNode: Node,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Function | null {\r\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\r\n      ? prototype.parent.parent\r\n      : prototype.parent;\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n\r\n    // Resolve type arguments if generic\r\n    if (prototype.is(CommonFlags.GENERIC)) {\r\n\r\n      // If this is an instance method, first apply the class's type arguments\r\n      if (prototype.is(CommonFlags.INSTANCE)) {\r\n        assert(actualParent.kind == ElementKind.CLASS);\r\n        let classTypeArguments = (<Class>actualParent).typeArguments;\r\n        if (classTypeArguments) {\r\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\r\n          let numClassTypeArguments = classTypeArguments.length;\r\n          assert(numClassTypeArguments == typeParameterNodes.length);\r\n          for (let i = 0; i < numClassTypeArguments; ++i) {\r\n            contextualTypeArguments.set(\r\n              typeParameterNodes[i].name.text,\r\n              classTypeArguments[i]\r\n            );\r\n          }\r\n        }\r\n      }\r\n\r\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\r\n        assert(prototype.typeParameterNodes),\r\n        typeArgumentNodes,\r\n        context,\r\n        contextualTypeArguments,\r\n        reportNode,\r\n        reportMode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n\r\n    // Otherwise make sure that no type arguments have been specified\r\n    } else {\r\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_generic,\r\n            reportNode.range, prototype.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Continue with concrete types\r\n    return this.resolveFunction(\r\n      prototype,\r\n      resolvedTypeArguments,\r\n      contextualTypeArguments,\r\n      reportMode\r\n    );\r\n  }\r\n\r\n  /** Resolves a class prototype using the specified concrete type arguments. */\r\n  resolveClass(\r\n    /** The prototype of the class. */\r\n    prototype: ClassPrototype,\r\n    /** Concrete type arguments. */\r\n    typeArguments: Type[] | null,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type> = makeMap<string,Type>(),\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Class | null {\r\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\r\n\r\n    // Check if this exact instance has already been resolved\r\n    var instance = prototype.getResolvedInstance(instanceKey);\r\n    if (instance) return instance;\r\n\r\n    // Insert contextual type arguments for this operation. Internally, this method is always\r\n    // called with matching type parameter / argument counts.\r\n    if (typeArguments) {\r\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\r\n      let numTypeParameters = typeParameterNodes.length;\r\n      let numTypeArguments = typeArguments.length;\r\n      assert(numTypeArguments == numTypeParameters);\r\n      for (let i = 0; i < numTypeArguments; ++i) {\r\n        contextualTypeArguments.set(typeParameterNodes[i].name.text, typeArguments[i]);\r\n      }\r\n    } else {\r\n      let typeParameterNodes = prototype.typeParameterNodes;\r\n      assert(!(typeParameterNodes && typeParameterNodes.length));\r\n    }\r\n\r\n    // Resolve base class if applicable\r\n    var basePrototype = prototype.basePrototype;\r\n    var baseClass: Class | null = null;\r\n    if (basePrototype) {\r\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\r\n      baseClass = this.resolveClassInclTypeArguments(\r\n        basePrototype,\r\n        extendsNode.typeArguments,\r\n        prototype.parent, // relative to derived class\r\n        makeMap(contextualTypeArguments), // don't inherit\r\n        extendsNode,\r\n        reportMode\r\n      );\r\n      if (!baseClass) return null;\r\n    }\r\n\r\n    // Construct the instance and remember that it has been resolved already\r\n    var nameInclTypeParamters = prototype.name;\r\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\r\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\r\n    instance.contextualTypeArguments = contextualTypeArguments;\r\n    prototype.setResolvedInstance(instanceKey, instance);\r\n\r\n    // Inherit base class members and set up the initial memory offset for own fields\r\n    var memoryOffset: u32 = 0;\r\n    if (baseClass) {\r\n      let baseMembers = baseClass.members;\r\n      if (baseMembers) {\r\n        let instanceMembers = instance.members;\r\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\r\n        for (let [baseMemberName, baseMember] of baseMembers) {\r\n          instanceMembers.set(baseMemberName, baseMember);\r\n        }\r\n      }\r\n      memoryOffset = baseClass.currentMemoryOffset;\r\n    }\r\n\r\n    // Resolve instance members\r\n    var instanceMemberPrototypes = prototype.instanceMembers;\r\n    if (instanceMemberPrototypes) {\r\n      for (let member of instanceMemberPrototypes.values()) {\r\n        switch (member.kind) {\r\n\r\n          // Lay out fields in advance\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            let instanceMembers = instance.members;\r\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\r\n            else if (instanceMembers.has(member.name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                (<FieldPrototype>member).identifierNode.range,\r\n                member.name\r\n              );\r\n              break;\r\n            }\r\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\r\n            let fieldType: Type | null = null;\r\n            // TODO: handle duplicate non-private fields specifically?\r\n            if (!fieldTypeNode) {\r\n              if (baseClass) {\r\n                let baseMembers = baseClass.members;\r\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\r\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\r\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\r\n                    assert(baseField.kind == ElementKind.FIELD);\r\n                    fieldType = (<Field>baseField).type;\r\n                  }\r\n                }\r\n              }\r\n              if (!fieldType) {\r\n                if (reportMode == ReportMode.REPORT) {\r\n                  this.error(\r\n                    DiagnosticCode.Type_expected,\r\n                    (<FieldPrototype>member).identifierNode.range.atEnd\r\n                  );\r\n                }\r\n              }\r\n            } else {\r\n              fieldType = this.resolveType(\r\n                fieldTypeNode,\r\n                prototype.parent, // relative to class\r\n                instance.contextualTypeArguments,\r\n                reportMode\r\n              );\r\n            }\r\n            if (!fieldType) break; // did report above\r\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\r\n            assert(isPowerOf2(fieldType.byteSize));\r\n            let mask = fieldType.byteSize - 1;\r\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\r\n            fieldInstance.memoryOffset = memoryOffset;\r\n            memoryOffset += fieldType.byteSize;\r\n            instance.add(member.name, fieldInstance); // reports\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\r\n            instance.add(boundPrototype.name, boundPrototype); // reports\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY_PROTOTYPE: {\r\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\r\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\r\n            if (getterPrototype) {\r\n              let getterInstance = this.resolveFunction(\r\n                getterPrototype.toBound(instance),\r\n                null,\r\n                makeMap(instance.contextualTypeArguments),\r\n                reportMode\r\n              );\r\n              if (getterInstance) {\r\n                propertyInstance.getterInstance = getterInstance;\r\n                propertyInstance.setType(getterInstance.signature.returnType);\r\n              }\r\n            }\r\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\r\n            if (setterPrototype) {\r\n              let setterInstance = this.resolveFunction(\r\n                setterPrototype.toBound(instance),\r\n                null,\r\n                makeMap(instance.contextualTypeArguments),\r\n                reportMode\r\n              );\r\n              if (setterInstance) {\r\n                propertyInstance.setterInstance = setterInstance;\r\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\r\n                  assert(setterInstance.signature.parameterTypes.length == 1);\r\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\r\n                }\r\n              }\r\n            }\r\n            instance.add(propertyInstance.name, propertyInstance); // reports\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Finalize memory offset\r\n    instance.currentMemoryOffset = memoryOffset;\r\n\r\n    // Link _own_ constructor if present\r\n    {\r\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\r\n      if (ctorPrototype && ctorPrototype.parent === instance) {\r\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n        let ctorInstance = this.resolveFunction(\r\n          <FunctionPrototype>ctorPrototype,\r\n          null,\r\n          instance.contextualTypeArguments,\r\n          reportMode\r\n        );\r\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\r\n      }\r\n    }\r\n\r\n    // Fully resolve operator overloads (don't have type parameters on their own)\r\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\r\n      assert(kind != OperatorKind.INVALID);\r\n      let operatorInstance: Function | null;\r\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\r\n        let boundPrototype = overloadPrototype.toBound(instance);\r\n        operatorInstance = this.resolveFunction(\r\n          boundPrototype,\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n      } else {\r\n        operatorInstance = this.resolveFunction(\r\n          overloadPrototype,\r\n          null,\r\n          makeMap<string,Type>(),\r\n          reportMode\r\n        );\r\n      }\r\n      if (!operatorInstance) continue;\r\n      let overloads = instance.overloads;\r\n      if (!overloads) instance.overloads = overloads = new Map();\r\n      overloads.set(kind, operatorInstance);\r\n    }\r\n    return instance;\r\n  }\r\n\r\n  /** Resolves a class prototype by first resolving the specified type arguments. */\r\n  resolveClassInclTypeArguments(\r\n    /** The prototype of the class. */\r\n    prototype: ClassPrototype,\r\n    /** Type argument nodes provided. */\r\n    typeArgumentNodes: CommonTypeNode[] | null,\r\n    /** Relative context. Type arguments are resolved from here. */\r\n    context: Element,\r\n    /** Type arguments inherited through context, i.e. `T`. */\r\n    contextualTypeArguments: Map<string,Type>,\r\n    /** The node to use when reporting intermediate errors. */\r\n    reportNode: Node,\r\n    /** How to proceed with eventualy diagnostics. */\r\n    reportMode: ReportMode = ReportMode.REPORT\r\n  ): Class | null {\r\n    var resolvedTypeArguments: Type[] | null = null;\r\n\r\n    // Resolve type arguments if generic\r\n    if (prototype.is(CommonFlags.GENERIC)) {\r\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\r\n        assert(prototype.typeParameterNodes), // must be present if generic\r\n        typeArgumentNodes,\r\n        context,\r\n        contextualTypeArguments,\r\n        reportNode,\r\n        reportMode\r\n      );\r\n      if (!resolvedTypeArguments) return null;\r\n\r\n    // Otherwise make sure that no type arguments have been specified\r\n    } else {\r\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\r\n        if (reportMode == ReportMode.REPORT) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_generic,\r\n            reportNode.range, prototype.internalName\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Continue with concrete types\r\n    return this.resolveClass(\r\n      prototype,\r\n      resolvedTypeArguments,\r\n      contextualTypeArguments,\r\n      reportMode\r\n    );\r\n  }\r\n}\r\n","/**\r\n * The AssemblyScript compiler.\r\n * @module compiler\r\n *//***/\r\n\r\nimport {\r\n  compileCall as compileBuiltinCall,\r\n  compileAbort,\r\n  compileIterateRoots,\r\n  ensureGCHook,\r\n  BuiltinSymbols\r\n} from \"./builtins\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module,\r\n  MemorySegment,\r\n  ExpressionRef,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  NativeType,\r\n  FunctionRef,\r\n  ExpressionId,\r\n  FunctionTypeRef,\r\n  GlobalRef,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getBlockName,\r\n  needsExplicitUnreachable\r\n} from \"./module\";\r\n\r\nimport {\r\n  CommonFlags,\r\n  INSTANCE_DELIMITER,\r\n  STATIC_DELIMITER,\r\n  GETTER_PREFIX,\r\n  SETTER_PREFIX,\r\n  LibrarySymbols,\r\n  CommonSymbols,\r\n  INDEX_SUFFIX\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program,\r\n  ClassPrototype,\r\n  Class,\r\n  Element,\r\n  ElementKind,\r\n  Enum,\r\n  Field,\r\n  FunctionPrototype,\r\n  Function,\r\n  FunctionTarget,\r\n  Global,\r\n  Local,\r\n  EnumValue,\r\n  Property,\r\n  VariableLikeElement,\r\n  ConstantValueKind,\r\n  OperatorKind,\r\n  DecoratorFlags,\r\n  PropertyPrototype,\r\n  File,\r\n  mangleInternalName\r\n} from \"./program\";\r\n\r\nimport {\r\n  FlowFlags,\r\n  Flow\r\n} from \"./flow\";\r\n\r\nimport {\r\n  Resolver, ReportMode\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  Token,\r\n  operatorTokenToString\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  TypeNode,\r\n  Range,\r\n  DecoratorKind,\r\n  AssertionKind,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DoStatement,\r\n  EmptyStatement,\r\n  EnumDeclaration,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  FieldDeclaration,\r\n  ForStatement,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportStatement,\r\n  InstanceOfExpression,\r\n  InterfaceDeclaration,\r\n  NamespaceDeclaration,\r\n  ReturnStatement,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  VariableStatement,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  Expression,\r\n  AssertionExpression,\r\n  BinaryExpression,\r\n  CallExpression,\r\n  CommaExpression,\r\n  ElementAccessExpression,\r\n  FloatLiteralExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  IntegerLiteralExpression,\r\n  LiteralExpression,\r\n  LiteralKind,\r\n  NewExpression,\r\n  ObjectLiteralExpression,\r\n  ParenthesizedExpression,\r\n  PropertyAccessExpression,\r\n  TernaryExpression,\r\n  ArrayLiteralExpression,\r\n  StringLiteralExpression,\r\n  UnaryPostfixExpression,\r\n  UnaryPrefixExpression,\r\n\r\n  nodeIsConstantValue,\r\n  findDecorator,\r\n  isTypeOmitted\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature,\r\n\r\n  typesToNativeTypes\r\n} from \"./types\";\r\n\r\nimport {\r\n  writeI8,\r\n  writeI16,\r\n  writeI32,\r\n  writeI64,\r\n  writeF32,\r\n  writeF64,\r\n  makeMap\r\n} from \"./util\";\r\n\r\n/** Compilation target. */\r\nexport enum Target {\r\n  /** WebAssembly with 32-bit pointers. */\r\n  WASM32,\r\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\r\n  WASM64\r\n}\r\n\r\n/** Compiler options. */\r\nexport class Options {\r\n\r\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\r\n  target: Target = Target.WASM32;\r\n  /** If true, replaces assertions with nops. */\r\n  noAssert: bool = false;\r\n  /** If true, imports the memory provided by the embedder. */\r\n  importMemory: bool = false;\r\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\r\n  sharedMemory: i32 = 0;\r\n  /** If true, imports the function table provided by the embedder. */\r\n  importTable: bool = false;\r\n  /** If true, generates information necessary for source maps. */\r\n  sourceMap: bool = false;\r\n  /** Static memory start offset. */\r\n  memoryBase: i32 = 0;\r\n  /** Global aliases. */\r\n  globalAliases: Map<string,string> | null = null;\r\n  /** Additional features to activate. */\r\n  features: Feature = Feature.NONE;\r\n\r\n  /** Hinted optimize level. Not applied by the compiler itself. */\r\n  optimizeLevelHint: i32 = 0;\r\n  /** Hinted shrink level. Not applied by the compiler itself. */\r\n  shrinkLevelHint: i32 = 0;\r\n\r\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\r\n  get isWasm64(): bool {\r\n    return this.target == Target.WASM64;\r\n  }\r\n\r\n  /** Gets the unsigned size type matching the target. */\r\n  get usizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\r\n  }\r\n\r\n  /** Gets the signed size type matching the target. */\r\n  get isizeType(): Type {\r\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\r\n  }\r\n\r\n  /** Gets the native size type matching the target. */\r\n  get nativeSizeType(): NativeType {\r\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\r\n  }\r\n\r\n  /** Tests if a specific feature is activated. */\r\n  hasFeature(feature: Feature): bool {\r\n    return (this.features & feature) != 0;\r\n  }\r\n}\r\n\r\n/** Indicates specific features to activate. */\r\nexport const enum Feature {\r\n  /** No additional features. */\r\n  NONE = 0,\r\n  /** Sign extension operations. */\r\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\r\n  /** Mutable global imports and exports. */\r\n  MUTABLE_GLOBAL = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\r\n  /** Bulk memory operations. */\r\n  BULK_MEMORY = 1 << 2, // see: https://github.com/WebAssembly/bulk-memory-operations\r\n  /** SIMD types and operations. */\r\n  SIMD = 1 << 3, // see: https://github.com/WebAssembly/simd\r\n  /** Threading and atomic operations. */\r\n  THREADS = 1 << 4 // see: https://github.com/WebAssembly/threads\r\n}\r\n\r\n/** Indicates the desired kind of a conversion. */\r\nexport const enum ConversionKind {\r\n  /** No conversion. */\r\n  NONE,\r\n  /** Implicit conversion. */\r\n  IMPLICIT,\r\n  /** Explicit conversion. */\r\n  EXPLICIT\r\n}\r\n\r\n/** Indicates the desired wrap mode of a conversion. */\r\nexport const enum WrapMode {\r\n  /** No wrapping. */\r\n  NONE,\r\n  /** Wrap small integer values. */\r\n  WRAP\r\n}\r\n\r\n/** Compiler interface. */\r\nexport class Compiler extends DiagnosticEmitter {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Resolver reference. */\r\n  resolver: Resolver;\r\n  /** Provided options. */\r\n  options: Options;\r\n  /** Module instance being compiled. */\r\n  module: Module;\r\n  /** Current control flow. */\r\n  currentFlow: Flow;\r\n  /** Current inline functions stack. */\r\n  currentInlineFunctions: Function[] = [];\r\n  /** Current enum in compilation. */\r\n  currentEnum: Enum | null = null;\r\n  /** Current type in compilation. */\r\n  currentType: Type = Type.void;\r\n  /** Start function statements. */\r\n  currentBody: ExpressionRef[];\r\n  /** Counting memory offset. */\r\n  memoryOffset: I64;\r\n  /** Memory segments being compiled. */\r\n  memorySegments: MemorySegment[] = [];\r\n  /** Map of already compiled static string segments. */\r\n  stringSegments: Map<string,MemorySegment> = new Map();\r\n  /** Function table being compiled. */\r\n  functionTable: string[] = [ \"null\" ];\r\n  /** Argument count helper global. */\r\n  argcVar: GlobalRef = 0;\r\n  /** Argument count helper setter. */\r\n  argcSet: FunctionRef = 0;\r\n  /** Indicates whether the iterateRoots function must be generated. */\r\n  needsIterateRoots: bool = false;\r\n\r\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\r\n  static compile(program: Program, options: Options | null = null): Module {\r\n    return new Compiler(program, options).compile();\r\n  }\r\n\r\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\r\n  constructor(program: Program, options: Options | null = null) {\r\n    super(program.diagnostics);\r\n    this.program = program;\r\n    this.resolver = program.resolver;\r\n    if (!options) options = new Options();\r\n    this.options = options;\r\n    this.memoryOffset = i64_new(\r\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\r\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\r\n      max(options.memoryBase, 8)\r\n    );\r\n    this.module = Module.create();\r\n  }\r\n\r\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\r\n  compile(): Module {\r\n    var options = this.options;\r\n    var module = this.module;\r\n    var program = this.program;\r\n\r\n    // initialize lookup maps, built-ins, imports, exports, etc.\r\n    program.initialize(options);\r\n\r\n    // set up the main start function\r\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature([], Type.void));\r\n    startFunctionInstance.internalName = \"start\";\r\n    var startFunctionBody = new Array<ExpressionRef>();\r\n    this.currentFlow = startFunctionInstance.flow;\r\n    this.currentBody = startFunctionBody;\r\n\r\n    // add a mutable heap base dummy\r\n    if (options.isWasm64) {\r\n      module.addGlobal(\r\n        BuiltinSymbols.HEAP_BASE,\r\n        NativeType.I64,\r\n        true,\r\n        module.createI64(0, 0)\r\n      );\r\n    } else {\r\n      module.addGlobal(\r\n        BuiltinSymbols.HEAP_BASE,\r\n        NativeType.I32,\r\n        false,\r\n        module.createI32(0)\r\n      );\r\n    }\r\n\r\n    // compile entry file(s) while traversing reachable elements\r\n    var files = program.filesByName;\r\n    for (let file of files.values()) {\r\n      if (file.source.isEntry) {\r\n        this.compileFile(file);\r\n        this.compileExports(file);\r\n      }\r\n    }\r\n\r\n    // compile the start function if not empty or called by main\r\n    var explicitStartFunction = program.explicitStartFunction;\r\n    if (startFunctionBody.length || explicitStartFunction) {\r\n      let signature = startFunctionInstance.signature;\r\n      let funcRef = module.addFunction(\r\n        startFunctionInstance.internalName,\r\n        this.ensureFunctionType(\r\n          signature.parameterTypes,\r\n          signature.returnType,\r\n          signature.thisType\r\n        ),\r\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\r\n        module.createBlock(null, startFunctionBody)\r\n      );\r\n      startFunctionInstance.finalize(module, funcRef);\r\n      if (!explicitStartFunction) module.setStart(funcRef);\r\n    }\r\n\r\n    // update the heap base pointer\r\n    var memoryOffset = this.memoryOffset;\r\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\r\n    this.memoryOffset = memoryOffset;\r\n    module.removeGlobal(BuiltinSymbols.HEAP_BASE);\r\n    if (options.isWasm64) {\r\n      module.addGlobal(\r\n        BuiltinSymbols.HEAP_BASE,\r\n        NativeType.I64,\r\n        false,\r\n        module.createI64(i64_low(memoryOffset), i64_high(memoryOffset))\r\n      );\r\n    } else {\r\n      module.addGlobal(\r\n        BuiltinSymbols.HEAP_BASE,\r\n        NativeType.I32,\r\n        false,\r\n        module.createI32(i64_low(memoryOffset))\r\n      );\r\n    }\r\n\r\n    // set up memory\r\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\r\n    module.setMemory(\r\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\r\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\r\n        : 0,\r\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\r\n      this.memorySegments,\r\n      options.target,\r\n      \"memory\",\r\n      isSharedMemory\r\n    );\r\n\r\n    // import memory if requested (default memory is named '0' by Binaryen)\r\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\r\n\r\n    // set up function table\r\n    var functionTable = this.functionTable;\r\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable);\r\n    module.addTableExport(\"0\", \"table\");\r\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.createBlock(null, []));\r\n\r\n    // import table if requested (default table is named '0' by Binaryen)\r\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\r\n\r\n    // set up module exports\r\n    for (let file of this.program.filesByName.values()) {\r\n      if (file.source.isEntry) this.makeModuleExports(file);\r\n    }\r\n\r\n    // set up gc\r\n    if (this.needsIterateRoots) compileIterateRoots(this);\r\n\r\n    return module;\r\n  }\r\n\r\n  /** Applies the respective module exports for the specified file. */\r\n  private makeModuleExports(file: File): void {\r\n    var members = file.exports;\r\n    if (members) for (let [name, member] of members) this.makeModuleExport(name, member);\r\n    var exportsStar = file.exportsStar;\r\n    if (exportsStar)  {\r\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.makeModuleExports(exportsStar[i]);\r\n    }\r\n  }\r\n\r\n  /** Applies the respective module export(s) for the specified element. */\r\n  private makeModuleExport(name: string, element: Element, prefix: string = \"\"): void {\r\n    switch (element.kind) {\r\n\r\n      // traverse instances\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instances = (<FunctionPrototype>element).instances;\r\n        if (instances) {\r\n          for (let instance of instances.values()) {\r\n            let instanceName = name;\r\n            if (instance.is(CommonFlags.GENERIC)) {\r\n              let fullName = instance.internalName;\r\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\r\n            }\r\n            this.makeModuleExport(instanceName, instance, prefix);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        let instances = (<ClassPrototype>element).instances;\r\n        if (instances) {\r\n          for (let instance of instances.values()) {\r\n            let instanceName = name;\r\n            if (instance.is(CommonFlags.GENERIC)) {\r\n              let fullName = instance.internalName;\r\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\r\n            }\r\n            this.makeModuleExport(instanceName, instance, prefix);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        let getter = (<PropertyPrototype>element).getterPrototype;\r\n        let setter = (<PropertyPrototype>element).setterPrototype;\r\n        if (getter) this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\r\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\r\n        break;\r\n      }\r\n\r\n      // export concrete elements\r\n      case ElementKind.GLOBAL: {\r\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_export_a_mutable_global,\r\n            (<Global>element).identifierNode.range\r\n          );\r\n        } else {\r\n          this.module.addGlobalExport(element.internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.ENUMVALUE: {\r\n        if (!assert(element.parent).is(CommonFlags.CONST) && !this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_export_a_mutable_global,\r\n            (<EnumValue>element).identifierNode.range\r\n          );\r\n        } else {\r\n          this.module.addGlobalExport(element.internalName, prefix + name);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION: {\r\n        let instance = <Function>element;\r\n        let signature = instance.signature;\r\n        if (signature.requiredParameters < signature.parameterTypes.length) {\r\n          // utilize trampoline to fill in omitted arguments\r\n          instance = this.ensureTrampoline(instance);\r\n          this.ensureArgcSet();\r\n        }\r\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let getter = (<Property>element).getterInstance;\r\n        if (getter) this.makeModuleExport(GETTER_PREFIX + name, getter, prefix);\r\n        let setter = (<Property>element).setterInstance;\r\n        if (setter) this.makeModuleExport(SETTER_PREFIX + name, setter, prefix);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let module = this.module;\r\n        let type = (<Field>element).type;\r\n        let nativeType = type.toNativeType();\r\n        let offset = (<Field>element).memoryOffset;\r\n        let usizeType = this.options.usizeType;\r\n        let nativeSizeType = this.options.nativeSizeType;\r\n\r\n        // make a getter\r\n        let getterName = prefix + GETTER_PREFIX + name;\r\n        module.addFunction(\r\n          getterName,\r\n          this.ensureFunctionType(null, type, usizeType),\r\n          null,\r\n          module.createLoad(\r\n            type.byteSize,\r\n            type.is(TypeFlags.SIGNED),\r\n            module.createGetLocal(0, nativeSizeType),\r\n            nativeType,\r\n            offset\r\n          )\r\n        );\r\n        module.addFunctionExport(getterName, getterName);\r\n\r\n        // make a setter\r\n        if (!element.is(CommonFlags.READONLY)) {\r\n          let setterName = prefix + SETTER_PREFIX + name;\r\n          module.addFunction(\r\n            setterName,\r\n            this.ensureFunctionType([ type ], Type.void, usizeType),\r\n            null,\r\n            module.createStore(\r\n              type.byteSize,\r\n              module.createGetLocal(0, nativeSizeType),\r\n              module.createGetLocal(1, nativeType),\r\n              nativeType,\r\n              offset\r\n            )\r\n          );\r\n          module.addFunctionExport(setterName, setterName);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // just traverse members below\r\n      case ElementKind.ENUM:\r\n      case ElementKind.CLASS:\r\n      case ElementKind.NAMESPACE:\r\n      case ElementKind.FILE:\r\n      case ElementKind.TYPEDEFINITION: break;\r\n\r\n      default: assert(false); // unexpected module export\r\n    }\r\n\r\n    // traverse members\r\n    var members = element.members;\r\n    if (members) {\r\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\r\n        ? INSTANCE_DELIMITER\r\n        : STATIC_DELIMITER\r\n      );\r\n      if (\r\n        element.kind == ElementKind.NAMESPACE ||\r\n        element.kind == ElementKind.FILE\r\n      ) {\r\n        for (let member of members.values()) {\r\n          if (!member.is(CommonFlags.EXPORT)) continue;\r\n          this.makeModuleExport(member.name, member, subPrefix);\r\n        }\r\n      } else {\r\n        for (let member of members.values()) {\r\n          if (member.is(CommonFlags.PRIVATE)) continue;\r\n          this.makeModuleExport(member.name, member, subPrefix);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // general\r\n\r\n  /** Compiles any element. */\r\n  compileElement(element: Element, compileMembers: bool = true): void {\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        this.compileGlobal(<Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        this.compileEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        if (!element.is(CommonFlags.GENERIC)) {\r\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        if (!element.is(CommonFlags.GENERIC)) {\r\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\r\n        if (getterPrototype) {\r\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\r\n        }\r\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\r\n        if (setterPrototype) {\r\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE:\r\n      case ElementKind.TYPEDEFINITION:\r\n      case ElementKind.ENUMVALUE: break;\r\n      default: assert(false, ElementKind[element.kind]);\r\n    }\r\n    if (compileMembers) this.compileMembers(element);\r\n  }\r\n\r\n  /** Compiles an element's members. */\r\n  compileMembers(element: Element): void {\r\n    var members = element.members;\r\n    if (members) for (let element of members.values()) this.compileElement(element);\r\n  }\r\n\r\n  /** Compiles a file's exports. */\r\n  compileExports(file: File): void {\r\n    var exports = file.exports;\r\n    if (exports) for (let element of exports.values()) this.compileElement(element);\r\n    var exportsStar = file.exportsStar;\r\n    if (exportsStar) for (let exportStar of exportsStar) this.compileFile(exportStar);\r\n  }\r\n\r\n  // files\r\n\r\n  /** Compiles the file matching the specified path. */\r\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\r\n    var file: File;\r\n    var filesByName = this.program.filesByName;\r\n    var pathWithIndex: string;\r\n    if (filesByName.has(normalizedPathWithoutExtension)) {\r\n      file = filesByName.get(normalizedPathWithoutExtension)!;\r\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\r\n      file = filesByName.get(pathWithIndex)!;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.File_0_not_found,\r\n        reportNode.range, normalizedPathWithoutExtension\r\n      );\r\n      return;\r\n    }\r\n    this.compileFile(file);\r\n  }\r\n\r\n  /** Compiles the specified file. */\r\n  compileFile(file: File): void {\r\n    if (file.is(CommonFlags.COMPILED)) return;\r\n    file.set(CommonFlags.COMPILED);\r\n\r\n    // compile top-level statements within the file's start function\r\n    var startFunction = file.startFunction;\r\n    var previousBody = this.currentBody;\r\n    var startFunctionBody = new Array<ExpressionRef>();\r\n    this.currentBody = startFunctionBody;\r\n\r\n    // compile top-level statements\r\n    var previousFlow = this.currentFlow;\r\n    this.currentFlow = startFunction.flow;\r\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\r\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\r\n    }\r\n    this.currentFlow = previousFlow;\r\n    this.currentBody = previousBody;\r\n\r\n    // if top-level statements are present, make the per-file start function and call it in start\r\n    if (startFunctionBody.length) {\r\n      let module = this.module;\r\n      let locals = startFunction.localsByIndex;\r\n      let numLocals = locals.length;\r\n      let varTypes = new Array<NativeType>(numLocals);\r\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\r\n      module.addFunction(\r\n        startFunction.internalName,\r\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\r\n        varTypes,\r\n        startFunctionBody.length > 1\r\n          ? module.createBlock(null, startFunctionBody)\r\n          : startFunctionBody[0]\r\n      );\r\n      previousBody.push(\r\n        module.createCall(startFunction.internalName, null, NativeType.None)\r\n      );\r\n    }\r\n  }\r\n\r\n  // globals\r\n\r\n  compileGlobal(global: Global): bool {\r\n    if (global.is(CommonFlags.COMPILED)) return true;\r\n    global.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var initExpr: ExpressionRef = 0;\r\n    var typeNode = global.typeNode;\r\n    var initializerNode = global.initializerNode;\r\n\r\n    if (!global.is(CommonFlags.RESOLVED)) {\r\n\r\n      // resolve now if annotated\r\n      if (typeNode) {\r\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\r\n        if (!resolvedType) return false;\r\n        if (resolvedType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            typeNode.range\r\n          );\r\n          return false;\r\n        }\r\n        global.setType(resolvedType);\r\n\r\n      // infer from initializer if not annotated\r\n      } else if (initializerNode) { // infer type using void/NONE for literal inference\r\n        let previousFlow = this.currentFlow;\r\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\r\n          this.currentFlow = global.file.startFunction.flow;\r\n        }\r\n        initExpr = this.compileExpressionRetainType( // reports\r\n          initializerNode,\r\n          Type.void,\r\n          WrapMode.WRAP\r\n        );\r\n        this.currentFlow = previousFlow;\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          return false;\r\n        }\r\n        global.setType(this.currentType);\r\n\r\n      // must either be annotated or have an initializer\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          global.identifierNode.range.atEnd\r\n        );\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // ambient builtins like 'HEAP_BASE' need to be resolved but are added explicitly\r\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) return true;\r\n\r\n    var nativeType = global.type.toNativeType();\r\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\r\n\r\n    // handle imports\r\n    if (global.is(CommonFlags.AMBIENT)) {\r\n\r\n      // constant global\r\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBAL)) {\r\n        global.set(CommonFlags.MODULE_IMPORT);\r\n        mangleImportName(global, global.declaration);\r\n        module.addGlobalImport(\r\n          global.internalName,\r\n          mangleImportName_moduleName,\r\n          mangleImportName_elementName,\r\n          nativeType\r\n        );\r\n        global.set(CommonFlags.COMPILED);\r\n        return true;\r\n\r\n      // importing mutable globals is not supported in the MVP\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          global.declaration.range\r\n        );\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // the MVP does not yet support initializer expressions other than constant values (and constant\r\n    // get_globals), hence such initializations must be performed in the start function for now.\r\n    var initializeInStart = false;\r\n\r\n    // evaluate initializer if present\r\n    if (initializerNode) {\r\n      if (!initExpr) {\r\n        let previousFlow = this.currentFlow;\r\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\r\n          this.currentFlow = global.file.startFunction.flow;\r\n        }\r\n        initExpr = this.compileExpression(\r\n          initializerNode,\r\n          global.type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.WRAP\r\n        );\r\n        this.currentFlow = previousFlow;\r\n      }\r\n\r\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n        if (isDeclaredConstant) {\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              initializerNode.range\r\n            );\r\n            initializeInStart = true;\r\n          }\r\n        } else {\r\n          initializeInStart = true;\r\n        }\r\n      }\r\n\r\n      // explicitly inline if annotated\r\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\r\n        if (!initializeInStart) { // reported above\r\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\r\n          let exprType = getExpressionType(initExpr);\r\n          switch (exprType) {\r\n            case NativeType.I32: {\r\n              global.constantValueKind = ConstantValueKind.INTEGER;\r\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\r\n              break;\r\n            }\r\n            case NativeType.I64: {\r\n              global.constantValueKind = ConstantValueKind.INTEGER;\r\n              global.constantIntegerValue = i64_new(\r\n                getConstValueI64Low(initExpr),\r\n                getConstValueI64High(initExpr)\r\n              );\r\n              break;\r\n            }\r\n            case NativeType.F32: {\r\n              global.constantValueKind = ConstantValueKind.FLOAT;\r\n              global.constantFloatValue = getConstValueF32(initExpr);\r\n              break;\r\n            }\r\n            case NativeType.F64: {\r\n              global.constantValueKind = ConstantValueKind.FLOAT;\r\n              global.constantFloatValue = getConstValueF64(initExpr);\r\n              break;\r\n            }\r\n            default: {\r\n              assert(false);\r\n              return false;\r\n            }\r\n          }\r\n          global.set(CommonFlags.INLINED); // inline the value from now on\r\n        }\r\n      }\r\n\r\n    // initialize to zero if there's no initializer\r\n    } else {\r\n      initExpr = global.type.toNativeZero(module);\r\n    }\r\n\r\n    var internalName = global.internalName;\r\n\r\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\r\n      if (global.hasDecorator(DecoratorFlags.INLINE)) {\r\n        this.error(\r\n          DiagnosticCode.Decorator_0_is_not_valid_here,\r\n          global.identifierNode.range, \"inline\"\r\n        );\r\n      }\r\n      module.addGlobal(internalName, nativeType, true, global.type.toNativeZero(module));\r\n      this.currentBody.push(module.createSetGlobal(internalName, initExpr));\r\n\r\n    } else if (!global.hasDecorator(DecoratorFlags.INLINE)) { // compile normally\r\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // enums\r\n\r\n  compileEnum(element: Enum): bool {\r\n    if (element.is(CommonFlags.COMPILED)) return true;\r\n    element.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    this.currentEnum = element;\r\n    var previousValue: EnumValue | null = null;\r\n    var previousValueIsMut = false;\r\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\r\n\r\n    if (element.members) {\r\n      for (let member of element.members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\r\n        let initInStart = false;\r\n        let val = <EnumValue>member;\r\n        let valueNode = val.valueNode;\r\n        val.set(CommonFlags.COMPILED);\r\n        let previousFlow = this.currentFlow;\r\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\r\n          this.currentFlow = element.file.startFunction.flow;\r\n        }\r\n        let initExpr: ExpressionRef;\r\n        if (valueNode) {\r\n          initExpr = this.compileExpression(\r\n            valueNode,\r\n            Type.i32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            if (element.is(CommonFlags.CONST)) {\r\n              initExpr = module.precomputeExpression(initExpr);\r\n              if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n                this.error(\r\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\r\n                  valueNode.range\r\n                );\r\n                initInStart = true;\r\n              }\r\n            } else {\r\n              initInStart = true;\r\n            }\r\n          }\r\n        } else if (previousValue == null) {\r\n          initExpr = module.createI32(0);\r\n        } else {\r\n          if (previousValueIsMut) {\r\n            this.error(\r\n              DiagnosticCode.Enum_member_must_have_initializer,\r\n              (<EnumValue>member).identifierNode.range.atEnd\r\n            );\r\n          }\r\n          initExpr = module.createBinary(BinaryOp.AddI32,\r\n            module.createGetGlobal(previousValue.internalName, NativeType.I32),\r\n            module.createI32(1)\r\n          );\r\n          initExpr = module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\r\n            if (element.is(CommonFlags.CONST)) {\r\n              this.error(\r\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\r\n                member.declaration.range\r\n              );\r\n            }\r\n            initInStart = true;\r\n          }\r\n        }\r\n        this.currentFlow = previousFlow;\r\n        if (initInStart) {\r\n          module.addGlobal(val.internalName, NativeType.I32, true, module.createI32(0));\r\n          this.currentBody.push(\r\n            module.createSetGlobal(val.internalName, initExpr)\r\n          );\r\n          previousValueIsMut = true;\r\n        } else {\r\n          if (isInline) {\r\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\r\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\r\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\r\n            }\r\n          } else {\r\n            module.addGlobal(val.internalName, NativeType.I32, true, initExpr);\r\n          }\r\n          previousValueIsMut = false;\r\n        }\r\n        previousValue = <EnumValue>val;\r\n      }\r\n    }\r\n    this.currentEnum = null;\r\n    return true;\r\n  }\r\n\r\n  // functions\r\n\r\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\r\n  compileFunctionUsingTypeArguments(\r\n    prototype: FunctionPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> = makeMap(),\r\n    alternativeReportNode: Node | null = null\r\n  ): Function | null {\r\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\r\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\r\n      prototype,\r\n      typeArguments,\r\n      prototype.parent, // relative to itself\r\n      contextualTypeArguments,\r\n      alternativeReportNode || prototype.declaration\r\n    );\r\n    if (!instance) return null;\r\n    if (!this.compileFunction(instance)) return null; // reports\r\n    return instance;\r\n  }\r\n\r\n  /** Either reuses or creates the function type matching the specified signature. */\r\n  ensureFunctionType(\r\n    parameterTypes: Type[] | null,\r\n    returnType: Type,\r\n    thisType: Type | null = null\r\n  ): FunctionTypeRef {\r\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\r\n    var paramTypes: NativeType[];\r\n    var index = 0;\r\n    if (thisType) {\r\n      paramTypes = new Array(1 + numParameters);\r\n      paramTypes[0] = thisType.toNativeType();\r\n      index = 1;\r\n    } else {\r\n      paramTypes = new Array(numParameters);\r\n    }\r\n    if (parameterTypes) {\r\n      for (let i = 0; i < numParameters; ++i, ++index) {\r\n        paramTypes[index] = parameterTypes[i].toNativeType();\r\n      }\r\n    }\r\n    var resultType = returnType.toNativeType();\r\n    var module = this.module;\r\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\r\n    if (!typeRef) {\r\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\r\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\r\n    }\r\n    return typeRef;\r\n  }\r\n\r\n  /** Compiles the body of a function within the specified flow. */\r\n  private compileFunctionBody(instance: Function): ExpressionRef[] {\r\n    var module = this.module;\r\n    var bodyNode = assert(instance.prototype.bodyNode);\r\n    var returnType = instance.signature.returnType;\r\n    var flow = this.currentFlow;\r\n\r\n    // compile statements\r\n    var stmts: BinaryenExportRef[];\r\n    if (bodyNode.kind == NodeKind.BLOCK) {\r\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true);\r\n    } else {\r\n      // must be an expression statement if not a block\r\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\r\n\r\n      // must be an arrow function\r\n      assert(instance.prototype.arrowKind);\r\n\r\n      // none of the following can be an arrow function\r\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\r\n\r\n      let stmt = this.compileExpression(\r\n        (<ExpressionStatement>bodyNode).expression,\r\n        returnType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      flow.set(FlowFlags.RETURNS);\r\n      if (!flow.canOverflow(stmt, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n      stmts = [ stmt ];\r\n    }\r\n\r\n    // make the main function call `start` implicitly, but only once\r\n    if (instance.prototype == this.program.explicitStartFunction) {\r\n      module.addGlobal(CompilerSymbols.started, NativeType.I32, true, module.createI32(0));\r\n      stmts.unshift(\r\n        module.createIf(\r\n          module.createUnary(\r\n            UnaryOp.EqzI32,\r\n            module.createGetGlobal(CompilerSymbols.started, NativeType.I32)\r\n          ),\r\n          module.createBlock(null, [\r\n            module.createCall(\"start\", null, NativeType.None),\r\n            module.createSetGlobal(CompilerSymbols.started, module.createI32(1))\r\n          ])\r\n        )\r\n      );\r\n    }\r\n\r\n    // make constructors return their instance pointer\r\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\r\n      let nativeSizeType = this.options.nativeSizeType;\r\n      assert(instance.is(CommonFlags.INSTANCE));\r\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n\r\n      if (!flow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n        let thisLocalIndex = flow.is(FlowFlags.INLINE_CONTEXT)\r\n          ? assert(flow.lookupLocal(CommonSymbols.this_)).index\r\n          : 0;\r\n\r\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\r\n        if (!flow.is(FlowFlags.ALLOCATES)) {\r\n          // {\r\n          //   if (!this) this = <ALLOC>\r\n          //   this.a = X\r\n          //   this.b = Y\r\n          // }\r\n          stmts.push(\r\n            module.createIf(\r\n              module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n                module.createGetLocal(thisLocalIndex, nativeSizeType)\r\n              ),\r\n              module.createSetLocal(thisLocalIndex,\r\n                this.makeAllocation(<Class>classInstance)\r\n              )\r\n            )\r\n          );\r\n          this.makeFieldInitialization(<Class>classInstance, stmts);\r\n        }\r\n\r\n        // implicitly return `this`\r\n        stmts.push(\r\n          module.createGetLocal(thisLocalIndex, nativeSizeType)\r\n        );\r\n      }\r\n\r\n      // check that super has been called if this is a derived class\r\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\r\n        this.error(\r\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\r\n          instance.prototype.declaration.range\r\n        );\r\n      }\r\n\r\n    // if this is a normal function, make sure that all branches return\r\n    } else if (returnType != Type.void && !flow.is(FlowFlags.RETURNS)) {\r\n      this.error(\r\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\r\n        instance.prototype.signatureNode.returnType.range\r\n      );\r\n    }\r\n\r\n    return stmts;\r\n  }\r\n\r\n  /** Compiles a readily resolved function instance. */\r\n  compileFunction(instance: Function): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\r\n    instance.set(CommonFlags.COMPILED);\r\n\r\n    var module = this.module;\r\n    var signature = instance.signature;\r\n    var bodyNode = instance.prototype.bodyNode;\r\n\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var funcRef: FunctionRef;\r\n\r\n    // concrete function\r\n    if (bodyNode) {\r\n\r\n      // must not be ambient\r\n      if (instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          instance.identifierNode.range\r\n        );\r\n      }\r\n\r\n      // cannot have an annotated external name\r\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\r\n        let decoratorNodes = instance.decoratorNodes;\r\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          decorator.range\r\n        );\r\n      }\r\n\r\n      // compile body in this function's context\r\n      let previousFlow = this.currentFlow;\r\n      this.currentFlow = instance.flow;\r\n      let stmts = this.compileFunctionBody(instance);\r\n      this.currentFlow = previousFlow;\r\n\r\n      // create the function\r\n      funcRef = module.addFunction(\r\n        instance.internalName,\r\n        typeRef,\r\n        typesToNativeTypes(instance.additionalLocals),\r\n        stmts.length\r\n          ? stmts.length == 1\r\n            ? stmts[0]\r\n            : module.createBlock(null, stmts, instance.signature.returnType.toNativeType())\r\n          : module.createNop()\r\n      );\r\n\r\n    // imported function\r\n    } else {\r\n      if (!instance.is(CommonFlags.AMBIENT)) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          instance.identifierNode.range\r\n        );\r\n      }\r\n\r\n      instance.set(CommonFlags.MODULE_IMPORT);\r\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\r\n\r\n      // create the import\r\n      funcRef = module.addFunctionImport(\r\n        instance.internalName,\r\n        mangleImportName_moduleName,\r\n        mangleImportName_elementName,\r\n        typeRef\r\n      );\r\n    }\r\n\r\n    instance.finalize(module, funcRef);\r\n    return true;\r\n  }\r\n\r\n  // classes\r\n\r\n  compileClassUsingTypeArguments(\r\n    prototype: ClassPrototype,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> = makeMap(),\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    var instance = this.resolver.resolveClassInclTypeArguments(\r\n      prototype,\r\n      typeArguments,\r\n      prototype.parent, // relative to itself\r\n      contextualTypeArguments,\r\n      alternativeReportNode || prototype.declaration\r\n    );\r\n    if (!instance) return;\r\n    this.compileClass(instance);\r\n  }\r\n\r\n  compileClass(instance: Class): bool {\r\n    if (instance.is(CommonFlags.COMPILED)) return true;\r\n    instance.set(CommonFlags.COMPILED);\r\n    var prototype = instance.prototype;\r\n    var staticMembers = (<ClassPrototype>prototype).members;\r\n    if (staticMembers) {\r\n      for (let element of staticMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.GLOBAL: {\r\n            this.compileGlobal(<Global>element);\r\n            break;\r\n          }\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                (<FunctionPrototype>element).identifierNode\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY_PROTOTYPE: {\r\n            let getter = (<PropertyPrototype>element).getterPrototype;\r\n            if (getter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                getter,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                getter.identifierNode\r\n              );\r\n            }\r\n            let setter = (<PropertyPrototype>element).setterPrototype;\r\n            if (setter) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                setter,\r\n                [],\r\n                makeMap<string,Type>(),\r\n                setter.identifierNode\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n          }\r\n        }\r\n      }\r\n    }\r\n    var ctorInstance = instance.constructorInstance;\r\n    if (ctorInstance) this.compileFunction(ctorInstance);\r\n    var instanceMembers = instance.members;\r\n    if (instanceMembers) {\r\n      for (let element of instanceMembers.values()) {\r\n        switch (element.kind) {\r\n          case ElementKind.FUNCTION_PROTOTYPE: {\r\n            if (\r\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\r\n            ) {\r\n              this.compileFunctionUsingTypeArguments(\r\n                <FunctionPrototype>element,\r\n                [],\r\n                makeMap<string,Type>(instance.contextualTypeArguments),\r\n                (<FunctionPrototype>element).declaration.name\r\n              );\r\n            }\r\n            break;\r\n          }\r\n          case ElementKind.FIELD_PROTOTYPE: {\r\n            element.set(CommonFlags.COMPILED);\r\n            break;\r\n          }\r\n          case ElementKind.PROPERTY: {\r\n            let getter = (<Property>element).getterInstance;\r\n            if (getter) this.compileFunction(getter);\r\n            let setter = (<Property>element).setterInstance;\r\n            if (setter) this.compileFunction(setter);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  compileInterfaceDeclaration(\r\n    declaration: InterfaceDeclaration,\r\n    typeArguments: TypeNode[],\r\n    contextualTypeArguments: Map<string,Type> | null = null,\r\n    alternativeReportNode: Node | null = null\r\n  ): void {\r\n    // TODO\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      declaration.range\r\n    );\r\n  }\r\n\r\n  // memory\r\n\r\n  /** Adds a static memory segment with the specified data. */\r\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\r\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\r\n    var segment = MemorySegment.create(buffer, memoryOffset);\r\n    this.memorySegments.push(segment);\r\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\r\n    return segment;\r\n  }\r\n\r\n  // function table\r\n\r\n  /** Ensures that a table entry exists for the specified function and returns its index. */\r\n  ensureFunctionTableEntry(func: Function): i32 {\r\n    assert(func.is(CommonFlags.COMPILED));\r\n    if (func.functionTableIndex >= 0) {\r\n      return func.functionTableIndex;\r\n    }\r\n    var functionTable = this.functionTable;\r\n    var index = functionTable.length;\r\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\r\n      // insert the trampoline if the function has optional parameters\r\n      func = this.ensureTrampoline(func);\r\n    }\r\n    functionTable.push(func.internalName);\r\n    func.functionTableIndex = index;\r\n    return index;\r\n  }\r\n\r\n  // statements\r\n\r\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\r\n    switch (statement.kind) {\r\n      case NodeKind.CLASSDECLARATION: {\r\n        let memberStatements = (<ClassDeclaration>statement).members;\r\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\r\n          this.compileTopLevelStatement(memberStatements[i], body);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.ENUMDECLARATION: {\r\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\r\n        assert(element.kind == ElementKind.ENUM);\r\n        if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case NodeKind.NAMESPACEDECLARATION: {\r\n        let memberStatements = (<NamespaceDeclaration>statement).members;\r\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\r\n          this.compileTopLevelStatement(memberStatements[i], body);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        let declarations = (<VariableStatement>statement).declarations;\r\n        for (let i = 0, k = declarations.length; i < k; ++i) {\r\n          let element = this.program.getElementByDeclaration(declarations[i]);\r\n          assert(element.kind == ElementKind.GLOBAL);\r\n          if (\r\n            !element.is(CommonFlags.AMBIENT) && // delay imports\r\n            !element.hasDecorator(DecoratorFlags.LAZY)\r\n          ) this.compileGlobal(<Global>element);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.FIELDDECLARATION: {\r\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\r\n        if (element.kind == ElementKind.GLOBAL) { // static\r\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.EXPORT: {\r\n        if ((<ExportStatement>statement).normalizedPath != null) {\r\n          this.compileFileByPath(\r\n            <string>(<ExportStatement>statement).normalizedPath,\r\n            <StringLiteralExpression>(<ExportStatement>statement).path\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case NodeKind.IMPORT: {\r\n        this.compileFileByPath(\r\n          (<ImportStatement>statement).normalizedPath,\r\n          (<ImportStatement>statement).path\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTIONDECLARATION:\r\n      case NodeKind.METHODDECLARATION:\r\n      case NodeKind.INTERFACEDECLARATION:\r\n      case NodeKind.INDEXSIGNATUREDECLARATION:\r\n      case NodeKind.TYPEDECLARATION: break;\r\n      default: { // otherwise a top-level statement that is part of the start function's body\r\n        let stmt = this.compileStatement(statement);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  compileStatement(statement: Statement, isLastStatementInBody: bool = false): ExpressionRef {\r\n    var module = this.module;\r\n    var stmt: ExpressionRef;\r\n    switch (statement.kind) {\r\n      case NodeKind.BLOCK: {\r\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.BREAK: {\r\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.CONTINUE: {\r\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.DO: {\r\n        stmt = this.compileDoStatement(<DoStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EMPTY: {\r\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.EXPRESSION: {\r\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.FOR: {\r\n        stmt = this.compileForStatement(<ForStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.IF: {\r\n        stmt = this.compileIfStatement(<IfStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.RETURN: {\r\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastStatementInBody);\r\n        break;\r\n      }\r\n      case NodeKind.SWITCH: {\r\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.THROW: {\r\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TRY: {\r\n        stmt = this.compileTryStatement(<TryStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.VARIABLE: {\r\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\r\n        if (!stmt) stmt = module.createNop();\r\n        break;\r\n      }\r\n      case NodeKind.VOID: {\r\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.WHILE: {\r\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\r\n        break;\r\n      }\r\n      case NodeKind.TYPEDECLARATION: {\r\n        // TODO: integrate inner type declaration into flow\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          statement.range\r\n        );\r\n        stmt = module.createUnreachable();\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        stmt = module.createUnreachable();\r\n      }\r\n    }\r\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\r\n    return stmt;\r\n  }\r\n\r\n  compileStatements(statements: Statement[], isBody: bool = false): ExpressionRef[] {\r\n    var numStatements = statements.length;\r\n    var stmts = new Array<ExpressionRef>(numStatements);\r\n    stmts.length = 0;\r\n    var flow = this.currentFlow;\r\n    for (let i = 0; i < numStatements; ++i) {\r\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\r\n      switch (getExpressionId(stmt)) {\r\n        case ExpressionId.Block: {\r\n          if (!getBlockName(stmt)) {\r\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\r\n            break;\r\n          }\r\n          // fall-through\r\n        }\r\n        default: stmts.push(stmt);\r\n        case ExpressionId.Nop:\r\n      }\r\n      if (flow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n        if (needsExplicitUnreachable(stmt)) stmts.push(this.module.createUnreachable());\r\n        break;\r\n      }\r\n    }\r\n    return stmts;\r\n  }\r\n\r\n  compileBlockStatement(statement: BlockStatement): ExpressionRef {\r\n    var statements = statement.statements;\r\n    var outerFlow = this.currentFlow;\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n\r\n    var stmts = this.compileStatements(statements);\r\n    var stmt = stmts.length == 0\r\n      ? this.module.createNop()\r\n      : stmts.length == 1\r\n        ? stmts[0]\r\n        : this.module.createBlock(null, stmts,getExpressionType(stmts[stmts.length - 1]));\r\n\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.inherit(innerFlow);\r\n    this.currentFlow = outerFlow;\r\n    return stmt;\r\n  }\r\n\r\n  compileBreakStatement(statement: BreakStatement): ExpressionRef {\r\n    var module = this.module;\r\n    if (statement.label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        statement.label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    var flow = this.currentFlow;\r\n    var breakLabel = flow.breakLabel;\r\n    if (breakLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.BREAKS);\r\n    return module.createBreak(breakLabel);\r\n  }\r\n\r\n  compileContinueStatement(statement: ContinueStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var label = statement.label;\r\n    if (label) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        label.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    // Check if 'continue' is allowed here\r\n    var flow = this.currentFlow;\r\n    var continueLabel = flow.continueLabel;\r\n    if (continueLabel == null) {\r\n      this.error(\r\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\r\n        statement.range\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    flow.set(FlowFlags.CONTINUES);\r\n    return module.createBreak(continueLabel);\r\n  }\r\n\r\n  compileDoStatement(statement: DoStatement): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    var outerFlow = this.currentFlow;\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n    var breakLabel = \"break|\" + label;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpression(statement.condition, Type.i32, ConversionKind.NONE, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n    // TODO: check if condition is always false and if so, omit it (just a block)\r\n\r\n    // Switch back to the parent flow\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.popBreakLabel();\r\n    this.currentFlow = outerFlow;\r\n    var terminated = innerFlow.isAny(FlowFlags.ANY_TERMINATING);\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    outerFlow.inherit(innerFlow);\r\n\r\n    var block: ExpressionRef[] = [\r\n      module.createLoop(continueLabel,\r\n        terminated\r\n          ? body // skip trailing continue if unnecessary\r\n          : module.createBlock(null, [\r\n              body,\r\n              module.createBreak(continueLabel, condExpr)\r\n            ], NativeType.None)\r\n      )\r\n    ];\r\n    if (terminated) block.push(module.createUnreachable());\r\n    return module.createBlock(breakLabel, block);\r\n  }\r\n\r\n  compileEmptyStatement(statement: EmptyStatement): ExpressionRef {\r\n    return this.module.createNop();\r\n  }\r\n\r\n  compileExpressionStatement(statement: ExpressionStatement): ExpressionRef {\r\n    var expr = this.compileExpression(statement.expression, Type.void, ConversionKind.NONE, WrapMode.NONE);\r\n    if (this.currentType != Type.void) {\r\n      expr = this.module.createDrop(expr);\r\n      this.currentType = Type.void;\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  compileForStatement(statement: ForStatement): ExpressionRef {\r\n    // A for statement initiates a new branch with its own scoped variables\r\n    // possibly declared in its initializer, and break context.\r\n    var outerFlow = this.currentFlow;\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n    var repeatLabel = \"repeat|\" + label;\r\n\r\n    // Compile in correct order\r\n    var module = this.module;\r\n    var initExpr = statement.initializer\r\n      ? this.compileStatement(<Statement>statement.initializer)\r\n      : 0;\r\n    var condExpr: ExpressionRef = 0;\r\n    var alwaysTrue = false;\r\n    if (statement.condition) {\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n      // check if the condition is always true\r\n      let condPre = module.precomputeExpression(condExpr);\r\n      if (getExpressionId(condPre) == ExpressionId.Const) {\r\n        assert(getExpressionType(condPre) == NativeType.I32);\r\n        if (getConstValueI32(condPre) != 0) alwaysTrue = true;\r\n        // TODO: could skip compilation if the condition is always false here, but beware that the\r\n        // initializer could still declare new 'var's that are used later on.\r\n      }\r\n      // recompile to original\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(<Expression>statement.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n    } else {\r\n      // omitted condition is always true\r\n      condExpr = module.createI32(1);\r\n      alwaysTrue = true;\r\n    }\r\n    var incrExpr = statement.incrementor\r\n      ? this.compileExpression(<Expression>statement.incrementor, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n      : 0;\r\n    var bodyStatement = statement.statement;\r\n    var bodyExpr = bodyStatement.kind == NodeKind.BLOCK && (<BlockStatement>bodyStatement).statements.length == 1\r\n      ? this.compileStatement((<BlockStatement>bodyStatement).statements[0])\r\n      : this.compileStatement(bodyStatement);\r\n\r\n    // Switch back to the parent flow\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.popBreakLabel();\r\n    this.currentFlow = outerFlow;\r\n    var usesContinue = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\r\n    else outerFlow.inheritConditional(innerFlow);\r\n\r\n    var breakBlock = new Array<ExpressionRef>(); // outer 'break' block\r\n    if (initExpr) breakBlock.push(initExpr);\r\n\r\n    var repeatBlock = new Array<ExpressionRef>(); // block repeating the loop\r\n    if (usesContinue) {\r\n      repeatBlock.push(\r\n        module.createBlock(continueLabel, [ // inner 'continue' block\r\n          module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr)),\r\n          bodyExpr\r\n        ], NativeType.None)\r\n      );\r\n    } else { // can omit the 'continue' block\r\n      repeatBlock.push(\r\n        module.createBreak(breakLabel, module.createUnary(UnaryOp.EqzI32, condExpr))\r\n      );\r\n      repeatBlock.push(bodyExpr);\r\n    }\r\n    if (incrExpr) repeatBlock.push(incrExpr);\r\n    repeatBlock.push(\r\n      module.createBreak(repeatLabel)\r\n    );\r\n\r\n    breakBlock.push(\r\n      module.createLoop(repeatLabel, module.createBlock(null, repeatBlock, NativeType.None))\r\n    );\r\n\r\n    return module.createBlock(breakLabel, breakBlock);\r\n  }\r\n\r\n  compileIfStatement(statement: IfStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var ifTrue = statement.ifTrue;\r\n    var ifFalse = statement.ifFalse;\r\n    var outerFlow = this.currentFlow;\r\n    var actualFunction = outerFlow.actualFunction;\r\n\r\n    // The condition doesn't initiate a branch yet\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    // Try to eliminate unnecesssary branches if the condition is constant\r\n    var condExprPrecomp = module.precomputeExpression(condExpr);\r\n    if (\r\n      getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n      getExpressionType(condExprPrecomp) == NativeType.I32\r\n    ) {\r\n      return getConstValueI32(condExprPrecomp)\r\n        ? this.compileStatement(ifTrue)\r\n        : ifFalse\r\n          ? this.compileStatement(ifFalse)\r\n          : module.createNop();\r\n\r\n    // Otherwise recompile to the original and let the optimizer decide\r\n    } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n    }\r\n\r\n    // Each arm initiates a branch\r\n    var ifTrueFlow = outerFlow.fork();\r\n    this.currentFlow = ifTrueFlow;\r\n    var ifTrueExpr = this.compileStatement(ifTrue);\r\n    ifTrueFlow.freeScopedLocals();\r\n    this.currentFlow = outerFlow;\r\n\r\n    var ifFalseExpr: ExpressionRef = 0;\r\n    if (ifFalse) {\r\n      let ifFalseFlow = outerFlow.fork();\r\n      this.currentFlow = ifFalseFlow;\r\n      ifFalseExpr = this.compileStatement(ifFalse);\r\n      ifFalseFlow.freeScopedLocals();\r\n      this.currentFlow = outerFlow;\r\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\r\n    } else {\r\n      outerFlow.inheritConditional(ifTrueFlow);\r\n    }\r\n    return module.createIf(condExpr, ifTrueExpr, ifFalseExpr);\r\n  }\r\n\r\n  compileReturnStatement(statement: ReturnStatement, isLastStatementInBody: bool): ExpressionRef {\r\n    var module = this.module;\r\n    var expr: ExpressionRef = 0;\r\n    var flow = this.currentFlow;\r\n    var returnType = flow.returnType;\r\n\r\n    // Remember that this flow returns\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    if (statement.value) {\r\n      if (returnType == Type.void) {\r\n        this.compileExpressionRetainType(statement.value, returnType, WrapMode.NONE);\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n          statement.value.range, this.currentType.toString(), returnType.toString()\r\n        );\r\n        this.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      expr = this.compileExpression(\r\n        statement.value,\r\n        returnType,\r\n        ConversionKind.IMPLICIT,\r\n        flow.actualFunction.is(CommonFlags.MODULE_EXPORT)\r\n          ? WrapMode.WRAP\r\n          : WrapMode.NONE\r\n      );\r\n\r\n      // Remember whether returning a properly wrapped value\r\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\r\n\r\n    } else if (returnType != Type.void) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        statement.range, \"void\", returnType.toString()\r\n      );\r\n      expr = module.createUnreachable();\r\n    }\r\n\r\n    // If the last statement anyway, make it the block's return value\r\n    if (isLastStatementInBody) return expr ? expr : module.createNop();\r\n\r\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\r\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) return module.createBreak(assert(flow.inlineReturnLabel), 0, expr);\r\n\r\n    return module.createReturn(expr);\r\n  }\r\n\r\n  compileSwitchStatement(statement: SwitchStatement): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    var cases = statement.cases;\r\n    var numCases = cases.length;\r\n    if (!numCases) {\r\n      return this.compileExpression(statement.condition, Type.void, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    }\r\n\r\n    // Everything within a switch uses the same break context\r\n    var outerFlow = this.currentFlow;\r\n    var context = outerFlow.pushBreakLabel();\r\n\r\n    // introduce a local for evaluating the condition (exactly once)\r\n    var tempLocal = outerFlow.getTempLocal(Type.u32, false);\r\n    var tempLocalIndex = tempLocal.index;\r\n\r\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\r\n    var breaks = new Array<ExpressionRef>(1 + numCases);\r\n    breaks[0] = module.createSetLocal( // initializer\r\n      tempLocalIndex,\r\n      this.compileExpression(statement.condition, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n    );\r\n\r\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\r\n    var breakIndex = 1;\r\n    var defaultIndex = -1;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let label = case_.label;\r\n      if (label) {\r\n        breaks[breakIndex++] = module.createBreak(\"case\" + i.toString(10) + \"|\" + context,\r\n          module.createBinary(BinaryOp.EqI32,\r\n            module.createGetLocal(tempLocalIndex, NativeType.I32),\r\n            this.compileExpression(label, Type.u32, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          )\r\n        );\r\n      } else {\r\n        defaultIndex = i;\r\n      }\r\n    }\r\n\r\n    outerFlow.freeTempLocal(tempLocal);\r\n\r\n    // otherwise br to default respectively out of the switch if there is no default case\r\n    breaks[breakIndex] = module.createBreak((defaultIndex >= 0\r\n        ? \"case\" + defaultIndex.toString(10)\r\n        : \"break\"\r\n      ) + \"|\" + context);\r\n\r\n    // nest blocks in order\r\n    var currentBlock = module.createBlock(\"case0|\" + context, breaks, NativeType.None);\r\n    var alwaysReturns = true;\r\n    var alwaysReturnsWrapped = true;\r\n    var alwaysThrows = true;\r\n    var alwaysAllocates = true;\r\n    for (let i = 0; i < numCases; ++i) {\r\n      let case_ = cases[i];\r\n      let statements = case_.statements;\r\n      let numStatements = statements.length;\r\n\r\n      // Each switch case initiates a new branch\r\n      let innerFlow = outerFlow.fork();\r\n      this.currentFlow = innerFlow;\r\n      let breakLabel = \"break|\" + context;\r\n      innerFlow.breakLabel = breakLabel;\r\n\r\n      let isLast = i == numCases - 1;\r\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\r\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\r\n      stmts[0] = currentBlock;\r\n      let count = 1;\r\n      let terminated = false;\r\n      for (let j = 0; j < numStatements; ++j) {\r\n        let stmt = this.compileStatement(statements[j]);\r\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\r\n          stmts[count++] = stmt;\r\n          if (innerFlow.isAny(FlowFlags.ANY_TERMINATING)) {\r\n            terminated = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      stmts.length = count;\r\n      if (terminated || isLast) {\r\n        if (!innerFlow.is(FlowFlags.RETURNS)) alwaysReturns = false;\r\n        if (!innerFlow.is(FlowFlags.RETURNS_WRAPPED)) alwaysReturnsWrapped = false;\r\n        if (!innerFlow.is(FlowFlags.THROWS)) alwaysThrows = false;\r\n        if (!innerFlow.is(FlowFlags.ALLOCATES)) alwaysAllocates = false;\r\n      }\r\n\r\n      // Switch back to the parent flow\r\n      innerFlow.unset(\r\n        FlowFlags.BREAKS |\r\n        FlowFlags.CONDITIONALLY_BREAKS\r\n      );\r\n      innerFlow.freeScopedLocals();\r\n      this.currentFlow = outerFlow;\r\n      currentBlock = module.createBlock(nextLabel, stmts, NativeType.None); // must be a labeled block\r\n    }\r\n    outerFlow.popBreakLabel();\r\n\r\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\r\n    if (defaultIndex >= 0) {\r\n      if (alwaysReturns) outerFlow.set(FlowFlags.RETURNS);\r\n      if (alwaysReturnsWrapped) outerFlow.set(FlowFlags.RETURNS_WRAPPED);\r\n      if (alwaysThrows) outerFlow.set(FlowFlags.THROWS);\r\n      if (alwaysAllocates) outerFlow.set(FlowFlags.ALLOCATES);\r\n    }\r\n    return currentBlock;\r\n  }\r\n\r\n  compileThrowStatement(statement: ThrowStatement): ExpressionRef {\r\n    var flow = this.currentFlow;\r\n\r\n    // Remember that this branch throws\r\n    flow.set(FlowFlags.THROWS);\r\n\r\n    // FIXME: without try-catch it is safe to assume RETURNS as well for now\r\n    flow.set(FlowFlags.RETURNS);\r\n\r\n    // TODO: requires exception-handling spec.\r\n    return compileAbort(this, null, statement);\r\n  }\r\n\r\n  compileTryStatement(statement: TryStatement): ExpressionRef {\r\n    // TODO: can't yet support something like: try { return ... } finally { ... }\r\n    // worthwhile to investigate lowering returns to block results (here)?\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      statement.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\r\n  compileVariableStatement(statement: VariableStatement): ExpressionRef {\r\n    var declarations = statement.declarations;\r\n    var numDeclarations = declarations.length;\r\n    var flow = this.currentFlow;\r\n    var initializers = new Array<ExpressionRef>();\r\n    var resolver = this.resolver;\r\n    for (let i = 0; i < numDeclarations; ++i) {\r\n      let declaration = declarations[i];\r\n      let name = declaration.name.text;\r\n      let type: Type | null = null;\r\n      let initExpr: ExpressionRef = 0;\r\n      if (declaration.type) {\r\n        type = resolver.resolveType( // reports\r\n          declaration.type,\r\n          flow.actualFunction,\r\n          flow.contextualTypeArguments\r\n        );\r\n        if (!type) continue;\r\n        if (declaration.initializer) {\r\n          initExpr = this.compileExpression( // reports\r\n            declaration.initializer,\r\n            type,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n        }\r\n      } else if (declaration.initializer) { // infer type using void/NONE for proper literal inference\r\n        initExpr = this.compileExpressionRetainType( // reports\r\n          declaration.initializer,\r\n          Type.void,\r\n          WrapMode.NONE\r\n        );\r\n        if (this.currentType == Type.void) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            declaration.range, this.currentType.toString(), \"<auto>\"\r\n          );\r\n          continue;\r\n        }\r\n        type = this.currentType;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          declaration.name.range.atEnd\r\n        );\r\n        continue;\r\n      }\r\n      let isInlined = false;\r\n      if (declaration.is(CommonFlags.CONST)) {\r\n        if (initExpr) {\r\n          initExpr = this.module.precomputeExpression(initExpr);\r\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\r\n            let local = new Local(name, -1, type, flow.parentFunction);\r\n            switch (getExpressionType(initExpr)) {\r\n              case NativeType.I32: {\r\n                local.setConstantIntegerValue(\r\n                  i64_new(\r\n                    getConstValueI32(initExpr),\r\n                    0\r\n                  ),\r\n                  type\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.I64: {\r\n                local.setConstantIntegerValue(\r\n                  i64_new(\r\n                    getConstValueI64Low(initExpr),\r\n                    getConstValueI64High(initExpr)\r\n                  ),\r\n                  type\r\n                );\r\n                break;\r\n              }\r\n              case NativeType.F32: {\r\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\r\n                break;\r\n              }\r\n              case NativeType.F64: {\r\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\r\n                break;\r\n              }\r\n              default: {\r\n                assert(false);\r\n                return this.module.createUnreachable();\r\n              }\r\n            }\r\n            // Create a virtual local that doesn't actually exist in WebAssembly\r\n            let scopedLocals = flow.scopedLocals;\r\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\r\n            else if (scopedLocals.has(name)) {\r\n              this.error(\r\n                DiagnosticCode.Duplicate_identifier_0,\r\n                declaration.name.range, name\r\n              );\r\n              return this.module.createUnreachable();\r\n            }\r\n            scopedLocals.set(name, local);\r\n            isInlined = true;\r\n          } else {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              declaration.range\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            declaration.range\r\n          );\r\n        }\r\n      }\r\n      if (!isInlined) {\r\n        let local: Local;\r\n        if (\r\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\r\n          flow.is(FlowFlags.INLINE_CONTEXT)\r\n        ) { // here: not top-level\r\n          local = flow.addScopedLocal(name, type, false, declaration.name); // reports if duplicate\r\n        } else {\r\n          if (flow.lookupLocal(name)) {\r\n            this.error(\r\n              DiagnosticCode.Duplicate_identifier_0,\r\n              declaration.name.range, name\r\n            );\r\n            continue;\r\n          }\r\n          local = flow.parentFunction.addLocal(type, name, declaration);\r\n        }\r\n        if (initExpr) {\r\n          initializers.push(\r\n            this.compileAssignmentWithValue(declaration.name, initExpr)\r\n          );\r\n          if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n            flow.setLocalWrapped(local.index, !flow.canOverflow(initExpr, type));\r\n          }\r\n        } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n          flow.setLocalWrapped(local.index, true); // zero\r\n        }\r\n      }\r\n    }\r\n    return initializers.length   // we can unwrap these here because the\r\n      ? initializers.length == 1 // source didn't tell us exactly what to do\r\n        ? initializers[0]\r\n        : this.module.createBlock(null, initializers, NativeType.None)\r\n      : 0;\r\n  }\r\n\r\n  compileVoidStatement(statement: VoidStatement): ExpressionRef {\r\n    return this.compileExpression(statement.expression, Type.void, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n  }\r\n\r\n  compileWhileStatement(statement: WhileStatement): ExpressionRef {\r\n    var module = this.module;\r\n    var outerFlow = this.currentFlow;\r\n\r\n    // The condition does not yet initialize a branch\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    // Try to eliminate unnecesssary loops if the condition is constant\r\n    var condExprPrecomp = module.precomputeExpression(condExpr);\r\n    if (\r\n      getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n      getExpressionType(condExprPrecomp) == NativeType.I32\r\n    ) {\r\n      if (!getConstValueI32(condExprPrecomp)) return module.createNop();\r\n\r\n    // Otherwise recompile to the original and let the optimizer decide\r\n    } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(statement.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n    }\r\n\r\n    // Statements initiate a new branch with its own break context\r\n    var label = outerFlow.pushBreakLabel();\r\n    var innerFlow = outerFlow.fork();\r\n    this.currentFlow = innerFlow;\r\n    var breakLabel = \"break|\" + label;\r\n    innerFlow.breakLabel = breakLabel;\r\n    var continueLabel = \"continue|\" + label;\r\n    innerFlow.continueLabel = continueLabel;\r\n\r\n    var body = this.compileStatement(statement.statement);\r\n    var alwaysTrue = false; // TODO\r\n    var terminated = innerFlow.isAny(FlowFlags.ANY_TERMINATING);\r\n\r\n    // Switch back to the parent flow\r\n    innerFlow.freeScopedLocals();\r\n    outerFlow.popBreakLabel();\r\n    this.currentFlow = outerFlow;\r\n    innerFlow.unset(\r\n      FlowFlags.BREAKS |\r\n      FlowFlags.CONDITIONALLY_BREAKS |\r\n      FlowFlags.CONTINUES |\r\n      FlowFlags.CONDITIONALLY_CONTINUES\r\n    );\r\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\r\n    else outerFlow.inheritConditional(innerFlow);\r\n\r\n    return module.createBlock(breakLabel, [\r\n      module.createLoop(continueLabel,\r\n        module.createIf(condExpr,\r\n          terminated\r\n            ? body // skip trailing continue if unnecessary\r\n            : module.createBlock(null, [\r\n                body,\r\n                module.createBreak(continueLabel)\r\n              ], NativeType.None)\r\n        )\r\n      )\r\n    ]);\r\n  }\r\n\r\n  // expressions\r\n\r\n  /**\r\n   * Compiles the value of an inlined constant element.\r\n   * @param retainType If true, the annotated type of the constant is retained. Otherwise, the value\r\n   *  is precomputed according to context.\r\n   */\r\n  compileInlineConstant(\r\n    element: VariableLikeElement,\r\n    contextualType: Type,\r\n    retainType: bool\r\n  ): ExpressionRef {\r\n    assert(element.is(CommonFlags.INLINED));\r\n    var type = element.type;\r\n    switch (\r\n      !retainType &&\r\n      type.is(TypeFlags.INTEGER) &&\r\n      contextualType.is(TypeFlags.INTEGER) &&\r\n      type.size < contextualType.size\r\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\r\n        : (this.currentType = type).kind\r\n    ) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16: {\r\n        let shift = type.computeSmallIntegerShift(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) << shift >> shift\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue) & mask\r\n            : 0\r\n        ); // recognized by canOverflow\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return this.module.createI32(\r\n          element.constantValueKind == ConstantValueKind.INTEGER\r\n            ? i64_low(element.constantIntegerValue)\r\n            : 0\r\n        );\r\n      }\r\n      case TypeKind.ISIZE:\r\n      case TypeKind.USIZE: {\r\n        if (!element.program.options.isWasm64) {\r\n          return this.module.createI32(\r\n            element.constantValueKind == ConstantValueKind.INTEGER\r\n              ? i64_low(element.constantIntegerValue)\r\n              : 0\r\n          );\r\n        }\r\n        // fall-through\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return element.constantValueKind == ConstantValueKind.INTEGER\r\n          ? this.module.createI64(\r\n              i64_low(element.constantIntegerValue),\r\n              i64_high(element.constantIntegerValue)\r\n            )\r\n          : this.module.createI64(0);\r\n      }\r\n      case TypeKind.F64: {\r\n        // monkey-patch for converting built-in floats to f32 implicitly\r\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\r\n          return this.module.createF64((<VariableLikeElement>element).constantFloatValue);\r\n        }\r\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\r\n        this.currentType = Type.f32;\r\n      }\r\n      case TypeKind.F32: {\r\n        return this.module.createF32((<VariableLikeElement>element).constantFloatValue);\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n  }\r\n\r\n  compileExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    this.currentType = contextualType;\r\n    var expr: ExpressionRef;\r\n    switch (expression.kind) {\r\n      case NodeKind.ASSERTION: {\r\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.BINARY: {\r\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.CALL: {\r\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.COMMA: {\r\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.ELEMENTACCESS: {\r\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.FUNCTION: {\r\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference);\r\n        break;\r\n      }\r\n      case NodeKind.IDENTIFIER:\r\n      case NodeKind.FALSE:\r\n      case NodeKind.NULL:\r\n      case NodeKind.THIS:\r\n      case NodeKind.SUPER:\r\n      case NodeKind.TRUE: {\r\n        expr = this.compileIdentifierExpression(\r\n          <IdentifierExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.INSTANCEOF: {\r\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.LITERAL: {\r\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.NEW: {\r\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PARENTHESIZED: {\r\n        expr = this.compileParenthesizedExpression(<ParenthesizedExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.PROPERTYACCESS: {\r\n        expr = this.compilePropertyAccessExpression(\r\n          <PropertyAccessExpression>expression,\r\n          contextualType,\r\n          conversionKind == ConversionKind.NONE // retain type of inlined constants\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.TERNARY: {\r\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPOSTFIX: {\r\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      case NodeKind.UNARYPREFIX: {\r\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType);\r\n        break;\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        expr = this.module.createUnreachable();\r\n      }\r\n    }\r\n    var currentType = this.currentType;\r\n    if (conversionKind != ConversionKind.NONE && currentType != contextualType) {\r\n      expr = this.convertExpression(expr, currentType, contextualType, conversionKind, wrapMode, expression);\r\n      this.currentType = contextualType;\r\n    } else if (wrapMode == WrapMode.WRAP) {\r\n      expr = this.ensureSmallIntegerWrap(expr, currentType);\r\n    }\r\n\r\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n    return expr;\r\n  }\r\n\r\n  compileExpressionRetainType(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    return this.compileExpression(\r\n      expression,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      wrapMode\r\n    );\r\n  }\r\n\r\n  precomputeExpression(\r\n    expression: Expression,\r\n    contextualType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode\r\n  ): ExpressionRef {\r\n    return this.module.precomputeExpression(\r\n      this.compileExpression(expression, contextualType, conversionKind, wrapMode)\r\n    );\r\n  }\r\n\r\n  convertExpression(\r\n    expr: ExpressionRef,\r\n    fromType: Type,\r\n    toType: Type,\r\n    conversionKind: ConversionKind,\r\n    wrapMode: WrapMode,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    assert(conversionKind != ConversionKind.NONE);\r\n    var module = this.module;\r\n\r\n    // void to any\r\n    if (fromType.kind == TypeKind.VOID) {\r\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        reportNode.range, fromType.toString(), toType.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // any to void\r\n    if (toType.kind == TypeKind.VOID) return module.createDrop(expr);\r\n\r\n    if (!fromType.isAssignableTo(toType)) {\r\n      if (conversionKind == ConversionKind.IMPLICIT) {\r\n        this.error(\r\n          DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\r\n          reportNode.range, fromType.toString(), toType.toString()\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (fromType.is(TypeFlags.FLOAT)) {\r\n\r\n      // float to float\r\n      if (toType.is(TypeFlags.FLOAT)) {\r\n        if (fromType.kind == TypeKind.F32) {\r\n\r\n          // f32 to f64\r\n          if (toType.kind == TypeKind.F64) {\r\n            expr = module.createUnary(UnaryOp.PromoteF32, expr);\r\n          }\r\n\r\n          // otherwise f32 to f32\r\n\r\n        // f64 to f32\r\n        } else if (toType.kind == TypeKind.F32) {\r\n          expr = module.createUnary(UnaryOp.DemoteF64, expr);\r\n        }\r\n\r\n        // otherwise f64 to f64\r\n\r\n      // float to int\r\n      } else if (toType.is(TypeFlags.INTEGER)) {\r\n\r\n        // f32 to int\r\n        if (fromType.kind == TypeKind.F32) {\r\n          if (toType == Type.bool) {\r\n            expr = module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\r\n            wrapMode = WrapMode.NONE;\r\n          } else if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF32ToU32, expr);\r\n            }\r\n          }\r\n\r\n        // f64 to int\r\n        } else {\r\n          if (toType == Type.bool) {\r\n            expr = module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\r\n            wrapMode = WrapMode.NONE;\r\n          } else if (toType.is(TypeFlags.SIGNED)) {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToI32, expr);\r\n            }\r\n          } else {\r\n            if (toType.is(TypeFlags.LONG)) {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU64, expr);\r\n            } else {\r\n              expr = module.createUnary(UnaryOp.TruncF64ToU32, expr);\r\n            }\r\n          }\r\n        }\r\n\r\n      // float to void\r\n      } else {\r\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\r\n        expr = module.createDrop(expr);\r\n      }\r\n\r\n    // int to float\r\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\r\n\r\n      // int to f32\r\n      if (toType.kind == TypeKind.F32) {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF32\r\n              : UnaryOp.ConvertU64ToF32,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF32\r\n              : UnaryOp.ConvertU32ToF32,\r\n            expr\r\n          );\r\n        }\r\n\r\n      // int to f64\r\n      } else {\r\n        if (fromType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI64ToF64\r\n              : UnaryOp.ConvertU64ToF64,\r\n            expr\r\n          );\r\n        } else {\r\n          expr = module.createUnary(\r\n            fromType.is(TypeFlags.SIGNED)\r\n              ? UnaryOp.ConvertI32ToF64\r\n              : UnaryOp.ConvertU32ToF64,\r\n            expr\r\n          );\r\n        }\r\n      }\r\n\r\n    // int to int\r\n    } else {\r\n      // i64 to ...\r\n      if (fromType.is(TypeFlags.LONG)) {\r\n\r\n        // i64 to i32 or smaller\r\n        if (toType == Type.bool) {\r\n          expr = module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\r\n          wrapMode = WrapMode.NONE;\r\n        } else if (!toType.is(TypeFlags.LONG)) {\r\n          expr = module.createUnary(UnaryOp.WrapI64, expr); // discards upper bits\r\n        }\r\n\r\n      // i32 or smaller to i64\r\n      } else if (toType.is(TypeFlags.LONG)) {\r\n        expr = module.createUnary(\r\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\r\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\r\n        );\r\n        wrapMode = WrapMode.NONE;\r\n\r\n      // i32 to i32\r\n      } else {\r\n        // small i32 to ...\r\n        if (fromType.is(TypeFlags.SHORT)) {\r\n          // small i32 to larger i32\r\n          if (fromType.size < toType.size) {\r\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\r\n            wrapMode = WrapMode.NONE;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.currentType = toType;\r\n    return wrapMode == WrapMode.WRAP\r\n      ? this.ensureSmallIntegerWrap(expr, toType)\r\n      : expr;\r\n  }\r\n\r\n  compileAssertionExpression(expression: AssertionExpression, contextualType: Type): ExpressionRef {\r\n    switch (expression.assertionKind) {\r\n      case AssertionKind.PREFIX:\r\n      case AssertionKind.AS: {\r\n        let toType = this.resolver.resolveType( // reports\r\n          assert(expression.toType),\r\n          this.currentFlow.actualFunction,\r\n          this.currentFlow.contextualTypeArguments\r\n        );\r\n        if (!toType) return this.module.createUnreachable();\r\n        return this.compileExpression(expression.expression, toType, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n      }\r\n      case AssertionKind.NONNULL: {\r\n        assert(!expression.toType);\r\n        let expr = this.compileExpressionRetainType(expression.expression, contextualType, WrapMode.NONE);\r\n        this.currentType = this.currentType.nonNullableType;\r\n        return expr;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  private f32ModInstance: Function | null = null;\r\n  private f64ModInstance: Function | null = null;\r\n  private f32PowInstance: Function | null = null;\r\n  private f64PowInstance: Function | null = null;\r\n\r\n  compileBinaryExpression(\r\n    expression: BinaryExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var left = expression.left;\r\n    var right = expression.right;\r\n\r\n    var leftExpr: ExpressionRef;\r\n    var leftType: Type;\r\n    var rightExpr: ExpressionRef;\r\n    var rightType: Type;\r\n    var commonType: Type | null;\r\n\r\n    var expr: ExpressionRef;\r\n    var compound = false;\r\n\r\n    var operator = expression.operator;\r\n    switch (operator) {\r\n      case Token.LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtI64\r\n                : BinaryOp.LtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LtU64\r\n                : BinaryOp.LtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GT);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GtI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtI64\r\n                : BinaryOp.GtI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GtI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GtU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GtU64\r\n                : BinaryOp.GtU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GtU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GtF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GtF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.LE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.LeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeI64\r\n                : BinaryOp.LeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.LeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.LeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.LeU64\r\n                : BinaryOp.LeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.LeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.LeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.LeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.GE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, \">=\", leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.GeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeI64\r\n                : BinaryOp.GeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.GeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.GeU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.GeU64\r\n                : BinaryOp.GeU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.GeU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.GeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.GeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n\r\n      case Token.EQUALS_EQUALS_EQUALS:\r\n      case Token.EQUALS_EQUALS: {\r\n\r\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\r\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\r\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\r\n\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '==' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.EqI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.EqI64\r\n                : BinaryOp.EqI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.EqI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.EqF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.EqF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.V128: {\r\n            expr = module.createUnary(UnaryOp.AllTrueVecI8x16,\r\n              module.createBinary(BinaryOp.EqVecI8x16, leftExpr, rightExpr)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION_EQUALS_EQUALS:\r\n      case Token.EXCLAMATION_EQUALS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n         // check operator overload\r\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NE);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          // still allow '!=' with references\r\n        }\r\n\r\n        rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            leftType,\r\n            leftType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            left\r\n          );\r\n          rightExpr = this.convertExpression(\r\n            rightExpr,\r\n            rightType,\r\n            rightType = commonType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP,\r\n            right\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\r\n          );\r\n          this.currentType = contextualType;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (commonType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.NeI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.NeI64\r\n                : BinaryOp.NeI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.NeI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.NeF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.NeF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.V128: {\r\n            expr = module.createUnary(UnaryOp.AnyTrueVecI8x16,\r\n              module.createBinary(BinaryOp.NeVecI8x16, leftExpr, rightExpr)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.EQUALS: {\r\n        return this.compileAssignment(left, right, contextualType);\r\n      }\r\n      case Token.PLUS_EQUALS: compound = true;\r\n      case Token.PLUS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"+\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // addition might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AddI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_EQUALS: compound = true;\r\n      case Token.MINUS: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"-\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:   // subtraction might overflow\r\n          case TypeKind.I16:  // ^\r\n          case TypeKind.U8:   // ^\r\n          case TypeKind.U16:  // ^\r\n          case TypeKind.BOOL: // ^\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.SubI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"*\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.MulI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.MulI64\r\n                : BinaryOp.MulI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.MulI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.MulF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.MulF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\r\n      case Token.ASTERISK_ASTERISK: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.POW);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        let instance: Function | null;\r\n\r\n        // Mathf.pow if lhs is f32 (result is f32)\r\n        if (this.currentType.kind == TypeKind.F32) {\r\n          rightExpr = this.compileExpression(right, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f32PowInstance)) {\r\n            let namespace = this.program.lookupGlobal(LibrarySymbols.Mathf);\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(LibrarySymbols.pow) : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Mathf.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n          }\r\n\r\n        // Math.pow otherwise (result is f64)\r\n        // TODO: should the result be converted back?\r\n        } else {\r\n          leftExpr = this.convertExpression(\r\n            leftExpr,\r\n            this.currentType,\r\n            Type.f64,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE,\r\n            left\r\n          );\r\n          leftType = this.currentType;\r\n          rightExpr = this.compileExpression(\r\n            right,\r\n            Type.f64,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          rightType = this.currentType;\r\n          if (!(instance = this.f64PowInstance)) {\r\n            let namespace = this.program.lookupGlobal(LibrarySymbols.Math);\r\n            if (!namespace) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            let prototype = namespace.members ? namespace.members.get(LibrarySymbols.pow) : null;\r\n            if (!prototype) {\r\n              this.error(\r\n                DiagnosticCode.Cannot_find_name_0,\r\n                expression.range, \"Math.pow\"\r\n              );\r\n              expr = module.createUnreachable();\r\n              break;\r\n            }\r\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n          }\r\n        }\r\n        if (!(instance && this.compileFunction(instance))) {\r\n          expr = module.createUnreachable();\r\n        } else {\r\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n        }\r\n        break;\r\n      }\r\n      case Token.SLASH_EQUALS: compound = true;\r\n      case Token.SLASH: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"/\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\r\n          case TypeKind.I16: // ^\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.DivI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivI64\r\n                : BinaryOp.DivI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.DivI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.DivU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.DivU64\r\n                : BinaryOp.DivU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.DivU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.DivF32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.DivF64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PERCENT_EQUALS: compound = true;\r\n      case Token.PERCENT: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.REM);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.WRAP, // !\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"%\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.RemI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemI64\r\n                : BinaryOp.RemI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.RemI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.RemU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.RemU64\r\n                : BinaryOp.RemU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.RemU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let instance = this.f32ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.lookupGlobal(LibrarySymbols.Mathf);\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(LibrarySymbols.mod) : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Mathf.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let instance = this.f64ModInstance;\r\n            if (!instance) {\r\n              let namespace = this.program.lookupGlobal(LibrarySymbols.Math);\r\n              if (!namespace) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              let prototype = namespace.members ? namespace.members.get(LibrarySymbols.mod) : null;\r\n              if (!prototype) {\r\n                this.error(\r\n                  DiagnosticCode.Cannot_find_name_0,\r\n                  expression.range, \"Math.mod\"\r\n                );\r\n                expr = module.createUnreachable();\r\n                break;\r\n              }\r\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\r\n            }\r\n            if (!(instance && this.compileFunction(instance))) {\r\n              expr = module.createUnreachable();\r\n            } else {\r\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ]);\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\r\n      case Token.LESSTHAN_LESSTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShlI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShlI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShlI64\r\n                : BinaryOp.ShlI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16: {\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32: {\r\n            expr = module.createBinary(BinaryOp.ShrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64: {\r\n            expr = module.createBinary(BinaryOp.ShrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrI64\r\n                : BinaryOp.ShrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\r\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n          }\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.ShrU32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.ShrU64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.ShrU64\r\n                : BinaryOp.ShrU32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.AMPERSAND_EQUALS: compound = true;\r\n      case Token.AMPERSAND: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overloadd\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"&\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.AndI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AndI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AndI64\r\n                : BinaryOp.AndI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_EQUALS: compound = true;\r\n      case Token.BAR: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"|\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.OrI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.OrI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.OrI64\r\n                : BinaryOp.OrI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.CARET_EQUALS: compound = true;\r\n      case Token.CARET: {\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType.intType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = leftType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\r\n            if (overload) {\r\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n\r\n        if (compound) {\r\n          rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n        } else {\r\n          rightExpr = this.compileExpressionRetainType(right, leftType, WrapMode.NONE);\r\n          rightType = this.currentType;\r\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\r\n            leftExpr = this.convertExpression(\r\n              leftExpr,\r\n              leftType,\r\n              leftType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              left\r\n            );\r\n            rightExpr = this.convertExpression(\r\n              rightExpr,\r\n              rightType,\r\n              rightType = commonType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE,\r\n              right\r\n            );\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\r\n              expression.range, \"^\", leftType.toString(), rightType.toString()\r\n            );\r\n            this.currentType = contextualType;\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I32:\r\n          case TypeKind.U32: {\r\n            expr = module.createBinary(BinaryOp.XorI32, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, leftExpr, rightExpr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              leftExpr,\r\n              rightExpr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32:\r\n          case TypeKind.F64: {\r\n            this.error(\r\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\r\n              expression.range, operatorTokenToString(expression.operator), this.currentType.toString()\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      // logical (no overloading)\r\n\r\n      case Token.AMPERSAND_AMPERSAND: { // left && right\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n\r\n        // simplify if cloning left without side effects is possible\r\n        if (expr = module.cloneExpression(leftExpr, true, 0)) {\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(leftExpr, this.currentType),\r\n            rightExpr,\r\n            expr\r\n          );\r\n\r\n        // if not possible, tee left to a temp. local\r\n        } else {\r\n          let flow = this.currentFlow;\r\n          let tempLocal = flow.getAndFreeTempLocal(\r\n            this.currentType,\r\n            !flow.canOverflow(leftExpr, this.currentType)\r\n          );\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(\r\n              module.createTeeLocal(tempLocal.index, leftExpr),\r\n              this.currentType\r\n            ),\r\n            rightExpr,\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            )\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case Token.BAR_BAR: { // left || right\r\n        leftExpr = this.compileExpressionRetainType(left, contextualType, WrapMode.NONE);\r\n        leftType = this.currentType;\r\n        rightExpr = this.compileExpression(right, leftType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n        rightType = this.currentType;\r\n\r\n        // simplify if cloning left without side effects is possible\r\n        if (expr = this.module.cloneExpression(leftExpr, true, 0)) {\r\n          expr = this.module.createIf(\r\n            this.makeIsTrueish(leftExpr, this.currentType),\r\n            expr,\r\n            rightExpr\r\n          );\r\n\r\n        // if not possible, tee left to a temp. local\r\n        } else {\r\n          let flow = this.currentFlow;\r\n          let tempLocal = flow.getAndFreeTempLocal(\r\n            this.currentType,\r\n            !flow.canOverflow(leftExpr, this.currentType)\r\n          );\r\n          expr = module.createIf(\r\n            this.makeIsTrueish(\r\n              module.createTeeLocal(tempLocal.index, leftExpr),\r\n              this.currentType\r\n            ),\r\n            module.createGetLocal(\r\n              assert(tempLocal).index, // to be sure\r\n              this.currentType.toNativeType()\r\n            ),\r\n            rightExpr\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        expr = this.module.createUnreachable();\r\n      }\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(left, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  compileUnaryOverload(\r\n    operatorInstance: Function,\r\n    value: Expression,\r\n    valueExpr: ExpressionRef,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var argumentExpressions: Expression[];\r\n    var thisArg: ExpressionRef = 0;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      thisArg = valueExpr;  // can reuse the previously evaluated expr as the this value here\r\n      argumentExpressions = [];\r\n    } else {\r\n      argumentExpressions = [ value ]; // annotated type might differ -> recompile\r\n    }\r\n    return this.compileCallDirect(\r\n      operatorInstance,\r\n      argumentExpressions,\r\n      reportNode,\r\n      thisArg\r\n    );\r\n  }\r\n\r\n  compileBinaryOverload(\r\n    operatorInstance: Function,\r\n    left: Expression,\r\n    leftExpr: ExpressionRef,\r\n    right: Expression,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var argumentExpressions: Expression[];\r\n    var thisArg: ExpressionRef = 0;\r\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\r\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      thisArg = leftExpr; // can reuse the previously evaluated leftExpr as the this value here\r\n      argumentExpressions = [ right ];\r\n    } else {\r\n      argumentExpressions = [ left, right ]; // annotated type of LHS might differ -> recompile\r\n    }\r\n    var ret = this.compileCallDirect(\r\n      operatorInstance,\r\n      argumentExpressions,\r\n      reportNode,\r\n      thisArg\r\n    );\r\n    return ret;\r\n  }\r\n\r\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\r\n    var program = this.program;\r\n    var resolver = program.resolver;\r\n    var flow = this.currentFlow;\r\n    var target = resolver.resolveExpression(expression, flow); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n\r\n    // to compile just the value, we need to know the target's type\r\n    var targetType: Type;\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field compiled as a global\r\n          return this.module.createUnreachable();\r\n        }\r\n        assert((<Global>target).type != Type.void); // compileGlobal must guarantee this\r\n        // fall-through\r\n      }\r\n      case ElementKind.LOCAL:\r\n      case ElementKind.FIELD: {\r\n        targetType = (<VariableLikeElement>target).type;\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\r\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\r\n        if (!setterPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Property>target).internalName\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\r\n        if (!setterInstance) return this.module.createUnreachable();\r\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n        targetType = setterInstance.signature.parameterTypes[0];\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let setterInstance = (<Property>target).setterInstance;\r\n        if (!setterInstance) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Property>target).internalName\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\r\n        targetType = setterInstance.signature.parameterTypes[0];\r\n        break;\r\n      }\r\n      case ElementKind.CLASS: {\r\n        if (resolver.currentElementExpression) { // indexed access\r\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n            if (!indexedGet) {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n                expression.range, (<Class>target).internalName\r\n              );\r\n            }\r\n            return this.module.createUnreachable();\r\n          }\r\n          assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\r\n          targetType = indexedSet.signature.parameterTypes[1];    // 2nd parameter is the element\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // compile the value and do the assignment\r\n    assert(targetType != Type.void);\r\n    var valueExpr = this.compileExpression(valueExpression, targetType, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    return this.compileAssignmentWithValue(\r\n      expression,\r\n      valueExpr,\r\n      contextualType != Type.void\r\n    );\r\n  }\r\n\r\n  compileAssignmentWithValue(\r\n    expression: Expression,\r\n    valueWithCorrectType: ExpressionRef,\r\n    tee: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var target = this.resolver.resolveExpression(expression, flow); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        let type = (<Local>target).type;\r\n        assert(type != Type.void);\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>target).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n          flow.setLocalWrapped((<Local>target).index, !flow.canOverflow(valueWithCorrectType, type));\r\n        }\r\n        return tee\r\n          ? module.createTeeLocal((<Local>target).index, valueWithCorrectType)\r\n          : module.createSetLocal((<Local>target).index, valueWithCorrectType);\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) return module.createUnreachable();\r\n        let type = (<Global>target).type;\r\n        assert(type != Type.void);\r\n        this.currentType = tee ? type : Type.void;\r\n        if ((<Local>target).is(CommonFlags.CONST)) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range,\r\n            target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type); // guaranteed\r\n        if (tee) {\r\n          let nativeType = type.toNativeType();\r\n          let internalName = target.internalName;\r\n          return module.createBlock(null, [ // emulated teeGlobal\r\n            module.createSetGlobal(internalName, valueWithCorrectType),\r\n            module.createGetGlobal(internalName, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          return module.createSetGlobal(target.internalName, valueWithCorrectType);\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let initializerNode = (<Field>target).initializerNode;\r\n        if (\r\n          (<Field>target).is(CommonFlags.READONLY) &&\r\n          !(\r\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\r\n            initializerNode\r\n          )\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, (<Field>target).internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let thisExpression = assert(this.resolver.currentThisExpression);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        let type = (<Field>target).type;\r\n        this.currentType = tee ? type : Type.void;\r\n        let nativeType = type.toNativeType();\r\n        if (type.kind == TypeKind.BOOL) {\r\n          // make sure bools are wrapped (usually are) when storing as 8 bits\r\n          valueWithCorrectType = this.ensureSmallIntegerWrap(valueWithCorrectType, type);\r\n        }\r\n        if (tee) {\r\n          let flow = this.currentFlow;\r\n          let tempLocal = flow.getAndFreeTempLocal(\r\n            type,\r\n            !flow.canOverflow(valueWithCorrectType, type)\r\n          );\r\n          let tempLocalIndex = tempLocal.index;\r\n          // TODO: simplify if valueWithCorrectType has no side effects\r\n          // TODO: call __gc_link here if a GC is present\r\n          return module.createBlock(null, [\r\n            module.createSetLocal(tempLocalIndex, valueWithCorrectType),\r\n            module.createStore(\r\n              type.byteSize,\r\n              thisExpr,\r\n              module.createGetLocal(tempLocalIndex, nativeType),\r\n              nativeType,\r\n              (<Field>target).memoryOffset\r\n            ),\r\n            module.createGetLocal(tempLocalIndex, nativeType)\r\n          ], nativeType);\r\n        } else {\r\n          // TODO: call __gc_link here if a GC is present\r\n          return module.createStore(\r\n            type.byteSize,\r\n            thisExpr,\r\n            valueWithCorrectType,\r\n            nativeType,\r\n            (<Field>target).memoryOffset\r\n          );\r\n        }\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\r\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\r\n        if (!setterPrototype) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\r\n        if (!setterInstance) return module.createUnreachable();\r\n        // call just the setter if the return value isn't of interest\r\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueWithCorrectType ]);\r\n        // otherwise call the setter first, then the getter\r\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\r\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\r\n        if (!getterInstance) return module.createUnreachable();\r\n        let returnType = getterInstance.signature.returnType;\r\n        let nativeReturnType = returnType.toNativeType();\r\n        return module.createBlock(null, [\r\n          this.makeCallDirect(setterInstance, [ valueWithCorrectType ]),\r\n          this.makeCallDirect(getterInstance) // sets currentType\r\n        ], nativeReturnType);\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let setterInstance = (<Property>target).setterInstance;\r\n        if (!setterInstance) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\r\n            expression.range, target.internalName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        // call just the setter if the return value isn't of interest\r\n        if (!tee) {\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            assert(this.resolver.currentThisExpression),\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueWithCorrectType ]);\r\n        }\r\n        // otherwise call the setter first, then the getter\r\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\r\n        let returnType = getterInstance.signature.returnType;\r\n        let nativeReturnType = returnType.toNativeType();\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          assert(this.resolver.currentThisExpression),\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        let tempLocal = flow.getAndFreeTempLocal(returnType, false);\r\n        let tempLocalIndex = tempLocal.index;\r\n        return module.createBlock(null, [\r\n          this.makeCallDirect(setterInstance, [ // set and remember the target\r\n            module.createTeeLocal(tempLocalIndex, thisExpr),\r\n            valueWithCorrectType\r\n          ]),\r\n          this.makeCallDirect(getterInstance, [ // get from remembered target\r\n            module.createGetLocal(tempLocalIndex, nativeReturnType)\r\n          ])\r\n        ], nativeReturnType);\r\n      }\r\n      case ElementKind.CLASS: {\r\n        let elementExpression = this.resolver.currentElementExpression;\r\n        if (elementExpression) {\r\n          let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n          let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n          if (!indexedGet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n              expression.range, target.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          let indexedSet = (<Class>target).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\r\n          if (!indexedSet) {\r\n            this.error(\r\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n              expression.range, target.internalName\r\n            );\r\n            this.currentType = tee ? indexedGet.signature.returnType : Type.void;\r\n            return module.createUnreachable();\r\n          }\r\n          let targetType = (<Class>target).type;\r\n          let thisExpression = assert(this.resolver.currentThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n          let elementExpr = this.compileExpression(\r\n            elementExpression,\r\n            Type.i32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          if (tee) {\r\n            let tempLocalTarget = flow.getTempLocal(targetType, false);\r\n            let tempLocalElement = flow.getAndFreeTempLocal(this.currentType, false);\r\n            let returnType = indexedGet.signature.returnType;\r\n            flow.freeTempLocal(tempLocalTarget);\r\n            return module.createBlock(null, [\r\n              this.makeCallDirect(indexedSet, [\r\n                module.createTeeLocal(tempLocalTarget.index, thisExpr),\r\n                module.createTeeLocal(tempLocalElement.index, elementExpr),\r\n                valueWithCorrectType\r\n              ]),\r\n              this.makeCallDirect(indexedGet, [\r\n                module.createGetLocal(tempLocalTarget.index, tempLocalTarget.type.toNativeType()),\r\n                module.createGetLocal(tempLocalElement.index, tempLocalElement.type.toNativeType())\r\n              ])\r\n            ], returnType.toNativeType());\r\n          } else {\r\n            return this.makeCallDirect(indexedSet, [\r\n              thisExpr,\r\n              elementExpr,\r\n              valueWithCorrectType\r\n            ]);\r\n          }\r\n        }\r\n        // fall-through\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  compileCallExpression(expression: CallExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // handle call to super\r\n    if (expression.expression.kind == NodeKind.SUPER) {\r\n      let flow = this.currentFlow;\r\n      let actualFunction = flow.actualFunction;\r\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n        this.error(\r\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n\r\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      let baseClassInstance = assert((<Class>classInstance).base);\r\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\r\n      let nativeSizeType = this.options.nativeSizeType;\r\n\r\n      // {\r\n      //   this = super(this || <ALLOC>, ...args)\r\n      //   this.a = X\r\n      //   this.b = Y\r\n      // }\r\n      let stmts: ExpressionRef[] = [\r\n        module.createSetLocal(thisLocal.index,\r\n          this.compileCallDirect(\r\n            this.ensureConstructor(baseClassInstance, expression),\r\n            expression.arguments,\r\n            expression,\r\n            module.createIf(\r\n              module.createGetLocal(thisLocal.index, nativeSizeType),\r\n              module.createGetLocal(thisLocal.index, nativeSizeType),\r\n              this.makeAllocation(<Class>classInstance)\r\n            )\r\n          )\r\n        )\r\n      ];\r\n      this.makeFieldInitialization(<Class>classInstance, stmts);\r\n\r\n      // check that super had been called before accessing allocating `this`\r\n      if (flow.isAny(\r\n        FlowFlags.ALLOCATES |\r\n        FlowFlags.CONDITIONALLY_ALLOCATES\r\n      )) {\r\n        this.error(\r\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\r\n      this.currentType = Type.void;\r\n      return module.createBlock(null, stmts);\r\n    }\r\n\r\n    // otherwise resolve normally\r\n    var target = this.resolver.resolveExpression(expression.expression, flow); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    var signature: Signature | null;\r\n    var indexArg: ExpressionRef;\r\n    switch (target.kind) {\r\n\r\n      // direct call: concrete function\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let prototype = <FunctionPrototype>target;\r\n        let typeArguments = expression.typeArguments;\r\n\r\n        // builtins handle present respectively omitted type arguments on their own\r\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\r\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\r\n        }\r\n\r\n        let instance: Function | null = null;\r\n\r\n        // resolve generic call if type arguments have been provided\r\n        if (typeArguments) {\r\n          if (!prototype.is(CommonFlags.GENERIC)) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_generic,\r\n              expression.expression.range, prototype.internalName\r\n            );\r\n            return module.createUnreachable();\r\n          }\r\n          instance = this.resolver.resolveFunctionInclTypeArguments(\r\n            prototype,\r\n            typeArguments,\r\n            flow.actualFunction.parent, // relative to caller\r\n            makeMap<string,Type>(flow.contextualTypeArguments),\r\n            expression\r\n          );\r\n\r\n        // infer generic call if type arguments have been omitted\r\n        } else if (prototype.is(CommonFlags.GENERIC)) {\r\n          let inferredTypes = new Map<string,Type | null>();\r\n          let typeParameterNodes = assert(prototype.typeParameterNodes);\r\n          let numTypeParameters = typeParameterNodes.length;\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            inferredTypes.set(typeParameterNodes[i].name.text, null);\r\n          }\r\n          // let numInferred = 0;\r\n          let parameterNodes = prototype.signatureNode.parameters;\r\n          let numParameters = parameterNodes.length;\r\n          let argumentNodes = expression.arguments;\r\n          let numArguments = argumentNodes.length;\r\n          let argumentExprs = new Array<ExpressionRef>(numArguments);\r\n          for (let i = 0; i < numParameters; ++i) {\r\n            let typeNode = parameterNodes[i].type;\r\n            let templateName = typeNode.kind == NodeKind.TYPE && !(<TypeNode>typeNode).name.next\r\n              ? (<TypeNode>typeNode).name.identifier.text\r\n              : null;\r\n            let argumentExpression = i < numArguments\r\n              ? argumentNodes[i]\r\n              : parameterNodes[i].initializer;\r\n            if (!argumentExpression) { // missing initializer -> too few arguments\r\n              this.error(\r\n                DiagnosticCode.Expected_0_arguments_but_got_1,\r\n                expression.range, numParameters.toString(10), numArguments.toString(10)\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n            if (templateName !== null && inferredTypes.has(templateName)) {\r\n              let inferredType = inferredTypes.get(templateName);\r\n              if (inferredType) {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, inferredType, WrapMode.NONE);\r\n                let commonType: Type | null;\r\n                if (!(commonType = Type.commonDenominator(inferredType, this.currentType, true))) {\r\n                  if (!(commonType = Type.commonDenominator(inferredType, this.currentType, false))) {\r\n                    this.error(\r\n                      DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n                      parameterNodes[i].type.range, this.currentType.toString(), inferredType.toString()\r\n                    );\r\n                    return module.createUnreachable();\r\n                  }\r\n                }\r\n                inferredType = commonType;\r\n              } else {\r\n                argumentExprs[i] = this.compileExpressionRetainType(argumentExpression, Type.i32, WrapMode.NONE);\r\n                inferredType = this.currentType;\r\n                // ++numInferred;\r\n              }\r\n              inferredTypes.set(templateName, inferredType);\r\n            } else {\r\n              let concreteType = this.resolver.resolveType(\r\n                parameterNodes[i].type,\r\n                flow.actualFunction,\r\n                flow.contextualTypeArguments\r\n              );\r\n              if (!concreteType) return module.createUnreachable();\r\n              argumentExprs[i] = this.compileExpression(\r\n                argumentExpression,\r\n                concreteType,\r\n                ConversionKind.IMPLICIT,\r\n                WrapMode.NONE\r\n              );\r\n            }\r\n          }\r\n          let resolvedTypeArguments = new Array<Type>(numTypeParameters);\r\n          for (let i = 0; i < numTypeParameters; ++i) {\r\n            let inferredType = assert(inferredTypes.get(typeParameterNodes[i].name.text)); // TODO\r\n            resolvedTypeArguments[i] = inferredType;\r\n          }\r\n          instance = this.resolver.resolveFunction(\r\n            prototype,\r\n            resolvedTypeArguments,\r\n            makeMap<string,Type>(flow.contextualTypeArguments)\r\n          );\r\n          if (!instance) return this.module.createUnreachable();\r\n          return this.makeCallDirect(instance, argumentExprs);\r\n          // TODO: this skips inlining because inlining requires compiling its temporary locals in\r\n          // the scope of the inlined flow. might need another mechanism to lock temp. locals early,\r\n          // so inlining can be performed in `makeCallDirect` instead?\r\n\r\n        // otherwise resolve the non-generic call as usual\r\n        } else {\r\n          instance = this.resolver.resolveFunction(prototype, null);\r\n        }\r\n        if (!instance) return this.module.createUnreachable();\r\n\r\n        // compile 'this' expression if an instance method\r\n        let thisExpr: ExpressionRef = 0;\r\n        if (instance.is(CommonFlags.INSTANCE)) {\r\n          thisExpr = this.compileExpressionRetainType(\r\n            assert(this.resolver.currentThisExpression),\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n        }\r\n\r\n        return this.compileCallDirect(\r\n          instance,\r\n          expression.arguments,\r\n          expression,\r\n          thisExpr\r\n        );\r\n      }\r\n\r\n      // indirect call: index argument with signature (non-generic, can't be inlined)\r\n      case ElementKind.LOCAL: {\r\n        if (signature = (<Local>target).type.signatureReference) {\r\n          if ((<Local>target).is(CommonFlags.INLINED)) {\r\n            indexArg = module.createI32(i64_low((<Local>target).constantIntegerValue));\r\n          } else {\r\n            indexArg = module.createGetLocal((<Local>target).index, NativeType.I32);\r\n          }\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Local>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (signature = (<Global>target).type.signatureReference) {\r\n          indexArg = module.createGetGlobal((<Global>target).internalName, (<Global>target).type.toNativeType());\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, (<Global>target).type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FIELD: {\r\n        let type = (<Field>target).type;\r\n        if (signature = type.signatureReference) {\r\n          let thisExpression = assert(this.resolver.currentThisExpression);\r\n          let thisExpr = this.compileExpressionRetainType(\r\n            thisExpression,\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          );\r\n          indexArg = module.createLoad(\r\n            4,\r\n            false,\r\n            thisExpr,\r\n            NativeType.I32,\r\n            (<Field>target).memoryOffset\r\n          );\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, type.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      case ElementKind.FUNCTION_TARGET: {\r\n        signature = (<FunctionTarget>target).signature;\r\n        indexArg = this.compileExpression(\r\n          expression.expression,\r\n          (<FunctionTarget>target).type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        break;\r\n      }\r\n\r\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\r\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\r\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\r\n        if (!getterInstance) return module.createUnreachable();\r\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\r\n        signature = this.currentType.signatureReference;\r\n        if (!signature) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, this.currentType.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let getterInstance = assert((<Property>target).getterInstance);\r\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\r\n          this.compileExpressionRetainType(\r\n            assert(this.resolver.currentThisExpression),\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          )\r\n        );\r\n        signature = this.currentType.signatureReference;\r\n        if (!signature) {\r\n          this.error(\r\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\r\n            expression.range, this.currentType.toString()\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        break;\r\n      }\r\n\r\n      // not supported\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return this.compileCallIndirect(\r\n      signature,\r\n      indexArg,\r\n      expression.arguments,\r\n      expression\r\n    );\r\n  }\r\n\r\n  private compileCallExpressionBuiltin(\r\n    prototype: FunctionPrototype,\r\n    expression: CallExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var typeArguments: Type[] | null = null;\r\n\r\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\r\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\r\n    var typeParameterNodes = prototype.typeParameterNodes;\r\n    var typeArgumentNodes = expression.typeArguments;\r\n    if (expression.typeArguments) {\r\n      if (!prototype.is(CommonFlags.GENERIC)) {\r\n        this.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          expression.range, prototype.internalName\r\n        );\r\n      }\r\n      typeArguments = this.resolver.resolveTypeArguments(\r\n        assert(typeParameterNodes),\r\n        typeArgumentNodes,\r\n        this.currentFlow.actualFunction.parent,\r\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\r\n        expression\r\n      );\r\n    }\r\n\r\n    // now compile the builtin, which usually returns a block of code that replaces the call.\r\n    var expr = compileBuiltinCall(\r\n      this,\r\n      prototype,\r\n      typeArguments,\r\n      expression.arguments,\r\n      contextualType,\r\n      expression\r\n    );\r\n    if (!expr) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /**\r\n   * Checks that a call with the given number as arguments can be performed according to the\r\n   * specified signature.\r\n   */\r\n  checkCallSignature(\r\n    signature: Signature,\r\n    numArguments: i32,\r\n    hasThis: bool,\r\n    reportNode: Node\r\n  ): bool {\r\n\r\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\r\n    var thisType = signature.thisType;\r\n    if (hasThis != (thisType != null)) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported, // TODO: better message?\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\r\n    var hasRest = signature.hasRest;\r\n    if (hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Operation_not_supported,\r\n        reportNode.range\r\n      );\r\n      return false;\r\n    }\r\n\r\n    var minimum = signature.requiredParameters;\r\n    var maximum = signature.parameterTypes.length;\r\n\r\n    // must at least be called with required arguments\r\n    if (numArguments < minimum) {\r\n      this.error(\r\n        minimum < maximum\r\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\r\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, minimum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    // must not be called with more than the maximum arguments\r\n    if (numArguments > maximum && !hasRest) {\r\n      this.error(\r\n        DiagnosticCode.Expected_0_arguments_but_got_1,\r\n        reportNode.range, maximum.toString(), numArguments.toString()\r\n      );\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /** Compiles a direct call to a concrete function. */\r\n  compileCallDirect(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    // Inline if explicitly requested\r\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\r\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\r\n      if (this.currentInlineFunctions.includes(instance)) {\r\n        this.warning(\r\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\r\n          reportNode.range, instance.internalName\r\n        );\r\n      } else {\r\n        this.currentInlineFunctions.push(instance);\r\n        let expr = this.compileCallInlinePrechecked(instance, argumentExpressions, thisArg);\r\n        this.currentInlineFunctions.pop();\r\n        return expr;\r\n      }\r\n    }\r\n\r\n    // Otherwise compile to just a call\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallDirect(instance, operands);\r\n  }\r\n\r\n  // Depends on being pre-checked in compileCallDirect\r\n  private compileCallInlinePrechecked(\r\n    instance: Function,\r\n    argumentExpressions: Expression[],\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // Create a new inline flow and use it to compile the function as a block\r\n    var previousFlow = this.currentFlow;\r\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\r\n\r\n    // Convert provided call arguments to temporary locals. It is important that these are compiled\r\n    // here, with their respective locals being blocked. There is no 'makeCallInline'.\r\n    var body = [];\r\n\r\n    if (thisArg) {\r\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n      let thisType = assert(instance.signature.thisType);\r\n      let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, false);\r\n      body.push(\r\n        module.createSetLocal(thisLocal.index, thisArg)\r\n      );\r\n      let baseInstance = (<Class>classInstance).base;\r\n      if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\r\n    }\r\n\r\n    var numArguments = argumentExpressions.length;\r\n    var signature = instance.signature;\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i) {\r\n      let paramExpr = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let argumentLocal = flow.addScopedLocal(\r\n        signature.getParameterName(i),\r\n        parameterTypes[i],\r\n        !previousFlow.canOverflow(paramExpr, parameterTypes[i])\r\n      );\r\n      body.push(\r\n        module.createSetLocal(argumentLocal.index, paramExpr)\r\n      );\r\n    }\r\n\r\n    // Compile optional parameter initializers in the scope of the inlined flow\r\n    this.currentFlow = flow;\r\n    var numParameters = signature.parameterTypes.length;\r\n    for (let i = numArguments; i < numParameters; ++i) {\r\n      let initExpr = this.compileExpression(\r\n        assert(instance.prototype.signatureNode.parameters[i].initializer),\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.WRAP\r\n      );\r\n      let argumentLocal = flow.addScopedLocal(\r\n        signature.getParameterName(i),\r\n        parameterTypes[i],\r\n        !flow.canOverflow(initExpr, parameterTypes[i])\r\n      );\r\n      body.push(\r\n        module.createSetLocal(argumentLocal.index, initExpr)\r\n      );\r\n    }\r\n\r\n    // Compile the called function's body in the scope of the inlined flow\r\n    {\r\n      let stmts = this.compileFunctionBody(instance);\r\n      for (let i = 0, k = stmts.length; i < k; ++i) body.push(stmts[i]);\r\n    }\r\n\r\n    // Free any new scoped locals and reset to the original flow\r\n    flow.freeScopedLocals();\r\n    var returnType = flow.returnType;\r\n    this.currentFlow = previousFlow;\r\n    this.currentType = returnType;\r\n\r\n    // Create an outer block that we can break to when returning a value out of order\r\n    return module.createBlock(flow.inlineReturnLabel, body, returnType.toNativeType());\r\n  }\r\n\r\n  /** Gets the trampoline for the specified function. */\r\n  ensureTrampoline(original: Function): Function {\r\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\r\n    // being zeroed. It takes one additional argument denoting the number of actual operands\r\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\r\n    // default values using the optional parameter initializers of the original function. Doing so\r\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\r\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\r\n    // context otherwise.\r\n    var trampoline = original.trampoline;\r\n    if (trampoline) return trampoline;\r\n\r\n    var originalSignature = original.signature;\r\n    var originalName = original.internalName;\r\n    var originalParameterTypes = originalSignature.parameterTypes;\r\n    var originalParameterDeclarations = original.prototype.signatureNode.parameters;\r\n    var commonReturnType = originalSignature.returnType;\r\n    var commonThisType = originalSignature.thisType;\r\n    var isInstance = original.is(CommonFlags.INSTANCE);\r\n\r\n    // arguments excl. `this`, operands incl. `this`\r\n    var minArguments = originalSignature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = originalParameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (isInstance) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n    }\r\n    var numOptional = assert(maxOperands - minOperands);\r\n\r\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\r\n    var operandIndex = 0;\r\n\r\n    // forward `this` if applicable\r\n    var module = this.module;\r\n    if (isInstance) {\r\n      forwardedOperands[0] = module.createGetLocal(0, this.options.nativeSizeType);\r\n      operandIndex = 1;\r\n    }\r\n\r\n    // forward required arguments\r\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, originalParameterTypes[i].toNativeType());\r\n    }\r\n    assert(operandIndex == minOperands);\r\n\r\n    // create the trampoline element\r\n    var trampolineSignature = new Signature(originalParameterTypes, commonReturnType, commonThisType);\r\n    trampolineSignature.requiredParameters = maxArguments;\r\n    trampoline = new Function(\r\n      original.name + \"|trampoline\",\r\n      original.prototype,\r\n      trampolineSignature,\r\n      original.contextualTypeArguments\r\n    );\r\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\r\n    original.trampoline = trampoline;\r\n\r\n    // compile initializers of omitted arguments in scope of the trampoline function\r\n    // this is necessary because initializers might need additional locals and a proper this context\r\n    var previousFlow = this.currentFlow;\r\n    this.currentFlow = trampoline.flow;\r\n\r\n    // create a br_table switching over the number of optional parameters provided\r\n    var numNames = numOptional + 1; // incl. outer block\r\n    var names = new Array<string>(numNames);\r\n    var ofN = \"of\" + numOptional.toString(10);\r\n    for (let i = 0; i < numNames; ++i) {\r\n      let label = i.toString(10) + ofN;\r\n      names[i] = label;\r\n    }\r\n    var body = module.createBlock(names[0], [\r\n      module.createBlock(\"outOfRange\", [\r\n        module.createSwitch(names, \"outOfRange\",\r\n          // condition is number of provided optional arguments, so subtract required arguments\r\n          minArguments\r\n            ? module.createBinary(\r\n                BinaryOp.SubI32,\r\n                module.createGetGlobal(CompilerSymbols.argc, NativeType.I32),\r\n                module.createI32(minArguments)\r\n              )\r\n            : module.createGetGlobal(CompilerSymbols.argc, NativeType.I32)\r\n        )\r\n      ]),\r\n      module.createUnreachable()\r\n    ]);\r\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\r\n      let type = originalParameterTypes[minArguments + i];\r\n      let declaration = originalParameterDeclarations[minArguments + i];\r\n      let initializer = declaration.initializer;\r\n      let initExpr: ExpressionRef;\r\n      if (initializer) {\r\n        initExpr = module.createSetLocal(operandIndex,\r\n          this.compileExpression(\r\n            initializer,\r\n            type,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.WRAP\r\n          )\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\r\n          declaration.range\r\n        );\r\n        initExpr = module.createUnreachable();\r\n      }\r\n      body = module.createBlock(names[i + 1], [\r\n        body,\r\n        initExpr,\r\n      ]);\r\n      forwardedOperands[operandIndex] = module.createGetLocal(operandIndex, type.toNativeType());\r\n    }\r\n    this.currentFlow = previousFlow;\r\n    assert(operandIndex == maxOperands);\r\n\r\n    var funcRef = module.addFunction(\r\n      trampoline.internalName,\r\n      this.ensureFunctionType(\r\n        trampolineSignature.parameterTypes,\r\n        trampolineSignature.returnType,\r\n        trampolineSignature.thisType\r\n      ),\r\n      typesToNativeTypes(trampoline.additionalLocals),\r\n      module.createBlock(null, [\r\n        body,\r\n        module.createCall(\r\n          originalName,\r\n          forwardedOperands,\r\n          commonReturnType.toNativeType()\r\n        )\r\n      ], commonReturnType.toNativeType())\r\n    );\r\n    trampoline.finalize(module, funcRef);\r\n    return trampoline;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper global is present and returns its name. */\r\n  private ensureArgcVar(): string {\r\n    if (!this.argcVar) {\r\n      let module = this.module;\r\n      this.argcVar = module.addGlobal(\r\n        CompilerSymbols.argc,\r\n        NativeType.I32,\r\n        true,\r\n        module.createI32(0)\r\n      );\r\n    }\r\n    return CompilerSymbols.argc;\r\n  }\r\n\r\n  /** Makes sure that the argument count helper setter is present and returns its name. */\r\n  private ensureArgcSet(): string {\r\n    var internalName = CompilerSymbols.setargc;\r\n    if (!this.argcSet) {\r\n      let module = this.module;\r\n      this.argcSet = module.addFunction(internalName,\r\n        this.ensureFunctionType([ Type.u32 ], Type.void),\r\n        null,\r\n        module.createSetGlobal(this.ensureArgcVar(),\r\n          module.createGetLocal(0, NativeType.I32)\r\n        )\r\n      );\r\n      module.addFunctionExport(internalName, \"_setargc\");\r\n    }\r\n    return internalName;\r\n  }\r\n\r\n  /** Creates a direct call to the specified function. */\r\n  makeCallDirect(\r\n    instance: Function,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = instance.signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = instance.signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (instance.is(CommonFlags.INSTANCE)) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    var module = this.module;\r\n    if (!this.compileFunction(instance)) return module.createUnreachable();\r\n    var returnType = instance.signature.returnType;\r\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\r\n\r\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = instance.signature.parameterTypes;\r\n      let parameterNodes = instance.prototype.signatureNode.parameters;\r\n      assert(parameterNodes.length == parameterTypes.length);\r\n      let allOptionalsAreConstant = true;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        let initializer = parameterNodes[i].initializer;\r\n        if (!(initializer && nodeIsConstantValue(initializer.kind))) {\r\n          allOptionalsAreConstant = false;\r\n          break;\r\n        }\r\n      }\r\n      if (allOptionalsAreConstant) { // inline into the call\r\n        for (let i = numArguments; i < maxArguments; ++i) {\r\n          operands.push(\r\n            this.compileExpression(\r\n              <Expression>parameterNodes[i].initializer,\r\n              parameterTypes[i],\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE\r\n            )\r\n          );\r\n        }\r\n      } else { // otherwise fill up with zeroes and call the trampoline\r\n        for (let i = numArguments; i < maxArguments; ++i) {\r\n          operands.push(parameterTypes[i].toNativeZero(module));\r\n        }\r\n        if (!isCallImport) {\r\n          let original = instance;\r\n          instance = this.ensureTrampoline(instance);\r\n          if (!this.compileFunction(instance)) return module.createUnreachable();\r\n          instance.flow.flags = original.flow.flags;\r\n          let nativeReturnType = returnType.toNativeType();\r\n          this.currentType = returnType;\r\n          return module.createBlock(null, [\r\n            module.createSetGlobal(this.ensureArgcVar(), module.createI32(numArguments)),\r\n            module.createCall(instance.internalName, operands, nativeReturnType)\r\n          ], nativeReturnType);\r\n        }\r\n      }\r\n    }\r\n\r\n    // otherwise just call through\r\n    this.currentType = returnType;\r\n    return module.createCall(instance.internalName, operands, returnType.toNativeType());\r\n  }\r\n\r\n  /** Compiles an indirect call using an index argument and a signature. */\r\n  compileCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    argumentExpressions: Expression[],\r\n    reportNode: Node,\r\n    thisArg: ExpressionRef = 0\r\n  ): ExpressionRef {\r\n    var numArguments = argumentExpressions.length;\r\n\r\n    if (!this.checkCallSignature( // reports\r\n      signature,\r\n      numArguments,\r\n      thisArg != 0,\r\n      reportNode\r\n    )) {\r\n      return this.module.createUnreachable();\r\n    }\r\n\r\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\r\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\r\n    var index = 0;\r\n    if (thisArg) {\r\n      operands[0] = thisArg;\r\n      index = 1;\r\n    }\r\n    var parameterTypes = signature.parameterTypes;\r\n    for (let i = 0; i < numArguments; ++i, ++index) {\r\n      operands[index] = this.compileExpression(\r\n        argumentExpressions[i],\r\n        parameterTypes[i],\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    assert(index == numArgumentsInclThis);\r\n    return this.makeCallIndirect(signature, indexArg, operands);\r\n  }\r\n\r\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\r\n  makeCallIndirect(\r\n    signature: Signature,\r\n    indexArg: ExpressionRef,\r\n    operands: ExpressionRef[] | null = null\r\n  ): ExpressionRef {\r\n    var numOperands = operands ? operands.length : 0;\r\n    var numArguments = numOperands;\r\n    var minArguments = signature.requiredParameters;\r\n    var minOperands = minArguments;\r\n    var maxArguments = signature.parameterTypes.length;\r\n    var maxOperands = maxArguments;\r\n    if (signature.thisType) {\r\n      ++minOperands;\r\n      ++maxOperands;\r\n      --numArguments;\r\n    }\r\n    assert(numOperands >= minOperands);\r\n\r\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var module = this.module;\r\n\r\n    // fill up omitted arguments with zeroes\r\n    if (numOperands < maxOperands) {\r\n      if (!operands) {\r\n        operands = new Array(maxOperands);\r\n        operands.length = 0;\r\n      }\r\n      let parameterTypes = signature.parameterTypes;\r\n      for (let i = numArguments; i < maxArguments; ++i) {\r\n        operands.push(parameterTypes[i].toNativeZero(module));\r\n      }\r\n    }\r\n\r\n    var returnType = signature.returnType;\r\n    this.currentType = returnType;\r\n    return module.createBlock(null, [\r\n      module.createSetGlobal(this.ensureArgcVar(), // might still be calling a trampoline\r\n        module.createI32(numArguments)\r\n      ),\r\n      module.createCallIndirect(indexArg, operands, signature.toSignatureString())\r\n    ], returnType.toNativeType()); // not necessarily wrapped\r\n  }\r\n\r\n  compileCommaExpression(expression: CommaExpression, contextualType: Type): ExpressionRef {\r\n    var expressions = expression.expressions;\r\n    var numExpressions = expressions.length;\r\n    var exprs = new Array<ExpressionRef>(numExpressions--);\r\n    for (let i = 0; i < numExpressions; ++i) {\r\n      exprs[i] = this.compileExpression(\r\n        expressions[i],\r\n        Type.void, // drop all\r\n        ConversionKind.EXPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n    }\r\n    exprs[numExpressions] = this.compileExpression(\r\n      expressions[numExpressions],\r\n      contextualType, // except last\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE\r\n    );\r\n    return this.module.createBlock(null, exprs, this.currentType.toNativeType());\r\n  }\r\n\r\n  compileElementAccessExpression(expression: ElementAccessExpression, contextualType: Type): ExpressionRef {\r\n    var target = this.resolver.resolveElementAccessExpression(\r\n      expression,\r\n      this.currentFlow,\r\n      contextualType\r\n    ); // reports\r\n    if (!target) return this.module.createUnreachable();\r\n    switch (target.kind) {\r\n      case ElementKind.CLASS: {\r\n        let isUnchecked = this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n        let indexedGet = (<Class>target).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\r\n        if (!indexedGet) {\r\n          this.error(\r\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\r\n            expression.expression.range, (<Class>target).internalName\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n        let thisArg = this.compileExpression(\r\n          expression.expression,\r\n          (<Class>target).type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE\r\n        );\r\n        return this.compileCallDirect(indexedGet, [\r\n          expression.elementExpression\r\n        ], expression, thisArg);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileFunctionExpression(\r\n    expression: FunctionExpression,\r\n    contextualSignature: Signature | null\r\n  ): ExpressionRef {\r\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\r\n    assert(!declaration.typeParameters); // function expression cannot be generic\r\n    var flow = this.currentFlow;\r\n    var actualFunction = flow.actualFunction;\r\n    var prototype = new FunctionPrototype(\r\n      declaration.name.text.length\r\n        ? declaration.name.text\r\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\r\n      actualFunction,\r\n      declaration,\r\n      DecoratorFlags.NONE\r\n    );\r\n    var instance: Function | null;\r\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\r\n\r\n    // compile according to context. this differs from a normal function in that omitted parameter\r\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\r\n    if (contextualSignature) {\r\n      let signatureNode = prototype.signatureNode;\r\n      let parameterNodes = signatureNode.parameters;\r\n      let numPresentParameters = parameterNodes.length;\r\n\r\n      // must not require more than the maximum number of parameters\r\n      let parameterTypes = contextualSignature.parameterTypes;\r\n      let numParameters = parameterTypes.length;\r\n      if (numPresentParameters > numParameters) {\r\n        this.error(\r\n          DiagnosticCode.Expected_0_arguments_but_got_1,\r\n          expression.range, numParameters.toString(), numPresentParameters.toString()\r\n        );\r\n        return this.module.createUnreachable();\r\n      }\r\n\r\n      // check non-omitted parameter types\r\n      let parameterNames = new Array<string>(numPresentParameters);\r\n      for (let i = 0; i < numPresentParameters; ++i) {\r\n        let parameterNode = parameterNodes[i];\r\n        parameterNames[i] = parameterNode.name.text; // use actual name\r\n        if (!isTypeOmitted(parameterNode.type)) {\r\n          let resolvedType = this.resolver.resolveType(\r\n            parameterNode.type,\r\n            actualFunction.parent,\r\n            contextualTypeArguments\r\n          );\r\n          if (!resolvedType) return this.module.createUnreachable();\r\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\r\n            this.error(\r\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\r\n            );\r\n            return this.module.createUnreachable();\r\n          }\r\n        }\r\n        // any unused parameters are inherited but ignored\r\n      }\r\n\r\n      // check non-omitted return type\r\n      let returnType = contextualSignature.returnType;\r\n      if (!isTypeOmitted(signatureNode.returnType)) {\r\n        let resolvedType = this.resolver.resolveType(\r\n          signatureNode.returnType,\r\n          actualFunction.parent,\r\n          contextualTypeArguments\r\n        );\r\n        if (!resolvedType) return this.module.createUnreachable();\r\n        if (\r\n          returnType == Type.void\r\n            ? resolvedType != Type.void\r\n            : !resolvedType.isStrictlyAssignableTo(returnType)\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n      }\r\n\r\n      // check explicit this type\r\n      let thisType = contextualSignature.thisType;\r\n      let thisTypeNode = signatureNode.explicitThisType;\r\n      if (thisTypeNode) {\r\n        if (!thisType) {\r\n          this.error(\r\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n            thisTypeNode.range\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n        let resolvedType = this.resolver.resolveType(\r\n          thisTypeNode,\r\n          actualFunction.parent,\r\n          contextualTypeArguments\r\n        );\r\n        if (!resolvedType) return this.module.createUnreachable();\r\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\r\n          this.error(\r\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\r\n          );\r\n          return this.module.createUnreachable();\r\n        }\r\n      }\r\n\r\n      let signature = new Signature(parameterTypes, returnType, thisType);\r\n      signature.requiredParameters = numParameters; // !\r\n      signature.parameterNames = parameterNames;\r\n      instance = new Function(\r\n        prototype.name,\r\n        prototype,\r\n        signature,\r\n        contextualTypeArguments\r\n      );\r\n      if (!this.compileFunction(instance)) return this.module.createUnreachable();\r\n      this.currentType = contextualSignature.type;\r\n\r\n    // otherwise compile like a normal function\r\n    } else {\r\n      instance = this.compileFunctionUsingTypeArguments(\r\n        prototype,\r\n        [],\r\n        contextualTypeArguments\r\n      );\r\n      if (!instance) return this.module.createUnreachable();\r\n      this.currentType = instance.signature.type;\r\n    }\r\n\r\n    var index = this.ensureFunctionTableEntry(instance); // reports\r\n    return index < 0\r\n      ? this.module.createUnreachable()\r\n      : this.module.createI32(index);\r\n  }\r\n\r\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\r\n  private maybeCompileEnclosingSource(expression: Expression): void {\r\n    var internalPath = expression.range.source.internalPath;\r\n    var filesByName = this.program.filesByName;\r\n    assert(filesByName.has(internalPath));\r\n    var enclosingFile = filesByName.get(internalPath)!;\r\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\r\n      this.compileFileByPath(internalPath, expression);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Compiles an identifier in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compileIdentifierExpression(\r\n    expression: IdentifierExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var actualFunction = flow.actualFunction;\r\n\r\n    // check special keywords first\r\n    switch (expression.kind) {\r\n      case NodeKind.NULL: {\r\n        let options = this.options;\r\n        if (!contextualType.classReference) {\r\n          this.currentType = options.usizeType;\r\n        }\r\n        return options.isWasm64\r\n          ? module.createI64(0)\r\n          : module.createI32(0);\r\n      }\r\n      case NodeKind.TRUE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(1);\r\n      }\r\n      case NodeKind.FALSE: {\r\n        this.currentType = Type.bool;\r\n        return module.createI32(0);\r\n      }\r\n      case NodeKind.THIS: {\r\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\r\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\r\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n          let nativeSizeType = this.options.nativeSizeType;\r\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n            if (!flow.is(FlowFlags.ALLOCATES)) {\r\n              flow.set(FlowFlags.ALLOCATES);\r\n              // {\r\n              //   if (!this) this = <ALLOC>\r\n              //   this.a = X\r\n              //   this.b = Y\r\n              //   return this\r\n              // }\r\n              let stmts: ExpressionRef[] = [\r\n                module.createIf(\r\n                  module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n                    module.createGetLocal(thisLocal.index, nativeSizeType)\r\n                  ),\r\n                  module.createSetLocal(thisLocal.index,\r\n                    this.makeAllocation(<Class>classInstance)\r\n                  )\r\n                )\r\n              ];\r\n              this.makeFieldInitialization(<Class>classInstance, stmts);\r\n              stmts.push(\r\n                module.createGetLocal(thisLocal.index, nativeSizeType)\r\n              );\r\n              this.currentType = thisLocal.type;\r\n              return module.createBlock(null, stmts, nativeSizeType);\r\n            }\r\n          }\r\n          // if not a constructor, `this` type can differ\r\n          let thisType = assert(actualFunction.signature.thisType);\r\n          this.currentType = thisType;\r\n          return module.createGetLocal(thisLocal.index, thisType.toNativeType());\r\n        }\r\n        this.error(\r\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      case NodeKind.SUPER: {\r\n        let flow = this.currentFlow;\r\n        let actualFunction = flow.actualFunction;\r\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\r\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\r\n            // TS1034 in the parser effectively limits this to property accesses\r\n            this.error(\r\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\r\n              expression.range\r\n            );\r\n          }\r\n        }\r\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\r\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\r\n          if (scopedThis) {\r\n            let scopedThisClass = assert(scopedThis.type.classReference);\r\n            let base = scopedThisClass.base;\r\n            if (base) {\r\n              this.currentType = base.type;\r\n              return module.createGetLocal(scopedThis.index, base.type.toNativeType());\r\n            }\r\n          }\r\n        }\r\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\r\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n          let baseClassInstance = (<Class>classInstance).base;\r\n          if (baseClassInstance) {\r\n            let superType = baseClassInstance.type;\r\n            this.currentType = superType;\r\n            return module.createGetLocal(0, superType.toNativeType());\r\n          }\r\n        }\r\n        this.error(\r\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\r\n          expression.range\r\n        );\r\n        this.currentType = this.options.usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    this.maybeCompileEnclosingSource(expression);\r\n\r\n    // otherwise resolve\r\n    var target = this.resolver.resolveIdentifier( // reports\r\n      expression,\r\n      flow,\r\n      this.currentEnum || actualFunction\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.LOCAL: {\r\n        let localType = (<Local>target).type;\r\n        assert(localType != Type.void);\r\n        if ((<Local>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Local>target, contextualType, retainConstantType);\r\n        }\r\n        let localIndex = (<Local>target).index;\r\n        assert(localIndex >= 0);\r\n        this.currentType = localType;\r\n        return this.module.createGetLocal(localIndex, localType.toNativeType());\r\n      }\r\n      case ElementKind.GLOBAL: {\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return this.module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return this.module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\r\n        if (!target.is(CommonFlags.COMPILED)) {\r\n          this.error(\r\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\r\n            expression.range\r\n          );\r\n          this.currentType = Type.i32;\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\r\n          return this.module.createI32(i64_low((<EnumValue>target).constantIntegerValue));\r\n        }\r\n        return this.module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        let instance = this.resolver.resolveFunction(\r\n          <FunctionPrototype>target,\r\n          null,\r\n          makeMap<string,Type>(flow.contextualTypeArguments)\r\n        );\r\n        if (!(instance && this.compileFunction(instance))) return module.createUnreachable();\r\n        let index = this.ensureFunctionTableEntry(instance);\r\n        this.currentType = instance.signature.type;\r\n        return this.module.createI32(index);\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    return this.module.createUnreachable();\r\n  }\r\n\r\n  compileInstanceOfExpression(\r\n    expression: InstanceOfExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\r\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\r\n    // possible in AS anyway.\r\n    var expr = this.compileExpressionRetainType(expression.expression, this.options.usizeType, WrapMode.NONE);\r\n    var actualType = this.currentType;\r\n    var expectedType = this.resolver.resolveType(\r\n      expression.isType,\r\n      this.currentFlow.actualFunction\r\n    );\r\n    this.currentType = Type.bool;\r\n    if (!expectedType) return module.createUnreachable();\r\n\r\n    // instanceof <basicType> must be exact\r\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\r\n      return module.createI32(actualType == expectedType ? 1 : 0);\r\n    }\r\n    // <nullable> instanceof <nonNullable> must be != 0\r\n    if (\r\n      actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE) &&\r\n      actualType.nonNullableType.isAssignableTo(expectedType)\r\n    ) {\r\n      return module.createBinary(\r\n        actualType.is(TypeFlags.LONG)\r\n          ? BinaryOp.NeI64\r\n          : BinaryOp.NeI32,\r\n        expr,\r\n        actualType.toNativeZero(module)\r\n      );\r\n    }\r\n    return module.createI32(actualType.isAssignableTo(expectedType) ? 1 : 0);\r\n  }\r\n\r\n  compileLiteralExpression(\r\n    expression: LiteralExpression,\r\n    contextualType: Type,\r\n    implicitNegate: bool = false\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    switch (expression.literalKind) {\r\n      case LiteralKind.ARRAY: {\r\n        assert(!implicitNegate);\r\n        let classType = contextualType.classReference;\r\n        if (\r\n          classType &&\r\n          classType.prototype == this.program.arrayPrototype\r\n        ) {\r\n          return this.compileArrayLiteral(\r\n            assert(classType.typeArguments)[0],\r\n            (<ArrayLiteralExpression>expression).elementExpressions,\r\n            false, // TODO: isConst?\r\n            expression\r\n          );\r\n        }\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      case LiteralKind.FLOAT: {\r\n        let floatValue = (<FloatLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          floatValue = -floatValue;\r\n        }\r\n        if (contextualType == Type.f32) {\r\n          return module.createF32(<f32>floatValue);\r\n        }\r\n        this.currentType = Type.f64;\r\n        return module.createF64(floatValue);\r\n      }\r\n      case LiteralKind.INTEGER: {\r\n        let intValue = (<IntegerLiteralExpression>expression).value;\r\n        if (implicitNegate) {\r\n          intValue = i64_sub(\r\n            i64_new(0),\r\n            intValue\r\n          );\r\n        }\r\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\r\n        this.currentType = type;\r\n        switch (type.kind) {\r\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.createI32(i64_low(intValue));\r\n          case TypeKind.I64: return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.createI32(i64_low(intValue));\r\n          case TypeKind.U64: return module.createI64(i64_low(intValue), i64_high(intValue));\r\n          case TypeKind.F32: return module.createF32(i64_to_f32(intValue));\r\n          case TypeKind.F64: return module.createF64(i64_to_f64(intValue));\r\n          default: return module.createI32(i64_low(intValue));\r\n        }\r\n      }\r\n      case LiteralKind.STRING: {\r\n        assert(!implicitNegate);\r\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\r\n      }\r\n      case LiteralKind.OBJECT: {\r\n        assert(!implicitNegate);\r\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\r\n      }\r\n      // case LiteralKind.REGEXP:\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      expression.range\r\n    );\r\n    this.currentType = contextualType;\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\r\n  ensureStaticString(stringValue: string): ExpressionRef {\r\n    var program = this.program;\r\n    var hasGC = program.hasGC;\r\n    var gcHeaderSize = program.gcHeaderSize;\r\n\r\n    var stringInstance = assert(program.stringInstance);\r\n    var stringSegment: MemorySegment;\r\n\r\n    // if the string already exists, reuse it\r\n    var segments = this.stringSegments;\r\n    if (segments.has(stringValue)) {\r\n      stringSegment = <MemorySegment>segments.get(stringValue);\r\n\r\n    // otherwise create it\r\n    } else {\r\n      let length = stringValue.length;\r\n      let headerSize = (stringInstance.currentMemoryOffset + 1) & ~1;\r\n      let totalSize = headerSize + length * 2;\r\n\r\n      let buf: Uint8Array;\r\n      let pos: u32;\r\n\r\n      if (hasGC) {\r\n        buf = new Uint8Array(gcHeaderSize + totalSize);\r\n        pos = gcHeaderSize;\r\n        writeI32(ensureGCHook(this, stringInstance), buf, program.gcHookOffset);\r\n      } else {\r\n        buf = new Uint8Array(totalSize);\r\n        pos = 0;\r\n      }\r\n      writeI32(length, buf, pos + stringInstance.offsetof(LibrarySymbols.length));\r\n      pos += headerSize;\r\n      for (let i = 0; i < length; ++i) {\r\n        writeI16(stringValue.charCodeAt(i), buf, pos + (i << 1));\r\n      }\r\n      stringSegment = this.addMemorySegment(buf);\r\n      segments.set(stringValue, stringSegment);\r\n    }\r\n    var stringOffset = stringSegment.offset;\r\n    if (hasGC) stringOffset = i64_add(stringOffset, i64_new(gcHeaderSize));\r\n\r\n    this.currentType = stringInstance.type;\r\n    if (this.options.isWasm64) {\r\n      return this.module.createI64(i64_low(stringOffset), i64_high(stringOffset));\r\n    } else {\r\n      assert(i64_is_u32(stringOffset));\r\n      return this.module.createI32(i64_low(stringOffset));\r\n    }\r\n  }\r\n\r\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\r\n    return this.ensureStaticString(expression.value);\r\n  }\r\n\r\n  /** Ensures that the specified array exists in static memory and returns a pointer to it. */\r\n  ensureStaticArray(elementType: Type, values: ExpressionRef[]): ExpressionRef {\r\n    var program = this.program;\r\n    var hasGC = program.hasGC;\r\n    var gcHeaderSize = program.gcHeaderSize;\r\n\r\n    var length = values.length;\r\n    var byteSize = elementType.byteSize;\r\n    var byteLength = length * byteSize;\r\n    var usizeTypeSize = this.options.usizeType.byteSize;\r\n\r\n    var buf: Uint8Array;\r\n    var pos: u32;\r\n\r\n    // create the backing ArrayBuffer segment\r\n    var bufferInstance = assert(program.arrayBufferInstance);\r\n    var bufferHeaderSize = (bufferInstance.currentMemoryOffset + 7) & ~7;\r\n    var bufferTotalSize = 1 << (32 - clz(bufferHeaderSize + byteLength - 1));\r\n    if (hasGC) {\r\n      buf = new Uint8Array(gcHeaderSize + bufferTotalSize);\r\n      pos = gcHeaderSize;\r\n      writeI32(ensureGCHook(this, bufferInstance), buf, program.gcHookOffset);\r\n    } else {\r\n      buf = new Uint8Array(bufferTotalSize);\r\n      pos = 0;\r\n    }\r\n    writeI32(byteLength, buf, pos + bufferInstance.offsetof(LibrarySymbols.byteLength));\r\n    pos += bufferHeaderSize;\r\n    var nativeType = elementType.toNativeType();\r\n    switch (nativeType) {\r\n      case NativeType.I32: {\r\n        switch (byteSize) {\r\n          case 1: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI8(getConstValueI32(value), buf, pos);\r\n              pos += 1;\r\n            }\r\n            break;\r\n          }\r\n          case 2: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI16(getConstValueI32(value), buf, pos);\r\n              pos += 2;\r\n            }\r\n            break;\r\n          }\r\n          case 4: {\r\n            for (let i = 0; i < length; ++i) {\r\n              let value = values[i];\r\n              assert(getExpressionType(value) == nativeType);\r\n              assert(getExpressionId(value) == ExpressionId.Const);\r\n              writeI32(getConstValueI32(value), buf, pos);\r\n              pos += 4;\r\n            }\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\r\n          pos += 8;\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeF32(getConstValueF32(value), buf, pos);\r\n          pos += 4;\r\n        }\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        for (let i = 0; i < length; ++i) {\r\n          let value = values[i];\r\n          assert(getExpressionType(value) == nativeType);\r\n          assert(getExpressionId(value) == ExpressionId.Const);\r\n          writeF64(getConstValueF64(value), buf, pos);\r\n          pos += 8;\r\n        }\r\n        break;\r\n      }\r\n      default: assert(false);\r\n    }\r\n    var bufferSegment = this.addMemorySegment(buf);\r\n    var bufferOffset = bufferSegment.offset;\r\n    if (hasGC) bufferOffset = i64_add(bufferOffset, i64_new(gcHeaderSize));\r\n\r\n    // create the Array segment and return a pointer to it\r\n    var arrayPrototype = assert(program.arrayPrototype);\r\n    var arrayInstance = assert(this.resolver.resolveClass(\r\n      arrayPrototype,\r\n      [ elementType ],\r\n      makeMap<string,Type>()\r\n    ));\r\n    var arrayHeaderSize = (arrayInstance.currentMemoryOffset + 7) & ~7;\r\n    if (hasGC) {\r\n      buf = new Uint8Array(gcHeaderSize + arrayHeaderSize);\r\n      pos = gcHeaderSize;\r\n      writeI32(ensureGCHook(this, arrayInstance), buf, program.gcHookOffset);\r\n    } else {\r\n      buf = new Uint8Array(arrayHeaderSize);\r\n      pos = 0;\r\n    }\r\n    var arraySegment = this.addMemorySegment(buf);\r\n    var arrayOffset = arraySegment.offset;\r\n    if (hasGC) arrayOffset = i64_add(arrayOffset, i64_new(gcHeaderSize));\r\n    this.currentType = arrayInstance.type;\r\n    var buffer_offset = pos + arrayInstance.offsetof(\"buffer_\");\r\n    var length_offset = pos + arrayInstance.offsetof(\"length_\");\r\n    if (usizeTypeSize == 8) {\r\n      writeI64(bufferOffset, buf, buffer_offset);\r\n      writeI32(length, buf, length_offset);\r\n      return this.module.createI64(i64_low(arrayOffset), i64_high(arrayOffset));\r\n    } else {\r\n      assert(i64_is_u32(bufferOffset));\r\n      writeI32(i64_low(bufferOffset), buf, buffer_offset);\r\n      writeI32(length, buf, length_offset);\r\n      assert(i64_is_u32(arrayOffset));\r\n      return this.module.createI32(i64_low(arrayOffset));\r\n    }\r\n  }\r\n\r\n  compileArrayLiteral(\r\n    elementType: Type,\r\n    expressions: (Expression | null)[],\r\n    isConst: bool,\r\n    reportNode: Node\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // find out whether all elements are constant (array is static)\r\n    var length = expressions.length;\r\n    var compiledValues = new Array<ExpressionRef>(length);\r\n    var constantValues = new Array<ExpressionRef>(length);\r\n    var nativeElementType = elementType.toNativeType();\r\n    var isStatic = true;\r\n    for (let i = 0; i < length; ++i) {\r\n      let expression = expressions[i];\r\n      let expr = expression\r\n        ? this.compileExpression(<Expression>expression, elementType, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n        : elementType.toNativeZero(module);\r\n      compiledValues[i] = expr;\r\n      if (isStatic) {\r\n        expr = module.precomputeExpression(expr);\r\n        if (getExpressionId(expr) == ExpressionId.Const) {\r\n          assert(getExpressionType(expr) == nativeElementType);\r\n          constantValues[i] = expr;\r\n        } else {\r\n          if (isConst) {\r\n            this.warning(\r\n              DiagnosticCode.Compiling_constant_with_non_constant_initializer_as_mutable,\r\n              reportNode.range\r\n            );\r\n          }\r\n          isStatic = false;\r\n        }\r\n      }\r\n    }\r\n\r\n    // make a static array if possible\r\n    if (isStatic) return this.ensureStaticArray(elementType, constantValues);\r\n\r\n    // otherwise obtain the array type\r\n    var arrayPrototype = assert(this.program.arrayPrototype);\r\n    var arrayInstance = assert(this.resolver.resolveClass(\r\n      <ClassPrototype>arrayPrototype,\r\n      [ elementType ],\r\n      makeMap<string,Type>()\r\n    ));\r\n    var arrayType = arrayInstance.type;\r\n\r\n    // and compile an explicit instantiation\r\n    this.currentType = arrayType;\r\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\r\n    if (!setter) {\r\n      this.error(\r\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\r\n        reportNode.range, arrayInstance.internalName\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    var nativeArrayType = arrayType.toNativeType();\r\n    var flow = this.currentFlow;\r\n    var tempLocal = flow.parentFunction.addLocal(arrayType); // can't reuse a temp (used in compiledValues)\r\n    var stmts = new Array<ExpressionRef>(2 + length);\r\n    var index = 0;\r\n    stmts[index++] = module.createSetLocal(tempLocal.index,\r\n      this.makeCallDirect(assert(arrayInstance.constructorInstance), [\r\n        module.createI32(0), // this\r\n        module.createI32(length)\r\n      ])\r\n    );\r\n    for (let i = 0; i < length; ++i) {\r\n      stmts[index++] = this.makeCallDirect(setter, [\r\n        module.createGetLocal(tempLocal.index, nativeArrayType), // this\r\n        module.createI32(i),\r\n        compiledValues[i]\r\n      ]);\r\n    }\r\n    assert(index + 1 == stmts.length);\r\n    stmts[index] = module.createGetLocal(tempLocal.index, nativeArrayType);\r\n    flow.freeTempLocal(tempLocal); // but can be reused now\r\n    this.currentType = arrayType;\r\n    return module.createBlock(null, stmts, nativeArrayType);\r\n  }\r\n\r\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n\r\n    // contextual type must be a class\r\n    var classReference = contextualType.classReference;\r\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        expression.range, \"<object>\", contextualType.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // if present, check that the constructor is compatible with object literals\r\n    var ctor = classReference.constructorInstance;\r\n    if (ctor) {\r\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\r\n      // object literal and use them to call the ctor while not generating a store.\r\n      if (ctor.signature.requiredParameters) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (ctor.is(CommonFlags.PRIVATE)) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      if (ctor.is(CommonFlags.PROTECTED)) {\r\n        this.error(\r\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\r\n          expression.range, classReference.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // check and compile field values\r\n    var names = expression.names;\r\n    var numNames = names.length;\r\n    var values = expression.values;\r\n    var members = classReference.members;\r\n    var hasErrors = false;\r\n    var exprs = new Array<ExpressionRef>(numNames + 2);\r\n    var flow = this.currentFlow;\r\n    var tempLocal = flow.getTempLocal(this.options.usizeType);\r\n    assert(numNames == values.length);\r\n    for (let i = 0, k = numNames; i < k; ++i) {\r\n      let member = members ? members.get(names[i].text) : null;\r\n      if (!member || member.kind != ElementKind.FIELD) {\r\n        this.error(\r\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n          names[i].range, names[i].text, classReference.toString()\r\n        );\r\n        hasErrors = true;\r\n        continue;\r\n      }\r\n      let type = (<Field>member).type;\r\n      exprs[i + 1] = this.module.createStore( // TODO: handle setters as well\r\n        type.byteSize,\r\n        this.module.createGetLocal(tempLocal.index, this.options.nativeSizeType),\r\n        this.compileExpression(values[i], (<Field>member).type, ConversionKind.IMPLICIT, WrapMode.NONE),\r\n        type.toNativeType(),\r\n        (<Field>member).memoryOffset\r\n      );\r\n    }\r\n    this.currentType = classReference.type.nonNullableType;\r\n    if (hasErrors) return module.createUnreachable();\r\n\r\n    // allocate a new instance first and assign 'this' to the temp. local\r\n    exprs[0] = module.createSetLocal(\r\n      tempLocal.index,\r\n      this.makeAllocation(classReference)\r\n    );\r\n\r\n    // once all field values have been set, return 'this'\r\n    exprs[exprs.length - 1] = module.createGetLocal(tempLocal.index, this.options.nativeSizeType);\r\n\r\n    return module.createBlock(null, exprs, this.options.nativeSizeType);\r\n  }\r\n\r\n  compileNewExpression(expression: NewExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // obtain the class being instantiated\r\n    var target = this.resolver.resolveExpression( // reports\r\n      expression.expression,\r\n      flow\r\n    );\r\n    if (!target) return module.createUnreachable();\r\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\r\n      this.error(\r\n        DiagnosticCode.Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature,\r\n        expression.expression.range\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n    var classPrototype = <ClassPrototype>target;\r\n    var classInstance: Class | null = null;\r\n    var typeArguments = expression.typeArguments;\r\n    var classReference: Class | null;\r\n    if (\r\n      !typeArguments &&\r\n      (classReference = contextualType.classReference) !== null &&\r\n      classReference.is(CommonFlags.GENERIC)\r\n    ) {\r\n      classInstance = this.resolver.resolveClass(\r\n        classPrototype,\r\n        classReference.typeArguments,\r\n        makeMap<string,Type>(flow.contextualTypeArguments)\r\n      );\r\n    } else {\r\n      classInstance = this.resolver.resolveClassInclTypeArguments(\r\n        classPrototype,\r\n        typeArguments,\r\n        flow.actualFunction.parent, // relative to caller\r\n        makeMap<string,Type>(flow.contextualTypeArguments),\r\n        expression\r\n      );\r\n    }\r\n    if (!classInstance) return module.createUnreachable();\r\n    return this.compileInstantiate(classInstance, expression.arguments, expression);\r\n  }\r\n\r\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\r\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\r\n    var instance = classInstance.constructorInstance;\r\n    if (instance) {\r\n      // do not attempt to compile it if inlined anyway\r\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\r\n      return instance;\r\n    }\r\n\r\n    // clone base constructor if a derived class\r\n    var baseClass = classInstance.base;\r\n    if (baseClass) {\r\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\r\n      instance = new Function(\r\n        CommonSymbols.constructor,\r\n        new FunctionPrototype(\r\n          CommonSymbols.constructor,\r\n          classInstance,\r\n          // declaration is important, i.e. to access optional parameter initializers\r\n          (<FunctionDeclaration>baseCtor.declaration).clone()\r\n        ),\r\n        baseCtor.signature,\r\n        null\r\n      );\r\n\r\n    // otherwise make a default constructor\r\n    } else {\r\n      instance = new Function(\r\n        CommonSymbols.constructor,\r\n        new FunctionPrototype(\r\n          CommonSymbols.constructor,\r\n          classInstance,\r\n          this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\r\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\r\n          )\r\n        ),\r\n        new Signature(null, classInstance.type, classInstance.type),\r\n        null\r\n      );\r\n    }\r\n\r\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\r\n    instance.set(CommonFlags.COMPILED);\r\n    instance.prototype.setResolvedInstance(\"\", instance);\r\n    classInstance.constructorInstance = instance;\r\n    var previousFlow = this.currentFlow;\r\n    this.currentFlow = instance.flow;\r\n\r\n    // generate body\r\n    var signature = instance.signature;\r\n    var module = this.module;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n    var stmts = new Array<ExpressionRef>();\r\n\r\n    // {\r\n    //   if (!this) this = <ALLOC>\r\n    //   IF_DERIVED: this = super(this, ...args)\r\n    //   this.a = X\r\n    //   this.b = Y\r\n    //   return this\r\n    // }\r\n    stmts.push(\r\n      module.createIf(\r\n        module.createUnary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\r\n          module.createGetLocal(0, nativeSizeType)\r\n        ),\r\n        module.createSetLocal(0,\r\n          this.makeAllocation(classInstance)\r\n        )\r\n      )\r\n    );\r\n    if (baseClass) {\r\n      let parameterTypes = signature.parameterTypes;\r\n      let numParameters = parameterTypes.length;\r\n      let operands = new Array<ExpressionRef>(1 + numParameters);\r\n      operands[0] = module.createGetLocal(0, nativeSizeType);\r\n      for (let i = 0; i < numParameters; ++i) {\r\n        operands[i + 1] = module.createGetLocal(i + 1, parameterTypes[i].toNativeType());\r\n      }\r\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\r\n      stmts.push(\r\n        module.createSetLocal(0,\r\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands)\r\n        )\r\n      );\r\n    }\r\n    this.makeFieldInitialization(classInstance, stmts);\r\n    stmts.push(\r\n      module.createGetLocal(0, nativeSizeType)\r\n    );\r\n\r\n    // make the function\r\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\r\n    var locals = instance.localsByIndex;\r\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\r\n    var numOperands = 1 + signature.parameterTypes.length;\r\n    var numLocals = locals.length;\r\n    if (numLocals > numOperands) {\r\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\r\n    }\r\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes,\r\n      stmts.length == 1\r\n        ? stmts[0]\r\n        : module.createBlock(null, stmts, nativeSizeType)\r\n    );\r\n    instance.finalize(module, funcRef);\r\n    this.currentFlow = previousFlow;\r\n    return instance;\r\n  }\r\n\r\n  compileInstantiate(classInstance: Class, argumentExpressions: Expression[], reportNode: Node): ExpressionRef {\r\n    var ctor = this.ensureConstructor(classInstance, reportNode);\r\n    var expr = this.compileCallDirect(\r\n      ctor,\r\n      argumentExpressions,\r\n      reportNode,\r\n      this.options.usizeType.toNativeZero(this.module)\r\n    );\r\n    this.currentType = classInstance.type;\r\n    return expr;\r\n  }\r\n\r\n  compileParenthesizedExpression(\r\n    expression: ParenthesizedExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    // does not change types, just order\r\n    return this.compileExpression(\r\n      expression.expression,\r\n      contextualType,\r\n      ConversionKind.NONE,\r\n      WrapMode.NONE\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Compiles a property access in the specified context.\r\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\r\n   *  precomputes them according to context.\r\n   */\r\n  compilePropertyAccessExpression(\r\n    propertyAccess: PropertyAccessExpression,\r\n    contextualType: Type,\r\n    retainConstantType: bool\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    this.maybeCompileEnclosingSource(propertyAccess);\r\n\r\n    var target = this.resolver.resolvePropertyAccessExpression(propertyAccess, flow, contextualType); // reports\r\n    if (!target) return module.createUnreachable();\r\n\r\n    switch (target.kind) {\r\n      case ElementKind.GLOBAL: { // static field\r\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\r\n          return module.createUnreachable();\r\n        }\r\n        let globalType = (<Global>target).type;\r\n        assert(globalType != Type.void);\r\n        if ((<Global>target).is(CommonFlags.INLINED)) {\r\n          return this.compileInlineConstant(<Global>target, contextualType, retainConstantType);\r\n        }\r\n        this.currentType = globalType;\r\n        return module.createGetGlobal((<Global>target).internalName, globalType.toNativeType());\r\n      }\r\n      case ElementKind.ENUMVALUE: { // enum value\r\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\r\n        if (!this.compileEnum(<Enum>theEnum)) {\r\n          this.currentType = Type.i32;\r\n          return this.module.createUnreachable();\r\n        }\r\n        this.currentType = Type.i32;\r\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\r\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\r\n          return module.createI32(i64_low((<EnumValue>target).constantIntegerValue));\r\n        }\r\n        return module.createGetGlobal((<EnumValue>target).internalName, NativeType.I32);\r\n      }\r\n      case ElementKind.FIELD: { // instance field\r\n        assert((<Field>target).memoryOffset >= 0);\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          assert(this.resolver.currentThisExpression),\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        this.currentType = (<Field>target).type;\r\n        return module.createLoad(\r\n          (<Field>target).type.byteSize,\r\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n          thisExpr,\r\n          (<Field>target).type.toNativeType(),\r\n          (<Field>target).memoryOffset\r\n        );\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\r\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\r\n        if (getterPrototype) {\r\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\r\n          if (getter) return this.compileCallDirect(getter, [], propertyAccess, 0);\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      case ElementKind.PROPERTY: { // instance property\r\n        let getterInstance = assert((<Property>target).getterInstance);\r\n        return this.compileCallDirect(getterInstance, [], propertyAccess,\r\n          this.compileExpressionRetainType(\r\n            assert(this.resolver.currentThisExpression),\r\n            this.options.usizeType,\r\n            WrapMode.NONE\r\n          )\r\n        );\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.error(\r\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\r\n          propertyAccess.range, (<FunctionPrototype>target).name\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    this.error(\r\n      DiagnosticCode.Operation_not_supported,\r\n      propertyAccess.range\r\n    );\r\n    return module.createUnreachable();\r\n  }\r\n\r\n  private compileGetter(target: PropertyPrototype, reportNode: Node): ExpressionRef {\r\n    var prototype = target.getterPrototype;\r\n    if (prototype) {\r\n      let instance = this.resolver.resolveFunction(prototype, null);\r\n      if (!instance) return this.module.createUnreachable();\r\n      let signature = instance.signature;\r\n      if (!this.checkCallSignature( // reports\r\n        signature,\r\n        0,\r\n        instance.is(CommonFlags.INSTANCE),\r\n        reportNode\r\n      )) {\r\n        return this.module.createUnreachable();\r\n      }\r\n      if (instance.is(CommonFlags.INSTANCE)) {\r\n        let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\r\n        let thisExpression = assert(this.resolver.currentThisExpression); //!!!\r\n        let thisExpr = this.compileExpressionRetainType(\r\n          thisExpression,\r\n          this.options.usizeType,\r\n          WrapMode.NONE\r\n        );\r\n        this.currentType = signature.returnType;\r\n        return this.compileCallDirect(instance, [], reportNode, thisExpr);\r\n      } else {\r\n        this.currentType = signature.returnType;\r\n        return this.compileCallDirect(instance, [], reportNode, 0);\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\r\n        reportNode.range, (<PropertyPrototype>target).name, (<PropertyPrototype>target).parent.toString()\r\n      );\r\n      return this.module.createUnreachable();\r\n    }\r\n  }\r\n\r\n  compileTernaryExpression(expression: TernaryExpression, contextualType: Type): ExpressionRef {\r\n    var ifThen = expression.ifThen;\r\n    var ifElse = expression.ifElse;\r\n    var outerFlow = this.currentFlow;\r\n\r\n    var condExpr = this.makeIsTrueish(\r\n      this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\r\n      this.currentType\r\n    );\r\n\r\n    // Try to eliminate unnecesssary branches if the condition is constant\r\n    var condExprPrecomp = this.module.precomputeExpression(condExpr);\r\n    if (\r\n      getExpressionId(condExprPrecomp) == ExpressionId.Const &&\r\n      getExpressionType(condExprPrecomp) == NativeType.I32\r\n    ) {\r\n      return getConstValueI32(condExprPrecomp)\r\n        ? this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE)\r\n        : this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\r\n\r\n    // Otherwise recompile to the original and let the optimizer decide\r\n    } else /* if (condExpr != condExprPrecomp) <- not guaranteed */ {\r\n      condExpr = this.makeIsTrueish(\r\n        this.compileExpressionRetainType(expression.condition, Type.bool, WrapMode.NONE),\r\n        this.currentType\r\n      );\r\n    }\r\n\r\n    var ifThenFlow = outerFlow.fork();\r\n    this.currentFlow = ifThenFlow;\r\n    var ifThenExpr = this.compileExpressionRetainType(ifThen, contextualType, WrapMode.NONE);\r\n    var ifThenType = this.currentType;\r\n    ifThenFlow.freeScopedLocals();\r\n\r\n    var ifElseFlow = outerFlow.fork();\r\n    this.currentFlow = ifElseFlow;\r\n    var ifElseExpr = this.compileExpressionRetainType(ifElse, contextualType, WrapMode.NONE);\r\n    var ifElseType = this.currentType;\r\n    ifElseFlow.freeScopedLocals();\r\n    this.currentFlow = outerFlow;\r\n\r\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\r\n\r\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\r\n    if (!commonType) {\r\n      this.error(\r\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n        expression.range, ifThenType.toString(), ifElseType.toString()\r\n      );\r\n      this.currentType = contextualType;\r\n      return this.module.createUnreachable();\r\n    }\r\n    ifThenExpr = this.convertExpression(\r\n      ifThenExpr,\r\n      ifThenType,\r\n      commonType,\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE,\r\n      ifThen\r\n    );\r\n    ifElseExpr = this.convertExpression(\r\n      ifElseExpr,\r\n      ifElseType,\r\n      commonType,\r\n      ConversionKind.IMPLICIT,\r\n      WrapMode.NONE,\r\n      ifElse\r\n    );\r\n    this.currentType = commonType;\r\n    return this.module.createIf(condExpr, ifThenExpr, ifElseExpr);\r\n  }\r\n\r\n  compileUnaryPostfixExpression(expression: UnaryPostfixExpression, contextualType: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n\r\n    // make a getter for the expression (also obtains the type)\r\n    var getValue = this.compileExpression( // reports\r\n      expression.operand,\r\n      contextualType == Type.void\r\n        ? Type.i32\r\n        : contextualType,\r\n      ConversionKind.NONE,\r\n      WrapMode.NONE\r\n    );\r\n\r\n    // shortcut if compiling the getter already failed\r\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\r\n\r\n    var currentType = this.currentType;\r\n\r\n    // if the value isn't dropped, a temp. local is required to remember the original value\r\n    var tempLocal: Local | null = null;\r\n    if (contextualType != Type.void) {\r\n      tempLocal = flow.getTempLocal(currentType, false);\r\n      getValue = module.createTeeLocal(\r\n        tempLocal.index,\r\n        getValue\r\n      );\r\n    }\r\n\r\n    var calcValue: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS_PLUS: {\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.AddI32,\r\n              getValue,\r\n              module.createI32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classReference = this.currentType.classReference;\r\n              if (classReference) {\r\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\r\n                if (overload) {\r\n                  calcValue = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\r\n                  break;\r\n                }\r\n              }\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            calcValue = module.createBinary(\r\n              options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              getValue,\r\n              currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.AddI64,\r\n              getValue,\r\n              module.createI64(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.AddF32,\r\n              getValue,\r\n              module.createF32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.AddF64,\r\n              getValue,\r\n              module.createF64(1)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        switch (currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.SubI32,\r\n              getValue,\r\n              module.createI32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.USIZE: {\r\n            // check operator overload\r\n            if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n              let classReference = this.currentType.classReference;\r\n              if (classReference) {\r\n                let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\r\n                if (overload) {\r\n                  calcValue = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\r\n                  break;\r\n                }\r\n              }\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                expression.range\r\n              );\r\n              return module.createUnreachable();\r\n            }\r\n          }\r\n          case TypeKind.ISIZE: {\r\n            let options = this.options;\r\n            calcValue = module.createBinary(\r\n              options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              getValue,\r\n              currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.SubI64,\r\n              getValue,\r\n              module.createI64(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.SubF32,\r\n              getValue,\r\n              module.createF32(1)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            calcValue = module.createBinary(\r\n              BinaryOp.SubF64,\r\n              getValue,\r\n              module.createF64(1)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            return module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n\r\n    // simplify if dropped anyway\r\n    if (!tempLocal) {\r\n      this.currentType = Type.void;\r\n      return this.compileAssignmentWithValue(expression.operand,\r\n        calcValue,\r\n        false\r\n      );\r\n    }\r\n\r\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\r\n    var setValue = this.compileAssignmentWithValue(expression.operand,\r\n      calcValue, // also tees getValue to tempLocal\r\n      false\r\n    );\r\n\r\n    this.currentType = tempLocal.type;\r\n    flow.freeTempLocal(tempLocal);\r\n    var nativeType = tempLocal.type.toNativeType();\r\n\r\n    return module.createBlock(null, [\r\n      setValue,\r\n      module.createGetLocal(tempLocal.index, nativeType)\r\n    ], nativeType); // result of 'x++' / 'x--' might overflow\r\n  }\r\n\r\n  compileUnaryPrefixExpression(\r\n    expression: UnaryPrefixExpression,\r\n    contextualType: Type\r\n  ): ExpressionRef {\r\n    var module = this.module;\r\n    var compound = false;\r\n    var expr: ExpressionRef;\r\n\r\n    switch (expression.operator) {\r\n      case Token.PLUS: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        // nop\r\n        break;\r\n      }\r\n      case Token.MINUS: {\r\n        if (expression.operand.kind == NodeKind.LITERAL && (\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\r\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\r\n        )) {\r\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\r\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, true);\r\n          // compileExpression normally does this:\r\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\r\n          break;\r\n        }\r\n\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.SubI32, module.createI32(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              this.currentType.toNativeZero(module),\r\n              expr\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, module.createI64(0), expr);\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createUnary(UnaryOp.NegF32, expr);\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createUnary(UnaryOp.NegF64, expr);\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.PLUS_PLUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.AddI32, expr, this.module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.AddI64\r\n                : BinaryOp.AddI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.AddI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.AddF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.AddF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.MINUS_MINUS: {\r\n        compound = true;\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.SubI32, expr, module.createI32(1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.SubI64\r\n                : BinaryOp.SubI32,\r\n              expr,\r\n              this.currentType.toNativeOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.SubI64, expr, module.createI64(1));\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            expr = module.createBinary(BinaryOp.SubF32, expr, module.createF32(1));\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createBinary(BinaryOp.SubF64, expr, module.createF64(1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.EXCLAMATION: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          // allow '!' for references even without an overload\r\n        }\r\n\r\n        expr = this.makeIsFalseish(expr, this.currentType);\r\n        this.currentType = Type.bool;\r\n        break;\r\n      }\r\n      case Token.TILDE: {\r\n        expr = this.compileExpression(\r\n          expression.operand,\r\n          contextualType == Type.void\r\n            ? Type.i32\r\n            : contextualType.is(TypeFlags.FLOAT)\r\n              ? Type.i64\r\n              : contextualType,\r\n          ConversionKind.NONE,\r\n          WrapMode.NONE\r\n        );\r\n\r\n        // check operator overload\r\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\r\n          let classReference = this.currentType.classReference;\r\n          if (classReference) {\r\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\r\n            if (overload) {\r\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\r\n              break;\r\n            }\r\n          }\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            expression.range\r\n          );\r\n          return module.createUnreachable();\r\n        } else {\r\n          expr = this.convertExpression(\r\n            expr,\r\n            this.currentType, this.currentType.intType,\r\n            ConversionKind.IMPLICIT, WrapMode.NONE,\r\n            expression.operand\r\n          );\r\n        }\r\n\r\n        switch (this.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createBinary(BinaryOp.XorI32, expr, module.createI32(-1));\r\n            break;\r\n          }\r\n          case TypeKind.USIZE:\r\n          case TypeKind.ISIZE: {\r\n            expr = module.createBinary(\r\n              this.options.isWasm64\r\n                ? BinaryOp.XorI64\r\n                : BinaryOp.XorI32,\r\n              expr,\r\n              this.currentType.toNativeNegOne(module)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createBinary(BinaryOp.XorI64, expr, module.createI64(-1, -1));\r\n            break;\r\n          }\r\n          default: {\r\n            assert(false);\r\n            expr = module.createUnreachable();\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPEOF: {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          expression.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createUnreachable();\r\n      }\r\n    }\r\n    return compound\r\n      ? this.compileAssignmentWithValue(expression.operand, expr, contextualType != Type.void)\r\n      : expr;\r\n  }\r\n\r\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\r\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    switch (type.kind) {\r\n      case TypeKind.I8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.createUnary(UnaryOp.ExtendI8ToI32, expr)\r\n            : module.createBinary(BinaryOp.ShrI32,\r\n                module.createBinary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.createI32(24)\r\n                ),\r\n                module.createI32(24)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.I16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\r\n            ? module.createUnary(UnaryOp.ExtendI16ToI32, expr)\r\n            : module.createBinary(BinaryOp.ShrI32,\r\n                module.createBinary(BinaryOp.ShlI32,\r\n                  expr,\r\n                  module.createI32(16)\r\n                ),\r\n                module.createI32(16)\r\n              );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U8: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0xff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.U16: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          expr = module.createBinary(BinaryOp.AndI32,\r\n            expr,\r\n            module.createI32(0xffff)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n      case TypeKind.BOOL: {\r\n        if (flow.canOverflow(expr, type)) {\r\n          // bool is special in that it compares to 0 instead of masking with 0x1\r\n          expr = module.createBinary(BinaryOp.NeI32,\r\n            expr,\r\n            module.createI32(0)\r\n          );\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Creates a comparison whether an expression is 'false' in a broader sense. */\r\n  makeIsFalseish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return module.createUnary(UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.createUnary(UnaryOp.EqzI64, expr);\r\n      }\r\n      case TypeKind.USIZE: // TODO: strings?\r\n      case TypeKind.ISIZE: {\r\n        return module.createUnary(type.size == 64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32, expr);\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.createBinary(BinaryOp.EqF32, expr, module.createF32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.createBinary(BinaryOp.EqF64, expr, module.createF64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createI32(1);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\r\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\r\n    var module = this.module;\r\n    switch (type.kind) {\r\n      case TypeKind.I8:\r\n      case TypeKind.I16:\r\n      case TypeKind.U8:\r\n      case TypeKind.U16:\r\n      case TypeKind.BOOL: {\r\n        expr = this.ensureSmallIntegerWrap(expr, type);\r\n        // fall-through\r\n      }\r\n      case TypeKind.I32:\r\n      case TypeKind.U32: {\r\n        return expr;\r\n      }\r\n      case TypeKind.I64:\r\n      case TypeKind.U64: {\r\n        return module.createBinary(BinaryOp.NeI64, expr, module.createI64(0));\r\n      }\r\n      case TypeKind.USIZE: // TODO: strings?\r\n      case TypeKind.ISIZE: {\r\n        return type.size == 64\r\n          ? module.createBinary(BinaryOp.NeI64, expr, module.createI64(0))\r\n          : expr;\r\n      }\r\n      case TypeKind.F32: {\r\n        return module.createBinary(BinaryOp.NeF32, expr, module.createF32(0));\r\n      }\r\n      case TypeKind.F64: {\r\n        return module.createBinary(BinaryOp.NeF64, expr, module.createF64(0));\r\n      }\r\n      default: {\r\n        assert(false);\r\n        return module.createI32(0);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\r\n  makeAllocation(classInstance: Class): ExpressionRef {\r\n    var program = this.program;\r\n    assert(classInstance.program == program);\r\n    var module = this.module;\r\n    var options = this.options;\r\n\r\n    // __gc_allocate(size, markFn)\r\n    if (program.hasGC && classInstance.type.isManaged(program)) {\r\n      let allocateInstance = assert(program.gcAllocateInstance);\r\n      if (!this.compileFunction(allocateInstance)) return module.createUnreachable();\r\n      this.currentType = classInstance.type;\r\n      return module.createCall(\r\n        allocateInstance.internalName, [\r\n          options.isWasm64\r\n            ? module.createI64(classInstance.currentMemoryOffset)\r\n            : module.createI32(classInstance.currentMemoryOffset),\r\n          module.createI32(\r\n            ensureGCHook(this, classInstance)\r\n          )\r\n        ],\r\n        options.nativeSizeType\r\n      );\r\n\r\n    // memory.allocate(size)\r\n    } else {\r\n      let allocateInstance = program.memoryAllocateInstance;\r\n      if (!allocateInstance || !this.compileFunction(allocateInstance)) return module.createUnreachable();\r\n      this.currentType = classInstance.type;\r\n      return module.createCall(\r\n        allocateInstance.internalName, [\r\n          options.isWasm64\r\n            ? module.createI64(classInstance.currentMemoryOffset)\r\n            : module.createI32(classInstance.currentMemoryOffset)\r\n        ],\r\n        options.nativeSizeType\r\n      );\r\n    }\r\n  }\r\n\r\n  /** Makes the initializers for a class's fields. */\r\n  makeFieldInitialization(classInstance: Class, stmts: ExpressionRef[] = []): ExpressionRef[] {\r\n    var members = classInstance.members;\r\n    if (!members) return [];\r\n\r\n    var module = this.module;\r\n    var flow = this.currentFlow;\r\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\r\n    var thisLocalIndex = isInline\r\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\r\n      : 0;\r\n    var nativeSizeType = this.options.nativeSizeType;\r\n\r\n    for (let member of members.values()) {\r\n      if (\r\n        member.kind != ElementKind.FIELD || // not a field\r\n        member.parent != classInstance      // inherited field\r\n      ) continue;\r\n\r\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\r\n      let fieldType = field.type;\r\n      let nativeFieldType = fieldType.toNativeType();\r\n      let initializerNode = field.prototype.initializerNode;\r\n      if (initializerNode) { // use initializer\r\n        stmts.push(\r\n          module.createStore(fieldType.byteSize,\r\n            module.createGetLocal(thisLocalIndex, nativeSizeType),\r\n            this.compileExpression( // reports\r\n              initializerNode,\r\n              fieldType,\r\n              ConversionKind.IMPLICIT,\r\n              WrapMode.NONE\r\n            ),\r\n            nativeFieldType,\r\n            field.memoryOffset\r\n          )\r\n        );\r\n      } else {\r\n        let parameterIndex = field.prototype.parameterIndex;\r\n        stmts.push(\r\n          module.createStore(fieldType.byteSize,\r\n            module.createGetLocal(thisLocalIndex, nativeSizeType),\r\n            parameterIndex >= 0 // initialized via parameter (here: a local)\r\n              ? module.createGetLocal(\r\n                  isInline\r\n                    ? assert(flow.lookupLocal(field.name)).index\r\n                    : 1 + parameterIndex, // this is local 0\r\n                  nativeFieldType\r\n                )\r\n              : fieldType.toNativeZero(module),\r\n            nativeFieldType,\r\n            field.memoryOffset\r\n          )\r\n        );\r\n      }\r\n    }\r\n    return stmts;\r\n  }\r\n\r\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\r\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\r\n    var parentFunction = this.currentFlow.parentFunction;\r\n    var source = range.source;\r\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\r\n    range.debugInfoRef = expr;\r\n    parentFunction.debugLocations.push(range);\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\nfunction mangleImportName(\r\n  element: Element,\r\n  declaration: DeclarationStatement\r\n): void {\r\n  // by default, use the file name as the module name\r\n  mangleImportName_moduleName = declaration.range.source.simplePath;\r\n  // and the internal name of the element within that file as the element name\r\n  mangleImportName_elementName = mangleInternalName(\r\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\r\n  );\r\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\r\n\r\n  var program = element.program;\r\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\r\n  var args = decorator.arguments;\r\n  if (args && args.length) {\r\n    let arg = args[0];\r\n    // if one argument is given, override just the element name\r\n    // if two arguments are given, override both module and element name\r\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\r\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\r\n      if (args.length >= 2) {\r\n        arg = args[1];\r\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\r\n          mangleImportName_moduleName = mangleImportName_elementName;\r\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\r\n          if (args.length > 2) {\r\n            program.error(\r\n              DiagnosticCode.Expected_0_arguments_but_got_1,\r\n              decorator.range, \"2\", args.length.toString()\r\n            );\r\n          }\r\n        } else {\r\n          program.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            arg.range\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      program.error(\r\n        DiagnosticCode.String_literal_expected,\r\n        arg.range\r\n      );\r\n    }\r\n  } else {\r\n    program.error(\r\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n      decorator.range, \"1\", \"0\"\r\n    );\r\n  }\r\n}\r\n\r\nvar mangleImportName_moduleName: string;\r\nvar mangleImportName_elementName: string;\r\n\r\n/** Special compiler symbols. */\r\nnamespace CompilerSymbols {\r\n  /** Module started global. Used if an explicit start function is present. */\r\n  export const started = \"~lib/started\";\r\n  /** Argument count global. Used to call trampolines for varargs functions. */\r\n  export const argc = \"~lib/argc\";\r\n  /** Argument count setter. Exported for use by host calls. */\r\n  export const setargc = \"~lib/setargc\";\r\n}\r\n","/**\r\n * Generated from diagnosticsMessages.json. Do not edit.\r\n * @module diagnostics\r\n *//***/\r\n\r\n/* tslint:disable:max-line-length */\r\n\r\n/** Enum of available diagnostic codes. */\r\nexport enum DiagnosticCode {\r\n  Operation_not_supported = 100,\r\n  Operation_is_unsafe = 101,\r\n  User_defined_0 = 102,\r\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\r\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\r\n  Type_0_cannot_be_changed_to_type_1 = 202,\r\n  Type_0_cannot_be_reinterpreted_as_type_1 = 203,\r\n  Basic_type_0_cannot_be_nullable = 204,\r\n  Cannot_export_a_mutable_global = 205,\r\n  Compiling_constant_with_non_constant_initializer_as_mutable = 206,\r\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\r\n  Unmanaged_classes_cannot_implement_interfaces = 208,\r\n  Invalid_regular_expression_flags = 209,\r\n  Implementation_0_must_match_the_signature_1 = 210,\r\n  Class_0_is_sealed_and_cannot_be_extended = 211,\r\n  Decorator_0_is_not_valid_here = 212,\r\n  Duplicate_decorator = 213,\r\n  An_allocator_must_be_declared_to_allocate_memory_Try_importing_allocator_arena_or_allocator_tlsf = 214,\r\n  Optional_parameter_must_have_an_initializer = 215,\r\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\r\n  Function_0_cannot_be_inlined_into_itself = 217,\r\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\r\n  Optional_properties_are_not_supported = 219,\r\n  Expression_must_be_a_compile_time_constant = 220,\r\n  Module_cannot_have_multiple_start_functions = 221,\r\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\r\n  _0_must_be_a_power_of_two = 223,\r\n  Unterminated_string_literal = 1002,\r\n  Identifier_expected = 1003,\r\n  _0_expected = 1005,\r\n  A_file_cannot_have_a_reference_to_itself = 1006,\r\n  Trailing_comma_not_allowed = 1009,\r\n  Unexpected_token = 1012,\r\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\r\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\r\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\r\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\r\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\r\n  _0_modifier_cannot_be_used_here = 1042,\r\n  A_rest_parameter_cannot_be_optional = 1047,\r\n  A_rest_parameter_cannot_have_an_initializer = 1048,\r\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\r\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\r\n  A_get_accessor_cannot_have_parameters = 1054,\r\n  Enum_member_must_have_initializer = 1061,\r\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\r\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\r\n  An_accessor_cannot_have_type_parameters = 1094,\r\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\r\n  Type_parameter_list_cannot_be_empty = 1098,\r\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\r\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\r\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\r\n  Expression_expected = 1109,\r\n  Type_expected = 1110,\r\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\r\n  Duplicate_label_0 = 1114,\r\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\r\n  Digit_expected = 1124,\r\n  Hexadecimal_digit_expected = 1125,\r\n  Unexpected_end_of_text = 1126,\r\n  Invalid_character = 1127,\r\n  _case_or_default_expected = 1130,\r\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\r\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\r\n  Type_argument_expected = 1140,\r\n  String_literal_expected = 1141,\r\n  Line_break_not_permitted_here = 1142,\r\n  Declaration_expected = 1146,\r\n  _const_declarations_must_be_initialized = 1155,\r\n  Unterminated_regular_expression_literal = 1161,\r\n  Interface_declaration_cannot_have_implements_clause = 1176,\r\n  Binary_digit_expected = 1177,\r\n  Octal_digit_expected = 1178,\r\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\r\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\r\n  Unterminated_Unicode_escape_sequence = 1199,\r\n  Decorators_are_not_valid_here = 1206,\r\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\r\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\r\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\r\n  A_class_may_only_extend_another_class = 1311,\r\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\r\n  Duplicate_identifier_0 = 2300,\r\n  Cannot_find_name_0 = 2304,\r\n  Module_0_has_no_exported_member_1 = 2305,\r\n  Generic_type_0_requires_1_type_argument_s = 2314,\r\n  Type_0_is_not_generic = 2315,\r\n  Type_0_is_not_assignable_to_type_1 = 2322,\r\n  Index_signature_is_missing_in_type_0 = 2329,\r\n  _this_cannot_be_referenced_in_current_location = 2332,\r\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\r\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\r\n  Property_0_does_not_exist_on_type_1 = 2339,\r\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\r\n  Cannot_use_new_with_an_expression_whose_type_lacks_a_construct_signature = 2351,\r\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\r\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\r\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\r\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\r\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\r\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\r\n  _get_and_set_accessor_must_have_the_same_type = 2380,\r\n  Constructor_implementation_is_missing = 2390,\r\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\r\n  Multiple_constructor_implementations_are_not_allowed = 2392,\r\n  Duplicate_function_implementation = 2393,\r\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\r\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\r\n  Type_0_has_no_property_1 = 2460,\r\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\r\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\r\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\r\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\r\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\r\n  Index_signature_in_type_0_only_permits_reading = 2542,\r\n  Expected_0_arguments_but_got_1 = 2554,\r\n  Expected_at_least_0_arguments_but_got_1 = 2555,\r\n  Expected_0_type_arguments_but_got_1 = 2558,\r\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\r\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\r\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\r\n  Namespace_0_has_no_exported_member_1 = 2694,\r\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\r\n  Duplicate_property_0 = 2718,\r\n  File_0_not_found = 6054,\r\n  Numeric_separators_are_not_allowed_here = 6188,\r\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\r\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\r\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\r\n}\r\n\r\n/** Translates a diagnostic code to its respective string. */\r\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\r\n  switch (code) {\r\n    case 100: return \"Operation not supported.\";\r\n    case 101: return \"Operation is unsafe.\";\r\n    case 102: return \"User-defined: {0}\";\r\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\r\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\r\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\r\n    case 203: return \"Type '{0}' cannot be reinterpreted as type '{1}'.\";\r\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\r\n    case 205: return \"Cannot export a mutable global.\";\r\n    case 206: return \"Compiling constant with non-constant initializer as mutable.\";\r\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\r\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\r\n    case 209: return \"Invalid regular expression flags.\";\r\n    case 210: return \"Implementation '{0}' must match the signature '{1}'.\";\r\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\r\n    case 212: return \"Decorator '{0}' is not valid here.\";\r\n    case 213: return \"Duplicate decorator.\";\r\n    case 214: return \"An allocator must be declared to allocate memory. Try importing allocator/arena or allocator/tlsf.\";\r\n    case 215: return \"Optional parameter must have an initializer.\";\r\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\r\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\r\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\r\n    case 219: return \"Optional properties are not supported.\";\r\n    case 220: return \"Expression must be a compile-time constant.\";\r\n    case 221: return \"Module cannot have multiple start functions.\";\r\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\r\n    case 223: return \"'{0}' must be a power of two.\";\r\n    case 1002: return \"Unterminated string literal.\";\r\n    case 1003: return \"Identifier expected.\";\r\n    case 1005: return \"'{0}' expected.\";\r\n    case 1006: return \"A file cannot have a reference to itself.\";\r\n    case 1009: return \"Trailing comma not allowed.\";\r\n    case 1012: return \"Unexpected token.\";\r\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\r\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\r\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\r\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\r\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\r\n    case 1042: return \"'{0}' modifier cannot be used here.\";\r\n    case 1047: return \"A rest parameter cannot be optional.\";\r\n    case 1048: return \"A rest parameter cannot have an initializer.\";\r\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\r\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\r\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\r\n    case 1061: return \"Enum member must have initializer.\";\r\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\r\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\r\n    case 1094: return \"An accessor cannot have type parameters.\";\r\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\r\n    case 1098: return \"Type parameter list cannot be empty.\";\r\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\r\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\r\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\r\n    case 1109: return \"Expression expected.\";\r\n    case 1110: return \"Type expected.\";\r\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\r\n    case 1114: return \"Duplicate label '{0}'.\";\r\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\r\n    case 1124: return \"Digit expected.\";\r\n    case 1125: return \"Hexadecimal digit expected.\";\r\n    case 1126: return \"Unexpected end of text.\";\r\n    case 1127: return \"Invalid character.\";\r\n    case 1130: return \"'case' or 'default' expected.\";\r\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\r\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\r\n    case 1140: return \"Type argument expected.\";\r\n    case 1141: return \"String literal expected.\";\r\n    case 1142: return \"Line break not permitted here.\";\r\n    case 1146: return \"Declaration expected.\";\r\n    case 1155: return \"'const' declarations must be initialized.\";\r\n    case 1161: return \"Unterminated regular expression literal.\";\r\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\r\n    case 1177: return \"Binary digit expected.\";\r\n    case 1178: return \"Octal digit expected.\";\r\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\r\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\r\n    case 1199: return \"Unterminated Unicode escape sequence.\";\r\n    case 1206: return \"Decorators are not valid here.\";\r\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\r\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\r\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\r\n    case 1311: return \"A class may only extend another class.\";\r\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\r\n    case 2300: return \"Duplicate identifier '{0}'.\";\r\n    case 2304: return \"Cannot find name '{0}'.\";\r\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\r\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\r\n    case 2315: return \"Type '{0}' is not generic.\";\r\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\r\n    case 2329: return \"Index signature is missing in type '{0}'.\";\r\n    case 2332: return \"'this' cannot be referenced in current location.\";\r\n    case 2335: return \"'super' can only be referenced in a derived class.\";\r\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\r\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\r\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\r\n    case 2351: return \"Cannot use 'new' with an expression whose type lacks a construct signature.\";\r\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\r\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\r\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\r\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\r\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\r\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\r\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\r\n    case 2390: return \"Constructor implementation is missing.\";\r\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\r\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\r\n    case 2393: return \"Duplicate function implementation.\";\r\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\r\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\r\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\r\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\r\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\r\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\r\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\r\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\r\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\r\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\r\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\r\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\r\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\r\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\r\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\r\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\r\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\r\n    case 2718: return \"Duplicate property '{0}'.\";\r\n    case 6054: return \"File '{0}' not found.\";\r\n    case 6188: return \"Numeric separators are not allowed here.\";\r\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\r\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\r\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\r\n    default: return \"\";\r\n  }\r\n}\r\n","/**\r\n * A control flow analyzer.\r\n * @module flow\r\n *//***/\r\n\r\nimport {\r\n  Type,\r\n  TypeFlags,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  Local,\r\n  Function,\r\n  Element,\r\n  ElementKind,\r\n  Global\r\n} from \"./program\";\r\n\r\nimport {\r\n  NativeType,\r\n  ExpressionId,\r\n  ExpressionRef,\r\n\r\n  getExpressionId,\r\n  getGetLocalIndex,\r\n  isTeeLocal,\r\n  getSetLocalValue,\r\n  getGetGlobalName,\r\n  getBinaryOp,\r\n  BinaryOp,\r\n  getBinaryLeft,\r\n  getConstValueI32,\r\n  getBinaryRight,\r\n  getUnaryOp,\r\n  UnaryOp,\r\n  getExpressionType,\r\n  getConstValueI64Low,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getLoadBytes,\r\n  isLoadSigned,\r\n  getBlockName,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getCallTarget\r\n} from \"./module\";\r\n\r\nimport {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node\r\n} from \"./ast\";\r\n\r\nimport {\r\n  bitsetIs,\r\n  bitsetSet\r\n} from \"./util\";\r\n\r\n/** Control flow flags indicating specific conditions. */\r\nexport const enum FlowFlags {\r\n  /** No specific conditions. */\r\n  NONE = 0,\r\n\r\n  // categorical\r\n\r\n  /** This flow returns. */\r\n  RETURNS = 1 << 0,\r\n  /** This flow returns a wrapped value. */\r\n  RETURNS_WRAPPED = 1 << 1,\r\n  /** This flow throws. */\r\n  THROWS = 1 << 2,\r\n  /** This flow breaks. */\r\n  BREAKS = 1 << 3,\r\n  /** This flow continues. */\r\n  CONTINUES = 1 << 4,\r\n  /** This flow allocates. Constructors only. */\r\n  ALLOCATES = 1 << 5,\r\n  /** This flow calls super. Constructors only. */\r\n  CALLS_SUPER = 1 << 6,\r\n\r\n  // conditional\r\n\r\n  /** This flow conditionally returns in a child flow. */\r\n  CONDITIONALLY_RETURNS = 1 << 7,\r\n  /** This flow conditionally throws in a child flow. */\r\n  CONDITIONALLY_THROWS = 1 << 8,\r\n  /** This flow conditionally breaks in a child flow. */\r\n  CONDITIONALLY_BREAKS = 1 << 9,\r\n  /** This flow conditionally continues in a child flow. */\r\n  CONDITIONALLY_CONTINUES = 1 << 10,\r\n  /** This flow conditionally allocates in a child flow. Constructors only. */\r\n  CONDITIONALLY_ALLOCATES = 1 << 11,\r\n\r\n  // special\r\n\r\n  /** This is an inlining flow. */\r\n  INLINE_CONTEXT = 1 << 12,\r\n  /** This is a flow with explicitly disabled bounds checking. */\r\n  UNCHECKED_CONTEXT = 1 << 13,\r\n\r\n  // masks\r\n\r\n  /** Any terminating flag. */\r\n  ANY_TERMINATING = FlowFlags.RETURNS\r\n                  | FlowFlags.THROWS\r\n                  | FlowFlags.BREAKS\r\n                  | FlowFlags.CONTINUES,\r\n\r\n  /** Any categorical flag. */\r\n  ANY_CATEGORICAL = FlowFlags.RETURNS\r\n                  | FlowFlags.RETURNS_WRAPPED\r\n                  | FlowFlags.THROWS\r\n                  | FlowFlags.BREAKS\r\n                  | FlowFlags.CONTINUES\r\n                  | FlowFlags.ALLOCATES\r\n                  | FlowFlags.CALLS_SUPER,\r\n\r\n  /** Any conditional flag. */\r\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\r\n                  | FlowFlags.CONDITIONALLY_THROWS\r\n                  | FlowFlags.CONDITIONALLY_BREAKS\r\n                  | FlowFlags.CONDITIONALLY_CONTINUES\r\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\r\n}\r\n\r\n/** A control flow evaluator. */\r\nexport class Flow {\r\n\r\n  /** Parent flow. */\r\n  parent: Flow | null;\r\n  /** Flow flags indicating specific conditions. */\r\n  flags: FlowFlags;\r\n  /** Function this flow belongs to. */\r\n  parentFunction: Function;\r\n  /** The label we break to when encountering a continue statement. */\r\n  continueLabel: string | null;\r\n  /** The label we break to when encountering a break statement. */\r\n  breakLabel: string | null;\r\n  /** The current return type. */\r\n  returnType: Type;\r\n  /** The current contextual type arguments. */\r\n  contextualTypeArguments: Map<string,Type> | null;\r\n  /** Scoped local variables. */\r\n  scopedLocals: Map<string,Local> | null = null;\r\n  /** Local variable wrap states for the first 64 locals. */\r\n  wrappedLocals: I64;\r\n  /** Local variable wrap states for locals with index >= 64. */\r\n  wrappedLocalsExt: I64[] | null;\r\n  /** Function being inlined, when inlining. */\r\n  inlineFunction: Function | null;\r\n  /** The label we break to when encountering a return statement, when inlining. */\r\n  inlineReturnLabel: string | null;\r\n\r\n  /** Creates the parent flow of the specified function. */\r\n  static create(parentFunction: Function): Flow {\r\n    var flow = new Flow();\r\n    flow.parent = null;\r\n    flow.flags = FlowFlags.NONE;\r\n    flow.parentFunction = parentFunction;\r\n    flow.continueLabel = null;\r\n    flow.breakLabel = null;\r\n    flow.returnType = parentFunction.signature.returnType;\r\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\r\n    flow.wrappedLocals = i64_new(0);\r\n    flow.wrappedLocalsExt = null;\r\n    flow.inlineFunction = null;\r\n    flow.inlineReturnLabel = null;\r\n    return flow;\r\n  }\r\n\r\n  /** Creates an inline flow within `currentFunction`. */\r\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\r\n    var flow = Flow.create(parentFunction);\r\n    flow.set(FlowFlags.INLINE_CONTEXT);\r\n    flow.inlineFunction = inlineFunction;\r\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\r\n    flow.returnType = inlineFunction.signature.returnType;\r\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\r\n    return flow;\r\n  }\r\n\r\n  private constructor() { }\r\n\r\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\r\n  get actualFunction(): Function {\r\n    return this.inlineFunction || this.parentFunction;\r\n  }\r\n\r\n  /** Tests if this flow has the specified flag or flags. */\r\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\r\n  /** Tests if this flow has one of the specified flags. */\r\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\r\n  /** Sets the specified flag or flags. */\r\n  set(flag: FlowFlags): void { this.flags |= flag; }\r\n  /** Unsets the specified flag or flags. */\r\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\r\n\r\n  /** Forks this flow to a child flow. */\r\n  fork(): Flow {\r\n    var branch = new Flow();\r\n    branch.parent = this;\r\n    branch.flags = this.flags;\r\n    branch.parentFunction = this.parentFunction;\r\n    branch.continueLabel = this.continueLabel;\r\n    branch.breakLabel = this.breakLabel;\r\n    branch.returnType = this.returnType;\r\n    branch.contextualTypeArguments = this.contextualTypeArguments;\r\n    branch.wrappedLocals = this.wrappedLocals;\r\n    branch.wrappedLocalsExt = this.wrappedLocalsExt ? this.wrappedLocalsExt.slice() : null;\r\n    branch.inlineFunction = this.inlineFunction;\r\n    branch.inlineReturnLabel = this.inlineReturnLabel;\r\n    return branch;\r\n  }\r\n\r\n  /** Gets a free temporary local of the specified type. */\r\n  getTempLocal(type: Type, wrapped: bool = false): Local {\r\n    var parentFunction = this.parentFunction;\r\n    var temps: Local[] | null;\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\r\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\r\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\r\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\r\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (temps && temps.length) {\r\n      local = temps.pop();\r\n      local.type = type;\r\n      local.flags = CommonFlags.NONE;\r\n    } else {\r\n      local = parentFunction.addLocal(type);\r\n    }\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) this.setLocalWrapped(local.index, wrapped);\r\n    return local;\r\n  }\r\n\r\n  /** Frees the temporary local for reuse. */\r\n  freeTempLocal(local: Local): void {\r\n    if (local.is(CommonFlags.INLINED)) return;\r\n    assert(local.index >= 0);\r\n    var parentFunction = this.parentFunction;\r\n    var temps: Local[];\r\n    assert(local.type != null); // internal error\r\n    switch ((<Type>local.type).toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\r\n        break;\r\n      }\r\n      case NativeType.V128: {\r\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    assert(local.index >= 0);\r\n    temps.push(local);\r\n  }\r\n\r\n  /** Gets and immediately frees a temporary local of the specified type. */\r\n  getAndFreeTempLocal(type: Type, wrapped: bool): Local {\r\n    var parentFunction = this.parentFunction;\r\n    var temps: Local[];\r\n    switch (type.toNativeType()) {\r\n      case NativeType.I32: {\r\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\r\n        break;\r\n      }\r\n      case NativeType.I64: {\r\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\r\n        break;\r\n      }\r\n      case NativeType.F32: {\r\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\r\n        break;\r\n      }\r\n      case NativeType.F64: {\r\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\r\n        break;\r\n      }\r\n      case NativeType.V128: {\r\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\r\n        break;\r\n      }\r\n      default: throw new Error(\"concrete type expected\");\r\n    }\r\n    var local: Local;\r\n    if (temps.length) {\r\n      local = temps[temps.length - 1];\r\n      local.type = type;\r\n    } else {\r\n      local = parentFunction.addLocal(type);\r\n      temps.push(local);\r\n    }\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) this.setLocalWrapped(local.index, wrapped);\r\n    return local;\r\n  }\r\n\r\n  /** Adds a new scoped local of the specified name. */\r\n  addScopedLocal(name: string, type: Type, wrapped: bool, reportNode: Node | null = null): Local {\r\n    var scopedLocal = this.getTempLocal(type, false);\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        if (reportNode) {\r\n          this.parentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            reportNode.range\r\n          );\r\n        }\r\n        return existingLocal;\r\n      }\r\n    }\r\n    scopedLocal.set(CommonFlags.SCOPED);\r\n    this.scopedLocals.set(name, scopedLocal);\r\n    if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\r\n      this.setLocalWrapped(scopedLocal.index, wrapped);\r\n    }\r\n    return scopedLocal;\r\n  }\r\n\r\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\r\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\r\n    if (!this.scopedLocals) this.scopedLocals = new Map();\r\n    else {\r\n      let existingLocal = this.scopedLocals.get(name);\r\n      if (existingLocal) {\r\n        if (reportNode) {\r\n          this.parentFunction.program.error(\r\n            DiagnosticCode.Duplicate_identifier_0,\r\n            reportNode.range\r\n          );\r\n        }\r\n        return existingLocal;\r\n      }\r\n    }\r\n    assert(index < this.parentFunction.localsByIndex.length);\r\n    var scopedAlias = new Local(\r\n      name,\r\n      index,\r\n      type,\r\n      this.parentFunction\r\n    );\r\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\r\n    this.scopedLocals.set(name, scopedAlias);\r\n    return scopedAlias;\r\n  }\r\n\r\n  /** Frees this flow's scoped variables and returns its parent flow. */\r\n  freeScopedLocals(): void {\r\n    if (this.scopedLocals) {\r\n      for (let scopedLocal of this.scopedLocals.values()) {\r\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\r\n          this.freeTempLocal(scopedLocal);\r\n        }\r\n      }\r\n      this.scopedLocals = null;\r\n    }\r\n  }\r\n\r\n  /** Looks up the local of the specified name in the current scope. */\r\n  lookupLocal(name: string): Local | null {\r\n    var current: Flow | null = this;\r\n    var scope: Map<String,Local> | null;\r\n    do if ((scope = current.scopedLocals) && (scope.has(name))) return scope.get(name);\r\n    while (current = current.parent);\r\n    return this.parentFunction.localsByName.get(name);\r\n  }\r\n\r\n  /** Looks up the element with the specified name relative to the scope of this flow. */\r\n  lookup(name: string): Element | null {\r\n    var element = this.lookupLocal(name);\r\n    if (element) return element;\r\n    return this.actualFunction.lookup(name);\r\n  }\r\n\r\n  /** Tests if the value of the local at the specified index is considered wrapped. */\r\n  isLocalWrapped(index: i32): bool {\r\n    if (index < 0) return true; // inlined constant\r\n    if (index < 64) return bitsetIs(this.wrappedLocals, index);\r\n    var ext = this.wrappedLocalsExt;\r\n    var i = ((index - 64) / 64) | 0;\r\n    if (!(ext && i < ext.length)) return false;\r\n    return bitsetIs(ext[i], index - (i + 1) * 64);\r\n  }\r\n\r\n  /** Sets if the value of the local at the specified index is considered wrapped. */\r\n  setLocalWrapped(index: i32, wrapped: bool): void {\r\n    if (index < 0) return; // inlined constant\r\n    if (index < 64) {\r\n      this.wrappedLocals = bitsetSet(this.wrappedLocals, index, wrapped);\r\n      return;\r\n    }\r\n    var ext = this.wrappedLocalsExt;\r\n    var i = ((index - 64) / 64) | 0;\r\n    if (!ext) {\r\n      this.wrappedLocalsExt = ext = new Array(i + 1);\r\n      for (let j = 0; j <= i; ++j) ext[j] = i64_new(0);\r\n    } else {\r\n      while (ext.length <= i) ext.push(i64_new(0));\r\n    }\r\n    ext[i] = bitsetSet(ext[i], index - (i + 1) * 64, wrapped);\r\n  }\r\n\r\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\r\n  pushBreakLabel(): string {\r\n    var parentFunction = this.parentFunction;\r\n    var id = parentFunction.nextBreakId++;\r\n    var stack = parentFunction.breakStack;\r\n    if (!stack) parentFunction.breakStack = [ id ];\r\n    else stack.push(id);\r\n    return parentFunction.breakLabel = id.toString(10);\r\n  }\r\n\r\n  /** Pops the most recent break label from the stack. */\r\n  popBreakLabel(): void {\r\n    var parentFunction = this.parentFunction;\r\n    var stack = assert(parentFunction.breakStack);\r\n    var length = assert(stack.length);\r\n    stack.pop();\r\n    if (length > 1) {\r\n      parentFunction.breakLabel = stack[length - 2].toString(10);\r\n    } else {\r\n      parentFunction.breakLabel = null;\r\n      parentFunction.breakStack = null;\r\n    }\r\n  }\r\n\r\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\r\n  inherit(other: Flow): void {\r\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\r\n    this.wrappedLocals = other.wrappedLocals;\r\n    this.wrappedLocalsExt = other.wrappedLocalsExt; // no need to slice because other flow is finished\r\n  }\r\n\r\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\r\n  inheritConditional(other: Flow): void {\r\n    if (other.is(FlowFlags.RETURNS)) {\r\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\r\n    }\r\n    if (other.is(FlowFlags.THROWS)) {\r\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\r\n    }\r\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\r\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\r\n    }\r\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\r\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\r\n    }\r\n    if (other.is(FlowFlags.ALLOCATES)) {\r\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\r\n    }\r\n  }\r\n\r\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\r\n  inheritMutual(left: Flow, right: Flow): void {\r\n    // categorical flags set in both arms\r\n    this.flags |= left.flags & right.flags & FlowFlags.ANY_CATEGORICAL;\r\n\r\n    // conditional flags set in at least one arm\r\n    this.flags |= left.flags & FlowFlags.ANY_CONDITIONAL;\r\n    this.flags |= right.flags & FlowFlags.ANY_CONDITIONAL;\r\n\r\n    // locals wrapped in both arms\r\n    this.wrappedLocals = i64_and(left.wrappedLocals, right.wrappedLocals);\r\n    var leftExt = left.wrappedLocalsExt;\r\n    var rightExt = right.wrappedLocalsExt;\r\n    if (leftExt != null && rightExt != null) {\r\n      let thisExt = this.wrappedLocalsExt;\r\n      let minLength = min(leftExt.length, rightExt.length);\r\n      if (minLength) {\r\n        if (!thisExt) thisExt = new Array(minLength);\r\n        else while (thisExt.length < minLength) thisExt.push(i64_new(0));\r\n        for (let i = 0; i < minLength; ++i) {\r\n          thisExt[i] = i64_and(\r\n            leftExt[i],\r\n            rightExt[i]\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\r\n   * expression might already have overflown and returns `false` only if the operation neglects\r\n   * any possible combination of garbage bits being present.\r\n   */\r\n  canOverflow(expr: ExpressionRef, type: Type): bool {\r\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\r\n    // opportunities here, obviously.\r\n    assert(type != Type.void);\r\n\r\n    // types other than i8, u8, i16, u16 and bool do not overflow\r\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\r\n\r\n    var operand: ExpressionRef;\r\n    switch (getExpressionId(expr)) {\r\n\r\n      // overflows if the local isn't wrapped or the conversion does\r\n      case ExpressionId.GetLocal: {\r\n        let local = this.parentFunction.localsByIndex[getGetLocalIndex(expr)];\r\n        return !this.isLocalWrapped(local.index)\r\n            || canConversionOverflow(local.type, type);\r\n      }\r\n\r\n      // overflows if the value does\r\n      case ExpressionId.SetLocal: { // tee\r\n        assert(isTeeLocal(expr));\r\n        return this.canOverflow(getSetLocalValue(expr), type);\r\n      }\r\n\r\n      // overflows if the conversion does (globals are wrapped on set)\r\n      case ExpressionId.GetGlobal: {\r\n        // TODO: this is inefficient because it has to read a string\r\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGetGlobalName(expr))));\r\n        assert(global.kind == ElementKind.GLOBAL);\r\n        return canConversionOverflow(assert((<Global>global).type), type);\r\n      }\r\n\r\n      case ExpressionId.Binary: {\r\n        switch (getBinaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64:\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64:\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtU32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtU64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64:\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeU32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeU64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64:\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtU32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtU64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64:\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeU32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeU64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: return false;\r\n\r\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\r\n          case BinaryOp.MulI32: {\r\n            return !(\r\n              (\r\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryRight(expr), type)\r\n                  )\r\n                )\r\n              ) || (\r\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                (\r\n                  getConstValueI32(operand) == 0 ||\r\n                  (\r\n                    getConstValueI32(operand) == 1 &&\r\n                    !this.canOverflow(getBinaryLeft(expr), type)\r\n                  )\r\n                )\r\n              )\r\n            );\r\n          }\r\n\r\n          // result won't overflow if one side is a constant less than this type's mask or one side\r\n          // is wrapped\r\n          case BinaryOp.AndI32: {\r\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\r\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\r\n            return !(\r\n              (\r\n                (\r\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              ) || (\r\n                (\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\r\n                ) || !this.canOverflow(operand, type)\r\n              )\r\n            );\r\n          }\r\n\r\n          // overflows if the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShlI32: {\r\n            let shift = 32 - type.size;\r\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\r\n                || getConstValueI32(operand) < shift;\r\n          }\r\n\r\n          // overflows if the value does and the shift doesn't clear potential garbage bits\r\n          case BinaryOp.ShrI32: {\r\n            let shift = 32 - type.size;\r\n            return this.canOverflow(getBinaryLeft(expr), type) && (\r\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\r\n              getConstValueI32(operand) < shift\r\n            );\r\n          }\r\n\r\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\r\n          // wrapped, it can't overflow.\r\n          case BinaryOp.ShrU32: {\r\n            let shift = 32 - type.size;\r\n            return type.is(TypeFlags.SIGNED)\r\n              ? !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) > shift // must clear MSB\r\n                )\r\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\r\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\r\n                  getConstValueI32(operand) >= shift // can leave MSB\r\n                );\r\n          }\r\n\r\n          // overflows if any side does\r\n          case BinaryOp.DivU32:\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemU32: {\r\n            return this.canOverflow(getBinaryLeft(expr), type)\r\n                || this.canOverflow(getBinaryRight(expr), type);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n\r\n          // comparisons do not overflow (result is 0 or 1)\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: return false;\r\n\r\n          // overflow if the maximum result (32) cannot be represented in the target type\r\n          case UnaryOp.ClzI32:\r\n          case UnaryOp.CtzI32:\r\n          case UnaryOp.PopcntI32: return type.size < 7;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the value cannot be represented in the target type\r\n      case ExpressionId.Const: {\r\n        let value: i32 = 0;\r\n        switch (getExpressionType(expr)) {\r\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\r\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\r\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\r\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\r\n          default: assert(false);\r\n        }\r\n        switch (type.kind) {\r\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\r\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\r\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\r\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\r\n          case TypeKind.BOOL: return (value & ~1) != 0;\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if the conversion does\r\n      case ExpressionId.Load: {\r\n        let fromType: Type;\r\n        switch (getLoadBytes(expr)) {\r\n          case 1:  { fromType = isLoadSigned(expr) ? Type.i8 : Type.u8; break; }\r\n          case 2:  { fromType = isLoadSigned(expr) ? Type.i16 : Type.u16; break; }\r\n          default: { fromType = isLoadSigned(expr) ? Type.i32 : Type.u32; break; }\r\n        }\r\n        return canConversionOverflow(fromType, type);\r\n      }\r\n\r\n      // overflows if the result does, which is either\r\n      // - the last expression of the block, by contract, if the block doesn't have a label\r\n      // - the last expression or the value of an inner br if the block has a label (TODO)\r\n      case ExpressionId.Block: {\r\n        if (!getBlockName(expr)) {\r\n          let size = assert(getBlockChildCount(expr));\r\n          let last = getBlockChild(expr, size - 1);\r\n          return this.canOverflow(last, type);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.If: {\r\n        return this.canOverflow(getIfTrue(expr), type)\r\n            || this.canOverflow(assert(getIfFalse(expr)), type);\r\n      }\r\n\r\n      // overflows if either side does\r\n      case ExpressionId.Select: {\r\n        return this.canOverflow(getSelectThen(expr), type)\r\n            || this.canOverflow(getSelectElse(expr), type);\r\n      }\r\n\r\n      // overflows if the call does not return a wrapped value or the conversion does\r\n      case ExpressionId.Call: {\r\n        let program = this.parentFunction.program;\r\n        let instance = assert(program.instancesByName.get(assert(getCallTarget(expr))));\r\n        assert(instance.kind == ElementKind.FUNCTION);\r\n        let returnType = (<Function>instance).signature.returnType;\r\n        return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\r\n            || canConversionOverflow(returnType, type);\r\n      }\r\n\r\n      // doesn't technically overflow\r\n      case ExpressionId.Unreachable: return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\n/** Tests if a conversion from one type to another can technically overflow. */\r\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\r\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\r\n      || fromType.size > toType.size\r\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\r\n}\r\n","/**\r\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\r\n * @module decompiler\r\n *//***/\r\n\r\nimport {\r\n  Module,\r\n  NativeType,\r\n  ExpressionId,\r\n  UnaryOp,\r\n  BinaryOp,\r\n  HostOp,\r\n  FunctionRef,\r\n  ExpressionRef,\r\n  Index,\r\n  getFunctionName,\r\n  getFunctionBody,\r\n  getFunctionParamCount,\r\n  getFunctionParamType,\r\n  getFunctionResultType,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getBlockName,\r\n  getBlockChildCount,\r\n  getBlockChild,\r\n  getIfCondition,\r\n  getIfTrue,\r\n  getIfFalse,\r\n  getLoopName,\r\n  getLoopBody,\r\n  getBreakName,\r\n  getBreakCondition,\r\n  getGetLocalIndex,\r\n  getSetLocalIndex,\r\n  getSetLocalValue,\r\n  getLoadOffset,\r\n  getLoadPtr,\r\n  getStoreOffset,\r\n  getStorePtr,\r\n  getStoreValue,\r\n  getConstValueI32,\r\n  getConstValueI64Low,\r\n  getConstValueI64High,\r\n  getConstValueF32,\r\n  getConstValueF64,\r\n  getUnaryOp,\r\n  getUnaryValue,\r\n  getBinaryOp,\r\n  getBinaryLeft,\r\n  getBinaryRight,\r\n  getSelectThen,\r\n  getSelectElse,\r\n  getSelectCondition,\r\n  getDropValue,\r\n  getReturnValue,\r\n  getHostOp,\r\n  getHostOperand\r\n} from \"./module\";\r\n\r\n// TODO :-)\r\n\r\nexport class Decompiler {\r\n\r\n  static decompile(module: Module): string {\r\n    var decompiler = new Decompiler();\r\n    decompiler.decompile(module);\r\n    return decompiler.finish();\r\n  }\r\n\r\n  text: string[] = [];\r\n  functionId: i32 = 0;\r\n\r\n  constructor() { }\r\n\r\n  /** Decompiles a module to an AST that can then be serialized. */\r\n  decompile(module: Module): void {\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  decompileFunction(func: FunctionRef): void {\r\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\r\n    var body = getFunctionBody(func);\r\n    this.push(\"function \");\r\n    this.push(name);\r\n    this.push(\"(\");\r\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\r\n      if (i > 0) this.push(\", \");\r\n      this.push(\"$\");\r\n      this.push(i.toString(10));\r\n      this.push(\": \");\r\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\r\n    }\r\n    this.push(\"): \");\r\n    this.push(nativeTypeToType(getFunctionResultType(func)));\r\n    this.push(\" \");\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"{\\n\");\r\n    }\r\n    this.decompileExpression(body);\r\n    if (getExpressionId(body) != ExpressionId.Block) {\r\n      this.push(\"\\n}\\n\");\r\n    }\r\n    ++this.functionId;\r\n  }\r\n\r\n  decompileExpression(expr: ExpressionRef): void {\r\n    var id = getExpressionId(expr);\r\n    var type = getExpressionType(expr);\r\n\r\n    var nested: ExpressionRef;\r\n    var string: string | null;\r\n    var i: Index, k: Index;\r\n\r\n    switch (id) {\r\n      case ExpressionId.Block: { // TODO: magic\r\n        if ((string = getBlockName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"{\\n\");\r\n        k = getBlockChildCount(expr);\r\n        for (i = 0; i < k; ++i) {\r\n          this.decompileExpression(getBlockChild(expr, i));\r\n        }\r\n        this.push(\"}\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.If: {\r\n        if (type == NativeType.None) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\") \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          if (nested = getIfFalse(expr)) {\r\n            this.push(\" else \");\r\n            this.decompileExpression(nested);\r\n          }\r\n        } else {\r\n          this.decompileExpression(getIfCondition(expr));\r\n          this.push(\" ? \");\r\n          this.decompileExpression(getIfTrue(expr));\r\n          this.push(\" : \");\r\n          this.decompileExpression(getIfFalse(expr));\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Loop: {\r\n        if ((string = getLoopName(expr)) != null) {\r\n          this.push(string);\r\n          this.push(\": \");\r\n        }\r\n        this.push(\"do \");\r\n        this.decompileExpression(getLoopBody(expr));\r\n        this.push(\"while (0);\\n\");\r\n      }\r\n      case ExpressionId.Break: {\r\n        if (nested = getBreakCondition(expr)) {\r\n          this.push(\"if (\");\r\n          this.decompileExpression(nested);\r\n          this.push(\") \");\r\n        }\r\n        if ((string = getBreakName(expr)) != null) {\r\n          this.push(\"break \");\r\n          this.push(string);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"break;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Switch:\r\n      case ExpressionId.Call:\r\n      case ExpressionId.CallIndirect: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.GetLocal: {\r\n        this.push(\"$\");\r\n        this.push(getGetLocalIndex(expr).toString(10));\r\n        return;\r\n      }\r\n      case ExpressionId.SetLocal: {\r\n        this.push(\"$\");\r\n        this.push(getSetLocalIndex(expr).toString(10));\r\n        this.push(\" = \");\r\n        this.decompileExpression(getSetLocalValue(expr));\r\n        return;\r\n      }\r\n      case ExpressionId.GetGlobal:\r\n      case ExpressionId.SetGlobal: {\r\n        throw new Error(\"not implemented\");\r\n      }\r\n      case ExpressionId.Load: {\r\n        this.push(\"load<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getLoadOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getLoadPtr(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Store: {\r\n        this.push(\"store<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.push(getStoreOffset(expr).toString(10));\r\n        this.push(\" + \");\r\n        this.decompileExpression(getStorePtr(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getStoreValue(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Const: {\r\n        switch (type) {\r\n          case NativeType.I32: {\r\n            this.push(getConstValueI32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.I64: {\r\n            this.push(\r\n              i64_to_string(\r\n                i64_new(\r\n                  getConstValueI64Low(expr),\r\n                  getConstValueI64High(expr)\r\n                )\r\n              )\r\n            );\r\n            return;\r\n          }\r\n          case NativeType.F32: {\r\n            this.push(getConstValueF32(expr).toString(10));\r\n            return;\r\n          }\r\n          case NativeType.F64: {\r\n            this.push(getConstValueF64(expr).toString(10));\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Unary: {\r\n        switch (getUnaryOp(expr)) {\r\n          case UnaryOp.ClzI32: {\r\n            this.push(\"clz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI32: {\r\n            this.push(\"ctz<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI32: {\r\n            this.push(\"popcnt<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NegF32:\r\n          case UnaryOp.NegF64: {\r\n            this.push(\"-\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF32: {\r\n            this.push(\"abs<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF32: {\r\n            this.push(\"ceil<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF32: {\r\n            this.push(\"floor<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32: {\r\n            this.push(\"trunc<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF32: {\r\n            this.push(\"nearest<i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF32: {\r\n            this.push(\"sqrt<f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.EqzI32:\r\n          case UnaryOp.EqzI64: {\r\n            this.push(\"!\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ClzI64: {\r\n            this.push(\"clz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CtzI64: {\r\n            this.push(\"ctz<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.PopcntI64: {\r\n            this.push(\"popcnt<i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.AbsF64: {\r\n            this.push(\"abs<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.CeilF64: {\r\n            this.push(\"ceil<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.FloorF64: {\r\n            this.push(\"floor<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64: {\r\n            this.push(\"trunc<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.NearestF64: {\r\n            this.push(\"nearest<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.SqrtF64: {\r\n            this.push(\"sqrt<f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendI32: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ExtendU32: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.WrapI64: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF32ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI32: {\r\n            this.push(\"<i32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToI64: {\r\n            this.push(\"<i64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU32: {\r\n            this.push(\"<i32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.TruncF64ToU64: {\r\n            this.push(\"<i64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF32: {\r\n            this.push(\"reinterpret<f32,i32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretF64: {\r\n            this.push(\"reinterpret<f64,i64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI32ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF32: {\r\n            this.push(\"<f32><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU32ToF64: {\r\n            this.push(\"<f64><u32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF32: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertI64ToF64: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF32: {\r\n            this.push(\"<f32><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ConvertU64ToF64: {\r\n            this.push(\"<f64><u64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.PromoteF32: {\r\n            this.push(\"<f64>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.DemoteF64: {\r\n            this.push(\"<f32>\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI32: {\r\n            this.push(\"reinterpret<i32,f32>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case UnaryOp.ReinterpretI64: {\r\n            this.push(\"reinterpret<i64,f64>(\");\r\n            this.decompileExpression(getUnaryValue(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Binary: { // TODO: precedence\r\n        switch (getBinaryOp(expr)) {\r\n          case BinaryOp.AddI32:\r\n          case BinaryOp.AddI64:\r\n          case BinaryOp.AddF32:\r\n          case BinaryOp.AddF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" + \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.SubI32:\r\n          case BinaryOp.SubI64:\r\n          case BinaryOp.SubF32:\r\n          case BinaryOp.SubF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" - \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.MulI32:\r\n          case BinaryOp.MulI64:\r\n          case BinaryOp.MulF32:\r\n          case BinaryOp.MulF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" * \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivI32:\r\n          case BinaryOp.DivI64:\r\n          case BinaryOp.DivF32:\r\n          case BinaryOp.DivF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RemI32:\r\n          case BinaryOp.RemI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU32: {\r\n            this.push(\"<i32>(<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.AndI32:\r\n          case BinaryOp.AndI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" & \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.OrI32:\r\n          case BinaryOp.OrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" | \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.XorI32:\r\n          case BinaryOp.XorI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" ^ \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShlI32:\r\n          case BinaryOp.ShlI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" << \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrU32:\r\n          case BinaryOp.ShrU64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >>> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.ShrI32:\r\n          case BinaryOp.ShrI64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >> \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI32: {\r\n            this.push(\"rotl<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI32: {\r\n            this.push(\"rotr<i32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.EqI32:\r\n          case BinaryOp.EqI64:\r\n          case BinaryOp.EqF32:\r\n          case BinaryOp.EqF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" == \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.NeI32:\r\n          case BinaryOp.NeI64:\r\n          case BinaryOp.NeF32:\r\n          case BinaryOp.NeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" != \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtI32:\r\n          case BinaryOp.LtI64:\r\n          case BinaryOp.LtF32:\r\n          case BinaryOp.LtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeI32:\r\n          case BinaryOp.LeI64:\r\n          case BinaryOp.LeF32:\r\n          case BinaryOp.LeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtI32:\r\n          case BinaryOp.GtI64:\r\n          case BinaryOp.GtF32:\r\n          case BinaryOp.GtF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeI32:\r\n          case BinaryOp.GeI64:\r\n          case BinaryOp.GeF32:\r\n          case BinaryOp.GeF64: {\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU32: {\r\n            this.push(\"<u32>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u32>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.DivU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" / <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RemU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" % <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.RotlI64: {\r\n            this.push(\"rotl<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.RotrI64: {\r\n            this.push(\"rotr<i64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.LtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" < <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.LeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" <= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GtU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" > <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.GeU64: {\r\n            this.push(\"<u64>\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\" >= <u64>\");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF32: {\r\n            this.push(\"copysign<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF32: {\r\n            this.push(\"min<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF32: {\r\n            this.push(\"max<f32>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.CopysignF64: {\r\n            this.push(\"copysign<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MinF64: {\r\n            this.push(\"min<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n          case BinaryOp.MaxF64: {\r\n            this.push(\"max<f64>(\");\r\n            this.decompileExpression(getBinaryLeft(expr));\r\n            this.push(\", \");\r\n            this.decompileExpression(getBinaryRight(expr));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Select: {\r\n        this.push(\"select<\");\r\n        this.push(nativeTypeToType(type));\r\n        this.push(\">(\");\r\n        this.decompileExpression(getSelectThen(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectElse(expr));\r\n        this.push(\", \");\r\n        this.decompileExpression(getSelectCondition(expr));\r\n        this.push(\")\");\r\n        return;\r\n      }\r\n      case ExpressionId.Drop: {\r\n        this.decompileExpression(getDropValue(expr));\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Return: {\r\n        if (nested = getReturnValue(expr)) {\r\n          this.push(\"return \");\r\n          this.decompileExpression(nested);\r\n          this.push(\";\\n\");\r\n        } else {\r\n          this.push(\"return;\\n\");\r\n        }\r\n        return;\r\n      }\r\n      case ExpressionId.Host: {\r\n        switch (getHostOp(expr)) {\r\n          case HostOp.CurrentMemory: {\r\n            this.push(\"memory.size()\");\r\n            return;\r\n          }\r\n          case HostOp.GrowMemory: {\r\n            this.push(\"memory.grow(\");\r\n            this.decompileExpression(getHostOperand(expr, 0));\r\n            this.push(\")\");\r\n            return;\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case ExpressionId.Nop: {\r\n        this.push(\";\\n\");\r\n        return;\r\n      }\r\n      case ExpressionId.Unreachable: {\r\n        this.push(\"unreachable()\");\r\n        return;\r\n      }\r\n      case ExpressionId.AtomicCmpxchg:\r\n      case ExpressionId.AtomicRMW:\r\n      case ExpressionId.AtomicWait:\r\n      case ExpressionId.AtomicWake:\r\n    }\r\n    throw new Error(\"not implemented\");\r\n  }\r\n\r\n  private push(text: string): void {\r\n    // mostly here so we can add debugging if necessary\r\n    this.text.push(text);\r\n  }\r\n\r\n  finish(): string {\r\n    var ret = this.text.join(\"\");\r\n    this.text = [];\r\n    return ret;\r\n  }\r\n}\r\n\r\nfunction nativeTypeToType(type: NativeType): string {\r\n  switch (type) {\r\n    case NativeType.None: return \"void\";\r\n    case NativeType.I32: return \"i32\";\r\n    case NativeType.I64: return \"i64\";\r\n    case NativeType.F32: return \"f32\";\r\n    case NativeType.F64: return \"f64\";\r\n    case NativeType.V128: return \"v128\";\r\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\r\n    case NativeType.Auto: throw new Error(\"auto type\");\r\n    default: throw new Error(\"unexpected type\");\r\n  }\r\n}\r\n","/**\r\n * Definition builders for WebIDL and TypeScript.\r\n * @module definitions\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program,\r\n  Element,\r\n  ElementKind,\r\n  Global,\r\n  Enum,\r\n  EnumValue,\r\n  Field,\r\n  Function,\r\n  FunctionPrototype,\r\n  Class,\r\n  ClassPrototype,\r\n  Namespace,\r\n  ConstantValueKind,\r\n  Interface,\r\n  Property,\r\n  PropertyPrototype\r\n} from \"./program\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind\r\n} from \"./types\";\r\n\r\nimport {\r\n  indent\r\n} from \"./util\";\r\n\r\n/** Walker base class. */\r\nabstract class ExportsWalker {\r\n\r\n  /** Program reference. */\r\n  program: Program;\r\n  /** Whether to include private members */\r\n  includePrivate: bool;\r\n  /** Elements still to do. */\r\n  todo: Element[] = [];\r\n  /** Already seen elements. */\r\n  seen: Set<Element> = new Set();\r\n\r\n  /** Constructs a new Element walker. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    this.program = program;\r\n    this.includePrivate;\r\n  }\r\n\r\n  /** Walks all elements and calls the respective handlers. */\r\n  walk(): void {\r\n    for (let file of this.program.filesByName.values()) {\r\n      let members = file.members;\r\n      if (!members) continue;\r\n      for (let member of members.values()) {\r\n        // FIXME: doesn't honor the actual externally visible name\r\n        this.visitElement(member);\r\n      }\r\n    }\r\n    var todo = this.todo;\r\n    for (let i = 0; i < todo.length; ) this.visitElement(todo[i]);\r\n  }\r\n\r\n  /** Visits an element.*/\r\n  visitElement(element: Element): void {\r\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\r\n    if (this.seen.has(element)) return;\r\n    this.seen.add(element);\r\n    switch (element.kind) {\r\n      case ElementKind.GLOBAL: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(<Global>element);\r\n        break;\r\n      }\r\n      case ElementKind.ENUM: {\r\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(<Enum>element);\r\n        break;\r\n      }\r\n      case ElementKind.FUNCTION_PROTOTYPE: {\r\n        this.visitFunctionInstances(<FunctionPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.CLASS_PROTOTYPE: {\r\n        this.visitClassInstances(<ClassPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.FIELD: {\r\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(<Field>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY_PROTOTYPE: {\r\n        this.visitPropertyInstances(<PropertyPrototype>element);\r\n        break;\r\n      }\r\n      case ElementKind.PROPERTY: {\r\n        let prop = <Property>element;\r\n        let getter = prop.getterInstance;\r\n        if (getter) this.visitFunction(getter);\r\n        let setter = prop.setterInstance;\r\n        if (setter) this.visitFunction(setter);\r\n        break;\r\n      }\r\n      case ElementKind.NAMESPACE: {\r\n        if (hasCompiledMember(element)) this.visitNamespace(element);\r\n        break;\r\n      }\r\n      case ElementKind.TYPEDEFINITION: break;\r\n      default: assert(false);\r\n    }\r\n  }\r\n\r\n  private visitFunctionInstances(element: FunctionPrototype): void {\r\n    var instances = element.instances;\r\n    if (instances) {\r\n      for (let instance of instances.values()) {\r\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(<Function>instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  private visitClassInstances(element: ClassPrototype): void {\r\n    var instances = element.instances;\r\n    if (instances) {\r\n      for (let instance of instances.values()) {\r\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(<Class>instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  private visitPropertyInstances(element: PropertyPrototype): void {\r\n    // var instances = element.instances;\r\n    // if (instances) {\r\n    //   for (let instance of instances.values()) {\r\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\r\n    //   }\r\n    // }\r\n    assert(false);\r\n  }\r\n\r\n  abstract visitGlobal(element: Global): void;\r\n  abstract visitEnum(element: Enum): void;\r\n  abstract visitFunction(element: Function): void;\r\n  abstract visitClass(element: Class): void;\r\n  abstract visitInterface(element: Interface): void;\r\n  abstract visitField(element: Field): void;\r\n  abstract visitNamespace(element: Element): void;\r\n}\r\n\r\n/** A WebIDL definitions builder. */\r\nexport class IDLBuilder extends ExportsWalker {\r\n\r\n  /** Builds WebIDL definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new IDLBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (isConst) sb.push(\"const \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\" \");\r\n    sb.push(element.name);\r\n    if (isConst) {\r\n      switch (element.constantValueKind) {\r\n        case ConstantValueKind.INTEGER: {\r\n          sb.push(\" = \");\r\n          sb.push(i64_to_string(element.constantIntegerValue));\r\n          break;\r\n        }\r\n        case ConstantValueKind.FLOAT: {\r\n          sb.push(\" = \");\r\n          sb.push(element.constantFloatValue.toString());\r\n          break;\r\n        }\r\n        default: assert(false);\r\n      }\r\n    }\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.name);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\r\n          indent(sb, this.indentLevel);\r\n          if (isConst) sb.push(\"const \");\r\n          else sb.push(\"readonly \");\r\n          sb.push(\"unsigned long \");\r\n          sb.push(name);\r\n          if (isConst) {\r\n            sb.push(\" = \");\r\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\r\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\r\n          }\r\n          sb.push(\";\\n\");\r\n        }\r\n      }\r\n      for (let member of members.values()) {\r\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member);\r\n      }\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    sb.push(this.typeToString(signature.returnType));\r\n    sb.push(\" \");\r\n    sb.push(element.name);\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n      sb.push(\" \");\r\n      sb.push(signature.getParameterName(i));\r\n    }\r\n    sb.push(\");\\n\");\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      indent(sb, this.indentLevel);\r\n      sb.push(\"interface \");\r\n      sb.push(element.name);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.name);\r\n    sb.push(\" {\\n\");\r\n    // TODO\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    // TODO\r\n  }\r\n\r\n  visitNamespace(element: Namespace): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"interface \");\r\n    sb.push(element.name);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"byte\";\r\n      case TypeKind.I16: return \"short\";\r\n      case TypeKind.I32: return \"long\";\r\n      case TypeKind.I64: return \"long long\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\r\n      case TypeKind.U8: return \"octet\";\r\n      case TypeKind.U16: return \"unsigned short\";\r\n      case TypeKind.U32: return \"unsigned long\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"unsigned long long\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"boolean\";\r\n      case TypeKind.F32: return \"unrestricted float\";\r\n      case TypeKind.F64: return \"unrestricted double\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"interface ASModule {\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    return sb.join(\"\");\r\n  }\r\n}\r\n\r\n/** A TypeScript definitions builder. */\r\nexport class TSDBuilder extends ExportsWalker {\r\n\r\n  /** Builds TypeScript definitions for the specified program. */\r\n  static build(program: Program): string {\r\n    return new TSDBuilder(program).build();\r\n  }\r\n\r\n  private sb: string[] = [];\r\n  private indentLevel: i32 = 0;\r\n\r\n  /** Constructs a new WebIDL builder. */\r\n  constructor(program: Program, includePrivate: bool = false) {\r\n    super(program, includePrivate);\r\n  }\r\n\r\n  visitGlobal(element: Global): void {\r\n    var sb = this.sb;\r\n    var isConst = element.is(CommonFlags.INLINED);\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.STATIC)) {\r\n      if (isConst) sb.push(\"static readonly \");\r\n      else sb.push(\"static \");\r\n    } else {\r\n      if (isConst) sb.push(\"const \");\r\n      else sb.push(\"var \");\r\n    }\r\n    sb.push(element.name);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitEnum(element: Enum): void {\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel++);\r\n    sb.push(\"enum \");\r\n    sb.push(element.name);\r\n    sb.push(\" {\\n\");\r\n    var members = element.members;\r\n    if (members) {\r\n      let numMembers = members.size;\r\n      for (let [name, member] of members) {\r\n        if (member.kind == ElementKind.ENUMVALUE) {\r\n          indent(sb, this.indentLevel);\r\n          sb.push(name);\r\n          if (member.is(CommonFlags.INLINED)) {\r\n            sb.push(\" = \");\r\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\r\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\r\n          }\r\n          sb.push(\",\\n\");\r\n          --numMembers;\r\n        }\r\n      }\r\n      if (numMembers) this.visitNamespace(element);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitFunction(element: Function): void {\r\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\r\n    var sb = this.sb;\r\n    var signature = element.signature;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.GET)) {\r\n      sb.push(element.identifierNode.text); // 'get:funcName' internally\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n      sb.push(\";\\n\");\r\n      return;\r\n    } else {\r\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"function \");\r\n      sb.push(element.name);\r\n    }\r\n    sb.push(\"(\");\r\n    var parameters = signature.parameterTypes;\r\n    var numParameters = parameters.length;\r\n    // var requiredParameters = signature.requiredParameters;\r\n    for (let i = 0; i < numParameters; ++i) {\r\n      if (i) sb.push(\", \");\r\n      // if (i >= requiredParameters) sb.push(\"optional \");\r\n      sb.push(signature.getParameterName(i));\r\n      sb.push(\": \");\r\n      sb.push(this.typeToString(parameters[i]));\r\n    }\r\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\r\n      sb.push(\")\");\r\n    } else {\r\n      sb.push(\"): \");\r\n      sb.push(this.typeToString(signature.returnType));\r\n    }\r\n    sb.push(\";\\n\");\r\n    this.visitNamespace(element);\r\n  }\r\n\r\n  visitClass(element: Class): void {\r\n    var sb = this.sb;\r\n    var isInterface = element.kind == ElementKind.INTERFACE;\r\n    indent(sb, this.indentLevel++);\r\n    if (isInterface) {\r\n      sb.push(\"interface \");\r\n    } else {\r\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\r\n      sb.push(\"class \");\r\n    }\r\n    sb.push(element.name);\r\n    var base = element.base;\r\n    if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\r\n      sb.push(\" extends \");\r\n      sb.push(base.name); // TODO: fqn\r\n    }\r\n    sb.push(\" {\\n\");\r\n    var members = element.parent.members; // static\r\n    if (members) {\r\n      for (let member of members.values()) {\r\n        this.visitElement(member);\r\n      }\r\n    }\r\n    var ctor = element.constructorInstance;\r\n    if (ctor) this.visitFunction(ctor);\r\n    members = element.members; // instance\r\n    if (members) {\r\n      for (let member of members.values()) this.visitElement(member);\r\n    }\r\n    indent(sb, --this.indentLevel);\r\n    sb.push(\"}\\n\");\r\n  }\r\n\r\n  visitInterface(element: Interface): void {\r\n    this.visitClass(element);\r\n  }\r\n\r\n  visitField(element: Field): void {\r\n    if (element.is(CommonFlags.PRIVATE)) return;\r\n    var sb = this.sb;\r\n    indent(sb, this.indentLevel);\r\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\r\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\r\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\r\n    sb.push(element.name);\r\n    sb.push(\": \");\r\n    sb.push(this.typeToString(element.type));\r\n    sb.push(\";\\n\");\r\n  }\r\n\r\n  visitNamespace(element: Element): void {\r\n    var members = element.members;\r\n    if (members && members.size) {\r\n      let sb = this.sb;\r\n      indent(sb, this.indentLevel++);\r\n      sb.push(\"namespace \");\r\n      sb.push(element.name);\r\n      sb.push(\" {\\n\");\r\n      for (let member of members.values()) this.visitElement(member);\r\n      indent(sb, --this.indentLevel);\r\n      sb.push(\"}\\n\");\r\n    }\r\n  }\r\n\r\n  typeToString(type: Type): string {\r\n    switch (type.kind) {\r\n      case TypeKind.I8: return \"i8\";\r\n      case TypeKind.I16: return \"i16\";\r\n      case TypeKind.I32: return \"i32\";\r\n      case TypeKind.I64: return \"I64\";\r\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\r\n      case TypeKind.U8: return \"u8\";\r\n      case TypeKind.U16: return \"u16\";\r\n      case TypeKind.U32: return \"u32\";\r\n        // ^ TODO: function types\r\n      case TypeKind.U64: return \"U64\";\r\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\r\n        // ^ TODO: class types\r\n      case TypeKind.BOOL: return \"bool\";\r\n      case TypeKind.F32: return \"f32\";\r\n      case TypeKind.F64: return \"f64\";\r\n      case TypeKind.V128: return \"v128\";\r\n      case TypeKind.VOID: return \"void\";\r\n      default: {\r\n        assert(false);\r\n        return \"\";\r\n      }\r\n    }\r\n  }\r\n\r\n  build(): string {\r\n    var sb = this.sb;\r\n    sb.push(\"declare module ASModule {\\n\");\r\n    sb.push(\"  type i8 = number;\\n\");\r\n    sb.push(\"  type i16 = number;\\n\");\r\n    sb.push(\"  type i32 = number;\\n\");\r\n    sb.push(\"  type u8 = number;\\n\");\r\n    sb.push(\"  type u16 = number;\\n\");\r\n    sb.push(\"  type u32 = number;\\n\");\r\n    sb.push(\"  type f32 = number;\\n\");\r\n    sb.push(\"  type f64 = number;\\n\");\r\n    sb.push(\"  type bool = any;\\n\");\r\n    ++this.indentLevel;\r\n    this.walk();\r\n    --this.indentLevel;\r\n    sb.push(\"}\\n\");\r\n    sb.push(\"export default ASModule;\\n\");\r\n    return this.sb.join(\"\");\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\n/** Tests if a namespace-like element has at least one compiled member. */\r\nfunction hasCompiledMember(element: Element): bool {\r\n  var members = element.members;\r\n  if (members) {\r\n    for (let member of members.values()) {\r\n      switch (member.kind) {\r\n        case ElementKind.FUNCTION_PROTOTYPE: {\r\n          let instances = (<FunctionPrototype>member).instances;\r\n          if (instances) {\r\n            for (let instance of instances.values()) {\r\n              if (instance.is(CommonFlags.COMPILED)) return true;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case ElementKind.CLASS_PROTOTYPE: {\r\n          let instances = (<ClassPrototype>member).instances;\r\n          if (instances) {\r\n            for (let instance of instances.values()) {\r\n              if (instance.is(CommonFlags.COMPILED)) return true;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        default: {\r\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n","/**\r\n * A TypeScript parser for the AssemblyScript subset.\r\n * @module parser\r\n *//***/\r\n\r\nimport {\r\n  CommonFlags,\r\n  LIBRARY_PREFIX,\r\n  PATH_DELIMITER\r\n} from \"./common\";\r\n\r\nimport {\r\n  Program\r\n} from \"./program\";\r\n\r\nimport {\r\n  Tokenizer,\r\n  Token,\r\n  Range,\r\n  CommentHandler,\r\n  IdentifierHandling\r\n} from \"./tokenizer\";\r\n\r\nimport {\r\n  DiagnosticCode,\r\n  DiagnosticEmitter\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  normalizePath\r\n} from \"./util\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Source,\r\n  SourceKind,\r\n  CommonTypeNode,\r\n  TypeNode,\r\n  SignatureNode,\r\n  ArrowKind,\r\n\r\n  Expression,\r\n  AssertionKind,\r\n  CallExpression,\r\n  ClassExpression,\r\n  FunctionExpression,\r\n  IdentifierExpression,\r\n  StringLiteralExpression,\r\n\r\n  Statement,\r\n  BlockStatement,\r\n  BreakStatement,\r\n  ClassDeclaration,\r\n  ContinueStatement,\r\n  DeclarationStatement,\r\n  DecoratorNode,\r\n  DoStatement,\r\n  EnumDeclaration,\r\n  EnumValueDeclaration,\r\n  ExportImportStatement,\r\n  ExportMember,\r\n  ExportStatement,\r\n  ExpressionStatement,\r\n  ForStatement,\r\n  FunctionDeclaration,\r\n  IfStatement,\r\n  ImportDeclaration,\r\n  ImportStatement,\r\n  IndexSignatureDeclaration,\r\n  NamespaceDeclaration,\r\n  ParameterNode,\r\n  ParameterKind,\r\n  ReturnStatement,\r\n  SwitchCase,\r\n  SwitchStatement,\r\n  ThrowStatement,\r\n  TryStatement,\r\n  TypeDeclaration,\r\n  TypeParameterNode,\r\n  VariableStatement,\r\n  VariableDeclaration,\r\n  VoidStatement,\r\n  WhileStatement,\r\n\r\n  mangleInternalPath,\r\n  nodeIsCallable,\r\n  nodeIsGenericCallable\r\n} from \"./ast\";\r\n\r\n/** Parser interface. */\r\nexport class Parser extends DiagnosticEmitter {\r\n\r\n  /** Program being created. */\r\n  program: Program;\r\n  /** Source file names to be requested next. */\r\n  backlog: string[] = new Array();\r\n  /** Source file names already seen, that is processed or backlogged. */\r\n  seenlog: Set<string> = new Set();\r\n  /** Source file names already completely processed. */\r\n  donelog: Set<string> = new Set();\r\n  /** Optional handler to intercept comments while tokenizing. */\r\n  onComment: CommentHandler | null = null;\r\n\r\n  /** Constructs a new parser. */\r\n  constructor() {\r\n    super();\r\n    this.program = new Program(this.diagnostics);\r\n  }\r\n\r\n  /** Parses a file and adds its definitions to the program. */\r\n  parseFile(\r\n    text: string,\r\n    path: string,\r\n    isEntry: bool\r\n  ): void {\r\n    var normalizedPath = normalizePath(path);\r\n    var internalPath = mangleInternalPath(normalizedPath);\r\n\r\n    // check if already processed\r\n    if (this.donelog.has(internalPath)) return;\r\n    this.donelog.add(internalPath); // do not parse again\r\n    this.seenlog.add(internalPath); // do not request again\r\n\r\n    // create the source element\r\n    var source = new Source(\r\n      normalizedPath,\r\n      text,\r\n      isEntry\r\n        ? SourceKind.ENTRY\r\n        : path.startsWith(LIBRARY_PREFIX) && path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\r\n          ? SourceKind.LIBRARY\r\n          : SourceKind.DEFAULT\r\n    );\r\n    var program = this.program;\r\n    program.sources.push(source);\r\n\r\n    // tokenize and parse\r\n    var tn = new Tokenizer(source, program.diagnostics);\r\n    tn.onComment = this.onComment;\r\n    source.tokenizer = tn;\r\n    var statements = source.statements;\r\n    while (!tn.skip(Token.ENDOFFILE)) {\r\n      let statement = this.parseTopLevelStatement(tn, null);\r\n      if (statement) statements.push(statement);\r\n    }\r\n    tn.finish();\r\n  }\r\n\r\n  /** Parses a top-level statement. */\r\n  parseTopLevelStatement(\r\n    tn: Tokenizer,\r\n    namespace: NamespaceDeclaration | null = null\r\n  ): Statement | null {\r\n    var flags = CommonFlags.NONE;\r\n    var startPos: i32 = -1;\r\n\r\n    // check decorators\r\n    var decorators: DecoratorNode[] | null = null;\r\n    while (tn.skip(Token.AT)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      let decorator = this.parseDecorator(tn);\r\n      if (!decorator) {\r\n        this.skipStatement(tn);\r\n        continue;\r\n      }\r\n      if (!decorators) decorators = [];\r\n      decorators.push(decorator);\r\n    }\r\n\r\n    // check modifiers\r\n    var exportStart: i32 = 0;\r\n    var exportEnd: i32 = 0;\r\n    if (tn.skip(Token.EXPORT)) {\r\n      if (tn.skip(Token.DEFAULT)) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          tn.range()\r\n        );\r\n      }\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      flags |= CommonFlags.EXPORT;\r\n      exportStart = tn.tokenPos;\r\n      exportEnd = tn.pos;\r\n    }\r\n\r\n    var declareStart: i32 = 0;\r\n    var declareEnd: i32 = 0;\r\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\r\n    if (tn.skip(Token.DECLARE)) {\r\n      if (startPos < 0) startPos = tn.tokenPos;\r\n      if (contextIsAmbient) {\r\n        this.error(\r\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\r\n    } else if (contextIsAmbient) {\r\n      flags |= CommonFlags.AMBIENT;\r\n    }\r\n\r\n    // parse the statement\r\n    var statement: Statement | null = null;\r\n\r\n    // handle declarations\r\n    var first = tn.peek();\r\n    if (startPos < 0) startPos = tn.nextTokenPos;\r\n    switch (first) {\r\n      case Token.CONST: {\r\n        tn.next();\r\n        flags |= CommonFlags.CONST;\r\n        if (tn.skip(Token.ENUM)) {\r\n          statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        } else {\r\n          statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        }\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.LET: flags |= CommonFlags.LET;\r\n      case Token.VAR: {\r\n        tn.next();\r\n        statement = this.parseVariable(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ENUM: {\r\n        tn.next();\r\n        statement = this.parseEnum(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.FUNCTION: {\r\n        tn.next();\r\n        statement = this.parseFunction(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.ABSTRACT: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (!tn.skip(Token.CLASS)) {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n          break;\r\n        } else {\r\n          tn.discard(state);\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        // fall through\r\n      }\r\n      case Token.CLASS:\r\n      case Token.INTERFACE: {\r\n        tn.next();\r\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\r\n        decorators = null;\r\n        break;\r\n      }\r\n      case Token.NAMESPACE: {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      case Token.IMPORT: {\r\n        tn.next();\r\n        flags |= CommonFlags.IMPORT;\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExportImport(tn, startPos);\r\n        } else {\r\n          statement = this.parseImport(tn);\r\n        }\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          tn.discard(state);\r\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\r\n          decorators = null;\r\n        } else {\r\n          tn.reset(state);\r\n          statement = this.parseStatement(tn, true);\r\n        }\r\n        break;\r\n      }\r\n      default: {\r\n\r\n        // handle plain exports\r\n        if (flags & CommonFlags.EXPORT) {\r\n          statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\r\n\r\n        // handle non-declaration statements\r\n        } else {\r\n          if (exportEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(exportStart, exportEnd), \"export\"\r\n            ); // recoverable\r\n          }\r\n          if (declareEnd) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(declareStart, declareEnd), \"declare\"\r\n            ); // recoverable\r\n          }\r\n          if (!namespace) {\r\n            statement = this.parseStatement(tn, true);\r\n          } // TODO: else?\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    // check for decorators that weren't consumed\r\n    if (decorators) {\r\n      for (let i = 0, k = decorators.length; i < k; ++i) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          decorators[i].range\r\n        );\r\n      }\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  /** Obtains the next file to parse. */\r\n  nextFile(): string | null {\r\n    var backlog = this.backlog;\r\n    return backlog.length ? backlog.shift() : null;\r\n  }\r\n\r\n  /** Finishes parsing and returns the program. */\r\n  finish(): Program {\r\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\r\n    this.backlog = [];\r\n    this.seenlog.clear();\r\n    this.donelog.clear();\r\n    return this.program;\r\n  }\r\n\r\n  /** Parses a type. */\r\n  parseType(\r\n    tn: Tokenizer,\r\n    acceptParenthesized: bool = true,\r\n    suppressErrors: bool = false\r\n  ): CommonTypeNode | null {\r\n\r\n    // NOTE: this parses our limited subset\r\n    var token = tn.next();\r\n    var startPos = tn.tokenPos;\r\n\r\n    var type: CommonTypeNode;\r\n\r\n    // '(' ...\r\n    if (token == Token.OPENPAREN) {\r\n\r\n      // '(' FunctionSignature ')' '|' 'null'?\r\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\r\n      // FunctionSignature?\r\n      let signature = this.tryParseSignature(tn);\r\n      if (signature) {\r\n        if (isNullableSignature) {\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \")\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.BAR)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"|\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.NULL)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          signature.isNullable = true;\r\n        }\r\n        return signature;\r\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n      // Type (',' Type)* ')'\r\n      if (acceptParenthesized) {\r\n        let innerType = this.parseType(tn, false, suppressErrors);\r\n        if (!innerType) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"}\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n        type = innerType;\r\n        type.range.start = startPos;\r\n        type.range.end = tn.pos;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Unexpected_token,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // 'void'\r\n    } else if (token == Token.VOID) {\r\n      type = Node.createType(\r\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'this'\r\n    } else if (token == Token.THIS) {\r\n      type = Node.createType(\r\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // 'true'\r\n    } else if (token == Token.TRUE || token == Token.FALSE) {\r\n      type = Node.createType(\r\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // StringLiteral\r\n    } else if (token == Token.STRINGLITERAL) {\r\n      tn.readString();\r\n      type = Node.createType(\r\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\r\n      );\r\n\r\n    // Identifier\r\n    } else if (token == Token.IDENTIFIER) {\r\n      let first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\r\n      let current = first;\r\n      let parameters = new Array<TypeNode>();\r\n      let nullable = false;\r\n\r\n      // Identifier ('.' Identifier)+\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skip(Token.IDENTIFIER)) {\r\n          let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\r\n          current.next = next;\r\n          current = next;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range(tn.pos)\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n\r\n      // Name<T>\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        do {\r\n          let parameter = this.parseType(tn, true, suppressErrors);\r\n          if (!parameter) return null;\r\n          parameters.push(<TypeNode>parameter);\r\n        } while (tn.skip(Token.COMMA));\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \">\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      // ... | null\r\n      while (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(tn.pos), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(first, parameters, nullable, tn.range(startPos, tn.pos));\r\n\r\n    } else {\r\n      if (!suppressErrors) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n      return null;\r\n    }\r\n    // ... [][]\r\n    while (tn.skip(Token.OPENBRACKET)) {\r\n      let bracketStart = tn.tokenPos;\r\n      if (!tn.skip(Token.CLOSEBRACKET)) {\r\n        if (!suppressErrors) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"]\"\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n      let bracketRange = tn.range(bracketStart, tn.pos);\r\n\r\n      // ...[] | null\r\n      let nullable = false;\r\n      if (tn.skip(Token.BAR)) {\r\n        if (tn.skip(Token.NULL)) {\r\n          nullable = true;\r\n        } else {\r\n          if (!suppressErrors) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"null\"\r\n            );\r\n          }\r\n          return null;\r\n        }\r\n      }\r\n      type = Node.createType(\r\n        Node.createSimpleTypeName(\"Array\", bracketRange),\r\n        [ type ],\r\n        nullable,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      if (nullable) break;\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  // Indicates whether tryParseSignature determined that it is handling a Signature\r\n  private tryParseSignatureIsSignature: bool = false;\r\n\r\n  /** Parses a function signature, as used in type declarations. */\r\n  tryParseSignature(\r\n    tn: Tokenizer\r\n  ): SignatureNode | null {\r\n\r\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\r\n\r\n    var state = tn.mark();\r\n    var startPos = tn.tokenPos;\r\n    var parameters: ParameterNode[] | null = null;\r\n    var thisType: TypeNode | null = null;\r\n    var isSignature: bool = false;\r\n\r\n    if (tn.skip(Token.CLOSEPAREN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      parameters = [];\r\n\r\n    } else {\r\n      isSignature = false; // not yet known\r\n      do {\r\n        let kind = ParameterKind.DEFAULT;\r\n        if (tn.skip(Token.DOT_DOT_DOT)) {\r\n          isSignature = true;\r\n          tn.discard(state);\r\n          kind = ParameterKind.REST;\r\n        }\r\n        if (tn.skip(Token.THIS)) {\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let t = this.parseType(tn, false);\r\n            if (!t) return null;\r\n            if (t.kind != NodeKind.TYPE) {\r\n              this.error(\r\n                DiagnosticCode.Operation_not_supported,\r\n                t.range\r\n              );\r\n              this.tryParseSignatureIsSignature = true;\r\n              return null;\r\n            }\r\n            thisType = <TypeNode>t;\r\n          } else {\r\n            tn.reset(state);\r\n            this.tryParseSignatureIsSignature = false;\r\n            return null;\r\n          }\r\n        } else if (tn.skipIdentifier()) {\r\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\r\n          if (tn.skip(Token.QUESTION)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            if (kind == ParameterKind.REST) {\r\n              this.error(\r\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n                tn.range()\r\n              ); // recoverable\r\n            } else {\r\n              kind = ParameterKind.OPTIONAL;\r\n            }\r\n          }\r\n          if (tn.skip(Token.COLON)) {\r\n            isSignature = true;\r\n            tn.discard(state);\r\n            let type = this.parseType(tn); // not suppressing errors because known\r\n            if (!type) {\r\n              this.tryParseSignatureIsSignature = isSignature;\r\n              return null;\r\n            }\r\n            let param = new ParameterNode();\r\n            param.parameterKind = kind;\r\n            param.name = name;\r\n            param.type = type;\r\n            if (!parameters) parameters = [ param ];\r\n            else parameters.push(param);\r\n          } else {\r\n            if (isSignature) {\r\n              this.error(\r\n                DiagnosticCode.Type_expected,\r\n                tn.range()\r\n              ); // recoverable\r\n            }\r\n          }\r\n        } else {\r\n          if (isSignature) {\r\n            this.error(\r\n              DiagnosticCode.Identifier_expected,\r\n              tn.range()\r\n            );\r\n          } else {\r\n            tn.reset(state);\r\n          }\r\n          this.tryParseSignatureIsSignature = isSignature;\r\n          return null;\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n      if (!tn.skip(Token.CLOSEPAREN)) {\r\n        if (isSignature) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null;\r\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n      isSignature = true;\r\n      tn.discard(state);\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) {\r\n        this.tryParseSignatureIsSignature = isSignature;\r\n        return null;\r\n      }\r\n    } else {\r\n      if (isSignature) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=>\"\r\n        );\r\n      } else {\r\n        tn.reset(state);\r\n      }\r\n      this.tryParseSignatureIsSignature = isSignature;\r\n      return null;\r\n    }\r\n    this.tryParseSignatureIsSignature = true;\r\n    return Node.createSignature(\r\n      parameters || [],\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n  }\r\n\r\n  // statements\r\n\r\n  parseDecorator(\r\n    tn: Tokenizer\r\n  ): DecoratorNode | null {\r\n\r\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let name = tn.readIdentifier();\r\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\r\n      while (tn.skip(Token.DOT)) {\r\n        if (tn.skipIdentifier()) {\r\n          name = tn.readIdentifier();\r\n          expression = Node.createPropertyAccessExpression(\r\n            expression,\r\n            Node.createIdentifierExpression(name, tn.range()),\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let args: Expression[] | null;\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        args = this.parseArguments(tn);\r\n        if (args) {\r\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\r\n        }\r\n      } else {\r\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVariable(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): VariableStatement | null {\r\n\r\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\r\n\r\n    var members = new Array<VariableDeclaration>();\r\n    do {\r\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\r\n      if (!member) return null;\r\n      members.push(<VariableDeclaration>member);\r\n    } while (tn.skip(Token.COMMA));\r\n\r\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseVariableDeclaration(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags,\r\n    parentDecorators: DecoratorNode[] | null\r\n  ): VariableDeclaration | null {\r\n\r\n    // before: Identifier (':' Type)? ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var flags = parentFlags;\r\n    if (tn.skip(Token.EXCLAMATION)) {\r\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\r\n    }\r\n\r\n    var type: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      type = this.parseType(tn);\r\n    }\r\n\r\n    var initializer: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!initializer) return null;\r\n    } else {\r\n      if (flags & CommonFlags.CONST) {\r\n        if (!(flags & CommonFlags.AMBIENT)) {\r\n          this.error(\r\n            DiagnosticCode._const_declarations_must_be_initialized,\r\n            identifier.range\r\n          ); // recoverable\r\n        }\r\n      } else if (!type) { // neither type nor initializer\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range(tn.pos)\r\n        ); // recoverable\r\n      }\r\n    }\r\n    var range = Range.join(identifier.range, tn.range());\r\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\r\n      this.error(\r\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\r\n        range);\r\n    }\r\n    return Node.createVariableDeclaration(\r\n      identifier,\r\n      type,\r\n      initializer,\r\n      parentDecorators,\r\n      flags,\r\n      range\r\n    );\r\n  }\r\n\r\n  parseEnum(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): EnumDeclaration | null {\r\n\r\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\r\n\r\n    if (tn.next() != Token.IDENTIFIER) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    if (tn.next() != Token.OPENBRACE) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n    var members = new Array<EnumValueDeclaration>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\r\n      if (!member) return null;\r\n      members.push(<EnumValueDeclaration>member);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEBRACE)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    var ret = Node.createEnumDeclaration(\r\n      identifier,\r\n      members,\r\n      decorators,\r\n      flags,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseEnumValue(\r\n    tn: Tokenizer,\r\n    parentFlags: CommonFlags\r\n  ): EnumValueDeclaration | null {\r\n\r\n    // before: Identifier ('=' Expression)?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var value: Expression | null = null;\r\n    if (tn.skip(Token.EQUALS)) {\r\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!value) return null;\r\n    }\r\n    return Node.createEnumValueDeclaration(\r\n      identifier,\r\n      value,\r\n      parentFlags,\r\n      Range.join(identifier.range, tn.range())\r\n    );\r\n  }\r\n\r\n  parseReturn(\r\n    tn: Tokenizer\r\n  ): ReturnStatement | null {\r\n\r\n    // at 'return': Expression | (';' | '}' | ...'\\n')\r\n\r\n    var expr: Expression | null = null;\r\n    if (\r\n      tn.peek(true) != Token.SEMICOLON &&\r\n      tn.nextToken != Token.CLOSEBRACE &&\r\n      !tn.nextTokenOnNewLine\r\n    ) {\r\n      if (!(expr = this.parseExpression(tn))) return null;\r\n    }\r\n\r\n    var ret = Node.createReturnStatement(expr, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTypeParameters(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode[] | null {\r\n\r\n    // at '<': TypeParameter (',' TypeParameter)* '>'\r\n\r\n    var typeParameters = new Array<TypeParameterNode>();\r\n    var seenOptional = false;\r\n    while (!tn.skip(Token.GREATERTHAN)) {\r\n      let typeParameter = this.parseTypeParameter(tn);\r\n      if (!typeParameter) return null;\r\n      if (typeParameter.defaultType !== null) {\r\n        seenOptional = true;\r\n      } else if (seenOptional) {\r\n        this.error(\r\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\r\n          typeParameter.range\r\n        );\r\n        typeParameter.defaultType = null;\r\n      }\r\n      typeParameters.push(<TypeParameterNode>typeParameter);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.GREATERTHAN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    if (typeParameters.length === 0) {\r\n      this.error(\r\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\r\n        tn.range()\r\n      ); // recoverable\r\n    }\r\n    return typeParameters;\r\n  }\r\n\r\n  parseTypeParameter(\r\n    tn: Tokenizer\r\n  ): TypeParameterNode | null {\r\n\r\n    // before: Identifier ('extends' Type)? ('=' Type)?\r\n\r\n    if (tn.next() == Token.IDENTIFIER) {\r\n      let identifier = Node.createIdentifierExpression(\r\n        tn.readIdentifier(),\r\n        tn.range()\r\n      );\r\n      let extendsType: TypeNode | null = null;\r\n      if (tn.skip(Token.EXTENDS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        extendsType = <TypeNode>t;\r\n      }\r\n      let defaultType: TypeNode | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let t = this.parseType(tn);\r\n        if (!t) return null;\r\n        if (t.kind != NodeKind.TYPE) {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            t.range\r\n          );\r\n          return null;\r\n        }\r\n        defaultType = <TypeNode>t;\r\n      }\r\n      return Node.createTypeParameter(\r\n        identifier,\r\n        extendsType,\r\n        defaultType,\r\n        Range.join(identifier.range, tn.range())\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private parseParametersThis: TypeNode | null = null;\r\n\r\n  parseParameters(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode[] | null {\r\n\r\n    // at '(': (Parameter (',' Parameter)*)? ')'\r\n\r\n    var parameters = new Array<ParameterNode>();\r\n    var seenRest: ParameterNode | null = null;\r\n    var seenOptional = false;\r\n    var reportedRest = false;\r\n    var thisType: CommonTypeNode | null = null;\r\n\r\n    // check if there is a leading `this` parameter\r\n    this.parseParametersThis = null;\r\n    if (tn.skip(Token.THIS)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        thisType = this.parseType(tn); // reports\r\n        if (!thisType) return null;\r\n        if (thisType.kind == NodeKind.TYPE) {\r\n          this.parseParametersThis = <TypeNode>thisType;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            thisType.range\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n        return null;\r\n      }\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          return parameters;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let param = this.parseParameter(tn, isConstructor); // reports\r\n      if (!param) return null;\r\n      if (seenRest && !reportedRest) {\r\n        this.error(\r\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\r\n          seenRest.name.range\r\n        );\r\n        reportedRest = true;\r\n      }\r\n      switch (param.parameterKind) {\r\n        default: {\r\n          if (seenOptional) {\r\n            this.error(\r\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\r\n              param.name.range\r\n            );\r\n          }\r\n          break;\r\n        }\r\n        case ParameterKind.OPTIONAL: {\r\n          seenOptional = true;\r\n          break;\r\n        }\r\n        case ParameterKind.REST: {\r\n          seenRest = param;\r\n          break;\r\n        }\r\n      }\r\n      parameters.push(param);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return parameters;\r\n  }\r\n\r\n  parseParameter(\r\n    tn: Tokenizer,\r\n    isConstructor: bool = false\r\n  ): ParameterNode | null {\r\n\r\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\r\n\r\n    var isRest = false;\r\n    var isOptional = false;\r\n    var startRange: Range | null = null;\r\n    var accessFlags: CommonFlags = CommonFlags.NONE;\r\n    if (isConstructor) {\r\n      if (tn.skip(Token.PUBLIC)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PUBLIC;\r\n      } else if (tn.skip(Token.PROTECTED)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PROTECTED;\r\n      } else if (tn.skip(Token.PRIVATE)) {\r\n        startRange = tn.range();\r\n        accessFlags |= CommonFlags.PRIVATE;\r\n      }\r\n      if (tn.peek() == Token.READONLY) {\r\n        let state = tn.mark();\r\n        tn.next();\r\n        if (tn.peek() != Token.COLON) { // modifier\r\n          tn.discard(state);\r\n          if (!startRange) startRange = tn.range();\r\n          accessFlags |= CommonFlags.READONLY;\r\n        } else { // identifier\r\n          tn.reset(state);\r\n        }\r\n      }\r\n    }\r\n    if (tn.skip(Token.DOT_DOT_DOT)) {\r\n      if (accessFlags) {\r\n        this.error(\r\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\r\n          tn.range()\r\n        );\r\n      } else {\r\n        startRange = tn.range();\r\n      }\r\n      isRest = true;\r\n    }\r\n    if (tn.skipIdentifier()) {\r\n      if (!isRest) startRange = tn.range();\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let type: CommonTypeNode | null = null;\r\n      if (isOptional = tn.skip(Token.QUESTION)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\r\n            identifier.range\r\n          );\r\n        }\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        type = Node.createOmittedType(tn.range(tn.pos));\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (isRest) {\r\n          this.error(\r\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\r\n            identifier.range\r\n          );\r\n        }\r\n        if (isOptional) {\r\n          this.error(\r\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\r\n            identifier.range\r\n          );\r\n        } else {\r\n          isOptional = true;\r\n        }\r\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\r\n        if (!initializer) return null;\r\n      }\r\n      let param = Node.createParameter(\r\n        identifier,\r\n        type,\r\n        initializer,\r\n        isRest\r\n          ? ParameterKind.REST\r\n          : isOptional\r\n            ? ParameterKind.OPTIONAL\r\n            : ParameterKind.DEFAULT,\r\n        Range.join(<Range>startRange, tn.range())\r\n      );\r\n      param.flags |= accessFlags;\r\n      return param;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseFunction(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): FunctionDeclaration | null {\r\n\r\n    // at 'function':\r\n    //  Identifier\r\n    //  ('<' TypeParameters)?\r\n    //  '(' Parameters (':' Type)?\r\n    //  '{' Statement* '}'\r\n    //  ';'?\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range(tn.pos)\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    var signatureStart: i32 = -1;\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      signatureStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENPAREN)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"(\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    if (signatureStart < 0) {\r\n      signatureStart = tn.tokenPos;\r\n    }\r\n\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n    var thisType = this.parseParametersThis;\r\n\r\n    var isSetter = (flags & CommonFlags.SET) != 0;\r\n    if (isSetter) {\r\n      if (parameters.length != 1) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n      if (parameters.length && parameters[0].initializer) {\r\n        this.error(\r\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    if (flags & CommonFlags.GET) {\r\n      if (parameters.length) {\r\n        this.error(\r\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n          name.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn, true, isSetter);\r\n      if (!returnType) return null;\r\n    }\r\n\r\n    if (!returnType) {\r\n      returnType = Node.createOmittedType(\r\n        tn.range(tn.pos)\r\n      );\r\n      if (!isSetter) {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          returnType.range\r\n        ); // recoverable\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      thisType,\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      if (flags & CommonFlags.AMBIENT) {\r\n        this.error(\r\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      body = this.parseBlockStatement(tn, false);\r\n      if (!body) return null;\r\n    } else if (!(flags & CommonFlags.AMBIENT)) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        tn.range(tn.pos)\r\n      );\r\n    }\r\n\r\n    var ret = Node.createFunctionDeclaration(\r\n      name,\r\n      typeParameters,\r\n      signature,\r\n      body,\r\n      decorators,\r\n      flags,\r\n      ArrowKind.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n    var arrowKind = ArrowKind.NONE;\r\n\r\n    // either at 'function':\r\n    //  Identifier?\r\n    //  '(' Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    if (tn.token == Token.FUNCTION) {\r\n      if (tn.skipIdentifier()) {\r\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      } else { // empty name\r\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n      }\r\n      if (!tn.skip(Token.OPENPAREN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"(\"\r\n        );\r\n        return null;\r\n      }\r\n\r\n    // or at '(' of arrow function:\r\n    //  Parameters (':' Type)?\r\n    //  Statement\r\n\r\n    } else {\r\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\r\n      assert(tn.token == Token.OPENPAREN);\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\r\n    }\r\n\r\n    // TODO: type parameters? doesn't seem worth it.\r\n\r\n    var signatureStart = tn.pos;\r\n    var parameters = this.parseParameters(tn);\r\n    if (!parameters) return null;\r\n\r\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\r\n  }\r\n\r\n  private parseFunctionExpressionCommon(\r\n    tn: Tokenizer,\r\n    name: IdentifierExpression,\r\n    parameters: ParameterNode[],\r\n    arrowKind: ArrowKind,\r\n    startPos: i32 = -1,\r\n    signatureStart: i32 = -1\r\n  ): FunctionExpression | null {\r\n    if (startPos < 0) startPos = name.range.start;\r\n    if (signatureStart < 0) signatureStart = startPos;\r\n\r\n    var returnType: CommonTypeNode | null = null;\r\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\r\n      returnType = this.parseType(tn);\r\n      if (!returnType) return null;\r\n    } else {\r\n      returnType = Node.createOmittedType(tn.range(tn.pos));\r\n    }\r\n\r\n    if (arrowKind) {\r\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"=>\"\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var signature = Node.createSignature(\r\n      parameters,\r\n      returnType,\r\n      null, // TODO?\r\n      false,\r\n      tn.range(signatureStart, tn.pos)\r\n    );\r\n\r\n    var body: Statement | null;\r\n    if (arrowKind) {\r\n      body = this.parseStatement(tn, false);\r\n    } else {\r\n      if (!tn.skip(Token.OPENBRACE)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(tn.pos), \"{\"\r\n        );\r\n        return null;\r\n      }\r\n      body = this.parseBlockStatement(tn, false);\r\n    }\r\n    if (!body) return null;\r\n\r\n    var declaration = Node.createFunctionDeclaration(\r\n      name,\r\n      null,\r\n      signature,\r\n      body,\r\n      null,\r\n      CommonFlags.NONE,\r\n      arrowKind,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    return Node.createFunctionExpression(declaration);\r\n  }\r\n\r\n  parseClassOrInterface(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): ClassDeclaration | null {\r\n\r\n    // at ('class' | 'interface'):\r\n    //   Identifier\r\n    //   ('<' TypeParameters)?\r\n    //   ('extends' Type)?\r\n    //   ('implements' Type (',' Type)*)?\r\n    //   '{' ClassMember* '}'\r\n\r\n    var isInterface = tn.token == Token.INTERFACE;\r\n\r\n    if (!tn.skipIdentifier()) {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var identifier = Node.createIdentifierExpression(\r\n      tn.readIdentifier(),\r\n      tn.range()\r\n    );\r\n\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      flags |= CommonFlags.GENERIC;\r\n    }\r\n\r\n    var extendsType: TypeNode | null = null;\r\n    if (tn.skip(Token.EXTENDS)) {\r\n      let t = this.parseType(tn);\r\n      if (!t) return null;\r\n      if (t.kind != NodeKind.TYPE) {\r\n        this.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          t.range\r\n        );\r\n        return null;\r\n      }\r\n      extendsType = <TypeNode>t;\r\n    }\r\n\r\n    var implementsTypes: TypeNode[] | null = null;\r\n    if (tn.skip(Token.IMPLEMENTS)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      do {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        if (!isInterface) {\r\n          if (!implementsTypes) implementsTypes = [];\r\n          implementsTypes.push(<TypeNode>type);\r\n        }\r\n      } while (tn.skip(Token.COMMA));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration: ClassDeclaration;\r\n    if (isInterface) {\r\n      assert(!implementsTypes);\r\n      declaration = Node.createInterfaceDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    } else {\r\n      declaration = Node.createClassDeclaration(\r\n        identifier,\r\n        typeParameters,\r\n        extendsType,\r\n        implementsTypes,\r\n        members,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n    }\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (member) members.push(<DeclarationStatement>member);\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    return declaration;\r\n  }\r\n\r\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\r\n\r\n    // at 'class': Identifier? '{' ... '}'\r\n\r\n    var startPos = tn.tokenPos;\r\n    var name: IdentifierExpression;\r\n\r\n    if (tn.skipIdentifier()) {\r\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    } else {\r\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\r\n    }\r\n\r\n    if (!tn.skip(Token.OPENBRACE)) {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(tn.pos), \"{\"\r\n      );\r\n      return null;\r\n    }\r\n\r\n    var members = new Array<DeclarationStatement>();\r\n    var declaration = Node.createClassDeclaration(\r\n      name,\r\n      [],\r\n      null,\r\n      null,\r\n      members,\r\n      null,\r\n      CommonFlags.NONE,\r\n      tn.range(startPos, tn.pos)\r\n    );\r\n    if (!tn.skip(Token.CLOSEBRACE)) {\r\n      do {\r\n        let member = this.parseClassMember(tn, declaration);\r\n        if (member) members.push(<DeclarationStatement>member);\r\n      } while (!tn.skip(Token.CLOSEBRACE));\r\n    }\r\n    return Node.createClassExpression(declaration);\r\n  }\r\n\r\n  parseClassMember(\r\n    tn: Tokenizer,\r\n    parent: ClassDeclaration\r\n  ): DeclarationStatement | null {\r\n\r\n    // before:\r\n    //   ('public' | 'private' | 'protected')?\r\n    //   ('static' | 'abstract')?\r\n    //   'readonly'?\r\n    //   ('get' | 'set')?\r\n    //   Identifier ...\r\n\r\n    var startPos = tn.pos;\r\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\r\n\r\n    var decorators = new Array<DecoratorNode>();\r\n    if (tn.skip(Token.AT)) {\r\n      do {\r\n        let decorator = this.parseDecorator(tn);\r\n        if (!decorator) break;\r\n        decorators.push(<DecoratorNode>decorator);\r\n      } while (tn.skip(Token.AT));\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Decorators_are_not_valid_here,\r\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\r\n        );\r\n      }\r\n    }\r\n\r\n    // inherit ambient status\r\n    var flags = parent.flags & CommonFlags.AMBIENT;\r\n\r\n    // implemented methods are virtual\r\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\r\n\r\n    var accessStart = 0;\r\n    var accessEnd = 0;\r\n    if (tn.skip(Token.PUBLIC)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"public\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PUBLIC;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    } else if (tn.skip(Token.PRIVATE)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"private\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PRIVATE;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    } else if (tn.skip(Token.PROTECTED)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"protected\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.PROTECTED;\r\n      accessStart = tn.tokenPos;\r\n      accessEnd = tn.pos;\r\n    }\r\n\r\n    var staticStart = 0;\r\n    var staticEnd = 0;\r\n    var abstractStart = 0;\r\n    var abstractEnd = 0;\r\n    if (tn.skip(Token.STATIC)) {\r\n      if (isInterface) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(), \"static\"\r\n        );\r\n      }\r\n      flags |= CommonFlags.STATIC;\r\n      staticStart = tn.tokenPos;\r\n      staticEnd = tn.pos;\r\n    } else {\r\n      flags |= CommonFlags.INSTANCE;\r\n      if (tn.skip(Token.ABSTRACT)) {\r\n        if (isInterface) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(), \"abstract\"\r\n          );\r\n        }\r\n        flags |= CommonFlags.ABSTRACT;\r\n        abstractStart = tn.tokenPos;\r\n        abstractEnd = tn.pos;\r\n      }\r\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\r\n    }\r\n\r\n    var readonlyStart: i32 = 0;\r\n    var readonlyEnd: i32 = 0;\r\n    if (tn.skip(Token.READONLY)) {\r\n      flags |= CommonFlags.READONLY;\r\n      readonlyStart = tn.tokenPos;\r\n      readonlyEnd = tn.pos;\r\n    }\r\n\r\n    // check if accessor: ('get' | 'set') ^\\n Identifier\r\n    var state = tn.mark();\r\n    var isConstructor = false;\r\n    var isGetter = false;\r\n    var getStart: i32 = 0;\r\n    var getEnd: i32 = 0;\r\n    var isSetter = false;\r\n    var setStart: i32 = 0;\r\n    var setEnd: i32 = 0;\r\n    if (!isInterface) {\r\n      if (tn.skip(Token.GET)) {\r\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n          flags |= CommonFlags.GET;\r\n          isGetter = true;\r\n          setStart = tn.tokenPos;\r\n          setEnd = tn.pos;\r\n          if (flags & CommonFlags.READONLY) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n            ); // recoverable\r\n          }\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n      } else if (tn.skip(Token.SET)) {\r\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n          flags |= CommonFlags.SET;\r\n          isSetter = true;\r\n          setStart = tn.tokenPos;\r\n          setEnd = tn.pos;\r\n          if (flags & CommonFlags.READONLY) {\r\n            this.error(\r\n              DiagnosticCode._0_modifier_cannot_be_used_here,\r\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n            ); // recoverable\r\n          }\r\n        } else {\r\n          tn.reset(state);\r\n        }\r\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\r\n        flags |= CommonFlags.CONSTRUCTOR;\r\n        isConstructor = true;\r\n        if (flags & CommonFlags.STATIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(staticStart, staticEnd), \"static\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(abstractStart, abstractEnd), \"abstract\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n      }\r\n    }\r\n\r\n    var name: IdentifierExpression;\r\n    if (isConstructor) {\r\n      name = Node.createConstructorExpression(tn.range());\r\n    } else {\r\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\r\n        // TODO: also handle symbols, which might have some of these modifiers\r\n        if (flags & CommonFlags.PUBLIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"public\"\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.PROTECTED) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"protected\"\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.PRIVATE) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(accessStart, accessEnd), \"protected\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.STATIC) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(staticStart, staticEnd), \"static\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(abstractStart, abstractEnd), \"abstract\"\r\n          ); // recoverable\r\n        }\r\n        if (flags & CommonFlags.READONLY) {\r\n          this.error(\r\n            DiagnosticCode._0_modifier_cannot_be_used_here,\r\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\r\n          ); // recoverable\r\n        }\r\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\r\n        if (!retIndex) return null;\r\n        tn.skip(Token.SEMICOLON);\r\n        return retIndex;\r\n      }\r\n      if (!tn.skipIdentifier()) {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          tn.range()\r\n        );\r\n        return null;\r\n      }\r\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var typeParameters: TypeParameterNode[] | null = null;\r\n    if (tn.skip(Token.LESSTHAN)) {\r\n      let typeParametersStart = tn.tokenPos;\r\n      typeParameters = this.parseTypeParameters(tn);\r\n      if (!typeParameters) return null;\r\n      if (isConstructor) {\r\n        this.error(\r\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else if (isGetter || isSetter) {\r\n        this.error(\r\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\r\n          tn.range(typeParametersStart, tn.pos)\r\n        ); // recoverable\r\n      } else {\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n    }\r\n\r\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let signatureStart = tn.tokenPos;\r\n      let parameters = this.parseParameters(tn, isConstructor);\r\n      if (!parameters) return null;\r\n      let thisType = this.parseParametersThis;\r\n      if (isConstructor) {\r\n        for (let i = 0, k = parameters.length; i < k; ++i) {\r\n          let parameter = parameters[i];\r\n          if (parameter.isAny(\r\n            CommonFlags.PUBLIC |\r\n            CommonFlags.PROTECTED |\r\n            CommonFlags.PRIVATE |\r\n            CommonFlags.READONLY\r\n          )) {\r\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\r\n              parameter.name,\r\n              parameter.type,\r\n              null, // initialized via parameter\r\n              null,\r\n              parameter.flags | CommonFlags.INSTANCE,\r\n              parameter.range\r\n            );\r\n            implicitFieldDeclaration.parameterIndex = i;\r\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\r\n            parent.members.push(implicitFieldDeclaration);\r\n          }\r\n        }\r\n      } else if (isGetter) {\r\n        if (parameters.length) {\r\n          this.error(\r\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\r\n            name.range\r\n          );\r\n        }\r\n      } else if (isSetter) {\r\n        if (parameters.length != 1) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\r\n            name.range\r\n          );\r\n        }\r\n        if (parameters.length && parameters[0].initializer) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\r\n            name.range\r\n          );\r\n        }\r\n      }\r\n\r\n      let returnType: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.COLON)) {\r\n        if (name.kind == NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\r\n            tn.range()\r\n          );\r\n        } else if (isSetter) {\r\n          this.error(\r\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\r\n            tn.range()\r\n          );\r\n        }\r\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\r\n        if (!returnType) return null;\r\n      } else {\r\n        returnType = Node.createOmittedType(tn.range(tn.pos));\r\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\r\n          this.error(\r\n            DiagnosticCode.Type_expected,\r\n            returnType.range\r\n          ); // recoverable\r\n        }\r\n      }\r\n\r\n      let signature = Node.createSignature(\r\n        parameters,\r\n        returnType,\r\n        thisType,\r\n        false,\r\n        tn.range(signatureStart, tn.pos)\r\n      );\r\n\r\n      let body: Statement | null = null;\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        if (flags & CommonFlags.AMBIENT) {\r\n          this.error(\r\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\r\n            tn.range()\r\n          ); // recoverable\r\n        } else if (flags & CommonFlags.ABSTRACT) {\r\n          this.error(\r\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\r\n            tn.range(), name.text\r\n          ); // recoverable\r\n        }\r\n        body = this.parseBlockStatement(tn, false);\r\n        if (!body) return null;\r\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\r\n        this.error(\r\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n\r\n      let retMethod = Node.createMethodDeclaration(\r\n        name,\r\n        typeParameters,\r\n        signature,\r\n        body,\r\n        decorators,\r\n        flags,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retMethod;\r\n\r\n    } else if (isConstructor) {\r\n      this.error(\r\n        DiagnosticCode.Constructor_implementation_is_missing,\r\n        name.range\r\n      );\r\n\r\n    } else if (isGetter || isSetter) {\r\n      this.error(\r\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\r\n        name.range\r\n      );\r\n\r\n    // field: (':' Type)? ('=' Expression)? ';'?\r\n    } else {\r\n      if (flags & CommonFlags.ABSTRACT) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(abstractStart, abstractEnd), \"abstract\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.GET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(getStart, getEnd), \"get\"\r\n        ); // recoverable\r\n      }\r\n\r\n      if (flags & CommonFlags.SET) {\r\n        this.error(\r\n          DiagnosticCode._0_modifier_cannot_be_used_here,\r\n          tn.range(setStart, setEnd), \"set\"\r\n        ); // recoverable\r\n      }\r\n\r\n      let type: CommonTypeNode | null = null;\r\n      if (tn.skip(Token.QUESTION)) {\r\n        this.error(\r\n          DiagnosticCode.Optional_properties_are_not_supported,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      if (tn.skip(Token.EXCLAMATION)) {\r\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\r\n      }\r\n      if (tn.skip(Token.COLON)) {\r\n        type = this.parseType(tn);\r\n        if (!type) return null;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.Type_expected,\r\n          tn.range()\r\n        ); // recoverable\r\n      }\r\n      let initializer: Expression | null = null;\r\n      if (tn.skip(Token.EQUALS)) {\r\n        initializer = this.parseExpression(tn);\r\n        if (!initializer) return null;\r\n      }\r\n      let range = tn.range(startPos, tn.pos);\r\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\r\n        this.error(\r\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\r\n          range\r\n        );\r\n      }\r\n      let retField = Node.createFieldDeclaration(\r\n        name,\r\n        type,\r\n        initializer,\r\n        decorators,\r\n        flags,\r\n        range\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return retField;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[]): IndexSignatureDeclaration | null {\r\n\r\n    // at: '[': 'key' ':' Type ']' ':' Type\r\n\r\n    if (decorators.length) {\r\n      this.error(\r\n        DiagnosticCode.Decorators_are_not_valid_here,\r\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\r\n      ); // recoverable\r\n    }\r\n\r\n    var start = tn.tokenPos;\r\n    if (tn.skipIdentifier()) {\r\n      let id = tn.readIdentifier();\r\n      if (id == \"key\") {\r\n        if (tn.skip(Token.COLON)) {\r\n          let keyType = this.parseType(tn);\r\n          if (!keyType) return null;\r\n          if (keyType.kind != NodeKind.TYPE) {\r\n            this.error(\r\n              DiagnosticCode.Type_expected,\r\n              tn.range()\r\n            );\r\n            return null;\r\n          }\r\n          if (tn.skip(Token.CLOSEBRACKET)) {\r\n            if (tn.skip(Token.COLON)) {\r\n              let valueType = this.parseType(tn);\r\n              if (!valueType) return null;\r\n              return Node.createIndexSignatureDeclaration(<TypeNode>keyType, valueType, tn.range(start, tn.pos));\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \":\"\r\n              );\r\n            }\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n          }\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \":\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"key\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseNamespace(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): NamespaceDeclaration | null {\r\n\r\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.OPENBRACE)) {\r\n        let members = new Array<Statement>();\r\n        let ns = Node.createNamespaceDeclaration(\r\n          identifier,\r\n          members,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseTopLevelStatement(tn, ns);\r\n          if (member) members.push(member);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ns;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"{\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExport(\r\n    tn: Tokenizer,\r\n    startPos: i32,\r\n    isDeclare: bool\r\n  ): ExportStatement | null {\r\n\r\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\r\n\r\n    var path: StringLiteralExpression | null = null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let members = new Array<ExportMember>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n          let member = this.parseExportMember(tn);\r\n          if (!member) return null;\r\n          members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\r\n      let internalPath = ret.internalPath;\r\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\r\n        this.backlog.push(internalPath);\r\n        this.seenlog.add(internalPath);\r\n      }\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.FROM)) {\r\n        if (tn.skip(Token.STRINGLITERAL)) {\r\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\r\n          let internalPath = assert(ret.internalPath);\r\n          let source = tn.source;\r\n          if (!source.exportPaths) source.exportPaths = new Set();\r\n          source.exportPaths.add(internalPath);\r\n          if (!this.seenlog.has(internalPath)) {\r\n            this.backlog.push(internalPath);\r\n            this.seenlog.add(internalPath);\r\n          }\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"from\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportMember(\r\n    tn: Tokenizer\r\n  ): ExportMember | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createExportMember(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImport(\r\n    tn: Tokenizer\r\n  ): ImportStatement | null {\r\n\r\n    // at 'import':\r\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\r\n    //  'from' StringLiteral ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var members: ImportDeclaration[] | null = null;\r\n    var namespaceName: IdentifierExpression | null = null;\r\n    var skipFrom = false;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      members = new Array();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        let member = this.parseImportDeclaration(tn);\r\n        if (!member) return null;\r\n        members.push(member);\r\n        if (!tn.skip(Token.COMMA)) {\r\n          if (tn.skip(Token.CLOSEBRACE)) {\r\n            break;\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"}\"\r\n            );\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n    } else if (tn.skip(Token.ASTERISK)) {\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"as\"\r\n        );\r\n        return null;\r\n      }\r\n    } else {\r\n      skipFrom = true;\r\n    }\r\n\r\n    if (skipFrom || tn.skip(Token.FROM)) {\r\n      if (tn.skip(Token.STRINGLITERAL)) {\r\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\r\n        let ret: ImportStatement;\r\n        if (namespaceName) {\r\n          assert(!members);\r\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\r\n        } else {\r\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\r\n        }\r\n        let internalPath = ret.internalPath;\r\n        if (!this.seenlog.has(internalPath)) {\r\n          this.backlog.push(internalPath);\r\n          this.seenlog.add(internalPath);\r\n        }\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode.String_literal_expected,\r\n          tn.range()\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"from\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseImportDeclaration(\r\n    tn: Tokenizer\r\n  ): ImportDeclaration | null {\r\n\r\n    // before: Identifier ('as' Identifier)?\r\n\r\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\r\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let asIdentifier: IdentifierExpression | null = null;\r\n      if (tn.skip(Token.AS)) {\r\n        if (tn.skipIdentifier()) {\r\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n      return Node.createImportDeclaration(\r\n        identifier,\r\n        asIdentifier,\r\n        asIdentifier\r\n          ? Range.join(identifier.range, asIdentifier.range)\r\n          : identifier.range\r\n      );\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExportImport(\r\n    tn: Tokenizer,\r\n    startPos: i32\r\n  ): ExportImportStatement | null {\r\n\r\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      if (tn.skip(Token.EQUALS)) {\r\n        if (tn.skipIdentifier()) {\r\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool = false\r\n  ): Statement | null {\r\n\r\n    // at previous token\r\n\r\n    var state = tn.mark();\r\n    var token = tn.next();\r\n    var statement: Statement | null = null;\r\n    switch (token) {\r\n      case Token.BREAK: {\r\n        statement = this.parseBreak(tn);\r\n        break;\r\n      }\r\n      case Token.CONST: {\r\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.CONTINUE: {\r\n        statement = this.parseContinue(tn);\r\n        break;\r\n      }\r\n      case Token.DO: {\r\n        statement = this.parseDoStatement(tn);\r\n        break;\r\n      }\r\n      case Token.FOR: {\r\n        statement = this.parseForStatement(tn);\r\n        break;\r\n      }\r\n      case Token.IF: {\r\n        statement = this.parseIfStatement(tn);\r\n        break;\r\n      }\r\n      case Token.LET: {\r\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.VAR: {\r\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n        break;\r\n      }\r\n      case Token.OPENBRACE: {\r\n        statement = this.parseBlockStatement(tn, topLevel);\r\n        break;\r\n      }\r\n      case Token.RETURN: {\r\n        if (topLevel) {\r\n          this.error(\r\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\r\n            tn.range()\r\n          ); // recoverable\r\n        }\r\n        statement = this.parseReturn(tn);\r\n        break;\r\n      }\r\n      case Token.SEMICOLON: {\r\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\r\n      }\r\n      case Token.SWITCH: {\r\n        statement = this.parseSwitchStatement(tn);\r\n        break;\r\n      }\r\n      case Token.THROW: {\r\n        statement = this.parseThrowStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TRY: {\r\n        statement = this.parseTryStatement(tn);\r\n        break;\r\n      }\r\n      case Token.VOID: {\r\n        statement = this.parseVoidStatement(tn);\r\n        break;\r\n      }\r\n      case Token.WHILE: {\r\n        statement = this.parseWhileStatement(tn);\r\n        break;\r\n      }\r\n      case Token.TYPE: { // also identifier\r\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\r\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n          break;\r\n        }\r\n        // fall-through\r\n      }\r\n      default: {\r\n        tn.reset(state);\r\n        statement = this.parseExpressionStatement(tn);\r\n        break;\r\n      }\r\n    }\r\n    if (!statement) { // has been reported\r\n      tn.reset(state);\r\n      this.skipStatement(tn);\r\n    } else {\r\n      tn.discard(state);\r\n    }\r\n    return statement;\r\n  }\r\n\r\n  parseBlockStatement(\r\n    tn: Tokenizer,\r\n    topLevel: bool\r\n  ): BlockStatement | null {\r\n\r\n    // at '{': Statement* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements = new Array<Statement>();\r\n    while (!tn.skip(Token.CLOSEBRACE)) {\r\n      let state = tn.mark();\r\n      let statement = this.parseStatement(tn, topLevel);\r\n      if (!statement) {\r\n        if (tn.token == Token.ENDOFFILE) return null;\r\n        tn.reset(state);\r\n        this.skipStatement(tn);\r\n      } else {\r\n        tn.discard(state);\r\n        statements.push(statement);\r\n      }\r\n    }\r\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseBreak(\r\n    tn: Tokenizer\r\n  ): BreakStatement | null {\r\n\r\n    // at 'break': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createBreakStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseContinue(\r\n    tn: Tokenizer\r\n  ): ContinueStatement | null {\r\n\r\n    // at 'continue': Identifier? ';'?\r\n\r\n    var identifier: IdentifierExpression | null = null;\r\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\r\n      tn.next(IdentifierHandling.PREFER);\r\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n    }\r\n    var ret = Node.createContinueStatement(identifier, tn.range());\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseDoStatement(\r\n    tn: Tokenizer\r\n  ): DoStatement | null {\r\n\r\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statement = this.parseStatement(tn);\r\n    if (!statement) return null;\r\n\r\n    if (tn.skip(Token.WHILE)) {\r\n\r\n      if (tn.skip(Token.OPENPAREN)) {\r\n        let condition = this.parseExpression(tn);\r\n        if (!condition) return null;\r\n\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"(\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"while\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseExpressionStatement(\r\n    tn: Tokenizer\r\n  ): ExpressionStatement | null {\r\n\r\n    // at previous token\r\n\r\n    var expr = this.parseExpression(tn);\r\n    if (!expr) return null;\r\n\r\n    var ret = Node.createExpressionStatement(expr);\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseForStatement(\r\n    tn: Tokenizer\r\n  ): ForStatement | null {\r\n\r\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\r\n\r\n    var startPos = tn.tokenPos;\r\n\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let initializer: Statement | null = null;\r\n\r\n      if (tn.skip(Token.CONST)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.LET)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\r\n      } else if (tn.skip(Token.VAR)) {\r\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\r\n\r\n      } else if (!tn.skip(Token.SEMICOLON)) {\r\n        initializer = this.parseExpressionStatement(tn);\r\n        if (!initializer) return null;\r\n      }\r\n\r\n      if (tn.token == Token.SEMICOLON) {\r\n        let condition: ExpressionStatement | null = null;\r\n        if (!tn.skip(Token.SEMICOLON)) {\r\n          condition = this.parseExpressionStatement(tn);\r\n          if (!condition) return null;\r\n        }\r\n\r\n        if (tn.token == Token.SEMICOLON) {\r\n          let incrementor: Expression | null = null;\r\n          if (!tn.skip(Token.CLOSEPAREN)) {\r\n            incrementor = this.parseExpression(tn);\r\n            if (!incrementor) return null;\r\n\r\n            if (!tn.skip(Token.CLOSEPAREN)) {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \")\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n\r\n          let statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n\r\n          return Node.createForStatement(\r\n            initializer,\r\n            condition\r\n              ? condition.expression\r\n              : null,\r\n            incrementor,\r\n            statement,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \";\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \";\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseIfStatement(\r\n    tn: Tokenizer\r\n  ): IfStatement | null {\r\n\r\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let elseStatement: Statement | null = null;\r\n        if (tn.skip(Token.ELSE)) {\r\n          elseStatement = this.parseStatement(tn);\r\n          if (!elseStatement) return null;\r\n        }\r\n        return Node.createIfStatement(\r\n          condition,\r\n          statement,\r\n          elseStatement,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchStatement(\r\n    tn: Tokenizer\r\n  ): SwitchStatement | null {\r\n\r\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let condition = this.parseExpression(tn);\r\n      if (!condition) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        if (tn.skip(Token.OPENBRACE)) {\r\n          let cases = new Array<SwitchCase>();\r\n          while (!tn.skip(Token.CLOSEBRACE)) {\r\n            let case_ = this.parseSwitchCase(tn);\r\n            if (!case_) return null;\r\n            cases.push(<SwitchCase>case_);\r\n          }\r\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\r\n          tn.skip(Token.SEMICOLON);\r\n          return ret;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n        }\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseSwitchCase(\r\n    tn: Tokenizer\r\n  ): SwitchCase | null {\r\n\r\n    var startPos = tn.tokenPos;\r\n    var statements: Statement[],\r\n        statement: Statement | null;\r\n\r\n    // 'case' Expression ':' Statement*\r\n\r\n    if (tn.skip(Token.CASE)) {\r\n      let label = this.parseExpression(tn);\r\n      if (!label) return null;\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n\r\n    // 'default' ':' Statement*\r\n\r\n    } else if (tn.skip(Token.DEFAULT)) {\r\n      if (tn.skip(Token.COLON)) {\r\n        statements = new Array<Statement>();\r\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\r\n          statement = this.parseStatement(tn);\r\n          if (!statement) return null;\r\n          statements.push(statement);\r\n        }\r\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \":\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._case_or_default_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseThrowStatement(\r\n    tn: Tokenizer\r\n  ): ThrowStatement | null {\r\n\r\n    // at 'throw': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn);\r\n    if (!expression) return null;\r\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseTryStatement(\r\n    tn: Tokenizer\r\n  ): TryStatement | null {\r\n\r\n    // at 'try':\r\n    //   '{' Statement* '}'\r\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\r\n    //   ('finally' '{' Statement* '}'? ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var stmt: Statement | null;\r\n    if (tn.skip(Token.OPENBRACE)) {\r\n      let statements = new Array<Statement>();\r\n      while (!tn.skip(Token.CLOSEBRACE)) {\r\n        stmt = this.parseStatement(tn);\r\n        if (!stmt) return null;\r\n        statements.push(<Statement>stmt);\r\n      }\r\n      let catchVariable: IdentifierExpression | null = null;\r\n      let catchStatements: Statement[] | null = null;\r\n      let finallyStatements: Statement[] | null = null;\r\n      if (tn.skip(Token.CATCH)) {\r\n        if (!tn.skip(Token.OPENPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"(\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skipIdentifier()) {\r\n          this.error(\r\n            DiagnosticCode.Identifier_expected,\r\n            tn.range()\r\n          );\r\n          return null;\r\n        }\r\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        catchStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          catchStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (tn.skip(Token.FINALLY)) {\r\n        if (!tn.skip(Token.OPENBRACE)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"{\"\r\n          );\r\n          return null;\r\n        }\r\n        finallyStatements = [];\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          stmt = this.parseStatement(tn);\r\n          if (!stmt) return null;\r\n          finallyStatements.push(<Statement>stmt);\r\n        }\r\n      }\r\n      if (!(catchStatements || finallyStatements)) {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"catch\"\r\n        );\r\n        return null;\r\n      }\r\n      let ret = Node.createTryStatement(\r\n        statements,\r\n        catchVariable,\r\n        catchStatements,\r\n        finallyStatements,\r\n        tn.range(startPos, tn.pos)\r\n      );\r\n      tn.skip(Token.SEMICOLON);\r\n      return ret;\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"{\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseTypeDeclaration(\r\n    tn: Tokenizer,\r\n    flags: CommonFlags,\r\n    decorators: DecoratorNode[] | null,\r\n    startPos: i32\r\n  ): TypeDeclaration | null {\r\n\r\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\r\n\r\n    if (tn.skipIdentifier()) {\r\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n      let typeParameters: TypeParameterNode[] | null = null;\r\n      if (tn.skip(Token.LESSTHAN)) {\r\n        typeParameters = this.parseTypeParameters(tn);\r\n        if (!typeParameters) return null;\r\n        flags |= CommonFlags.GENERIC;\r\n      }\r\n      if (tn.skip(Token.EQUALS)) {\r\n        let type = this.parseType(tn);\r\n        if (!type) return null;\r\n        let ret = Node.createTypeDeclaration(\r\n          name,\r\n          typeParameters,\r\n          type,\r\n          decorators,\r\n          flags,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \"=\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode.Identifier_expected,\r\n        tn.range()\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  parseVoidStatement(\r\n    tn: Tokenizer\r\n  ): VoidStatement | null {\r\n\r\n    // at 'void': Expression ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\r\n    if (!expression) return null;\r\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\r\n    tn.skip(Token.SEMICOLON);\r\n    return ret;\r\n  }\r\n\r\n  parseWhileStatement(\r\n    tn: Tokenizer\r\n  ): WhileStatement | null {\r\n\r\n    // at 'while': '(' Expression ')' Statement ';'?\r\n\r\n    var startPos = tn.tokenPos;\r\n    if (tn.skip(Token.OPENPAREN)) {\r\n      let expression = this.parseExpression(tn);\r\n      if (!expression) return null;\r\n      if (tn.skip(Token.CLOSEPAREN)) {\r\n        let statement = this.parseStatement(tn);\r\n        if (!statement) return null;\r\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\r\n        tn.skip(Token.SEMICOLON);\r\n        return ret;\r\n      } else {\r\n        this.error(\r\n          DiagnosticCode._0_expected,\r\n          tn.range(), \")\"\r\n        );\r\n      }\r\n    } else {\r\n      this.error(\r\n        DiagnosticCode._0_expected,\r\n        tn.range(), \"(\"\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // expressions\r\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\r\n\r\n  parseExpressionStart(\r\n    tn: Tokenizer\r\n  ): Expression | null {\r\n\r\n    var token = tn.next(IdentifierHandling.PREFER);\r\n    var startPos = tn.tokenPos;\r\n    var precedence = determinePrecedenceStart(token);\r\n    if (precedence != Precedence.NONE) {\r\n      let operand: Expression | null;\r\n\r\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\r\n\r\n      // NewExpression\r\n      if (token == Token.NEW) {\r\n        operand = this.parseExpression(tn, Precedence.CALL);\r\n        if (!operand) return null;\r\n        if (operand.kind == NodeKind.CALL) {\r\n          return Node.createNewExpression(\r\n            (<CallExpression>operand).expression,\r\n            (<CallExpression>operand).typeArguments,\r\n            (<CallExpression>operand).arguments,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      } else {\r\n        operand = this.parseExpression(tn, precedence);\r\n        if (!operand) return null;\r\n      }\r\n\r\n      // UnaryPrefixExpression\r\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\r\n        if (\r\n          operand.kind != NodeKind.IDENTIFIER &&\r\n          operand.kind != NodeKind.ELEMENTACCESS &&\r\n          operand.kind != NodeKind.PROPERTYACCESS\r\n        ) {\r\n          this.error(\r\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n            operand.range\r\n          );\r\n        }\r\n      }\r\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\r\n    }\r\n\r\n    var expr: Expression | null = null;\r\n    switch (token) {\r\n\r\n      case Token.NULL: return Node.createNullExpression(tn.range());\r\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\r\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\r\n\r\n      // ParenthesizedExpression\r\n      // FunctionExpression\r\n      case Token.OPENPAREN: {\r\n\r\n        // determine whether this is a function expression\r\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [],\r\n            ArrowKind.ARROW_PARENTHESIZED\r\n          );\r\n        }\r\n        let state = tn.mark();\r\n        let again = true;\r\n        do {\r\n          switch (tn.next(IdentifierHandling.PREFER)) {\r\n\r\n            // function expression\r\n            case Token.DOT_DOT_DOT: {\r\n              tn.reset(state);\r\n              return this.parseFunctionExpression(tn);\r\n            }\r\n            // can be both\r\n            case Token.IDENTIFIER: {\r\n              tn.readIdentifier();\r\n              switch (tn.next()) {\r\n\r\n                // if we got here, check for arrow\r\n                case Token.CLOSEPAREN: {\r\n                  if (\r\n                    !tn.skip(Token.COLON) &&\r\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\r\n                  ) {\r\n                    again = false;\r\n                    break;\r\n                  }\r\n                  // fall-through\r\n                }\r\n                // function expression\r\n                case Token.COLON: {    // type annotation\r\n                  tn.reset(state);\r\n                  return this.parseFunctionExpression(tn);\r\n                }\r\n                // optional parameter or parenthesized\r\n                case Token.QUESTION: {\r\n                  if (\r\n                    tn.skip(Token.COLON) ||   // optional parameter with type\r\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\r\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\r\n                  ) {\r\n                    tn.reset(state);\r\n                    return this.parseFunctionExpression(tn);\r\n                  }\r\n                  again = false; // parenthesized\r\n                  break;\r\n                  }\r\n                case Token.COMMA: {\r\n                  break; // continue\r\n                }\r\n                // parenthesized expression\r\n                // case Token.EQUALS:  // missing type annotation for simplicity\r\n                default: {\r\n                  again = false;\r\n                  break;\r\n                }\r\n              }\r\n              break;\r\n            }\r\n            // parenthesized expression\r\n            default: {\r\n              again = false;\r\n              break;\r\n            }\r\n          }\r\n        } while (again);\r\n        tn.reset(state);\r\n\r\n        // parse parenthesized\r\n        expr = this.parseExpression(tn);\r\n        if (!expr) return null;\r\n        if (!tn.skip(Token.CLOSEPAREN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\r\n      }\r\n      // ArrayLiteralExpression\r\n      case Token.OPENBRACKET: {\r\n        let elementExpressions = new Array<Expression | null>();\r\n        while (!tn.skip(Token.CLOSEBRACKET)) {\r\n          if (tn.peek() == Token.COMMA) {\r\n            expr = null; // omitted\r\n          } else {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n          }\r\n          elementExpressions.push(expr);\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACKET)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"]\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\r\n      }\r\n      // ObjectLiteralExpression\r\n      case Token.OPENBRACE: {\r\n        let startPos = tn.tokenPos;\r\n        let names = new Array<IdentifierExpression>();\r\n        let values = new Array<Expression>();\r\n        let name: IdentifierExpression;\r\n        while (!tn.skip(Token.CLOSEBRACE)) {\r\n          if (!tn.skipIdentifier()) {\r\n            if (!tn.skip(Token.STRINGLITERAL)) {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                tn.range(),\r\n              );\r\n              return null;\r\n            }\r\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\r\n            name.isQuoted = true;\r\n          } else {\r\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n          }\r\n          names.push(name);\r\n          if (tn.skip(Token.COLON)) {\r\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!value) return null;\r\n            values.push(value);\r\n          } else if (!name.isQuoted) {\r\n            values.push(name);\r\n          } else {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          if (!tn.skip(Token.COMMA)) {\r\n            if (tn.skip(Token.CLOSEBRACE)) {\r\n              break;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode._0_expected,\r\n                tn.range(), \"}\"\r\n              );\r\n              return null;\r\n            }\r\n          }\r\n        }\r\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\r\n      }\r\n      // AssertionExpression (unary prefix)\r\n      case Token.LESSTHAN: {\r\n        let toType = this.parseType(tn);\r\n        if (!toType) return null;\r\n        if (!tn.skip(Token.GREATERTHAN)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \">\"\r\n          );\r\n          return null;\r\n        }\r\n        expr = this.parseExpression(tn, Precedence.CALL);\r\n        if (!expr) return null;\r\n        return Node.createAssertionExpression(\r\n          AssertionKind.PREFIX,\r\n          expr,\r\n          toType,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.IDENTIFIER: {\r\n        let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(startPos, tn.pos));\r\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\r\n          return this.parseFunctionExpressionCommon(\r\n            tn,\r\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\r\n            [\r\n              Node.createParameter(\r\n                identifier,\r\n                Node.createOmittedType(identifier.range.atEnd),\r\n                null,\r\n                ParameterKind.DEFAULT,\r\n                identifier.range\r\n              )\r\n            ],\r\n            ArrowKind.ARROW_SINGLE,\r\n            startPos\r\n          );\r\n        }\r\n        return identifier;\r\n      }\r\n      case Token.THIS: {\r\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.CONSTRUCTOR: {\r\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.SUPER: {\r\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\r\n          this.error(\r\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\r\n            tn.range()\r\n          );\r\n        }\r\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.STRINGLITERAL: {\r\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.INTEGERLITERAL: {\r\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\r\n      }\r\n      case Token.FLOATLITERAL: {\r\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\r\n      }\r\n      // RegexpLiteralExpression\r\n      // note that this also continues on invalid ones so the surrounding AST remains intact\r\n      case Token.SLASH: {\r\n        let regexpPattern = tn.readRegexpPattern(); // also reports\r\n        if (!tn.skip(Token.SLASH)) {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"/\"\r\n          );\r\n          return null;\r\n        }\r\n        return Node.createRegexpLiteralExpression(\r\n          regexpPattern,\r\n          tn.readRegexpFlags(), // also reports\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n      }\r\n      case Token.FUNCTION: {\r\n        return this.parseFunctionExpression(tn);\r\n      }\r\n      case Token.CLASS: {\r\n        return this.parseClassExpression(tn);\r\n      }\r\n      default: {\r\n        if (token == Token.ENDOFFILE) {\r\n          this.error(\r\n            DiagnosticCode.Unexpected_end_of_text,\r\n            tn.range(startPos)\r\n          );\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode.Expression_expected,\r\n            tn.range()\r\n          );\r\n        }\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  tryParseTypeArgumentsBeforeArguments(\r\n    tn: Tokenizer\r\n  ): CommonTypeNode[] | null {\r\n\r\n    // at '<': Type (',' Type)* '>' '('\r\n\r\n    var state = tn.mark();\r\n    if (!tn.skip(Token.LESSTHAN)) return null;\r\n    var typeArguments = new Array<CommonTypeNode>();\r\n    do {\r\n      if (tn.peek() === Token.GREATERTHAN) {\r\n        break;\r\n      }\r\n      let type = this.parseType(tn, true, true);\r\n      if (!type) {\r\n        tn.reset(state);\r\n        return null;\r\n      }\r\n      typeArguments.push(type);\r\n    } while (tn.skip(Token.COMMA));\r\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\r\n      return typeArguments;\r\n    }\r\n    tn.reset(state);\r\n    return null;\r\n  }\r\n\r\n  parseArguments(\r\n    tn: Tokenizer\r\n  ): Expression[] | null {\r\n\r\n    // at '(': (Expression (',' Expression)*)? ')'\r\n\r\n    var args = new Array<Expression>();\r\n    while (!tn.skip(Token.CLOSEPAREN)) {\r\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n      if (!expr) return null;\r\n      args.push(expr);\r\n      if (!tn.skip(Token.COMMA)) {\r\n        if (tn.skip(Token.CLOSEPAREN)) {\r\n          break;\r\n        } else {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \")\"\r\n          );\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    return args;\r\n  }\r\n\r\n  parseExpression(\r\n    tn: Tokenizer,\r\n    precedence: Precedence = Precedence.COMMA\r\n  ): Expression | null {\r\n    assert(precedence != Precedence.NONE);\r\n\r\n    var expr = this.parseExpressionStart(tn);\r\n    if (!expr) return null;\r\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\r\n\r\n    var startPos = expr.range.start;\r\n    var token: Token;\r\n    var next: Expression | null = null;\r\n    var nextPrecedence: Precedence;\r\n    while (\r\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\r\n    ) { // precedence climbing\r\n      tn.next();\r\n      switch (token) {\r\n        // AssertionExpression\r\n        case Token.AS: {\r\n          let toType = this.parseType(tn); // reports\r\n          if (!toType) return null;\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.AS,\r\n            expr,\r\n            toType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        case Token.EXCLAMATION: {\r\n          expr = Node.createAssertionExpression(\r\n            AssertionKind.NONNULL,\r\n            expr,\r\n            null,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // InstanceOfExpression\r\n        case Token.INSTANCEOF: {\r\n          let isType = this.parseType(tn); // reports\r\n          if (!isType) return null;\r\n          expr = Node.createInstanceOfExpression(\r\n            expr,\r\n            isType,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // ElementAccessExpression\r\n        case Token.OPENBRACKET: {\r\n          next = this.parseExpression(tn); // reports\r\n          if (!next) return null;\r\n          if (!tn.skip(Token.CLOSEBRACKET)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \"]\"\r\n            );\r\n            return null;\r\n          }\r\n          expr = Node.createElementAccessExpression(\r\n            expr,\r\n            next,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // UnaryPostfixExpression\r\n        case Token.PLUS_PLUS:\r\n        case Token.MINUS_MINUS: {\r\n          if (\r\n            expr.kind != NodeKind.IDENTIFIER &&\r\n            expr.kind != NodeKind.ELEMENTACCESS &&\r\n            expr.kind != NodeKind.PROPERTYACCESS\r\n          ) {\r\n            this.error(\r\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\r\n              expr.range\r\n            );\r\n          }\r\n          expr = Node.createUnaryPostfixExpression(\r\n            token,\r\n            expr,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // TernaryExpression\r\n        case Token.QUESTION: {\r\n          let ifThen = this.parseExpression(tn);\r\n          if (!ifThen) return null;\r\n          if (!tn.skip(Token.COLON)) {\r\n            this.error(\r\n              DiagnosticCode._0_expected,\r\n              tn.range(), \":\"\r\n            );\r\n            return null;\r\n          }\r\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\r\n            ? Precedence.COMMA + 1\r\n            : Precedence.COMMA\r\n          );\r\n          if (!ifElse) return null;\r\n          expr = Node.createTernaryExpression(\r\n            expr,\r\n            ifThen,\r\n            ifElse,\r\n            tn.range(startPos, tn.pos)\r\n          );\r\n          break;\r\n        }\r\n        // CommaExpression\r\n        case Token.COMMA: {\r\n          let commaExprs: Expression[] = [ expr ];\r\n          do {\r\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\r\n            if (!expr) return null;\r\n            commaExprs.push(expr);\r\n          } while (tn.skip(Token.COMMA));\r\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\r\n          break;\r\n        }\r\n        default: {\r\n\r\n          // PropertyAccessExpression\r\n          if (token == Token.DOT) {\r\n            if (tn.skipIdentifier()) {\r\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\r\n            } else {\r\n              next = this.parseExpression(tn,\r\n                isRightAssociative(token)\r\n                  ? nextPrecedence\r\n                  : nextPrecedence + 1\r\n              );\r\n              if (!next) return null;\r\n            }\r\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\r\n              expr = Node.createPropertyAccessExpression(\r\n                expr,\r\n                <IdentifierExpression>next,\r\n                tn.range(startPos, tn.pos)\r\n              );\r\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\r\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\r\n              if (!expr) return null;\r\n            } else {\r\n              this.error(\r\n                DiagnosticCode.Identifier_expected,\r\n                next.range\r\n              );\r\n              return null;\r\n            }\r\n\r\n          // BinaryExpression\r\n          } else {\r\n            next = this.parseExpression(tn,\r\n              isRightAssociative(token)\r\n                ? nextPrecedence\r\n                : nextPrecedence + 1\r\n            );\r\n            if (!next) return null;\r\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  private joinPropertyCall(\r\n    tn: Tokenizer,\r\n    startPos: i32,\r\n    expr: Expression,\r\n    call: CallExpression\r\n  ): Expression | null {\r\n    var callee = call.expression;\r\n    switch (callee.kind) {\r\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\r\n        call.expression = Node.createPropertyAccessExpression(\r\n          expr,\r\n          <IdentifierExpression>callee,\r\n          tn.range(startPos, tn.pos)\r\n        );\r\n        break;\r\n      }\r\n      case NodeKind.CALL: { // join call target und wrap the original call around it\r\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\r\n        if (!inner) return null;\r\n        call.expression = inner;\r\n        call.range = tn.range(startPos, tn.pos);\r\n        break;\r\n      }\r\n      default: {\r\n        this.error(\r\n          DiagnosticCode.Identifier_expected,\r\n          call.range\r\n        );\r\n        return null;\r\n      }\r\n    }\r\n    return call;\r\n  }\r\n\r\n  private maybeParseCallExpression(\r\n    tn: Tokenizer,\r\n    expr: Expression\r\n  ): Expression {\r\n    if (nodeIsCallable(expr.kind)) {\r\n      let typeArguments: CommonTypeNode[] | null = null;\r\n      while (\r\n        tn.skip(Token.OPENPAREN)\r\n        ||\r\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\r\n      ) {\r\n        let args = this.parseArguments(tn);\r\n        if (!args) break;\r\n        expr = Node.createCallExpression( // is again callable\r\n          expr,\r\n          typeArguments,\r\n          args,\r\n          tn.range(expr.range.start, tn.pos)\r\n        );\r\n      }\r\n    }\r\n    return expr;\r\n  }\r\n\r\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipStatement(tn: Tokenizer): void {\r\n    tn.peek(true);\r\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\r\n    do {\r\n      let nextToken = tn.peek(true);\r\n      if (\r\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\r\n        nextToken == Token.SEMICOLON      // end of the statement for sure\r\n      ) {\r\n        tn.next();\r\n        break;\r\n      }\r\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\r\n      switch (tn.next()) {\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (true);\r\n  }\r\n\r\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\r\n  skipBlock(tn: Tokenizer): void {\r\n    // at '{': ... '}'\r\n    var depth = 1;\r\n    var again = true;\r\n    do {\r\n      switch (tn.next()) {\r\n        case Token.ENDOFFILE: {\r\n          this.error(\r\n            DiagnosticCode._0_expected,\r\n            tn.range(), \"}\"\r\n          );\r\n          again = false;\r\n          break;\r\n        }\r\n        case Token.OPENBRACE: {\r\n          ++depth;\r\n          break;\r\n        }\r\n        case Token.CLOSEBRACE: {\r\n          --depth;\r\n          if (!depth) again = false;\r\n          break;\r\n        }\r\n        case Token.IDENTIFIER: {\r\n          tn.readIdentifier();\r\n          break;\r\n        }\r\n        case Token.STRINGLITERAL: {\r\n          tn.readString();\r\n          break;\r\n        }\r\n        case Token.INTEGERLITERAL: {\r\n          tn.readInteger();\r\n          break;\r\n        }\r\n        case Token.FLOATLITERAL: {\r\n          tn.readFloat();\r\n          break;\r\n        }\r\n      }\r\n    } while (again);\r\n  }\r\n}\r\n\r\n/** Operator precedence from least to largest. */\r\nexport const enum Precedence {\r\n  NONE,\r\n  COMMA,\r\n  SPREAD,\r\n  YIELD,\r\n  ASSIGNMENT,\r\n  CONDITIONAL,\r\n  LOGICAL_OR,\r\n  LOGICAL_AND,\r\n  BITWISE_OR,\r\n  BITWISE_XOR,\r\n  BITWISE_AND,\r\n  EQUALITY,\r\n  RELATIONAL,\r\n  SHIFT,\r\n  ADDITIVE,\r\n  MULTIPLICATIVE,\r\n  EXPONENTIATED,\r\n  UNARY_PREFIX,\r\n  UNARY_POSTFIX,\r\n  CALL,\r\n  MEMBERACCESS,\r\n  GROUPING\r\n}\r\n\r\n/** Determines the precedence of a starting token. */\r\nfunction determinePrecedenceStart(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\r\n    case Token.YIELD: return Precedence.YIELD;\r\n    case Token.EXCLAMATION:\r\n    case Token.TILDE:\r\n    case Token.PLUS:\r\n    case Token.MINUS:\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS:\r\n    case Token.TYPEOF:\r\n    case Token.VOID:\r\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\r\n    case Token.NEW: return Precedence.MEMBERACCESS;\r\n  }\r\n  return Precedence.NONE;\r\n}\r\n\r\n/** Determines the precende of a non-starting token. */\r\nfunction determinePrecedence(kind: Token): Precedence {\r\n  switch (kind) {\r\n    case Token.COMMA: return Precedence.COMMA;\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\r\n    case Token.QUESTION: return Precedence.CONDITIONAL;\r\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\r\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\r\n    case Token.BAR: return Precedence.BITWISE_OR;\r\n    case Token.CARET: return Precedence.BITWISE_XOR;\r\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\r\n    case Token.EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS:\r\n    case Token.EQUALS_EQUALS_EQUALS:\r\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\r\n    case Token.AS:\r\n    case Token.IN:\r\n    case Token.INSTANCEOF:\r\n    case Token.LESSTHAN:\r\n    case Token.GREATERTHAN:\r\n    case Token.LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\r\n    case Token.LESSTHAN_LESSTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\r\n    case Token.PLUS:\r\n    case Token.MINUS: return Precedence.ADDITIVE;\r\n    case Token.ASTERISK:\r\n    case Token.SLASH:\r\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\r\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\r\n    case Token.PLUS_PLUS:\r\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\r\n    case Token.DOT:\r\n    case Token.NEW:\r\n    case Token.OPENBRACKET:\r\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\r\n  }\r\n  return Precedence.NONE;\r\n}\r\n\r\n/** Determines whether a non-starting token is right associative. */\r\nfunction isRightAssociative(kind: Token): bool {\r\n  switch (kind) {\r\n    case Token.EQUALS:\r\n    case Token.PLUS_EQUALS:\r\n    case Token.MINUS_EQUALS:\r\n    case Token.ASTERISK_ASTERISK_EQUALS:\r\n    case Token.ASTERISK_EQUALS:\r\n    case Token.SLASH_EQUALS:\r\n    case Token.PERCENT_EQUALS:\r\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\r\n    case Token.AMPERSAND_EQUALS:\r\n    case Token.CARET_EQUALS:\r\n    case Token.BAR_EQUALS:\r\n    case Token.QUESTION:\r\n    case Token.ASTERISK_ASTERISK: return true;\r\n    default: return false;\r\n  }\r\n}\r\n","/**\r\n * JavaScript glue code.\r\n * @module glue/js\r\n * @preferred\r\n *//***/\r\n\r\n/// <reference path=\"./node.d.ts\" />\r\n\r\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\r\nimport \"../../../std/portable/index\";\r\nimport \"./float\";\r\nimport \"./i64\";\r\n\r\nimport { Module } from \"../../module\";\r\n\r\nModule.prototype.toText = function(this: Module) {\r\n  return binaryen.wrapModule(this.ref).emitStackIR();\r\n};\r\n\r\nModule.prototype.toAsmjs = function(this: Module) {\r\n  return binaryen.wrapModule(this.ref).emitAsmjs();\r\n};\r\n","// Copy Binaryen exports to global scope\r\n\r\nconst binaryen = global.Binaryen || require(\"binaryen\");\r\nglobal.binaryen = binaryen;\r\n\r\nfor (var key in binaryen) {\r\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\r\n}\r\n\r\n// Utilize Binaryen's heap\r\n\r\nglobal.__memory_allocate = binaryen._malloc;\r\nglobal.__memory_free = binaryen._free;\r\nglobal.__memory_copy = binaryen._memmove;\r\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\r\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__19__;","/** @module std/portable *//***/\r\n\r\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\r\n\r\nglobalScope.ASC_TARGET = 0; // JS\r\nglobalScope.ASC_NO_ASSERT = false;\r\nglobalScope.ASC_MEMORY_BASE = 0;\r\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\r\nglobalScope.ASC_SHRINK_LEVEL = 0;\r\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\r\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\r\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\r\nglobalScope.ASC_FEATURE_SIMD = false;\r\nglobalScope.ASC_FEATURE_THREADS = false;\r\n\r\nvar F64 = new Float64Array(1);\r\nvar U64 = new Uint32Array(F64.buffer);\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\r\n, {\r\n  \"MIN_VALUE\": { value: -128, writable: false },\r\n  \"MAX_VALUE\": { value:  127, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\r\n, {\r\n  \"MIN_VALUE\": { value: -32768, writable: false },\r\n  \"MAX_VALUE\": { value:  32767, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\r\n, {\r\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\r\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\r\n, {\r\n  \"MIN_VALUE\": { value:   0, writable: false },\r\n  \"MAX_VALUE\": { value: 255, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\r\n, {\r\n  \"MIN_VALUE\": { value:     0, writable: false },\r\n  \"MAX_VALUE\": { value: 65535, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\r\n, {\r\n  \"MIN_VALUE\": { value:          0, writable: false },\r\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\r\n, {\r\n  \"MIN_VALUE\": { value: false, writable: false },\r\n  \"MAX_VALUE\": { value: true,  writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\r\n, {\r\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\r\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\r\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\r\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\r\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\r\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\r\n});\r\n\r\nObject.defineProperties(\r\n  globalScope[\"f64\"] = function f64(value) { return +value; }\r\n, {\r\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\r\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\r\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\r\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\r\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\r\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\r\n});\r\n\r\nglobalScope[\"clz\"] = Math.clz32;\r\n\r\nglobalScope[\"ctz\"] = function ctz(value) {\r\n  var c = Math.clz32(value & -value);\r\n  return value ? 31 - c : c;\r\n};\r\n\r\nglobalScope[\"popcnt\"] = function popcnt(value) {\r\n  value -= value >>> 1 & 0x55555555;\r\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\r\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\r\n};\r\n\r\nglobalScope[\"rotl\"] = function rotl(value, shift) {\r\n  shift &= 31;\r\n  return (value << shift) | (value >>> (32 - shift));\r\n};\r\n\r\nglobalScope[\"rotr\"] = function rotr(value, shift) {\r\n  shift &= 31;\r\n  return (value >>> shift) | (value << (32 - shift));\r\n};\r\n\r\nglobalScope[\"abs\"] = Math.abs;\r\n\r\nglobalScope[\"max\"] = Math.max;\r\n\r\nglobalScope[\"min\"] = Math.min;\r\n\r\nglobalScope[\"ceil\"] = Math.ceil;\r\n\r\nglobalScope[\"floor\"] = Math.floor;\r\n\r\n// Adopt code from https://github.com/rfk/wasm-polyfill\r\nglobalScope[\"nearest\"] = function nearest(value) {\r\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\r\n    return 2.0 * Math.round(value * 0.5);\r\n  }\r\n  return Math.round(value);\r\n};\r\n\r\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\r\n  return condition ? ifTrue : ifFalse;\r\n};\r\n\r\nglobalScope[\"sqrt\"] = Math.sqrt;\r\n\r\nglobalScope[\"trunc\"] = Math.trunc;\r\n\r\nglobalScope[\"copysign\"] = function copysign(x, y) {\r\n  return Math.abs(x) * Math.sign(y);\r\n};\r\n\r\nglobalScope[\"bswap\"] = function bswap(value) {\r\n  var a = value >> 8 & 0x00FF00FF;\r\n  var b = (value & 0x00FF00FF) << 8;\r\n  value = a | b;\r\n  a = value >> 16 & 0x0000FFFF;\r\n  b = (value & 0x0000FFFF) << 16;\r\n  return a | b;\r\n};\r\n\r\nglobalScope[\"bswap16\"] = function bswap16(value) {\r\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\r\n};\r\n\r\nfunction UnreachableError() {\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, UnreachableError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nUnreachableError.prototype = Object.create(Error.prototype);\r\nUnreachableError.prototype.name = \"UnreachableError\";\r\nUnreachableError.prototype.message = \"unreachable\";\r\n\r\nglobalScope[\"unreachable\"] = function unreachable() {\r\n  throw new UnreachableError();\r\n};\r\n\r\nfunction AssertionError(message) {\r\n  this.message = message || \"assertion failed\";\r\n  if (Error.captureStackTrace) {\r\n    Error.captureStackTrace(this, AssertionError);\r\n  } else {\r\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\r\n  }\r\n}\r\nAssertionError.prototype = Object.create(Error.prototype);\r\nAssertionError.prototype.name = \"AssertionError\";\r\n\r\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\r\n  if (isTrueish) return isTrueish;\r\n  throw new AssertionError(message);\r\n};\r\n\r\nglobalScope[\"changetype\"] = function changetype(value) {\r\n  return value;\r\n};\r\n\r\nglobalScope[\"parseI32\"] = function parseI32(str, radix) {\r\n  return parseInt(str, undefined) | 0;\r\n};\r\n\r\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\r\n  return String.fromCharCode.apply(String, arr);\r\n};\r\n\r\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\r\n  return String.fromCodePoint.apply(String, arr);\r\n};\r\n\r\nglobalScope[\"isInteger\"] = Number.isInteger;\r\n\r\nglobalScope[\"isFloat\"] = function isFloat(arg) {\r\n  return typeof arg === \"number\";\r\n};\r\n\r\nglobalScope[\"isNullable\"] = function isNullable(arg) {\r\n  return true;\r\n}\r\n\r\nglobalScope[\"isReference\"] = function isReference(arg) {\r\n  return typeof arg === \"object\" || typeof arg === \"string\";\r\n};\r\n\r\nglobalScope[\"isFunction\"] = function isFunction(arg) {\r\n  return typeof arg === \"function\";\r\n}\r\n\r\nglobalScope[\"isString\"] = function isString(arg) {\r\n  return typeof arg === \"string\" || arg instanceof String;\r\n};\r\n\r\nglobalScope[\"isArray\"] = Array.isArray;\r\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\r\n  return expr\r\n    && typeof expr === 'object'\r\n    && typeof expr.length === 'number'\r\n    && expr.length >= 0\r\n    && Math.trunc(expr.length) === expr.length;\r\n}\r\n\r\nglobalScope[\"isDefined\"] = function isDefined(expr) {\r\n  return typeof expr !== \"undefined\";\r\n}\r\n\r\nglobalScope[\"isConstant\"] = function isConstant(expr) {\r\n  return false;\r\n};\r\n\r\nglobalScope[\"unchecked\"] = function unchecked(expr) {\r\n  return expr;\r\n};\r\n\r\nglobalScope[\"fmod\"] = function fmod(x, y) {\r\n  return x % y;\r\n};\r\n\r\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\r\n  return Math.fround(x % y);\r\n};\r\n\r\nglobalScope[\"JSMath\"] = Math;\r\n\r\nObject.defineProperties(globalScope[\"JSMath\"], {\r\n  sincos_sin: { value: 0.0, writable: true },\r\n  sincos_cos: { value: 0.0, writable: true },\r\n  signbit: {\r\n    value: function signbit(x) {\r\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\r\n    }\r\n  },\r\n  sincos: {\r\n    value: function sincos(x) {\r\n      this.sincos_sin = Math.sin(x);\r\n      this.sincos_cos = Math.cos(x);\r\n    }\r\n  }\r\n});\r\n\r\nglobalScope[\"memory\"] = (() => {\r\n  var HEAP = new Uint8Array(0);\r\n  var HEAP_OFFSET = 0;\r\n  return {\r\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\r\n      if (!(size >>>= 0)) return 0;\r\n      if (HEAP_OFFSET + size > HEAP.length) {\r\n        var oldHeap = HEAP;\r\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\r\n        HEAP.set(oldHeap);\r\n      }\r\n      var ptr = HEAP_OFFSET;\r\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\r\n      return ptr;\r\n    },\r\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\r\n      HEAP.fill(value, dest, dest + size);\r\n    },\r\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\r\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\r\n      HEAP.copyWithin(dest, src, src + size);\r\n    },\r\n    reset: globalScope[\"__memory_reset\"] || function reset() {\r\n      HEAP = new Uint8Array(0);\r\n      HEAP_OFFSET = 0;\r\n    }\r\n  };\r\n})();\r\n\r\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\r\n  HEAP[(ptr | 0) + (offset | 0)] = value;\r\n};\r\n\r\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\r\n  return HEAP[(ptr | 0) + (offset | 0)];\r\n};\r\n","const F64 = new Float64Array(1);\r\nconst F32 = new Float32Array(F64.buffer);\r\nconst I32 = new Int32Array(F64.buffer);\r\n\r\nglobal.f32_as_i32 = function(value) {\r\n  F32[0] = value;\r\n  return I32[0];\r\n};\r\n\r\nglobal.i32_as_f32 = function(value) {\r\n  I32[0] = value;\r\n  return F32[0];\r\n};\r\n\r\nglobal.f64_as_i64 = function(value) {\r\n  F64[0] = value;\r\n  return i64_new(I32[0], I32[1]);\r\n};\r\n\r\nglobal.i64_as_f64 = function(value) {\r\n  I32[0] = i64_low(value);\r\n  I32[1] = i64_high(value);\r\n  return F64[0];\r\n};\r\n","const Long = global.Long || require(\"long\");\r\n\r\nglobal.i64_zero = Long.ZERO;\r\n\r\nglobal.i64_one = Long.ONE;\r\n\r\nglobal.i64_new = function(lo, hi) {\r\n  return Long.fromBits(lo, hi);\r\n};\r\n\r\nglobal.i64_low = function(value) {\r\n  return value.low;\r\n};\r\n\r\nglobal.i64_high = function(value) {\r\n  return value.high;\r\n};\r\n\r\nglobal.i64_add = function(left, right) {\r\n  return left.add(right);\r\n};\r\n\r\nglobal.i64_sub = function(left, right) {\r\n  return left.sub(right);\r\n};\r\n\r\nglobal.i64_mul = function(left, right) {\r\n  return left.mul(right);\r\n};\r\n\r\nglobal.i64_div = function(left, right) {\r\n  return left.div(right);\r\n};\r\n\r\nglobal.i64_div_u = function(left, right) {\r\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_rem = function(left, right) {\r\n  return left.mod(right);\r\n};\r\n\r\nglobal.i64_rem_u = function(left, right) {\r\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\r\n};\r\n\r\nglobal.i64_and = function(left, right) {\r\n  return left.and(right);\r\n};\r\n\r\nglobal.i64_or = function(left, right) {\r\n  return left.or(right);\r\n};\r\n\r\nglobal.i64_xor = function(left, right) {\r\n  return left.xor(right);\r\n};\r\n\r\nglobal.i64_shl = function(left, right) {\r\n  return left.shl(right);\r\n};\r\n\r\nglobal.i64_shr = function(left, right) {\r\n  return left.shr(right);\r\n};\r\n\r\nglobal.i64_shr_u = function(left, right) {\r\n  return left.shru(right);\r\n};\r\n\r\nglobal.i64_not = function(value) {\r\n  return value.not();\r\n};\r\n\r\nglobal.i64_eq = function(left, right) {\r\n  return left.eq(right);\r\n};\r\n\r\nglobal.i64_ne = function(left, right) {\r\n  return left.ne(right);\r\n};\r\n\r\nglobal.i64_align = function(value, alignment) {\r\n  assert(alignment && (alignment & (alignment - 1)) == 0);\r\n  var mask = Long.fromInt(alignment - 1);\r\n  return value.add(mask).and(mask.not());\r\n};\r\n\r\nglobal.i64_is_i8 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i16 = function(value) {\r\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\r\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_i32 = function(value) {\r\n  return (value.high === 0 && value.low >= 0)\r\n      || (value.high === -1 && value.low < 0);\r\n};\r\n\r\nglobal.i64_is_u8 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u16 = function(value) {\r\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\r\n};\r\n\r\nglobal.i64_is_u32 = function(value) {\r\n  return value.high === 0;\r\n};\r\n\r\nglobal.i64_is_bool = function(value) {\r\n  return value.high === 0 && (value.low === 0 || value.low === 1);\r\n};\r\n\r\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\r\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f32 = function(value) {\r\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\r\n};\r\n\r\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\r\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\r\n\r\nglobal.i64_is_f64 = function(value) {\r\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\r\n};\r\n\r\nglobal.i64_to_f32 = function(value) {\r\n  return global.Math.fround(value.toNumber());\r\n};\r\n\r\nglobal.i64_to_f64 = function(value) {\r\n  return value.toNumber();\r\n};\r\n\r\nglobal.i64_to_string = function(value, unsigned) {\r\n  return (unsigned ? value.toUnsigned() : value).toString(10);\r\n};\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/**\r\n * Built-in elements providing WebAssembly core functionality.\r\n * @module builtins\r\n *//***/\r\n\r\n import {\r\n  Compiler,\r\n  ConversionKind,\r\n  WrapMode,\r\n  Feature\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  DiagnosticCode\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Node,\r\n  NodeKind,\r\n  Expression,\r\n  LiteralKind,\r\n  LiteralExpression,\r\n  StringLiteralExpression,\r\n  CallExpression\r\n} from \"./ast\";\r\n\r\nimport {\r\n  Type,\r\n  TypeKind,\r\n  TypeFlags,\r\n  Signature\r\n} from \"./types\";\r\n\r\nimport {\r\n  BinaryOp,\r\n  UnaryOp,\r\n  HostOp,\r\n  AtomicRMWOp,\r\n  SIMDExtractOp,\r\n  SIMDReplaceOp,\r\n  SIMDShiftOp,\r\n  NativeType,\r\n  ExpressionRef,\r\n  ExpressionId,\r\n  getExpressionId,\r\n  getExpressionType,\r\n  getConstValueI64High,\r\n  getConstValueI64Low,\r\n  getConstValueI32,\r\n  getConstValueF32,\r\n  getConstValueF64\r\n} from \"./module\";\r\n\r\nimport {\r\n  ElementKind,\r\n  OperatorKind,\r\n  FunctionPrototype,\r\n  Class,\r\n  Field,\r\n  Global,\r\n  DecoratorFlags,\r\n  ClassPrototype\r\n} from \"./program\";\r\n\r\nimport {\r\n  FlowFlags\r\n} from \"./flow\";\r\n\r\nimport {\r\n  ReportMode\r\n} from \"./resolver\";\r\n\r\nimport {\r\n  CommonFlags\r\n} from \"./common\";\r\n\r\nimport {\r\n  writeI8,\r\n  writeI16,\r\n  writeI32,\r\n  writeF32,\r\n  writeF64,\r\n  isPowerOf2\r\n} from \"./util\";\r\n\r\n/** Symbols of various compiler built-ins. */\r\nexport namespace BuiltinSymbols {\r\n  // std/builtins.ts\r\n  export const isInteger = \"~lib/builtins/isInteger\";\r\n  export const isFloat = \"~lib/builtins/isFloat\";\r\n  export const isSigned = \"~lib/builtins/isSigned\";\r\n  export const isReference = \"~lib/builtins/isReference\";\r\n  export const isString = \"~lib/builtins/isString\";\r\n  export const isArray = \"~lib/builtins/isArray\";\r\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\r\n  export const isFunction = \"~lib/builtins/isFunction\";\r\n  export const isNullable = \"~lib/builtins/isNullable\";\r\n  export const isDefined = \"~lib/builtins/isDefined\";\r\n  export const isConstant = \"~lib/builtins/isConstant\";\r\n  export const isManaged = \"~lib/builtins/isManaged\";\r\n\r\n  export const clz = \"~lib/builtins/clz\";\r\n  export const ctz = \"~lib/builtins/ctz\";\r\n  export const popcnt = \"~lib/builtins/popcnt\";\r\n  export const rotl = \"~lib/builtins/rotl\";\r\n  export const rotr = \"~lib/builtins/rotr\";\r\n  export const abs = \"~lib/builtins/abs\";\r\n  export const max = \"~lib/builtins/max\";\r\n  export const min = \"~lib/builtins/min\";\r\n  export const ceil = \"~lib/builtins/ceil\";\r\n  export const floor = \"~lib/builtins/floor\";\r\n  export const copysign = \"~lib/builtins/copysign\";\r\n  export const nearest = \"~lib/builtins/nearest\";\r\n  export const reinterpret = \"~lib/builtins/reinterpret\";\r\n  export const sqrt = \"~lib/builtins/sqrt\";\r\n  export const trunc = \"~lib/builtins/trunc\";\r\n  export const load = \"~lib/builtins/load\";\r\n  export const store = \"~lib/builtins/store\";\r\n  export const atomic_load = \"~lib/builtins/atomic.load\";\r\n  export const atomic_store = \"~lib/builtins/atomic.store\";\r\n  export const atomic_add = \"~lib/builtins/atomic.add\";\r\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\r\n  export const atomic_and = \"~lib/builtins/atomic.and\";\r\n  export const atomic_or = \"~lib/builtins/atomic.or\";\r\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\r\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\r\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\r\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\r\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\r\n\r\n  export const sizeof = \"~lib/builtins/sizeof\";\r\n  export const alignof = \"~lib/builtins/alignof\";\r\n  export const offsetof = \"~lib/builtins/offsetof\";\r\n  export const select = \"~lib/builtins/select\";\r\n  export const unreachable = \"~lib/builtins/unreachable\";\r\n  export const changetype = \"~lib/builtins/changetype\";\r\n  export const assert = \"~lib/builtins/assert\";\r\n  export const unchecked = \"~lib/builtins/unchecked\";\r\n  export const call_indirect = \"~lib/builtins/call_indirect\";\r\n  export const instantiate = \"~lib/builtins/instantiate\";\r\n\r\n  export const i8 = \"~lib/builtins/i8\";\r\n  export const i16 = \"~lib/builtins/i16\";\r\n  export const i32 = \"~lib/builtins/i32\";\r\n  export const i64 = \"~lib/builtins/i64\";\r\n  export const isize = \"~lib/builtins/isize\";\r\n  export const u8 = \"~lib/builtins/u8\";\r\n  export const u16 = \"~lib/builtins/u16\";\r\n  export const u32 = \"~lib/builtins/u32\";\r\n  export const u64 = \"~lib/builtins/u64\";\r\n  export const usize = \"~lib/builtins/usize\";\r\n  export const bool = \"~lib/builtins/bool\";\r\n  export const f32 = \"~lib/builtins/f32\";\r\n  export const f64 = \"~lib/builtins/f64\";\r\n  export const v128 = \"~lib/builtins/v128\";\r\n  export const void_ = \"~lib/builtins/void\";\r\n\r\n  export const i32_clz = \"~lib/builtins/i32.clz\";\r\n  export const i64_clz = \"~lib/builtins/i64.clz\";\r\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\r\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\r\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\r\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\r\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\r\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\r\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\r\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\r\n\r\n  export const f32_abs = \"~lib/builtins/f32.abs\";\r\n  export const f64_abs = \"~lib/builtins/f64.abs\";\r\n  export const f32_max = \"~lib/builtins/f32.max\";\r\n  export const f64_max = \"~lib/builtins/f64.max\";\r\n  export const f32_min = \"~lib/builtins/f32.min\";\r\n  export const f64_min = \"~lib/builtins/f64.min\";\r\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\r\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\r\n  export const f32_floor = \"~lib/builtins/f32.floor\";\r\n  export const f64_floor = \"~lib/builtins/f64.floor\";\r\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\r\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\r\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\r\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\r\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\r\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\r\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\r\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\r\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\r\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\r\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\r\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\r\n\r\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\r\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\r\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\r\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\r\n  export const i32_load = \"~lib/builtins/i32.load\";\r\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\r\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\r\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\r\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\r\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\r\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\r\n  export const i64_load = \"~lib/builtins/i64.load\";\r\n  export const f32_load = \"~lib/builtins/f32.load\";\r\n  export const f64_load = \"~lib/builtins/f64.load\";\r\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\r\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\r\n  export const i32_store = \"~lib/builtins/i32.store\";\r\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\r\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\r\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\r\n  export const i64_store = \"~lib/builtins/i64.store\";\r\n  export const f32_store = \"~lib/builtins/f32.store\";\r\n  export const f64_store = \"~lib/builtins/f64.store\";\r\n\r\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\r\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\r\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\r\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\r\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\r\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\r\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\r\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\r\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\r\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\r\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\r\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\r\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\r\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\r\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\r\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\r\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\r\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\r\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\r\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\r\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\r\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\r\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\r\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\r\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\r\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\r\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\r\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\r\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\r\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\r\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\r\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\r\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\r\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\r\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\r\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\r\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\r\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\r\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\r\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\r\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\r\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\r\n  export const i32_atomic_rmw8_u_xor = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\r\n  export const i32_atomic_rmw16_u_xor = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\r\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\r\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\r\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\r\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\r\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\r\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\r\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\r\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\r\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\r\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\r\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\r\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\r\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\r\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\r\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\r\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\r\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\r\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\r\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\r\n  export const i32_wait = \"~lib/builtins/i32.wait\";\r\n  export const i64_wait = \"~lib/builtins/i64.wait\";\r\n  export const i32_notify = \"~lib/builtins/i32.notify\";\r\n  export const i64_notify = \"~lib/builtins/i64.notify\";\r\n\r\n  export const v128_splat = \"~lib/builtins/v128.splat\";\r\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\r\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\r\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\r\n  export const v128_load = \"~lib/builtins/v128.load\";\r\n  export const v128_store = \"~lib/builtins/v128.store\";\r\n  export const v128_add = \"~lib/builtins/v128.add\";\r\n  export const v128_sub = \"~lib/builtins/v128.sub\";\r\n  export const v128_mul = \"~lib/builtins/v128.mul\";\r\n  export const v128_div = \"~lib/builtins/v128.div\";\r\n  export const v128_neg = \"~lib/builtins/v128.neg\";\r\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\r\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\r\n  export const v128_shl = \"~lib/builtins/v128.shl\";\r\n  export const v128_shr = \"~lib/builtins/v128.shr\";\r\n  export const v128_and = \"~lib/builtins/v128.and\";\r\n  export const v128_or = \"~lib/builtins/v128.or\";\r\n  export const v128_xor = \"~lib/builtins/v128.xor\";\r\n  export const v128_not = \"~lib/builtins/v128.not\";\r\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\r\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\r\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\r\n  export const v128_min = \"~lib/builtins/v128.min\";\r\n  export const v128_max = \"~lib/builtins/v128.max\";\r\n  export const v128_abs = \"~lib/builtins/v128.abs\";\r\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\r\n  export const v128_eq = \"~lib/builtins/v128.eq\";\r\n  export const v128_ne = \"~lib/builtins/v128.ne\";\r\n  export const v128_lt = \"~lib/builtins/v128.lt\";\r\n  export const v128_le = \"~lib/builtins/v128.le\";\r\n  export const v128_gt = \"~lib/builtins/v128.gt\";\r\n  export const v128_ge = \"~lib/builtins/v128.ge\";\r\n  export const v128_convert = \"~lib/builtins/v128.convert\";\r\n  export const v128_trunc = \"~lib/builtins/v128.trunc\";\r\n\r\n  export const i8x16 = \"~lib/builtins/i8x16\";\r\n  export const i16x8 = \"~lib/builtins/i16x8\";\r\n  export const i32x4 = \"~lib/builtins/i32x4\";\r\n  export const i64x2 = \"~lib/builtins/i64x2\";\r\n  export const f32x4 = \"~lib/builtins/f32x4\";\r\n  export const f64x2 = \"~lib/builtins/f64x2\";\r\n\r\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\r\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\r\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\r\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\r\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\r\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\r\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\r\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\r\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\r\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\r\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\r\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\r\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\r\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\r\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\r\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\r\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\r\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\r\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\r\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\r\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\r\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\r\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\r\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\r\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\r\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\r\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\r\n\r\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\r\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\r\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\r\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\r\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\r\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\r\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\r\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\r\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\r\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\r\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\r\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\r\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\r\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\r\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\r\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\r\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\r\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\r\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\r\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\r\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\r\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\r\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\r\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\r\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\r\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\r\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\r\n\r\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\r\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\r\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\r\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\r\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\r\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\r\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\r\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\r\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\r\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\r\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\r\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\r\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\r\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\r\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\r\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\r\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\r\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\r\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\r\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\r\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\r\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\r\n  export const i32x4_trunc_s_f32x4_sat = \"~lib/builtins/i32x4.trunc_s_f32x4_sat\";\r\n  export const i32x4_trunc_u_f32x4_sat = \"~lib/builtins/i32x4.trunc_u_f32x4_sat\";\r\n\r\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\r\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\r\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\r\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\r\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\r\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\r\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\r\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\r\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\r\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\r\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\r\n  export const i64x2_trunc_s_f64x2_sat = \"~lib/builtins/i64x2.trunc_s_f64x2_sat\";\r\n  export const i64x2_trunc_u_f64x2_sat = \"~lib/builtins/i64x2.trunc_u_f64x2_sat\";\r\n\r\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\r\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\r\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\r\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\r\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\r\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\r\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\r\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\r\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\r\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\r\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\r\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\r\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\r\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\r\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\r\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\r\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\r\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\r\n  export const f32x4_convert_s_i32x4 = \"~lib/builtins/f32x4.convert_s_i32x4\";\r\n  export const f32x4_convert_u_i32x4 = \"~lib/builtins/f32x4.convert_u_i32x4\";\r\n\r\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\r\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\r\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\r\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\r\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\r\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\r\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\r\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\r\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\r\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\r\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\r\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\r\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\r\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\r\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\r\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\r\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\r\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\r\n  export const f64x2_convert_s_i64x2 = \"~lib/builtins/f64x2.convert_s_i64x2\";\r\n  export const f64x2_convert_u_i64x2 = \"~lib/builtins/f64x2.convert_u_i64x2\";\r\n\r\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\r\n\r\n  // std/diagnostics.ts\r\n  export const ERROR = \"~lib/diagnostics/ERROR\";\r\n  export const WARNING = \"~lib/diagnostics/WARNING\";\r\n  export const INFO = \"~lib/diagnostics/INFO\";\r\n  // std/memory.ts\r\n  export const HEAP_BASE = \"~lib/memory/HEAP_BASE\";\r\n  export const memory_size = \"~lib/memory/memory.size\";\r\n  export const memory_grow = \"~lib/memory/memory.grow\";\r\n  export const memory_copy = \"~lib/memory/memory.copy\";\r\n  export const memory_fill = \"~lib/memory/memory.fill\";\r\n  // std/gc.ts\r\n  export const iterateRoots = \"~lib/gc/iterateRoots\";\r\n}\r\n\r\n/** Compiles a call to a built-in function. */\r\nexport function compileCall(\r\n  /* Compiler reference. */\r\n  compiler: Compiler,\r\n  /** Respective function prototype. */\r\n  prototype: FunctionPrototype,\r\n  /** Pre-resolved type arguments. */\r\n  typeArguments: Type[] | null,\r\n  /** Operand expressions. */\r\n  operands: Expression[],\r\n  /** Contextual type. */\r\n  contextualType: Type,\r\n  /** Respective call expression. */\r\n  reportNode: CallExpression,\r\n  /** Indicates that contextual type is ASM type. */\r\n  isAsm: bool = false\r\n): ExpressionRef {\r\n  var module = compiler.module;\r\n\r\n  // NOTE that some implementations below make use of the select expression where straight-forward.\r\n  // whether worth or not should probably be tested once it's known if/how embedders handle it.\r\n  // search: createSelect\r\n\r\n  // NOTE that consolidation of individual instructions into a single case isn't exactly scientific\r\n  // below, but rather done to make this file easier to work with. If there was a general rule it'd\r\n  // most likely be \"three or more instructions that only differ in their actual opcode\".\r\n\r\n  switch (prototype.internalName) {\r\n\r\n    // === Static type evaluation =================================================================\r\n\r\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.FLOAT)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.SIGNED)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return type.is(TypeFlags.REFERENCE)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      if (classType) {\r\n        let stringInstance = compiler.program.stringInstance;\r\n        if (stringInstance && classType.isAssignableTo(stringInstance)) return module.createI32(1);\r\n      }\r\n      return module.createI32(0);\r\n    }\r\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classReference = type.classReference;\r\n      if (!classReference) return module.createI32(0);\r\n      let classPrototype = classReference.prototype;\r\n      return module.createI32(\r\n        (<ClassPrototype>classPrototype).extends(compiler.program.arrayPrototype)\r\n          ? 1\r\n          : 0\r\n      );\r\n    }\r\n    case BuiltinSymbols.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classReference = type.classReference;\r\n      if (!classReference) return module.createI32(0);\r\n      return module.createI32(\r\n        classReference.lookupInSelf(\"length\") && (\r\n          classReference.lookupOverload(OperatorKind.INDEXED_GET) ||\r\n          classReference.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET)\r\n        ) ? 1 : 0\r\n      );\r\n    }\r\n    case BuiltinSymbols.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return module.createI32(type.signatureReference ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      return module.createI32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let element = compiler.resolver.resolveExpression(\r\n        operands[0],\r\n        compiler.currentFlow,\r\n        Type.void,\r\n        ReportMode.SWALLOW\r\n      );\r\n      return module.createI32(element ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\r\n      compiler.currentType = Type.bool;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      compiler.currentType = Type.bool;\r\n      return module.createI32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\r\n    }\r\n    case BuiltinSymbols.isManaged: { // isManaged<T>() -> bool\r\n      if (!compiler.program.hasGC) {\r\n        compiler.currentType = Type.bool;\r\n        return module.createI32(0);\r\n      }\r\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\r\n      compiler.currentType = Type.bool;\r\n      if (!type) return module.createUnreachable();\r\n      let classType = type.classReference;\r\n      return classType !== null && !classType.hasDecorator(DecoratorFlags.UNMANAGED)\r\n        ? module.createI32(1)\r\n        : module.createI32(0);\r\n    }\r\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 0, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      let expr: ExpressionRef;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          expr = module.createI32(byteSize);\r\n        } else {\r\n          expr = module.createI64(byteSize, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          expr = module.createI64(byteSize, 0);\r\n        } else {\r\n          expr = module.createI32(byteSize);\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 0, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let byteSize = (<Type[]>typeArguments)[0].byteSize;\r\n      assert(isPowerOf2(byteSize));\r\n      let alignLog2 = ctz<i32>(byteSize);\r\n      let expr: ExpressionRef;\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          expr = module.createI32(alignLog2);\r\n        } else {\r\n          expr = module.createI64(alignLog2, 0);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          expr = module.createI64(alignLog2, 0);\r\n        } else {\r\n          expr = module.createI32(alignLog2);\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\r\n      compiler.currentType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let classType = typeArguments![0].classReference;\r\n      if (!classType) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let offset: i32;\r\n      if (operands.length) {\r\n        if (\r\n          operands[0].kind != NodeKind.LITERAL ||\r\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\r\n        ) {\r\n          compiler.error(\r\n            DiagnosticCode.String_literal_expected,\r\n            operands[0].range\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\r\n        let field = classType.members ? classType.members.get(fieldName) : null;\r\n        if (!(field && field.kind == ElementKind.FIELD)) {\r\n          compiler.error(\r\n            DiagnosticCode.Type_0_has_no_property_1,\r\n            operands[0].range, classType.internalName, fieldName\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n        offset = (<Field>field).memoryOffset;\r\n      } else {\r\n        offset = classType.currentMemoryOffset;\r\n      }\r\n      if (compiler.options.isWasm64) {\r\n        // implicitly wrap if contextual type is a 32-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\r\n          compiler.currentType = Type.u32;\r\n          return module.createI32(offset);\r\n        } else {\r\n          return module.createI64(offset);\r\n        }\r\n      } else {\r\n        // implicitly extend if contextual type is a 64-bit integer\r\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\r\n          compiler.currentType = Type.u64;\r\n          return module.createI64(offset);\r\n        } else {\r\n          return module.createI32(offset);\r\n        }\r\n      }\r\n    }\r\n\r\n    // === Math ===================================================================================\r\n\r\n    case BuiltinSymbols.clz: // any_bitcount<T?>(value: T) -> T\r\n    case BuiltinSymbols.ctz:\r\n    case BuiltinSymbols.popcnt: {\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\r\n        : compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let op: UnaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.clz: {\r\n          switch (type.kind) {\r\n            case TypeKind.BOOL:\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U16:\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.ClzI32; break; }\r\n            case TypeKind.USIZE:\r\n            case TypeKind.ISIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.ClzI64\r\n                : UnaryOp.ClzI32;\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.ClzI64; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.ctz: {\r\n          switch (type.kind) {\r\n            case TypeKind.BOOL:\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U16:\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.CtzI32; break; }\r\n            case TypeKind.USIZE:\r\n            case TypeKind.ISIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.CtzI64\r\n                : UnaryOp.CtzI32;\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.CtzI64; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.popcnt: {\r\n          switch (compiler.currentType.kind) {\r\n            case TypeKind.BOOL:\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:\r\n            case TypeKind.I16:\r\n            case TypeKind.U16:\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.PopcntI32; break; }\r\n            case TypeKind.USIZE:\r\n            case TypeKind.ISIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.PopcntI64\r\n                : UnaryOp.PopcntI32;\r\n              break;\r\n            }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.PopcntI64; break; }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      return module.createUnary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\r\n        : compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          expr = compiler.ensureSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotlI32, arg0, arg1),\r\n            type\r\n          );\r\n          // fall-through\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          expr = module.createBinary(BinaryOp.RotlI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE:\r\n        case TypeKind.ISIZE: {\r\n          expr = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotlI64\r\n              : BinaryOp.RotlI32,\r\n            arg0, arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          expr = module.createBinary(BinaryOp.RotlI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr; // possibly overflows\r\n    }\r\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\r\n        : compiler.compileExpression(operands[0], Type.i32, ConversionKind.NONE, WrapMode.WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.BOOL: {\r\n          expr = compiler.ensureSmallIntegerWrap(\r\n            module.createBinary(BinaryOp.RotrI32, arg0, arg1),\r\n            type\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          expr = module.createBinary(BinaryOp.RotrI32, arg0, arg1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE:\r\n        case TypeKind.ISIZE: {\r\n          expr = module.createBinary(\r\n            compiler.options.isWasm64\r\n              ? BinaryOp.RotrI64\r\n              : BinaryOp.RotrI32,\r\n            arg0, arg1\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          expr = module.createBinary(BinaryOp.RotrI64, arg0, arg1);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr; // possibly overflowws\r\n    }\r\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\r\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: {\r\n          let flow = compiler.currentFlow;\r\n\r\n          // possibly overflows, e.g. abs<i8>(-128) == 128\r\n          let tempLocal1 = flow.getTempLocal(Type.i32, false);\r\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i32, false).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          // (x + (x >> 31)) ^ (x >> 31)\r\n          expr = module.createBinary(BinaryOp.XorI32,\r\n            module.createBinary(BinaryOp.AddI32,\r\n              module.createTeeLocal(\r\n                tempLocalIndex2,\r\n                module.createBinary(BinaryOp.ShrI32,\r\n                  module.createTeeLocal(tempLocalIndex1, arg0),\r\n                  module.createI32(31)\r\n                )\r\n              ),\r\n              module.createGetLocal(tempLocalIndex1, NativeType.I32)\r\n            ),\r\n            module.createGetLocal(tempLocalIndex2, NativeType.I32)\r\n          );\r\n\r\n          flow.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE: {\r\n          let options = compiler.options;\r\n          let flow = compiler.currentFlow;\r\n          let wasm64 = options.isWasm64;\r\n\r\n          let tempLocal1 = flow.getTempLocal(options.usizeType, false);\r\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(options.usizeType, false).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          expr = module.createBinary(wasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\r\n            module.createBinary(wasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\r\n              module.createTeeLocal(\r\n                tempLocalIndex2,\r\n                module.createBinary(wasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\r\n                  module.createTeeLocal(tempLocalIndex1, arg0),\r\n                  wasm64 ? module.createI64(63) : module.createI32(31)\r\n                )\r\n              ),\r\n              module.createGetLocal(tempLocalIndex1, options.nativeSizeType)\r\n            ),\r\n            module.createGetLocal(tempLocalIndex2, options.nativeSizeType)\r\n          );\r\n\r\n          flow.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.I64: {\r\n          let flow = compiler.currentFlow;\r\n\r\n          let tempLocal1 = flow.getTempLocal(Type.i64, false);\r\n          let tempLocalIndex2 = flow.getAndFreeTempLocal(Type.i64, false).index;\r\n          let tempLocalIndex1 = tempLocal1.index;\r\n\r\n          // (x + (x >> 63)) ^ (x >> 63)\r\n          expr = module.createBinary(BinaryOp.XorI64,\r\n            module.createBinary(BinaryOp.AddI64,\r\n              module.createTeeLocal(\r\n                tempLocalIndex2,\r\n                module.createBinary(BinaryOp.ShrI64,\r\n                  module.createTeeLocal(tempLocalIndex1, arg0),\r\n                  module.createI64(63)\r\n                )\r\n              ),\r\n              module.createGetLocal(tempLocalIndex1, NativeType.I64)\r\n            ),\r\n            module.createGetLocal(tempLocalIndex2, NativeType.I64)\r\n          );\r\n\r\n          flow.freeTempLocal(tempLocal1);\r\n          break;\r\n        }\r\n        case TypeKind.USIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.BOOL: {\r\n          expr = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          expr = module.createUnary(UnaryOp.AbsF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          expr = module.createUnary(UnaryOp.AbsF64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\r\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: { op = BinaryOp.GtI32; break; }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\r\n        case TypeKind.I64: { op = BinaryOp.GtI64; break; }\r\n        case TypeKind.U64: { op = BinaryOp.GtU64; break; }\r\n        case TypeKind.ISIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.GtI64\r\n            : BinaryOp.GtI32;\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.GtU64\r\n            : BinaryOp.GtU32;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          return module.createBinary(BinaryOp.MaxF32, arg0, arg1);\r\n        }\r\n        case TypeKind.F64: {\r\n          return module.createBinary(BinaryOp.MaxF64, arg0, arg1);\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      let flow = compiler.currentFlow;\r\n      let nativeType = type.toNativeType();\r\n      let tempLocal0 = flow.getTempLocal(type, true);\r\n      let tempLocal1 = flow.getAndFreeTempLocal(type, true);\r\n      flow.freeTempLocal(tempLocal0);\r\n      return module.createSelect(\r\n        module.createTeeLocal(tempLocal0.index, arg0),\r\n        module.createTeeLocal(tempLocal1.index, arg1),\r\n        module.createBinary(op,\r\n          module.createGetLocal(tempLocal0.index, nativeType),\r\n          module.createGetLocal(tempLocal1.index, nativeType)\r\n        )\r\n      );\r\n    }\r\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\r\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.WRAP);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.WRAP);\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32: { op = BinaryOp.LtI32; break; }\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\r\n        case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\r\n        case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\r\n        case TypeKind.ISIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.LtI64\r\n            : BinaryOp.LtI32;\r\n          break;\r\n        }\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? BinaryOp.LtU64\r\n            : BinaryOp.LtU32;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          return module.createBinary(BinaryOp.MinF32, arg0, arg1);\r\n        }\r\n        case TypeKind.F64: {\r\n          return module.createBinary(BinaryOp.MinF64, arg0, arg1);\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      let flow = compiler.currentFlow;\r\n      let nativeType = type.toNativeType();\r\n      let tempLocal0 = flow.getTempLocal(type, true);\r\n      let tempLocal1 = flow.getAndFreeTempLocal(type, true);\r\n      flow.freeTempLocal(tempLocal0);\r\n      return module.createSelect(\r\n        module.createTeeLocal(tempLocal0.index, arg0),\r\n        module.createTeeLocal(tempLocal1.index, arg1),\r\n        module.createBinary(op,\r\n          module.createGetLocal(tempLocal0.index, nativeType),\r\n          module.createGetLocal(tempLocal1.index, nativeType)\r\n        )\r\n      );\r\n    }\r\n    case BuiltinSymbols.ceil: // any_rounding<T?>(value: T) -> T\r\n    case BuiltinSymbols.floor: {\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\r\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let op: UnaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.BOOL: return arg0; // considered rounded\r\n        case TypeKind.F32: {\r\n          op = prototype.internalName == BuiltinSymbols.ceil\r\n            ? UnaryOp.CeilF32\r\n            : UnaryOp.FloorF32;\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          op = prototype.internalName == BuiltinSymbols.ceil\r\n            ? UnaryOp.CeilF64\r\n            : UnaryOp.FloorF64;\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      return module.createUnary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\r\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      let op: BinaryOp;\r\n      switch (type.kind) {\r\n        // TODO: does an integer version make sense?\r\n        case TypeKind.F32: { op = BinaryOp.CopysignF32; break; }\r\n        case TypeKind.F64: { op = BinaryOp.CopysignF64; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      return module.createBinary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\r\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.BOOL: {\r\n          expr = arg0;\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          expr = module.createUnary(UnaryOp.NearestF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          expr = module.createUnary(UnaryOp.NearestF64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.currentType = type;\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: {\r\n          let arg0 = compiler.compileExpression(operands[0], Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          expr = module.createUnary(UnaryOp.ReinterpretF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: {\r\n          let arg0 = compiler.compileExpression(operands[0], Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          expr = module.createUnary(UnaryOp.ReinterpretF64, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          let arg0 = compiler.compileExpression(\r\n            operands[0],\r\n            compiler.options.isWasm64\r\n              ? Type.f64\r\n              : Type.f32,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n          expr = module.createUnary(\r\n            compiler.options.isWasm64\r\n              ? UnaryOp.ReinterpretF64\r\n              : UnaryOp.ReinterpretF32,\r\n            arg0\r\n          );\r\n          break;\r\n        }\r\n        case TypeKind.F32: {\r\n          let arg0 = compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          expr = module.createUnary(UnaryOp.ReinterpretI32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          let arg0 = compiler.compileExpression(operands[0], Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n          expr = module.createUnary(UnaryOp.ReinterpretI64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      compiler.currentType = type;\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\r\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.currentType = type;\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) { // TODO: integer versions (that return f64 or convert)?\r\n        case TypeKind.F32: {\r\n          expr = module.createUnary(UnaryOp.SqrtF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          expr = module.createUnary(UnaryOp.SqrtF64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\r\n        : compiler.compileExpression(operands[0], Type.f64, ConversionKind.NONE, WrapMode.NONE);\r\n      let type = compiler.currentType;\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let expr: ExpressionRef;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.BOOL: {\r\n          expr = arg0;\r\n          break;\r\n        }\r\n        // TODO: truncate to contextual type directly (if not void etc.)?\r\n        case TypeKind.F32: {\r\n          expr = module.createUnary(UnaryOp.TruncF32, arg0);\r\n          break;\r\n        }\r\n        case TypeKind.F64: {\r\n          expr = module.createUnary(UnaryOp.TruncF64, arg0);\r\n          break;\r\n        }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          expr = module.createUnreachable();\r\n          break;\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n\r\n    // === Memory access ==========================================================================\r\n\r\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let type = typeArguments![0];\r\n      let outType = (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > type.size\r\n      ) ? contextualType : type;\r\n      let arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let numOperands = operands.length;\r\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = outType;\r\n        return module.createUnreachable();\r\n      }\r\n      let immAlign: i32;\r\n      let naturalAlign = type.byteSize;\r\n      if (numOperands == 3) {\r\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\r\n        if (immAlign < 0) {\r\n          compiler.currentType = outType;\r\n          return module.createUnreachable();\r\n        }\r\n        if (immAlign > naturalAlign) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\r\n          );\r\n          compiler.currentType = outType;\r\n          return module.createUnreachable();\r\n        }\r\n        if (!isPowerOf2(immAlign)) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_power_of_two,\r\n            operands[2].range, \"Alignment\"\r\n          );\r\n          compiler.currentType = outType;\r\n          return module.createUnreachable();\r\n        }\r\n      } else {\r\n        immAlign = naturalAlign;\r\n      }\r\n      compiler.currentType = outType;\r\n      return module.createLoad(\r\n        type.byteSize,\r\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\r\n        arg0,\r\n        outType.toNativeType(),\r\n        immOffset,\r\n        immAlign\r\n      );\r\n    }\r\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let type = typeArguments![0];\r\n      let arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(\r\n            operands[1],\r\n            contextualType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\r\n              : ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n      let inType = compiler.currentType;\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size          // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          inType, type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[1]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      let immAlign: i32;\r\n      let naturalAlign = type.byteSize;\r\n      if (operands.length == 4) {\r\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\r\n        if (immAlign < 0) {\r\n          compiler.currentType = Type.void;\r\n          return module.createUnreachable();\r\n        }\r\n        if (immAlign > naturalAlign) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\r\n          );\r\n          compiler.currentType = Type.void;\r\n          return module.createUnreachable();\r\n        }\r\n        if (!isPowerOf2(immAlign)) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_power_of_two,\r\n            operands[3].range, \"Alignment\"\r\n          );\r\n          compiler.currentType = Type.void;\r\n          return module.createUnreachable();\r\n        }\r\n      } else {\r\n        immAlign = naturalAlign;\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.createStore(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\r\n    }\r\n\r\n    // === Atomics ================================================================================\r\n\r\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let type = typeArguments![0];\r\n      let outType = (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        contextualType.is(TypeFlags.INTEGER) &&\r\n        contextualType.size > type.size\r\n      ) ? contextualType : type;\r\n      if (!type.is(TypeFlags.INTEGER)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = outType;\r\n        return module.createUnreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = outType;\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = outType;\r\n      return module.createAtomicLoad(\r\n        type.byteSize,\r\n        arg0,\r\n        outType.toNativeType(),\r\n        immOffset\r\n      );\r\n    }\r\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(\r\n            operands[1],\r\n            contextualType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\r\n              : ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n      let inType = compiler.currentType;\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size          // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          inType, type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[1]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = Type.void;\r\n      return module.createAtomicStore(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\r\n    }\r\n    case BuiltinSymbols.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\r\n    case BuiltinSymbols.atomic_sub:\r\n    case BuiltinSymbols.atomic_and:\r\n    case BuiltinSymbols.atomic_or:\r\n    case BuiltinSymbols.atomic_xor:\r\n    case BuiltinSymbols.atomic_xchg: {\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(\r\n            operands[1],\r\n            contextualType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\r\n              : ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n      let inType = compiler.currentType;\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size       // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          inType, type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[1]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = inType;\r\n        return module.createUnreachable();\r\n      }\r\n      let op: AtomicRMWOp;\r\n      switch (prototype.internalName) {\r\n        default: assert(false);\r\n        case BuiltinSymbols.atomic_add:  { op = AtomicRMWOp.Add;  break; }\r\n        case BuiltinSymbols.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\r\n        case BuiltinSymbols.atomic_and:  { op = AtomicRMWOp.And;  break; }\r\n        case BuiltinSymbols.atomic_or:   { op = AtomicRMWOp.Or;   break; }\r\n        case BuiltinSymbols.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\r\n        case BuiltinSymbols.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\r\n      }\r\n      compiler.currentType = inType;\r\n      return module.createAtomicRMW(\r\n        op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType()\r\n      );\r\n    }\r\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize): T\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let arg1 = isAsm\r\n        ? compiler.compileExpression(\r\n            operands[1],\r\n            contextualType,\r\n            ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          )\r\n        : compiler.compileExpression(\r\n            operands[1],\r\n            type,\r\n            type.is(TypeFlags.INTEGER)\r\n              ? ConversionKind.NONE // no need to convert to small int (but now might result in a float)\r\n              : ConversionKind.IMPLICIT,\r\n            WrapMode.NONE\r\n          );\r\n      let inType = compiler.currentType;\r\n      let arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        inType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      if (\r\n        type.is(TypeFlags.INTEGER) &&\r\n        (\r\n          !inType.is(TypeFlags.INTEGER) || // float to int\r\n          inType.size < type.size       // int to larger int (clear garbage bits)\r\n        )\r\n      ) {\r\n        arg1 = compiler.convertExpression(\r\n          arg1,\r\n          inType, type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[1]\r\n        );\r\n        arg2 = compiler.convertExpression(\r\n          arg2,\r\n          inType, type,\r\n          ConversionKind.IMPLICIT,\r\n          WrapMode.NONE, // still clears garbage bits\r\n          operands[2]\r\n        );\r\n        inType = type;\r\n      }\r\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\r\n      if (immOffset < 0) {\r\n        compiler.currentType = inType;\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = inType;\r\n      return module.createAtomicCmpxchg(\r\n        type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType()\r\n      );\r\n    }\r\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64): i32;\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 32) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        type,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        Type.i64,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = Type.i32;\r\n      return module.createAtomicWait(arg0, arg1, arg2, type.toNativeType());\r\n    }\r\n    case BuiltinSymbols.atomic_notify: { // notify<T!>(ptr: usize, count: i32): i32;\r\n      if (!compiler.options.hasFeature(Feature.THREADS)) break;\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let type = typeArguments![0];\r\n      if (!type.is(TypeFlags.INTEGER) || type.size < 32) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        compiler.options.usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        type,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = Type.i32;\r\n      return module.createAtomicWake(arg0, arg1);\r\n    }\r\n\r\n    // === Control flow ===========================================================================\r\n\r\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE)\r\n        : compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      let type = compiler.currentType;\r\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let arg1 = compiler.compileExpression(operands[1], type, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      let arg2 = compiler.makeIsTrueish(\r\n        compiler.compileExpressionRetainType(operands[2], Type.bool, WrapMode.NONE),\r\n        compiler.currentType // ^\r\n      );\r\n      compiler.currentType = type;\r\n      return module.createSelect(arg0, arg1, arg2);\r\n    }\r\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.typeArgumentsRange, prototype.internalName\r\n        );\r\n      }\r\n      checkArgsRequired(operands, 0, reportNode, compiler);\r\n      return module.createUnreachable();\r\n    }\r\n\r\n    // === Memory =================================================================================\r\n\r\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 0, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      return module.createHost(HostOp.CurrentMemory);\r\n    }\r\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\r\n      compiler.currentType = Type.i32;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      return module.createHost(HostOp.GrowMemory, null, [\r\n        compiler.compileExpression(operands[0], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n      ]);\r\n    }\r\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\r\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\r\n        compiler.currentType = Type.void;\r\n        if (!instance) return module.createUnreachable();\r\n        return compiler.compileCallDirect(instance, operands, reportNode);\r\n      }\r\n      let usizeType = compiler.options.usizeType;\r\n      let arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = Type.void;\r\n      return module.createMemoryCopy(arg0, arg1, arg2);\r\n    }\r\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\r\n      compiler.currentType = Type.void;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\r\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\r\n        compiler.currentType = Type.void;\r\n        if (!instance) return module.createUnreachable();\r\n        return compiler.compileCallDirect(instance, operands, reportNode);\r\n      }\r\n      let usizeType = compiler.options.usizeType;\r\n      let arg0 = compiler.compileExpression(\r\n        operands[0],\r\n        usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let arg1 = compiler.compileExpression(\r\n        operands[1],\r\n        Type.u8,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      let arg2 = compiler.compileExpression(\r\n        operands[2],\r\n        usizeType,\r\n        ConversionKind.IMPLICIT,\r\n        WrapMode.NONE\r\n      );\r\n      compiler.currentType = Type.void;\r\n      return module.createMemoryFill(arg0, arg1, arg2);\r\n    }\r\n\r\n    // === Helpers ================================================================================\r\n\r\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let toType = typeArguments![0];\r\n      let arg0 = compiler.compileExpressionRetainType(\r\n        operands[0],\r\n        toType,\r\n        WrapMode.NONE\r\n      );\r\n      let fromType = compiler.currentType;\r\n      compiler.currentType = toType;\r\n      if (fromType.size != toType.size) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      return arg0;\r\n    }\r\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler) |\r\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\r\n      ) {\r\n        if (typeArguments) {\r\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\r\n          compiler.currentType = typeArguments[0].nonNullableType;\r\n        }\r\n        return module.createUnreachable();\r\n      }\r\n      let arg0 = typeArguments\r\n        ? compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.WRAP)\r\n        : compiler.compileExpressionRetainType(operands[0], Type.bool, WrapMode.WRAP);\r\n      let type = compiler.currentType;\r\n      compiler.currentType = type.nonNullableType;\r\n\r\n      // return ifTrueish if assertions are disabled\r\n      if (compiler.options.noAssert) {\r\n        if (contextualType == Type.void) { // simplify if dropped anyway\r\n          compiler.currentType = Type.void;\r\n          return module.createNop();\r\n        }\r\n        return arg0;\r\n      }\r\n\r\n      // otherwise call abort if the assertion is false-ish\r\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\r\n      compiler.currentType = type.nonNullableType;\r\n      let expr: ExpressionRef;\r\n      if (contextualType == Type.void) { // simplify if dropped anyway\r\n        compiler.currentType = Type.void;\r\n        switch (type.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            expr = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI32, arg0),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            expr = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64, arg0),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            expr = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                arg0\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\r\n          case TypeKind.F32: {\r\n            expr = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                arg0,\r\n                module.createF32(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            expr = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                arg0,\r\n                module.createF64(0)\r\n              ),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.typeArgumentsRange\r\n            );\r\n            expr = abort;\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        compiler.currentType = type.nonNullableType;\r\n        switch (compiler.currentType.kind) {\r\n          case TypeKind.I8:\r\n          case TypeKind.I16:\r\n          case TypeKind.I32:\r\n          case TypeKind.U8:\r\n          case TypeKind.U16:\r\n          case TypeKind.U32:\r\n          case TypeKind.BOOL: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(type, true /* arg0 is wrapped */);\r\n            expr = module.createIf(\r\n              module.createTeeLocal(tempLocal.index, arg0),\r\n              module.createGetLocal(tempLocal.index, NativeType.I32),\r\n              abort\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.I64:\r\n          case TypeKind.U64: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.i64, false);\r\n            expr = module.createIf(\r\n              module.createUnary(UnaryOp.EqzI64,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.I64)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.ISIZE:\r\n          case TypeKind.USIZE: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(compiler.options.usizeType, false);\r\n            expr = module.createIf(\r\n              module.createUnary(\r\n                compiler.options.isWasm64\r\n                  ? UnaryOp.EqzI64\r\n                  : UnaryOp.EqzI32,\r\n                module.createTeeLocal(tempLocal.index, arg0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, compiler.options.nativeSizeType)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F32: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f32, false);\r\n            expr = module.createIf(\r\n              module.createBinary(BinaryOp.EqF32,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF32(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F32)\r\n            );\r\n            break;\r\n          }\r\n          case TypeKind.F64: {\r\n            let tempLocal = compiler.currentFlow.getAndFreeTempLocal(Type.f64, false);\r\n            expr = module.createIf(\r\n              module.createBinary(BinaryOp.EqF64,\r\n                module.createTeeLocal(tempLocal.index, arg0),\r\n                module.createF64(0)\r\n              ),\r\n              abort,\r\n              module.createGetLocal(tempLocal.index, NativeType.F64)\r\n            );\r\n            break;\r\n          }\r\n          default: {\r\n            compiler.error(\r\n              DiagnosticCode.Operation_not_supported,\r\n              reportNode.typeArgumentsRange\r\n            );\r\n            expr = abort;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.unchecked: { // unchecked(expr: *) -> *\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let flow = compiler.currentFlow;\r\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\r\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\r\n      let expr = compiler.compileExpressionRetainType(operands[0], contextualType, WrapMode.NONE);\r\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\r\n      return expr;\r\n    }\r\n    case BuiltinSymbols.call_indirect: { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\r\n      if (\r\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\r\n        checkArgsOptional(operands, 1, i32.MAX_VALUE, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let returnType = typeArguments ? typeArguments[0] : contextualType;\r\n      let arg0 = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\r\n      let arg0Type = compiler.currentType;\r\n      if (!(\r\n        arg0Type == Type.u32 ||                                      // either plain index\r\n        arg0Type.kind == TypeKind.U32 && arg0Type.signatureReference // or function reference\r\n      )) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          operands[0].range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let numOperands = operands.length - 1;\r\n      let operandExprs = new Array<ExpressionRef>(numOperands);\r\n      let nativeReturnType = returnType.toNativeType();\r\n      let parameterTypes = new Array<Type>(numOperands);\r\n      let nativeParamTypes = new Array<NativeType>(numOperands);\r\n      for (let i = 0; i < numOperands; ++i) {\r\n        operandExprs[i] = compiler.compileExpressionRetainType(operands[1 + i], Type.i32, WrapMode.NONE);\r\n        let operandType = compiler.currentType;\r\n        parameterTypes[i] = operandType;\r\n        nativeParamTypes[i] = operandType.toNativeType();\r\n      }\r\n      let typeName = Signature.makeSignatureString(parameterTypes, returnType);\r\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\r\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\r\n      compiler.currentType = returnType;\r\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\r\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\r\n      return module.createCallIndirect(arg0, operandExprs, typeName);\r\n    }\r\n    case BuiltinSymbols.instantiate: { // instantiate<T!>(...args: *[]) -> T\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\r\n      ) return module.createUnreachable();\r\n      let classInstance = typeArguments![0].classReference;\r\n      if (!classInstance) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      compiler.currentType = classInstance.type;\r\n      return compiler.compileInstantiate(classInstance, operands, reportNode);\r\n    }\r\n\r\n    // === User-defined diagnostics ===============================================================\r\n\r\n    case BuiltinSymbols.ERROR: {\r\n      checkTypeAbsent(typeArguments, reportNode, prototype);\r\n      compiler.error(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.createUnreachable();\r\n    }\r\n    case BuiltinSymbols.WARNING: {\r\n      checkTypeAbsent(typeArguments, reportNode, prototype);\r\n      compiler.warning(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.createNop();\r\n    }\r\n    case BuiltinSymbols.INFO: {\r\n      checkTypeAbsent(typeArguments, reportNode, prototype);\r\n      compiler.info(\r\n        DiagnosticCode.User_defined_0,\r\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\r\n      );\r\n      return module.createNop();\r\n    }\r\n\r\n    // === Portable type conversions ==============================================================\r\n\r\n    case BuiltinSymbols.i8: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i8, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n    }\r\n    case BuiltinSymbols.i16: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i16, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n    }\r\n    case BuiltinSymbols.i32: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i32, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n    }\r\n    case BuiltinSymbols.i64: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.i64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.i64, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n    }\r\n    case BuiltinSymbols.isize: {\r\n      let isizeType = compiler.options.isizeType;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = isizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], isizeType, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n    }\r\n    case BuiltinSymbols.u8: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u8;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u8, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n    }\r\n    case BuiltinSymbols.u16: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u16;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u16, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n    }\r\n    case BuiltinSymbols.u32: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u32, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n    }\r\n    case BuiltinSymbols.u64: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.u64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.u64, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n    }\r\n    case BuiltinSymbols.usize: {\r\n      let usizeType = compiler.options.usizeType;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = usizeType;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], usizeType, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n    }\r\n    case BuiltinSymbols.bool: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.bool;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.bool, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n    }\r\n    case BuiltinSymbols.f32: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.f32;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f32, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n    }\r\n    case BuiltinSymbols.f64: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.f64;\r\n        return module.createUnreachable();\r\n      }\r\n      return compiler.compileExpression(operands[0], Type.f64, ConversionKind.EXPLICIT, WrapMode.NONE);\r\n    }\r\n\r\n    // === SIMD ===================================================================================\r\n\r\n    case BuiltinSymbols.v128: // alias for now\r\n    case BuiltinSymbols.i8x16: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 16, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 16; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = module.precomputeExpression(\r\n            compiler.compileExpression(value, Type.i8, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          );\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.createUnreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I32);\r\n          writeI8(getConstValueI32(expr), bytes, i);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.createV128(bytes);\r\n    }\r\n    case BuiltinSymbols.i16x8: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 8, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 8; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = module.precomputeExpression(\r\n            compiler.compileExpression(value, Type.i16, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          );\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.createUnreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I32);\r\n          writeI16(getConstValueI32(expr), bytes, i << 1);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.createV128(bytes);\r\n    }\r\n    case BuiltinSymbols.i32x4: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 4, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 4; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = module.precomputeExpression(\r\n            compiler.compileExpression(value, Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          );\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.createUnreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I32);\r\n          writeI32(getConstValueI32(expr), bytes, i << 2);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.createV128(bytes);\r\n    }\r\n    case BuiltinSymbols.i64x2: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 2; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = module.precomputeExpression(\r\n            compiler.compileExpression(value, Type.i64, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          );\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.createUnreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.I64);\r\n          let off = i << 3;\r\n          writeI32(getConstValueI64Low(expr), bytes, off);\r\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.createV128(bytes);\r\n    }\r\n    case BuiltinSymbols.f32x4: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 4, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 4; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = module.precomputeExpression(\r\n            compiler.compileExpression(value, Type.f32, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          );\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.createUnreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.F32);\r\n          writeF32(getConstValueF32(expr), bytes, i << 2);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.createV128(bytes);\r\n    }\r\n    case BuiltinSymbols.f64x2: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let bytes = new Uint8Array(16);\r\n      for (let i = 0; i < 2; ++i) {\r\n        let value = operands[i];\r\n        if (value) {\r\n          let expr = module.precomputeExpression(\r\n            compiler.compileExpression(value, Type.f64, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n          );\r\n          if (getExpressionId(expr) != ExpressionId.Const) {\r\n            compiler.error(\r\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n              value.range\r\n            );\r\n            compiler.currentType = Type.v128;\r\n            return module.createUnreachable();\r\n          }\r\n          assert(getExpressionType(expr) == NativeType.F64);\r\n          writeF64(getConstValueF64(expr), bytes, i << 3);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.createV128(bytes);\r\n    }\r\n    case BuiltinSymbols.v128_splat: { // splat<T!>(x: T) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let op: UnaryOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8:  { op = UnaryOp.SplatVecI8x16; break; }\r\n        case TypeKind.I16:\r\n        case TypeKind.U16: { op = UnaryOp.SplatVecI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = UnaryOp.SplatVecI32x4; break; }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: { op = UnaryOp.SplatVecI64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? UnaryOp.SplatVecI64x2\r\n            : UnaryOp.SplatVecI32x4;\r\n          break;\r\n        }\r\n        case TypeKind.F32: { op = UnaryOp.SplatVecF32x4; break; }\r\n        case TypeKind.F64: { op = UnaryOp.SplatVecF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], type, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.v128;\r\n      return module.createUnary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) return module.createUnreachable();\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = type;\r\n        return module.createUnreachable();\r\n      }\r\n      let op: SIMDExtractOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:  { op = SIMDExtractOp.ExtractLaneSVecI8x16; break; }\r\n        case TypeKind.U8:  { op = SIMDExtractOp.ExtractLaneUVecI8x16; break; }\r\n        case TypeKind.I16: { op = SIMDExtractOp.ExtractLaneSVecI16x8; break; }\r\n        case TypeKind.U16: { op = SIMDExtractOp.ExtractLaneUVecI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = SIMDExtractOp.ExtractLaneVecI32x4; break; }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: { op = SIMDExtractOp.ExtractLaneVecI64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? SIMDExtractOp.ExtractLaneVecI64x2\r\n            : SIMDExtractOp.ExtractLaneVecI32x4;\r\n          break;\r\n        }\r\n        case TypeKind.F32: { op = SIMDExtractOp.ExtractLaneVecF32x4; break; }\r\n        case TypeKind.F64: { op = SIMDExtractOp.ExtractLaneVecF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          compiler.currentType = type;\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      let arg1 = module.precomputeExpression(\r\n        compiler.compileExpression(operands[1], Type.u8, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n      );\r\n      compiler.currentType = type;\r\n      if (getExpressionId(arg1) != ExpressionId.Const) {\r\n        compiler.error(\r\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n          operands[1].range\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      assert(getExpressionType(arg1) == NativeType.I32);\r\n      let maxIdx = (16 / type.byteSize) - 1;\r\n      let idx = getConstValueI32(arg1);\r\n      if (idx < 0 || idx > maxIdx) {\r\n        compiler.error(\r\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      return module.createSIMDExtract(op, arg0, idx);\r\n    }\r\n    case BuiltinSymbols.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let op: SIMDReplaceOp;\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.U8:  { op = SIMDReplaceOp.ReplaceLaneVecI8x16; break; }\r\n        case TypeKind.I16:\r\n        case TypeKind.U16: { op = SIMDReplaceOp.ReplaceLaneVecI16x8; break; }\r\n        case TypeKind.I32:\r\n        case TypeKind.U32: { op = SIMDReplaceOp.ReplaceLaneVecI32x4; break; }\r\n        case TypeKind.I64:\r\n        case TypeKind.U64: { op = SIMDReplaceOp.ReplaceLaneVecI64x2; break; }\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.USIZE: {\r\n          op = compiler.options.isWasm64\r\n            ? SIMDReplaceOp.ReplaceLaneVecI64x2\r\n            : SIMDReplaceOp.ReplaceLaneVecI32x4;\r\n          break;\r\n        }\r\n        case TypeKind.F32: { op = SIMDReplaceOp.ReplaceLaneVecF32x4; break; }\r\n        case TypeKind.F64: { op = SIMDReplaceOp.ReplaceLaneVecF64x2; break; }\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      let arg1 = module.precomputeExpression(\r\n        compiler.compileExpression(operands[1], Type.u8, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n      );\r\n      if (getExpressionId(arg1) != ExpressionId.Const) {\r\n        compiler.error(\r\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n          operands[1].range\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      assert(getExpressionType(arg1) == NativeType.I32);\r\n      let maxIdx = (16 / type.byteSize) - 1;\r\n      let idx = getConstValueI32(arg1);\r\n      if (idx < 0 || idx > maxIdx) {\r\n        compiler.error(\r\n          DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n          operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let arg2 = compiler.compileExpression(operands[2], type, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.v128;\r\n      return module.createSIMDReplace(op, arg0, idx, arg2);\r\n    }\r\n    case BuiltinSymbols.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let laneWidth = type.byteSize;\r\n      let laneCount = 16 / laneWidth;\r\n      assert(isInteger(laneCount) && isPowerOf2(laneCount));\r\n      if (\r\n        checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      switch (type.kind) {\r\n        case TypeKind.I8:\r\n        case TypeKind.I16:\r\n        case TypeKind.I32:\r\n        case TypeKind.I64:\r\n        case TypeKind.ISIZE:\r\n        case TypeKind.U8:\r\n        case TypeKind.U16:\r\n        case TypeKind.U32:\r\n        case TypeKind.U64:\r\n        case TypeKind.USIZE:\r\n        case TypeKind.F32:\r\n        case TypeKind.F64: break;\r\n        default: {\r\n          compiler.error(\r\n            DiagnosticCode.Operation_not_supported,\r\n            reportNode.typeArgumentsRange\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.createUnreachable();\r\n        }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      let mask = new Uint8Array(16);\r\n      let maxIdx = (laneCount << 1) - 1;\r\n      for (let i = 0; i < laneCount; ++i) {\r\n        let operand = operands[2 + i];\r\n        let argN = module.precomputeExpression(\r\n          compiler.compileExpression(operand, Type.u8, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n        );\r\n        if (getExpressionId(argN) != ExpressionId.Const) {\r\n          compiler.error(\r\n            DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n            operand.range\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.createUnreachable();\r\n        }\r\n        assert(getExpressionType(argN) == NativeType.I32);\r\n        let idx = getConstValueI32(argN);\r\n        if (idx < 0 || idx > maxIdx) {\r\n          compiler.error(\r\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\r\n            operand.range, \"Lane index\", \"0\", maxIdx.toString()\r\n          );\r\n          compiler.currentType = Type.v128;\r\n          return module.createUnreachable();\r\n        }\r\n        switch (laneWidth) {\r\n          case 1: {\r\n            writeI8(idx, mask, i);\r\n            break;\r\n          }\r\n          case 2: {\r\n            let off8 = i << 1;\r\n            let idx8 = idx << 1;\r\n            writeI8(idx8    , mask, off8);\r\n            writeI8(idx8 + 1, mask, off8 + 1);\r\n            break;\r\n          }\r\n          case 4: {\r\n            let off8 = i << 2;\r\n            let idx8 = idx << 2;\r\n            writeI8(idx8    , mask, off8);\r\n            writeI8(idx8 + 1, mask, off8 + 1);\r\n            writeI8(idx8 + 2, mask, off8 + 2);\r\n            writeI8(idx8 + 3, mask, off8 + 3);\r\n            break;\r\n          }\r\n          case 8: {\r\n            let off8 = i << 3;\r\n            let idx8 = idx << 3;\r\n            writeI8(idx8    , mask, off8);\r\n            writeI8(idx8 + 1, mask, off8 + 1);\r\n            writeI8(idx8 + 2, mask, off8 + 2);\r\n            writeI8(idx8 + 3, mask, off8 + 3);\r\n            writeI8(idx8 + 4, mask, off8 + 4);\r\n            writeI8(idx8 + 5, mask, off8 + 5);\r\n            writeI8(idx8 + 6, mask, off8 + 6);\r\n            writeI8(idx8 + 7, mask, off8 + 7);\r\n            break;\r\n          }\r\n          default: assert(false);\r\n        }\r\n      }\r\n      compiler.currentType = Type.v128;\r\n      return module.createSIMDShuffle(arg0, arg1, mask);\r\n    }\r\n    case BuiltinSymbols.v128_add: // any_binary<T!>(a: v128, b: v128) -> v128\r\n    case BuiltinSymbols.v128_sub:\r\n    case BuiltinSymbols.v128_mul:\r\n    case BuiltinSymbols.v128_div:\r\n    case BuiltinSymbols.v128_add_saturate:\r\n    case BuiltinSymbols.v128_sub_saturate:\r\n    case BuiltinSymbols.v128_min:\r\n    case BuiltinSymbols.v128_max:\r\n    case BuiltinSymbols.v128_eq:\r\n    case BuiltinSymbols.v128_ne:\r\n    case BuiltinSymbols.v128_lt:\r\n    case BuiltinSymbols.v128_le:\r\n    case BuiltinSymbols.v128_gt:\r\n    case BuiltinSymbols.v128_ge: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let op: BinaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.v128_add: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.AddVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.AddVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.AddVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = BinaryOp.AddVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? BinaryOp.AddVecI64x2\r\n                : BinaryOp.AddVecI32x4;\r\n              break;\r\n            }\r\n            case TypeKind.F32: { op = BinaryOp.AddVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.AddVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_sub: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.SubVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.SubVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.SubVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = BinaryOp.SubVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? BinaryOp.SubVecI64x2\r\n                : BinaryOp.SubVecI32x4;\r\n              break;\r\n            }\r\n            case TypeKind.F32: { op = BinaryOp.SubVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.SubVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_mul: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.MulVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.MulVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.MulVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.MulVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.MulVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) op = BinaryOp.MulVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_div: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = BinaryOp.DivVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.DivVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_add_saturate: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.AddSatSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.AddSatUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.AddSatSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.AddSatUVecI16x8; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_sub_saturate: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.SubSatSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.SubSatUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.SubSatSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.SubSatUVecI16x8; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_min: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = BinaryOp.MinVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.MinVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_max: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = BinaryOp.MaxVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.MaxVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_eq: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.EqVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.EqVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.EqVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.EqVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.EqVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) op = BinaryOp.EqVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_ne: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = BinaryOp.NeVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = BinaryOp.NeVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = BinaryOp.NeVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.NeVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.NeVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) op = BinaryOp.NeVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_lt: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.LtSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.LtUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.LtSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.LtUVecI16x8; break; }\r\n            case TypeKind.I32: { op = BinaryOp.LtSVecI32x4; break; }\r\n            case TypeKind.U32: { op = BinaryOp.LtUVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.LtVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.LtVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                op = type.kind == TypeKind.ISIZE\r\n                  ? BinaryOp.LtSVecI32x4\r\n                  : BinaryOp.LtUVecI32x4;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_le: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.LeSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.LeUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.LeSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.LeUVecI16x8; break; }\r\n            case TypeKind.I32: { op = BinaryOp.LeSVecI32x4; break; }\r\n            case TypeKind.U32: { op = BinaryOp.LeUVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.LeVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.LeVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                op = type.kind == TypeKind.ISIZE\r\n                  ? BinaryOp.LeSVecI32x4\r\n                  : BinaryOp.LeUVecI32x4;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_gt: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.GtSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.GtUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.GtSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.GtUVecI16x8; break; }\r\n            case TypeKind.I32: { op = BinaryOp.GtSVecI32x4; break; }\r\n            case TypeKind.U32: { op = BinaryOp.GtUVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.GtVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.GtVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                op = type.kind == TypeKind.ISIZE\r\n                  ? BinaryOp.GtSVecI32x4\r\n                  : BinaryOp.GtUVecI32x4;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_ge: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = BinaryOp.GeSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = BinaryOp.GeUVecI8x16; break; }\r\n            case TypeKind.I16: { op = BinaryOp.GeSVecI16x8; break; }\r\n            case TypeKind.U16: { op = BinaryOp.GeUVecI16x8; break; }\r\n            case TypeKind.I32: { op = BinaryOp.GeSVecI32x4; break; }\r\n            case TypeKind.U32: { op = BinaryOp.GeUVecI32x4; break; }\r\n            case TypeKind.F32: { op = BinaryOp.GeVecF32x4; break; }\r\n            case TypeKind.F64: { op = BinaryOp.GeVecF64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              if (!compiler.options.isWasm64) {\r\n                op = type.kind == TypeKind.ISIZE\r\n                  ? BinaryOp.GeSVecI32x4\r\n                  : BinaryOp.GeUVecI32x4;\r\n              }\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.v128;\r\n      return module.createBinary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_neg: // any_unary<T!>(a: v128) -> v128\r\n    case BuiltinSymbols.v128_abs:\r\n    case BuiltinSymbols.v128_sqrt:\r\n    case BuiltinSymbols.v128_convert:\r\n    case BuiltinSymbols.v128_trunc: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let op: UnaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.v128_neg: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = UnaryOp.NegVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = UnaryOp.NegVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.NegVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.NegVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.NegVecI64x2\r\n                : UnaryOp.NegVecI32x4;\r\n              break;\r\n            }\r\n            case TypeKind.F32: { op = UnaryOp.NegVecF32x4; break; }\r\n            case TypeKind.F64: { op = UnaryOp.NegVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_abs: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = UnaryOp.AbsVecF32x4; break; }\r\n            case TypeKind.F64: { op = UnaryOp.AbsVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_sqrt: {\r\n          switch (type.kind) {\r\n            case TypeKind.F32: { op = UnaryOp.SqrtVecF32x4; break; }\r\n            case TypeKind.F64: { op = UnaryOp.SqrtVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_convert: {\r\n          switch (type.kind) {\r\n            case TypeKind.I32: { op = UnaryOp.ConvertSVecI32x4ToVecF32x4; break; }\r\n            case TypeKind.U32: { op = UnaryOp.ConvertUVecI32x4ToVecF32x4; break; }\r\n            case TypeKind.I64: { op = UnaryOp.ConvertSVecI64x2ToVecF64x2; break; }\r\n            case TypeKind.U64: { op = UnaryOp.ConvertUVecI64x2ToVecF64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_trunc: {\r\n          switch (type.kind) {\r\n            case TypeKind.I32: { op = UnaryOp.TruncSatSVecF32x4ToVecI32x4; break; }\r\n            case TypeKind.U32: { op = UnaryOp.TruncSatUVecF32x4ToVecI32x4; break; }\r\n            case TypeKind.I64: { op = UnaryOp.TruncSatSVecF64x2ToVecI64x2; break; }\r\n            case TypeKind.U64: { op = UnaryOp.TruncSatUVecF64x2ToVecI64x2; break; }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.v128;\r\n      return module.createUnary(op, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_shl: // any_shift<T!>(a: v128, b: i32) -> v128\r\n    case BuiltinSymbols.v128_shr: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let op: SIMDShiftOp = -1;\r\n      switch (prototype.internalName) {\r\n        case BuiltinSymbols.v128_shl: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = SIMDShiftOp.ShlVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = SIMDShiftOp.ShlVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = SIMDShiftOp.ShlVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = SIMDShiftOp.ShlVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? SIMDShiftOp.ShlVecI64x2\r\n                : SIMDShiftOp.ShlVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_shr: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:  { op = SIMDShiftOp.ShrSVecI8x16; break; }\r\n            case TypeKind.U8:  { op = SIMDShiftOp.ShrUVecI8x16; break; }\r\n            case TypeKind.I16: { op = SIMDShiftOp.ShrSVecI16x8; break; }\r\n            case TypeKind.U16: { op = SIMDShiftOp.ShrUVecI16x8; break; }\r\n            case TypeKind.I32: { op = SIMDShiftOp.ShrSVecI32x4; break; }\r\n            case TypeKind.U32: { op = SIMDShiftOp.ShrUVecI32x4; break; }\r\n            case TypeKind.I64: { op = SIMDShiftOp.ShrSVecI64x2; break; }\r\n            case TypeKind.U64: { op = SIMDShiftOp.ShrUVecI64x2; break; }\r\n            case TypeKind.ISIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? SIMDShiftOp.ShrSVecI64x2\r\n                : SIMDShiftOp.ShrSVecI32x4;\r\n              break;\r\n            }\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? SIMDShiftOp.ShrUVecI64x2\r\n                : SIMDShiftOp.ShrUVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.range\r\n        );\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.v128;\r\n      return module.createSIMDShift(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_and: // any_bitwise_binary(a: v128, b: v128) -> v128\r\n    case BuiltinSymbols.v128_or:\r\n    case BuiltinSymbols.v128_xor: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 2, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let op: BinaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        default: assert(false);\r\n        case BuiltinSymbols.v128_and: { op = BinaryOp.AndVec128; break; }\r\n        case BuiltinSymbols.v128_or:  { op = BinaryOp.OrVec128; break; }\r\n        case BuiltinSymbols.v128_xor: { op = BinaryOp.XorVec128; break; }\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      return module.createBinary(op, arg0, arg1);\r\n    }\r\n    case BuiltinSymbols.v128_not: { // any_bitwise_unary(a: v128) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      return module.createUnary(UnaryOp.NotVec128, arg0);\r\n    }\r\n    case BuiltinSymbols.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 3, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.v128;\r\n        return module.createUnreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      return module.createSIMDBitselect(arg0, arg1, arg2);\r\n    }\r\n    case BuiltinSymbols.v128_any_true: // any_test<T!>(a: v128) -> bool\r\n    case BuiltinSymbols.v128_all_true: {\r\n      if (!compiler.options.hasFeature(Feature.SIMD)) break;\r\n      if (\r\n        checkTypeRequired(typeArguments, reportNode, compiler) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.bool;\r\n        return module.createUnreachable();\r\n      }\r\n      let type = typeArguments![0];\r\n      if (type.is(TypeFlags.REFERENCE)) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        return module.createUnreachable();\r\n      }\r\n      let op: UnaryOp = -1;\r\n      switch (prototype.internalName) {\r\n        default: assert(false);\r\n        case BuiltinSymbols.v128_any_true: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = UnaryOp.AnyTrueVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = UnaryOp.AnyTrueVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.AnyTrueVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.AnyTrueVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.AnyTrueVecI64x2\r\n                : UnaryOp.AnyTrueVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case BuiltinSymbols.v128_all_true: {\r\n          switch (type.kind) {\r\n            case TypeKind.I8:\r\n            case TypeKind.U8:  { op = UnaryOp.AllTrueVecI8x16; break; }\r\n            case TypeKind.I16:\r\n            case TypeKind.U16: { op = UnaryOp.AllTrueVecI16x8; break; }\r\n            case TypeKind.I32:\r\n            case TypeKind.U32: { op = UnaryOp.AllTrueVecI32x4; break; }\r\n            case TypeKind.I64:\r\n            case TypeKind.U64: { op = UnaryOp.AllTrueVecI64x2; break; }\r\n            case TypeKind.ISIZE:\r\n            case TypeKind.USIZE: {\r\n              op = compiler.options.isWasm64\r\n                ? UnaryOp.AllTrueVecI64x2\r\n                : UnaryOp.AllTrueVecI32x4;\r\n              break;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      if (op == -1) {\r\n        compiler.error(\r\n          DiagnosticCode.Operation_not_supported,\r\n          reportNode.typeArgumentsRange\r\n        );\r\n        compiler.currentType = Type.bool;\r\n        return module.createUnreachable();\r\n      }\r\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      compiler.currentType = Type.bool;\r\n      return module.createUnary(op, arg0);\r\n    }\r\n\r\n    // === GC integration =========================================================================\r\n\r\n    case BuiltinSymbols.iterateRoots: {\r\n      if (\r\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\r\n        checkArgsRequired(operands, 1, reportNode, compiler)\r\n      ) {\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      let expr = compiler.compileExpressionRetainType(operands[0], Type.u32, WrapMode.NONE);\r\n      let type = compiler.currentType;\r\n      let signatureReference = type.signatureReference;\r\n      if (\r\n        !type.is(TypeFlags.REFERENCE) ||\r\n        !signatureReference ||\r\n        signatureReference.parameterTypes.length != 1 ||\r\n        signatureReference.parameterTypes[0] != compiler.options.usizeType\r\n       ) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\r\n          reportNode.range, type.toString(), \"(ref: usize) => void\"\r\n        );\r\n        compiler.currentType = Type.void;\r\n        return module.createUnreachable();\r\n      }\r\n      // just emit a call even if the function doesn't yet exist\r\n      compiler.needsIterateRoots = true;\r\n      compiler.currentType = Type.void;\r\n      return module.createCall(\"~iterateRoots\", [ expr ], NativeType.None);\r\n    }\r\n  }\r\n\r\n  // try to defer inline asm to a concrete built-in\r\n  {\r\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\r\n    if (expr) {\r\n      if (typeArguments) {\r\n        compiler.error(\r\n          DiagnosticCode.Type_0_is_not_generic,\r\n          reportNode.typeArgumentsRange, prototype.internalName\r\n        );\r\n      }\r\n      return expr;\r\n    }\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Cannot_find_name_0,\r\n    reportNode.expression.range, prototype.internalName\r\n  );\r\n  return module.createUnreachable();\r\n}\r\n\r\n/** Tries to defer an inline-assembler-like call to a built-in function. */\r\nfunction tryDeferASM(\r\n  compiler: Compiler,\r\n  prototype: FunctionPrototype,\r\n  operands: Expression[],\r\n  reportNode: CallExpression\r\n): ExpressionRef {\r\n  /* tslint:disable:max-line-length */\r\n  switch (prototype.internalName) {\r\n\r\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\r\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\r\n    //   and, or, xor, shl, shr_u, shr_s\r\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\r\n\r\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\r\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\r\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\r\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\r\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\r\n  }\r\n  if (compiler.options.hasFeature(Feature.THREADS)) {\r\n    switch (prototype.internalName) {\r\n\r\n      case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_u_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\r\n\r\n      case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32_notify: return deferASM(BuiltinSymbols.atomic_notify, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64_notify: return deferASM(BuiltinSymbols.atomic_notify, compiler, Type.i64, operands, Type.i32, reportNode);\r\n    }\r\n  }\r\n  if (compiler.options.hasFeature(Feature.SIMD)) {\r\n    switch (prototype.internalName) {\r\n\r\n      case BuiltinSymbols.v128_load: return deferASM(BuiltinSymbols.load, compiler, Type.v128, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.v128_store: return deferASM(BuiltinSymbols.store, compiler, Type.v128, operands, Type.void, reportNode);\r\n\r\n      case BuiltinSymbols.i8x16_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\r\n      case BuiltinSymbols.i8x16_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\r\n      case BuiltinSymbols.i8x16_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i8x16_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i8x16_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i8x16_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.i16x8_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\r\n      case BuiltinSymbols.i16x8_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\r\n      case BuiltinSymbols.i16x8_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i16x8_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i16x8_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i16x8_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.i32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32x4_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_trunc_s_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i32x4_trunc_u_f32x4_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u32, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.i64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\r\n      case BuiltinSymbols.i64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64x2_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\r\n      case BuiltinSymbols.i64x2_trunc_s_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.i64x2_trunc_u_f64x2_sat: return deferASM(BuiltinSymbols.v128_trunc, compiler, Type.u64, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.f32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\r\n      case BuiltinSymbols.f32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_convert_s_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f32x4_convert_u_i32x4: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.f64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\r\n      case BuiltinSymbols.f64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_convert_s_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\r\n      case BuiltinSymbols.f64x2_convert_u_i64x2: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\r\n\r\n      case BuiltinSymbols.v8x16_shuffle: return deferASM(BuiltinSymbols.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\r\n    }\r\n  }\r\n  /* tslint:enable:max-line-length */\r\n  return 0;\r\n}\r\n\r\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\r\nfunction deferASM(\r\n  name: string,\r\n  compiler: Compiler,\r\n  typeArgument: Type,\r\n  operands: Expression[],\r\n  contextualType: Type,\r\n  reportNode: CallExpression\r\n): ExpressionRef {\r\n  assert(compiler.program.elementsByName.has(name));\r\n  var prototype = compiler.program.elementsByName.get(name)!;\r\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n  return compileCall(\r\n    compiler,\r\n    <FunctionPrototype>prototype,\r\n    [ typeArgument ],\r\n    operands,\r\n    contextualType,\r\n    reportNode,\r\n    /* isAsm */ true\r\n  );\r\n}\r\n\r\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\r\nexport function compileAbort(\r\n  compiler: Compiler,\r\n  message: Expression | null,\r\n  reportNode: Node\r\n): ExpressionRef {\r\n  var program = compiler.program;\r\n  var module = compiler.module;\r\n\r\n  var stringInstance = compiler.program.stringInstance;\r\n  if (!stringInstance) return module.createUnreachable();\r\n\r\n  var abortInstance = program.abortInstance;\r\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.createUnreachable();\r\n\r\n  var messageArg = message != null\r\n    ? compiler.compileExpression(message, stringInstance.type, ConversionKind.IMPLICIT, WrapMode.NONE)\r\n    : stringInstance.type.toNativeZero(module);\r\n\r\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\r\n\r\n  compiler.currentType = Type.void;\r\n  return module.createBlock(null, [\r\n    module.createCall(\r\n      abortInstance.internalName, [\r\n        messageArg,\r\n        filenameArg,\r\n        module.createI32(reportNode.range.line),\r\n        module.createI32(reportNode.range.column)\r\n      ],\r\n      NativeType.None\r\n    ),\r\n    module.createUnreachable()\r\n  ]);\r\n}\r\n\r\n/** Compiles the iterateRoots function if required. */\r\nexport function compileIterateRoots(compiler: Compiler): void {\r\n  var module = compiler.module;\r\n  var exprs = new Array<ExpressionRef>();\r\n  var typeName = Signature.makeSignatureString([ Type.i32 ], Type.void);\r\n  var typeRef = compiler.ensureFunctionType([ Type.i32 ], Type.void);\r\n\r\n  for (let element of compiler.program.elementsByName.values()) {\r\n    if (element.kind != ElementKind.GLOBAL) continue;\r\n    let global = <Global>element;\r\n    let classReference = global.type.classReference;\r\n    if (\r\n      global.is(CommonFlags.COMPILED) &&\r\n      classReference !== null &&\r\n      !classReference.hasDecorator(DecoratorFlags.UNMANAGED)\r\n    ) {\r\n      if (global.is(CommonFlags.INLINED)) {\r\n        let value = global.constantIntegerValue;\r\n        exprs.push(\r\n          module.createCallIndirect(\r\n            module.createGetLocal(0, NativeType.I32),\r\n            [\r\n              compiler.options.isWasm64\r\n                ? module.createI64(i64_low(value), i64_high(value))\r\n                : module.createI32(i64_low(value))\r\n            ],\r\n            typeName\r\n          )\r\n        );\r\n      } else {\r\n        exprs.push(\r\n          module.createCallIndirect(\r\n            module.createGetLocal(0, NativeType.I32),\r\n            [\r\n              module.createGetGlobal(\r\n                global.internalName,\r\n                compiler.options.nativeSizeType\r\n              )\r\n            ],\r\n            typeName\r\n          )\r\n        );\r\n      }\r\n    }\r\n  }\r\n  module.addFunction(\"~iterateRoots\", typeRef, [],\r\n    exprs.length\r\n      ? module.createBlock(null, exprs)\r\n      : module.createNop()\r\n  );\r\n}\r\n\r\n/** Ensures that the specified class's GC hook exists and returns its function table index. */\r\nexport function ensureGCHook(\r\n  compiler: Compiler,\r\n  classInstance: Class\r\n): u32 {\r\n  var program = compiler.program;\r\n  assert(classInstance.type.isManaged(program));\r\n\r\n  // check if the GC hook has already been created\r\n  {\r\n    let existingIndex = classInstance.gcHookIndex;\r\n    if (existingIndex != <u32>-1) return existingIndex;\r\n  }\r\n\r\n  // check if the class implements a custom GC function (only valid for library elements)\r\n  var members = classInstance.members;\r\n  if (classInstance.isDeclaredInLibrary) {\r\n    if (members !== null && members.has(\"__gc\")) {\r\n      let gcPrototype = assert(members.get(\"__gc\"));\r\n      assert(gcPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\r\n      let gcInstance = assert(program.resolver.resolveFunction(<FunctionPrototype>gcPrototype, null));\r\n      assert(gcInstance.is(CommonFlags.PRIVATE | CommonFlags.INSTANCE));\r\n      assert(!gcInstance.isAny(CommonFlags.AMBIENT | CommonFlags.VIRTUAL));\r\n      assert(gcInstance.signature.parameterTypes.length == 0);\r\n      assert(gcInstance.signature.returnType == Type.void);\r\n      gcInstance.internalName = classInstance.internalName + \"~gc\";\r\n      assert(compiler.compileFunction(gcInstance));\r\n      let index = compiler.ensureFunctionTableEntry(gcInstance);\r\n      classInstance.gcHookIndex = index;\r\n      return index;\r\n    }\r\n  }\r\n\r\n  var module = compiler.module;\r\n  var options = compiler.options;\r\n  var nativeSizeType = options.nativeSizeType;\r\n  var nativeSizeSize = options.usizeType.byteSize;\r\n  var body = new Array<ExpressionRef>();\r\n\r\n  // nothing to mark if 'this' is null\r\n  body.push(\r\n    module.createIf(\r\n      module.createUnary(\r\n        options.isWasm64\r\n          ? UnaryOp.EqzI64\r\n          : UnaryOp.EqzI32,\r\n        module.createGetLocal(0, nativeSizeType)\r\n      ),\r\n      module.createReturn()\r\n    )\r\n  );\r\n\r\n  // remember the function index so we don't recurse infinitely\r\n  var functionTable = compiler.functionTable;\r\n  var gcHookIndex = functionTable.length;\r\n  functionTable.push(\"<placeholder>\");\r\n  classInstance.gcHookIndex = gcHookIndex;\r\n\r\n  // if the class extends a base class, call its hook first (calls mark)\r\n  var baseInstance = classInstance.base;\r\n  if (baseInstance) {\r\n    assert(baseInstance.type.isManaged(program));\r\n    body.push(\r\n      module.createCallIndirect(\r\n        module.createI32(\r\n          ensureGCHook(compiler, <Class>baseInstance.type.classReference)\r\n        ),\r\n        [\r\n          module.createGetLocal(0, nativeSizeType)\r\n        ],\r\n        \"FUNCSIG$\" + (nativeSizeType == NativeType.I64 ? \"vj\" : \"vi\")\r\n      )\r\n    );\r\n\r\n  // if this class is the top-most base class, mark the instance\r\n  } else {\r\n    body.push(\r\n      module.createCall(assert(program.gcMarkInstance).internalName, [\r\n        module.createGetLocal(0, nativeSizeType)\r\n      ], NativeType.None)\r\n    );\r\n  }\r\n\r\n  // mark instances assigned to own fields that are again references\r\n  if (members) {\r\n    for (let member of members.values()) {\r\n      if (member.kind == ElementKind.FIELD) {\r\n        if ((<Field>member).parent === classInstance) {\r\n          let type = (<Field>member).type;\r\n          if (type.isManaged(program)) {\r\n            let offset = (<Field>member).memoryOffset;\r\n            assert(offset >= 0);\r\n            body.push(\r\n              module.createCall(assert(program.gcMarkInstance).internalName, [\r\n                module.createLoad(\r\n                  nativeSizeSize,\r\n                  false,\r\n                  module.createGetLocal(0, nativeSizeType),\r\n                  nativeSizeType,\r\n                  offset\r\n                )\r\n              ], NativeType.None)\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // add the function to the module and return its table index\r\n  var funcName = classInstance.internalName + \"~gc\";\r\n  module.addFunction(\r\n    funcName,\r\n    compiler.ensureFunctionType(null, Type.void, options.usizeType),\r\n    null,\r\n    module.createBlock(null, body)\r\n  );\r\n  functionTable[gcHookIndex] = funcName;\r\n  return gcHookIndex;\r\n}\r\n\r\n// Helpers\r\n\r\n/** Evaluates the constant type of a type argument *or* expression. */\r\nfunction evaluateConstantType(\r\n  compiler: Compiler,\r\n  typeArguments: Type[] | null,\r\n  operands: Expression[],\r\n  reportNode: CallExpression\r\n): Type | null {\r\n  if (operands.length == 0) { // requires type argument\r\n    if (!typeArguments || typeArguments.length != 1) {\r\n      compiler.error(\r\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\r\n      );\r\n      return null;\r\n    }\r\n    return typeArguments[0];\r\n  }\r\n  if (operands.length == 1) { // optional type argument\r\n    if (typeArguments) {\r\n      if (typeArguments.length == 1) {\r\n        compiler.compileExpression(operands[0], typeArguments[0], ConversionKind.IMPLICIT, WrapMode.NONE);\r\n      } else {\r\n        if (typeArguments.length) {\r\n          compiler.error(\r\n            DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n            reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\r\n          );\r\n          return null;\r\n        }\r\n        compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n      }\r\n    } else {\r\n      compiler.compileExpressionRetainType(operands[0], Type.i32, WrapMode.NONE);\r\n    }\r\n    return compiler.currentType;\r\n  }\r\n  if (typeArguments && typeArguments.length > 1) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\r\n    );\r\n  }\r\n  compiler.error(\r\n    DiagnosticCode.Expected_0_arguments_but_got_1,\r\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\r\n  );\r\n  return null;\r\n}\r\n\r\n/** Evaluates a compile-time constant immediate offset argument.*/\r\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\r\n  var expr: ExpressionRef;\r\n  var value: i32;\r\n  if (compiler.options.isWasm64) {\r\n    expr = compiler.precomputeExpression(expression, Type.usize64, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I64 ||\r\n      getConstValueI64High(expr) != 0 ||\r\n      (value = getConstValueI64Low(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  } else {\r\n    expr = compiler.precomputeExpression(expression, Type.usize32, ConversionKind.IMPLICIT, WrapMode.NONE);\r\n    if (\r\n      getExpressionId(expr) != ExpressionId.Const ||\r\n      getExpressionType(expr) != NativeType.I32 ||\r\n      (value = getConstValueI32(expr)) < 0\r\n    ) {\r\n      compiler.error(\r\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\r\n        expression.range\r\n      );\r\n      value = -1;\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\n/** Checks a call with a single required type argument. Returns `1` on error. */\r\nfunction checkTypeRequired(\r\n  typeArguments: Type[] | null,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler,\r\n  setCurrentTypeOnError: bool = false\r\n): i32 {\r\n  if (typeArguments) {\r\n    let numTypeArguments = typeArguments.length;\r\n    if (numTypeArguments == 1) return 0;\r\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\r\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\r\n    );\r\n  } else {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.range, \"1\", \"0\"\r\n    );\r\n  }\r\n  return 1;\r\n}\r\n\r\n/** Checks a call with a single optional type argument. Returns `1` on error. */\r\nfunction checkTypeOptional(\r\n  typeArguments: Type[] | null,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler,\r\n  setCurrentTypeOnError: bool = false\r\n): i32 {\r\n  if (typeArguments) {\r\n    let numTypeArguments = typeArguments.length;\r\n    if (numTypeArguments == 1) return 0;\r\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\r\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\r\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** Checks a call that is not generic. Returns `1` on error. */\r\nfunction checkTypeAbsent(\r\n  typeArguments: Type[] | null,\r\n  reportNode: CallExpression,\r\n  prototype: FunctionPrototype\r\n): i32 {\r\n  if (typeArguments) {\r\n    prototype.program.error(\r\n      DiagnosticCode.Type_0_is_not_generic,\r\n      reportNode.typeArgumentsRange, prototype.internalName\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\r\nfunction checkArgsRequired(\r\n  operands: Expression[],\r\n  expected: i32,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler\r\n): i32 {\r\n  if (operands.length != expected) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_arguments_but_got_1,\r\n      reportNode.range, expected.toString(), operands.length.toString()\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\r\nfunction checkArgsOptional(\r\n  operands: Expression[],\r\n  expectedMinimum: i32,\r\n  expectedMaximum: i32,\r\n  reportNode: CallExpression,\r\n  compiler: Compiler\r\n): i32 {\r\n  var numOperands = operands.length;\r\n  if (numOperands < expectedMinimum) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\r\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\r\n    );\r\n    return 1;\r\n  } else if (numOperands > expectedMaximum) {\r\n    compiler.error(\r\n      DiagnosticCode.Expected_0_arguments_but_got_1,\r\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\r\n    );\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n","/** @module util *//***/\r\n\r\n/** Tests if the bit at the specified index is set within a 64-bit map. */\r\nexport function bitsetIs(map: I64, index: i32): bool {\r\n  assert(index >= 0 && index < 64);\r\n  return i64_ne(\r\n    i64_and(\r\n      map,\r\n      i64_shl(\r\n        i64_one,\r\n        i64_new(index)\r\n      )\r\n    ),\r\n    i64_zero\r\n  );\r\n}\r\n\r\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\r\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\r\n  assert(index >= 0 && index < 64);\r\n  return isSet\r\n    ? i64_or(\r\n        map,\r\n        i64_shl(\r\n          i64_one,\r\n          i64_new(index)\r\n        )\r\n      )\r\n    : i64_and(\r\n        map,\r\n        i64_not(\r\n          i64_shl(\r\n            i64_one,\r\n            i64_new(index)\r\n          )\r\n        )\r\n      );\r\n}\r\n","/** @module util *//***/\r\n\r\n/** An enum of named character codes. */\r\nexport const enum CharCode {\r\n\r\n  NULL = 0,\r\n  LINEFEED = 0x0A,\r\n  CARRIAGERETURN = 0x0D,\r\n  LINESEPARATOR = 0x2028,\r\n  PARAGRAPHSEPARATOR = 0x2029,\r\n  NEXTLINE = 0x0085,\r\n\r\n  SPACE = 0x20,\r\n  NONBREAKINGSPACE = 0xA0,\r\n  ENQUAD = 0x2000,\r\n  EMQUAD = 0x2001,\r\n  ENSPACE = 0x2002,\r\n  EMSPACE = 0x2003,\r\n  THREEPEREMSPACE = 0x2004,\r\n  FOURPEREMSPACE = 0x2005,\r\n  SIXPEREMSPACE = 0x2006,\r\n  FIGURESPACE = 0x2007,\r\n  PUNCTUATIONSPACE = 0x2008,\r\n  THINSPACE = 0x2009,\r\n  HAIRSPACE = 0x200A,\r\n  ZEROWIDTHSPACE = 0x200B,\r\n  NARROWNOBREAKSPACE = 0x202F,\r\n  IDEOGRAPHICSPACE = 0x3000,\r\n  MATHEMATICALSPACE = 0x205F,\r\n  OGHAM = 0x1680,\r\n\r\n  _ = 0x5F,\r\n\r\n  _0 = 0x30,\r\n  _1 = 0x31,\r\n  _2 = 0x32,\r\n  _3 = 0x33,\r\n  _4 = 0x34,\r\n  _5 = 0x35,\r\n  _6 = 0x36,\r\n  _7 = 0x37,\r\n  _8 = 0x38,\r\n  _9 = 0x39,\r\n\r\n  a = 0x61,\r\n  b = 0x62,\r\n  c = 0x63,\r\n  d = 0x64,\r\n  e = 0x65,\r\n  f = 0x66,\r\n  g = 0x67,\r\n  h = 0x68,\r\n  i = 0x69,\r\n  j = 0x6A,\r\n  k = 0x6B,\r\n  l = 0x6C,\r\n  m = 0x6D,\r\n  n = 0x6E,\r\n  o = 0x6F,\r\n  p = 0x70,\r\n  q = 0x71,\r\n  r = 0x72,\r\n  s = 0x73,\r\n  t = 0x74,\r\n  u = 0x75,\r\n  v = 0x76,\r\n  w = 0x77,\r\n  x = 0x78,\r\n  y = 0x79,\r\n  z = 0x7A,\r\n\r\n  A = 0x41,\r\n  B = 0x42,\r\n  C = 0x43,\r\n  D = 0x44,\r\n  E = 0x45,\r\n  F = 0x46,\r\n  G = 0x47,\r\n  H = 0x48,\r\n  I = 0x49,\r\n  J = 0x4A,\r\n  K = 0x4B,\r\n  L = 0x4C,\r\n  M = 0x4D,\r\n  N = 0x4E,\r\n  O = 0x4F,\r\n  P = 0x50,\r\n  Q = 0x51,\r\n  R = 0x52,\r\n  S = 0x53,\r\n  T = 0x54,\r\n  U = 0x55,\r\n  V = 0x56,\r\n  W = 0x57,\r\n  X = 0x58,\r\n  Y = 0x59,\r\n  Z = 0x5a,\r\n\r\n  AMPERSAND = 0x26,\r\n  ASTERISK = 0x2A,\r\n  AT = 0x40,\r\n  BACKSLASH = 0x5C,\r\n  BACKTICK = 0x60,\r\n  BAR = 0x7C,\r\n  CARET = 0x5E,\r\n  CLOSEBRACE = 0x7D,\r\n  CLOSEBRACKET = 0x5D,\r\n  CLOSEPAREN = 0x29,\r\n  COLON = 0x3A,\r\n  COMMA = 0x2C,\r\n  DOLLAR = 0x24,\r\n  DOT = 0x2E,\r\n  DOUBLEQUOTE = 0x22,\r\n  EQUALS = 0x3D,\r\n  EXCLAMATION = 0x21,\r\n  GREATERTHAN = 0x3E,\r\n  HASH = 0x23,\r\n  LESSTHAN = 0x3C,\r\n  MINUS = 0x2D,\r\n  OPENBRACE = 0x7B,\r\n  OPENBRACKET = 0x5B,\r\n  OPENPAREN = 0x28,\r\n  PERCENT = 0x25,\r\n  PLUS = 0x2B,\r\n  QUESTION = 0x3F,\r\n  SEMICOLON = 0x3B,\r\n  SINGLEQUOTE = 0x27,\r\n  SLASH = 0x2F,\r\n  TILDE = 0x7E,\r\n\r\n  BACKSPACE = 0x08,\r\n  FORMFEED = 0x0C,\r\n  BYTEORDERMARK = 0xFEFF,\r\n  TAB = 0x09,\r\n  VERTICALTAB = 0x0B\r\n}\r\n\r\n/** Tests if the specified character code is some sort of line break. */\r\nexport function isLineBreak(c: CharCode): bool {\r\n  switch (c) {\r\n    case CharCode.LINEFEED:\r\n    case CharCode.CARRIAGERETURN:\r\n    case CharCode.LINESEPARATOR:\r\n    case CharCode.PARAGRAPHSEPARATOR: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is some sort of white space. */\r\nexport function isWhiteSpace(c: i32): bool {\r\n  switch (c) {\r\n    case CharCode.SPACE:\r\n    case CharCode.TAB:\r\n    case CharCode.VERTICALTAB:\r\n    case CharCode.FORMFEED:\r\n    case CharCode.NONBREAKINGSPACE:\r\n    case CharCode.NEXTLINE:\r\n    case CharCode.OGHAM:\r\n    case CharCode.NARROWNOBREAKSPACE:\r\n    case CharCode.MATHEMATICALSPACE:\r\n    case CharCode.IDEOGRAPHICSPACE:\r\n    case CharCode.BYTEORDERMARK: {\r\n      return true;\r\n    }\r\n    default: {\r\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\r\n    }\r\n  }\r\n}\r\n\r\n/** Tests if the specified character code is a valid decimal digit. */\r\nexport function isDecimalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._9;\r\n}\r\n\r\n/** Tests if the specified character code is a valid octal digit. */\r\nexport function isOctalDigit(c: i32): bool {\r\n  return c >= CharCode._0 && c <= CharCode._7;\r\n}\r\n\r\n/** Tests if the specified character code is a valid start of an identifier. */\r\nexport function isIdentifierStart(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode.A && c <= CharCode.Z\r\n      || c == CharCode._\r\n      || c == CharCode.DOLLAR\r\n      || c > 0x7f && isUnicodeIdentifierStart(c);\r\n}\r\n\r\n/** Tests if the specified character code is a valid keyword character. */\r\nexport function isKeywordCharacter(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z;\r\n}\r\n\r\n/** Tests if the specified character code is a valid part of an identifier. */\r\nexport function isIdentifierPart(c: i32): bool {\r\n  return c >= CharCode.a && c <= CharCode.z\r\n      || c >= CharCode.A && c <= CharCode.Z\r\n      || c >= CharCode._0 && c <= CharCode._9\r\n      || c == CharCode._\r\n      || c == CharCode.DOLLAR\r\n      || c > 0x7f && isUnicodeIdentifierPart(c);\r\n}\r\n\r\n// storing as u16 to save memory\r\nconst unicodeIdentifierStart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\r\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\r\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\r\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\r\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\r\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\r\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\r\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\r\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\r\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\r\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\r\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\r\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\r\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\r\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\r\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\r\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\r\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\r\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\r\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\r\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\r\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\r\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\r\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\r\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\r\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\r\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\r\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\r\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\r\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\r\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\r\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\r\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\r\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\r\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\r\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\r\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\r\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\r\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\r\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\r\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\r\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\r\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\r\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\r\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\r\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\r\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\r\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\r\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\r\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\r\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\r\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\r\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\r\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\r\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\r\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\nconst unicodeIdentifierPart: u16[] = [\r\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\r\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\r\n  908, 908, 910, 929, 931,\r\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\r\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\r\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\r\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\r\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\r\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\r\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\r\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\r\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\r\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\r\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\r\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\r\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\r\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\r\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\r\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\r\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\r\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\r\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\r\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\r\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\r\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\r\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\r\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\r\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\r\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\r\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\r\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\r\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\r\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\r\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\r\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\r\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\r\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\r\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\r\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\r\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\r\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\r\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\r\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\r\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\r\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\r\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\r\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\r\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\r\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\r\n  8521, 8526, 8526, 8544, 8584,\r\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\r\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\r\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\r\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\r\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\r\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\r\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\r\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\r\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\r\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\r\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\r\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\r\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\r\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\r\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\r\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\r\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\r\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\r\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\r\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\r\n];\r\n\r\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\r\n  if (code < map[0]) return false;\r\n\r\n  var lo = 0;\r\n  var hi = map.length;\r\n  var mid: i32;\r\n  var midVal: u16;\r\n\r\n  while (lo + 1 < hi) {\r\n    mid = lo + ((hi - lo) >> 1);\r\n    mid -= (mid & 1);\r\n    midVal = map[mid];\r\n    if (midVal <= code && code <= map[mid + 1]) {\r\n      return true;\r\n    }\r\n    if (code < midVal) {\r\n      hi = mid;\r\n    } else {\r\n      lo = mid + 2;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction isUnicodeIdentifierStart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\r\n}\r\n\r\nfunction isUnicodeIdentifierPart(code: i32): bool {\r\n  return code < 0 || code > 0xffff ? false\r\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\r\n}\r\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\r\n  if (original) {\r\n    let cloned = new Array<V>(original.length);\r\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\r\n    return cloned;\r\n  }\r\n  return new Array<V>();\r\n}\r\n\r\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\r\n  if (original) {\r\n    let cloned = new Set<V>();\r\n    for (let v of original) cloned.add(v);\r\n    return cloned;\r\n  }\r\n  return new Set<V>();\r\n}\r\n\r\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\r\n  var cloned = new Map<K,V>();\r\n  if (original) {\r\n    for (let [k, v] of original) cloned.set(k, v);\r\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\r\n  } else if (overrides) {\r\n    for (let [k, v] of overrides) cloned.set(k, v);\r\n  }\r\n  return cloned;\r\n}\r\n","/** @module util *//***/\r\n\r\nimport {\r\n  CharCode\r\n} from \"./charcode\";\r\n\r\nimport {\r\n  PATH_DELIMITER\r\n} from \"../common\";\r\n\r\nconst separator = CharCode.SLASH;\r\n\r\n/**\r\n * Normalizes the specified path, removing interior placeholders.\r\n * Expects a posix-compatible relative path (not Windows compatible).\r\n */\r\nexport function normalizePath(path: string): string {\r\n  var pos = 0;\r\n  var len = path.length;\r\n\r\n  // trim leading './'\r\n  while (pos + 1 < len &&\r\n    path.charCodeAt(pos) == CharCode.DOT &&\r\n    path.charCodeAt(pos + 1) == separator\r\n  ) {\r\n    pos += 2;\r\n  }\r\n\r\n  if (pos > 0 || len < path.length) {\r\n    path = path.substring(pos, len);\r\n    len -= pos;\r\n    pos = 0;\r\n  }\r\n\r\n  var atEnd: bool;\r\n  while (pos + 1 < len) {\r\n    atEnd = false;\r\n\r\n    // we are only interested in '/.' sequences ...\r\n    if (\r\n      path.charCodeAt(pos) == separator &&\r\n      path.charCodeAt(pos + 1) == CharCode.DOT\r\n    ) {\r\n      // '/.' ( '/' | $ )\r\n      atEnd = pos + 2 == len;\r\n      if (atEnd ||\r\n        pos + 2 < len &&\r\n        path.charCodeAt(pos + 2) == separator\r\n      ) {\r\n        path = atEnd\r\n          ? path.substring(0, pos)\r\n          : path.substring(0, pos) + path.substring(pos + 2);\r\n        len -= 2;\r\n        continue;\r\n      }\r\n\r\n      // '/.' ( './' | '.' $ )\r\n      atEnd = pos + 3 == len;\r\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\r\n        pos + 3 < len &&\r\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\r\n        path.charCodeAt(pos + 3) == separator\r\n      ) {\r\n        // find preceeding '/'\r\n        let ipos = pos;\r\n        while (--ipos >= 0) {\r\n          if (path.charCodeAt(ipos) == separator) {\r\n            if (pos - ipos != 3 ||\r\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\r\n              path.charCodeAt(ipos + 2) != CharCode.DOT\r\n            ) { // exclude '..' itself\r\n              path = atEnd\r\n                ? path.substring(0, ipos)\r\n                : path.substring(0, ipos) + path.substring(pos + 3);\r\n              len -= pos + 3 - ipos;\r\n              pos = ipos - 1; // incremented again at end of loop\r\n            }\r\n            break;\r\n          }\r\n        }\r\n\r\n        // if there's no preceeding '/', trim start if non-empty\r\n        if (ipos < 0 && pos > 0) {\r\n          if (pos != 2 ||\r\n            path.charCodeAt(0) != CharCode.DOT ||\r\n            path.charCodeAt(1) != CharCode.DOT\r\n          ) { // exclude '..' itself\r\n            path = path.substring(pos + 4);\r\n            len = path.length;\r\n            continue;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    pos++;\r\n  }\r\n  return len > 0 ? path : \".\";\r\n}\r\n\r\n/** Resolves the specified path relative to the specified origin. */\r\nexport function resolvePath(normalizedPath: string, origin: string): string {\r\n  if (normalizedPath.startsWith(\"std/\")) {\r\n    return normalizedPath;\r\n  }\r\n  return normalizePath(\r\n    dirname(origin) + PATH_DELIMITER + normalizedPath\r\n  );\r\n}\r\n\r\n/** Obtains the directory portion of a normalized path. */\r\nexport function dirname(normalizedPath: string): string {\r\n  var pos = normalizedPath.length;\r\n  if (pos <= 1) {\r\n    if (pos == 0) return \".\";\r\n    if (normalizedPath.charCodeAt(0) == separator) {\r\n      return normalizedPath;\r\n    }\r\n  }\r\n  while (--pos > 0) {\r\n    if (normalizedPath.charCodeAt(pos) == separator) {\r\n      return normalizedPath.substring(0, pos);\r\n    }\r\n  }\r\n  return \".\";\r\n}\r\n","/** @module util *//***/\r\n\r\nconst indentX1 = \"  \";\r\nconst indentX2 = \"    \";\r\nconst indentX4 = \"        \";\r\n\r\n/** Creates an indentation matching the number of specified levels. */\r\nexport function indent(sb: string[], level: i32): void {\r\n  while (level >= 4) {\r\n    sb.push(indentX4);\r\n    level -= 4;\r\n  }\r\n  if (level >= 2) {\r\n    sb.push(indentX2);\r\n    level -= 2;\r\n  }\r\n  if (level) {\r\n    sb.push(indentX1);\r\n  }\r\n}\r\n","/** @module util *//***/\r\n\r\n/** Reads an 8-bit integer from the specified buffer. */\r\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset];\r\n}\r\n\r\n/** Writes an 8-bit integer to the specified buffer. */\r\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset] = value;\r\n}\r\n\r\n/** Reads a 16-bit integer from the specified buffer. */\r\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8;\r\n}\r\n\r\n/** Writes a 16-bit integer to the specified buffer. */\r\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n}\r\n\r\n/** Reads a 32-bit integer from the specified buffer. */\r\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\r\n  return buffer[offset    ]\r\n       | buffer[offset + 1] << 8\r\n       | buffer[offset + 2] << 16\r\n       | buffer[offset + 3] << 24;\r\n}\r\n\r\n/** Writes a 32-bit integer to the specified buffer. */\r\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\r\n  buffer[offset    ] = value;\r\n  buffer[offset + 1] = value >>> 8;\r\n  buffer[offset + 2] = value >>> 16;\r\n  buffer[offset + 3] = value >>> 24;\r\n}\r\n\r\n/** Reads a 64-bit integer from the specified buffer. */\r\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\r\n  var lo = readI32(buffer, offset);\r\n  var hi = readI32(buffer, offset + 4);\r\n  return i64_new(lo, hi);\r\n}\r\n\r\n/** Writes a 64-bit integer to the specified buffer. */\r\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(i64_low(value), buffer, offset);\r\n  writeI32(i64_high(value), buffer, offset + 4);\r\n}\r\n\r\n/** Reads a 32-bit float from the specified buffer. */\r\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\r\n  return i32_as_f32(readI32(buffer, offset));\r\n}\r\n\r\n/** Writes a 32-bit float to the specified buffer. */\r\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\r\n  writeI32(f32_as_i32(value), buffer, offset);\r\n}\r\n\r\n/** Reads a 64-bit float from the specified buffer. */\r\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\r\n  return i64_as_f64(readI64(buffer, offset));\r\n}\r\n\r\n/** Writes a 64-bit float to the specified buffer. */\r\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\r\n  var valueI64 = f64_as_i64(value);\r\n  writeI32(i64_low(valueI64), buffer, offset);\r\n  writeI32(i64_high(valueI64), buffer, offset + 4);\r\n}\r\n","/**\r\n * Low-level C-like compiler API.\r\n * @module index\r\n *//***/\r\n\r\nimport {\r\n  Compiler,\r\n  Options,\r\n  Target,\r\n  Feature\r\n} from \"./compiler\";\r\n\r\nimport {\r\n  Decompiler\r\n} from \"./decompiler\";\r\n\r\nimport {\r\n  IDLBuilder,\r\n  TSDBuilder\r\n} from \"./definitions\";\r\n\r\nimport {\r\n  DiagnosticMessage,\r\n  DiagnosticCategory,\r\n  formatDiagnosticMessage\r\n} from \"./diagnostics\";\r\n\r\nimport {\r\n  Module\r\n} from \"./module\";\r\n\r\nimport {\r\n  Parser\r\n} from \"./parser\";\r\n\r\nimport {\r\n  Program\r\n} from \"./program\";\r\n\r\n/** Parses a source file. If `parser` has been omitted a new one is created. */\r\nexport function parseFile(text: string, path: string, isEntry: bool = false,\r\n  parser: Parser | null = null\r\n): Parser {\r\n  if (!parser) parser = new Parser();\r\n  parser.parseFile(text, path, isEntry);\r\n  return parser;\r\n}\r\n\r\n/** Obtains the next required file's path. Returns `null` once complete. */\r\nexport function nextFile(parser: Parser): string | null {\r\n  return parser.nextFile();\r\n}\r\n\r\n/** Obtains the next diagnostic message. Returns `null` once complete. */\r\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\r\n  var program = parser.program;\r\n  return program.diagnosticsOffset < program.diagnostics.length\r\n    ? program.diagnostics[program.diagnosticsOffset++]\r\n    : null;\r\n}\r\n\r\n/** Formats a diagnostic message to a string. */\r\nexport { formatDiagnosticMessage as formatDiagnostic };\r\n\r\n/** Tests whether a diagnostic is informatory. */\r\nexport function isInfo(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.INFO;\r\n}\r\n\r\n/** Tests whether a diagnostic is a warning. */\r\nexport function isWarning(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.WARNING;\r\n}\r\n\r\n/** Tests whether a diagnostic is an error. */\r\nexport function isError(message: DiagnosticMessage): bool {\r\n  return message.category == DiagnosticCategory.ERROR;\r\n}\r\n\r\n/** Creates a new set of compiler options. */\r\nexport function createOptions(): Options {\r\n  return new Options();\r\n}\r\n\r\n/** Sets the `target` option. */\r\nexport function setTarget(options: Options, target: Target): void {\r\n  options.target = target;\r\n}\r\n\r\n/** Sets the `noAssert` option. */\r\nexport function setNoAssert(options: Options, noAssert: bool): void {\r\n  options.noAssert = noAssert;\r\n}\r\n\r\n/** Sets the `importMemory` option. */\r\nexport function setImportMemory(options: Options, importMemory: bool): void {\r\n  options.importMemory = importMemory;\r\n}\r\n\r\n/** Sets the `sharedMemory` option. */\r\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\r\n  options.sharedMemory = sharedMemory;\r\n}\r\n\r\n/** Sets the `importTable` option. */\r\nexport function setImportTable(options: Options, importTable: bool): void {\r\n  options.importTable = importTable;\r\n}\r\n\r\n/** Sets the `sourceMap` option. */\r\nexport function setSourceMap(options: Options, sourceMap: bool): void {\r\n  options.sourceMap = sourceMap;\r\n}\r\n\r\n/** Sets the `memoryBase` option. */\r\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\r\n  options.memoryBase = memoryBase;\r\n}\r\n\r\n/** Sets a 'globalAliases' value. */\r\nexport function setGlobalAlias(options: Options, name: string, alias: string): void {\r\n  var globalAliases = options.globalAliases;\r\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\r\n  globalAliases.set(name, alias);\r\n}\r\n\r\n/** Sign extension operations. */\r\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\r\n/** Mutable global imports and exports. */\r\nexport const FEATURE_MUTABLE_GLOBAL = Feature.MUTABLE_GLOBAL;\r\n/** Bulk memory operations. */\r\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\r\n/** SIMD types and operations. */\r\nexport const FEATURE_SIMD = Feature.SIMD;\r\n/** Threading and atomic operations. */\r\nexport const FEATURE_THREADS = Feature.THREADS;\r\n\r\n/** Enables a specific feature. */\r\nexport function enableFeature(options: Options, feature: Feature): void {\r\n  options.features |= feature;\r\n}\r\n\r\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\r\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\r\n  options.optimizeLevelHint = optimizeLevel;\r\n  options.shrinkLevelHint = shrinkLevel;\r\n}\r\n\r\n/** Finishes parsing. */\r\nexport function finishParsing(parser: Parser): Program {\r\n  return parser.finish();\r\n}\r\n\r\n/** Compiles the sources computed by the parser to a module. */\r\nexport function compileProgram(program: Program, options: Options | null = null): Module {\r\n  return new Compiler(program, options).compile();\r\n}\r\n\r\n/** Decompiles a module to its (low level) source. */\r\nexport function decompileModule(module: Module): string {\r\n  var decompiler = new Decompiler();\r\n  decompiler.decompile(module);\r\n  return decompiler.finish();\r\n}\r\n\r\n/** Builds WebIDL definitions for the specified program. */\r\nexport function buildIDL(program: Program): string {\r\n  return IDLBuilder.build(program);\r\n}\r\n\r\n/** Builds TypeScript definitions for the specified program. */\r\nexport function buildTSD(program: Program): string {\r\n  return TSDBuilder.build(program);\r\n}\r\n\r\n/** Prefix indicating a library file. */\r\nexport { LIBRARY_PREFIX } from \"./common\";\r\n\r\n// Full API\r\nexport * from \"./ast\";\r\n// export * from \"./binary\";\r\nexport * from \"./common\";\r\nexport * from \"./compiler\";\r\nexport * from \"./decompiler\";\r\nexport * from \"./definitions\";\r\nexport * from \"./diagnosticMessages.generated\";\r\nexport * from \"./diagnostics\";\r\nexport * from \"./flow\";\r\nexport * from \"./module\";\r\nexport * from \"./parser\";\r\nexport * from \"./program\";\r\nexport * from \"./resolver\";\r\nexport * from \"./tokenizer\";\r\nexport * from \"./types\";\r\nexport * from \"./util\";\r\n"],"sourceRoot":""}
>>>>>>> master
